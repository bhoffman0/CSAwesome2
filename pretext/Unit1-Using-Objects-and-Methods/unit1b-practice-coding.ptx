<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="unit1b-practice-coding">
  <title>Coding Practice 1b (1.7-1.15)</title>
  <activity label="exRandom100">
    <statement>
      <p>
        Write the code to print a random number from 1 to 100. You can use
        <c>Math.random()</c> to get a value between 0 and not quite 1.
      </p>
    </statement>

    <program interactive="activecode" language="java">
      <code>
public class Test1
{
    public static void main(String[] args) 
    {
        
    }
}
      </code>
      <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testCheckCodeContains1()
    {
        boolean passed = checkCodeContainsNoRegex("random number up to 100", "Math.random()*100");
        assertTrue(passed);
    }

    @Test
    public void testCheckCodeContains2()
    {
        boolean passed = checkCodeContainsNoRegex("random number starting at 1", "+1");
        assertTrue(passed);
    }

    @Test
    public void testCheckCodeContains3()
    {
        boolean passed = checkCodeContains("casting to int", "(int)");
        assertTrue(passed);
    }
}
      </tests>
    </program>

    <solution>
      <p>
        First multiply the output from Math.random() times 100 and then cast it
        to an integer. This will result in a random number from 0 to 99. Add one
        to make it from 1 to 100.
      </p>

      <program language="java">
        <code>
public class Test1
{
    public static void main(String[] args)
    {
        System.out.println(((int) (Math.random() * 100)) + 1);
    }
}
        </code>
      </program>
    </solution>
  </activity>

  <activity label="circleMethods">
    <statement>
      <p>
        Given the Circle class below, use its constructor to create a circle of
        radius 5.0 and then print out its area using its getArea method.
      </p>
    </statement>

    <program interactive="activecode" language="java">
      <code>
public class Circle
{
    private double radius;
          
    public Circle(double r)
    {
        radius = r;
    }
            
    public double getArea()
    {
        return 3.14159 * radius * radius;
    }
            
    public static void main(String[] args)
    {
        // 1. Create a circle object with a radius of 5.0
    
        // 2. Print out its area using its getArea method

    }
}
      </code>
      <tests>
import static org.junit.Assert.*;
import org.junit.*;
import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
@Test
public void testMain() throws IOException
{
    String output = getMethodOutput("main");
    String expect = "78.53975";
    boolean passed = getResults(expect, output, "Expected output from main");
    assertTrue(passed);
}
@Test
public void test1()
{
    String code = "new Circle(5";
    boolean passed = checkCodeContains(code);
    assertTrue(passed);
}
@Test
public void test2()
{
    String code = ".getArea()";
    boolean passed = checkCodeContains(code);
    assertTrue(passed);
}
}
      </tests>
    </program>

    <solution>
      <p>
        Create a new Circle object with a radius of 5.0 and then print out its
        area using the getArea method.
      </p>

      <program language="java">
        <code>
    public static void main(String[] args)
    {
        Circle c1 = new Circle(5.0);
        System.out.println(c1.getArea());
    }
        </code>
      </program>
    </solution>
  </activity>

  <activity label="tvMethods">
    <statement>
      <p>
        Given the Television class below, use its constructor to create a
        Television object with the brand <c>Sony</c> and price <c>499.99</c>.
        Then print out its brand and price. Finally, set the number of pixels to
        <c>1080</c> and print it out.
      </p>
    </statement>

    <program interactive="activecode" language="java">
      <code>
            class Television
            {
                private double price;
                private String brand;
                private int pixels;
                
                /* Constructor */
                public Television(String b, double p)
                {
                    brand = b;
                    price = p;
                }

                /* Returns price of TV */
                public double getPrice()
                {
                    return price;
                }

                /* Prints out the brand of the TV */
                public void printBrand()
                {
                    System.out.println("Brand: " + brand);
                }
                
                /* Sets the number of pixels for the tv
                   to the argument pixs and prints it out */
                public void setHighDef(int pixs)
                {
                    pixels = pixs;
                    System.out.println("High Def: " + pixels);
                }
            }
            public class TestTelevision
            {
                public static void main(String[] args)
                {
                    // 1. Create a Television object with the brand "Sony" and price 499.99
                    // 2. Print out its brand 
                    // 3. Print out its price 
                    // 4. Set the number of pixels to 1080 

                }
            }
      </code>
      <tests>
import static org.junit.Assert.*;
import org.junit.*;
import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
@Test
public void testMain() throws IOException
{
    String output = getMethodOutput("main");
    String expect = "Brand: Sony\nPrice: 499.99\nHigh Def: 1080";
    boolean passed = getResults(expect, output, "Expected output from main");
    assertTrue(passed);
}
@Test
public void test1()
{
    String code = "new Television(\"Sony\", 499.99)";
    boolean passed = checkCodeContains(code);
    assertTrue(passed);
}
@Test
public void test2()
{
    String code = ".printBrand()";
    boolean passed = checkCodeContains(code);
    assertTrue(passed);
}
@Test
public void test3()
{
    String code = ".getPrice()";
    boolean passed = checkCodeContains(code);
    assertTrue(passed);
}
@Test
public void test4()
{
    String code = ".setHighDef(1080)";
    boolean passed = checkCodeContains(code);
    assertTrue(passed);
}
}
      </tests>
    </program>

    <solution>
      <p>
        Create a new Television object with a brand of "Sony" and a price of
        499.99. Print out its brand and price using the methods in the class.
        Set the number of pixels to 1080 using the setHighDef method.
      </p>

      <program language="java">
        <code>
            public static void main(String[] args)
            {
                // 1. Create a Television object with the brand "Sony" and price 499.99
                Television tv = new Television("Sony", 499.99);
                // 2. Print out its brand 
                tv.printBrand();
                // 3. Print out its price
                System.out.println("Price: " + tv.getPrice()); 
                // 4. Set the number of pixels to 1080 
                tv.setHighDef(1080);
            }
        </code>
      </program>
    </solution>
  </activity>

  <activity label="exFirstLetter">
    <statement>
      <p>
        The following code should get the first letter of the first name, middle
        name, and last name and append (concatenate) them together and then
        return them all in lowercase. However, the code has errors. Fix the code
        so that it compiles and runs correctly.
      </p>
    </statement>

    <program interactive="activecode" language="java">
      <code>
public class Test1
{
    public static void main(String[] args)
    {
        String firstName = "Sofia';
        String middleName = "Maria";
        String lastName  "Hernandez";
        String initials = firstname.substring(0,1) +
                          middleName.subString(0,1) +
                          lastName.substring(0,1);
        System.out.println(initials.toLowerCase();
    }
}
      </code>
      <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "smh";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testCodeContains()
    {
        String target = ".substring(0,1)";
        boolean passed = checkCodeContains("substring method", target);
        assertTrue(passed);
    }
}
      </tests>
    </program>

    <solution>
      <p>
        Line 5 has an ending ' instead of ". Line 7 is missing a =. Line 8 has
        firstname, but it should be firstName. Remember that you should
        uppercase the first letter of each new word, after the first word, to
        make the variable name easier to read (use camel case). Line 9 has
        subString, but the method name is substring. Line 11 is missing a ).
      </p>

      <program language="java">
        <code>
public class Test1
{
    public static void main(String[] args)
    {
        String firstName = "Sofia";
        String middleName = "Maria";
        String lastName = "Hernandez";
        String initials =
                firstName.substring(0, 1)
                        + middleName.substring(0, 1)
                        + lastName.substring(0, 1);
        System.out.println(initials.toLowerCase());
    }
}
        </code>
      </program>
    </solution>
  </activity>

  <activity label="exFirst3Lower">
    <statement>
      <p>
        The following code should print the first 3 letters of the string
        <c>message</c> all in lowercase letters. However, the code has errors.
        Fix the errors so that the code runs as intended.
      </p>
    </statement>

    <program interactive="activecode" language="java">
      <code>
public class Test1
{
    public static void main(String[] args)
    {
        String message = "Meet me by the bridge":
        String part = message.substring(1,3);
        String lower = message.toLowerCase();
        System.println(lower);
    }
}
      </code>
      <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "mee";
        boolean passed = output.equals(expect);
        passed = getResults(expect, output, "Expected output from main", passed);
        assertTrue(passed);
    }

    @Test
    public void testCodeContains()
    {
        String target = ".substring(0,3)";
        boolean passed = checkCodeContains("substring method ", target);
        assertTrue(passed);
    }
}
      </tests>
    </program>

    <solution>
      <p>
        Line 5 ends with : when it should be ;. Line 6 should be substring(0,3).
        Line 7 should be part not message. Line 8 should be System.out.println.
      </p>

      <program language="java">
        <code>
public class Test1
{
    public static void main(String[] args)
    {
        String message = "Meet me by the bridge";
        String part = message.substring(0, 3);
        String lower = part.toLowerCase();
        System.out.println(lower);
    }
}
        </code>
      </program>
    </solution>
  </activity>

  <activity label="exLower">
    <statement>
      <p>
        The following code starts with <c>String name1 = ALEX;</c> and should
        print <c>Alex</c>. Use the <c>toLowerCase</c> and <c>substring</c>
        methods to do this task.
      </p>
    </statement>

    <program interactive="activecode" language="java">
      <code>
public class Test1
{
    public static void main(String[] args)
    {
        String name1 = "ALEX";

        System.out.println(name1);
    }
}
      </code>
      <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Alex";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testCodeContains()
    {
        String target = ".substring(";
        boolean passed = checkCodeContains("substring method", target);
        assertTrue(passed);
    }
}
      </tests>
    </program>

    <solution>
      <p>
        Create a string that is all lowercase. Create a new string from a
        substring of the original string (first letter) and a substring of the
        rest of the string that is all lowercase (all except the first letter).
        Print that string.
      </p>

      <program language="java">
        <code>
public class Test1
{
    public static void main(String[] args)
    {
        String name1 = "ALEX";
        String nameLower = name1.toLowerCase();
        String finalName = name1.substring(0, 1) + nameLower.substring(1);
        System.out.println(finalName);
    }
}
        </code>
      </program>
    </solution>
  </activity>

  <activity label="exRemoveVery">
    <statement>
      <p>
        The following code should remove the word “very ” (and following space)
        from the message and print the new message. You can use <c>indexOf</c>
        to find the position of a substring in your string. You can use
        <c>substring</c> to create a new string removing the word.
      </p>
    </statement>

    <program interactive="activecode" language="java">
      <code>
public class Test1
{
    public static void main(String[] args)
    {
        String message = "I am very happy!";
        String target = "very ";
    }
}
      </code>
      <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "I am happy!";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testCodeContains()
    {
        String target = ".substring(";
        boolean passed = checkCodeContains("substring method", target);
        assertTrue(passed);
    }

    @Test
    public void testCodeContains2()
    {
        String target = ".indexOf(";
        boolean passed = checkCodeContains("indexOf method", target);
        assertTrue(passed);
    }
}
      </tests>
    </program>

    <solution>
      <p>
        Use indexOf to find the position and then create a new message up to the
        pos and again after the target string.
      </p>

      <program language="java">
        <code>
public class Test1
{
    public static void main(String[] args)
    {
        String message = "I am very happy!";
        String target = "very ";
        int pos = message.indexOf(target);
        String newMessage =
                message.substring(0, pos)
                        + message.substring(pos + target.length());
        System.out.println(newMessage);
    }
}
        </code>
      </program>
    </solution>
  </activity>

  <activity label="exReplaceLol">
    <statement>
      <p>
        The following code should replace <c>lol</c> in the message with
        <c>laugh out loud</c> and print the new message using indexOf and
        substring.
      </p>
    </statement>

    <program interactive="activecode" language="java">
      <code>
public class Test1
{
    public static void main(String[] args)
    {
        String message = "That was great - lol.";
    }
}
      </code>
      <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "That was great - laugh out loud";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testCodeContains()
    {
        String target = ".substring(";
        boolean passed = checkCodeContains("substring method", target);
        assertTrue(passed);
    }

    @Test
    public void testCodeContains2()
    {
        String target = ".indexOf(";
        boolean passed = checkCodeContains("indexOf method", target);
        assertTrue(passed);
    }
}
      </tests>
    </program>

    <solution>
      <p>
        Use indexOf to find the position of the “lol” then create a new string
        from up to that position and append the “laugh out loud” and the
        substring after it.
      </p>

      <program language="java">
        <code>
public class Test1
{
    public static void main(String[] args)
    {
        String message = "That was great - lol.";
        String target = "lol";
        int pos = message.indexOf(target);
        String newMessage =
                message.substring(0, pos)
                        + "laugh out loud"
                        + message.substring(pos + target.length());
        System.out.println(newMessage);
    }
}
        </code>
      </program>
    </solution>
  </activity>

  <p>
    For more practice with Strings see problems at <url
    href="http://codingbat.com/java/String-1"
    visual="http://codingbat.com/java/String-1">http://codingbat.com/java/String-1</url>.
  </p>

  <p>
    <ul>
      <li>
        <p>
          <url href="http://codingbat.com/prob/p161056" visual="http://codingbat.com/prob/p161056">http://codingbat.com/prob/p161056</url>
        </p>
      </li>

      <li>
        <p>
          <url href="http://codingbat.com/prob/p147483" visual="http://codingbat.com/prob/p147483">http://codingbat.com/prob/p147483</url>
        </p>
      </li>

      <li>
        <p>
          <url href="http://codingbat.com/prob/p108853" visual="http://codingbat.com/prob/p108853">http://codingbat.com/prob/p108853</url>
        </p>
      </li>

      <li>
        <p>
          <url href="http://codingbat.com/prob/p130896" visual="http://codingbat.com/prob/p130896">http://codingbat.com/prob/p130896</url>
        </p>
      </li>

      <li>
        <p>
          <url href="http://codingbat.com/prob/p130781" visual="http://codingbat.com/prob/p130781">http://codingbat.com/prob/p130781</url>
        </p>
      </li>
    </ul>
  </p>

  <p>Here are some practice coding problems for Turtles.</p>
  <activity label="Turtle-eoc-triangle-ac">
    <statement>
      <p>
        Finish the code below to have <c>t1</c> draw a triangle where all of the
        sides are length 50.
      </p>
    </statement>

    <program interactive="activecode" language="java" datafile="turtleClasses.jar,turtleClasses2.jar">
      <code>
import java.awt.*;
import java.util.*;

public class TurtleTest
{
    public static void main(String[] args)
    {
        World habitat = new World(300, 300);
        Turtle t1 = new Turtle(habitat);

        habitat.show(true);
    }
}
      </code>
    </program>
  </activity>

  <activity label="Turtle-eoc-rect-ac">
    <statement>
      <p>
        Finish the code below to have <c>t1</c> draw a rectangle. The vertical
        sides should be length 50 and the horizontal length 100.
      </p>
    </statement>

    <program interactive="activecode" language="java" datafile="turtleClasses.jar,turtleClasses2.jar">
      <code>
import java.awt.*;
import java.util.*;

public class TurtleTest
{
    public static void main(String[] args)
    {
        World habitat = new World(300, 300);
        Turtle t1 = new Turtle(habitat);

        habitat.show(true);
    }
}
      </code>
    </program>
  </activity>

  <activity label="Turtle-eoc-draw-seven-ac">
    <statement>
      <p>
        Finish the code below to have <c>t1</c> draw the number seven.
      </p>
    </statement>

    <program interactive="activecode" language="java" datafile="turtleClasses.jar,turtleClasses2.jar">
      <code>
import java.util.*;
import java.awt.*;

public class TurtleTest
{
    public static void main(String[] args)
    {
        World habitat = new World(300,300);
        Turtle t1  = new Turtle(habitat);

        habitat.show(true);
    }
}
      </code>
    </program>
  </activity>

  <activity label="Turtle-eoc-draw-four-ac">
    <statement>
      <p>
        Finish the code below to have <c>t1</c> draw the number four.
      </p>
    </statement>

    <program interactive="activecode" language="java" datafile="turtleClasses.jar,turtleClasses2.jar">
      <code>
import java.awt.*;
import java.util.*;

public class TurtleTest
{
    public static void main(String[] args)
    {
        World habitat = new World(300, 300);
        Turtle t1 = new Turtle(habitat);

        habitat.show(true);
    }
}
      </code>
    </program>
  </activity>

  <activity label="Turtle-eoc-draw-interesting-ac">
    <statement>
      <p>
        Finish the code below to have <c>t1</c> draw something interesting.
      </p>
    </statement>

    <program interactive="activecode" language="java" datafile="turtleClasses.jar,turtleClasses2.jar">
      <code>
import java.awt.*;
import java.util.*;

public class TurtleTest
{
    public static void main(String[] args)
    {
        World habitat = new World(300, 300);
        Turtle t1 = new Turtle(habitat);

        habitat.show(true);
    }
}
      </code>
    </program>
  </activity>
</section>

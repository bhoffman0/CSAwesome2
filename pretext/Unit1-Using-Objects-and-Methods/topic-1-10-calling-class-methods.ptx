<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="calling-class-methods">
  <title>Calling Class Methods</title><introduction>
    
    <p>Most of the methods we have used so far are <term>static methods</term>, which are also called <term>class methods</term>. These methods are associated with the class and include the keyword static in the method header. The main method is always static, which also means that there is only one copy of the method.</p>
    <p>Here is a template for a static method. In the <term>method header</term>, the keyword <term>static</term> is used before the <term>return type</term>. Up until now, we have used the keyword <term>void</term> as the return type for methods that do not return a value. We will now look at methods that calculate and return a value of a specific type.</p>
    <program language="java">
      <input>
// static method header
public static return-type method-name(parameters)
{
    // method body
}
</input>
    </program>
  </introduction>
  <subsection>
            <title>Non-void Methods</title>
            
            
            <p>Most of the methods we have used so far have been <term>void methods</term>, which do not return a value. However, many methods act like mathematical functions that calculate and return a value given some arguments. These methods are called <term>non-void methods</term>. You can imagine a non-void method as a calculating machine that takes numbers as arguments and returns a calculated result or like a toaster that takes bread as an argument and changes it to return toast.</p>
            <figure align="center"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Method that takes arguments and returns a value</caption><image source="Unit1-Using-Objects-and-Methods/Figures/function.png" width="71%%" alt="function"/></figure>
            <p>In the next lesson, we will look at the Math library in Java, but consider a simple method that squares a number. For example, <c>square(3)</c> would return 9.</p>
            <figure align="center"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">The Square Method</caption><image source="Unit1-Using-Objects-and-Methods/Figures/square-method.png" width="71%%" alt="Square Method"/></figure>
            <p>Here is a simple implementation of this method which takes an int number as an argument, squares that number, and returns the result.  Notice that instead of <c>static void</c>, the header includes <c>static int</c> to indicate that the method returns an integer value. There could be another <term>overloaded</term> version of this method that takes a double number and returns a double value; remember methods are overloaded when there are multiple methods with the same name but different signatures with a different number or types of parameters.</p>
            <program language="java"><input>
public static int square(int number)
{
    int result = number * number;
    return result;
}
</input></program>
            <p>The <term>return</term> statement is used to return a value from the method back to the calling code. The return value must be the same type as the return type in the method header. The return statement also ends the method execution, so any code after the return statement is not executed. Let’s try this below. Click on the next button to step through the code in the <url href="https://pythontutor.com/render.html#code=public%20class%20SquareMethod%0A%7B%0A%20%20%20%20%20%20%20%20%20public%20static%20int%20square%28int%20number%29%20%0A%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20int%20result%20%3D%20number%20*%20number%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20result%3B%0A%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%0A%20%20%20%20%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20int%20x%20%3D%205%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20int%20y%20%3D%20square%28x%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println%28%22The%20square%20of%20%22%20%2B%20x%20%2B%20%22%20is%20%22%20%2B%20y%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20x%20%3D%204%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println%28%22The%20square%20of%20%22%20%2B%20x%20%2B%20%22%20is%20%22%20%2B%20square%28x%29%29%3B%0A%20%20%20%20%20%20%20%20%20%7D%0A%7D&amp;cumulative=false&amp;curInstr=11&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" visual="https://pythontutor.com/render.html#code=public%20class%20SquareMethod%0A%7B%0A%20%20%20%20%20%20%20%20%20public%20static%20int%20square%28int%20number%29%20%0A%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20int%20result%20%3D%20number%20*%20number%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20result%3B%0A%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%0A%20%20%20%20%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20int%20x%20%3D%205%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20int%20y%20%3D%20square%28x%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println%28%22The%20square%20of%20%22%20%2B%20x%20%2B%20%22%20is%20%22%20%2B%20y%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20x%20%3D%204%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println%28%22The%20square%20of%20%22%20%2B%20x%20%2B%20%22%20is%20%22%20%2B%20square%28x%29%29%3B%0A%20%20%20%20%20%20%20%20%20%7D%0A%7D&amp;cumulative=false&amp;curInstr=11&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false">visualization</url> below and see the variables and the return values.</p>

<program interactive="codelens" language="java">
    <input>
public class SquareMethod
{
   public static int square(int number)
   {
         int result = number * number;
         return result;
   }

   public static void main(String[] args)
   {
         int x = 5;
         int y = square(x);
         System.out.println("The square of " + x + " is " + y);
         x = 4;
         System.out.println("The square of " + x + " is " + square(x));
   }
}
    </input>
</program>
            <p>When calling the <c>square</c> method, the return value can be stored in a variable or used as part of an expression. In the main method above, the variable <c>y</c> is assigned the return value of the <c>square</c> method. The return value can also be used directly in the print statement without storing it in a variable, for example <c>System.out.println(square(4));</c>.</p>
            <program language="java"><input>
// Saving the returned value of the square method in a variable
int y = square(5);
System.out.println(y); // prints 25
// Printing the returned value of the square method directly
System.out.println(square(4)); // prints 16
</input></program>

<exercise label="squareMethod">
    <statement>
            <p>Add another call to the square method in the main method that prints out the square of 6.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class SquareMethod
{
     public static int square(int number)
     {
         int result = number * number;
         return result;
     }

     public static void main(String[] args)
     {
         System.out.println("5 squared is " + square(5));
         // TO DO: Call the square method to print out the square of 6

     }
}
</input><tests>
import static org.junit.Assert.*;
import org.junit.*;
import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void containsCall()
    {
        boolean passed = checkCodeContains("square(6)", "square(6)");
        assertTrue(passed);
    }
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "36";
        boolean passed =
             getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>

    <exercise label="traceMethods1">
        <statement>

            <p> What does the following code print out? (<url href="https://pythontutor.com/render.html#code=%20%20%20%20%20%20public%20class%20MethodTrace%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20public%20static%20int%20square%28int%20x%29%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%28x%20*%20x%29%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20public%20static%20int%20divide%28int%20x,%20int%20y%29%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%28x%20/%20y%29%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println%28square%283%29%20%2B%20divide%285,2%29%29%3B%20%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D&amp;cumulative=false&amp;curInstr=0&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" visual="https://pythontutor.com/render.html#code=%20%20%20%20%20%20public%20class%20MethodTrace%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20public%20static%20int%20square%28int%20x%29%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%28x%20*%20x%29%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20public%20static%20int%20divide%28int%20x,%20int%20y%29%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%28x%20/%20y%29%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println%28square%283%29%20%2B%20divide%285,2%29%29%3B%20%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D&amp;cumulative=false&amp;curInstr=0&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false">visualization</url>)</p>
            <program language="java"><input>
public class MethodTrace
{
    public static int square(int x)
    {
        return (x * x);
    }

    public static int divide(int x, int y)
    {
        return (x / y);
    }

    public static void main(String[] args)
    {
        System.out.println(square(3) + divide(5,2));
    }
}
</input></program>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>11</p>
                </statement>
                <feedback>
                    <p>Yes, the square(3) method is called first and returns 9. Then the divide(5,2) method is called and returns 2 because it does int division and leaves off the decimal part. The sum of 9 and 2 is 11.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>11.5</p>
                </statement>
                <feedback>
                    <p>The divide function does integer division.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>92</p>
                </statement>
                <feedback>
                    <p>The + here will be interpreted as addition since the methods return ints.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>square(3)+divide(5,2)</p>
                </statement>
                <feedback>
                    <p>The square and divide methods are called and return values that are added together.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Nothing, it does not compile.</p>
                </statement>
                <feedback>
                    <p>Try the code in an active code window.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        </subsection>
  <subsection>
            <title>Common Errors with Methods</title>
            <p>A common error with non-void methods is forgetting to do something with the value returned from a method. When you call a method that returns a value, you should do something with that value like assigning it to a variable or printing it out. To use the return value when calling a non-void method, it must be stored in a variable or used as part of an expression.</p>
            <p>Another common error is a mismatch in types or order for the arguments or return values. For example, if a method returns a double value, you cannot assign it to an int variable.</p>

<exercise label="fixMethodCalls">
    <statement>
            <p>Fix the method calls below in the main method. Make sure the type, how many, and order of the arguments match what the methods expect. Are the returned values saved in the right type of variables? Do not change the methods other than main.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class MathMethods
{
     /* square method returns the square of a number.
        Do NOT change */
     public static int square(int number)
     {
         return number * number;
     }

     /** divide method divides x by y to return a double result .
        Do NOT change */
     public static double divide(double x, double y)
     {
         return x / y;
     }

     public static void main(String[] args)
     {
         // TO DO: Fix the method calls and data types below
         // Make sure the type, how many, and order of the
         // arguments match what the methods expect.
         // Make sure they are saved in the right type of variables.
         // result1 should be 4 squared
         // result2 should be 5 divided by 2
         int result1 = square(4.0, 2);
         int result2 = divide(2, 5);
         System.out.println("4 squared is " + result1);
         System.out.println("5 divided by 2 is " + result2);
     }
}
</input><tests>
import static org.junit.Assert.*;
import org.junit.*;
import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void containsType()
    {
        boolean passed = checkCodeContains("correct double type for result2", "double result2");
        assertTrue(passed);
    }
    @Test
    public void containsCall()
    {
        boolean passed = checkCodeContains("call to square with int 4", "square(4)");
        assertTrue(passed);
    }
    @Test
    public void containsCall2()
    {
        boolean passed = checkCodeContains("call to divide with the correct argument order", "divide(5,2)");
        assertTrue(passed);
    }
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "4 squared is 16\n5 divided by 2 is 2.5";
        boolean passed =
             getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
        </subsection>
  <subsection>
            <title>Methods Outside the Class</title>
            <p>In the examples above, we called the methods by using the method name. However, if we call a method from a different class, we need to include its class name. For example, if the <c>square</c> method is in a class called <c>MathFunctions</c>, we would call it as <c>MathFunctions.square(3)</c>. Class methods are typically called using the class name along with the <term>dot operator (.)</term>. When the method call occurs in the defining class, the use of the class name is optional in the call.</p>
            <image source="Unit1-Using-Objects-and-Methods/Figures/pow.png" width="18%%" alt="Pow!"/>
            <p>In the next lesson, we will learn to use the methods in the <c>Math</c> class in Java and will need to call them with the class name <c>Math</c>. There is a method to compute the square of a number in the <c>Math</c> library, but it is called <c>pow</c> instead of square, and it takes 2 arguments to return a number raised to the power of an exponent number. Here’s a quick preview of two of the methods in the Math class:</p>
            <p><ul>
                <li>
                    <p><c>Math.sqrt(double number)</c> : returns the square root of a given number</p>
                </li>
                <li>
                    <p><c>Math.pow(double base, double exponent)</c> : returns <math>base^{exponent}</math>, the value of base, the first argument, raised to the power of exponent, the second argument.</p>
                </li>
            </ul></p>
            <p>Here is an example of how to use these methods:</p>
            <program language="java"><input>
double x = Math.pow(3, 2); // 3^2 is 9.0
double y = Math.sqrt(9); // the square root of 9 is 3.0
</input></program>
        </subsection>
  <subsection>
            <title>Programming Challenge: Ladder on Tower</title>
            <image source="Unit1-Using-Objects-and-Methods/Figures/ladder.png" width="36%%" alt="Ladder on tower"/>
            <p>The Pythagorean theorem states that the length of the hypotenuse (the side
                opposite the right angle in a right triangle) is the square root of the sum
                of the squares of the lengths of the other two sides, also called the “legs” or the width and height of the triangle. (Incidentally, the Pythagorean theorem is named for
                Pythagoras who was also the leader of the gang of Greek mathematicians who legend has it allegedly drowned their fellow mathematician for showing that
                <math>\sqrt{2}</math> is irrational.) Here’s the formula for this theorem:</p>
            <p><ul>
                <li>
                    <p><math>c = \sqrt{a^{2} + b^{2}}</math> where <math>a</math> and <math>b</math> are the width and height of the triangle and <math>c</math> is the length of the hypotenuse.</p>
                </li>
            </ul></p>
            <p>One common use for the Pythagorean theorem is to calculate the length of
                ladder you will need to reach the window of your beloved, given that their
                cruel parents have locked them in a tower surrounded by a moat. The ladder
                will be the hypotenuse of a triangle whose legs are the height of the window
                of your beloved’s room in the tower and the width of the moat since you have
                to place the base of the ladder on the edge of the moat.</p>

    <exercise label="hypotenuse-java-mc">
        <statement>

            <p> Which of the following are correct Java expressions to compute the hypotenuse of
                a triangle with legs <c>a</c> and <c>b</c> given the Pythagorean Theorem <math>c = \sqrt{a^{2} + b^{2}}</math> where
                <math>a</math> and <math>b</math> are the lengths of the legs and <math>c</math> is the
                length of the hypotenuse?</p>
</statement><choices><choice correct="yes"><statement id="hypotenuse-java-mc_opt_a">            <p><c>Math.sqrt(a * a + b * b)</c></p>
</statement><feedback id="hypotenuse-java-mc_opt_a">
            <p>✅ <c>a * a</c> is a squared, likewise <c>b * b</c>. Adding them with <c>+</c>
                gives us the sum which is then passed to <c>Math.sqrt</c>.</p>
</feedback></choice><choice correct="yes"><statement id="hypotenuse-java-mc_opt_b">            <p><c>Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2))</c></p>
</statement><feedback id="hypotenuse-java-mc_opt_b">
            <p>✅ <c>Math.pow(a, 2)</c> is <c>a</c> squared, likewise <c>Math.pow(b, 2)</c>.
                Adding them with <c>+</c> gives us the sum which is then passed to
                <c>Math.sqrt</c>.</p>
</feedback></choice><choice><statement id="hypotenuse-java-mc_opt_c">            <p><c>Math.sqrt(a + b)</c></p>
</statement><feedback id="hypotenuse-java-mc_opt_c">
            <p>❌ Close, but we need to square the lengths of the legs.</p>
</feedback></choice><choice><statement id="hypotenuse-java-mc_opt_d">            <p><c>a * a + b * b</c></p>
</statement><feedback id="hypotenuse-java-mc_opt_d">
            <p>❌ This is the sum of the squares of the lengths of the legs which gives
                us the square of the hypotenuse. We need a <c>Math.sqrt</c> to get the
                length of the hypotenuse.</p>
</feedback></choice></choices>

    </exercise>

<exercise label="challenge-1-10-pythagorean">
    <statement>
            <p>Complete the <c>ladderSizeNeeded</c> method below using the Pythagorean Theorem and the <c>Math.sqrt</c> method. Then in the main method, write a method call to test the <c>ladderSizeNeeded</c> method with arguments for the height of 30 and the width of 40. The method should return the length of the ladder needed to reach the window of your beloved.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class LadderHelper
{
    /* ladderSizeNeeded computes the hypotenuse of a right triangle
     * given the lengths of the other two sides.
     * @param height : the height of the window
     * @param width : the width of the moat
     * @return the length of the ladder needed
     */
    public static double ladderSizeNeeded(double height, double width)
    {
        double ladderSize;
        // TODO: Calculate ladderSize using the Pythagorean theorem
        // with the Math.sqrt and Math.pow (or just *) methods
        // using the arguments height and width



        return ladderSize;
    }

    public static void main(String[] argv)
    {
        double size;
        // TODO: Call the ladderSizeNeeded method
        // with the height of 30 and the width of 40 and save it in size.

        System.out.println("Beloved, I need a " + size + " foot ladder!");
    }
}
</input><tests>
import org.junit.Test;
import java.io.IOException;

public class RunestoneTests extends CodeTestHelper
{
    private void check(double height, double width)
    {
        double expected = Math.sqrt(Math.pow(height, 2) + Math.pow(width, 2));
        double got = LadderHelper.ladderSizeNeeded(height, width);
        String label = "ladderSizeNeeded(" + height + ", " + width + ")";
        expectExact(expected, got, label);
    }

    @Test
    public void testMain() throws IOException
    {
        String expected = "Beloved, I need a 50.0 foot ladder!";
        expect(expected, getMethodOutput("main"), "Expected output from main");
    }

    @Test
    public void testShort() {
      check(3, 4);
    }
    @Test
    public void testTall() {
      check(30, 40);
    }

    @Test
    public void testRandom() {
      check(Math.random() * 100, Math.random() * 50);
    }
}
        </tests>
    </program>
</exercise>
        </subsection>
  <subsection>
            <title>Summary</title>
            <p><ul>
                <li>
                    <p>(AP 1.10.A.1) Class methods are associated with the class (not instances of the class which we will see in later lessons).</p>
                </li>
                <li>
                    <p>(AP 1.10.A.2) Class methods include the keyword <term>static</term> in the header before the method name.</p>
                </li>
                <li>
                    <p>(AP 1.9.B.1) A void method does not have a return value and is therefore not called as part of an expression.</p>
                </li>
                <li>
                    <p>(AP 1.9.B.2) A <term>non-void method</term> returns a value that is the same type as the <term>return type</term> in the header.</p>
                </li>
                <li>
                    <p>(AP 1.9.B.2) To use the return value when calling a non-void method, it must be stored in a variable or used as part of an expression.</p>
                </li>
                <li>
                    <p>Common errors with methods are mismatches in the order or type of arguments, return values, and forgetting to do something with the value returned from a method. When you call a method that returns a value, you should do something with that value like assigning it to a variable or printing it out.</p>
                </li>
                <li>
                    <p>(AP 1.10.A.2) Class methods are typically called using the class name along with the dot operator. When the method call occurs in the defining class, the use of the class name is optional in the call.</p>
                </li>
            </ul></p>
        </subsection>
  <subsection>
            <title>AP Practice</title>

    <exercise label="AP1-10-static-method">
        <statement>

            <p> Consider the following method.</p>
            <program language="java"><input>
public static double calculatePizzaBoxes(int numOfPeople, double slicesPerBox)
{ /*implementation not shown */}
</input></program>
            <p>Which of the following lines of code, if located in a method in the same class as calculatePizzaBoxes, will compile without an error?</p>
</statement><choices><choice><statement id="AP1-10-static-method_opt_a">            <p>int result = calculatePizzaBoxes(45, 9.0);</p>
</statement><feedback id="AP1-10-static-method_opt_a">
            <p>The method calculatePizzaBoxes returns a double value that cannot be saved into an int variable.</p>
</feedback></choice><choice><statement id="AP1-10-static-method_opt_b">            <p>double result = calculatePizzaBoxes(45.0, 9.0);</p>
</statement><feedback id="AP1-10-static-method_opt_b">
            <p>The method calculatePizzaBoxes has an int parameter that cannot hold a double value 45.0.</p>
</feedback></choice><choice><statement id="AP1-10-static-method_opt_c">            <p>int result = calculatePizzaBoxes(45.0, 9);</p>
</statement><feedback id="AP1-10-static-method_opt_c">
            <p>The method calculatePizzaBoxes has an int parameter that cannot hold a double value 45.0. Note that the int 9 can be passed into a double parameter.</p>
</feedback></choice><choice correct="yes"><statement id="AP1-10-static-method_opt_d">            <p>double result = calculatePizzaBoxes(45, 9.0);</p>
</statement><feedback id="AP1-10-static-method_opt_d">
            <p>The method calculatePizzaBoxes has an int and a double parameter and returns a double result.</p>
</feedback></choice><choice><statement id="AP1-10-static-method_opt_e">            <p>result = calculatePizzaBoxes(45, 9);</p>
</statement><feedback id="AP1-10-static-method_opt_e">
            <p>The variable result has not been declared (with an appropriate data type).</p>
</feedback></choice></choices>

    </exercise>

    <exercise label="AP1-10-static-method2">
        <statement>

            <p> Consider the following methods:</p>
            <program language="java"><input>
public void static inchesToCentimeters(double i)
{
    double c = i * 2.54;
    printInCentimeters(i, c);
}

public void static printInCentimeters(double inches, double centimeters)
{
    System.out.print(inches + "--&gt;" + centimeters);
}
</input></program>
            <p>Assume that the method call <c>inchesToCentimeters(10)</c> appears in a static method in the same class. What is printed as a result of the method call?</p>
</statement><choices><choice><statement id="AP1-10-static-method2_opt_a">            <p>inches –&gt; centimeters</p>
</statement><feedback id="AP1-10-static-method2_opt_a">
            <p>The values of the variables inches and centimeters should be printed out, not the words.</p>
</feedback></choice><choice><statement id="AP1-10-static-method2_opt_b">            <p>10 –&gt;  25</p>
</statement><feedback id="AP1-10-static-method2_opt_b">
            <p>Two doubles should be printed, not two ints, and the centimeters should be 25.4</p>
</feedback></choice><choice><statement id="AP1-10-static-method2_opt_c">            <p>25.4 –&gt; 10</p>
</statement><feedback id="AP1-10-static-method2_opt_c">
            <p>Inches should be printed before centimeters.</p>
</feedback></choice><choice><statement id="AP1-10-static-method2_opt_d">            <p>10 –&gt; 12.54</p>
</statement><feedback id="AP1-10-static-method2_opt_d">
            <p>c = 10 * 2.54 = 25.4, not 12.54.</p>
</feedback></choice><choice correct="yes"><statement id="AP1-10-static-method2_opt_e">            <p>10.0 –&gt; 25.4</p>
</statement><feedback id="AP1-10-static-method2_opt_e">
            <p>Correct! centimeters = 10 * 2.54 = 25.4.</p>
</feedback></choice></choices>

    </exercise>
        </subsection>
</section>

<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="topic-1-7-APIs-and-libraries">
  <title>APIs and Libraries</title>
  <time minutes="45" />
  <introduction>
    <idx>API</idx>
    <idx>library</idx>
    <idx>package</idx>
    <idx>class</idx>
    <idx>attribute</idx>
    <idx>method</idx>
    <idx>dot operator</idx>
    <idx>behavior</idx>

    <p>
      Earlier in this book, we used code like <c>System.out.println("hello,
      world!")</c> to print to the screen. When we include that code in a
      program, we don’t have to worry about exactly how it works; we just need
      to know what it does. Namely, it causes the text “hello, world!” to appear
      on the screen.
    </p>

    <p>
      A collection of code written by other programmers that we can use 
      is called a <term>library</term> and the details of how to use a library
      are described in its <term>Application Programming Interface</term>, or
      <term>API</term> for short. <c>System.out.println()</c> is part of the
      Java API, a large set of code that comes with Java.
    </p>

    <p>
      APIs and libraries are essential to programming because they allow us to
      focus on the specific task we are trying to accomplish without having to
      rewrite the same bits of functionality over and over.
    </p>

    <figure align="center">
      <caption>Library and API</caption>
      <image source="Unit1-Using-Objects-and-Methods/Figures/api.png" width="50%" alt="Library, API, package, documentation" />
    </figure>
  </introduction>

  <subsection xml:id="classes-attributes-behaviors">
    <title>The Turtle Library: Classes, Attributes, and Behaviors</title>

    <p>
      One of the great things about Java is the number of libraries
      written by other programmers that we can use. One such library is the 
      <c>Turtle</c> Java library, written by one of the author’s of this book,
      Dr. Barbara Ericson and built into this e-book. It allows us to create
      drawings using animated turtles that move around the screen. 
      Try clicking run below to see a turtle in action.
    </p>

      <program interactive="activecode" language="java" datafile="turtleClasses.jar,turtleClasses2.jar">
        <code>
import java.awt.*;
import java.util.*;

public class TurtleTest
{
    public static void main(String[] args)
    {
        // Do not change the next 2 lines
        World habitat = new World(300, 300);
        Turtle yertle = new Turtle(habitat);

        // Code to make yertle move forward and turn right
        yertle.forward();
        yertle.turnRight();
        
        habitat.show(true);
    }
}
        </code>
      </program>

    <p>
      The Turtle library is named after its main <term>class</term>, <c>Turtle</c>. 
      A <term>class</term> defines a specific reference type and is the building block of object-oriented programming.  
      You'll write your own classes in Unit 3, but in this unit,
      we just want to focus on using classes that other programmers have
      written.
    </p>

    <p>
      Each class defines a new kind of value similar to how each primitive
      type like <c>int</c> or <c>double</c> define a
      particular kind of value, such as a 32-bit integer quantity for an
      <c>int</c> or a 64-bit floating point value for a <c>double</c>. These new
      kinds of values, defined by classes, are called <term>objects</term> which
      is where <term>object-oriented programming</term> gets its name. 
      Existing classes like <c>Turtle</c> can be utilized to create Turtle objects like <c>yertle</c> that can move
      around the screen, drawing lines. We will learn more about classes and objects in lesson 1.12.
    </p>

    <p>
      Classes define the structure of objects in terms of
      <term>attributes</term> and <term>behaviors</term>. 
      <term>Attributes</term> refer to the data related to the class and are stored in variables.
      <term>Behaviors</term> refer to what instances of the class can do (or what can be done 
      with them) and are defined by methods.
      The following picture of a turtle shows some of the attributes every
    <c>Turtle</c> object has, such as a <c>color</c>, <c>xPos</c>,
      <c>yPos</c>, and <c>heading</c> as well as behaviors implemented as methods like <c>forward()</c>,
      <c>backward()</c>, <c>turnLeft()</c>, and <c>turnRight()</c> shown in the
      picture written around the turtle.
    </p>

    <figure align="center">
      <caption>Turtle Attributes and Behaviors</caption>
      <image source="Unit1-Using-Objects-and-Methods/Figures/turtleOOD.svg" width="50%" alt="Turtle attributes and behaviors" />
    </figure>

    

    <p>
      The Java program in the exercise
      above creates a <c>Turtle</c> object and stores a reference to it in
      the variable <c>yertle</c>. The following two lines of code are used to
      tell the turtle to move forward and then turn right.
    </p>

    <program language="java">
      <code>
yertle.forward();
yertle.turnRight();
      </code>
    </program>

    <p>
      The period (<c>.</c>) after <c>yertle</c> in both those lines is called
      the <term>dot operator</term> and it allows us to access the attributes
      and methods of an object. In the first line the dot says get the method
      named <c>forward()</c> defined in the <c>Turtle</c> class and call it on the
      turtle object named by the variable <c>yertle</c>. The exact behavior of
      the method will depend on the current values of <c>yertle</c>’s attributes
      such as its color, its x and y position, and its heading. For instance,
      calling <c>forward()</c> will cause the turtle to draw a line from its
      current x and y position to a new position 100 pixels away in whatever
      direction the turtle is facing and the color of the line will be
      determined by the turtle’s color.
    </p>

   <p><term>Documentation</term> found in API specifications and libraries
      is essential to understanding the attributes and behaviors of a
      class defined by the API. Here’s the API documentation that lists all of the Turtle methods found in 
      <url
      href="https://bhoffman0.github.io/JavaTurtles/docs/SimpleTurtle.html">the
      Turtle Javadocs</url>.
      </p>   

<activity label="TurtleAPI">
      <statement>
        <p>
          Try clicking the run button below to see what the following program
          does. Then add 1 more line of code on line 16 to make yertle go
          forward again.
        </p>

        <p>
          If the code below is too slow in your browser, you
          can also see the <c>Turtle</c> code in action at this <url href="https://play.juicemind.com/csawesome2/TurtleAPI">JuiceMind IDE</url>, 
          <url href="https://codehs.com/sandbox/id/turtlejavaswingcode-dSHrzr">CodeHS Sandbox link</url>, or
          <url
          href="https://replit.com/@BerylHoffman/Java-Swing-Turtle#Main.java">replit
          link</url> (refresh page after forking and if it gets stuck) or <url
          href="https://github.com/bhoffman0/CSAwesome2/raw/main/_sources/Unit1-Using-Objects-and-Methods/TurtleJavaSwingCode.zip">
          download the files</url> to use in your own IDE.
        </p>
      </statement>

      <program interactive="activecode" language="java" datafile="turtleClasses.jar,turtleClasses2.jar">
        <code>
import java.awt.*;
import java.util.*;

public class TurtleTest
{
    public static void main(String[] args)
    {
        // Do not change the next 2 lines
        World habitat = new World(300, 300);
        Turtle yertle = new Turtle(habitat);

        // Code to make yertle move forward and turn right
        yertle.forward();
        yertle.turnRight();
        // Add a line of code here to make yertle go forward again

        // Do not change
        habitat.show(true);
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleTest");
    }
    @Test
    public void test1()
    {
        String code = getCode();
        String expect = "yertle.forward";

        int count = countOccurences(code, expect);
        boolean passed = (count &gt;= 2);
        passed = getResults("2+", "" + count, "yertle.forward() count", passed);

        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <activity label="turtle_dir">
      <statement>
        <p>Which way does a turtle face when it is first created?</p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>North</p>
          </statement>

          <feedback>
            <p>
              Turtles start off facing north which is toward the top of the
              page.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>South</p>
          </statement>

          <feedback>
            <p>Which way does yertle first move in the example above?</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>East</p>
          </statement>

          <feedback>
            <p>Which way does yertle first move in the example above?</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>West</p>
          </statement>

          <feedback>
            <p>Which way does yertle first move in the example above?</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="turtle_type">
      <statement>
        <p>
          What does <c>Turtle</c> refer to in the program above?
        </p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>class</p>
          </statement>

          <feedback>
            <p>
              Yes, <c>Turtle</c> is a class that defines the attributes and
              behaviors for all turtles.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>object</p>
          </statement>

          <feedback>
            <p>
              There is an object here: the variable <c>yertle</c> holds a
              reference to an object of type <c>Turtle</c>. But <c>Turtle</c> is
              not the name for a specific object.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>attribute</p>
          </statement>

          <feedback>
            <p>
              An attribute is one part the definition of a class like
              <c>Turtle</c>.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>behavior</p>
          </statement>

          <feedback>
            <p>
              A behavior is something an object can do, defined as a method in
              the class. In the code above <c>forward</c> and <c>turnRight</c>
              are the names of methods defined in the class <c>Turtle</c>.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="type_turn_right">
      <statement>
        <p>
          What does <c>turnRight</c> refer to in the program above?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>object</p>
          </statement>

          <feedback>
            <p>
              In the code above the variable <c>yertle</c> holds a reference to
              an object.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>class</p>
          </statement>

          <feedback>
            <p>
              A class defines the data and behavior for all objects of that
              type. <c>turnRight</c> names just one thing defined in the class
              <c>Turtle</c>
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>attribute</p>
          </statement>

          <feedback>
            <p>
              An attribute is something the object knows about itself. The name
              <c>turnRight</c> refers to something a <c>Turtle</c> object can
              do.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>method</p>
          </statement>

          <feedback>
            <p>
              Yes. A method describes some behavior an object can do like turning
              right. Code outside the class can cause that behavior to happen by
              calling the method.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="type_position">
      <statement>
        <p>
          Every turtle has a position. What kind of program element stores
          information like a turtle’s position?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>object</p>
          </statement>

          <feedback>
            <p>An object has data and behavior.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>class</p>
          </statement>

          <feedback>
            <p>
              A class defines the data and behavior for all objects of that
              type.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>attribute</p>
          </statement>

          <feedback>
            <p>
              An attribute holds information about an object such as its
              position.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>method</p>
          </statement>

          <feedback>
            <p>A method is something an object can do like turn right.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="attributes_class">
      <statement>
        <p>What are attributes of a class?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>Tasks performed by methods defined in a class.</p>
          </statement>

          <feedback>
            <p>Incorrect. Attributes are not methods.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>Data stored in variables defined in a class.</p>
          </statement>

          <feedback>
            <p>
              Correct! Attributes are data related to the class stored in
              variables.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>The arguments of a class</p>
          </statement>

          <feedback>
            <p>Incorrect. Classes do not have arguments.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Packages that contain the class</p>
          </statement>

          <feedback>
            <p>Incorrect. Attributes are not packages.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="parsons_TurtleL" numbered="yes" adaptive="yes" indentation="hide" language="java">
      <statement>
        <sidebyside>
          <p>
            The following program uses a turtle to draw a sideways capital L as
            seen in the image, but the lines are mixed up. The program should do
            all necessary set-up. Then it should ask the turtle to turn right,
            go forward, turn left, and then go forward 50 pixels. Next, it
            should ask the habitat to show itself. Drag the needed blocks of
            statements from the left column to the right column and put them in
            the right order. There are 2 extra blocks that are not needed in a
            correct solution. Then click on Check Me to see if you are right.
            You will be told if any of the lines are in the wrong order or are
            the wrong blocks.
          </p>

          <image source="Unit1-Using-Objects-and-Methods/Figures/turtleForwardLeftForward.png" width="36%" />
        </sidebyside>
      </statement>

      <blocks>
        <block>
          <cline>public class TurtleTest {</cline>
        </block>

        <block>
          <cline>    public static void main(String[] args) {</cline>
        </block>

        <block>
          <cline>        World habitat = new World(300,300);</cline>
          <cline>        Turtle yertle = new Turtle(habitat);</cline>
        </block>

        <block>
          <choice correct="yes">
            <cline>        yertle.turnRight();</cline>
          </choice>

          <choice>
            <cline>        yertle.right();</cline>
          </choice>
        </block>

        <block>
          <choice correct="yes">
            <cline>        yertle.forward();</cline>
          </choice>

          <choice>
            <cline>        yertle.forward()</cline>
          </choice>
        </block>

        <block>
          <cline>        yertle.turnLeft();</cline>
        </block>

        <block>
          <cline>        yertle.forward(50);</cline>
        </block>

        <block>
          <cline>        habitat.show(true);</cline>
        </block>

        <block>
          <cline>    } // end main</cline>
          <cline>} // end class</cline>
        </block>
      </blocks>
    </activity>
  </subsection>

  <subsection xml:id="packages">
    <title>Packages</title>

    <p>
      While classes are the main building blocks of Java programs, most programs
      and libraries are made up of multiple classes that need to be used
      together. In Java, related classes can be grouped together into a
      <term>package</term>. You can think of a package like a folder where you
      store related documents. Classes that work together will likely be
      grouped into a single package just to keep things organized. But more
      importantly, when we want to use a class defined in a package in our own
      program, we can <term>import</term> it and then use it as if we had written
      it in our own program.
    </p>

    <p>
      Because related classes are usually collected into the same package, Java
      programmers tend to use the terms <term>library</term>, <term>API</term>,
      and <term>package</term> somewhat interchangeably. But to be precise, a
      library is a collection of classes written by other programmers that you can use, 
      the library’s API describes how you use it, and the classes in the library are probably
      organized into one or more Java packages.
    </p>

    <p>
      Later on, we will learn to <c>import</c> classes from Java packages to use
      in our code, but first let’s talk about a package whose classes are always
      available in any Java program: <c>java.lang</c>.
    </p>

    <p>
      The <c>java.lang</c> package contains key classes that are fundamental to
      the Java programming language, such as <c>String</c> and <c>System</c>.
      Like all packages that are part of Java, <c>java.lang</c> is documented in
      <term>Javadocs</term>, Java’s version of online <term>API
      documentation</term>. Learning to read and navigate Javadocs is a key part
      of being a Java programmer.
    </p>

    <p> 
      The Javadocs for a class will document all the publicly available
      attributes (called <term>fields</term> in Javadocs) and behaviors (called
      <term>methods</term>). How can you tell fields and methods apart when you
      look at library documentation? Well, for one thing, they’re in different
      sections. And another easy way is that methods will always have
      parentheses after them, for example <c>forward()</c> or <c>println()</c>.
      Sometimes there’s nothing between the parentheses, but they are still
      necessary. Other times they contain data that the method needs to do its
      job, for example what to print. Since attributes, a.k.a. fields, are just
      variables they will not have parentheses after the name.
    </p>

    <activity label="count-println">
      <statement>
        <p>
          Now let’s practice reading Javadocs to better understand the code
          we’ve been using to print to the screen: <c>System.out.println</c>.
        </p>

        <p>
          Take a look at the <url
          href="https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/lang/package-summary.html">Javadocs
          for the <c>java.lang</c> package</url>. Can you find the documentation
          for the <c>System</c> class? The dot after <c>System</c> is the dot
          operator and since the name after the dot, <c>out</c> isn’t followed
          by parenthesis it must be a field rather than a method. See if you can
          find the documentation for the field <c>out</c> in the <c>System</c>
          class. That should tell you that it is an instance of the class
          <c>PrintStream</c>. From there you can click on <c>PrintStream</c> to
          navigate to the <url
          href="https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/io/PrintStream.html">Javadocs</url>
          for that class. Once you’re there, see if you can find the
          documentation for the various versions of the <c>println()</c> method
          that we use to print to the screen.
        </p>

        <p>
          How many <c>println()</c> methods are documented in the <url
          href="https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/io/PrintStream.html"><c>PrintStream</c>
          Javadocs</url>?
        </p>

        <p>
          <fillin mode="string" answer="10" />
        </p>
      </statement>

      <evaluation>
        <evaluate>
          <test>
            <strcmp use-answer="yes" />
            <feedback>
              <p>
                Correct. One for each for nine different argument types plus one
                that takes no arguments and just prints an end-of-line
                character.
              </p>
            </feedback>
          </test>

          <test>
            <!-- else -->
            <feedback>
              <p>Only count the println methods, not print or printf methods.</p>
            </feedback>
          </test>
        </evaluate>
      </evaluation>
    </activity>

    <activity label="API_vocab_match">
      <statement>
        <p>
          Drag the definition from the left and drop it on the correct concept
          on the right. Click the "Check Me" button to see if you are correct.
        </p>
      </statement>

      <feedback>
        <p>Review the summaries above.</p>
      </feedback>

      <cardsort>
        <match>
          <premise order="1">A collection of classes written by other programmers</premise>
          <response>library</response>
        </match>

        <match>
          <premise order="2">
            A collection of related classes organized to be imported into your code
          </premise>

          <response>package</response>
        </match>

        <match>
          <premise order="3">A specification that tells a programmer how to use a library</premise>
          <response>API</response>
        </match>

        <match>
          <premise order="4">The main building block of programs in Java</premise>
          <response>class</response>
        </match>

        <match>
          <premise order="5">A block of code that performs a specific task</premise>
          <response>method</response>
        </match>
      </cardsort>
    </activity>

    <activity label="purpose_apis">
      <statement>
        <p>What is the purpose of APIs and libraries in programming?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>To write new code from scratch</p>
          </statement>

          <feedback>
            <p>
              Incorrect. APIs and libraries allow you to use code written by
              others.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>To use code written by others</p>
          </statement>

          <feedback>
            <p>Correct! APIs and libraries let you use code written by others.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>To create programming languages</p>
          </statement>

          <feedback>
            <p>
              Incorrect. APIs and libraries are are defined <em>in</em> a
              programming language.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>To compile code</p>
          </statement>

          <feedback>
            <p>Incorrect. APIs and libraries are not for compiling code.</p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection xml:id="coding-challenge-turtle-drawing">
    <title>Coding Challenge: Turtle Drawing</title>
    <p>
      Make yertle the Turtle draw a shape. For example, have it draw a square or
      a zigzag shape or a block letter by calling the forward method and a turn
      method multiple times. We encourage you to work in pairs for this
      challenge. In the next lessons, we will draw more complicated shapes. Here
      are some simple turtle methods that you could use or look at <url
      href="https://bhoffman0.github.io/JavaTurtles/docs/SimpleTurtle.html">the
      Turtle Javadocs</url> for the complete list.
    </p>

    <p>
      <ul>
        <li>
          <p>
            <c>yertle.forward();</c>
          </p>
        </li>

        <li>
          <p>
            <c>yertle.turnLeft();</c>
          </p>
        </li>

        <li>
          <p>
            <c>yertle.turnRight();</c>
          </p>
        </li>

        <li>
          <p>
            <c>yertle.backward();</c>
          </p>
        </li>

        <li>
          <p>
            <c>yertle.penUp();</c>
          </p>
        </li>

        <li>
          <p>
            <c>yertle.penDown();</c>
          </p>
        </li>
      </ul>
    </p>

    <project label="challenge1-7-TurtleShape">
      <statement>
        <p>
          Have yertle draw a shape, for example a square or a zigzag shape or a
          block letter by calling the forward method and a turn method multiple
          times.
        </p>
      </statement>

      <program interactive="activecode" language="java" datafile="turtleClasses.jar,turtleClasses2.jar">
        <code>
import java.awt.*;
import java.util.*;

public class TurtleShape
{
    public static void main(String[] args)
    {
        World habitat = new World(500, 500);
        Turtle yertle = new Turtle(habitat);

        // Use any of yertle's methods such as forward, turnRight, and turnLeft
        // to draw a shape

        // Do not change the line below!
        habitat.show(true);
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleShape");
    }

    @Test
    public void test2()
    {
        String code = getCode();
        String right = ".turnRight()";
        String left = ".turnLeft()";

        int countR = countOccurences(code, right);
        int countL = countOccurences(code, left);
        int count = countR + countL;

        boolean passed = (count &gt;= 3);

        passed =
                getResults(
                        "3+ turns",
                        "" + count + "+ turns",
                        "3+ turnRight() or turnLeft()",
                        passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCode();
        String forwards = ".forward";
        String backwards = ".backward";

        int forward = countOccurences(code, forwards);
        int backward = countOccurences(code, backwards);
        int moves = forward + backward;

        boolean passed = (moves &gt;= 4);

        passed =
                getResults(
                        "4+ moves", "" + moves +
                        "+ moves",
                        "forward or backward", passed);
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String[] code = getCode().split("\n");
        int expect = 25;

        boolean passed = code.length &gt;= expect;

        passed =
                getResults(
                        expect + "+ line(s)",
                        "" + code.length + " lines(s)",
                        "More than " + expect + " lines of code",
                        passed);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </project>
  </subsection>

  <subsection xml:id="summary-12">
    <title>Summary</title>
    <p>
      <ul>
        <li>
          <p>
            (AP 1.7.A.1) <term>Libraries</term> are collections of classes
            written by other programmers.
          </p>
        </li>

        <li>
          <p>
            (AP 1.7.A.1) An <term>Application Programming Interface (API)</term>
            specification informs the programmer how to use classes in a
            library.
          </p>
        </li>

        <li>
          <p>
            (AP 1.7.A.1) <term>Documentation</term> found in API specifications and libraries
            is essential to understanding the attributes and behaviors of a
            class defined by the API.
          </p>
        </li>

        <li>
          <p>
            (AP 1.7.A.1) <term>Classes</term> in the APIs and libraries are grouped into
            <term>packages</term> that can be imported into a program.
          </p>
        </li>

        <li>
          <p>
            (AP 1.7.A.1) A <term>class</term> defines a specific reference type
            and is the building block of object-oriented programming. Existing
            classes and class libraries can be utilized to create objects.
          </p>
        </li>

        <li>
          <p>
            (AP 1.7.A.2) <term>Attributes</term> refer to the data related to
            the class and are stored in variables.
          </p>
        </li>

        <li>
          <p>
            (AP 1.7.A.2) <term>Behaviors</term> refer to what instances of the
            class can do (or what can be done with them) and are defined by
            methods.
          </p>
        </li>
      </ul>
    </p>
  </subsection>

<subsection xml:id="ap-practice-api">
    <title>AP Practice</title>
    <p>
      Try these AP practice questions that will help to prepare you for the AP
      Classroom progress checks.
    </p>

    <activity label="AP-API1">
      <statement>
        <p>
          The following is an excerpt from a class specification for the API for a <c>Turtle</c> class. 
        </p>
        <p>
          <ul>
            <li>
              <p>
                An int variable called <c>xPos</c> to represent the x-coordinate of the turtle
              </p>
            </li>

            <li>
              <p>
                An int variable called <c>yPos</c> to represent the y-coordinate of the turtle
              </p>
            </li>

            <li>
              <p>
                A method called <c>forward()</c> that moves the turtle forward by 100 pixels
              </p>
            </li>
            <li>
              <p>
                A method called <c>turnRight()</c> that turns the turtle 90 degrees to the right
              </p>  
            </li>
          </ul>
        </p>

        <p>
          Based on the <c>Turtle</c> API above, which of the following
          descriptions is accurate?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
             <p>The <c>xPos</c> and <c>yPos</c> are behaviors of <c>Turtle</c> objects.</p>
          </statement>

          <feedback>
            <p>No, they are not behaviors because they are not methods.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>The <c>xPos</c> and <c>yPos</c> are attributes of <c>Turtle</c> objects.</p>
          </statement>

          <feedback>
            <p>Yes, attributes are data stored in variables.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p><c>forward</c> is an attribute of <c>Turtle</c> objects.</p>
          </statement>
          <feedback>
            <p>No, <c>forward</c> is a method, not an attribute.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p><c>Turtle</c> is an attribute of the API.</p>
          </statement>

          <feedback>
            <p>No, <c>Turtle</c> is a class, not an attribute.</p>
          </feedback>
        </choice>

      </choices>
    </activity>

    <activity label="AP-API2">
      <statement>
        <p>
          The following is an excerpt from a class specification for the API for a <c>Turtle</c> class. 
        </p>
        <p>
          <ul>
            <li>
              <p>
                An int variable called <c>xPos</c> to represent the x-coordinate of the turtle
              </p>
            </li>

            <li>
              <p>
                An int variable called <c>yPos</c> to represent the y-coordinate of the turtle
              </p>
            </li>

            <li>
              <p>
                A method called <c>forward()</c> that moves the turtle forward by 100 pixels
              </p>
            </li>
            <li>
              <p>
                A method called <c>turnRight()</c> that turns the turtle 90 degrees to the right
              </p>  
            </li>
          </ul>
        </p>

        <p>
          Based on the <c>Turtle</c> API above, which of the following
          descriptions is accurate?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p><c>Turtle</c> is an attribute of the API.</p>
          </statement>

          <feedback>
            <p><c>Turtle</c> is a class, not an attribute.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>The <c>forward</c> method is an attribute of  <c>Turtle</c> objects.</p>
          </statement>

          <feedback>
            <p>The <c>forward</c> method is a behavior, not an attribute.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>The <c>turnRight</c> method is a behavior of  <c>Turtle</c> objects.</p>
          </statement>

          <feedback>
            <p>Yes, methods are behaviors.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p><c>xPos</c> is a behavior of <c>Turtle</c> objects.</p>
          </statement>

          <feedback>
            <p>No, <c>xPos</c> is an attribute of <c>Turtle</c> objects.</p>
          </feedback>
        </choice>

      </choices>
    </activity>

   
  </subsection>
</section>

<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="apis-and-libraries">
  <title>APIs and Libraries</title><introduction>
    
    <p>We have been using the <c>System.out.println()</c> method to print to the screen. This method is part of the Java <term>API (Application Programming Interface)</term>. A <term>method</term> is a block of code that performs a specific task. APIs are connected to <term>libraries</term> which are collections of classes written by other programmers that provide a set of methods that can be used to perform specific tasks. An API specification tells the programmer how to use those classes with methods in a library.</p>
    <p>APIs and libraries are essential to programming because they allow you to use code that has already been written by others. This saves you time and allows you to focus on the specific task you are trying to accomplish.</p>
    <p>Classes in the APIs and libraries are grouped into packages. A <term>package</term> is a collection of related classes and interfaces (which are similar to classes) that can be <term>imported</term> into a program to be used.  A package is like a folder of classes in a library’s file directory and is used to avoid name conflicts. Later on, we will learn to <c>import</c> other Java packages to use in our code, but there is a package that is already built into Java called <c>java.lang</c> that we are already using.</p>
    <p>The terms library, API, and package are often used interchangeably to mean similar things. A library is a collection of classes or code written by other programmers that you can use. An API describes how you use the library. And a package is how Java organizes a library to be used.</p>
  </introduction>
  <subsection>
            <title>java.lang Package</title>
            <p>The <c>java.lang</c> package contains built-in classes and interfaces that are fundamental to the Java programming language, such as the <c>String</c> class and the <c>System</c> class which we use in <c>System.out.println</c>. Take a look at the documentation for the <c>java.lang</c> package at <url href="https://docs.oracle.com/javase/8/docs/api/java/lang/package-summary.html" visual="https://docs.oracle.com/javase/8/docs/api/java/lang/package-summary.html">https://docs.oracle.com/javase/8/docs/api/java/lang/package-summary.html</url>. Can you find the <c>System</c> class in the documentation?</p>
            <p><term>Documentation</term> found in API specifications and libraries is essential to understanding the attributes and behaviors of a class defined by the API. The <c>System</c> class has an object called <c>out</c> that is type <c>PrintStream</c>, and the <c>PrintStream</c> class has a method called <c>println()</c> that we use to print to the screen. How many <c>println()</c> methods are there in the PrintStream class documented at <url href="https://docs.oracle.com/javase/8/docs/api/java/io/PrintStream.html" visual="https://docs.oracle.com/javase/8/docs/api/java/io/PrintStream.html">https://docs.oracle.com/javase/8/docs/api/java/io/PrintStream.html</url>?  One for each type that it can print!</p>

        <exercise label="count-println">
            <statement>
    <p> How many <c>println</c> methods are there in the <c>PrintStream</c> class documented at <url href="https://docs.oracle.com/javase/8/docs/api/java/io/PrintStream.html" visual="https://docs.oracle.com/javase/8/docs/api/java/io/PrintStream.html">https://docs.oracle.com/javase/8/docs/api/java/io/PrintStream.html</url>? <var/>  </p></statement><setup><var><condition number="[10, 10]"><feedback><p>Correct.  One for each type</p></feedback></condition><condition string="^\s*.*\s*$"><feedback><p>Only count the println methods, not print or printf methods.</p></feedback></condition></var></setup></exercise>
<exercise label="API_vocab_match">
    <statement><p>Drag the definition from the left and drop it on the correct concept on the right. Click the "Check Me" button to see if you are correct.</p></statement>
    <feedback><p>Review the summaries above.</p></feedback>
<matches><match order="1"><premise>A collection of classes written by other programmers</premise><response>library</response></match><match order="2"><premise>A collection of related classes organized to be imported into your code</premise><response>package</response></match><match order="3"><premise>A specification that tells the programmer how to use classes in a library</premise><response>API</response></match><match order="4"><premise>The building blocks of Java and object-oriented programming</premise><response>class</response></match><match order="5"><premise>A block of code that performs a specific task</premise><response>method</response></match></matches></exercise>
    <exercise label="purpose_apis">
        <statement>

            <p> What is the purpose of APIs and libraries in programming?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>To write new code from scratch</p>
                </statement>
                <feedback>
                    <p>Incorrect. APIs and libraries allow you to use code written by others.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>To use code written by others</p>
                </statement>
                <feedback>
                    <p>Correct! APIs and libraries are used to use code written by others.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>To create programming languages</p>
                </statement>
                <feedback>
                    <p>Incorrect. APIs and libraries are not for creating programming languages.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>To compile code</p>
                </statement>
                <feedback>
                    <p>Incorrect. APIs and libraries are not for compiling code.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        </subsection>
  <subsection>
            <title>Turtle Library</title>
            <p>The <c>Turtle</c> Java library, written by one of the author’s of this book, Dr. Barbara Ericson, allows you to create drawings using an animated turtle that moves around the screen. The turtle can move forward, turn, and draw lines. The turtle library is a collection of classes that can be imported into your code and is built in to this e-book.</p>
            <p><term>Classes</term> are the building blocks of Java and object-oriented programming. A class defines a specific reference type.  Programmers often create new classes like <c>Turtle</c> so that it can be used as a new data type. Classes like <c>Turtle</c> and class libraries can be utilized to create objects like a particular turtle named <c>yertle</c>.  A class defines the data and behavior for all objects of that type.</p>
            <p>The following picture of a turtle shows some of the Turtle <term>attributes</term> like name, width, height, color in the body of the turtle and its <term>methods</term> like forward(), backward(), written around the turtle.</p>
            <figure align="center"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Turtle Attributes and Behaviors</caption><image source="Unit1-Using-Objects-and-Methods/Figures/turtleOOD.png" width="71%%" alt="Turtle attributes and behaviors"/></figure>
            <p><term>Attributes</term> (which are sometimes called <term>fields</term> in documentation) refer to the data related to the class and are stored in variables. <term>Behaviors</term> refer to what objects of the class can do (or what can be done with it) and are defined by methods. The <c>Turtle</c> class has attributes like <c>name</c>, <c>height</c>, and <c>width</c> that store data about the turtle, and it has behaviors/methods like <c>forward()</c> and <c>turnLeft()</c> that allow the turtle to move and turn.  We will learn more about classes, objects, attributes, and methods in the next lessons, but this lesson introduces them to explore APIs.</p>
            <p>How can you tell attributes and methods apart when you look at library documentation? One easy way is that methods will always have parentheses after them, for example <c>forward()</c> or <c>println()</c>. Sometimes these are empty, but still necessary, and sometimes they contain data that the method needs to do its job, for example what to print. Attributes are variables and will not have parentheses after them. Here’s the API documentation that lists all of the Turtle methods (but not the attributes):
                <url href="https://www2.cs.uic.edu/~i101/doc/SimpleTurtle.html" visual="https://www2.cs.uic.edu/~i101/doc/SimpleTurtle.html">https://www2.cs.uic.edu/~i101/doc/SimpleTurtle.html</url>.</p>
            <p>Try the Java program below that creates a Turtle object called <c>yertle</c> using the Turtle class. The following code is used to tell the turtle to move forward and then turn right. The <term>dot operator</term> (.) is used to run an object’s methods, just like in the <c>System.out.println()</c> method.</p>
            <program language="java"><input>
yertle.forward();
yertle.turnRight();
</input></program>

<exercise label="TurtleAPI">
    <statement>
            <p>Try clicking the run button below to see what the following program does. Then add 1 more line of code on line 16 to make yertle go forward() again.
                (If the code below does not work or is too slow in your browser, you can also see the <c>Turtle</c> code in action at this <url href="https://replit.com/@BerylHoffman/Java-Swing-Turtle#Main.java" visual="https://replit.com/@BerylHoffman/Java-Swing-Turtle#Main.java">replit link</url> (refresh page after forking and if it gets stuck) or download the files <url href="https://github.com/bhoffman0/CSAwesome2/raw/main/_sources/Unit1-Using-Objects-and-Methods/TurtleJavaSwingCode.zip" visual="https://github.com/bhoffman0/CSAwesome2/raw/main/_sources/Unit1-Using-Objects-and-Methods/TurtleJavaSwingCode.zip">here</url> to use in your own IDE.)</p>

    </statement>
    <program interactive="activecode" language="java" datafile="turtleClasses.jar,turtleClasses2.jar">
        <input>
import java.awt.*;
import java.util.*;

public class TurtleTest
{
    public static void main(String[] args)
    {
        // Do not change the next 2 lines
        World habitat = new World(300, 300);
        Turtle yertle = new Turtle(habitat);

        // Code to make yertle move forward and turn right
        yertle.forward();
        yertle.turnRight();
        // Add a line of code to make yertle go forward() again



        // Do not change
        habitat.show(true);
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleTest");
    }
    @Test
    public void test1()
    {
        String code = getCode();
        String expect = "yertle.forward";

        int count = countOccurences(code, expect);
        boolean passed = (count &gt;= 2);
        passed = getResults("2+", "" + count, "yertle.forward() count", passed);

        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>

    <exercise label="turtle_dir">
        <statement>

            <p> Which way does a turtle face when it is first created?</p>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>North</p>
                </statement>
                <feedback>
                    <p>Turtles start off facing north which is toward the top of the page.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>South</p>
                </statement>
                <feedback>
                    <p>Which way does yertle first move in the example above?</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>East</p>
                </statement>
                <feedback>
                    <p>Which way does yertle first move in the example above?</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>West</p>
                </statement>
                <feedback>
                    <p>Which way does yertle first move in the example above?</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="turtle_type">
        <statement>

            <p> What type of thing is Turtle in the program above?</p>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>class</p>
                </statement>
                <feedback>
                    <p>Yes, Turtle is a class that defines the data and behaviors for all turtles.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>object</p>
                </statement>
                <feedback>
                    <p>yertle is an object of type Turtle.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>attribute</p>
                </statement>
                <feedback>
                    <p>An attribute is something the object knows about itself.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>method</p>
                </statement>
                <feedback>
                    <p>A method is something an object can do like go forward.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="type_turn_right">
        <statement>

            <p> What type of thing is turnRight in the program above?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>object</p>
                </statement>
                <feedback>
                    <p>An object has data and behavior.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>class</p>
                </statement>
                <feedback>
                    <p>A class defines the data and behavior for all objects of that type.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>attribute</p>
                </statement>
                <feedback>
                    <p>An attribute is something the object knows about itself.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>method</p>
                </statement>
                <feedback>
                    <p>A behavior or method is something an object can do like turn right.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="type_position">
        <statement>

            <p> What type of thing is the position of a turtle in a world?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>object</p>
                </statement>
                <feedback>
                    <p>An object has data and behavior.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>class</p>
                </statement>
                <feedback>
                    <p>A class defines the data and behavior for all objects of that type.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>attribute</p>
                </statement>
                <feedback>
                    <p>An attribute is something the object knows about itself like its position.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>method</p>
                </statement>
                <feedback>
                    <p>A method is something an object can do like turn right.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="attributes_class">
        <statement>

            <p> What are attributes of a class?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Methods that perform tasks</p>
                </statement>
                <feedback>
                    <p>Incorrect. Attributes are not methods.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Data related to the class stored in variables</p>
                </statement>
                <feedback>
                    <p>Correct! Attributes are data related to the class stored in variables.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The arguments of a class</p>
                </statement>
                <feedback>
                    <p>Incorrect. Classes do not have arguments.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Packages that contain the class</p>
                </statement>
                <feedback>
                    <p>Incorrect. Attributes are not packages.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            <image source="Unit1-Using-Objects-and-Methods/Figures/turtleForwardLeftForward.png" width="36%%"/>
<exercise label="parsons_TurtleL" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
            <p>The following program uses a turtle to draw a sideways capital L as seen in the image, but the lines are mixed up.  The program should do all necessary set-up. Then it should ask the turtle to turn right, go forward, turn left, and then go forward 50 pixels. Next, it should ask the habitat to show itself. Drag the needed blocks of statements from the left column to the right column and put them in the right order.  There are 2 extra blocks that are not needed in a correct solution.  Then click on Check Me to see if you are right. You will be told if any of the lines are in the wrong order or are the wrong blocks.</p>
</statement>
<blocks><block order="9">
<cline>import java.util.*;</cline>
<cline>import java.awt.*;</cline>
</block><block order="5">
<cline>public class TurtleTest {</cline>
</block><block order="2">
<cline>    public static void main(String[] args) {</cline>
</block><block order="12">
<cline>        World habitat = new World(300,300);</cline>
<cline>        Turtle yertle = new Turtle(habitat);</cline>
</block><block order="6">
<choice correct="yes"><cline>        yertle.turnRight();</cline>
</choice><choice><cline>        yertle.right(); </cline>
</choice></block><block order="7">
<choice correct="yes"><cline>        yertle.forward();</cline>
</choice><choice><cline>        yertle.forward() </cline>
</choice></block><block order="11">
<cline>        yertle.turnLeft();</cline>
</block><block order="10">
<cline>        yertle.forward(50);</cline>
</block><block order="3">
<cline>        habitat.show(true);</cline>
</block><block order="8">
<cline>    } // end main</cline>
<cline>} // end class</cline>
</block></blocks></exercise>        </subsection>
  <subsection>
            <title>Coding Challenge : Turtle Drawing</title>
            <p>Make yertle the Turtle draw a shape.  For example, have it draw a square or a zigzag shape or a block letter by calling the forward method and a turn method multiple times. We encourage you to work in pairs for this challenge. In the next lessons, we will draw more complicated shapes. Here are some simple turtle methods that you could use or check the API at <url href="https://www2.cs.uic.edu/~i101/doc/SimpleTurtle.html" visual="https://www2.cs.uic.edu/~i101/doc/SimpleTurtle.html">https://www2.cs.uic.edu/~i101/doc/SimpleTurtle.html</url>:</p>
            <p><ul>
                <li>
                    <p><c>yertle.forward();</c></p>
                </li>
                <li>
                    <p><c>yertle.turnLeft();</c></p>
                </li>
                <li>
                    <p><c>yertle.turnRight();</c></p>
                </li>
                <li>
                    <p><c>yertle.backward();</c></p>
                </li>
                <li>
                    <p><c>yertle.penUp();</c></p>
                </li>
                <li>
                    <p><c>yertle.penDown();</c></p>
                </li>
            </ul></p>

<exercise label="challenge1-7-TurtleShape">
    <statement>
            <p>Have yertle draw a shape, for example a square or a zigzag shape or a block letter by calling the forward method and a turn method multiple times.</p>

    </statement>
    <program interactive="activecode" language="java" datafile="turtleClasses.jar,turtleClasses2.jar">
        <input>
import java.awt.*;
import java.util.*;

public class TurtleShape
{
    public static void main(String[] args)
    {
        World habitat = new World(500, 500);
        Turtle yertle = new Turtle(habitat);

        // Use yertle's forward and turnRight or turnLeft methods to draw a shape




        // Do not change the line below!
        habitat.show(true);
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleShape");
    }

    @Test
    public void test2()
    {
        String code = getCode();
        String right = ".turnRight()";
        String left = ".turnLeft()";

        int countR = countOccurences(code, right);
        int countL = countOccurences(code, left);
        int count = countR + countL;

        boolean passed = (count &gt;= 3);

        passed =
                getResults(
                        "3+ turns",
                        "" + count + "+ turns",
                        "3+ turnRight() or turnLeft()",
                        passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCode();
        String forwards = ".forward";
        String backwards = ".backward";

        int forward = countOccurences(code, forwards);
        int backward = countOccurences(code, backwards);
        int moves = forward + backward;

        boolean passed = (moves &gt;= 4);

        passed =
                getResults(
                        "4+ moves", "" + moves +
                        "+ moves",
                        "forward or backward", passed);
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String[] code = getCode().split("\n");
        int expect = 25;

        boolean passed = code.length &gt;= expect;

        passed =
                getResults(
                        expect + "+ line(s)",
                        "" + code.length + " lines(s)",
                        "More than " + expect + " lines of code",
                        passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
        </subsection>
  <subsection>
            <title>Summary</title>
            <p><ul>
                <li>
                    <p>(AP 1.7.A.1) <term>Libraries</term> are collections of classes written by other programmers.</p>
                </li>
                <li>
                    <p>(AP 1.7.A.1) An <term>Application Programming Interface (API)</term> specification informs the programmer how to use classes in a library.</p>
                </li>
                <li>
                    <p>(AP 1.7.A.1) Documentation found in API specifications and libraries is essential to understanding the attributes and behaviors of a class defined by the API.</p>
                </li>
                <li>
                    <p>(AP 1.7.A.1) Classes in the APIs and libraries are grouped into <term>packages</term> that can be imported into a program.</p>
                </li>
                <li>
                    <p>(AP 1.7.A.1) A <term>class</term> defines a specific reference type and is the building block of object-oriented programming. Existing classes and class libraries can be utilized to create objects.</p>
                </li>
                <li>
                    <p>(AP 1.7.A.2) <term>Attributes</term> refer to the data related to the class and are stored in variables.</p>
                </li>
                <li>
                    <p>(AP 1.7.A.2) <term>Behaviors</term> refer to what instances of the class can do (or what can be done with it) and are defined by methods.</p>
                </li>
            </ul></p>
           
        </subsection>
</section>

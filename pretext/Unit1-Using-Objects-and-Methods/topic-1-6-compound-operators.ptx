<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section>
  <title>Compound Assignment Operators</title><introduction>
    
    <p>Compound assignment operators <c>+=</c>, <c>-=</c>, <c>*=</c>, <c>/=</c>, and <c>%=</c> are
            shortcuts that do a math operation and assignment in one step. For example, <c>x +=
1</c> adds 1 to the current value of
            <c>x</c> and assigns the result back to <c>x</c>. It is the same as <c>x = x + 1</c>.
            This pattern is possible with any operator put in front of the <c>=</c> sign, as
            seen below.</p>
    <p>If you need a mnemonic to remember whether the compound operators
            are written like <c>+=</c> or <c>=+</c>, just remember that the operation (<c>+</c>) is
            done first to produce the new value which is then assigned (<c>=</c>) back to the
            variable. So it’s operator then equal sign: <c>+=</c>.</p>
    <p>Since changing the value of a variable by one is especially common, there are
            two extra concise operators <c>++</c> and <c>--</c>, also called the plus-plus or
            <term>increment</term> operator and minus-minus or <term>decrement</term> operator that set a
            variable to one greater or less than its current value.</p>
    <p>Thus <c>x++</c> is even more concise way to write <c>x = x + 1</c> than the compound
            operator <c>x += 1</c>. You’ll see this shortcut used a lot in loops when we get to
            them. Similarly, <c>y--</c> is a more concise way to write <c>y = y - 1</c>.
            These shortcuts only exist for <c>+</c> and <c>-</c> as they don’t really make sense
            for other operators.</p>
    <note>
            <p>If you’ve heard of the programming language C++, the name is an inside joke
                that C, an earlier language which C++ is based on, had been incremented or
                improved to create C++.</p>
        </note>
    <p>Here’s a table of all the compound arithmetic operators and the extra concise
            incremend and decrement operators and how they relate to fully written out
            assignment expressions. You can run the code below the table to see these
            shortcut operators in action!</p>
    <table>
    <tabular>
            
                
                
                
                
                
                
                
                    <row header="yes">
                        <cell>
                            Operator
                        </cell>
                        <cell>
                            <c>+</c>
                        </cell>
                        <cell>
                            <c>-</c>
                        </cell>
                        <cell>
                            <c>*</c>
                        </cell>
                        <cell>
                            <c>/</c>
                        </cell>
                        <cell>
                            <c>%</c>
                        </cell>
                    </row>
                    <row header="yes">
                    </row>
                
                
                    <row>
                        <cell>
                            Written out
                        </cell>
                        <cell>
                            <c>x = x + 1</c>
                        </cell>
                        <cell>
                            <c>x = x - 1</c>
                        </cell>
                        <cell>
                            <c>x = x * 2</c>
                        </cell>
                        <cell>
                            <c>x = x / 2</c>
                        </cell>
                        <cell>
                            <c>x = x % 2</c>
                        </cell>
                    </row>
                    <row>
                    </row>
                    <row>
                        <cell>
                            Compound
                        </cell>
                        <cell>
                            <c>x += 1</c>
                        </cell>
                        <cell>
                            <c>x -= 1</c>
                        </cell>
                        <cell>
                            <c>x *= 2</c>
                        </cell>
                        <cell>
                            <c>x /= 2</c>
                        </cell>
                        <cell>
                            <c>x %= 2</c>
                        </cell>
                    </row>
                    <row>
                    </row>
                    <row>
                        <cell>
                            Extra concise
                        </cell>
                        <cell>
                            <c>x++</c>
                        </cell>
                        <cell>
                            <c>x--</c>
                        </cell>
                        <cell>
                        </cell>
                        <cell>
                        </cell>
                        <cell>
                        </cell>
                    </row>
                    <row>
                    </row>
                
            
        </tabular>
  </table>
    <note>
            <p>If you look at real-world Java code, you may occassionally see the <c>++</c> and
                <c>--</c> operators used before the name of the variable, like <c>++x</c> rather
                than <c>x++</c>. That is legal but not something that you will see on the AP
                exam.</p>
            <p>If the operator is after the variable name (called the
                <term>postfix</term> operator), the value of the variable is changed <em>after</em> evaluating
                the variable to get its value. And if the operator is before the variable (the
                <term>prefix</term> operator), the value of the variable in incremented <em>before</em> the
                variable is evaluated to get the value of the expression.
                For example, if <c>x</c> is 10 and we write,
                <c>System.out.println(x++)</c> it will print 10 but aftewards <c>x</c> will be 11.
                On the other hand if we write, <c>System.out.println(++x)</c>, it will print 11
                and afterwards the value will be 11.</p>
            <p>The AP exam will never use the prefix form of these operators nor will it use
                the postfix operators in a context where the value of the expression matters.</p>
        </note>
  </introduction>
  <subsection>
            <title>Code Tracing Challenge and Operators Maze</title>
            <p>Use paper and pencil or the question response area below to trace through the following program to determine the values of the variables at the end.</p>
            <p><term>Code Tracing</term> is a technique used to simulate a dry run through the code or pseudocode line by line by hand as if you are the computer executing the code. Tracing can be used for debugging or proving that your program runs correctly or for figuring out what the code actually does.</p>
            <p>Trace tables can be used to track the values of variables as they change throughout a program. To trace through code, write down a variable in each column or row in a table and keep track of its value throughout the program. Some trace tables also keep track of the output and the line number you are currently tracing.</p>
            <figure align="center"><image source="Unit1-Using-Objects-and-Methods/Figures/traceTable.png" width="27%%"/></figure>
            <p>or</p>
            <figure align="center"><image source="Unit1-Using-Objects-and-Methods/Figures/traceInline.png" width="39%%"/></figure>
            <p>Trace through the following code:</p>
            <program language="java"><input>
int x = 0;
int y = 5;
int z = 1;
x++;
y -= 3;
z = x + z;
x = y * z;
y %= 2;
z--;
</input></program>

<exercise label="challenge1-6">
    <statement>
            <p> Write your trace table for x, y, and z here showing their results after each line of code.</p>

    </statement>
</exercise>
            <p>After doing this challenge, play the <url href="https://docs.google.com/document/d/1ZjA8oKeo8FYx2nXX4OOq5lUihopIQQ_HY-eoE5yZkk8/edit?usp=sharing" visual="https://docs.google.com/document/d/1ZjA8oKeo8FYx2nXX4OOq5lUihopIQQ_HY-eoE5yZkk8/edit?usp=sharing">Operators Maze game</url>. See if you and your
                partner can get the highest score!</p>
        </subsection>
  <subsection>
            <title>Summary</title>
            <p><ul>
                <li>
                    <p>(AP 1.6.A.1) Compound assignment operators (<c>+=</c>, <c>-=</c>, <c>*=</c>, <c>/=</c>, <c>%=</c>) can be
                        used in place of the assignment operator in numeric expressions. A compound assignment operator performs the indicated arithmetic operation between the current value of the variable on the left and the value on the right and then assigns the resulting value to the variable on the left.</p>
                </li>
                <li>
                    <p>(AP 1.6.A.2) The increment operator (<c>++</c>) and decrement operator (<c>--</c>) are used to
                        add 1 or subtract 1 from the stored value of a numeric variable. The new value is
                        assigned to the variable.</p>
                </li>
            </ul></p>
        </subsection>
  <exercises>
    <exercise label="lcpp">
    <statement>
        <p>Run the code below to see what the ++ and shorcut operators do. Click on the Show Code Lens button to trace through the code and the variable values change in the visualizer. Try creating more compound assignment statements with shortcut operators and work with a partner to guess what they would print out before running the code.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class Test2
{
    public static void main(String[] args)
    {
        int score = 0;
        System.out.println(score);
        score++;
        System.out.println(score);
        score *= 2;
        System.out.println(score);
        int penalty = 5;
        score -= penalty / 2;
        System.out.println(score);
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "0\n1\n2\n0";

        boolean passed =
                getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="q_trace_increment">
        <statement>

        <p> What are the values of x, y, and z after the following code executes?</p>
        <program language="java"><input>
int x = 0;
int y = 1;
int z = 2;
x--;
y++;
z+=y;
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>x = -1, y = 1, z = 4</p>
                </statement>
                <feedback>
                    <p>This code subtracts one from x, adds one to y, and then sets z to to the value in z plus the current value of y.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>x = -1, y = 2, z = 3</p>
                </statement>
                <feedback>
                    <p>This code subtracts one from x, adds one to y, and then sets z to to the value in z plus the current value of y.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>x = -1, y = 2, z = 2</p>
                </statement>
                <feedback>
                    <p>This code subtracts one from x, adds one to y, and then sets z to to the value in z plus the current value of y.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>x = 0, y = 1, z = 2</p>
                </statement>
                <feedback>
                    <p>This code subtracts one from x, adds one to y, and then sets z to to the value in z plus the current value of y.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>x = -1, y = 2, z = 4</p>
                </statement>
                <feedback>
                    <p>This code subtracts one from x, adds one to y, and then sets z to to the value in z plus the current value of y.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="q_trace_increment2">
        <statement>

        <p> What are the values of x, y, and z after the following code executes?</p>
        <program language="java"><input>
int x = 3;
int y = 5;
int z = 2;
x = z * 2;
y = y / 2;
z++;
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>x = 6, y = 2.5, z = 2</p>
                </statement>
                <feedback>
                    <p>This code sets x to z * 2 (4), y to y divided by 2 (5 / 2 = 2) and z = to z + 1 (2 + 1 = 3).</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>x = 4, y = 2.5, z = 2</p>
                </statement>
                <feedback>
                    <p>This code sets x to z * 2 (4), y to y divided by 2 (5 / 2 = 2) and z = to z + 1 (2 + 1 = 3).</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>x = 6, y = 2, z = 3</p>
                </statement>
                <feedback>
                    <p>This code sets x to z * 2 (4), y to y divided by 2 (5 / 2 = 2) and z = to z + 1 (2 + 1 = 3).</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>x = 4, y = 2.5, z = 3</p>
                </statement>
                <feedback>
                    <p>This code sets x to z * 2 (4), y to y divided by 2 (5 / 2 = 2) and z = to z + 1 (2 + 1 = 3).</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>x = 4, y = 2, z = 3</p>
                </statement>
                <feedback>
                    <p>This code sets x to z * 2 (4), y to y divided by 2 (5 / 2 = 2) and z = to z + 1 (2 + 1 = 3).</p>
                </feedback>
            </choice>
</choices>

    </exercise>
  </exercises>
</section>

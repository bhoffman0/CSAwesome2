<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section xml:id="UNIQUE-ID-000212">
  <title>Methods that Return Values</title>
  <introduction>
    <p>All the methods on <c>Turtle</c> that we&#x2019;ve discussed so far have had a <c>void</c>
            return type. Such methods are sometimes called <term>void methods</term>. Because a
            <c>void</c> method doesn&#x2019;t return any value, the only point of calling one is
            because it does something that can be observed by the user or by other code&#x2014;it
            changes the state of the object or maybe causes something to happen like drawing
            a line on the screen. Or both. These things they do are sometimes called
            &#x201C;effects&#x201D;.</p>
    <p>In contrast, methods with a return type of anything <title_reference>other</title_reference> than <c>void</c> are
            called <term>non-void</term> methods. These methods <term>return</term> a value that the code
            calling the method can use. And because methods are called on an object, these
            methods can be used to return values that tell us things about an object&#x2019;s
            internal state.</p>
    <p>In well-designed programs, non-void methods typically don&#x2019;t have effects; they
            just compute and return a value. And void methods obviously can&#x2019;t return values.
            So most methods are of one kind or the other: either a void method which is
            called for some effect or a non-void method that is called to compute a value
            but otherwise has no effect. To put it another way, void methods <title_reference>do things</title_reference>
            while non-void methods <title_reference>produce values</title_reference>.</p>
  </introduction>
  <subsection xml:id="UNIQUE-ID-000213">
    <title>Accessors / Getters</title>
    <p>A simple kind of method that returns a value is what is formally called an
                <term>accessor</term> because it accesses a value in an object. In the real world
                everyone calls them <term>getters</term>. A getter is a method that takes no arguments
                and has a non-<c>void</c> return type. In Java they are almost always named
                something that starts with <c>get</c>, and they usually just return the value of one
                of the object&#x2019;s instance variables. For example, the <c>Turtle</c> class has
                several getters, <c>getWidth</c> and <c>getHeight</c> which return the width and the
                height of a <c>Turtle</c> object and <c>getXPos</c> and <c>getYPos</c> which return the x
                and y values of the <c>Turtle</c>&#x2019;s position.</p>
    <p>That means that after you construct a <c>Turtle</c>, either at the default position
                in the middle of the <c>World</c> or by specifying a starting point as arguments to
                the constructor, you don&#x2019;t need to keep track of where you put it; you can
                always get its current position with the <c>getXPos</c> and <c>getYPos</c> getters.
                Better yet, after creating a <c>Turtle</c> and moving it all around with the
                <c>forward</c> and <c>turn</c> methods we discussed in the previous section, you don&#x2019;t
                have to figure out where it ended up; you can just ask it for its new position,
                again with the <c>getXPos</c> and <c>getYPos</c> getters.</p>
    <p>Note that when you use a getter, you need to do something with the value it
                returns. You might assign it to a variable, use it in an expression, or print it
                out. If you don&#x2019;t, you&#x2019;re just getting a value and doing nothing with it&#x2014;you
                might as well not have bothered to call the getter in the first place.</p>
    <p>Here are some examples of using getters on the <c>Turtle</c> object <c>yertle</c>.</p>
    <program language="java">
      <input>
Turtle yertle = new Turtle(world);
int width = yertle.getWidth();
int height = yertle.getHeight();
System.out.println("Yertle's width is: " + width);
System.out.println("Yertle's height is: " + height);
System.out.println("Yertle's x position is: " + yertle.getXPos() );
System.out.println("Yertle's y position is: " + yertle.getYPos() );
</input>
    </program>
    <note>
      <p>A common error is forgetting to do something with the value returned from a method. When you call a method that returns a value, you should do something with that value like assigning it to a variable or printing it out.</p>
    </note>
    <p>
      <image source="../_static/codingExercise.png" width="NaN%" alt="coding exercise"/>
      <term>Coding Exercise:</term>
    </p>
    <exercise label="TurtleTestGetSet">
      <statement>
        <p>Try the code below that creates a turtle and moves it around a bit. Can you
                confirm that its new position matches what you&#x2019;d expect given the movements
                it made? Try changing where it moves to make sure.</p>
        <p>(If the code below does not work in your browser, you can also copy in the
                code below into the Turtle code at this <url href="https://replit.com/@BerylHoffman/Java-Swing-Turtle#Main.java" visual="https://replit.com/@BerylHoffman/Java-Swing-Turtle#Main.java">replit.com link</url> (refresh page after
                forking and if it gets stuck) or download the files <url href="https://github.com/bhoffman0/APCSA-2019/tree/master/_sources/Unit2-Using-Objects/TurtleJavaSwingCode.zip" visual="https://github.com/bhoffman0/APCSA-2019/tree/master/_sources/Unit2-Using-Objects/TurtleJavaSwingCode.zip">here</url> to use in your
                own IDE.)</p>
      </statement>
      <program xml:id="UNIQUE-ID-000214" interactive="activecode" language="java">
        <input>
import java.awt.*;
import java.util.*;

public class TurtleTestGetSet
{
    public static void main(String[] args)
    {
        World world = new World(300, 300);
        Turtle yertle = new Turtle(world);
        System.out.println(
                "Yertle is starting at: "
                        + yertle.getXPos()
                        + ", "
                        + yertle.getYPos());
        yertle.forward(100);
        yertle.turn(90);
        yertle.forward(50);
        System.out.println(
                "Yertle has ended up at: "
                        + yertle.getXPos()
                        + ", "
                        + yertle.getYPos());
        world.show(true);
    }
}

        </input>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleTestGetSet");
    }

    @Test
    public void test1()
    {
        String orig =
                "import java.awt.*;\n"
                    + "import java.util.*;\n\n"
                    + "public class TurtleTestGetSet\n"
                    + "{\n"
                    + "public static void main(String[] args)\n"
                    + "{\n"
                    + "World world = new World(300,300);\n"
                    + "Turtle yertle = new Turtle(world);\n"
                    + "System.out.println(\"Yertle is starting at: \" + yertle.getXPos() + \", \" +"
                    + " yertle.getYPos());\n"
                    + "yertle.forward(100);\n"
                    + "yertle.turn(90);\n"
                    + "yertle.forward(50);\n"
                    + "System.out.println(\"Yertle has ended up at: \" + yertle.getXPos() + \", \" +"
                    + " yertle.getYPos());\n"
                    + "world.show(true);\n"
                    + "}\n"
                    + "}\n";
        boolean passed = codeChanged(orig);
        assertTrue(passed);
    }
}
</tests>
      </program>
    </exercise>
    <p>
      <image source="../_static/codingExercise.png" width="NaN%" alt="coding exercise"/>
      <term>Coding Exercise:</term>
    </p>
    <exercise label="TurtleArea">
      <statement>
        <p>Fix the errors in the code below so that it prints out the area of the space
                that the turtle occupies by multiplying its width and height. Remember that
                you have to do something with the values that the get methods return.</p>
      </statement>
      <program xml:id="UNIQUE-ID-000215" interactive="activecode" language="java">
        <input>
import java.awt.*;
import java.lang.Math;
import java.util.*;

public class TurtleArea
{
    public static void main(String[] args)
    {
        World world = new World(300,300);
        Turtle yertle = new Turtle(world);

        int area;
        yertle.getWidth() * getHeight;
        System.out.println("Yertle's area is: ");
    }
}
        </input>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleArea");
    }

    @Test
    public void test1()
    {
        String actual = getMethodOutput("main");
        String expected = "Yertle's area is: 270";
        boolean passed = getResults(expected, actual, "Prints correct answer");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String code = getCode();
        String target = ".getHeight()";

        int num = countOccurences(code, target);

        boolean passed = num &gt;= 1;

        getResults("1+", "" + num, "Calls to " + target, passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCode();
        String target = ".getWidth()";

        int num = countOccurences(code, target);

        boolean passed = num &gt;= 1;

        getResults("1+", "" + num, "Calls to " + target, passed);
        assertTrue(passed);
    }
}
</tests>
      </program>
    </exercise>
    <p>
      <image source="../_static/codingExercise.png" width="NaN%" alt="coding exercise"/>
      <term>Coding Exercise:</term>
    </p>
    <exercise label="TurtleTestMethodsReturn2">
      <statement>
        <p>Try some of the <c>Turtle</c> getters in the program below. Remember that you
                have to print out the values the getters return in order to see them!
                Calling a getter just gets a value; it&#x2019;s up to you to do something with it.</p>
      </statement>
      <program xml:id="UNIQUE-ID-000216" interactive="activecode" language="java">
        <input>
import java.awt.*;
import java.util.*;

public class TurtleTestMethods2
{
    public static void main(String[] args)
    {
        World world = new World(300, 300);
        Turtle yertle = new Turtle(world);

        // Try some get methods here!

        world.show(true);
    }
}

        </input>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleTestMethods2");
    }

    @Test
    public void test1()
    {
        String code = getCode();
        int num = countOccurences(code, "getWidth()");

        boolean passed = num &gt; 0;
        getResults("&gt;=1", "" + num, "Calls to getWidth()", passed);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String code = getCode();
        int num = countOccurences(code, "getHeight()");

        boolean passed = num &gt; 0;
        getResults("&gt;=1", "" + num, "Calls to getHeight()", passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCode();
        int num =
                countOccurences(code, "toString()")
                        + countOccurences(code, "System.out.println(yertle)");

        boolean passed = num &gt; 0;
        getResults("&gt;=1", "" + num, "Calls to toString()", passed);
        assertTrue(passed);
    }
}
</tests>
      </program>
    </exercise>
  </subsection>
  <subsection xml:id="UNIQUE-ID-000217">
    <title>Methods with Arguments and a Return Value</title>
    <p>Since getters take no arguments, all they can do is return a value based on the
                current state of the object. But often it&#x2019;s useful to have methods that compute
                values based on both the current state of the object and some arguments.</p>
    <p>For example, while we could use a <c>Turtle</c>&#x2019;s <c>getXPos</c> and <c>getYPos</c>
                getters and some math (remember your Pythagorean Theorem?) to figure out how far
                away a <c>Turtle</c> is from any given point, if that&#x2019;s a thing we need to do in
                a lot of programs using <c>Turtle</c>, it might be nice to be able to ask a
                <c>Turtle</c> directly for its distance from a given point. After all, it knows
                where it is, so why not do the math for us?</p>
    <p>And indeed, the <c>Turtle</c> class has a method called <c>getDistance</c> that takes
                two <c>int</c> arguments representing an <title_reference>x</title_reference> value and a <title_reference>y</title_reference> value and returns the
                distance between the <c>Turtle</c>&#x2019;s current position and that <title_reference>x,y</title_reference> point. This
                is not a getter because it doesn&#x2019;t just get an existing value; it computes a new
                value based on the arguments it is passed as well as the state of the <c>Turtle</c>.</p>
    <p>Methods that take arguments and return values are somewhat like mathematical
                functions. Given some input, they return a value. (Mathematicians expect that a
                function always returns the same value, given the same arguments. So they would
                not consider something like <c>getDistance(x, y)</c> a true function since its
                return value also depends on the current position of the <c>Turtle</c>. But we&#x2019;re
                doing programming, not math.)</p>
    <figure align="center" xml:id="UNIQUE-ID-000218">
      <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 1: Method that takes arguments and returns a value</caption>
      <image source="Unit1-Using-Objects-and-Methods/Figures/function.png" width="NaN%" alt="function"/>
    </figure>
    <p>We will save a deeper discussion of actually writing getters and other methods
                until Unit 5, but for the AP progress checks for this unit, you should be able to
                trace through method calls like the ones below. Notice that the <term>return
                    statement</term> in a method returns the value, and it must match declared return type
                of the method. The calling method must then do something useful with that value.</p>
    <p>
      <image source="../_static/exercise.png" width="NaN%" alt="exercise"/>
      <term>Check your understanding</term>
    </p>
    <exercise label="traceCircleArea">
      <statement>
        <p>2-5-4: Consider the following class definition.</p>
        <program language="java">
          <input>
public class Circle
{
    private double radius;

    public Circle(double r)
    {
        radius = r;
    }

    public double getArea()
    {
        return 3.14159 * radius * radius;
    }
}
</input>
        </program>
        <p>Assume that the following code segment appears in a main method.</p>
        <program language="java">
          <input>
Circle c = new Circle(10);
System.out.println(c.getArea());
</input>
        </program>
        <p>What is printed as a result of executing the code segment? (If you get stuck, try this <url href="https://pythontutor.com/visualize.html#code=public%20class%20Circle%0A%7B%0A%20%20%20%20private%20double%20radius%3B%0A%0A%20%20%20%20public%20Circle%28double%20r%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20radius%20%3D%20r%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20double%20getArea%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20return%203.14159%20*%20radius%20*%20radius%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%7B%0A%20%20%20%20%20%20%20%20Circle%20c%20%3D%20new%20Circle%2810%29%3B%0A%20%20%20%20%20%20%20%20System.out.println%28c.getArea%28%29%29%3B%0A%20%20%20%20%7D%0A%7D&amp;cumulative=false&amp;heapPrimitives=nevernest&amp;mode=edit&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" visual="https://pythontutor.com/visualize.html#code=public%20class%20Circle%0A%7B%0A%20%20%20%20private%20double%20radius%3B%0A%0A%20%20%20%20public%20Circle%28double%20r%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20radius%20%3D%20r%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20double%20getArea%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20return%203.14159%20*%20radius%20*%20radius%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%7B%0A%20%20%20%20%20%20%20%20Circle%20c%20%3D%20new%20Circle%2810%29%3B%0A%20%20%20%20%20%20%20%20System.out.println%28c.getArea%28%29%29%3B%0A%20%20%20%20%7D%0A%7D&amp;cumulative=false&amp;heapPrimitives=nevernest&amp;mode=edit&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false">visualization</url> to see this code in action.)</p>
      </statement>
      <choices>
        <choice>
          <statement>
            <p>0</p>
          </statement>
          <feedback>
            <p>First, call the constructor, then call getArea().</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement>
            <p>314.159</p>
          </statement>
          <feedback>
            <p>Correct! getArea() returns 3.14159 * radius * radius, where radius is set to 10 by the constructor.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>c.getArea()</p>
          </statement>
          <feedback>
            <p>c.getArea() is a method call, not a value.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>The code will not compile.</p>
          </statement>
          <feedback>
            <p>The code does compile.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>100.0</p>
          </statement>
          <feedback>
            <p>Don't forget to multiply by 3.14159.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise label="traceRectangleArea">
      <statement>
        <p>2-5-5: Consider the following class definition.</p>
        <program language="java">
          <input>
public class Rectangle
{
    private int width;
    private int height;

    public Rectangle(int w, int h)
    {
        width = w;
        height = h;
    }

    public void resize(int amt)
    {
        width += amt;
    }

    public int getArea()
    {
        return width * height;
    }
}
</input>
        </program>
        <p>Assume that the following code segment appears in a main method.</p>
        <program language="java">
          <input>
Rectangle r = new Rectangle(10, 15);
r.resize(5);
System.out.println(r.getArea());
</input>
        </program>
        <p>What is printed as a result of executing the code segment? (If you get stuck, try this <url href="https://pythontutor.com/render.html#code=public%20class%20Rectangle%0A%7B%0A%20%20%20%20private%20int%20width%3B%0A%20%20%20%20private%20int%20height%3B%0A%0A%20%20%20%20public%20Rectangle%28int%20w,%20int%20h%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20width%20%3D%20w%3B%0A%20%20%20%20%20%20%20%20height%20%3D%20h%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20void%20resize%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20width%20%2B%3D%205%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20int%20getArea%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20return%20width%20*%20height%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20Rectangle%20r%20%3D%20new%20Rectangle%2810,%2015%29%3B%0A%20%20%20%20%20%20%20%20r.resize%28%29%3B%0A%20%20%20%20%20%20%20%20System.out.println%28r.getArea%28%29%29%3B%0A%20%20%20%20%7D%0A%7D&amp;cumulative=false&amp;curInstr=20&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" visual="https://pythontutor.com/render.html#code=public%20class%20Rectangle%0A%7B%0A%20%20%20%20private%20int%20width%3B%0A%20%20%20%20private%20int%20height%3B%0A%0A%20%20%20%20public%20Rectangle%28int%20w,%20int%20h%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20width%20%3D%20w%3B%0A%20%20%20%20%20%20%20%20height%20%3D%20h%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20void%20resize%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20width%20%2B%3D%205%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20int%20getArea%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20return%20width%20*%20height%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20Rectangle%20r%20%3D%20new%20Rectangle%2810,%2015%29%3B%0A%20%20%20%20%20%20%20%20r.resize%28%29%3B%0A%20%20%20%20%20%20%20%20System.out.println%28r.getArea%28%29%29%3B%0A%20%20%20%20%7D%0A%7D&amp;cumulative=false&amp;curInstr=20&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false">visualization</url> to see this code in action.)</p>
      </statement>
      <choices>
        <choice>
          <statement>
            <p>150</p>
          </statement>
          <feedback>
            <p>Note that the method resize() is called before getArea().</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>150.0</p>
          </statement>
          <feedback>
            <p>Note that the method resize() is called before getArea().</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement>
            <p>225</p>
          </statement>
          <feedback>
            <p>Correct! resize() increases the width by 5, so the area is 15 * 15 = 225.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>255.0</p>
          </statement>
          <feedback>
            <p>Note that getArea() returns an int</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>0</p>
          </statement>
          <feedback>
            <p>Note that the constructor initializes width and height.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise label="traceReturnMethods">
      <statement>
        <p>2-5-6: What does the following code print out? (If you get stuck, try this <url href="http://www.pythontutor.com/visualize.html#code=public%20class%20MethodTrace%20%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20public%20int%20square%28int%20x%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20x*x%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20public%20int%20divide%28int%20x,%20int%20y%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20x/y%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20MethodTrace%20traceObj%20%3D%20new%20MethodTrace%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20System.out.println%28%20traceObj.square%282%29%20%2B%20traceObj.divide%286,2%29%20%29%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%7D&amp;cumulative=false&amp;curInstr=16&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" visual="http://www.pythontutor.com/visualize.html#code=public%20class%20MethodTrace%20%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20public%20int%20square%28int%20x%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20x*x%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20public%20int%20divide%28int%20x,%20int%20y%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20x/y%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20MethodTrace%20traceObj%20%3D%20new%20MethodTrace%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20System.out.println%28%20traceObj.square%282%29%20%2B%20traceObj.divide%286,2%29%20%29%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%7D&amp;cumulative=false&amp;curInstr=16&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false">visualization</url> to see this code in action.)</p>
        <program language="java">
          <input>
public class MethodTrace
{
    public int square(int x)
    {
        return x * x;
    }

    public int divide(int x, int y)
    {
        return x / y;
    }

    public static void main(String[] args)
    {
        MethodTrace traceObj = new MethodTrace();
        System.out.println(traceObj.square(2) + traceObj.divide(6, 2));
    }
}
</input>
        </program>
      </statement>
      <choices>
        <choice>
          <statement>
            <p>5</p>
          </statement>
          <feedback>
            <p>Make sure you call both methods and compute the square of 2 and then add the results.</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement>
            <p>7</p>
          </statement>
          <feedback>
            <p>Yes, square(2) returns 4 which is added to divide(6,2) which returns 3. The total of 4 + 3 is 7.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>4 3</p>
          </statement>
          <feedback>
            <p>Make sure you add the results before printing it out.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>2 3</p>
          </statement>
          <feedback>
            <p>Make sure you square(2) and add the results before printing it out.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>Does not compile.</p>
          </statement>
          <feedback>
            <p>Try the code in an active code window.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
  </subsection>
  <subsection xml:id="UNIQUE-ID-000219">
    <title><image source="../_static/groupwork.png" width="NaN%" alt="groupwork"/> Programming Challenge : Turtle Distances</title>
    <p>
      <ol marker="1">
        <li>
          <p>As we mentioned above, <c>Turtle</c> class has a method called
                        <c>getDistance(x,y)</c> which will return the turtle&#x2019;s distance from a point
                        (x,y). Can you find yertle&#x2019;s distance from the point (0,0)?</p>
        </li>
        <li>
          <p>Add another turtle and make both turtles move. Then find the distance between
                        them. You must use the <c>getXPos</c> and <c>getYPos</c> methods as well as the
                        <c>getDistance</c> method.</p>
        </li>
      </ol>
    </p>
    <exercise label="challenge2-5-TurtleDistance">
      <statement>
        <p>Use the <c>getXPos</c>, <c>getYPos</c>, and <c>getDistance(x,y)</c> methods to find yertle&#x2019;s distance from the point (0,0). Add another turtle, move both turtles to different positions, and find the distance between the two turtles.</p>
      </statement>
      <program xml:id="UNIQUE-ID-000220" interactive="activecode" language="java">
        <input>
import java.awt.*;
import java.util.*;

public class TurtleTestDistance
{
    public static void main(String[] args)
    {
        World world = new World(300, 300);
        Turtle yertle = new Turtle(world);

        // Can you find yertle's distance from the point (0,0)?

        // Can you find the distance between 2 turtles?

        world.show(true);
    }
}

        </input>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleTestDistance");
    }

    @Test
    public void test2()
    {
        String code = getCode();
        int num = countOccurences(code, ".getXPos()");

        boolean passed = num &gt; 0;
        getResults("&gt;=1", "" + num, "Calls to getXPos()", passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCode();
        int num = countOccurences(code, ".getYPos()");

        boolean passed = num &gt; 0;
        getResults("&gt;=1", "" + num, "Calls to getYPos()", passed);
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String code = getCode();
        int num = countOccurences(code, ".getDistance(");

        boolean passed = num &gt;= 2;
        getResults("&gt;=2", "" + num, "Calls to getDistance(...)", passed);
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        String code = getCode();
        int num = countOccurences(code, ".getDistance(0,0)");

        boolean passed = num &gt;= 1;
        getResults("&gt;=1", "" + num, "Calls getDistance(0,0)", passed);
        assertTrue(passed);
    }
}
</tests>
      </program>
    </exercise>
  </subsection>
  <subsection xml:id="UNIQUE-ID-000221">
    <title>Summary</title>
    <p>
      <ul>
        <li>
          <p>Non-void methods are methods that return values.</p>
        </li>
        <li>
          <p>Non-void methods typically do not have effects, and are called purely for the
                        value they return.</p>
        </li>
        <li>
          <p>It is up to the caller of a non-void method to do something with the return
                        value, such as assigning it to a variable or using it as part of an
                        expression.</p>
        </li>
        <li>
          <p>The value returned by a method has to match the declared return type of the
                        method. Thus it can only be used where a value of that type is allowed, such
                        as being assigned to a variable of that type. data type must match the return
                        type of the method.</p>
        </li>
      </ul>
    </p>
  </subsection>
  <subsection xml:id="UNIQUE-ID-000222">
    <title>AP Practice</title>
    <exercise label="AP2-5-1">
      <statement>
        <p>2-5-8: Consider the following method.</p>
        <program language="java">
          <input>
public double calculatePizzaBoxes(int numOfPeople, double slicesPerBox)
{ /*implementation not shown */}
</input>
        </program>
        <p>Which of the following lines of code, if located in a method in the same class as calculatePizzaBoxes, will compile without an error?</p>
      </statement>
      <choices>
        <choice>
          <statement id="AP2-5-1_opt_a">
            <p>int result = calculatePizzaBoxes(45, 9.0);</p>
          </statement>
          <feedback id="AP2-5-1_opt_a">
            <p>The method calculatePizzaBoxes returns a double value that cannot be saved into an int variable.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP2-5-1_opt_b">
            <p>double result = calculatePizzaBoxes(45.0, 9.0);</p>
          </statement>
          <feedback id="AP2-5-1_opt_b">
            <p>The method calculatePizzaBoxes has an int parameter that cannot hold a double value 45.0.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP2-5-1_opt_c">
            <p>int result = calculatePizzaBoxes(45.0, 9);</p>
          </statement>
          <feedback id="AP2-5-1_opt_c">
            <p>The method calculatePizzaBoxes has an int parameter that cannot hold a double value 45.0. Note that the int 9 can be passed into a double parameter.</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement id="AP2-5-1_opt_d">
            <p>double result = calculatePizzaBoxes(45, 9.0);</p>
          </statement>
          <feedback id="AP2-5-1_opt_d">
            <p>The method calculatePizzaBoxes has an int and a double parameter and returns a double result.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP2-5-1_opt_e">
            <p>result = calculatePizzaBoxes(45, 9);</p>
          </statement>
          <feedback id="AP2-5-1_opt_e">
            <p>The variable result has not been declared (with an appropriate data type).</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise label="AP2-5-2">
      <statement>
        <p>2-5-9: Consider the following class definition.</p>
        <program language="java">
          <input>
public class Liquid
{
    private double boilingPoint;
    private double freezingPoint;
    private double currentTemp;

    public Liquid()
    {
        currentTemp = 50;
    }

    public void lowerTemp()
    {
        currentTemp -= 10;
    }

    public double getTemp()
    {
        return currentTemp;
    }
}
</input>
        </program>
        <p>Assume that the following code segment appears in a class other than Liquid.</p>
        <program language="java">
          <input>
Liquid water = new Liquid();
water.lowerTemp();
System.out.println(water.getTemp());
</input>
        </program>
        <p>What is printed as a result of executing the code segment? (If you get stuck, try this <url href="https://pythontutor.com/render.html#code=public%20class%20Liquid%20%7B%0A%20%20%0A%20%20%20%20private%20double%20boilingPoint%3B%0A%20%20%20%20private%20double%20freezingPoint%3B%0A%20%20%20%20private%20double%20currentTemp%3B%0A%0A%20%20%20%20public%20Liquid%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20currentTemp%20%3D%2050%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20void%20lowerTemp%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20currentTemp%20-%3D%2010%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20double%20getTemp%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20return%20currentTemp%3B%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20Liquid%20water%20%3D%20new%20Liquid%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20water.lowerTemp%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20System.out.println%28water.getTemp%28%29%29%3B%0A%20%20%20%20%7D%0A%7D&amp;cumulative=false&amp;curInstr=18&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" visual="https://pythontutor.com/render.html#code=public%20class%20Liquid%20%7B%0A%20%20%0A%20%20%20%20private%20double%20boilingPoint%3B%0A%20%20%20%20private%20double%20freezingPoint%3B%0A%20%20%20%20private%20double%20currentTemp%3B%0A%0A%20%20%20%20public%20Liquid%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20currentTemp%20%3D%2050%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20void%20lowerTemp%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20currentTemp%20-%3D%2010%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20double%20getTemp%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20return%20currentTemp%3B%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20Liquid%20water%20%3D%20new%20Liquid%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20water.lowerTemp%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20System.out.println%28water.getTemp%28%29%29%3B%0A%20%20%20%20%7D%0A%7D&amp;cumulative=false&amp;curInstr=18&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false">visualization</url> to see this code in action.)</p>
      </statement>
      <choices>
        <choice>
          <statement id="AP2-5-2_opt_a">
            <p>-10</p>
          </statement>
          <feedback id="AP2-5-2_opt_a">
            <p>The Liquid() constructor sets the currentTemp instance variable to 50 and the lowerTemp() method subtracts 10 from it.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP2-5-2_opt_b">
            <p>50</p>
          </statement>
          <feedback id="AP2-5-2_opt_b">
            <p>The Liquid() constructor sets the currentTemp instance variable to 50 and the lowerTemp() method subtracts 10 from it.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP2-5-2_opt_c">
            <p>water.getTemp()</p>
          </statement>
          <feedback id="AP2-5-2_opt_c">
            <p>The System.out.println will print the value returned from water.getTemp().</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP2-5-2_opt_d">
            <p>The code will not compile.</p>
          </statement>
          <feedback id="AP2-5-2_opt_d">
            <p>This code should compile.</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement id="AP2-5-2_opt_e">
            <p>40.0</p>
          </statement>
          <feedback id="AP2-5-2_opt_e">
            <p>Correct, the Liquid() constructor sets the currentTemp instance variable to 50, and the lowerTemp() method subtracts 10 from it, and getTemp() returns the currentTemp value as a double.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
  </subsection>
</section>

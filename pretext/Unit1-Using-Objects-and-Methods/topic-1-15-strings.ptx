<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="topic-1-15-strings">
  <title>Strings</title>
  <time minutes="90" />
  <introduction>
    <idx>String</idx>
    <idx>object reference</idx>
    <idx>reference</idx>
    <idx>
      <h>String</h><h>definition</h>
    </idx>

    <p>
      <term>Strings</term> in Java are objects of the <c>String</c> class.
      Strings represent sequences of characters and are used to store text like
      names, addresses, or messages. The <c>String</c> class is part of the
      <c>java.lang package</c> which is available by default in all Java
      programs.
    </p>

    <note>
      <p>
        Class names in Java, like <c>String</c>, begin with a capital letter.
        All primitive types: <c>int</c>, <c>double</c>, and <c>boolean</c>,
        begin with a lowercase letter. This is one easy way to tell the
        difference between primitive types and class types.
      </p>
    </note>
  </introduction>

  <subsection>
    <title>String References</title>
    <activity label="lcsb1">
      <statement>
        <p>Run the following code. What does it print?</p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class Test1
{
    public static void main(String[] args)
    {
        String greeting = null;
        System.out.println(greeting);
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "null";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <p>
      The code above declares an object variable named <c>greeting</c> and sets
      the value of greeting to the Java keyword <c>null</c> to show that it
      doesn’t refer to any object yet. So <c>System.out.println(greeting);</c>
      will print <c>null</c>.
    </p>

    <p>
      Object variables <term>refer</term> to objects in memory. A reference is a
      way to find the actual object, like adding a contact to your phone lets
      you reach someone without knowing exactly where they are. The value of
      greeting is null since the string object has not been created yet.
    </p>

    <figure align="center">
      <caption>Initial value for an object reference</caption>
      <image source="Unit1-Using-Objects-and-Methods/Figures/greeting.png" width="9%" />
    </figure>

    <idx>
      <h>String</h><h>creation</h>
    </idx>

    <p>
      In Java there are two ways to create an object of the <c>String</c> class.
      You can use the <c>new</c> keyword followed by a space and then the class
      constructor and then in parentheses you can include values used to
      initialize the fields of the object. This is the standard way to create a
      new object of a class in Java.
    </p>

    <program language="java">
      <code>
String greeting = new String("Hello");
      </code>
    </program>

    <idx>String literal</idx>
    <idx>
      <h>String</h><h>literal</h>
    </idx>

    <p>
      In Java you can also use just a <term>string literal</term>, which is a
      set of characters enclosed in double quotes (<c>"</c>), to create a
      <c>String</c> object.
    </p>

    <program language="java">
      <code>
String greeting = "Hello";
      </code>
    </program>

    <p>
      In both cases an object of the <c>String</c> class will be created in
      memory and the value of the variable greeting will be set to an object
      reference, a way to find that object.
    </p>

    <activity label="lcsbnew">
      <statement>
        <p>
          The code below creates two greeting strings: one using a string
          literal and the other using new and the String constructor. Change the
          code to add 2 new strings called firstName and lastName, one using a
          string literal and the other using new, and print them out with the
          greetings.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class StringTest
{
    public static void main(String[] args)
    {
        String greeting1 = "Hello!";
        String greeting2 = new String("Welcome!");
        System.out.println(greeting1);
        System.out.println(greeting2);
    }
}
        </code>
        <tests>
 import static org.junit.Assert.*;

 import org.junit.*;

 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     @Test
     public void testChangedCode()
     {
         String origCode =
                 "public class StringTest {      public static void main(String[] args)      {"
                         + " String greeting1 = \"Hello!\";        String greeting2 = new"
                         + " String(\"Welcome!\"); System.out.println(greeting1);"
                         + " System.out.println(greeting2); }    }";
         boolean changed = codeChanged(origCode);
         assertTrue(changed);
     }
 }
        </tests>
      </program>
    </activity>

    <activity label="lcsb2">
      <statement>
        <p>
          Now that greeting refers to an actual object we can ask the object
          what class created it. Try the following. What does it print?
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class Test2
{
    public static void main(String[] args)
    {
        String greeting = "Hello";
        Class currClass = greeting.getClass();
        System.out.println(currClass);
        Class parentClass = currClass.getSuperclass();
        System.out.println(parentClass);
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "class java.lang.String\nclass java.lang.Object";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <idx>parent class</idx>
    <idx>superclass</idx>
    <idx>inheritance</idx>
    <idx>package</idx>
    <idx>java.lang</idx>
    <idx>
      <h>package</h><h>java.lang</h>
    </idx>

    <p>
      The code above will first print class <c>java.lang.String</c> since
      <c>greeting</c> was created by the <c>String</c> class. The full name for
      the <c>String</c> class is <c>java.lang.String</c>. The <c>java.lang</c>
      part is the <term>package</term> name. Every class in the Java language is
      in a package and the standard classes like <c>String</c> are in the
      <c>java.lang</c> package. Every object in Java knows the class that
      created it. Also, every class knows its <term>parent</term> class. Yes, a
      class can have a parent class, just as people have parents. But, in Java a
      class can only have one parent. A class can <c>inherit</c> object fields
      and methods from a parent class, just like you might inherit musical
      ability from a parent. The last print statement will print <c>class
      java.lang.Object</c> because the parent class (<term>superclass</term>) of
      the String class is the Object class. All classes in Java inherit from the
      Object class at some point in their ancestry.
    </p>

    <figure align="center">
      <caption>
        Object variable of type String with a reference to a String object which
        has a reference to the String class which has a reference to the Object
        class.
      </caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/stringObject.png" width="89%" />
    </figure>
  </subsection>

  <subsection>
    <title>String Operators - Concatenation</title>
    <idx>
      <h>String</h><h>append</h>
    </idx>

    <p>
      <c>String</c>s can be added to each other to create a new string using the
      <c>+</c> or <c>+=</c> operator . This is also called
      <term>concatenation</term>. You can also add any other kind of value to a
      <c>String</c> with <c>+</c> or <c>+=</c> and the other value will be
      converted to a <c>String</c> automatically.
    </p>

    <p>
      A String object is <term>immutable</term>, meaning once a String object is
      created, its attributes cannot be changed. So when we add two
      <c>String</c>s (or a <c>String</c> and another value converted to a
      <c>String</c>) we get a new <c>String</c> without making any change to the
      values being added together just like when we add the ints
      <title_reference>1 + 2</title_reference> the original
      <title_reference>1</title_reference> and
      <title_reference>2</title_reference> aren’t changed. When we use <c>+=</c>
      we are making a new <c>String</c> by adding something to the current value
      of a variable and then assigning that new value back into the variable,
      again just like with numbers.
    </p>

    <activity label="lcso1">
      <statement>
        <p>
          Try the following code. Add another variable for a lastname that is
          “Hernandez”. Use += or + to add the lastname variable after name to
          the result. Use += or + to add 2 more exclamation points (!) to the
          end of the happy birthday greeting in result.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class Test1
{
    public static void main(String[] args)
    {
        String start = "Happy Birthday";
        String name = "Jose";
        String result = start + " " + name; // add together strings
        result += "!"; // add on to the same string
        System.out.println(result);
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Happy Birthday Jose Hernandez!!!";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <note>
      <p>
        Note that spaces are not added between strings automatically. If you
        want a space between two strings then add one using + ” ” +. If you
        forget to add spaces, you will get smushed output like “HiJose” instead
        of “Hi Jose”. And remember that variables are never put inside the
        quotes (“”) since this would print the variable name out letter by
        letter instead of its value.
      </p>
    </note>

    <activity label="qse_1">
      <statement>
        <p>
          Given the following code segment, what is in the string referenced by
          s1?
        </p>

        <program language="java">
          <code>
String s1 = "xy";
String s2 = s1;
s1 = s1 + s2 + "z";
          </code>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>xyz</p>
          </statement>

          <feedback>
            <p>s1 will equal "xy" plus another "xy" then z at the end.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>xyxyz</p>
          </statement>

          <feedback>
            <p>s1 contains the original value, plus itself, plus "z"</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>xy xy z</p>
          </statement>

          <feedback>
            <p>No spaces are added during concatenation.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>xy z</p>
          </statement>

          <feedback>
            <p>
              No spaces are added during concatenation, and an additional "xy"
              should be included at the beginning.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>z</p>
          </statement>

          <feedback>
            <p>
              s1 was set to "xy" initially, so the final answer will be "xyxyz"
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <idx>toString</idx>
    <idx>
      <h>Object</h><h>toString</h>
    </idx>

    <p>
      You can even add other items to a <c>String</c> using the <c>+</c>
      operator. Primitive values like <c>int</c> and <c>boolean</c> will be
      converted to a <c>String</c> automatically when concatenated with a
      <c>String</c>. Any other objects concatenated with a <c>String</c> will be
      converted to <c>String</c> using their <c>toString</c> method. All objects
      inherit a <c>toString</c> method from the <c>Object</c> class that returns
      a <c>String</c> representation of the object and many classes
      <term>override</term> it to produce a useful human-readable value. Method
      overriding occurs when a public method in a subclass has the same method
      signature as a public method in the superclass, but the behavior of the
      method is specific to the subclass (overriding toString is no longer
      covered on the AP CSA exam).
    </p>

    <activity label="lcso2">
      <statement>
        <p>
          What do you think the following will print? Guess before you hit run.
          If you want the addition to take place before the numbers are turned
          into a string what should you do? Try to modify the code so that it
          adds 4 + 3 before appending the value to the string. Hint: you used
          this to do addition before multiplication in arithmetic expressions.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class Test2
{
    public static void main(String[] args)
    {
        String message = "12" + 4 + 3;
        System.out.println(message);
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "127";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testParen() throws IOException
    {
        String code = removeSpaces(getCodeWithoutComments());
        String expect = "(4+3)";
        boolean passed = code.contains(expect);

        passed = getResults("" + true, "" + passed, "Checking code for added parentheses");
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <note>
      <p>
        If you are appending a number to a string it will be converted to a
        string first before being appended.
      </p>
    </note>

    <p>
      Since the same operators are processed from left to right this will print
      <c>1243</c>. First 4 will be turned into a string and appended to 12 and
      then 3 will be turned into a string and appended to 124. If you want to do
      addition instead, try using parentheses!
    </p>
  </subsection>

  <subsection>
    <title>String Index and Length</title>
    <idx>
      <h>String</h><h>length</h>
    </idx>

    <idx>
      <h>String</h><h>substring</h>
    </idx>

    <idx>
      <h>String</h><h>indexOf</h>
    </idx>

    <idx>
      <h>String</h><h>compareTo</h>
    </idx>

    <idx>
      <h>String</h><h>equals</h>
    </idx>

    <idx>
      <h>String</h><h>methods</h>
    </idx>

    <p>
      A string holds characters in a sequence. Each character is at a position
      or <term>index</term> which starts with 0 as shown below. An
      <term>index</term> is a number associated with a position in a string. The
      length of a string is the number of characters in it including any spaces
      or special characters. The string below has a length of 14.
    </p>

    <figure align="center">
      <caption>A string with the position (index) shown above each character</caption>
      <image source="Unit1-Using-Objects-and-Methods/Figures/stringIndicies.png" width="89%" alt="a string with the position (index) shown above each character" />
    </figure>

    <note>
      <p>
        The first character in a string is at index 0 and the last characters is
        at <term>length</term> -1. Attempting to access indices outside this
        range will result in an <term>IndexOutOfBoundsException</term>.
      </p>
    </note>
  </subsection>

  <subsection xml:id="string-methods-subsection">
    <title>String Methods</title>
    <p>
      The <c>String</c> class includes many methods to process strings. For the
      AP CSA exam, you only need to know how to use the following String
      methods. Their descriptions are included in the <url
      href="https://apstudents.collegeboard.org/ap/pdf/ap-computer-science-a-
      java-quick-reference_0.pdf"
      visual="https://apstudents.collegeboard.org/ap/pdf/ap-computer-science-a-
      java-quick-reference_0.pdf">AP CSA Java Quick Reference Sheet</url> that
      you get during the exam so you don’t have to memorize these.
    </p>

    <blockquote>
      <p>
        <ul>
          <li>
            <p>
              <term>int length()</term> method returns the number of characters
              in the string, including spaces and special characters like
              punctuation.
            </p>
          </li>

          <li>
            <p>
              <term>String substring(int from, int to)</term> method returns a
              new string with the characters in the current string starting with
              the character at the <c>from</c> index and ending at the character
              <em>before</em> the <c>to</c> index (if the <c>to</c> index is
              specified, and if not specified it will contain the rest of the
              string).
            </p>
          </li>

          <li>
            <p>
              <term>int indexOf(String str)</term> method searches for the
              string <c>str</c> in the current string and returns the index of
              the beginning of <c>str</c> in the current string or -1 if it
              isn’t found.
            </p>
          </li>

          <li>
            <p>
              <term>int compareTo(String other)</term> returns a negative value
              if the current string is less than the <c>other</c> string
              alphabetically, 0 if they have the same characters in the same
              order, and a positive value if the current string is greater than
              the <c>other</c> string alphabetically.
            </p>
          </li>

          <li>
            <p>
              <term>boolean equals(String other)</term> returns true when the
              characters in the current string are the same as the ones in the
              <c>other</c> string. This method is inherited from the Object
              class, but is <term>overridden</term> which means that the String
              class has its own version of that method.
            </p>
          </li>
        </ul>
      </p>
    </blockquote>
  </subsection>

  <subsection>
    <title>String Methods: length, substring, indexOf</title>
    <p>
      Run the code below to see the output from the String methods
      <c>length</c>, <c>substring</c>, and <c>indexOf</c>. The length method
      returns the number of characters in the string, not the last index which
      is length -1. The <c>str.substring(from,to)</c> method returns the
      substring from the <c>from</c> index up to (but not including) the
      <c>to</c> index. The method <c>str.indexOf(substring)</c> searches for the
      substring in str and returns the index of where it finds substring in str
      or -1 if it is not there.
    </p>

    <activity label="lcsm1">
      <statement>
        <p>
          This code shows the output from String methods length, substring, and
          indexOf. How many letters does substring(0,3) return? What does
          indexOf return when its argument is not found?
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class Test1
{
    public static void main(String[] args)
    {
        String message1 = "This is a test";
        String message2 = "Hello Class";

        System.out.println(message1.length());
        System.out.println(message2.length());

        System.out.println(message1.substring(0, 3));
        System.out.println(message1.substring(2, 3));
        System.out.println(message1.substring(5));


        System.out.println(
                message1.indexOf("is")); // This will match the is in "This"!
        System.out.println(message1.indexOf("Hello"));
        System.out.println(message2.indexOf("Hello"));

        // lowercase and uppercase are not on the AP exam, but still useful
        System.out.println(message2.toLowerCase());
        System.out.println(message2.toUpperCase());
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main").trim();
        boolean passed = getResults(output, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <note>
      <p>
        Remember that substring(from,to) does not include the character at the
        <c>to</c> index! To return a single character at index i, use
        <c>str.substring(i, i + 1)</c>.
      </p>
    </note>

    <activity label="substring-preconditions">
      <statement>
        <p>
          The following code breaks the preconditions of the substring method
          and throws an IndexOutOfBoundsException. Can you fix the code by
          changing the arguments for the substring method to print out the
          substring “o”?
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class SubstringPreconditions
{
    public static void main(String[] args)
    {
        String str = "hello";
        System.out.println(str.substring(-1, 10));
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("SubstringPreconditions");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "o";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <activity label="qsb_3">
      <statement>
        <p>What is the value of pos after the following code executes?</p>
        <program language="java">
          <code>
String s1 = "abccba";
int pos = s1.indexOf("b");
          </code>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>2</p>
          </statement>

          <feedback>
            <p>The first character is at index 0 in a string.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>1</p>
          </statement>

          <feedback>
            <p>
              The method indexOf returns the first position of the passed str in
              the current string starting from the left (from 0).
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>4</p>
          </statement>

          <feedback>
            <p>Does indexOf start from the left or right?</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>-1</p>
          </statement>

          <feedback>
            <p>Does the string contain a b?</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="qsb_3b">
      <statement>
        <p>What is the value of len after the following code executes?</p>
        <program language="java">
          <code>
String s1 = "baby";
int len = s1.length();
          </code>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>2</p>
          </statement>

          <feedback>
            <p>
              Length returns the number of characters in the string, not the
              number of characters in the name of the string.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>3</p>
          </statement>

          <feedback>
            <p>The position of the last character is 3, but the length is 4.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>4</p>
          </statement>

          <feedback>
            <p>Length returns the number of characters in the string.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>-1</p>
          </statement>

          <feedback>
            <p>Length is never negative.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="qsb_3c">
      <statement>
        <p>What is the value of s2 after the following code executes?</p>
        <program language="java">
          <code>
String s1 = "baby";
String s2 = s1.substring(0,3);
          </code>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>baby</p>
          </statement>

          <feedback>
            <p>
              This would be true if substring returned all the characters from
              the first index to the last inclusive, but it does not include the
              character at the last index.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>b</p>
          </statement>

          <feedback>
            <p>This would be true if it was s1.substring(0,1)</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>ba</p>
          </statement>

          <feedback>
            <p>This would be true if it was s1.substring(0,2)</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>bab</p>
          </statement>

          <feedback>
            <p>
              Substring returns all the characters from the starting index to
              the last index -1.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="qsb_4b">
      <statement>
        <p>What is the value of s2 after the following code executes?</p>
        <program language="java">
          <code>
String s1 = "baby";
String s2 = s1.substring(2);
          </code>
        </program>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>by</p>
          </statement>

          <feedback>
            <p>
              The method substring(index) will return all characters starting
              the index to the end of the string.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>aby</p>
          </statement>

          <feedback>
            <p>This would be true if it was substring(1);</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>a</p>
          </statement>

          <feedback>
            <p>This would be true if it was substring(1,2);</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>b</p>
          </statement>

          <feedback>
            <p>This would be true if it was substring(2,3);</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>ba</p>
          </statement>

          <feedback>
            <p>This would be ture if it was substring(0,2);</p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection>
    <title>CompareTo and Equals</title>
    <p>
      We can compare primitive types like int and double using operators like
      <c>==</c> and <c>&lt;</c> or <c>&gt;</c>, which you will learn about in
      the next unit. However, with reference types like String, you must use the
      methods <c>equals</c> and <c>compareTo</c>, not <c>==</c> or <c>&lt;</c>
      or <c>&gt;</c>.
    </p>

    <p>
      The method <c>compareTo</c> compares two strings character by character.
      If they are equal, it returns 0. If the first string is alphabetically
      ordered before the second string (which is the argument of
      <c>compareTo</c>), it returns a negative number. And if the first string
      is alphabetically ordered after the second string, it returns a positive
      number. (The actual number that it returns does not matter, but it is the
      distance in the first letter that is different, e.g. A is 7 letters away
      from H.)
    </p>

    <figure align="center">
      <caption>
        compareTo returns a negative or positive value or 0 based on
        alphabetical order
      </caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/compareTo.png" width="63%" alt="compareTo" />
    </figure>

    <p>
      The <c>equals</c> method compares the two strings character by character
      and returns <c>true</c> or <c>false</c>. Both <c>compareTo</c> and
      <c>equals</c> are case-sensitive. There are case-insensitive versions of
      these methods, <c>compareToIgnoreCase</c> and <c>equalsIgnoreCase</c>,
      which are not on the AP exam.
    </p>

    <p>
      Run the example below to see the output from <c>compareTo</c> and
      <c>equals</c>. Since <c>"Hello!"</c> would be alphabetically ordered after
      <c>"And"</c>, <c>compareTo</c> returns a positive number. Since
      <c>"Hello!"</c> would be alphabetically ordered before <c>"Zoo"</c>,
      <c>compareTo</c> returns a negative number. Notice that <c>equals</c> is
      case-sensitive.
    </p>

    <activity label="lcsm2">
      <statement>
        <p>
          Run the code to see how the String methods equals and compareTo work.
          Is equals case-sensitive? When does compareTo return a negative
          number?
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class Test2
{
    public static void main(String[] args)
    {
        String message = "Hello!";

        System.out.println(message.compareTo("Hello!"));
        System.out.println(message.compareTo("And"));
        System.out.println(message.compareTo("Zoo"));

        System.out.println(message.equals("Hello!"));
        System.out.println(message.equals("hello!"));
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "0\n7\n-18\ntrue\nfalse";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <p>
      There are lots of other methods in the String class. You can look through
      the Java documentation for the <url
      href="https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/lang/String.html">String
      class</url> online. You don’t have to know all of these for the exam, but
      you can use them if you want to on the exam.
    </p>

    <activity label="ch4_str1">
      <statement>
        <p>
          Drag the definition from the left and drop it on the correct concept
          on the right. Click the "Check Me" button to see if you are correct
        </p>
      </statement>

      <feedback>
        <p>Review the vocabulary.</p>
      </feedback>

      <cardsort>
        <match>
          <premise order="1">the position of a character in a string</premise>
          <response>index</response>
        </match>

        <match>
          <premise order="2">
            a new string that is a part of another string with 0 to all characters copied from the original string
          </premise>

          <response>substring</response>
        </match>

        <match>
          <premise order="3">doesn't change</premise>
          <response>immutable</response>
        </match>

        <match>
          <premise order="4">the number of characters in a string</premise>
          <response>length</response>
        </match>
      </cardsort>
    </activity>

    <activity label="ch4_str2">
      <statement>
        <p>
          Drag the definition from the left and drop it on the correct method on
          the right. Click the "Check Me" button to see if you are correct.
        </p>
      </statement>

      <feedback>
        <p>Review the vocabulary.</p>
      </feedback>

      <cardsort>
        <match>
          <premise order="1">Returns true if the characters in two strings are the same</premise>
          <response>equals</response>
        </match>

        <match>
          <premise order="2">Returns the position of one string in another or -1</premise>
          <response>indexOf</response>
        </match>

        <match>
          <premise order="3">
            Returns a number to indicate if one string is less than, equal to, or greater than another
          </premise>

          <response>compareTo</response>
        </match>

        <match>
          <premise order="4">
            Returns a string representing the object that is passed to this method
          </premise>

          <response>toString</response>
        </match>
      </cardsort>
    </activity>

    <activity label="qsb_8-new">
      <statement>
        <p>What is the value of answer after the following code executes?</p>
        <program language="java">
          <code>
String s1 = "Hi";
String s2 = "Bye";
int answer = s1.compareTo(s2);
          </code>
        </program>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>positive (&gt; 0)</p>
          </statement>

          <feedback>
            <p>H is after B in the alphabet so s1 is greater than s2.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>0</p>
          </statement>

          <feedback>
            <p>
              The method compareTo will only return 0 if the strings have the
              same characters in the same order.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>negative (&lt; 0)</p>
          </statement>

          <feedback>
            <p>This would be true if it was s2.compareTo(s1)</p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection>
    <title>Common Mistakes with Strings</title>
    <p>The following code shows some common mistakes with strings.</p>
    <activity label="stringMistakes">
      <statement>
        <p>
          This code contains some common mistakes with strings. Fix the code to
          use the string methods correctly.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class StringMistakes
{
    public static void main(String[] args)
    {
        String str1 = "Hello!";

        // Print out the first letter?
        System.out.println(
                "The first letter in " + str1 + ":" + str1.substring(1, 1));

        // Print out the last character?
        System.out.println(
                "The last char. in " + str1 + ":" + str1.substring(8));

        // Print str1 in lower case? Will str1 change?
        str1.toLowerCase();
        System.out.println("In lowercase: " + str1);
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main").trim();
        String expect =
                "The first letter in Hello!:H\nThe last char. in Hello!:!\nIn lowercase: hello!";
        boolean passed = output.contains(expect);

        getResults(expect, output, "Expected output from main", passed);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <p>Here is a list of common mistakes made with Strings.</p>
    <blockquote>
      <p>
        <ul>
          <li>
            <p>
              Thinking that substrings include the character at the last index
              when they don’t.
            </p>
          </li>

          <li>
            <p>
              Thinking that strings can change when they can’t. They are
              immutable.
            </p>
          </li>

          <li>
            <p>
              Trying to access part of a string that is not between index 0 and
              length -1. This will throw an IndexOutOfBoundsException.
            </p>
          </li>

          <li>
            <p>
              Trying to call a method like <c>indexOf</c> on a string reference
              that is null. You will get a null pointer exception.
            </p>
          </li>

          <li>
            <p>
              Using <c>==</c> to test if two strings are equal. This is actually
              a test to see if they refer to the same object. Usually you only
              want to know if they have the same characters in the same order.
              In that case you should use <c>equals</c> or <c>compareTo</c>
              instead.
            </p>
          </li>

          <li>
            <p>
              Treating upper and lower case characters the same in Java. If
              <c>s1 = "Hi"</c> and <c>s2 = "hi"</c> then <c>s1.equals(s2)</c> is
              false.
            </p>
          </li>
        </ul>
      </p>
    </blockquote>
  </subsection>

  <subsection>
    <title>Coding Challenge : Pig Latin</title>
    <p>
      <image source="Unit1-Using-Objects-and-Methods/Figures/pig.png"
      width="18%" alt="pig latin" /> Can you speak Pig Latin? In Pig Latin, you
      take the first letter and put it at the end of the word and add the
      letters “ay” to the end. For example, “pig” becomes “igpay”.
    </p>

    <p>
      Create a program that takes a word and transforms it to Pig Latin using
      String methods. You may need the word’s length, a substring that does not
      include the first letter, and a substring that is just the first letter
      (you can get the ith letter of a string using substring(i,i+1) so for
      example the letter at index 3 would be substring(3,4)).
    </p>

    <project label="challenge-PigLatin">
      <statement>
        <p>
          Write code in the pigLatin method below to use the substring method to
          transform a word given as its argument into Pig Latin where the first
          letter is put at the end and “ay” is added. The word pig is igpay in
          Pig Latin. Change the input below to try it on other words.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
import java.util.Scanner;

public class PigLatin
{
   public static String pigLatin(String word)
   {
       // Change this to use word.substring to construct
       // the pig latin version of word
       String pigLatin = word;

       return pigLatin;
   }

   public static void main(String[] args)
   {
       // Do not change main!
       // Write your code in the pigLatin method above.
       Scanner scan = new Scanner(System.in);
       String word = scan.nextLine();
       System.out.println(word + " in Pig Latin is " + pigLatin(word) );
       scan.close();
   }
}
        </code>
        <stdin>pig</stdin>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMethod() throws IOException
    {
        Object[] args = {"java"};
        String output = getMethodOutput("pigLatin", args);
        String expect = "avajay";
        boolean passed = getResults(expect, output,
                             "pigLatin(\"java\") should return \"avajay\"");
        assertTrue(passed);
    }
    @Test
    public void testMethod2() throws IOException
    {
        Object[] args = {"pig"};
        String output = getMethodOutput("pigLatin", args);
        String expect = "igpay";
        boolean passed = getResults(expect, output,
                             "pigLatin(\"pig\") should return \"igpay\"");
        assertTrue(passed);
    }
    @Test
    public void testContainsSubstring()
    {
        String target = "word.substring(";
        int count = countOccurences(getCode(), target);
        boolean passed = count &gt;= 2;
        passed =
                getResults(
                        "2 substring calls",
                        count + " substring call(s)",
                        "Code contains calls to substring method",
                        passed);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </project>
  </subsection>

  <subsection>
    <title>Summary</title>
    <p>
      <ul>
        <li>
          <p>
            (AP 1.15.A.1) A <c>String</c> object represents a sequence of
            characters and can be created by using a string literal.
          </p>
        </li>

        <li>
          <p>
            (AP 1.15.A.2) The <c>String</c> class is part of the
            <c>java.lang</c> package. Classes in the <c>java.lang</c> package
            are available by default.
          </p>
        </li>

        <li>
          <p>
            String objects can be created by using string literals (String s =
            “hi”;) or by calling the String class constructor (String t = new
            String(“bye”);).
          </p>
        </li>

        <li>
          <p>
            (AP 1.15.A.3) A String object is <term>immutable</term>, meaning
            once a String object is created, its attributes cannot be changed.
            Methods called on a String object do not change the content of the
            String object.
          </p>
        </li>

        <li>
          <p>
            (AP 1.15.A.4) Two String objects can be concatenated together or
            combined using the + or += operator, resulting in a new String
            object.
          </p>
        </li>

        <li>
          <p>
            (AP 1.15.A.4) A primitive value can be concatenated with a String
            object. This causes the implicit conversion of the primitive value
            to a String object.
          </p>
        </li>

        <li>
          <p>
            (AP 1.15.A.5) A String object can be concatenated with any object,
            which implicitly calls the object’s <c>toString</c> method (a
            behavior which is guaranteed to exist by the inheritance
            relationship every class has with the Object class). An object’s
            <c>toString</c> method returns a string value representing the
            object. Subclasses of Object often <term>override</term> the
            toString method with class-specific implementation. Method
            overriding occurs when a public method in a subclass has the same
            method signature as a public method in the superclass, but the
            behavior of the method is specific to the subclass. Overriding the
            <c>toString</c> method of a class is outside the scope of the AP CSA
            exam.
          </p>
        </li>

        <li>
          <p>
            <term>index</term> - A number that represents the position of a
            character in a string. The first character in a string is at index
            0.
          </p>
        </li>

        <li>
          <p>
            <term>length</term> - The number of characters in a string.
          </p>
        </li>

        <li>
          <p>
            <term>substring</term> - A new string that contains a copy of part
            of the original string.
          </p>
        </li>

        <li>
          <p>
            (AP 1.15.B.1) A String object has index values from 0 to one less
            than the length of the string. Attempting to access indices outside
            this range will result in an <c>IndexOutOfBoundsException</c>.
          </p>
        </li>

        <li>
          <p>
            (AP 1.15.B.2) The following String methods and constructors,
            including what they do and when they are used, are part of the <url
            href="https://apstudents.collegeboard.org/ap/pdf/ap-computer-
            science-a-java-quick-reference_0.pdf"
            visual="https://apstudents.collegeboard.org/ap/pdf/ap-computer-
            science-a-java-quick-reference_0.pdf">AP CSA Java Quick Reference
            Sheet</url> that you can use during the exam:
          </p>

          <p>
            <ul>
              <li>
                <p>
                  <term>String(String str)</term> : Constructs a new String
                  object that represents the same sequence of characters as str.
                </p>
              </li>

              <li>
                <p>
                  <term>int length()</term> : returns the number of characters
                  in a String object.
                </p>
              </li>

              <li>
                <p>
                  <term>String substring(int from, int to)</term> : returns the
                  substring beginning at index from and ending at index (to -1).
                </p>
              </li>

              <li>
                <p>
                  <term>String substring(int from)</term> : returns
                  substring(from, length()).
                </p>
              </li>

              <li>
                <p>
                  <term>int indexOf(String str)</term> : searches for str in the
                  current string and returns the index of the first occurrence
                  of str; returns -1 if not found.
                </p>
              </li>

              <li>
                <p>
                  <term>boolean equals(String other)</term> : returns true if
                  this (the calling object) is equal to other; returns false
                  otherwise. Using the equals method to compare one String
                  object with an object of a type other than String is outside
                  the scope of the AP CSA exam.
                </p>
              </li>

              <li>
                <p>
                  <term>int compareTo(String other)</term> : returns a value
                  &lt; 0 if this is less than other; returns zero if this is
                  equal to other; returns a value &gt; 0 if this is greater than
                  other. Strings are ordered based upon the alphabet.
                </p>
              </li>
            </ul>
          </p>
        </li>

        <li>
          <p>
            <c>str.substring(index, index + 1)</c> returns a single character at
            index in string <c>str</c>.
          </p>
        </li>
      </ul>
    </p>
  </subsection>

  <subsection>
    <title>AP Practice</title>
    <activity label="AP-substring">
      <statement>
        <p>What is the value of s2 after the following code executes?</p>
        <program language="java">
          <code>
String s1 = new String("hi there");
int pos = s1.indexOf("e");
String s2 = s1.substring(0,pos);
          </code>
        </program>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>hi th</p>
          </statement>

          <feedback>
            <p>
              The substring method returns the string starting at the first
              index and not including the last index. The method indexOf returns
              the index of the first place the string occurs.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>hi the</p>
          </statement>

          <feedback>
            <p>
              This would be correct if substring returned all characters between
              the first index and last index, but does it?
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>hi ther</p>
          </statement>

          <feedback>
            <p>
              This would be correct if indexOf returned the last position the
              string str was found in the current string, does it?
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>hi there</p>
          </statement>

          <feedback>
            <p>
              This would be correct if indexOf returned the last position the
              string str was found in the current string and if substring
              included all characters between the start and end index. Check
              both of these.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="AP-immutable">
      <statement>
        <p>What is the value of s1 after the following code executes?</p>
        <program language="java">
          <code>
String s1 = "Hi";
String s2 = s1.substring(0,1);
String s3 = s2.toLowerCase();
          </code>
        </program>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>Hi</p>
          </statement>

          <feedback>
            <p>
              Strings are immutable, meaning they don't change. Any method that
              changes a string returns a new string. So s1 never changes.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>hi</p>
          </statement>

          <feedback>
            <p>
              This would be true if the question was what is the value of s2 and
              it was substring(0,2) not (0,1)
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>H</p>
          </statement>

          <feedback>
            <p>
              This would be true if the question was what is the value of s2,
              not s1.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>h</p>
          </statement>

          <feedback>
            <p>
              This would be true if the question was what is the value of s3,
              not s1.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <note>
      <p>
        Strings are <term>immutable</term> which means that they can’t change.
        Anything that you do to modify a string (like creating a substring or
        appending strings) returns a new string. The original string is not
        changed.
      </p>
    </note>
  </subsection>

  <subsection>
    <title>String Methods Game</title>
    <p>
      Try the game below written by AP CSA teacher Chandan Sarkar. Click on
      <term>Strings</term> and then on the letters that would be the result of
      the string method calls. We encourage you to work in pairs and see how
      high a score you can get.
    </p>

    <interactive iframe="iframe/csagames.html" width="95%" aspect="1:1" />
  </subsection>

  <subsection xml:id="progresscheck-u1-part3">
    <title>Review/Practice for Unit 1 Part 3 on Using Objects</title>
    <p>
      This lesson ends the section on Unit 1 part 3 on Using Objects. You can
      now do the following review and practice lessons at the end of the unit
      and College Board Progress Check for Unit 1 Part 3 in the AP Classroom.
      Please do the practice test on objects and the FRQ practice below before
      you do the AP Classroom Progress Check for part 3.
    </p>

    <p>
      <ul>
        <li>
          <url href="unit1b-summary.html" visual="unit1b-summary.html">Unit 1b Summary</url>
        </li>

        <li>
          <url href="unit1b-practice-mixed-code.html" visual="unit1b-practice-mixed-code.html">Unit 1b Practice Mixed Code</url>
        </li>

        <li>
          <url href="unit1b-practice-coding.html" visual="unit1b-practice-coding.html">Unit 1b Practice Coding</url>
        </li>

        <li>
          <url href="Exercises-objects.html" visual="Exercises-objects.html">Exercises on Objects</url>
        </li>

        <li>
          <url href="practice-test-objects.html" visual="practice-test-objects.html">Practice Test on Objects</url>
        </li>

        <li>
          <url href="JavaSwingGUIs.html" visual="JavaSwingGUIs.html">Optional Java Swing GUIs</url>
        </li>

        <li>
          <url href="frq-practice.html" visual="frq-practice.html">Unit 1 FRQ Practice</url>
        </li>
      </ul>
    </p>
  </subsection>
</section>

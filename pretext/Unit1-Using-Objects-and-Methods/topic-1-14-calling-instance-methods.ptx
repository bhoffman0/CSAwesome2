<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="calling-instance-methods">
  <title>Calling Instance Methods</title><introduction>
    
    <p>In object-oriented programming, <term>methods</term> define the behavior and actions that an object can perform. For example, <c>Turtle</c> objects can go forward or turn left using method calls like <c>yertle.forward()</c> and  <c>yertle.turnRight()</c> to change its position. These methods are sometimes called <term>instance methods</term> or <term>object methods</term> because they are called using an instance or object of the class, in this case a specific <c>Turtle</c> object like <c>yertle</c>.</p>
  </introduction>
  <subsection>
            <title>Class Methods vs. Instance Methods</title>
            <p>In lessons 1.9 and 1.10, we learned how to call <term>class methods</term> (also called <term>static methods</term>).  Class methods are called using the class name followed by the dot (.) operator and the method name,  example, <c>Math.sqrt(25);</c> calls the <c>sqrt</c> method in the <c>Math</c> class to find the square root of 25. Class methods use the keyword <c>static</c> in their method signature. They do not access or change the attributes of an object.</p>
            <p>In this lesson, we will learn more about <term>instance methods</term> which are always called using an object of the class. They are not static methods. They access and change the attributes of the object they are called on, for example <c>yertle.forward()</c> changes the <c>Turtle</c> object yertle’s position.</p>
            <p>The following flowchart shows the difference between calling class (static) methods and instance methods. Static methods are called using the class name, for example, <c>Math.sqrt(25);</c>. Instance methods are called using an object of the class, for example, <c>yertle.forward();</c>. Traditionally, class names are capitalized, and object variables are lowercase.</p>
            <figure align="center"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Calling static vs. instance methods</caption><image source="Unit1-Using-Objects-and-Methods/Figures/calling-static-vs-instance-methods.png" width="63%%" alt="Calling static vs. instance methods"/></figure>
        </subsection>
  <subsection>
            <title>Method Signatures</title>
            <p>The <term>method signature</term> defines the method’s name and the number and types of parameters it takes. In a class definition or in documentation of a library, instance methods are usually defined after the instance variables (attributes) and constructors in a class. For example, see the <c>Student</c> class below. Notice that the methods do not use the keyword <c>static</c>. They are instance methods that are called using an object of the class and can access and change the object’s attributes.</p>
            <figure align="center"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">A Student class showing instance variables, constructors, and methods</caption><image source="Unit1-Using-Objects-and-Methods/Figures/StudentClass.png" width="89%%" alt="A Student class showing instance variables, constructors, and methods"/></figure>

<exercise label="student_methods">
    <statement><p>Click on the method headers (signatures) in the following class. Do not click on the constructors.</p></statement>
<feedback><p>Methods follow the constructors. The method header is the first line of a method.</p></feedback>
<areas>
<cline><area correct="no">public class Student {</area></cline>
<cline/>
<cline>    <area correct="no">private String name;</area></cline>
<cline>    <area correct="no">private String email;</area></cline>
<cline/>
<cline>    <area correct="no">public Student(String initName, String intEmail) </area></cline>
<cline>    <area correct="no">{</area></cline>
<cline>        <area correct="no">name = initName;</area></cline>
<cline>        <area correct="no">email = initEmail;</area></cline>
<cline>     <area correct="no">}</area></cline>
<cline/>
<cline>     <area correct="yes">public String getName() </area></cline>
<cline>     <area correct="no">{</area></cline>
<cline>        <area correct="no">return name;</area></cline>
<cline>     <area correct="no">}</area></cline>
<cline/>
<cline>     <area correct="yes">public void print() </area></cline>
<cline>     <area correct="no">{</area></cline>
<cline>        <area correct="no">System.out.println(name + ":" + email);</area></cline>
<cline>     <area correct="no">}</area></cline>
<cline><area correct="no">}</area></cline>
</areas></exercise>        </subsection>
  <subsection>
            <title>Method Calls</title>
            <p>To use an object’s method, you must use the object name and the dot (.) operator followed by the method name, for example, <c>yertle.forward();</c> calls <c>yertle</c>’s <c>forward</c> method to move a turtle object forward 100 pixels. Object methods work with the <term>attributes</term> of the object, such as the direction the turtle is heading or its position.</p>
            <p>Methods inside the same class can call each other using just <c>methodName()</c>, but to call instance methods in another class or from a main method, you must first create an object of that class and then call its methods using <c>object.methodName()</c>.</p>
            <figure align="center"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Calling instance methods from main() or from other methods inside the same class.</caption><image source="Unit1-Using-Objects-and-Methods/Figures/calling-methods.png" width="80%%" alt="Calling Methods"/></figure>
            <note>
                <p><c>method();</c> is used to call a method within the same class, but <c>object.method();</c> is necessary if you are calling the method from the main method or from a different class.</p>
            </note>
            <p>Before you call a method from <c>main</c> or from outside of the current class, you must make sure that you have created and initialized an object. However, if you just declare an object reference without setting it to refer to a new object, the value will be <c>null</c>, meaning that it doesn’t reference an object. If you call a method on a variable whose value is <c>null</c>, you will get a <term>NullPointerException</term> error, where a <term>pointer</term> is another name for a reference.</p>

<exercise label="nullPointerTest">
    <statement>
            <p>Run the code below to see a NullPointerException. Fix the code by using <c>new Turtle(habitat)</c> to create a new Turtle object before calling its methods.</p>

    </statement>
    <program interactive="activecode" language="java" datafile="turtleClasses.jar,turtleClasses2.jar">
        <input>
import java.awt.*;
import java.util.*;

public class NullPointerTest
{
    public static void main(String[] args)
    {
        World habitat = new World(300, 300);
        Turtle yertle = null;

        // yertle is null!
        yertle.forward();

        habitat.show(true);
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String code = "new Turtle(habitat)";
        boolean passed = checkCodeContains(code);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
            <p>The following flowchart can be used to compare three different ways of calling methods. Class (static) methods are called using the class name. Instance methods are called using an object of the class. If you are calling the instance method from the main method or from another class, you must first create an object of that class and then call its methods using <c>object.methodName()</c>. If you are calling the method from within the same class, you can just call the method using <c>methodName()</c> which will refer to the current object.</p>
            <figure align="center"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Comparing Method Calls to Static and Instance Methods</caption><image source="Unit1-Using-Objects-and-Methods/Figures/FlowChartCallingMethods.png" width="98%%" alt="Comparing method calls to static and instance methods"/></figure>
        </subsection>
  <subsection>
            <title>Methods Calls with Arguments</title>
            <p>In the last lessons, we used simple <term>methods</term> like <c>forward</c> and <c>turnRight</c> to make the turtle draw lines. You may have noticed that <c>forward()</c> and <c>backward()</c> always move the same number of pixels (100 pixels), and <c>turnRight()</c> and <c>turnLeft()</c> always turn at right angles (90 degrees). This is a little limiting. What if we wanted to draw a triangle or the letter A? These require smaller angles to draw diagonal lines and different length lines. Luckily, there are more complex methods in the <c>Turtle</c> class that let you specify the number of pixels to move forward or the number of degrees to turn. These values that you can give to methods to help them do their job are called <term>arguments</term> or <term>parameters</term>. For example, we can give the argument 200 in <c>forward(200)</c> to make the turtle go forward 200 pixels instead of the default of 100 or the argument 30 in <c>turn(30)</c> to make the turtle turn 30 degrees instead of 90 degrees.</p>
            <note>
                <p><c>object.method(arguments);</c> is used to call an object’s method and give it some argument values that it will need to do its job.</p>
            </note>
            <p>When you create your own method, the variables you define for it are called <term>parameters</term>. When you call the method to do its job, you give or pass in <term>arguments</term> to it that are then saved in the parameter variables. So, in the definition of the <c>forward</c> method, it has a parameter variable called <c>pixels</c>, and in the call to <c>forward(200)</c>, the argument is the value 200 which will get saved in the parameter variable pixels. You will learn to write your own methods in Unit 3. In this unit, you will learn to call methods that are already written for you.</p>
            <figure align="center"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Method signatures with parameters and method calls arguments</caption><image source="Unit1-Using-Objects-and-Methods/Figures/method-param-arg.png" width="98%%" alt="Method parameters and arguments"/></figure>

<exercise label="methodVocab">
    <statement><p>Drag the definition from the left and drop it on the correct word on the right.  Click the "Check Me" button to see if you are correct.</p></statement>
    <feedback><p>Review the vocabulary above.</p></feedback>
<matches><match order="1"><premise>an object's behaviors or functions that can be used or called to do its job</premise><response>methods</response></match><match order="2"><premise>the values or data passed to an object's method</premise><response>arguments</response></match><match order="3"><premise>the variables in a method's definition that hold the arguments</premise><response>parameters</response></match><match order="4"><premise>asking to run the method</premise><response>method call</response></match></matches></exercise>            <p>Here is the Turtle class diagram again that shows some of the variables and methods inherited from the SimpleTurtle class in the class Turtle that are written for you.</p>
            <figure align="center"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Turtle Class Diagram</caption><image source="Unit1-Using-Objects-and-Methods/Figures/turtleUMLClassDiagram.png" width="71%%" alt="Turtle class diagram"/></figure>
            <p>Methods are said to be <term>overloaded</term> when there
                are multiple methods with the same name but a
                different <term>method signature</term>, where it requires a different number or type of parameters. For example, we have two different forward methods, <c>forward()</c> with no arguments and <c>forward(100)</c> which has an argument that tells it how much to move forward. The arguments given to the method need to correspond to the order and types of the parameters in the method signature.</p>

<exercise label="TurtleTestMethods1">
    <statement>
            <p><ol marker="1">
                <li>
                    <p>Can you make yertle draw a square and change the pen color for each side of the square? Try something like: yertle.setColor(Color.red); This uses the <url href="https://docs.oracle.com/javase/7/docs/api/java/awt/Color.html" visual="https://docs.oracle.com/javase/7/docs/api/java/awt/Color.html">Color</url> class in Java which has some colors predefined like red, yellow, blue, magenta, cyan. You can also use more specific methods like setPenColor, setBodyColor, and setShellColor.</p>
                </li>
                <li>
                    <p>Can you draw a triangle? The turnRight() method always does 90 degree turns, but you’ll need external angles of 120 degree for an equilateral triangle. Use the turn method which has a parameter for the angle of the turn in degrees. For example, turn(90) is the same as turnRight(). Try drawing a triangle with different colors.</p>
                </li>
            </ol></p>

    </statement>
    <program interactive="activecode" language="java" datafile="turtleClasses.jar,turtleClasses2.jar">
        <input>
import java.awt.*;
import java.util.*;

public class TurtleTestMethods1
{
    public static void main(String[] args)
    {
        World world = new World(300, 300);
        Turtle yertle = new Turtle(world);

        yertle.forward(100);
        yertle.turnLeft();
        yertle.forward(75);

        world.show(true);
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleTestMethods1");
    }

    @Test
    public void test1()
    {
        boolean passed = codeChanged(
            "import java.awt.*;\n" +
            "import java.util.*;\n" +
            "\n" +
            "public class TurtleTestMethods1\n" +
            "{\n" +
            "    public static void main(String[] args)\n" +
            "    {\n" +
            "        World world = new World(300, 300);\n" +
            "        Turtle yertle = new Turtle(world);\n" +
            "\n" +
            "        yertle.forward(100);\n" +
            "        yertle.turnLeft();\n" +
            "        yertle.forward(75);\n" +
            "\n" +
            "        world.show(true);\n" +
            "    }\n" +
            "}\n"
        );
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String code = getCode();
        int numColors = countOccurences(code, "Color(");

        boolean passed = numColors &gt;= 3;
        passed = getResults("3 or more", "" + numColors, "Changes color at least 3 times", passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCode();
        int numTurns = countOccurences(code, ".turn");

        boolean passed = numTurns &gt;= 3;
        passed = getResults("3 or more", "" + numTurns, "Turns at least 3 times", passed);
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String code = getCode();
        int numTurns = countOccurences(code, ".turn(");

        boolean passed = numTurns &gt;= 1;
        passed = getResults("1 or more", "" + numTurns, "Calls to turn(...)", passed);
        assertTrue(passed);
    }

    @Test
    public void test5()
    {
        String code = getCode();
        int numForward = countOccurences(code, ".forward(");

        boolean passed = numForward &gt;= 4;
        passed = getResults("4 or more", "" + numForward, "Calls to forward()", passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
            <image source="Unit1-Using-Objects-and-Methods/Figures/house.png" width="27%%" alt="simple house"/>
            <p>Try the following mixed up code to draw a simple house made of a square and a triangle roof.</p>
<exercise label="DrawAHouse" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
            <p>The following code uses a turtle to draw a simple house, but the lines are mixed up.  Drag the code blocks to the right and put them in the correct order to first draw a square for the house and then a red triangle for the roof.  Click on the “Check Me” button to check your solution.  You can type this code in the Active Code window above to see it in action.</p>
</statement>
<blocks><block order="6">
<cline>public class TurtleDrawHouse</cline>
<cline>{</cline>
</block><block order="4">
<cline>   public static void main(String[] args)</cline>
<cline>   {</cline>
<cline>   </cline>
</block><block order="10">
<cline>      World world = new World(300,300);</cline>
<cline>      </cline>
</block><block order="8">
<cline>      Turtle builder = new Turtle(world);</cline>
<cline>      </cline>
</block><block order="1">
<cline>      // Draw a square</cline>
<cline>      builder.turnRight();</cline>
<cline>      builder.forward(100);</cline>
<cline>      builder.turnRight();</cline>
<cline>      builder.forward(100);</cline>
<cline>      builder.turnRight();</cline>
<cline>      builder.forward(100);</cline>
<cline>      builder.turnRight();</cline>
<cline>      builder.forward(100);</cline>
<cline>      </cline>
</block><block order="2">
<cline>      builder.setColor(Color.red);</cline>
<cline>      </cline>
</block><block order="5">
<cline>      // Draw a triangle</cline>
<cline>      builder.turn(30);</cline>
<cline>      builder.forward(100);</cline>
<cline>      builder.turn(120);</cline>
<cline>      builder.forward(100);</cline>
<cline>      builder.turn(120);</cline>
<cline>      builder.forward(100);</cline>
<cline>      </cline>
</block><block order="7">
<cline>      world.show(true);</cline>
<cline>      </cline>
</block><block order="3">
<cline>   }</cline>
<cline>   </cline>
</block><block order="9">
<cline>}</cline>
</block></blocks></exercise>        </subsection>
  <subsection>
            <title>Methods that Return Values</title>
            <p>All the methods on <c>Turtle</c> that we’ve discussed so far are <term>void methods</term> with <c>void</c>
                return type. This means they don’t return anything.  Because a
                <c>void</c> method doesn’t return any value, the only point of calling one is
                because it does something that can be observed by the user or by other code—it
                changes the state of the object or maybe causes something to happen like drawing
                a line on the screen. Or both. These things they do are sometimes called
                “effects”.</p>
            <p>In contrast, methods with a return type of anything <title_reference>other</title_reference> than <c>void</c> are
                called <term>non-void</term> methods. These methods <term>return</term> a value that the code
                calling the method can use. And because methods are called on an object, these
                methods can be used to return values that tell us things about an object’s
                internal state. In well-designed programs, non-void methods typically don’t have effects; they just compute and return a value. To put it another way, void methods <title_reference>do things</title_reference>
                while non-void methods <title_reference>produce values</title_reference>.</p>
            <p>A simple kind of method that returns a value is what is formally called an
                <term>accessor</term> because it accesses a value in an object. In the real world
                everyone calls them <term>getters</term>. A getter is a method that takes no arguments
                and has a non-<c>void</c> return type. In Java they are almost always named
                something that starts with <c>get</c>, and they usually just return the value of one
                of the object’s instance variables. For example, the <c>Turtle</c> class has
                several getters, <c>getWidth</c> and <c>getHeight</c> which return the width and the
                height of a <c>Turtle</c> object and <c>getXPos</c> and <c>getYPos</c> which return the x
                and y values of the <c>Turtle</c>’s position.</p>
            <p>Note that when you use a getter, you need to do something with the value it
                returns. You might assign it to a variable, use it in an expression, or print it
                out. If you don’t, you’re just getting a value and doing nothing with it—you
                might as well not have bothered to call the getter in the first place.</p>
            <p>Here are some examples of using getters on the <c>Turtle</c> object <c>yertle</c>.</p>
            <program language="java"><input>
Turtle yertle = new Turtle(world);
int width = yertle.getWidth();
int height = yertle.getHeight();
System.out.println("Yertle's width is: " + width);
System.out.println("Yertle's height is: " + height);
System.out.println("Yertle's x position is: " + yertle.getXPos() );
System.out.println("Yertle's y position is: " + yertle.getYPos() );
</input></program>
            <note>
                <p>A common error is forgetting to do something with the value returned from a method. When you call a method that returns a value, you should do something with that value like assigning it to a variable or printing it out.</p>
            </note>

<exercise label="TurtleTestGetSet">
    <statement>
            <p>Try the code below that prints out the turtle’s current position using <c>getXPos()</c> and <c>getYPos()</c>. Can you make it go to position (0,0) or as close to it as possible?</p>

    </statement>
    <program interactive="activecode" language="java" datafile="turtleClasses.jar,turtleClasses2.jar">
        <input>
import java.awt.*;
import java.util.*;

public class TurtleTestGetSet
{
    public static void main(String[] args)
    {
        World world = new World(300, 300);
        Turtle yertle = new Turtle(world);
        System.out.println(
                "Yertle is starting at: "
                        + yertle.getXPos()
                        + ", "
                        + yertle.getYPos());
        yertle.forward(100);
        yertle.turn(90);
        yertle.forward(50);
        System.out.println(
                "Yertle has ended up at: "
                        + yertle.getXPos()
                        + ", "
                        + yertle.getYPos());
        world.show(true);
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleTestGetSet");
    }

    @Test
    public void test1()
    {
        String orig =
                "import java.awt.*;\n"
                    + "import java.util.*;\n\n"
                    + "public class TurtleTestGetSet\n"
                    + "{\n"
                    + "public static void main(String[] args)\n"
                    + "{\n"
                    + "World world = new World(300,300);\n"
                    + "Turtle yertle = new Turtle(world);\n"
                    + "System.out.println(\"Yertle is starting at: \" + yertle.getXPos() + \", \" +"
                    + " yertle.getYPos());\n"
                    + "yertle.forward(100);\n"
                    + "yertle.turn(90);\n"
                    + "yertle.forward(50);\n"
                    + "System.out.println(\"Yertle has ended up at: \" + yertle.getXPos() + \", \" +"
                    + " yertle.getYPos());\n"
                    + "world.show(true);\n"
                    + "}\n"
                    + "}\n";
        boolean passed = codeChanged(orig);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>

<exercise label="TurtleArea">
    <statement>
            <p>Fix the errors in the code below so that it prints out the area of the space
                that the turtle occupies by multiplying its width and height. Remember that
                you have to do something with the values that the get methods return.</p>

    </statement>
    <program interactive="activecode" language="java" datafile="turtleClasses.jar,turtleClasses2.jar">
        <input>
import java.awt.*;
import java.lang.Math;
import java.util.*;

public class TurtleArea
{
    public static void main(String[] args)
    {
        World world = new World(300,300);
        Turtle yertle = new Turtle(world);

        int area;
        yertle.getWidth() * getHeight;
        System.out.println("Yertle's area is: ");
    }
}
</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleArea");
    }

    @Test
    public void test1()
    {
        String actual = getMethodOutput("main");
        String expected = "Yertle's area is: 270";
        boolean passed = getResults(expected, actual, "Prints correct answer");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String code = getCode();
        String target = ".getHeight()";

        int num = countOccurences(code, target);

        boolean passed = num &gt;= 1;

        getResults("1+", "" + num, "Calls to " + target, passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCode();
        String target = ".getWidth()";

        int num = countOccurences(code, target);

        boolean passed = num &gt;= 1;

        getResults("1+", "" + num, "Calls to " + target, passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
            <p>We will save a deeper discussion of actually writing getters and other methods
                until Unit 3, but for the AP progress checks for this unit, you should be able to
                trace through method calls like the ones below. Notice that the <term>return
                    statement</term> in a method returns the value, and it must match declared return type
                of the method. The calling method must then do something useful with that value.</p>

    <exercise label="traceCircleArea">
        <statement>

            <p> Consider the following class definition.</p>
            <program language="java"><input>
public class Circle
{
    private double radius;

    public Circle(double r)
    {
        radius = r;
    }

    public double getArea()
    {
        return 3.14159 * radius * radius;
    }
}
</input></program>
            <p>Assume that the following code segment appears in a main method.</p>
            <program language="java"><input>
Circle c = new Circle(10);
System.out.println(c.getArea());
</input></program>
            <p>What is printed as a result of executing the code segment? (If you get stuck, try this <url href="https://pythontutor.com/visualize.html#code=public%20class%20Circle%0A%7B%0A%20%20%20%20private%20double%20radius%3B%0A%0A%20%20%20%20public%20Circle%28double%20r%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20radius%20%3D%20r%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20double%20getArea%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20return%203.14159%20*%20radius%20*%20radius%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%7B%0A%20%20%20%20%20%20%20%20Circle%20c%20%3D%20new%20Circle%2810%29%3B%0A%20%20%20%20%20%20%20%20System.out.println%28c.getArea%28%29%29%3B%0A%20%20%20%20%7D%0A%7D&amp;cumulative=false&amp;heapPrimitives=nevernest&amp;mode=edit&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" visual="https://pythontutor.com/visualize.html#code=public%20class%20Circle%0A%7B%0A%20%20%20%20private%20double%20radius%3B%0A%0A%20%20%20%20public%20Circle%28double%20r%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20radius%20%3D%20r%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20double%20getArea%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20return%203.14159%20*%20radius%20*%20radius%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%7B%0A%20%20%20%20%20%20%20%20Circle%20c%20%3D%20new%20Circle%2810%29%3B%0A%20%20%20%20%20%20%20%20System.out.println%28c.getArea%28%29%29%3B%0A%20%20%20%20%7D%0A%7D&amp;cumulative=false&amp;heapPrimitives=nevernest&amp;mode=edit&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false">visualization</url> to see this code in action.)</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>0</p>
                </statement>
                <feedback>
                    <p>First, call the constructor, then call getArea().</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>314.159</p>
                </statement>
                <feedback>
                    <p>Correct! getArea() returns 3.14159 * radius * radius, where radius is set to 10 by the constructor.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>c.getArea()</p>
                </statement>
                <feedback>
                    <p>c.getArea() is a method call, not a value.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The code will not compile.</p>
                </statement>
                <feedback>
                    <p>The code does compile.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>100.0</p>
                </statement>
                <feedback>
                    <p>Don't forget to multiply by 3.14159.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="traceRectangleArea">
        <statement>

            <p> Consider the following class definition.</p>
            <program language="java"><input>
public class Rectangle
{
    private int width;
    private int height;

    public Rectangle(int w, int h)
    {
        width = w;
        height = h;
    }

    public void resize(int amt)
    {
        width += amt;
    }

    public int getArea()
    {
        return width * height;
    }
}
</input></program>
            <p>Assume that the following code segment appears in a main method.</p>
            <program language="java"><input>
Rectangle r = new Rectangle(10, 15);
r.resize(5);
System.out.println(r.getArea());
</input></program>
            <p>What is printed as a result of executing the code segment? (If you get stuck, try this <url href="https://pythontutor.com/render.html#code=public%20class%20Rectangle%0A%7B%0A%20%20%20%20private%20int%20width%3B%0A%20%20%20%20private%20int%20height%3B%0A%0A%20%20%20%20public%20Rectangle%28int%20w,%20int%20h%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20width%20%3D%20w%3B%0A%20%20%20%20%20%20%20%20height%20%3D%20h%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20void%20resize%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20width%20%2B%3D%205%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20int%20getArea%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20return%20width%20*%20height%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20Rectangle%20r%20%3D%20new%20Rectangle%2810,%2015%29%3B%0A%20%20%20%20%20%20%20%20r.resize%28%29%3B%0A%20%20%20%20%20%20%20%20System.out.println%28r.getArea%28%29%29%3B%0A%20%20%20%20%7D%0A%7D&amp;cumulative=false&amp;curInstr=20&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" visual="https://pythontutor.com/render.html#code=public%20class%20Rectangle%0A%7B%0A%20%20%20%20private%20int%20width%3B%0A%20%20%20%20private%20int%20height%3B%0A%0A%20%20%20%20public%20Rectangle%28int%20w,%20int%20h%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20width%20%3D%20w%3B%0A%20%20%20%20%20%20%20%20height%20%3D%20h%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20void%20resize%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20width%20%2B%3D%205%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20int%20getArea%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20return%20width%20*%20height%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20Rectangle%20r%20%3D%20new%20Rectangle%2810,%2015%29%3B%0A%20%20%20%20%20%20%20%20r.resize%28%29%3B%0A%20%20%20%20%20%20%20%20System.out.println%28r.getArea%28%29%29%3B%0A%20%20%20%20%7D%0A%7D&amp;cumulative=false&amp;curInstr=20&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false">visualization</url> to see this code in action.)</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>150</p>
                </statement>
                <feedback>
                    <p>Note that the method resize() is called before getArea().</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>150.0</p>
                </statement>
                <feedback>
                    <p>Note that the method resize() is called before getArea().</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>225</p>
                </statement>
                <feedback>
                    <p>Correct! resize() increases the width by 5, so the area is 15 * 15 = 225.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>255.0</p>
                </statement>
                <feedback>
                    <p>Note that getArea() returns an int</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>0</p>
                </statement>
                <feedback>
                    <p>Note that the constructor initializes width and height.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="traceReturnMethods">
        <statement>

            <p> What does the following code print out? (If you get stuck, try this <url href="http://www.pythontutor.com/visualize.html#code=public%20class%20MethodTrace%20%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20public%20int%20square%28int%20x%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20x*x%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20public%20int%20divide%28int%20x,%20int%20y%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20x/y%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20MethodTrace%20traceObj%20%3D%20new%20MethodTrace%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20System.out.println%28%20traceObj.square%282%29%20%2B%20traceObj.divide%286,2%29%20%29%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%7D&amp;cumulative=false&amp;curInstr=16&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" visual="http://www.pythontutor.com/visualize.html#code=public%20class%20MethodTrace%20%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20public%20int%20square%28int%20x%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20x*x%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20public%20int%20divide%28int%20x,%20int%20y%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20x/y%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20MethodTrace%20traceObj%20%3D%20new%20MethodTrace%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20System.out.println%28%20traceObj.square%282%29%20%2B%20traceObj.divide%286,2%29%20%29%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%7D&amp;cumulative=false&amp;curInstr=16&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false">visualization</url> to see this code in action.)</p>
            <program language="java"><input>
public class MethodTrace
{
    public int square(int x)
    {
        return x * x;
    }

    public int divide(int x, int y)
    {
        return x / y;
    }

    public static void main(String[] args)
    {
        MethodTrace traceObj = new MethodTrace();
        System.out.println(traceObj.square(2) + traceObj.divide(6, 2));
    }
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>5</p>
                </statement>
                <feedback>
                    <p>Make sure you call both methods and compute the square of 2 and then add the results.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>7</p>
                </statement>
                <feedback>
                    <p>Yes, square(2) returns 4 which is added to divide(6,2) which returns 3. The total of 4 + 3 is 7.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>4 3</p>
                </statement>
                <feedback>
                    <p>Make sure you add the results before printing it out.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>2 3</p>
                </statement>
                <feedback>
                    <p>Make sure you square(2) and add the results before printing it out.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Does not compile.</p>
                </statement>
                <feedback>
                    <p>Try the code in an active code window.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            <p>The <c>Turtle</c> class has a method called
                <c>getDistance(x,y)</c> which will return the turtle’s distance from a point (x,y). Can you find yertle’s distance from the point (0,0)? In the exercise below, add another turtle and make both turtles move. Then find the distance between them. You must use the <c>getXPos</c> and <c>getYPos</c> methods as well as the
                <c>getDistance</c> method.</p>

<exercise label="TurtleDistance">
    <statement>
            <p>Use the <c>getXPos</c>, <c>getYPos</c>, and <c>getDistance(x,y)</c> methods to find yertle’s distance from the point (0,0). Add another turtle, move both turtles to different positions, and find the distance between the two turtles.</p>

    </statement>
    <program interactive="activecode" language="java" datafile="turtleClasses.jar,turtleClasses2.jar">
        <input>
import java.awt.*;
import java.util.*;

public class TurtleTestDistance
{
    public static void main(String[] args)
    {
        World world = new World(300, 300);
        Turtle yertle = new Turtle(world);

        // Can you find yertle's distance from the point (0,0)?

        // Can you find the distance between 2 turtles?

        world.show(true);
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleTestDistance");
    }

    @Test
    public void test2()
    {
        String code = getCode();
        int num = countOccurences(code, ".getXPos()");

        boolean passed = num &gt; 0;
        getResults("&gt;=1", "" + num, "Calls to getXPos()", passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCode();
        int num = countOccurences(code, ".getYPos()");

        boolean passed = num &gt; 0;
        getResults("&gt;=1", "" + num, "Calls to getYPos()", passed);
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String code = getCode();
        int num = countOccurences(code, ".getDistance(");

        boolean passed = num &gt;= 2;
        getResults("&gt;=2", "" + num, "Calls to getDistance(...)", passed);
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        String code = getCode();
        int num = countOccurences(code, ".getDistance(0,0)");

        boolean passed = num &gt;= 1;
        getResults("&gt;=1", "" + num, "Calls getDistance(0,0)", passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
        </subsection>
  <subsection>
            <title>Coding Challenge : Turtle House</title>
            <image source="Unit1-Using-Objects-and-Methods/Figures/houseWithWindows.png" width="36%%" alt="simple house"/>
            <p>This creative challenge is fun to do collaboratively in pairs. Design a house and have the turtle draw it with different colors below. Can you add windows and a door? Come up with your own house design as a team.</p>
            <p>To draw a window, you will need to call <c>penUp</c> and <c>moveTo</c> to walk the turtle into position without drawing, for example:</p>
            <program language="java"><input>
t.penUp();
t.moveTo(120,200);
t.penDown();
</input></program>
            <p>It may help to act out the code pretending you are the turtle. Remember that the angles you turn depend on which direction you are facing, and the turtle begins facing up. When planning your coordinates for the house, remember that the turtle starts at the center of the screen (150,150) and the top left corner is (0,0).</p>

<exercise label="challenge-TurtleHouse">
    <statement>
            <p>Draw a Turtle House! Make sure you use forward, turn, penUp, penDown, moveTo methods as well as different colors. Have fun!</p>

    </statement>
    <program interactive="activecode" language="java" datafile="turtleClasses.jar,turtleClasses2.jar">
        <input>
import java.awt.*;
import java.util.*;

public class TurtleHouse
{
    public static void main(String[] args)
    {
        World world = new World(300, 300);
        Turtle t = new Turtle(habitat);
        // Use t to draw a house



        // keep this line at the end of your code to show the drawing
        world.show(true);
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleHouse");
    }

    @Test
    public void test2()
    {
        String code = getCode();
        int num = countOccurences(code, "moveTo(");

        boolean passed = num &gt;= 1;
        passed = getResults("1 or more", "" + num, "Calls moveTo(...)", passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCode();
        int num = countOccurences(code, ".penUp()");

        boolean passed = num &gt;= 1;
        passed = getResults("1 or more", "" + num, "Calls penUp()", passed);
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String code = getCode();
        int num = countOccurences(code, ".penDown(");

        boolean passed = num &gt;= 1;
        passed = getResults("1 or more", "" + num, "Calls penDown()", passed);
        assertTrue(passed);
    }

    @Test
    public void test5()
    {
        String code = getCode();
        int numTurns = countOccurences(code, ".turn");

        boolean passed = numTurns &gt;= 6;
        passed = getResults("6 or more", "" + numTurns, "turns", passed);
        assertTrue(passed);
    }

    @Test
    public void test6()
    {
        String code = getCode();
        int numForward = countOccurences(code, ".forward(");

        boolean passed = numForward &gt;= 6;
        passed = getResults("6 or more", "" + numForward, "Calls to forward()", passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
        </subsection>
  <subsection>
            <title>Summary</title>
            <p><ul>
                <li>
                    <p><term>Instance methods</term> define the behavior and actions that an object can perform.</p>
                </li>
                <li>
                    <p>(AP 1.14.A.1) <term>Instance methods</term> are called on objects of the class.</p>
                </li>
                <li>
                    <p>(AP 1.14.A.1) The dot operator is used along with the object name to <term>call</term> instance methods, for example <term>object.method();</term></p>
                </li>
                <li>
                    <p>(AP 1.14.A.2) A method call on a <c>null</c> reference will result in a <c>NullPointerException</c>.</p>
                </li>
                <li>
                    <p>Some methods take <term>arguments</term> that are placed inside the parentheses <term>object.method(arguments)</term>.</p>
                </li>
                <li>
                    <p>A <term>method signature</term> is the method name followed by the parameter list which gives the type and name for each parameter. Note that methods do not have to take any parameters, but you still need the parentheses after the method name.</p>
                </li>
                <li>
                    <p>The method call arguments must match the method signature in number, order, and type.</p>
                </li>
                <li>
                    <p>A <term>method</term>  call interrupts the sequential execution of statements, causing the program to first execute the statements in the method or constructor before continuing. Once the last statement in the method or constructor has executed or a <c>return</c> statement is executed, the flow of control is returned to the point immediately following the method or constructor call.</p>
                </li>
                <li>
                    <p><term>Non-void methods</term> are methods that return values. You should do something with the return value, such as assigning it to a variable, using it in an expression, or printing it.</p>
                </li>
            </ul></p>
        </subsection>
  <subsection>
            <title>AP Practice</title>

    <exercise label="AP-Party-Methods">
        <statement>

            <p> Consider the following class definition.</p>
            <program language="java"><input>
public class Party
{
    private int numInvited;
    private boolean partyCancelled;

    public Party()
    {
        numInvited = 1;
        partyCancelled = false;
    }

    public void inviteFriend()
    {
        numInvited++;
    }

    public void cancelParty()
    {
        partyCancelled = true;
    }
}
</input></program>
            <p>Assume that a Party object called myParty has been properly declared and initialized in a class other than Party.  Which of the following statements are valid?</p>
</statement><choices><choice correct="yes"><statement id="AP-Party-Methods_opt_a">            <p>myParty.cancelParty();</p>
</statement><feedback id="AP-Party-Methods_opt_a">
            <p>Correct!</p>
</feedback></choice><choice><statement id="AP-Party-Methods_opt_b">            <p>myParty.inviteFriend(2);</p>
</statement><feedback id="AP-Party-Methods_opt_b">
            <p>The method inviteFriend() does not have any parameters.</p>
</feedback></choice><choice><statement id="AP-Party-Methods_opt_c">            <p>myParty.endParty();</p>
</statement><feedback id="AP-Party-Methods_opt_c">
            <p>There is no endParty() method in the class Party.</p>
</feedback></choice><choice><statement id="AP-Party-Methods_opt_d">            <p>myParty.numInvited();</p>
</statement><feedback id="AP-Party-Methods_opt_d">
            <p>There is no numInvited() method in the class Party. It is an instance variable.</p>
</feedback></choice><choice><statement id="AP-Party-Methods_opt_e">            <p>System.out.println( myParty.cancelParty() );</p>
</statement><feedback id="AP-Party-Methods_opt_e">
            <p>This would cause an error because the void method cancelParty() does not return a String that could be printed.</p>
</feedback></choice></choices>

    </exercise>

    <exercise label="AP-Cat-trace">
        <statement>

            <p> Consider the following class definition.</p>
            <program language="java"><input>
public class Cat
{
    public void meow()
    {
        System.out.print("Meow ");
    }

    public void purr()
    {
        System.out.print("purr");
    }

    public void welcomeHome()
    {
        purr();
        meow();
    }
    /* Constructors not shown */
}
</input></program>
            <p>Which of the following code segments, if located in a method in a class other than Cat, will cause the message “Meow purr” to be printed?</p>
</statement><choices><choice><statement id="AP-Cat-trace_opt_a">            <program language="java"><input>
Cat a = new Cat();
Cat.meow();
Cat.purr();
</input></program>
</statement><feedback id="AP-Cat-trace_opt_a">
            <p>You must use the object a, not the class name Cat, to call these methods.</p>
</feedback></choice><choice><statement id="AP-Cat-trace_opt_b">            <program language="java"><input>
Cat a = new Cat();
a.welcomeHome();
</input></program>
</statement><feedback id="AP-Cat-trace_opt_b">
            <p>This would print “purrMeow “</p>
</feedback></choice><choice correct="yes"><statement id="AP-Cat-trace_opt_c">            <program language="java"><input>
Cat a = new Cat();
a.meow();
a.purr();
</input></program>
</statement><feedback id="AP-Cat-trace_opt_c">
            <p>Correct!</p>
</feedback></choice><choice><statement id="AP-Cat-trace_opt_d">            <program language="java"><input>
Cat a = new Cat().welcomeHome();
</input></program>
</statement><feedback id="AP-Cat-trace_opt_d">
            <p>This would cause a syntax error.</p>
</feedback></choice><choice><statement id="AP-Cat-trace_opt_e">            <program language="java"><input>
Cat a = new Cat();
a.meow();
</input></program>
</statement><feedback id="AP-Cat-trace_opt_e">
            <p>This would just print “Meow “.</p>
</feedback></choice></choices>

    </exercise>

    <exercise label="AP-Liquid-return">
        <statement>

            <p> Consider the following class definition.</p>
            <program language="java"><input>
public class Liquid
{
    private double boilingPoint;
    private double freezingPoint;
    private double currentTemp;

    public Liquid()
    {
        currentTemp = 50;
    }

    public void lowerTemp()
    {
        currentTemp -= 10;
    }

    public double getTemp()
    {
        return currentTemp;
    }
}
</input></program>
            <p>Assume that the following code segment appears in a class other than Liquid.</p>
            <program language="java"><input>
Liquid water = new Liquid();
water.lowerTemp();
System.out.println(water.getTemp());
</input></program>
            <p>What is printed as a result of executing the code segment? (If you get stuck, try this <url href="https://pythontutor.com/render.html#code=public%20class%20Liquid%20%7B%0A%20%20%0A%20%20%20%20private%20double%20boilingPoint%3B%0A%20%20%20%20private%20double%20freezingPoint%3B%0A%20%20%20%20private%20double%20currentTemp%3B%0A%0A%20%20%20%20public%20Liquid%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20currentTemp%20%3D%2050%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20void%20lowerTemp%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20currentTemp%20-%3D%2010%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20double%20getTemp%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20return%20currentTemp%3B%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20Liquid%20water%20%3D%20new%20Liquid%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20water.lowerTemp%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20System.out.println%28water.getTemp%28%29%29%3B%0A%20%20%20%20%7D%0A%7D&amp;cumulative=false&amp;curInstr=18&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" visual="https://pythontutor.com/render.html#code=public%20class%20Liquid%20%7B%0A%20%20%0A%20%20%20%20private%20double%20boilingPoint%3B%0A%20%20%20%20private%20double%20freezingPoint%3B%0A%20%20%20%20private%20double%20currentTemp%3B%0A%0A%20%20%20%20public%20Liquid%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20currentTemp%20%3D%2050%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20void%20lowerTemp%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20currentTemp%20-%3D%2010%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20double%20getTemp%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20return%20currentTemp%3B%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20Liquid%20water%20%3D%20new%20Liquid%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20water.lowerTemp%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20System.out.println%28water.getTemp%28%29%29%3B%0A%20%20%20%20%7D%0A%7D&amp;cumulative=false&amp;curInstr=18&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false">visualization</url> to see this code in action.)</p>
</statement><choices><choice><statement id="AP-Liquid-return_opt_a">            <p>-10</p>
</statement><feedback id="AP-Liquid-return_opt_a">
            <p>The Liquid() constructor sets the currentTemp instance variable to 50 and the lowerTemp() method subtracts 10 from it.</p>
</feedback></choice><choice><statement id="AP-Liquid-return_opt_b">            <p>50</p>
</statement><feedback id="AP-Liquid-return_opt_b">
            <p>The Liquid() constructor sets the currentTemp instance variable to 50 and the lowerTemp() method subtracts 10 from it.</p>
</feedback></choice><choice><statement id="AP-Liquid-return_opt_c">            <p>water.getTemp()</p>
</statement><feedback id="AP-Liquid-return_opt_c">
            <p>The System.out.println will print the value returned from water.getTemp().</p>
</feedback></choice><choice><statement id="AP-Liquid-return_opt_d">            <p>The code will not compile.</p>
</statement><feedback id="AP-Liquid-return_opt_d">
            <p>This code should compile.</p>
</feedback></choice><choice correct="yes"><statement id="AP-Liquid-return_opt_e">            <p>40.0</p>
</statement><feedback id="AP-Liquid-return_opt_e">
            <p>Correct, the Liquid() constructor sets the currentTemp instance variable to 50, and the lowerTemp() method subtracts 10 from it, and getTemp() returns the currentTemp value as a double.</p>
</feedback></choice></choices>

    </exercise>

    <exercise label="AP-Pizza-trace-args">
        <statement>

            <p> Consider the following methods, which appear in the same class.</p>
            <program language="java"><input>
public void splitPizza(int numOfPeople)
{
    int slicesPerPerson = 8/numOfPeople;
    /* INSERT CODE HERE */
}

public void printSlices(int slices)
{
    System.out.println("Each person gets " + slices + " slices each");
}
</input></program>
            <p>Which of the following lines would go into <c>/* INSERT CODE HERE */</c> in the method splitPizza in order to call the <c>printSlices</c> method to print the number of slices per person correctly?</p>
</statement><choices><choice correct="yes"><statement id="AP-Pizza-trace-args_opt_a">            <p>printSlices(slicesPerPerson);</p>
</statement><feedback id="AP-Pizza-trace-args_opt_a">
            <p>Correct! If you had 4 people, slicesPerPerson would be 8/4=2 and printSlices would print out “Each person gets 2 slices each”.</p>
</feedback></choice><choice><statement id="AP-Pizza-trace-args_opt_b">            <p>printSlices(numOfPeople);</p>
</statement><feedback id="AP-Pizza-trace-args_opt_b">
            <p>If you had 4 people, this would print out that they get 4 slices each of an 8 slice pizza.</p>
</feedback></choice><choice><statement id="AP-Pizza-trace-args_opt_c">            <p>printSlices(8);</p>
</statement><feedback id="AP-Pizza-trace-args_opt_c">
            <p>This would always print out 8 slices each.</p>
</feedback></choice><choice><statement id="AP-Pizza-trace-args_opt_d">            <p>splitPizza(8);</p>
</statement><feedback id="AP-Pizza-trace-args_opt_d">
            <p>This would not call the printSlices method.</p>
</feedback></choice><choice><statement id="AP-Pizza-trace-args_opt_e">            <p>splitPizza(slicesPerPerson);</p>
</statement><feedback id="AP-Pizza-trace-args_opt_e">
            <p>This would not call the printSlices method.</p>
</feedback></choice></choices>

    </exercise>
        </subsection>
</section>

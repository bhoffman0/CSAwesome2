<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section>
  <title>Exam 5 for the AP CSA Exam (not timed)</title>
  <p>The following problems are similar to what you might see on the AP CSA exam.  Please answer each to the best of your ability.</p>
  <exercises>
    <exercise label="qtnt5_1">
        <statement>

        <p> Suppose <c>x, y, and z</c> are variables of type <c>int</c>. Consider the following three conditions</p>
        <p><ol marker="I">
            <li>
                <p>(x == y) &amp;&amp; (y == z)  &amp;&amp; (x == z)</p>
            </li>
            <li>
                <p>(x==y) || (y==z) &amp;&amp; (x == z)</p>
            </li>
            <li>
                <p>(x - y) * (x - z) * (y - z) == 0</p>
            </li>
        </ol></p>
        <p>Which of these conditions is (are) always true if x == y is true?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>I only</p>
                </statement>
                <feedback>
                    <p>We don't know the value of z</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>II only</p>
                </statement>
                <feedback>
                    <p>II is true but there is (are) other statements that evaluate to true</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>III only</p>
                </statement>
                <feedback>
                    <p>III is true but there is (are) other statements that evaluate to true</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>I and II only</p>
                </statement>
                <feedback>
                    <p>For I, we don't know the value of z</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>II and III only</p>
                </statement>
                <feedback>
                    <p>III executes to true if either a||b true, III is true because x-y will become 0 then 0 * a *b... = 0</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="qtnt5_2">
        <statement>

        <p> Consider the following method. What will be returned by a call to <c>multiply(8)</c>?</p>
        <program language="java"><input>
public int multiply(int n)
{
    if (n == 0)
        return 1;
    else if(n % 2 == 1)
        return n;
    else
        return n * multiply(n - 2);
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>1</p>
                </statement>
                <feedback>
                    <p>n != 0</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>8</p>
                </statement>
                <feedback>
                    <p>There are some recursive calls since n % 2 != 1</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>8*7*6*5*4*3*2</p>
                </statement>
                <feedback>
                    <p>Subtracts 2 from original number of 8, so could never call an odd number to be multiplied</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>8*6*4*2</p>
                </statement>
                <feedback>
                    <p>Will recursively call 8 -2, then 6-2, and lastly 4-2</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>7*5*3</p>
                </statement>
                <feedback>
                    <p>Subtracts 2 from original number of 8, so could never call an odd number to be multiplied</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="qtnt5_3">
        <statement>

        <p> Which of the following code segments correctly stores in <c>x</c> a random real number such that <c>0.6 &lt;= x &lt; 1</c>?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>double x = 0.6 * Math.random( ) + 0.4;</p>
                </statement>
                <feedback>
                    <p>This gives .4 &lt;= x &lt;1</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>double x = 0.4 * Math.random( ) + 0.6;</p>
                </statement>
                <feedback>
                    <p>Math.random() returns 0(inclusive) to 1(exclusive) so this makes 0 + .6 the lower bound, and .99999 the upper bound</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>double x = Math.random( ) - 0.4;</p>
                </statement>
                <feedback>
                    <p>This gives -.4 &lt;= x &lt; 6</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>double x = (double) (Math.random( ) * 0.4);</p>
                </statement>
                <feedback>
                    <p>This doesn't ensure lower bound and upper bound</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>double x = (double) (Math.random( ) + 0.6);</p>
                </statement>
                <feedback>
                    <p>This doesn't ensure lower bound and upper bound</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="qtnt5_4">
        <statement>

        <p> Suppose methods <c>f1</c> and <c>f2</c> are defined as follows. What value is returned from the call <c>f1(5)</c>?</p>
        <program language="java"><input>
public int f1(int x)
{
    if(x == 0)
        return 0;
    else
        return f2(x -2);
}

public int f2(int x)
{
    if(x == 1)
        return 1;
    else
        return f1(x + 1) + x;
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>-4</p>
                </statement>
                <feedback>
                    <p>Trace out the recursive calls. See https://tinyurl.com/AP19-Q6</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>4</p>
                </statement>
                <feedback>
                    <p>Trace out the recursive calls. See https://tinyurl.com/AP19-Q6</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>6</p>
                </statement>
                <feedback>
                    <p>Correct!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>8</p>
                </statement>
                <feedback>
                    <p>Trace out the recursive calls. See https://tinyurl.com/AP19-Q6</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>-6</p>
                </statement>
                <feedback>
                    <p>Trace out the recursive calls. See https://tinyurl.com/AP19-Q6</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="qtnt5_5">
        <statement>

        <p> Which statement about constructors is <c>false</c>?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>It is legal for the value of a static variable to be changed in a constructor.</p>
                </statement>
                <feedback>
                    <p>Static variables can still have their values changed</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The constructor in a subclass must use the keyword super to initialize the private instance variables from its superclass.</p>
                </statement>
                <feedback>
                    <p>This is true, under the hood if you don't explicitly use the 'super' keyword, the compiler will do it for you automatically</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>A constructor has no return type.</p>
                </statement>
                <feedback>
                    <p>This is true.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>A constructor must be private.</p>
                </statement>
                <feedback>
                    <p>Constructors should be public so that they can be called from outside the class to construct objects.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>If a subclass does not explicitly provide a constructor and its superclass has just one constructor with a parameter, an error will occur when an attempt is made to create an instance of a subclass object.</p>
                </statement>
                <feedback>
                    <p>Because of the inheritance, the constructor from super class will be called and it is expecting a passed in parameter</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="qtnt5_6">
        <statement>

        <p> Consider the following method. What will the output of <c>mystery(6)</c> return?</p>
        <program language="java"><input>
public int mystery(int n)
{
    if(n == 1 || n ==2)
        return 2;
    else
        return mystery(n -1) + mystery(n - 2);
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>10</p>
                </statement>
                <feedback>
                    <p>Trace out the recursive calls, see https://tinyurl.com/AP19-Q10</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>12</p>
                </statement>
                <feedback>
                    <p>Trace out the recursive calls, see https://tinyurl.com/AP19-Q10</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>16</p>
                </statement>
                <feedback>
                    <p>Trace out the recursive calls, see https://tinyurl.com/AP19-Q10</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>26</p>
                </statement>
                <feedback>
                    <p>Trace out the recursive calls, see https://tinyurl.com/AP19-Q10</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>32</p>
                </statement>
                <feedback>
                    <p>Trace out the recursive calls, see https://tinyurl.com/AP19-Q10</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="qtnt5_7">
        <statement>

        <p> Suppose <c>a and b</c> are <c>boolean</c> variables. The expression below</p>
        <p><c>!a &amp;&amp; !b</c></p>
        <p>…will evaluate to <c>false</c> whenever</p>
        <p><ol marker="I">
            <li>
                <p>a and b are both false</p>
            </li>
            <li>
                <p>a is false and b is true</p>
            </li>
            <li>
                <p>a is true and b is false</p>
            </li>
        </ol></p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>I only</p>
                </statement>
                <feedback>
                    <p>This is true because !false &amp;&amp; !false becomes true &amp;&amp; true</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>II only</p>
                </statement>
                <feedback>
                    <p>If either a or b (or both a AND b) is true whole expression becomes false</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>III only</p>
                </statement>
                <feedback>
                    <p>If either a or b (or both a AND b) is true whole expression becomes false</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>II and III only</p>
                </statement>
                <feedback>
                    <p>If either a or b (or both a AND b) is true whole expression becomes false</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>I, II, and III</p>
                </statement>
                <feedback>
                    <p>If either a or b (or both a AND b) is true whole expression becomes false</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="qtnt5_8">
        <statement>

        <p> Consider the following code segment. What will be the output after execution of this code segment?</p>
        <program language="java"><input>
int x = 10, y = 0;
while(x &gt; 5)
{
    y = 3;
    while(y &lt; x)
    {
        y *= 2;
        if( y % x == 1)
            y += x;
    }
    x -= 3
}
System.out.println(x + " " + y);
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>1 6</p>
                </statement>
                <feedback>
                    <p>condition (y % x ==1) never true. Trace it out https://tinyurl.com/AP19-Q12</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>7 12</p>
                </statement>
                <feedback>
                    <p>condition (y % x ==1) never true. Trace it out https://tinyurl.com/AP19-Q12</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>-3 12</p>
                </statement>
                <feedback>
                    <p>condition (y % x ==1) never true. Trace it out https://tinyurl.com/AP19-Q12</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>4 12</p>
                </statement>
                <feedback>
                    <p>condition (y % x ==1) never true</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>-3 6</p>
                </statement>
                <feedback>
                    <p>condition (y % x ==1) never true. Trace it out https://tinyurl.com/AP19-Q12</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="qtnt5_9">
        <statement>

        <p> What value is stored in <c>result</c> if:</p>
        <program language="Java"><input>
int result = 13 - 3 * 6 / 4 % 3
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>-5</p>
                </statement>
                <feedback>
                    <p>the %, *, and / all have the same precedence</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>0</p>
                </statement>
                <feedback>
                    <p>the %, *, and / all have the same precedence</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>13</p>
                </statement>
                <feedback>
                    <p>the %, *, and / all have the same precedence</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>-1</p>
                </statement>
                <feedback>
                    <p>the %, *, and / all have the same precedence</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>12</p>
                </statement>
                <feedback>
                    <p>the %, *, and / all have the same precedence</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="qtnt5_10">
        <statement>

        <p> Consider the following code segment. Assume <c>k</c> is some positive integer greater than 2. How many times will “SMALL” be printed?</p>
        <program language="Java"><input>
for(int i = 2; i &lt;= k; i++)
{
    if(arr[i] &lt; someValue)
       System.out.print("SMALL");
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>0</p>
                </statement>
                <feedback>
                    <p>k &gt; 2 so will print out "SMALL"</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>1</p>
                </statement>
                <feedback>
                    <p>k can be greater than 3</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>k -1</p>
                </statement>
                <feedback>
                    <p>max of k-1 iterations (end - start + 1 is k - 2 + 1)</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>k -2</p>
                </statement>
                <feedback>
                    <p>it is &lt;= k so inclusive of k</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>k</p>
                </statement>
                <feedback>
                    <p>max of k -1 iterations</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="qtnt5_11">
        <statement>

        <p> Which best describes what the <c>printSomething</c> method below does?</p>
        <program language="Java"><input>
public void printSomething(String str)
{
    if(str.length() &gt; 0)
    {
        System.out.print(str.substring(0,1));
        printSomething(str.substring(1));
    }

}
</input></program>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>It prints string str</p>
                </statement>
                <feedback>
                    <p>Prints out the leftmost character at the start of the recursive call. Then always trims off the left most character, but substring(x) with single parameter x gives the remaining string from index x until the end. See https://tinyurl.com/AP19-Q17</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>It prints string str in reverse order</p>
                </statement>
                <feedback>
                    <p>substring(0,1) prints leftmost char not the rightmost char</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>It prints only the first two characters of string str</p>
                </statement>
                <feedback>
                    <p>there is a recursive call of a substring at each iteration</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>It prints only the first two characters of string str</p>
                </statement>
                <feedback>
                    <p>goes until s.length &gt; 0</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>It prints only the last character of string str</p>
                </statement>
                <feedback>
                    <p>goes until s.length &gt; 0 and there are recursive calculates</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="qtnt5_12">
        <statement>

        <p> A square matrix is declared as</p>
        <p><c>int[][] mat = new int [SIZE][SIZE]</c></p>
        <p>where <c>SIZE</c> is an appropriate integer constant. Consider the code below.</p>
        <p>If mat is initialized to be:</p>
        <program language="java"><input>
2 6 3
4 5 1
7 1 2
</input></program>
        <p>What value will be returned by a call to <c>sum(mat)</c>?</p>
        <program language="Java"><input>
public static int sum(int[][] mat)
{
    int total = 0;
    for(int r = 0; r &lt; mat.length; r++)
    {
        for(int c = 0; c &lt;= r; c++)
        {
            total += mat[r][c];
        }
    }
    return total;
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>9</p>
                </statement>
                <feedback>
                    <p>Second for loop goes until colum &lt;= row index</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>15</p>
                </statement>
                <feedback>
                    <p>Second for loop goes until colum &lt;= row index</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>19</p>
                </statement>
                <feedback>
                    <p>Second for loop goes until colum &lt;= row index</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>21</p>
                </statement>
                <feedback>
                    <p>adds the lower half of the matrix</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>31</p>
                </statement>
                <feedback>
                    <p>Second for loop goes until colum &lt;= row index</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="qtnt5_13">
        <statement>

        <p> The elements of an array are to be sorted in increasing order. Which represent the first step of a merge sort algorithm?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Find the smallest element in arr and swap it into arr[0]</p>
                </statement>
                <feedback>
                    <p>This is for selection sort</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Compare arr[0] with arr[1] and, if necessary, shift and replace elements such that arr[0] is less than arr[1]</p>
                </statement>
                <feedback>
                    <p>This is for bubble sort</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Compare arr[0] with the middle element of arr, arr[mid] , and if arr[0] is less than arr[mid] , swap these elements</p>
                </statement>
                <feedback>
                    <p>Merge sort deals with cutting sets into halves and repeating this process</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Compare the first and last elements, and if the first is less than the last, swap   these elements.</p>
                </statement>
                <feedback>
                    <p>Merge sort deals with cutting sets into halves and repeating this process</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Break the array into roughly two equal halves.</p>
                </statement>
                <feedback>
                    <p>Firs step is to cut sets in halves until you get to a single element in a 'set'</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="qtnt5_14">
        <statement>

        <p> Which of the following could replace the body of <c>compute</c> so it does the same thing.</p>
        <program language="Java"><input>
public static int compute(int n)
{
    for(int i = 1; i &lt; 4; i++)
    {
        n *= n;
    }
    return n;
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>return 4 * n;</p>
                </statement>
                <feedback>
                    <p>3 iterations of the loop and each loop does  n^2</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>return 8 * n;</p>
                </statement>
                <feedback>
                    <p>3 iterations of the loop and each loop does  n^2</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>return 64 * n;</p>
                </statement>
                <feedback>
                    <p>3 iterations of the loop and each loop does  n^2</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>return (int) Math.pow(n,4);</p>
                </statement>
                <feedback>
                    <p>3 iterations of the loop and each loop does  n^2</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>return (int) Math.pow(n,8);</p>
                </statement>
                <feedback>
                    <p>Method basically does (n^2)^3 which is the same as n ^ 8</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="qtnt5_15">
        <statement>

        <p> How many times will the <c>asterik("*")</c> be printed?</p>
        <program language="Java"><input>
for(int k = 4; k &lt; 10; k +=2)
{
    for(int j = 1; j &lt;= 5; j++)
    {
        System.out.print("*");
    }
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>36</p>
                </statement>
                <feedback>
                    <p>Outer loop does gets incremented by 2, NOT by 1. Also, j starts at 1, NOT 0</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>30</p>
                </statement>
                <feedback>
                    <p>Inner loop starts at 1 and is ends at 5 inclusive so exectues 5 times</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>35</p>
                </statement>
                <feedback>
                    <p>Outer loop does gets incremented by 2, NOT by 1</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>15</p>
                </statement>
                <feedback>
                    <p>Outerloop executes 3 times and inner loop executes 5 times.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>18</p>
                </statement>
                <feedback>
                    <p>See http://tinyurl.com/AP19-Q23</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="qtnt5_16">
        <statement>

        <p> Consider the following code. What is printed?</p>
        <program language="java"><input>
class Dog
{

    public void act()
    {
        System.out.print("run ");
        eat();
    }

    public void eat()
    {
        System.out.print("eat ");
    }
}

public class UnderDog extends Dog
{

    public void act()
    {
        super.act();
        System.out.print("sleep ");
    }

    public void eat()
    {
        super.eat();
        System.out.print("bark ");
    }

    public static void main(String[] args)
    {
        Dog fido = new UnderDog();
        fido.act();
    }
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>run eat</p>
                </statement>
                <feedback>
                    <p>Because the fido is an "Underdog", we will call the eat() from class Underdog, http://tinyurl.com/AP19-Q25</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>run eat sleep</p>
                </statement>
                <feedback>
                    <p>Because the fido is an "Underdog", we will call the eat() from class Underdog, http://tinyurl.com/AP19-Q25</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>run eat sleep bark</p>
                </statement>
                <feedback>
                    <p>Because the fido is an "Underdog", we will call the eat() from class Underdog, http://tinyurl.com/AP19-Q25</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>run eat bark sleep</p>
                </statement>
                <feedback>
                    <p>Because the fido is an "Underdog", we will call the eat() from class Underdog, http://tinyurl.com/AP19-Q25</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Nothing is printed due to infinite recursion</p>
                </statement>
                <feedback>
                    <p>Because the fido is an "Underdog", we will call the eat() from class Underdog, http://tinyurl.com/AP19-Q25</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="qtnt5_17">
        <statement>

        <p> What is the output of the <c>System.out.println</c> statement?</p>
        <program language="Java"><input>
int x = 3, y = -2;
while(x &gt; y)
{
    x--;
    y++;
}
System.out.println(x - y);
</input></program>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>-1</p>
                </statement>
                <feedback>
                    <p>x becomes 0 and y becomes 1 so 0 - 1 = -1</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>1</p>
                </statement>
                <feedback>
                    <p>make sure to do x-y and not y-x</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>0</p>
                </statement>
                <feedback>
                    <p>http://tinyurl.com/AP19-Q26</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>-2</p>
                </statement>
                <feedback>
                    <p>http://tinyurl.com/AP19-Q26</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>2</p>
                </statement>
                <feedback>
                    <p>http://tinyurl.com/AP19-Q26</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="qtnt5_18">
        <statement>

        <p> What will be the value of <c>sum</c> after the execution of code above?</p>
        <program language="Java"><input>
int sum = 0;
for(int i = 0; i &lt; 3; i++)
{
    if((i % 2) - 1 ==0)
        sum += 3;
    else
        sum++;
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>4</p>
                </statement>
                <feedback>
                    <p>i%2 -1 ==0 means "is this number odd". See http://tinyurl.com/AP19-Q27</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>5</p>
                </statement>
                <feedback>
                    <p>i%2 -1 ==0 means "is this number odd". See http://tinyurl.com/AP19-Q27</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>6</p>
                </statement>
                <feedback>
                    <p>i%2 -1 ==0 means "is this number odd". See http://tinyurl.com/AP19-Q27</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>7</p>
                </statement>
                <feedback>
                    <p>i%2 -1 ==0 means "is this number odd". See http://tinyurl.com/AP19-Q27</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>8</p>
                </statement>
                <feedback>
                    <p>i%2 -1 ==0 means "is this number odd". See http://tinyurl.com/AP19-Q27</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="qtnt5_19">
        <statement>

        <p> What is printed out by the following code?</p>
        <program language="Java"><input>
String s = "Computer Science is fun!";
String s1 = s.substring(0,8);
String s2 = s1.substring(1);
String s3 = s2.substring(1,3);

System.out.println(s3);
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>mput</p>
                </statement>
                <feedback>
                    <p>The .substring() function is inclusive left, exclusive right. Also if passed a single parameter it will take that as the starting index for the substring up to the rest of the string.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>mpu</p>
                </statement>
                <feedback>
                    <p>The .substring() function is inclusive left, exclusive right. Also if passed a single parameter it will take that as the starting index for the substring up to the rest of the string.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>mp</p>
                </statement>
                <feedback>
                    <p>The .substring() function is inclusive left, exclusive right. Also if passed a single parameter it will take that as the starting index for the substring up to the rest of the string.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>omp</p>
                </statement>
                <feedback>
                    <p>The .substring() function is inclusive left, exclusive right. Also if passed a single parameter it will take that as the starting index for the substring up to the rest of the string.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Om</p>
                </statement>
                <feedback>
                    <p>The .substring() function is inclusive left, exclusive right. Also if passed a single parameter it will take that as the starting index for the substring up to the rest of the string.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
  </exercises>
</section>

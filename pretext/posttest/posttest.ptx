<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="posttest">
        <title>Post Test</title>
        <p>The following questions are similar to what you might see on the AP CSA exam.  Please answer each to the best of your ability, and complete the few survey questions at the bottom too.</p>
        <p>Please make sure you are logged in on Runestone so that your answers are saved. Click the start button when you are ready to begin the exam. You can only take the exam once. There are no time limits, but it will keep track of how much time you take. Click on the next button to go to the next question.  Click on the previous button to go to the previous question.  Use the number buttons to jump to a particular question.  Click the pause button to pause the exam (you will not be able to see the questions when the exam is paused).  Click on the finish button after you have answered all the questions.  The number correct, number wrong, and number skipped will be displayed.</p>
        <p>Please note that this is a difficult exam. We estimate that a score of about 50% on this test would correspond to the passing grade of 3 on the AP exam, a score of 65% to a 4, and a score of 80% and above to a 5 on the AP exam. These are just estimates and may not correspond to individual scores.</p>
        <exercises time-limit="1000" timer="no">

    <exercise label="pe2_1-14">
        <statement>

            <p> Under which of these conditions will a sequential search be faster than a binary search?</p>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>The value you are searching for is the first element in the array.</p>
                </statement>
                <feedback>
                    <p>Only when the search value is the first item in the array, and thus the first value encountered in sequential search, will sequential be faster than binary.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The value you are searching for is the last element in the array</p>
                </statement>
                <feedback>
                    <p>In this case a sequential search will have to check every element before finding the correct one, whereas a binary search will not.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The value you are searching for is in the middle of the array.</p>
                </statement>
                <feedback>
                    <p>Results will differ depending on the exact location of the element, but Binary Search will still find the element faster while Sequential will have to check more elements.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The value you are searching for is not in the array</p>
                </statement>
                <feedback>
                    <p>If the search value is not in the array, a sequential search will have to check every item in the array before failing, a binary search will be faster.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Sequential Search can never be faster than Binary Search.</p>
                </statement>
                <feedback>
                    <p>When the search value is the first element, Sequential will always be faster, as it will only need to check one element.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="pe2_2-9">
        <statement>

            <p> Which of the following expressions is equivalent to the following?</p>
            <program language="java"><code>
!(c || d)
</code></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>(c || d)</p>
                </statement>
                <feedback>
                    <p>NOTing an OR expression does not result in the same values ORed.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>(c &amp;&amp; d)</p>
                </statement>
                <feedback>
                    <p>You do negate the OR to AND, but you also need to negate the values of d and d.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>(!c) || (!d)</p>
                </statement>
                <feedback>
                    <p>This would be equivalent to (!(c &amp;&amp; d)) using De Morgans laws.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>!(c &amp;&amp; d)</p>
                </statement>
                <feedback>
                    <p>This would be equivalent to (!c || !d)</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>(!c) &amp;&amp; (!d)</p>
                </statement>
                <feedback>
                    <p>NOTing (negating) an OR expression is the same as the AND of the individual values NOTed (negated). See De Morgans laws.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="pe2_3-19">
        <statement>

            <p> What is encapsulation and how does Java implement it?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Data (fields) can be directly accessed by all code in all classes.</p>
                </statement>
                <feedback>
                    <p>Encapsulation is making data private so only code in the same class has direct access.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Data (fields) can be hidden inside of an object using the abstract visibility modifier.</p>
                </statement>
                <feedback>
                    <p>There is no abstract visibility modfier.  You can not use the keyword abstract on variable declarations.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Data (fields) are directly accessible by objects in the same package and in subclasses.</p>
                </statement>
                <feedback>
                    <p>Encapsulation means that only code in the defining class has direct access. The visibility modifier protected gives direct access to code in classes in the same package and subclasses.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Data (fields) can be hidden inside an object using the visibility modifier private.</p>
                </statement>
                <feedback>
                    <p>This is the definition of encapsulation and this is done in Java using private (a member is directly accessible only in the class that defines it) and protected (a member is directly accessible only within code in the same package and in subclasses).</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Data (fields) are directly accessible by objects in the same package.</p>
                </statement>
                <feedback>
                    <p>Encapsulation means that only code in the defining class has direct access. The default package access gives direct access to code in classes in the same package.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="pe2_4-10">
        <statement>

            <p> Which of the following will cause an infinite loop when <c>temp</c> is greater than zero and <c>a</c> is an array of integers.</p>
            <program language="java"><code>
for (int k = 0; k &lt; a.length; k++ )
{
   while (a[k] &lt; temp )
   {
      a[k] *= 2;
   }
}
</code></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>The values don't matter this will always cause an infinite loop.</p>
                </statement>
                <feedback>
                    <p>An infinite loop will not always occur in this program segment. It occurs when at least one value in a is less than or equal to 0.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Whenever a has values larger then temp.</p>
                </statement>
                <feedback>
                    <p>Values larger then temp will not cause an infinite loop.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>When all values in a are larger than temp.</p>
                </statement>
                <feedback>
                    <p>Values larger then temp will not cause an infinite loop.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Whenever a includes a value equal to temp.</p>
                </statement>
                <feedback>
                    <p>Values equal to temp will not cause the infinite loop.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Whenever a includes a value that is equal to zero.</p>
                </statement>
                <feedback>
                    <p>When a contains a value equal to zero then multiplying that value by 2 will always be 0 and never make the result larger than the temp value (which was set to some value &gt; 0), so an infinite loop will occur.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="pe2_5-5">
        <statement>

            <p> Given the following code segment, which of the following is this equivalent to?</p>
            <program language="java"><code>
if (x &gt; 0) 
   x = -x;
if (x &lt; 0) 
   x = 0;
</code></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>if (x &gt; 0) x = 0;</p>
                </statement>
                <feedback>
                    <p>Even if x is &lt; 0, the above code will set it to 0.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>x = 0;</p>
                </statement>
                <feedback>
                    <p>No matter what x is set to originally, the code will reset it to 0.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>if (x &lt; 0) x = 0;</p>
                </statement>
                <feedback>
                    <p>Even if x is &gt; than 0 originally, it will be set to 0 after the code executes.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>if (x &gt; 0) x = -x; else x = 0;</p>
                </statement>
                <feedback>
                    <p>The first if statement will always cause the second to be executed unless x already equals 0, such that x will never equal -x</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>if (x &lt; 0) x = 0; else x = -1;</p>
                </statement>
                <feedback>
                    <p>The first if statement will always cause the second to be executed unless x already equals 0, such that x will never equal -x</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="pe2_6-15">
        <statement>

            <p> Given the following code segment, what will be printed when it is executed?</p>
            <program language="java"><code>
List&lt;Integer&gt; list1 = new ArrayList&lt;Integer&gt;();
list1.add(new Integer(1));
list1.add(new Integer(2));
list1.add(new Integer(3));
list1.set(2, new Integer(4));
list1.add(2, new Integer(5));
list1.add(new Integer(6));
System.out.println(list1);
</code></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>[1, 2, 3, 4, 5]</p>
                </statement>
                <feedback>
                    <p>The set replaces the 3 with the 4 so this can't be right</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[1, 2, 4, 5, 6]</p>
                </statement>
                <feedback>
                    <p>The add with an index of 2 and a value of 5 adds the 5 at index 2 not 3. Remember that the first index is 0.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[1, 6, 2, 4, 5]</p>
                </statement>
                <feedback>
                    <p>How did the 6 get in position 2?</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[1, 5, 2, 4, 6]</p>
                </statement>
                <feedback>
                    <p>The add with an index of 2 and a value of 5 adds the 5 at index 2 not 1. Remember that the first index is 0.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>[1, 2, 5, 4, 6]</p>
                </statement>
                <feedback>
                    <p>The add method that takes just a value as a parameter adds that value to the end of the list. The set replaces the value at that index with the new value. The add with parameters of an index and a value puts the passed value at that index and moves any existing values by one index to the right (increments the index). So the list looks like: 1 // add 1 1 2 // add 2 1 2 3 // add 3 1 2 4 // set index 2 to 4 1 2 5 4 // add 5 to index 2 (move rest right) 1 2 5 4 6 // add 6 to end</p>
                </feedback>
            </choice>
</choices>

    </exercise>


    <exercise label="pe2_8-13">
        <statement>

            <p> Which of the following is printed as the result of the call <c>mystery(1234);</c>?</p>
            <program language="java"><code>
//precondition:  x &gt;=0
public void mystery (int x)
{
  System.out.print(x % 10);

  if ((x / 10) != 0)
  {
      mystery(x / 10);
  }
  System.out.print(x % 10);
}
</code></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Many digits are printed due to infinite recursion.</p>
                </statement>
                <feedback>
                    <p>When the recursive call to mystery(1) occurs (the 4th call to mystery), the division of x /10 equals .01--this becomes 0 because this is integer division and the remainder is thrown away. Therefore the current call will be completed and all of the previous calls to mystery will be completed.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>3443</p>
                </statement>
                <feedback>
                    <p>The first call to mystery with the integer 1234 will print 1234 % 10. The '%' means remainder. The remainder of 1234 divided by 10 is 4 so the first thing printed must be 4.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>43211234</p>
                </statement>
                <feedback>
                    <p>This has a recursive call which means that the method calls itself when (x / 10) is greater than or equal to zero. Each time the method is called it prints the remainder of the passed value divided by 10 and then calls the method again with the result of the integer division of the passed number by 10 (which throws away the decimal part). After the recursion stops by (x / 10) == 0 the method will print the remainder of the passed value divided by 10 again.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>1441</p>
                </statement>
                <feedback>
                    <p>The first call to mystery with the integer 1234 will print 1234 % 10. The '%' means remainder. The remainder of 1234 divided by 10 is 4 so the first thing printed must be 4.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>12344321</p>
                </statement>
                <feedback>
                    <p>The first call to mystery with the integer 1234 will print 1234 % 10. The '%' means remainder. The remainder of 1234 divided by 10 is 4 so the first thing printed must be 4.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="pe2_9-18">
        <statement>

            <p> Given the following code segment, what are the values of <c>a</c> and <c>b</c> after the <c>for</c> loop finishes?</p>
            <program language="java"><code>
int a = 10, b = 3, t;
for (int i=1; i&lt;=6; i++)
{
   t = a;
   a = i + b;
   b = t - i;
}
</code></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>a = 6 and b = 7</p>
                </statement>
                <feedback>
                    <p>This would be true if the loop stopped when i was equal to 6.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>a = 13 and b = 0</p>
                </statement>
                <feedback>
                    <p>The variable i loops from 1 to 6 and each time the values are as follows: i = 1, t = 10, a = 4, b = 9, i = 2, t = 4, a  = 11, b =2, i = 3, t = 11, a = 5, b = 8, i = 4, t = 5, a = 12, b = 1, i = 5, t = 12, a = 6, b = 7, i = 6, t = 6, a = 13, b = 0</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>a = 6 and b = 0</p>
                </statement>
                <feedback>
                    <p>Actually i = 6 and t = 6 and b = 0 after the loop finishes.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>a = 0 and b = 13</p>
                </statement>
                <feedback>
                    <p>Actually a = 13 and b = 0 after the loop finishes.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>a = 6 and b = 13</p>
                </statement>
                <feedback>
                    <p>Actually i = 6 and t = 6 and a = 13 after the loop finishes.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="pe2_10-1">
        <statement>

            <p> Given the following code segment, what is printed when it is executed?</p>
            <program language="java"><code>
String test = "123456";
for (int index = 0; index &lt; test.length() - 1; index = index + 1)
{
     System.out.print(test.substring(index,index+2));
}
</code></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>112233445566</p>
                </statement>
                <feedback>
                    <p>This would be true if the loop was printing each character twice and was incrementing the index by 1, but it prints two characters at a time and increments the index by 2.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>123456</p>
                </statement>
                <feedback>
                    <p>This would be true if the loop was incremented by 2 instead of 1.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>1223344556</p>
                </statement>
                <feedback>
                    <p>This code loops through the string printing 2 characters at a time.  The last time through the loop the index is test.length() - 2.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>123234345456</p>
                </statement>
                <feedback>
                    <p>This would be true if the loop was printing 3 characters at a time instead of 2.  Remember that the substring doesn't include the character at the specified last index.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Nothing will be printed due to an IndexOutOfBoundsException.</p>
                </statement>
                <feedback>
                    <p>This would be true if the loop stopped when index was less than the string length instead of one less than the string length.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="pe2_11-3">
        <statement>

            <p> Given the following code segment, what are the values of <c>var1</c> and <c>var2</c> after the while loop finishes?</p>
            <program language="java"><code>
int var1 = 0;
int var2 = 2;

while ((var2 != 0) &amp;&amp; ((var1 / var2) &gt;= 0))
{
   var1 = var1 + 1;
   var2 = var2 - 1;
}
</code></program>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>var1=2, var2=0</p>
                </statement>
                <feedback>
                    <p>The loop starts with var1=0 and var2=2. The while checks that var2 isn't 0 (2!=0) and that var1 / var2 is greater than or equal to zero (0/2=0) so this is equal to zero and the body of the while loop will execute. The variable var1 has 1 added to it for a new value of 1. The variable var2 has 1 subtracted from it for a value of 1. At this point var1=1 and var2=1. The while condition is checked again. Since var2 isn't 0 (1!=0) and var1/var2 (1/1=1) is &gt;= 0 so the body of the loop will execute again. The variable var1 has 1 added to it for a new value of 2. The variable var2 has 1 subtracted from it for a value of 0. At this point var1=2 and var2=0. The while condition is checked again. Since var2 is zero the while loop stops and the value of var1 is 2 and var2 is 0.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>var1=3, var2=-1</p>
                </statement>
                <feedback>
                    <p>This would be true if the body of the while loop executed 3 times, but it exectues twice.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>var1=0, var2=2</p>
                </statement>
                <feedback>
                    <p>This would be true if the body of the while loop never executed. This would have happened if the while check was if var1 != 0 instead of var2 != 0.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>var1=1, var2=1</p>
                </statement>
                <feedback>
                    <p>This would be true if the body of the while loop only executed one time, but it executes twice.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The loop won't finish executing because of a division by zero.</p>
                </statement>
                <feedback>
                    <p>The operation 0 / 2 won't cause a division by zero. The result is just zero.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="pe2_12-6">
        <statement>

            <p> Susan is 5 years older than Matt. Three years from now Susan’s age will be twice Matt’s age.  What should be in place of <c>condition</c> in the code segment below to solve this problem?</p>
            <program language="java"><code>
for (int s = 1; s &lt;= 100; s++) {
   for (int m = 1; m &lt;= 100; m++) {
      if (condition)
          System.out.println("Susan is " + s + " and Matt is " + m);
   }
}
</code></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>(s == m - 5) &amp;&amp; (s - 3 == 2 * (m - 3))</p>
                </statement>
                <feedback>
                    <p>This would be true if Susan was 5 years younger than Matt and three years ago she was twice his age. But, how could she be younger than him now and twice his age three years ago?</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>s == m + 5 &amp;&amp; s + 3 == 2 * m + 6</p>
                </statement>
                <feedback>
                    <p>Susan is 5 years older than Matt so s == m + 5 should be true and in 3 years she will be twice as old so s + 3 = 2 * (m + 3) = 2 * m + 6.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>s == (m - 5) &amp;&amp; (2 * s + 3) == (m + 3)</p>
                </statement>
                <feedback>
                    <p>This can't be right because Susan is 5 years older than Matt, so the first part is wrong. It has susan equal to Matt's age minus 5 which would have Matt older than Susan.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>None of the above is correct</p>
                </statement>
                <feedback>
                    <p>The answer is s == m + 5 &amp;&amp; s + 3 == 2 * m + 6.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>(s == (m + 5)) &amp;&amp; ((s + 3) == (2 * m + 3))</p>
                </statement>
                <feedback>
                    <p>This is almost right. It has Susan as 5 years older than Matt now. But the second part is wrong. Multiplication will be done before addition so (2 * m + 3) won't be correct for in 3 years Susan will be twice as old as Matt. It should be (2 * (m + 3)) or (2 * m + 6).</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="pe2_13-16">
        <statement>

            <p> Given the following code segment, What are the contents of <c>mat</c> after the code segment has been executed?</p>
            <program language="java"><code>
 int [][] mat = new int [3][4];
 for (int row = 0; row &lt; mat.length; row++)
 {
   for (int col = 0; col &lt; mat[0].length; col++)
   {
      if (row &lt; col)
        mat[row][col] = 1;
      else if (row == col)
        mat[row][col] = 2;
      else
        mat[row][col] = 3;
   }
}
</code></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>{ {2 3 3 3}, {1 2 3 3}, {1 1 2 3}}</p>
                </statement>
                <feedback>
                    <p>This would be true if you set the value to 3 when the column index was greater than the row and a 1 when the row index was greater than the column index.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>{ {2 3 3}, {1 2 3}, {1 1 2}, {1 1 1}}</p>
                </statement>
                <feedback>
                    <p>This would be true if the first value when you create a 2-d array was the number of columns and the second was the number of rows. Also you would need to set the value to 3 when the column index was greater than the row and a 1 when the row index was greater than the column index.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>{ {2 1 1}, {3 2 1}, {3 3 2}, {3 3 3}}</p>
                </statement>
                <feedback>
                    <p>This would be true if the first value when you create a 2-d array was the number of columns and the second was the number of rows.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>{ {2 1 1 1}, {3 2 1 1}, {3 3 2 1}}</p>
                </statement>
                <feedback>
                    <p>When you create a 2-d array the first value is the number of rows and the second is the number of columns. This code will put a 1 in the array when the row index is less than the column index and a 2 in the array when the row and column index are the same, and a 3 in the array when the row index is greater than the column index.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>{ {1 1 1 1}, {2 2 2 2}, {3 3 3 3}}</p>
                </statement>
                <feedback>
                    <p>This would be true if you set the value to the row index.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="pe2_14-12">
        <statement>

            <p> Given the following code segment, what will the value of <c>s1</c> be after this executes?</p>
            <program language="java"><code>
String s1 = "Hi There";
String s2 = s1;
String s3 = s2;
String s4 = s1;
s2 = s2.toLowerCase();
s3 = s3.toUpperCase();
s4 = null;
</code></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>hI tHERE</p>
                </statement>
                <feedback>
                    <p>Strings are immutable and so any changes to a string returns a new string.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>hi there</p>
                </statement>
                <feedback>
                    <p>This would only be correct if we had s1 = s2; after s2.toLowerCase(); was executed. Strings are immutable and so any change to a string returns a new string.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>HI THERE</p>
                </statement>
                <feedback>
                    <p>This would be correct if we had s1 = s3; after s3.toUpperCase(); was executed. Strings are immutable and so any change to a string returns a new string.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>null</p>
                </statement>
                <feedback>
                    <p>This would be true if we had s1 = s4; after s4 = null; was executed. Strings are immutable and so any changes to a string returns a new string.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Hi There</p>
                </statement>
                <feedback>
                    <p>Strings are immutable meaning that any changes to a string creates and returns a new string, so the string referred to by s1 does not change</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="pe2_15-7">
        <statement>

            <p> Given the following code segment, what is printed when it executes?</p>
            <program language="java"><code>
 public static void test()
 {
   int num = 0;
   while(num &lt;= 14)
   {
     if(num % 3 == 1)
     {
        System.out.print("1 ");
     }
     else if (num % 3 == 2)
     {
        System.out.print("2 ");
     }
     else
     {
        System.out.print("0 ");
     }

     num += 2;
   }
}
</code></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>0 1 2 0 1 2 0 1</p>
                </statement>
                <feedback>
                    <p>The second time through the loop the value of num is 2 and 2 % 3 is 2 not 1.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>0 2 1 0 2 1 0 2</p>
                </statement>
                <feedback>
                    <p>The while loop will iterate 8 times. The value of num each time through the loop is: 0, 2, 4, 6, 8, 10, 12, and 14. The corresponding remainder operator of 3 is: 0, 2, 1, 0, 2, 1, 0, 2, which is print to the console.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>0 2 1 0 2 1 0 2 1</p>
                </statement>
                <feedback>
                    <p>The loop will iterate 8 times not 9. When the value of num exceeds 14, num will no longer be evaluated against the conditional statements. The remainder operator of 3 will be evaluated on the num values of 0, 2, 4, 6, 8, 10, 12 and 14.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>2 1 0 2 1 0 2 1</p>
                </statement>
                <feedback>
                    <p>The value of num the first time through the loop is 0 so the first remainder is 0 not 2. This would be true if the value of num was 2 to start.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>0 2 1 0 2 1 0</p>
                </statement>
                <feedback>
                    <p>This would be true if the loop stopped when the value of num was less than 14 but it is less than or equal to 14.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="pe2_16-2">
        <statement>

            <p> Consider the following data field and method <c>findLongest</c>. Method <c>findLongest</c> is intended to find the longest consecutive block of the value target occurring in the array nums; however, <c>findLongest</c> does not work as intended. For example, if the array nums contains the values [7, 10, 10, 15, 15, 15, 15, 10, 10, 10, 15, 10, 10], the call <c>findLongest(10)</c> should return 3, the length of the longest consecutive block of 10s.  Which of the following best describes the value returned by a call to <c>findLongest</c>?</p>
            <program language="java"><code>
private int[] nums;
public int findLongest(int target)
{
   int lenCount = 0;
   int maxLen = 0;

   for (int k = 0; k &lt; nums.length; k++)
   {
     if (nums[k] == target)
     {
       lenCount++;
     }
     else
     {
        if (lenCount &gt; maxLen)
        {
           maxLen = lenCount;
        }
     }
  }
  if (lenCount &gt; maxLen)
  {
     maxLen = lenCount;
  }
  return maxLen;
}
</code></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>It is the length of the array nums.</p>
                </statement>
                <feedback>
                    <p>This can't be true. There is no nums.length in the code and the only count happens lenCount is incremented when nums[k] == target.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>It is the length of the first consecutive block of the value target in nums.</p>
                </statement>
                <feedback>
                    <p>It doesn't reset the count ever so it just counts all the times the target value appears in the array.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>It is the length of the shortest consecutive block of the value target in nums.</p>
                </statement>
                <feedback>
                    <p>It doesn't reset the count ever so it just counts all the times the target value appears in the array.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>It is the number of occurrences of the value target in nums.</p>
                </statement>
                <feedback>
                    <p>The variable lenCount is incremented each time the current array element is the same value as the target. It is never reset so it counts the number of occurrences of the value target in nums. The method returns maxLen which is set to lenCount after the loop finishes if lenCount is greater than maxLen.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>It is the length of the last consecutive block of the value target in nums.</p>
                </statement>
                <feedback>
                    <p>It doesn't reset the count ever so it just counts all the times the target value appears in the array.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="pe2_17-11">
        <statement>

            <p> Given the following method declaration, and <c>int[] a = {8, 3, 1}</c>, what is the value in <c>a[1]</c> after <c>m1(a);</c> is run?</p>
            <program language="java"><code>
public static int m1(int[] a)
{
   a[1]--;
   return (a[1] * 2);
}
</code></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>4</p>
                </statement>
                <feedback>
                    <p>This would be true if it was return (a[1] *= 2);</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>3</p>
                </statement>
                <feedback>
                    <p>This can't be true because a[1]--; means the same as a[1] = a[1] - 1; so the 3 changes to 2.  Parameters are all pass by value in Java which means that a copy of the value is passed to a method. But, since an array is an object a copy of the value is a copy of the reference to the object. So changes to objects in methods are permanent.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>16</p>
                </statement>
                <feedback>
                    <p>This would be true if it was return (a[0] *= 2);</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>7</p>
                </statement>
                <feedback>
                    <p>This would be true if it was a[0]--;</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>2</p>
                </statement>
                <feedback>
                    <p>The statement a[1]--; is the same as a[1] = a[1] - 1; so this will change to 3 to 2.  The return (a[1] * 2) does not change the value at a[1].</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="pe2_18-4">
        <statement>

            <p> At a certain high school students receive letter grades based on the following scale: 93 or above is an A, 84 to 92 inclusive is a B, 75 to 83 inclusive is a C, and below 75 is an F.  Which of the following code segments will assign the correct string to <c>grade</c> for a given integer score?</p>
            <program language="java"><code>
I.   if (score &gt;= 93)
        grade = "A";
     if (score &gt;= 84 &amp;&amp; score &lt;= 92)
        grade = "B";
     if (score &gt;= 75 &amp;&amp; score &lt;= 83)
        grade = "C";
     if (score &lt; 75)
        grade = "F";

II.  if (score &gt;= 93)
        grade = "A";
     if (score &gt;= 84)
        grade = "B";
     if (score &gt;= 75)
        grade = "C";
     if (score &lt; 75)
        grade = "F";

III. if (score &gt;= 93)
        grade = "A";
     else if (score &gt;= 84)
        grade = "B";
     else if (score &gt;= 75)
        grade = "C";
     else
        grade = "F";
</code></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>I and II only</p>
                </statement>
                <feedback>
                    <p>Choice II won't work since if you had a score of 94 it would first assign the grade to an "A" but then it would execute the next if and change the grade to a "B" and so on until the grade was set to a "C". This could have been fixed by using else if instead of just if.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>II only</p>
                </statement>
                <feedback>
                    <p>Choice II won't work since if you had a score of 94 it would first assign the grade to an "A" but then it would execute the next if and change the grade to a "B" and so on until the grade was set to a "C". This could have been fixed by using else if instead of just if.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>III only</p>
                </statement>
                <feedback>
                    <p>Choice III is one of the correct answers. However, choice I is also correct. Choice I uses multiple if's with logical ands in the conditions to check that the numbers are in range. Choice III uses ifs with else if to make sure that only one conditional is executed.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>I and III only</p>
                </statement>
                <feedback>
                    <p>Choice I uses multiple if's with logical ands in the conditions to check that the numbers are in range. Choice Choice II won't work since if you had a score of 94 it would first assign the grade to an "A" but then it would execute the next if and change the grade to a "B" and so on until the grade was set to a "C". Choice III uses ifs with else if to make sure that only one conditional is executed.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>I, II, and III</p>
                </statement>
                <feedback>
                    <p>Choice II won't work since if you had a score of 94 it would first assign the grade to an "A" but then it would execute the next if and change the grade to a "B" and so on until the grade was set to a "C". This could have been fixed by using else if instead of just if.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="pe2_19-8">
        <statement>

            <p> Given the following incomplete class declaration, which of the following can be used to replace the missing code in the <c>advance</c> method so that it will correctly update the time?</p>
            <program language="java"><code>
public class TimeRecord
{
    private int hours;
    private int minutes; // 0&lt;=minutes&lt;60

    public TimeRecord(int h, int m)
    {
        hours = h;
        minutes = m;
    }

    // postcondition: returns the
    // number of hours
    public int getHours()
    {
        /* implementation not shown */
    }

    // postcondition: returns the number
    // of minutes; 0 &lt;= minutes &lt; 60
    public int getMinutes()
    {
        /* implementation not shown */
    }

    // precondition: h &gt;= 0; m &gt;= 0
    // postcondition: adds h hours and
    // m minutes to this TimeRecord
    public void advance(int h, int m)
    {
        hours = hours + h;
        minutes = minutes + m;
        /* missing code */
    }

    // ... other methods not shown
}
</code></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>hours = hours + minutes % 60; minutes = minutes / 60;</p>
                </statement>
                <feedback>
                    <p>This will set hours to hours plus the remainder of dividing minutes by 60 and then set minutes to the number of hours (int division of minutes by 60).</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>minutes = minutes % 60;</p>
                </statement>
                <feedback>
                    <p>This won't add to hour so it can't be correct. It will set minutes to the remainder of dividing minutes by 60 so minutes will be set correctly.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>minutes = minutes + hours % 60;</p>
                </statement>
                <feedback>
                    <p>This will set the minutes to the minutes plus the remainder of dividing the hours by 60.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>hours = hours + minutes / 60; minutes = minutes % 60;</p>
                </statement>
                <feedback>
                    <p>This will update the hours and minutes correctly. It will add the floor of the division of minutes by 60 to hours and then set minutes to the remainder of the division of minutes by 60.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>hours = hours + minutes / 60;</p>
                </statement>
                <feedback>
                    <p>This will correctly update the hours, but not update the minutes.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

        </exercises>
    </section>

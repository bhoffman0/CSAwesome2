<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="ooSummary">
  <title>Inheritance Summary</title><introduction>
    
    <p>In this chapter you learned about <term>inheritance</term>.  In an object-oriented program you write classes that define what objects of each class know (instance variables) and can do (methods).  One class can inherit object instance variables and methods from another, which makes the amount of code that you have to write smaller and makes the classes easier to test and extend.</p>
  </introduction>
  <subsection>
            <title>Concept Summary</title>
            <p><ul>
                <li>
                    <p><term>object</term> - Objects do the action in an object-oriented program. An object can have things it knows (attributes) and things it can do (methods).  An object is created by a class and keeps a reference to the class that created it.</p>
                </li>
                <li>
                    <p><term>class</term> - A class defines what all objects of that class know (attributes) and can do (methods).  You can also have data and behavior in the object that represents the class (class instance variables and methods).  All objects of a class have access to class instance variables and class methods, but these can also be accessed using <c>className.variable</c> or <c>className.method()</c>.</p>
                </li>
                <li>
                    <p><term>inheritance</term> - One class can inherit object instance variables and methods from another.  This makes it easy to reuse another class by extending it (inheriting from it).  This is called specialization.  You can also pull out common instance variables and/or methods from several related classes and put those in a common parent class.  This is called generalization.</p>
                </li>
                <li>
                    <p><term>polymorphism</term> - The runtime type of an object can be that type or any subclass of the declared type. All method calls are resolved starting with the class that created the object.  If the method isnâ€™t found in the class that created the object, then it will look in the parent class and keep looking up the inheritance tree until it finds the method.  The method must exist, or the code would not have complied.</p>
                </li>
                <li>
                    <p><term>parent class</term> - One class can inherit from another and the class that it is inheriting from is called the parent class.  The parent class is specified in the class declaration using the <c>extends</c> keyword followed by the parent class name.</p>
                </li>
                <li>
                    <p><term>child class</term> - The class that is doing the inheriting is called the child class.  It inherits access to the object instance variables and methods in the parent class.</p>
                </li>
                <li>
                    <p><term>subclass</term> - A child class is also called a subclass.</p>
                </li>
                <li>
                    <p><term>superclass</term> - A parent class is also called a superclass.</p>
                </li>
                <li>
                    <p><term>declared type</term> - The type that was used in the declaration.  <c>List aList = new ArrayList()</c> has a declared type of <c>List</c>.  This is used at compile time to check that the object has the methods that are being used in the code.</p>
                </li>
                <li>
                    <p><term>run-time type</term> - The type of the class that created the object. <c>List aList = new ArrayList()</c> has a run-time type of <c>ArrayList</c>.  This is used at run-time to find the method to execute.</p>
                </li>
                <li>
                    <p><term>overrides</term> - A method in a child class can have the same method signature (method name and parameter list) as a method in the parent class. Since methods are resolved starting with the class that created the object, that method will be called instead of the inherited parent method, so the child method overrides the parent method.</p>
                </li>
                <li>
                    <p><term>overload</term> - Two or more methods with the same name but different parameter lists are said to be overloaded. The parameter lists can differ by the number or types of parameters.</p>
                </li>
                <li>
                    <p><term>getter</term> - A method that returns the value of an instance variable in an object.</p>
                </li>
                <li>
                    <p><term>setter</term> - A method that sets the value of am instance variable in an object.</p>
                </li>
                <li>
                    <p><term>accessor</term> - Another name for a getter method - one that returns the value of a instance variable.</p>
                </li>
                <li>
                    <p><term>mutator</term> - Another name for a setter method - one that changes the value of a instance variable.</p>
                </li>
            </ul></p>
        </subsection>
  <subsection>
            <title>Java Keyword Summary</title>
            <p><ul>
                <li>
                    <p><term>extends</term> - Used to specify the parent class to inherit from. It is followed
                        by the name of the parent class, like this: <c>public class ChildName extends
ParentName</c>. If no <c>extends</c> keyword is used in the class declaration, then
                        the class will automatically inherit from the <c>Object</c> class.</p>
                </li>
                <li>
                    <p><term>static</term> - Keyword used to indicate that a instance variable or method is
                        part of the class and not part of each object created by the class.</p>
                </li>
                <li>
                    <p><term>super</term> - Keyword used two ways. First, within a constructor, to invoke the
                        code from a parent class constructor other than the no-args constructor.
                        Second, within an instance method, as a variable to refer to the same object
                        as <c>this</c> in order to call a method from a parent class. This is useful if a
                        child class overrides an inherited method, but still wants to call the
                        inherited method.</p>
                </li>
            </ul></p>
        </subsection>
  <subsection>
            <title>Vocabulary Practice</title>

<exercise label="ch10oo_match_1">
    <statement><p>Drag the item from the left and drop it on its corresponding answer on the right.  Click the "Check Me" button to see if you are correct.</p></statement>
    <feedback><p>Review the summaries above.</p></feedback>
<matches><match order="1"><premise>A class that extends another class</premise><response>child class</response></match><match order="2"><premise>A class that is being extended</premise><response>parent class</response></match><match order="3"><premise>Using the run-time type of an object to determine which method to call</premise><response>polymorphism</response></match><match order="4"><premise>Providing a method in a child class with the same declaration as a parent method</premise><response>override</response></match></matches></exercise>
<exercise label="ch10oo_match_2">
    <statement><p>Drag the description from the left and drop it on the correct code on the right.  Click the "Check Me" button to see if you are correct.</p></statement>
    <feedback><p>Review the summaries above.</p></feedback>
<matches><match order="1"><premise>What does the actual work in an object-oriented program</premise><response>object</response></match><match order="2"><premise>Defines what all objects of the class know and can do</premise><response>class</response></match><match order="3"><premise>Returns the value of an instance variable</premise><response>getter</response></match><match order="4"><premise>Sets the value of an instance variable</premise><response>setter</response></match></matches></exercise>
<exercise label="ch10oo_match_3">
    <statement><p>Drag the description from the left and drop it on the correct code on the right.  Click the "Check Me" button to see if you are correct.</p></statement>
    <feedback><p>Review the summaries above.</p></feedback>
<matches><match order="1"><premise>A class that inherits from the specified class</premise><response>subclass</response></match><match order="2"><premise>Two methods with the same method name in a class, but with different parameters</premise><response>overload</response></match><match order="3"><premise>The type the object was declared as</premise><response>declared type</response></match><match order="4"><premise>The class that created the object</premise><response>actual type</response></match></matches></exercise>            <p>For more practice, see this <url href="https://quizlet.com/434083291/cs-awesome-unit-9-vocabulary-flash-cards/" visual="https://quizlet.com/434083291/cs-awesome-unit-9-vocabulary-flash-cards/">Quizlet</url>.</p>
        </subsection>
  <subsection>
            <title>Common Mistakes</title>
            <p><ul>
                <li>
                    <p>Using inheritance (is-a) when you should use association (has-a). A school has
                        classes; it is not a type of class. A high school is a kind of school.</p>
                </li>
                <li>
                    <p>Using an instance variable for a type of class instead of subclasses. If you
                        ever find yourself creating conditionals based on the type of object use
                        subclasses instead.</p>
                </li>
                <li>
                    <p>Creating a subclass just because you want to share methods defined in another
                        class. If you find yourself copying instance variables or methods from one
                        class to another that may be a sign that the classes are relatedâ€”if thereâ€™s an
                        is-a relationship between the two classes than you may want to use inheritance
                        and that will allow you to use methods defined in the parent class on
                        instances of the child class. But donâ€™t create an inheritance relationship
                        just to share code.</p>
                </li>
            </ul></p>
        </subsection>
</section>

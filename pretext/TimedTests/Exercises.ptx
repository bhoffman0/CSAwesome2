<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="practice-exam-x">
        <title>Practice Exam X</title>
        
        <p>The following  questions are similar to what you might see on the AP Exam.  Please answer each to the best of your ability.</p>
        <p>Click the <image source="TimedTests/Figures/start.png" width="50%" alt="start"/> button when you are ready to begin the exam, but only then as you can only take the exam once.  Click on the <image source="TimedTests/Figures/next.png" width="50%" alt="next"/> button to go to the next question.  Click on the <image source="TimedTests/Figures/prev.png" width="50%" alt="previous"/> button to go to the previous question.  Use the number buttons to jump to a particular question.  Click the <image source="TimedTests/Figures/pause.png" width="50%" alt="pause"/> button to pause the exam (you will not be able to see the questions when the exam is paused).  Click on the <image source="TimedTests/Figures/finishExam.png" width="50%" alt="finish exam"/> button after you have answered all the questions.  The number correct, number wrong, and number skipped will be displayed.</p>
        <exercises line="46" runestone_options="{'timelimit': 40, 'subchapter': 'Exercises', 'chapter': 'TimedTests', 'basecourse': 'csawesome2beta', 'optional': '', 'optclass': '', 'divid': 'practiceExamX', 'qnumber': '', 'question_label': '13.4.1'}" source="/mnt/c/users/hoffmanb/Documents/Github/csawesome2/_fixed_sources/TimedTests/Exercises.rst">

    <exercise label="mt1_3">
        <statement>

            <p>13-4-1: Consider the following declaration for a class that will be used to represent points in time.  Which of these options correctly implement ‘’addMinutes()’’?</p>
            <program language="java"><input>
 public class Timer
 {
    private int hours; // number of hours
    private int minutes; // 0 &lt;= minutes &lt; 60

    void addHours(int addition)
    {
       hours = hours + addition;
    }

    void addMinutes(int additionMinutes)
    {
       // implementation not shown
    }

    // ... other methods not shown

 }

Proposed Implementations:

I.   public void addMinutes(int additionMinutes)
     {
        minutes = minutes + additionMinutes;
     }

II.  public void addMinutes(int additionMinutes)
     {
        minutes += additionMinutes;
        if (minutes &gt;= 60)
        {
           hours += (minutes / 60);
           minutes = (minutes % 60);
        }
     }

III. public void addMinutes(int additionMinutes)
     {
        minutes += additionMinutes;
        while(minutes &gt;= 60)
        {
           hours++;
           minutes -= 60;
        }
     }

IV.  public void addMinutes(int additionMinutes)
     {
        if (additionMinutes + minutes &gt;= 60)
        {
           minutes = additionMinutes + minutes - 60;
           hours += 1;
        }
     }
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>I only</p>
                </statement>
                <feedback>
                    <p>This implementation of ''addMinutes'' does not account for values of additionMinutes that push the minute count above 60.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>II only</p>
                </statement>
                <feedback>
                    <p>Implementation II works, but implementation III also works.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>IV only</p>
                </statement>
                <feedback>
                    <p>Implementation IV does not work for situations where additionMinutes + minutes does not go above 60.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>II and III</p>
                </statement>
                <feedback>
                    <p>Correct!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>I, II, and III</p>
                </statement>
                <feedback>
                    <p>Implementations II and III are correct, but implementation I is not. Implementation I does not account for values of additionMinutes that push the minute count above 60.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="mt1_4">
        <statement>

            <p>13-4-2: Which is NOT a correct way to declare an array of integers?</p>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>int[] nums = [5];</p>
                </statement>
                <feedback>
                    <p>The left side is okay, but the right side is wrong.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>int[] nums;</p>
                </statement>
                <feedback>
                    <p>This correctly declares an array of integers.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>int[] nums = { 2, 4, 6, 8, 10 };</p>
                </statement>
                <feedback>
                    <p>This correctly declares and initializes an array of five integers.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>int[] nums = new int[5];</p>
                </statement>
                <feedback>
                    <p>This declares nums to be an array of integers and creates the array.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="mt1_7">
        <statement>

            <p>13-4-3: What are the contents of nums after the following code is executed?</p>
            <program language="java"><input>
int [] nums = { 1, 2, 3, 4, 5 };
int temp = nums[2];
nums[2] = nums[4];
nums[4] = temp;
</input></program>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>{ 1, 2, 5, 4, 3 }</p>
                </statement>
                <feedback>
                    <p>Correct!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>{ 1, 2, 5, 4, 5 }</p>
                </statement>
                <feedback>
                    <p>Incorrect. Remember that arrays are indexed from 0.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>{ 5, 4, 1, 2, 3 }</p>
                </statement>
                <feedback>
                    <p>Incorrect, temp is used to hold the value from index 2 and that value is put in index 4.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>{ 1, 2, 4, 4, 3 }</p>
                </statement>
                <feedback>
                    <p>Nums at index 2 is set to the value of nums at index 4, not just the value 4.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>{ 1, 4, 3, 2, 5 }</p>
                </statement>
                <feedback>
                    <p>Incorrect. Remember that arrays are indexed from 0.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="mt1_8">
        <statement>

            <p>13-4-4: Which option will evaluate to true, if and only if both a and b are false?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>!(a &amp;&amp; b)</p>
                </statement>
                <feedback>
                    <p>This would be true if a OR b are false using De Morgan's laws: !(a &amp;&amp; b) = !a || !b.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>!a &amp;&amp; b</p>
                </statement>
                <feedback>
                    <p>If b was false, this option would be false.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>!a &amp;&amp; !b</p>
                </statement>
                <feedback>
                    <p>Correct!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>a &amp;&amp; b</p>
                </statement>
                <feedback>
                    <p>This will only be true only when both a and b are true.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>a || !b</p>
                </statement>
                <feedback>
                    <p>This will only be true if a is true, or b is false.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="mt1_10">
        <statement>

            <p>13-4-5: What does the method <c>mystery</c> do?</p>
            <program language="java"><input>
public void mystery(String tester)
{
  for (int i = tester.length() - 1; i &gt;= 0; i--)
  {
      System.out.print(tester.charAt(i));
  }
  System.out.println("");
}
</input></program>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>Prints the string in reverse order</p>
                </statement>
                <feedback>
                    <p>This method prints the reversed string.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Deletes the second half of the string</p>
                </statement>
                <feedback>
                    <p>Incorrect, this method prints the string reversed.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Prints string normally</p>
                </statement>
                <feedback>
                    <p>Incorrect, this method prints the string reversed.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Compile-time error occurs</p>
                </statement>
                <feedback>
                    <p>Incorrect, this method prints the string reversed.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Prints alternating characters from beginning and end of the string.</p>
                </statement>
                <feedback>
                    <p>Incorrect, this method prints the string reversed.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="mt1_11">
        <statement>

            <p>13-4-6: After the following code is executed, what does the variable mystery hold?</p>
            <program language="java"><input>
public class mysterious
{
    public static void main(String[] args)
    {
        String mystery;
        String starter = "Hello World!";
        for (int i = 0; i &lt; starter.length(); i++)
        {
            if (i % 2 == 0)
            {
                mystery += starter.charAt(i);
            }
        }
    }
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>"Hello World!"</p>
                </statement>
                <feedback>
                    <p>The variable holds all characters that were stored at even indices for the original phrase.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>"Hello "</p>
                </statement>
                <feedback>
                    <p>The variable holds all characters that were stored at even indices for the original phrase.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>"He"</p>
                </statement>
                <feedback>
                    <p>The variable holds all characters that were stored at even indices for the original phrase.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>"HloWrd"</p>
                </statement>
                <feedback>
                    <p>Correct! The variable holds all characters that were stored at even indices for the original phrase.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>"el ol!"</p>
                </statement>
                <feedback>
                    <p>The variable holds all characters that were stored at even indices for the original phrase.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="mt1_12">
        <statement>

            <p>13-4-7: Which will cause the longest execution of a sequential search looking for a value in an array of 10 integers?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>The value is the first one in the array</p>
                </statement>
                <feedback>
                    <p>This would be true for the shortest execution.  This would only take one execution of the loop.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The value is in the middle of the array</p>
                </statement>
                <feedback>
                    <p>This would take 5 executions of the loop.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The value is at position 3 in the array</p>
                </statement>
                <feedback>
                    <p>This would take 3 executions of the loop.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>The value isn't in the array</p>
                </statement>
                <feedback>
                    <p>A sequential search loops through the elements of an array starting with the first and ending with the last and returns from the loop as soon as it finds the passed value.  It has to check every value in the array when the value it is looking for is not in the array.  This would take 10 executions of the loop.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The value is at position 6 in the array</p>
                </statement>
                <feedback>
                    <p>This would take 6 executions of the loop.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="mt1_13">
        <statement>

            <p>13-4-8: Which of the following reasons for using an inheritance hierarchy are valid?</p>
            <program language="java"><input>
I.   Methods from a superclass can be used in a subclass without rewriting or copying code.
II.  An object from a subclass can be passed as an argument to a method that takes an object of the superclass
III. Objects from subclasses can be stored in the same array
IV.  All of the above
V.   None of the above
</input></program>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>IV</p>
                </statement>
                <feedback>
                    <p>All of these are valid reasons to use an inheritance hierarchy.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>V</p>
                </statement>
                <feedback>
                    <p>In fact, all of the reasons listed are valid. Subclasses can reuse methods written for superclasses without code replication, subclasses can be stored in the same array, and passed as arguments to methods meant for the superclass.   All of which make writing code more streamlined.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>I and II</p>
                </statement>
                <feedback>
                    <p>III is also valid. In some cases you might want to store subclasses together in a single array, and inheritance allows for this.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>I and III</p>
                </statement>
                <feedback>
                    <p>II is also valid. In some cases a single method is applicable for a number of subclasses, and inheritance allows you to pass objects of the subclasses to the same method instead of writing individual methods for each subclass.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>I only</p>
                </statement>
                <feedback>
                    <p>II and III are also valid, in some cases a single method is applicable for a number of subclasses, and inheritance allows you to pass all the subclasses to the same method instead of writing individual methods for each subclass and you might want to store subclasses together in a single array, and inheritance allows for this.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="mt1_14">
        <statement>

            <p>13-4-9: Consider the following method and if <c>int[] a = {8, 3, 1}</c>, what is the value in <c>a[1]</c> after <c>m1(a);</c> is run?</p>
            <program language="java"><input>
public int m1(int[] a)
{
   a[1]--;
   return (a[1] * 2);
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>4</p>
                </statement>
                <feedback>
                    <p>This would be true if it was return(a[1]*= 2);.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>16</p>
                </statement>
                <feedback>
                    <p>This would be true if the return statement was return (a[0]*=2);.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>7</p>
                </statement>
                <feedback>
                    <p>This would be true if it was a[0]--;  Or it would be true if array indices started at 1, but they start with 0.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>2</p>
                </statement>
                <feedback>
                    <p>The statement a[1]--; is the same as a[1] = a[1] - 1; so this will change the 3 to a 2.  The return (a[1] * 2) does not change the value at a[1].</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>3</p>
                </statement>
                <feedback>
                    <p>This can't be true because a[1]--; means the same as a[1] = a[1] - 1;  So the 3 will become a 2.  Parameters are all pass by value in Java which means that a copy of the value is passed to a method.  But, since an array is an object a copy of the value is a copy of the reference to the object.  So changes to objects in methods are permanent.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="mt1_15">
        <statement>

            <p>13-4-10: What are the values of <c>a</c> and <c>b</c> after the <c>for</c> loop finishes?</p>
            <program language="java"><input>
int a = 10, b = 3, t;
for (int i = 1; i &lt;= 6; i++)
{
   t = a;
   a = i + b;
   b = t - i;
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>a = 6 and b = 7</p>
                </statement>
                <feedback>
                    <p>This would be true if the loop stopped when i was equal to 6.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>a = 6 and b = 13</p>
                </statement>
                <feedback>
                    <p>Actually i = 6 and t = 6 and a = 13 after the loop finishes.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>a = 13 and b = 0</p>
                </statement>
                <feedback>
                    <p><line>The variable i loops from 1 to 6 </line><line>i = 1, t = 10, a = 4, b = 9</line><line>i = 2, t = 4, a  = 11, b =2</line><line>i = 3, t = 11, a = 5, b = 8</line><line>i = 4, t = 5, a = 12, b = 1</line><line>i = 5, t = 12, a = 6, b = 7</line><line>i = 6, t = 6, a = 13, b = 0</line></p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>a = 6 and b = 0</p>
                </statement>
                <feedback>
                    <p>Actually i = 6 and t = 6 and b = 0 after the loop finishes.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>a = 0 and b = 13</p>
                </statement>
                <feedback>
                    <p>No a = 13 and b = 0 after the loop finishes.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="mt1_16">
        <statement>

            <p>13-4-11: Consider the following code.  What string is referenced by <c>s1</c> after the code executes?</p>
            <program language="java"><input>
String s1 = "Hi There";
String s2 = s1;
String s3 = s2;
String s4 = s1;
s2 = s2.toLowerCase();
s3 = s3.toUpperCase();
s4 = null;
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>hi there</p>
                </statement>
                <feedback>
                    <p>This would only be correct if we had s1 = s2; after s2.toLowerCase(); was executed.  Strings are immutable and so any change to a string returns a new string.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>HI THERE</p>
                </statement>
                <feedback>
                    <p>This would be correct if we had s1 = s3; after s3.toUpperCase(); was executed.  Strings are immutable and so any change to a string returns a new string.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Hi There</p>
                </statement>
                <feedback>
                    <p>Strings are immutable meaning that any changes to a string creates and returns a new string, so the string referred to by s1 does not change</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>null</p>
                </statement>
                <feedback>
                    <p>This would be true if we had s1 = s4; after s4 = null; was executed.  Strings are immutable and so any changes to a string returns a new string.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>hI tHERE</p>
                </statement>
                <feedback>
                    <p>Strings are immutable and so any changes to a string returns a new string.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="mt1_17">
        <statement>

            <p>13-4-12: Consider the following code segment.  What value is in sum after this code executes?</p>
            <program language="java"><input>
int[][] matrix = { {1,1,2,2},{1,2,2,4},{1,2,3,4},{1,4,1,2}};

int sum = 0;
int col = matrix[0].length - 2;
for (int row = 0; row &lt; 4; row++)
{
   sum = sum + matrix[row][col];
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>4</p>
                </statement>
                <feedback>
                    <p>This would be correct if the variable col was 0 because then it would add 1 + 1 + 1 + 1 which is 4.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>8</p>
                </statement>
                <feedback>
                    <p>The variable col is 2, so it adds 2 + 2 + 3 + 1 which is 8.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>9</p>
                </statement>
                <feedback>
                    <p>This would be correct if the variable col was 1 because then it would add 1 + 2 + 2 + 4 which is 9.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>12</p>
                </statement>
                <feedback>
                    <p>This would be correct if the variable col was 3 becuase then it would add 2 + 4 + 4 + 2 which is 12.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>10</p>
                </statement>
                <feedback>
                    <p>This would be true if we were adding the values in the 3rd row (row = 2) instead of the 3rd column.  This would be 1 + 2 + 3 + 4 which is 10.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="mt1_18">
        <statement>

            <p>13-4-13: Consider the following code segment, what are the contents of mat after the code segment has executed?</p>
            <program language="java"><input>
int [][] mat = new int [3][4];
for (int row = 0; row &lt; mat.length; row++)
{
   for (int col = 0; col &lt; mat[0].length; col++)
   {
      if (row &lt; col)
         mat[row][col] = 3;
      else if (row == col)
         mat[row][col] = 2;
      else
         mat[row][col] = 1;
   }
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>{ { 2, 1, 1, 1 }, { 2, 2, 1, 1 }, { 2, 2, 2, 1 } }</p>
                </statement>
                <feedback>
                    <p>This would be true if it was filling mat with 1 if the row index is less than the column index, but it fills with a 3 in this case.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>{ { 2, 3, 3, 3 }, { 1, 2, 3, 3 }, { 1, 1, 2, 3 } }</p>
                </statement>
                <feedback>
                    <p>This will fill mat with 3 if the row index is less than the column index, 2 if the row index is equal to the column index, and a 1 if the row index is greater than the column index.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>{ { 2, 1, 1 }, { 2, 2, 1 }, { 2, 2, 2 }, { 2, 2, 2 } }</p>
                </statement>
                <feedback>
                    <p>This would be true if it was int [][] mat = new int [4][3] and it filled the mat with 1 if the row index is less than the column index.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>{ { 2, 3, 3 }, { 1, 2, 3 }, { 1, 1, 2 }, { 1, 1, 1 } }</p>
                </statement>
                <feedback>
                    <p>This would be true if it was int [][] mat = new int [4][3]. Remember that the first number is the number of rows.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>{ { 1, 3, 3, 3 }, { 2, 1, 3, 3 }, { 2, 2, 1, 3 } }</p>
                </statement>
                <feedback>
                    <p>This would be true if it filled the mat with 1 if the row and column indices are equal and 2 if the row index is greater than the column index.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="mt1_19">
        <statement>

            <p>13-4-14: Assume that <c>temp</c> is an <c>int</c> variable initialized to be greater than zero and that <c>a</c> is an array of type <c>int</c>.  Also, consider the following code segment.  Which of the following will cause an infinite loop?</p>
            <program language="java"><input>
for ( int k = 0; k &lt; a.length; k++ )
{
   while ( a[k] &lt; temp )
   {
      a[k] *= 2;
   }
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>The values don't matter, this will always cause an infinite loop.</p>
                </statement>
                <feedback>
                    <p>An infinite loop will not always occur in this program segment.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Whenever a has a value larger than temp.</p>
                </statement>
                <feedback>
                    <p>Values larger then temp will not cause an infinite loop.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>When all values in a are larger than temp.</p>
                </statement>
                <feedback>
                    <p>Values larger then temp will not cause an infinite loop.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Whenever a includes a value equal to temp.</p>
                </statement>
                <feedback>
                    <p>Values equal to temp will not cause an infinite loop.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Whenever a includes a value that is less than or equal to zero.</p>
                </statement>
                <feedback>
                    <p>When a contains a value that is less than or equal to zero, then multiplying that value by 2 will never make the result larger than the temp value (which was set to some value &gt; 0), so an infinite loop will occur.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="mt1_20">
        <statement>

            <p>13-4-15: Consider the following method.  What is the output from <c>conditionTest(3,-2);</c>?</p>
            <program language="java"><input>
 public static void conditionTest(int num1, int num2)
 {
    if ((num1 &gt; 0) &amp;&amp; (num2 &gt; 0))
    {
       if (num1 &gt; num2)
          System.out.println("A");
       else
          System.out.println("B");
    }
    else if ((num2 &lt; 0) || (num1 &lt; 0))
    {
        System.out.println("C");
    }
    else if (num2 &lt; 0)
    {
       System.out.println("D");
    }
    else
    {
       System.out.println("E");
    }
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>A</p>
                </statement>
                <feedback>
                    <p>This would be true if num1 and num2 were both greater than 0 and num1 was greater than num2.  However, num2 is less than 0.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>B</p>
                </statement>
                <feedback>
                    <p>This would be true if num1 and num2 were both greater than 0 and num1 was less than or equal to num2.  However, num2 is less than 0.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>C</p>
                </statement>
                <feedback>
                    <p>The first test is false since num2 is less than 0 and for a complex conditional joined with And (&amp;&amp;) to be true both expressions must be true.  Next, else if ((num2&lt;0) || (num1&lt;0)) is executed and this will be true since num2 is less than 0 and for a complex conditional joined with Or (||) only one of the expressions must be true for it to execute.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>D</p>
                </statement>
                <feedback>
                    <p>This will not happen since if num2 is less than 0 the previous conditional would be true ((num2&lt;0) || (num1&lt;0))).</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>E</p>
                </statement>
                <feedback>
                    <p>This will not happen since if num2 is less than 0 the previous conditional would be true ((num2&lt;0) || (num1&lt;0))).</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        </exercises>
        
        
        
    </section>

<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="StringCoderA">
  <title>StringCoder - Part A</title><introduction>
    
    <idx>StringPart</idx>
 <idx>free\ response</idx>

    <p>The following is a free response question from 2008.  It was question 2 on the exam.  You can see all the free response questions from past exams at <url href="https://apstudents.collegeboard.org/courses/ap-computer-science-a/free-response-questions-by-year" visual="https://apstudents.collegeboard.org/courses/ap-computer-science-a/free-response-questions-by-year">https://apstudents.collegeboard.org/courses/ap-computer-science-a/free-response-questions-by-year</url>.</p>
    <p><term>Question 2.</term> Consider a method of encoding and decoding words that is based on a <em>master string</em>. This master string
            will contain all the letters of the alphabet, some possibly more than once. An example of a master string is
            <c>"sixtyzipperswerequicklypickedfromthewovenjutebag"</c>. This string and its indexes are
            shown below.</p>
    <figure align="center">
      <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">An example string with indices</caption>
      <image source="FreeResponse/Figures/StringCoderEx.png" width="50%"/>
    </figure>
    <p>An encoded string is defined by a list of string parts. A string part is defined by its starting index in the
            master string and its length. For example, the string <c>"overeager"</c> is encoded as the list of string parts
            [ (37, 3), (14, 2), (46, 2), (9, 2) ] denoting the substrings <c>"ove"</c>, <c>"re"</c>, <c>"ag"</c>, and <c>"er"</c>.</p>
    <p>String parts will be represented by the <c>StringPart</c> class shown below.</p>
    <program language="java">
      <code>
public class StringPart
{
    /**
     * @param start the starting position of the substring in a master string
     * @param length the length of the substring in a master string
     */
    public StringPart(int start, int length)
    {
        /* implementation not shown */
    }

    /**
     * @return the starting position of the substring in a master string
     */
    public int getStart()
    {
        /* implementation not shown */
    }

    /**
     * @return the length of the substring in a master string
     */
    public int getLength()
    {
        /* implementation not shown */
    }

    // There may be other instance variables, constructors, and methods
}
</code>
    </program>
    <p>The class <c>StringCoder</c> provides methods to encode and decode words using a given master string. When
            encoding, there may be multiple matching string parts of the master string. The helper method <c>findPart</c> is
            provided to choose a string part within the master string that matches the beginning of a given string.</p>
    <program language="java">
      <code>
public class StringCoder
{
    private String masterString;

    /**
     * @param master the master string for the StringCoder Precondition: the master
     *     string contains all the letters of the alphabet
     */
    public StringCoder(String master)
    {
        masterString = master;
    }

    /**
     * @param parts an ArrayList of string parts that are valid in the master
     *     string Precondition: parts.size() &gt; 0
     * @return the string obtained by concatenating the parts of the master string
     */
    public String decodeString(ArrayList&lt;StringPart&gt; parts)
    {
        /* to be implemented in part (a) */
    }

    /**
     * @param str the string to encode using the master string Precondition: all of
     *     the characters in str appear in the master string; str.length() &gt; 0
     * @return a string part in the master string that matches the beginning of
     *     str. The returned string part has length at least 1.
     */
    private StringPart findPart(String str)
    {
        /* implementation not shown */
    }

    /**
     * @param word the string to be encoded Precondition: all of the characters in
     *     word appear in the master string; word.length() &gt; 0
     * @return an ArrayList of string parts of the master string that can be
     *     combined to create word
     */
    public ArrayList&lt;StringPart&gt; encodeString(String word)
    {
        /* to be implemented in part (b) */
    }

    // There may be other instance variables, constructors, and methods
}
</code>
    </program>
  </introduction>
  <subsection xml:id="try-and-solve-it-9">
            <title>Try and Solve It</title>
            <p><term>Part a.</term>  Finish writing the <c>StringCoder</c> method <c>decodeString</c>. This method retrieves the substrings in the master
                string represented by each of the <c>StringPart</c> objects in parts, concatenates them in the order in
                which they appear in parts, and returns the result.</p>
            <p>The code below contains a main method for testing the <c>decodeString</c> method.</p>

<exercise label="StringCoderA">
    <statement>
            <p>Finish writing the <c>StringCoder</c> method <c>decodeString</c>.</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
import java.util.*;

class StringPart
{
    private int start;
    private int len;

    public StringPart(int theStart, int theLen)
    {
        // initialise instance variables
        start = theStart;
        len = theLen;
    }

    public StringPart()
    {
        start = 0;
        len = 0;
    }

    public int getStart()
    {
        return start;
    }

    public int getLength()
    {
        return len;
    }

    public String toString()
    {
        return "(" + getStart() + ", " + getLength() + ")";
    }
}

public class StringCoder
{

    private String masterString;

    /** Constructor for objects of class StringCoder */
    public StringCoder()
    {
        masterString = "sixtyzipperswerequicklypickedfromthewovenjutebag";
    }

    public StringCoder(String master)
    {
        masterString = master;
    }

    /**
     * @param parts an ArrayList of string parts that are valid in the master
     *     string Precondition: parts.size() &gt; 0
     * @return the string obtained by concatenating the parts of the master string
     */
    public String decodeString(ArrayList&lt;StringPart&gt; parts)
    {
        // *** Finish writing this method! ***
    }

    private StringPart findPart(String str)
    {
        int start = 0;
        int length = 0;
        for (int len = 1; len &lt;= str.length(); len++)
        {
            int found = masterString.indexOf(str.substring(0, len));
            if (found != -1)
            {
                start = found;
                length = len;
            }
        }
        return new StringPart(start, length);
    }

    public static void main(String[] args)
    {
        ArrayList&lt;StringPart&gt; overeager = new ArrayList&lt;StringPart&gt;();
        overeager.add(new StringPart(37, 3));
        overeager.add(new StringPart(14, 2));
        overeager.add(new StringPart(46, 2));
        overeager.add(new StringPart(9, 2));
        System.out.println("overeager is encoded as " + overeager);
        StringCoder key = new StringCoder();
        System.out.println(
                "Decoding we get "
                        + key.decodeString(overeager)
                        + " and should be overeager");
    }
}

</code><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.util.ArrayList;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("StringCoder");
        // CodeTestHelper.sort = true;
    }

    @Test
    public void testMain1()
    {
        boolean passed = false;

        String expect =
                "overeager is encoded as [(37, 3), (14, 2), (46, 2), (9, 2)]\n"
                    + "Decoding we get overeager and should be overeager";

        String output = getMethodOutput("main");

        passed = getResults(expect, output, "Checking for expected output");
        assertTrue(passed);
    }

    @Test
    public void testMain2()
    {
        boolean passed = false;

        ArrayList&lt;StringPart&gt; csawesome = new ArrayList&lt;StringPart&gt;();
        csawesome.add(new StringPart(19, 0));
        csawesome.add(new StringPart(0, 1));
        csawesome.add(new StringPart(46, 1));
        csawesome.add(new StringPart(12, 2));
        csawesome.add(new StringPart(0, 1));
        csawesome.add(new StringPart(31, 2));
        csawesome.add(new StringPart(9, 1));
        String output = "csawesome is encoded as " + csawesome + "\n";

        StringCoder key = new StringCoder();
        output += "Decoding we get " + key.decodeString(csawesome) + " and should be csawesome";

        String expect =
                "csawesome is encoded as [(19, 0), (0, 1), (46, 1), (12, 2), (0, 1), (31, 2), (9,"
                    + " 1)]\n"
                    + "Decoding we get sawesome and should be csawesome";

        passed = getResults(expect, output, "Checking for expected results for \"csawesome\"");

        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
        </subsection>
</section>

<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section xml:id="UNIQUE-ID-000976">
  <title>SkyView - Part B</title>
  <introduction>
    <p><term>Part b.</term>  Write the <c>SkyView</c> method <c>getAverage</c>, which returns the average of the elements of the section of
            <c>view</c> with row indexes from <c>startRow</c> through <c>endRow</c>, inclusive, and column indexes from
            <c>startCol</c> through <c>endCol</c>, inclusive.</p>
    <p>For example, if <c>nightSky</c> is a <c>SkyView</c> object where <c>view</c> contains the values shown below, the
            call <c>nightSky.getAverage(1, 2, 0, 1)</c> should return <c>0.8</c>. (The average is (1.1 + 1.4
            + 0.2 + 0.5) / 4, which equals 0.8). The section being averaged is indicated by the dark outline
            in the table below.</p>
    <figure align="center" xml:id="UNIQUE-ID-000977">
      <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 1: Example values with the region for the getAverage outlined</caption>
      <image source="FreeResponse/Figures/SkyViewBEx.png" width="NaN%"/>
    </figure>
    <figure align="center" xml:id="UNIQUE-ID-000978">
      <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 1: The class information</caption>
      <image source="FreeResponse/Figures/SkyViewClassInfo.png" width="NaN%"/>
    </figure>
  </introduction>
  <subsection xml:id="UNIQUE-ID-000979">
    <title>Try and Solve It</title>
    <exercise label="SkyViewB">
      <statement>
        <p>Finish writing the <c>getAverage</c> method in the class below.</p>
      </statement>
      <program xml:id="UNIQUE-ID-000980" interactive="activecode" language="java">
        <input>
public class SkyView
{
    private double[][] view;

    /**
     * Constructs a SkyView object from a 1-dimensional array of scan data.
     *
     * @param numRows the number of rows represented in the view Precondition:
     *     numRows &gt; 0
     * @param numCols the number of columns represented in the view Precondition:
     *     numCols &gt; 0
     * @param scanned the scan data received from the telescope, stored in
     *     telescope order Precondition: scanned.length == numRows * numCols
     *     Postcondition: view has been created as a rectangular 2-dimensional
     *     array with numRows rows and numCols columns and the values in scanned
     *     have been copied to view and are ordered as in the original rectangular
     *     area of sky.
     */
    public SkyView(int numRows, int numCols, double[] scanned)
    {
        view = new double[numRows][numCols];
        int scannedIndex = 0;
        for (int r = 0; r &lt; numRows; r++)
        {
            // if even row number go left to right */
            if (r % 2 == 0)
            {
                for (int c = 0; c &lt; numCols; c++)
                {
                    view[r][c] = scanned[scannedIndex];
                    scannedIndex++;
                }
            }
            else
            {
                for (int c = numCols - 1; c &gt;= 0; c--)
                {
                    view[r][c] = scanned[scannedIndex];
                    scannedIndex++;
                }
            }
        }
    }

    /**
     * Returns the average of the values in a rectangular section of view.
     *
     * @param startRow the first row index of the section
     * @param endRow the last row index of the section
     * @param startCol the first column index of the section
     * @param endCol the last column index of the section Precondition: 0 &lt;=
     *     startRow &lt;= endRow &lt; view.length Precondition: 0 &lt;= startCol &lt;= endCol &lt;
     *     view[0].length
     * @return the average of the values in the specified section of view
     */
    public double getAverage(int startRow, int endRow, int startCol, int endCol)
    {
        // *** Finish writing this method! ***
    }

    /** This is a main method for testing getAverage */
    public static void main(String[] args)
    {
        double[] startArray =
        {
            0.3, 0.7, 0.8, 0.4, 1.4, 1.1, 0.2, 0.5, 0.1, 1.6, 0.6, 0.9
        };
        SkyView sView = new SkyView(4, 3, startArray);
        System.out.println(
                "getAverage(1,2,0,1) should return 0.8 and returns "
                        + sView.getAverage(1, 2, 0, 1));
    } // end of main
} // end of class

        </input>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

// import java.util.Arrays;
// import java.util.ArrayList;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("SkyView");
        // CodeTestHelper.sort = true;
    }

    @Test
    public void testMain1()
    {
        boolean passed = false;

        double[] val2 = {0.3, 0.7, 0.4, 0.8, 1.4, 1.1};

        String view = "0.3, 0.7,\n0.8, 0.4,\n1.4,1.1,";

        SkyView sView = new SkyView(3, 2, val2);
        String expect = "getAverage(1,2,0,1)  --&gt; 0.925";

        String output = "getAverage(1,2,0,1)  --&gt; " + sView.getAverage(1, 2, 0, 1);

        passed = getResults(expect, output, "Checking for expected output from:\n" + view);
        assertTrue(passed);
    }

    @Test
    public void testMain2()
    {
        boolean passed = false;

        double[] val2 = {0.3, 0.7, 0.4, 0.8, 1.4, 1.1};
        String view = "0.3, 0.7, 0.4,\n1.1, 1.4,  0.8,";
        SkyView sView = new SkyView(2, 3, val2);
        String expect = "getAverage(1,2,0,1) --&gt; 0.875";

        String output = "getAverage(1,2,0,1)  --&gt; " + sView.getAverage(0, 1, 0, 1);

        passed = getResults(expect, output, "Checking for expected output from:\n" + view);
        assertTrue(passed);
    }
}
</tests>
      </program>
    </exercise>
  </subsection>
</section>

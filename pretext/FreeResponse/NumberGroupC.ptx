<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="NumberGroupC">
  <title>NumberGroup - Part C</title><introduction>
    
    <idx>NumberGroup</idx>
 <idx>free\ response</idx>

    <p><term>Part c.</term>  The <c>MultipleGroups</c> class represents a collection of <c>NumberGroup</c> objects and is
            a <c>NumberGroup</c>. The <c>MultipleGroups</c> class stores the number groups in the instance variable
            <c>groupList</c> (shown below), which is initialized in the constructor.</p>
    <p>
      <ul>
            <li>
                <p>private ArrayList&lt;NumberGroup&gt; groupList;</p>
            </li>
        </ul>
    </p>
    <p>Write the <c>MultipleGroups</c> method <c>contains</c>. The method takes an integer and returns <c>true</c>
            if and only if the integer is contained in one or more of the number groups in <c>groupList</c>.</p>
    <p>For example, suppose <c>multiple1</c> has been declared as an instance of <c>MultipleGroups</c> and consists of the three ranges created by the calls:</p>
    <p>
      <ul>
            <li>
                <p>new Range(5, 8)</p>
            </li>
            <li>
                <p>new Range(10, 12)</p>
            </li>
            <li>
                <p>new Range(1, 6)</p>
            </li>
        </ul>
    </p>
    <p>The following table shows the results of several calls to <c>contains</c>.</p>
    <figure align="center">
      <image source="FreeResponse/Figures/NumberGroup.png" width="63%"/>
    </figure>
  </introduction>
  <subsection xml:id="try-and-solve-it-4">
            <title>Try and Solve It</title>
            <p>Write the method <c>contains</c> below in the class MultiGroups. (Note that the original AP Question involved a NumberGroup interface which has been replaced with inheritance here).</p>

<exercise label="NumberGroupC">
    <statement>
            <p>Write the method <c>contains</c> below in the class MultiGroups.</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
import java.util.ArrayList;

class NumberGroup
{
    public boolean contains(int num)
    {
        /* Implementation not shown */
        return true;
    }
}

class Range extends NumberGroup
{
    // copy in your Range class from the previous lesson here
}

public class MultiGroups extends NumberGroup
{

    private ArrayList&lt;NumberGroup&gt; groupList;

    public MultiGroups(Range r1, Range r2, Range r3)
    {
        groupList = new ArrayList&lt;NumberGroup&gt;();
        groupList.add(r1);
        groupList.add(r2);
        groupList.add(r3);
    }

    /**
     * Returns true if at least one of the number groups in this multiple group
     * contains num; false otherwise
     */
    public boolean contains(int num)
    {
        // Write the MultiGroup contains method here

    }

    // Main method to test the class
    public static void main(String[] args)
    {
        MultiGroups multiple1 =
                new MultiGroups(
                        new Range(5, 8), new Range(10, 12), new Range(1, 6));
        System.out.println(
                "Multiple1 contains 2 (should be true)? " + multiple1.contains(2));
        System.out.println(
                "Multiple1 contains 9 (should be false)? "
                        + multiple1.contains(9));
        System.out.println(
                "Multiple1 contains 6 (should be true)? " + multiple1.contains(6));
    } // end of main
}

 </code><tests>
 import static org.junit.Assert.*;

 import org.junit.*;

 import java.io.*;

 // import java.util.ArrayList;

 public class RunestoneTests extends CodeTestHelper
 {
     public RunestoneTests()
     {
         super("MultiGroups");
         // CodeTestHelper.sort = true;
     }

     @Test
     public void testMain1()
     {
         boolean passed = false;

         String expect =
                 "Multiple1 contains 2 (should be true)? true\n"
                     + "Multiple1 contains 9 (should be false)? false\n"
                     + "Multiple1 contains 6 (should be true)? true";

         String output = getMethodOutput("main");

         passed = getResults(expect, output, "Checking for expected output from main");
         assertTrue(passed);
     }

     @Test
     public void testMain2()
     {
         boolean passed = false;

         MultiGroups multiple1 =
                 new MultiGroups(new Range(5, 8), new Range(10, 12), new Range(15, 20));

         String expect = "false";
         String output = "" + multiple1.contains(0);

         passed =
                 getResults(
                         expect,
                         output,
                         "Checking that MultiGroups with Range(5, 8), Range(10, 12), Range(15, 20)"
                             + " contains(0) should be false");
         assertTrue(passed);
     }

     @Test
     public void testMain3()
     {
         boolean passed = false;

         MultiGroups multiple1 =
                 new MultiGroups(new Range(5, 8), new Range(10, 12), new Range(15, 20));

         String expect = "true";
         String output = "" + multiple1.contains(11);

         passed =
                 getResults(
                         expect,
                         output,
                         "Checking that MultiGroups with Range(5, 8), Range(10, 12), Range(15, 20)"
                             + " contains(11) should be true");
         assertTrue(passed);
     }
 }
        </tests>
    </program>
</exercise>
        </subsection>
</section>

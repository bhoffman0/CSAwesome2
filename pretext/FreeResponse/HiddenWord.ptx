<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="HiddenWord">
  <title>Hidden Word - Write Class</title><introduction>
    
    <p>The following is a free response question from 2015.  It was question 2 on the exam.  You can see all the free response questions from past exams at <url href="https://apstudents.collegeboard.org/courses/ap-computer-science-a/free-response-questions-by-year" visual="https://apstudents.collegeboard.org/courses/ap-computer-science-a/free-response-questions-by-year">https://apstudents.collegeboard.org/courses/ap-computer-science-a/free-response-questions-by-year</url>.</p>
    <p><term>Question 2.</term> Consider a guessing game in which a player tries to guess a hidden word. The hidden word contains only capital
            letters and has a length known to the player. A guess contains only capital letters and has the same length as the
            hidden word.</p>
    <p>After a guess is made, the player is given a hint that is based on a comparison between the hidden word and the guess. Each position in the hint contains a character that corresponds to the letter in the same position in the guess. The following rules determine the characters that appear in the hint.</p>
    <figure align="center">
      <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">The hints</caption>
      <image source="FreeResponse/Figures/HiddenWordHints.png" width="100%"/>
    </figure>
    <p>The <c>HiddenWord</c> class will be used to represent the hidden word in the game.  The hidden word is passed to the constructor.  The class contains a method, <c>getHint</c> that takes a guess and produces a hint.</p>
    <p>For example, suppose the variable <c>puzzle</c> is declared as follows.</p>
    <program language="java">
      <code>
HiddenWord puzzle = new HiddenWord("HARPS");
</code>
    </program>
    <p>The following table shows several guesses and the hints that would be produced.</p>
    <figure align="center">
      <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Example guesses and hints</caption>
      <image source="FreeResponse/Figures/HiddenWordExamples.png" width="100%"/>
    </figure>
  </introduction>
  <subsection>
            <title>Try and Solve It</title>
            <p>Write the complete <c>HiddenWord</c> class, including any necessary instance variables, its constructor, and the method,
                <c>getHint</c>, described above. You may assume that the length of the guess is the same as the length of
                the hidden word.</p>
            <p>The code below has comments to help you get started.  It also has a main method for testing.  Finish writing the class and use the main method to test it.</p>

    <program interactive="activecode" language="java">
        <code>
// Declare the public HiddenWord class below

{

    /** Declare any fields (instance variables) **/

    /** Declare a constructor */

    /** Write the getHint method */

    /** This is a main method for testing the class */
    public static void main(String[] args)
    {
        HiddenWord puzzle = new HiddenWord("HARPS");
        System.out.println(puzzle.getHint("AAAAA") + " it should print +A+++");
        System.out.println(puzzle.getHint("HELLO") + " it should print H****");
        System.out.println(puzzle.getHint("HEART") + " it should print H*++*");
        System.out.println(puzzle.getHint("HARMS") + " it should print HAR*S");
        System.out.println(puzzle.getHint("HARPS") + " it should print HARPS");

    } // end of main

} // end of class
</code><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

// import java.util.Arrays;
// import java.util.ArrayList;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("HiddenWord");
        // CodeTestHelper.sort = true;
    }

    @Test
    public void testMain1()
    {
        boolean passed = false;

        String expect =
                "+A+++ it should print +A+++\n"
                    + "H**** it should print H****\n"
                    + "H*++* it should print H*++*\n"
                    + "HAR*S it should print HAR*S\n"
                    + "HARPS it should print HARPS";

        String output = getMethodOutput("main");

        passed = getResults(expect, output, "Checking for expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testMain2()
    {
        boolean passed = false;

        String word = "CSAWESOME";
        String hint = "CSCSCSZZZ";

        HiddenWord puzzle = new HiddenWord(word);

        String output = puzzle.getHint(hint);
        String expect = "CS+++S***";

        passed =
                getResults(
                        expect,
                        output,
                        "Checking for expected output \"" + word + "\" with hint \"" + hint + "\"");
        assertTrue(passed);
    }

    @Test
    public void testMain3()
    {
        boolean passed = false;

        String word = "CSAWESOME";
        String hint = "EZZZZSOME";

        HiddenWord puzzle = new HiddenWord(word);

        String output = puzzle.getHint(hint);
        String expect = "+****SOME";

        passed =
                getResults(
                        expect,
                        output,
                        "Checking for expected output \"" + word + "\" with hint \"" + hint + "\"");
        assertTrue(passed);
    }
}
        </tests>
    </program>
        </subsection>
</section>

<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section>
  <title>Multiple-Choice Exercises</title>
  <exercises>
    <exercise label="AP5-1-3">
      <statement>
        <p>5-14-1: The Liquid class will contain two double attributes for a liquid&#x2019;s boiling point temperature and freezing point temperature. The class will also contain a constructor.</p>
        <program language="java">
          <input>
public class Liquid
{
   /* missing code */
}
Which of the following replacements for /* missing code */ is the most appropriate
implementation of the class?
</input>
        </program>
      </statement>
      <choices>
        <choice correct="yes">
          <statement id="AP5-1-3_opt_a">
            <program language="java">
              <input>
private double boilingPoint;
private double freezingPoint;
public Liquid(double boilingPoint, double freezingPoint)
{ /* implementation not shown */ }
</input>
            </program>
          </statement>
          <feedback id="AP5-1-3_opt_a">
            <p>Correct! The instance variables should be private and the constructor and methods should be public.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-1-3_opt_b">
            <program language="java">
              <input>
private double boilingPoint;
private double freezingPoint;
private Liquid(double boilingPoint, double freezingPoint)
{ /* implementation not shown */ }
</input>
            </program>
          </statement>
          <feedback id="AP5-1-3_opt_b">
            <p>Constructors should be public.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-1-3_opt_c">
            <program language="java">
              <input>
private double boilingPoint;
public double freezingPoint;
private Liquid(double freezingPoint, double boilingPoint)
{ /* implementation not shown */ }
</input>
            </program>
          </statement>
          <feedback id="AP5-1-3_opt_c">
            <p>The instance variables should be private and the constructor and methods should be public.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-1-3_opt_d">
            <program language="java">
              <input>
public double boilingPoint;
public double freezingPoint;
private Liquid(double boilingPoint, double freezingPoint)
{ /* implementation not shown */ }
</input>
            </program>
          </statement>
          <feedback id="AP5-1-3_opt_d">
            <p>The instance variables should be private and the constructor and methods should be public.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-1-3_opt_e">
            <program language="java">
              <input>
public double freezingPoint;
public double boilingPoint;
public Liquid(double freezingPoint, double boilingPoint)
{ /* implementation not shown */ }
</input>
            </program>
          </statement>
          <feedback id="AP5-1-3_opt_e">
            <p>The instance variables should be private.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise label="AP5-1-4">
      <statement>
        <p>5-14-2: The Cat class below will contain two String attributes and one int attribute for name, color, and age; a constructor; and an adoptCat method. The adoptCat method is intended to be accessed outside the class.</p>
        <program language="java">
          <input>
public class Cat
{
  /* missing code */
}
Which of the following replacements for /* missing code */ is the most appropriate
implementation of the class?
</input>
        </program>
      </statement>
      <choices>
        <choice>
          <statement id="AP5-1-4_opt_a">
            <program language="java">
              <input>
private String name;
private String color;
private int age;
public Cat()
{ /* implementation not shown */ }
private void adoptCat(String n, String c, int a)
{ /* implementation not shown */ }
</input>
            </program>
          </statement>
          <feedback id="AP5-1-4_opt_a">
            <p>Method adoptCat() should be public.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-1-4_opt_b">
            <program language="java">
              <input>
public String name;
public String color;
public int age;
private Cat()
{ /* implementation not shown */ }
private void adoptCat(String n, String c, int a)
{ /* implementation not shown */ }
</input>
            </program>
          </statement>
          <feedback id="AP5-1-4_opt_b">
            <p>Method and constructor should be public, and instance variables should be private.</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement id="AP5-1-4_opt_c">
            <program language="java">
              <input>
private String name;
private String color;
private int age;
public Cat()
{ /* implementation not shown */ }
public void adoptCat(String n, String c, int a)
{ /* implementation not shown */ }
</input>
            </program>
          </statement>
          <feedback id="AP5-1-4_opt_c">
            <p>Correct! Method and constructor should be public, and instance variables should be private.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-1-4_opt_d">
            <program language="java">
              <input>
public String name;
public String color;
public int age;
public Cat()
{ /* implementation not shown */ }
public void adoptCat(String n, String c, int a)
{ /* implementation not shown */ }
</input>
            </program>
          </statement>
          <feedback id="AP5-1-4_opt_d">
            <p>Instance variables should be private.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-1-4_opt_e">
            <program language="java">
              <input>
public String name;
public String color;
public int age;
private Cat()
{ /* implementation not shown */ }
public void adoptCat(String n, String c, int a)
{ /* implementation not shown */ }
</input>
            </program>
          </statement>
          <feedback id="AP5-1-4_opt_e">
            <p>Instance variables should be private, and the constructor should be public.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise label="AP5-2-4">
      <statement>
        <p>5-14-3: Consider the definition of the Party class below. The class uses the instance variable numOfPeople to indicate how many people are at the party.</p>
        <program language="java">
          <input>
public class Party
{
    private int numOfPeople;
    private String partyHost;

    public Party (String name, int people)
    {
        partyHost = name;
        numOfPeople = people;
    }
}

Which of the following statements will create a Party object
that represents a party that has three people at it?
</input>
        </program>
      </statement>
      <choices>
        <choice>
          <statement id="AP5-2-4_opt_a">
            <p>Party p = new Party (&#x201C;Natasha&#x201D;, &#x201C;3&#x201D;);</p>
          </statement>
          <feedback id="AP5-2-4_opt_a">
            <p>An int should be passed in as the second parameter, not a String.</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement id="AP5-2-4_opt_b">
            <p>Party p = new Party (&#x201C;Eduardo&#x201D;, 3);</p>
          </statement>
          <feedback id="AP5-2-4_opt_b">
            <p>Correct</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-2-4_opt_c">
            <p>Party p = new Party (&#x201C;Emillio&#x201D;, &#x201C;three&#x201D;);</p>
          </statement>
          <feedback id="AP5-2-4_opt_c">
            <p>An int should be passed in as the second parameter, not a string.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-2-4_opt_d">
            <p>Party p = new Party (&#x201C;Bob&#x201D;, three);</p>
          </statement>
          <feedback id="AP5-2-4_opt_d">
            <p>The word three would be treated as an undeclared variable here.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-2-4_opt_e">
            <p>Party p = new Party (&#x201C;Billie&#x201D;, &#x201C;2+1&#x201D;);</p>
          </statement>
          <feedback id="AP5-2-4_opt_e">
            <p>Strings cannot perform addition.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise label="AP5-2-5">
      <statement>
        <p>5-14-4: Consider the following class definition. Each object of the class Party will store the party host&#x2019;s name as partyHost, the number of people as numOfPeople, and the capacity that the event can hold as capacity. Which of the following code segments, found in a class other than Party, can be used to create a party hosted by Charlie without anyone there initially, but the place can hold 78 people ?</p>
        <program language="java">
          <input>
public class Party
{
    private String partyHost;
    private int numOfPeople;
    private int capacity;

    public Party(String name, int num, int cap)
    {
        partyHost = name;
        numOfPeople = num;
        capacity = cap;
    }
    public Party (String name, int cap)
    {
        partyHost = name;
        numOfPeople = 0;
        capacity = cap;
    }
    /* Other methods not shown */
}

I.   Party b = new Party("Charlie", 78);
II.  Party b = new Party("Charlie", 0, 70+8);
III. Party b = new Party("Charlie", 0, 78);
</input>
        </program>
      </statement>
      <choices>
        <choice>
          <statement>
            <p>I only</p>
          </statement>
          <feedback>
            <p>II and III can also create a correct Party instance</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>I and II</p>
          </statement>
          <feedback>
            <p>III can also create a correct Party instance</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>I and III</p>
          </statement>
          <feedback>
            <p>II can also create a correct Party instance</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement>
            <p>I, II, and III</p>
          </statement>
          <feedback>
            <p>I, II, and III can successfully create the Party instance.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>II and III</p>
          </statement>
          <feedback>
            <p>I can also create a correct Party instance</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise label="AP5-2-6">
      <statement>
        <p>5-14-5: Consider the following class definition.</p>
        <program language="java">
          <input>
public class Party
{
    private int numOfPeople;
    private double volumeOfMusic;
    /* missing constructor */
}
</input>
        </program>
        <p>The following statement appears in a method in a class other than Party. It is intended to create a new Party object p with its attributes set to 10 and 5.0.</p>
        <program language="java">
          <input>
Party p = new Party(10, 5.0);

Which of the following can be used to replace /* missing constructor */
so that the object p is correctly created?
</input>
        </program>
      </statement>
      <choices>
        <choice>
          <statement id="AP5-2-6_opt_a">
            <program language="java">
              <input>
public Party(int first, double second)
{
    numOfPeople = 10;
    volumeOfMusic = 5.0;
}
</input>
            </program>
          </statement>
          <feedback id="AP5-2-6_opt_a">
            <p>The constructor should be using the local variables to set the instance variables.</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement id="AP5-2-6_opt_b">
            <program language="java">
              <input>
public Party(int first, double second)
{
    numOfPeople = first;
    volumeOfMusic = second;
}
</input>
            </program>
          </statement>
          <feedback id="AP5-2-6_opt_b">
            <p>Correct</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-2-6_opt_c">
            <program language="java">
              <input>
public Party(int first, double second)
{
    first = 10;
    second = 5.0;
}
</input>
            </program>
          </statement>
          <feedback id="AP5-2-6_opt_c">
            <p>The constructor should be using the parameters to set the instance variables.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-2-6_opt_d">
            <program language="java">
              <input>
public Party(int first, double second)
{
    first = numOfPeople;
    second = volumeOfMusic;
}
</input>
            </program>
          </statement>
          <feedback id="AP5-2-6_opt_d">
            <p>The constructor should be changing the instance variables, not the local variables.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise label="AP5-3-3">
      <statement>
        <p>5-14-6: Consider the following class definition that defines a Liquid class with a boilingPoint, a currentTemperature, and a freezingPoint. For example, Liquid water = new Liquid(100, 50, 0); defines a water object with a boiling point of 100, a current temperature of 50, and a freezing temperature of 0.</p>
        <program language="java">
          <input>
public class Liquid
{
    private int boilingPoint;
    private int currentTemp;
    private int freezingPoint;

    public Liquid(int bp, int ct, int fp)
    {
        boilingPoint = bp;
        currentTemp = ct;
        freezingPoint = fp;
    }
    /* Other methods not shown */
}
</input>
        </program>
        <p>Which of the following preconditions is reasonable for the Liquid constructor?</p>
      </statement>
      <choices>
        <choice>
          <statement id="AP5-3-3_opt_a">
            <p>Precondition: fp &gt; 0</p>
          </statement>
          <feedback id="AP5-3-3_opt_a">
            <p>Incorrect. The freezing point could be negative.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-3-3_opt_b">
            <p>Precondition: currentTemp &gt; 0</p>
          </statement>
          <feedback id="AP5-3-3_opt_b">
            <p>Incorrect. Unable to make this assumption for all liquids.</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement id="AP5-3-3_opt_c">
            <p>Precondition: fp &lt; ct &lt; bp</p>
          </statement>
          <feedback id="AP5-3-3_opt_c">
            <p>Correct!</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-3-3_opt_d">
            <p>Precondition: fp &gt; ct &gt; bp</p>
          </statement>
          <feedback id="AP5-3-3_opt_d">
            <p>Incorrect. This would again result in freezing point being &gt; boiling point which is impossible.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise label="AP5-4-4">
      <statement>
        <p>5-14-7:  Consider the following Cat class, with the cat&#x2019;s age stored in the method&#x2019;s int attribute. The getAge method is intended to allow methods in other classes to access a Cat object&#x2019;s age value; however, it does not work as intended. Which of the following best explains why the getAge method does NOT work as intended?</p>
        <blockquote>
          <program language="java">
            <input>
public class Cat
{
    private int age;

    public Cat(int a)
    {
        age = a;
    }

    public int getAge()
    {
        return a;
    }
}
</input>
          </program>
        </blockquote>
      </statement>
      <choices>
        <choice>
          <statement>
            <p>The getAge method should be declared as private.</p>
          </statement>
          <feedback>
            <p>The method should be public so it can be accessed outside of the class.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>The return type of the getAge method should be void.</p>
          </statement>
          <feedback>
            <p>The method return type should stay as int.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>The getAge method should have at least one parameter.</p>
          </statement>
          <feedback>
            <p>The getAge should not take any parameters.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>The variable age is not declared inside the getAge method.</p>
          </statement>
          <feedback>
            <p>This is an instance variable and should be declared outside.</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement>
            <p>The instance variable age should be returned instead of a, which is local to the constructor.</p>
          </statement>
          <feedback>
            <p>The accessor method getAge should return the instance variable age.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise label="AP5-4-3">
      <statement>
        <p>5-14-8: Consider the following Liquid class. The currentTemperature is stored in the method&#x2019;s int attribute. The getCurrentTemp method is intended to allow methods in other classes to access a Liquid object&#x2019;s currentTemperature value; however, it does not work as intended. Which of the following best explains why the getCurrentTemperature method does NOT work as intended?</p>
        <program language="java">
          <input>
public class Liquid
{
    private int currentTemperature;

    public Liquid(int ct)
    {
        currentTemperature = ct;
    }

    public void getCurrentTemperature()
    {
        return currentTemperature;
    }
}
</input>
        </program>
      </statement>
      <choices>
        <choice>
          <statement id="AP5-4-3_opt_a">
            <p>The getCurrentTemperature method should be declared as private.</p>
          </statement>
          <feedback id="AP5-4-3_opt_a">
            <p>Accessor methods should be public methods.</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement id="AP5-4-3_opt_b">
            <p>The return type of the getCurrentTemperature method should be int.</p>
          </statement>
          <feedback id="AP5-4-3_opt_b">
            <p>Correct! The return type should match the type of the variable being returned.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-4-3_opt_c">
            <p>The getCurrentTemperature method should have at least one parameter.</p>
          </statement>
          <feedback id="AP5-4-3_opt_c">
            <p>Get methods do not need parameters.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-4-3_opt_d">
            <p>The variable currentTemperature is not declared inside of the getCurrentTemperature method.</p>
          </statement>
          <feedback id="AP5-4-3_opt_d">
            <p>currentTemperature is an instance variable that is shared by all the methods in the class.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-4-3_opt_e">
            <p>The instance variable ct should be returned instead of currentTemperature.</p>
          </statement>
          <feedback id="AP5-4-3_opt_e">
            <p>The getCurrentTemperature method does not have access to the ct variable which is the parameter for the constructor.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise label="AP5-5-3">
      <statement>
        <p>5-14-9: Consider the following class definition.</p>
        <program language="java">
          <input>
public class Liquid
{
    private int currentTemp;

    public Liquid(int temp)
    {
        currentTemp = temp;
    }

    public int getTemp()
    {
        return currentTemp;
    }

    public void resetTemp(int new_temp)
    {
        currentTemp = new_temp;
    }
}
</input>
        </program>
        <p>Consider the following code segment, which appears in a method in a class other than Liquid. The code segment does not compile.</p>
        <program language="java">
          <input>
Liquid liq = new Liquid(50);
System.out.println("The temperature of the liquid is " + liq.currentTemp);
</input>
        </program>
        <p>Which of the following best identifies the reason the code segment does not compile?</p>
      </statement>
      <choices>
        <choice>
          <statement id="AP5-5-3_opt_a">
            <p>The Liquid class constructor should not have a parameter.</p>
          </statement>
          <feedback id="AP5-5-3_opt_a">
            <p>The constructor does have a parameter.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-5-3_opt_b">
            <p>The resetTemperature method does not return a value that can be printed.</p>
          </statement>
          <feedback id="AP5-5-3_opt_b">
            <p>This is a void mutator method.</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement id="AP5-5-3_opt_c">
            <p>The private instance variable cannot be accessed from outside the class unless the accessor method is used.</p>
          </statement>
          <feedback id="AP5-5-3_opt_c">
            <p>Correct! The currentTemp instance variable is private and cannot be accessed outside of the class but the public accessor method getTemp() can be used instead.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-5-3_opt_d">
            <p>The getTemp method cannot be called from outside the Liquid class.</p>
          </statement>
          <feedback id="AP5-5-3_opt_d">
            <p>The getTemp accessor method should be used from outside the class.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-5-3_opt_e">
            <p>currentTemp does not have a value.</p>
          </statement>
          <feedback id="AP5-5-3_opt_e">
            <p>currentTemp is initialized to a value by the constructor but it is private and cannot be accessed outside the class.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise label="AP5-5-4">
      <statement>
        <p>5-14-10: In the Liquid class below, the raiseTemperature method is intended to increase the value of the instance variable currentTemp by the value of the parameter increase. The method does not work as intended.</p>
        <program language="java">
          <input>
public class Liquid
{
    private int currentTemp;

    public Liquid(int ct)
    {
        currentTemp = ct;
    }

    public void raiseTemperature(int increase) // Line 10
            {
        return currentTemp + increase; // Line 12
    }
}
</input>
        </program>
        <p>Which of the following changes should be made so that the class definition compiles without error and the method raiseTemperature works as intended?</p>
      </statement>
      <choices>
        <choice correct="yes">
          <statement id="AP5-5-4_opt_a">
            <p>Replace line 12 with <c>currentTemp += increase;</c></p>
          </statement>
          <feedback id="AP5-5-4_opt_a">
            <p>Correct! This void mutator method should just change the value of currentTemp and not return a value.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-5-4_opt_b">
            <p>Replace line 12 with <c>return currentTemp += increase;</c></p>
          </statement>
          <feedback id="AP5-5-4_opt_b">
            <p>This void mutator method should just change the value of currentTemp and not return a value.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-5-4_opt_c">
            <p>Replace line 12 with  <c>increase += currentTemp;</c></p>
          </statement>
          <feedback id="AP5-5-4_opt_c">
            <p>This method should  change the value of currentTemp, not increase.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-5-4_opt_d">
            <p>Replace line 10 with  <c>public raiseTemperature(int increase)</c></p>
          </statement>
          <feedback id="AP5-5-4_opt_d">
            <p>This mutator method needs a return type of void.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-5-4_opt_e">
            <p>Replace line 10 with  <c>public int raiseTemperature(int increase)</c></p>
          </statement>
          <feedback id="AP5-5-4_opt_e">
            <p>This mutator method should have a void return value and just change the value of currentTemp without returning a value.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise label="AP5-6-3">
      <statement>
        <p>5-14-11: Consider the following class definition. The calculatePizzaCostPerPerson method is intended to calculate the amount each person at the party must pay for pizza. The amount is equal to the total price of all the pizza boxes divided by the number of people at the party. Which of the following code segments should replace <em>missing code</em> so that the calculatePizzaCostPerPerson method will work as intended?</p>
        <program language="java">
          <input>
public class Party
{
    private int numOfPeople; // number of people at the party

    public Party(int people)
    {
        numOfPeople = people;
    }

    public double calculatePizzaCostPerPerson(
            int numOfBoxes, double priceOfOnePizzaBox)
            {
        /* missing code */
    }
}
</input>
        </program>
      </statement>
      <choices>
        <choice>
          <statement>
            <p>return (numOfBoxes + priceOfOnePizzaBox) / numOfPeople;</p>
          </statement>
          <feedback>
            <p>Assume you have 5 boxes at $10 each. You would need to multiply them to get a total cost of $50. If you had 10 people at the party, you would need to divide $50 by 10 to get $5 per person.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>return numOfPeople * numOfBoxes * priceOfOnePizzaBox;.</p>
          </statement>
          <feedback>
            <p>Assume you have 5 boxes at $10 each for a total cost of $50. If you had 10 people at the party, you would need to divide $50 by 10 to get $5 per person.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>return numOfBoxes / priceOfOnePizzaBox / numOfPeople;</p>
          </statement>
          <feedback>
            <p>Assume you have 5 boxes at $10 each. You would need to multiply them to get a total cost of $50. If you had 10 people at the party, you would need to divide $50 by 10 to get $5 per person.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>return numOfPeople / (numOfBoxes * priceOfOnePizzaBox);</p>
          </statement>
          <feedback>
            <p>Assume you have 5 boxes at $10 each for a total cost of $50. If you had 10 people at the party, you would need to divide $50 by 10 to get $5 per person.</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement>
            <p>return (numOfBoxes * priceOfOnePizzaBox) / numOfPeople;</p>
          </statement>
          <feedback>
            <p>Assume you have 5 boxes at $10 each for a total cost of $50. If you had 10 people at the party, you would need to divide $50 by 10 to get $5 per person.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise label="AP5-6-4">
      <statement>
        <p>5-14-12: Consider the Party class below.</p>
        <program language="java">
          <input>
public class Party
{
    private int numOfPeople; // number of people at the party
    private int capacity; // total capacity of people at party

    public Party(int people, int cap)
    {
        numOfPeople = people;
        capacity = cap;
    }

    public boolean updateNumOfPeople(int additionalPeople)
    {
        /* missing code */
    }
}
</input>
        </program>
        <p>The class contains the updateNumOfPeople method, which is intended to update the instance variable numOfPeople under certain conditions and return a value indicating whether the  update was successful. If adding additionalPeople to the current number of people would lead to the number going over the capacity, then the update would be unsuccessful. Otherwise, if adding the number of additional people is still below or at the capacity, the update is successful. Which of the following code segments can replace <em>missing code</em> to ensure that the updateNumOfPeople method works as intended?</p>
        <program language="java">
          <input>
I.  if (numOfPeople + additionalPeople &gt; capacity)
    {
        return false;
    }
    else
    {
        numOfPeople += additionalPeople;
        return true;
    }
II. if (numOfPeople + additionalPeople &lt;= capacity)
    {
        numOfPeople += additionalPeople;
        return true;
    }
    else
    {
        return false;
    }
III. if (numOfPeople += additionalPeople &lt;= capacity)
     {
        return true;
     }
     else
     {
        return false;
     }
</input>
        </program>
      </statement>
      <choices>
        <choice>
          <statement>
            <p>I only</p>
          </statement>
          <feedback>
            <p>I would work but this is not the only code that would work.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>II only</p>
          </statement>
          <feedback>
            <p>II would work but this is not the only code that would work.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>III only</p>
          </statement>
          <feedback>
            <p>You cannot put a shortcut assignment operator in the conditional test of an if statement.</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement>
            <p>I and II only</p>
          </statement>
          <feedback>
            <p>Correct!</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>I, II, and III</p>
          </statement>
          <feedback>
            <p>III would not work because you cannot put a shortcut assignment operator in the conditional test of an if statement.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise label="AP5-8-3">
      <statement>
        <p>5-14-13: Consider the following class definition.</p>
        <program language="java">
          <input>
public class Liquid
{
    private int currentTemp;
    private int boilingPoint;

    public Liquid(int ct, int bp)
    {
        currentTemp = ct;
        boilingPoint = bp;
    }

    public void changeTemp(int newTemp)
    {
        currentTemp = newTemp;
    }

    public void increaseTemp(int howMuch)
    {
        currentTemp = newTemp + howMuch;
    }
}
</input>
        </program>
        <p>Which of the following best explains why the class will not compile?</p>
      </statement>
      <choices>
        <choice>
          <statement id="AP5-8-3_opt_a">
            <p>The class is missing an accessor method.</p>
          </statement>
          <feedback id="AP5-8-3_opt_a">
            <p>The class does not necessarily need an accessor method.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-8-3_opt_b">
            <p>The instance variables currentTemp and boilingPoint should be  public instead of private.</p>
          </statement>
          <feedback id="AP5-8-3_opt_b">
            <p>Instance variables are usually private.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-8-3_opt_c">
            <p>The Liquid constructor needs a return type.</p>
          </statement>
          <feedback id="AP5-8-3_opt_c">
            <p>Constructors do not have return types.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-8-3_opt_d">
            <p>The Liquid class is missing a constructor.</p>
          </statement>
          <feedback id="AP5-8-3_opt_d">
            <p>The class includes a constructor.</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement id="AP5-8-3_opt_e">
            <p>The variable newTemp is not defined in the increaseTemp method.</p>
          </statement>
          <feedback id="AP5-8-3_opt_e">
            <p>Correct! newTemp is defined in a different method. The instance variable currentTemp should be used instead.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise label="AP5-8-4">
      <statement>
        <p>5-14-14: Consider the following class definition for Party.  The following code segment appears in a method in a class other than Party. The code segment is intended to print the value 30, but does not print the correct value because of an error in the Party class. Which of the following best explains why the correct value isn&#x2019;t printed?</p>
        <program language="java">
          <input>
Party p = new Party(20, 15);
p.orderMoreFood(20);
p.eatFood(5);
System.out.println(p.getBoxesOfFood());

public class Party
{
 private int boxesOfFood;
 private int numOfPeople;

 public Party(int people, int foodBoxes)
 {
     numOfPeople = people;
     boxesOfFood = foodBoxes;
 }

 public void orderMoreFood(int additionalFoodBoxes)
 {
     int updatedAmountOfFood = boxesOfFood + additionalFoodBoxes;
     boxesOfFood = updatedAmountOfFood;
 }

 public int getNumOfPeople() {
     return numOfPeople;
 }

 public int getBoxesOfFood() {
     return boxesOfFood;
 }

 public void eatFood(int eatenBoxes)
 {
     boxesOfFood = updatedAmountOfFood - eatenBoxes;
 }
}
</input>
        </program>
      </statement>
      <choices>
        <choice>
          <statement>
            <p>The private variables boxesOfFood and numOfPeople are not properly initialized.</p>
          </statement>
          <feedback>
            <p>The private variables boxesOfFood and numOfPeople are initialized by the constructor.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>The private variables boxesOfFood and numOfPeople should have been declared public.</p>
          </statement>
          <feedback>
            <p>Instance variables are usually private.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>The public method getBoxesOfFood should have been declared private.</p>
          </statement>
          <feedback>
            <p>Methods are usually public.</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement>
            <p>The variable updatedAmountOfFood in the eatFood method is not declared in this method.</p>
          </statement>
          <feedback>
            <p>The variable updatedAmountOfFood in the eatFood method is not declared in this method. It could be replaced by the boxesOfFood instance variable.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>The variables boxesOfFood and numOfPeople in the updatedAmountOfFood method are local variables.</p>
          </statement>
          <feedback>
            <p>The variables boxesOfFood and numOfPeople are instance variables.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise label="AP5-9-3">
      <statement>
        <p>5-14-15: Consider the following class definitions.</p>
        <program language="java">
          <input>
public class Party
{
    private String partyHost;
    private int monthOfParty;
    private int partyStartTime;

    public Party(String h, int month, int startTime)
    {
        partyHost = h;
        monthOfParty = month;
        partyStartTime = startTime;
    }

    public int getMonth()
    {
        return monthOfParty;
    }

    public int getStartTime()
    {
        return partyStartTime;
    }

    public String getHost()
    {
        return partyHost;
    }

    public void addToOptions(PartyOptions o)
    {
        o.addParty(this);
    }
}

public class PartyOptions
{
    private int onlyThisMonth;

    public PartyOptions(int month)
    {
        onlyThisMonth = month;
    }

    /* A Party should only be added to this PartyOption if the party&#x2019;s month matches onlyThisMonth */
    public void addParty(Party p)
    {
        if (p.getMonth() == onlyThisMonth)
        {
            System.out.print("Party by " + p.getHost() + " accepted; ");
        }
        else
        {
            System.out.print("Party by " + p.getHost() + " rejected; ");
        }
    }
}
</input>
        </program>
        <p>Consider the following code segment, which appears in a class other than Party or PartyOptions.</p>
        <program language="java">
          <input>
Party p1 = new Party("Kerry", 10, 7);
Party p2 = new Party("Jules", 9, 6);

PartyOptions options = new PartyOptions(10);
p1.addToOptions(options);
p2.addToOptions(options);
</input>
        </program>
      </statement>
      <choices>
        <choice>
          <statement id="AP5-9-3_opt_a">
            <p>Party by Kerry rejected; Party by Jules rejected;</p>
          </statement>
          <feedback id="AP5-9-3_opt_a">
            <p>Kerry&#x2019;s party should be accepted because it is in the 10th month.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-9-3_opt_b">
            <p>Party by Kerry rejected; Party by Jules accepted;</p>
          </statement>
          <feedback id="AP5-9-3_opt_b">
            <p>Kerry&#x2019;s party should be accepted because it is in the 10th month. Jules&#x2019; party should be rejected because it is not in the 10th month.</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement id="AP5-9-3_opt_c">
            <p>Party by Kerry accepted; Party by Jules rejected;</p>
          </statement>
          <feedback id="AP5-9-3_opt_c">
            <p>Kerry&#x2019;s party is accepted because it is in the 10th month, and Jules&#x2019; party is not.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="AP5-9-3_opt_d">
            <p>Party by Kerry accepted; Party by Jules accepted;</p>
          </statement>
          <feedback id="AP5-9-3_opt_d">
            <p>Jules&#x2019; party should be rejected because it is not in the 10th month.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
  </exercises>
</section>

<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="topic-parsons-practice">
        <title>Mixed Up Code Practice</title>
        <p>Try to solve each of the following. Click the <em>Check Me</em> button to check each solution.  You will be told if your solution is too short, has a block in the wrong order, or you are using the wrong block.  Some of the problems have an extra block or two that aren’t needed in the correct solution.  Try to solve these on your phone or other mobile device!</p>
<exercise label="ch7ex1muc" numbered="yes" adaptive="yes" indentation="hide" language="java"><statement>
        <p>The following program segment should define a <c>Dog</c> class with a constructor that takes one parameter, <c>name</c>, and sets the value of the Dog’s private <c>name</c> attribute to that. There should also be a <c>getName</c> method which returns the <c>name</c> attribute of the <c>Dog</c> object. But the blocks have been mixed up and include pairs of lines where one is unneeded. Drag the necessary code from the left to the right and put them in order so that the code would work correctly. Click the Check button to check your solution.</p>
</statement>
<blocks><block order="7">
<cline>public class Dog</cline>
<cline>{</cline>
</block><block order="8">
<choice correct="yes"><cline>  private String name;</cline>
</choice><choice><cline>  public String name; : Instance variables should be encapsulated</cline>
</choice></block><block order="6">
<choice correct="yes"><cline>  public Dog(String name)</cline>
<cline>  {</cline>
</choice><choice><cline>  public Dog Dog(String name)</cline>
<cline>  { : Constructors never have a return type</cline>
</choice></block><block order="3">
<cline>    this.name = name;</cline>
</block><block order="4">
<cline>  } // end constructor</cline>
<cline>  public String getName()</cline>
<cline>  {</cline>
</block><block order="5">
<cline>    return this.name;</cline>
</block><block order="9">
<cline>  } // end getName</cline>
<cline>} //end class</cline>
</block></blocks></exercise><exercise label="ch7ex2muc" numbered="yes" adaptive="yes" indentation="hide" language="java"><statement>
        <p>The following program segment should define a <c>Dog</c> class with a constructor that takes two parameters: <c>name</c> (a String) and <c>age</c> (an integer). These parameters should be saved in correspondingly-named private instance variables. But the blocks have been mixed up and include pairs of lines where one is unneeded. Drag the necessary code from the left to the right and put them in order so that the code would work correctly. Click the Check button to check your solution.</p>
</statement>
<blocks><block order="4">
<choice correct="yes"><cline>public class Dog</cline>
<cline>{</cline>
</choice><choice><cline>public class Dog : Curly braces are required when declaring a class</cline>
</choice></block><block order="1">
<cline>  private String name;</cline>
<cline>  private int age;</cline>
</block><block order="3">
<choice correct="yes"><cline>  public Dog(String name, int age)</cline>
<cline>  {</cline>
</choice><choice><cline>  public Dog(name, age)</cline>
<cline>  { : Methods need to specify the types for arguments</cline>
</choice></block><block order="6">
<choice correct="yes"><cline>    this.name = name;</cline>
<cline>    this.age = age;</cline>
</choice><choice><cline>    name = name;</cline>
<cline>    age = age; : When the parameter name is the same as an attribute, you MUST use "this" to refer to the attribute</cline>
</choice></block><block order="5">
<cline>  } // end constructor</cline>
<cline>} // end class</cline>
</block></blocks></exercise><exercise label="ch7ex3muc" numbered="yes" adaptive="yes" indentation="hide" language="java"><statement>
        <p>The following program segment should define a <c>Cat</c> class with a constructor that takes two parameters: <c>name</c> (a String) and <c>age</c> (an integer). These parameters should be saved in correspondingly-named private attributes of <c>Cat</c> objects. Next, there should be a <c>makeSound</c> method that prints <c>"meow"</c>. Finally, there should be a <c>toString</c> method that returns “Name: name, Age: age” (such that <c>Cat("Lucky", 10)</c>’s <c>toString</c> method would return “Name: Lucky, Age: 10”). But the blocks have been mixed up and include pairs of lines where one is unneeded. Drag the necessary code from the left to the right and put them in order so that the code would work correctly. Click the Check button to check your solution.</p>
</statement>
<blocks><block order="5">
<cline>public class Cat</cline>
<cline>{</cline>
</block><block order="3">
<cline>  private String name;</cline>
<cline>  private int age;</cline>
<cline>  public Cat(String name, int age)</cline>
<cline>  {</cline>
</block><block order="7">
<cline>    this.name = name;</cline>
<cline>    this.age = age;</cline>
</block><block order="4">
<choice correct="yes"><cline>  } // end constructor</cline>
<cline>  public void makeSound()</cline>
<cline>  {</cline>
</choice><choice><cline>  } // end constructor</cline>
<cline>  public String makeSound()</cline>
<cline>  { : When a method returns nothing, its return type should be "void"</cline>
</choice></block><block order="9">
<cline>     System.out.println("meow");</cline>
</block><block order="8">
<cline>  } // end makeSound</cline>
<cline>  public String toString()</cline>
<cline>  {</cline>
</block><block order="6">
<cline>    return "Name: " + this.name + ", Age: " + this.age;</cline>
</block><block order="2">
<cline>  } // end toString</cline>
<cline>} //end class</cline>
</block></blocks></exercise><exercise label="ch7ex4muc" numbered="yes" adaptive="yes" indentation="hide" language="java"><statement>
        <p>The following program segment should define a <c>Square</c> class with a constructor that takes one parameter: <c>length</c> (an integer). This parameter should be saved in a correspondingly-named private attribute of <c>Square</c> objects. The <c>Square</c> class should also have a variable <c>numberOfSquares</c> that tracks how many squares have been created. Finally, there should be a <c>toString</c> method which returns <c>"Length: length"</c> (such that <c>Square(10)</c>’s toString method would return <c>"Length: 10"</c>. But the blocks have been mixed up and include pairs of lines where one is unneeded. Drag the necessary code from the left to the right and put them in order so that the code would work correctly. Click the Check button to check your solution.</p>
</statement>
<blocks><block order="2">
<cline>public class Square</cline>
<cline>{</cline>
</block><block order="9">
<choice correct="yes"><cline>  public static int numberOfSquares = 0;</cline>
<cline>  private int length;</cline>
</choice><choice><cline>  private int numberOfSquares = 0;</cline>
<cline>  private int length; : When you need a variable to be accessible for every object of a class, it should be static</cline>
</choice></block><block order="5">
<cline>  public Square(int length)</cline>
<cline>  {</cline>
</block><block order="1">
<cline>    this.length = length;</cline>
<cline>    numberOfSquares++;</cline>
</block><block order="6">
<cline>  } // end constructor</cline>
</block><block order="8">
<cline>  public String toString()</cline>
<cline>  {</cline>
</block><block order="7">
<cline>    return "Length: " + this.length;</cline>
</block><block order="3">
<cline>  } // end toString</cline>
<cline>} //end class</cline>
</block></blocks></exercise><exercise label="ch7ex5muc" numbered="yes" adaptive="yes" indentation="hide" language="java"><statement>
        <p>The following program segment should define a <c>Rectangle</c> class with a constructor that can take zero or two integer parameters. With zero arguments passed, the <c>Rectangle</c> should be initialized with a <c>length</c> of 10 and a <c>width</c> of 10. With two integers passed, the <c>Rectangle</c> should have a <c>length</c> equal to argument1 and a <c>width</c> equal to argument2. There should also be an <c>getArea</c> method that returns the area <c>length</c> times <c>width</c>. But the blocks have been mixed up and include pairs of lines where one is unneeded. Drag the necessary code from the left to the right and put them in order so that the code would work correctly. Click the Check button to check your solution.</p>
</statement>
<blocks><block order="5">
<cline>public class Rectangle</cline>
<cline>{</cline>
</block><block order="1">
<cline>  private int length;</cline>
<cline>  private int width;</cline>
<cline>  public Rectangle()</cline>
<cline>  {</cline>
</block><block order="4">
<cline>    this.length = 10;</cline>
<cline>    this.width = 10;</cline>
</block><block order="3">
<cline>  } // end zero-argument constructor</cline>
<cline>  public Rectangle(int length, int width)</cline>
<cline>  {</cline>
</block><block order="2">
<cline>    this.length = length;</cline>
<cline>    this.width = width;</cline>
</block><block order="7">
<cline>  } // end two-argument constructor</cline>
<cline>  public int getArea()</cline>
<cline>  {</cline>
</block><block order="6">
<cline>    return this.length * this.width;</cline>
</block><block order="8">
<cline>  } // end getArea</cline>
<cline>} // end class</cline>
</block></blocks></exercise><exercise label="ch7ex6muc" numbered="yes" adaptive="yes" indentation="hide" language="java"><statement>
        <p>The following program should define a <c>CelestialBody</c> class. The class should have two instance variables: <c>orbitLength</c> and <c>daysSinceDiscovered</c>. The <c>orbitLength</c> variable should be initialized through the constructor, while <c>daysSinceDiscovered</c> should be derived from <c>orbitLength</c> and the <c>orbit</c> method. The <c>orbit(int numberOfTimes)</c> should add <c>orbitLength * numberOfTimes</c> to <c>daysSinceDiscovered</c> (e.g., if Planet X has done two orbits with an orbit length of 12 days, it was discovered 24 days ago. If it then orbits another three times, it was discovered 60 days ago). But the blocks have been mixed up and include pairs of lines where one is unneeded. Drag the necessary code from the left to the right and put them in order so that the code would work correctly. Click the Check button to check your solution.</p>
</statement>
<blocks><block order="6">
<cline>public class CelestialBody</cline>
<cline>{</cline>
</block><block order="7">
<cline>  private int orbitLength;</cline>
<cline>  private int daysSinceDiscovered;</cline>
</block><block order="5">
<cline>  public CelestialBody(int orbitLength)</cline>
<cline>  {</cline>
</block><block order="8">
<choice correct="yes"><cline>    this.daysSinceDiscovered = 0;</cline>
<cline>    this.orbitLength = orbitLength;</cline>
</choice><choice><cline>    this.orbitLength = orbitLength; : daysSinceDiscovered needs to be initialized</cline>
</choice></block><block order="1">
<choice correct="yes"><cline>  } // end constructor</cline>
<cline>  public void orbit(int numberOfTimes)</cline>
<cline>  {</cline>
</choice><choice><cline>  } // end constructor</cline>
<cline>  public int orbit(int numberOfTimes)</cline>
<cline>  { : A method who returns nothing should have a void return type</cline>
</choice></block><block order="9">
<cline>    this.daysSinceDiscovered += this.orbitLength * numberOfTimes;</cline>
</block><block order="3">
<cline>  } // end orbit</cline>
<cline>} // end class</cline>
</block></blocks></exercise><exercise label="ch7ex7muc" numbered="yes" adaptive="yes" indentation="hide" language="java"><statement>
        <p>The following program should define a <c>Person</c> class. Each <c>Person</c> instance should have a String <c>name</c> attribute and a integer <c>age</c> attribute. There should also be <c>getName</c> and <c>setName</c> functions. But the blocks have been mixed up and include pairs of lines where one is unneeded. Drag the necessary code from the left to the right and put them in order so that the code would work correctly. Click the Check button to check your solution.</p>
</statement>
<blocks><block order="7">
<cline>public class Person</cline>
<cline>{</cline>
</block><block order="8">
<cline>  private String name;</cline>
<cline>  private int age;</cline>
<cline>  public Person(String name, int age)</cline>
<cline>  {</cline>
</block><block order="2">
<cline>    this.name = name;</cline>
<cline>    this.age = age;</cline>
</block><block order="3">
<cline>  } // end constructor</cline>
<cline>  public String getName()</cline>
<cline>  {</cline>
</block><block order="4">
<cline>    return this.name;</cline>
</block><block order="6">
<cline>  } // end getName</cline>
<cline>  public void setName(String newName)</cline>
<cline>  {</cline>
</block><block order="5">
<cline>    this.name = newName;</cline>
</block><block order="1">
<cline>  } // end setName</cline>
<cline>} // end class</cline>
</block></blocks></exercise><exercise label="ch7ex8muc" numbered="yes" adaptive="yes" indentation="hide" language="java"><statement>
        <p>The following program should define a <c>Point</c> class. Each <c>Point</c> instance should have integer <c>x</c> and <c>y</c> attributes (there are associated <c>getX</c> and <c>getY</c> methods whose implementations aren’t shown). There should be a <c>getDistance</c> method that takes in another <c>Point</c> object as an argument and calculates the distance from this object to that one (which would be sqrt((this.x - other.x) ^ 2 + (this.y - other.y) ^ 2)). But the blocks have been mixed up and include pairs of lines where one is unneeded. Drag the necessary code from the left to the right and put them in order so that the code would work correctly. Click the Check button to check your solution.</p>
</statement>
<blocks><block order="5">
<cline>public class Point</cline>
<cline>{</cline>
</block><block order="7">
<cline>  private int x;</cline>
<cline>  private int y;</cline>
<cline>  public Point(int x, int y)</cline>
<cline>  {</cline>
</block><block order="2">
<cline>    this.x = x;</cline>
<cline>    this.y = y;</cline>
</block><block order="1">
<cline>  } // end constructor</cline>
<cline>  public double getDistance(Point other)</cline>
<cline>  {</cline>
</block><block order="3">
<choice correct="yes"><cline>    return Math.sqrt(Math.pow(this.x - other.getX(), 2) + Math.pow(this.y - other.getY(), 2));</cline>
</choice><choice><cline>    return Math.sqrt((this.x - other.getX()) ** 2 + (this.y - other.getY()) ** 2); : Exponents in java should use Math.pow</cline>
</choice></block><block order="4">
<cline>  } // end getDistance</cline>
<cline>} // end class</cline>
</block></blocks></exercise><exercise label="ch7ex9muc" numbered="yes" adaptive="yes" indentation="hide" language="java"><statement>
        <p>The following program should define an <c>Account</c> class. Each <c>Account</c> instance should have integer <c>balance</c> and String <c>owner</c> attributes (and the constructor should take those in that order). To decrease <c>balance</c>, there should be a <c>withdraw</c> method that takes in an integer argument and subtracts that from <c>balance</c>. However, if <c>balance</c> would end as a negative number, it should just be set to zero. But the blocks have been mixed up and include pairs of lines where one is unneeded. Drag the necessary code from the left to the right and put them in order so that the code would work correctly. Click the Check button to check your solution.</p>
</statement>
<blocks><block order="3">
<cline>public class Account</cline>
<cline>{</cline>
</block><block order="5">
<cline>  private int balance;</cline>
<cline>  private String owner;</cline>
<cline>  public Account(int balance, String owner)</cline>
<cline>  {</cline>
</block><block order="9">
<cline>    this.balance = balance;</cline>
<cline>    this.owner = owner;</cline>
</block><block order="10">
<cline>  } // end constructor</cline>
<cline>  public void withdraw(int amount)</cline>
<cline>  {</cline>
</block><block order="1">
<cline>    if (amount &gt; this.balance)</cline>
<cline>    {</cline>
</block><block order="4">
<cline>      this.balance = 0;</cline>
</block><block order="7">
<cline>    } // end if</cline>
<cline>    else {</cline>
</block><block order="2">
<cline>      this.balance -= amount;</cline>
</block><block order="8">
<cline>    } // end else</cline>
</block><block order="6">
<cline>  } // end withdraw</cline>
<cline>} // end class</cline>
</block></blocks></exercise><exercise label="ch7ex10muc" numbered="yes" adaptive="yes" indentation="hide" language="java"><statement>
        <p>The following program should define a <c>Character</c> class. Each <c>Character</c> instance should have a integer <c>healthPoints</c> attribute and a String <c>name</c> attribute. There is a constructor and <c>getHP</c>, <c>setHP</c>, and <c>getName</c> methods that are not shown. Finally, there needs to be a <c>fight(Character other)</c> method that lets a character fight another. If the character’s <c>healthPoints</c> are the same or more than <c>other</c>’s, <c>other</c>’s HP should be set to zero, the current character’s HP should be set to the difference, and the program should print “{the character’s name} wins”. If <c>other</c>’s HP is greater, the current character’s HP should be set to zero, <c>other</c>’s HP should be set to the difference, and the program should print “{other’s name} wins”. But the blocks have been mixed up and include pairs of lines where one is unneeded. Drag the necessary code from the left to the right and put them in order so that the code would work correctly. Click the Check button to check your solution.</p>
</statement>
<blocks><block order="7">
<cline>public class Character</cline>
<cline>{</cline>
</block><block order="10">
<cline>  // instance variables, constructor, &amp; getter/setters not shown</cline>
</block><block order="1">
<cline>  public void fight(Character other)</cline>
<cline>  {</cline>
</block><block order="2">
<cline>    if (this.getHP() &gt;= other.getHP())</cline>
<cline>    {</cline>
</block><block order="6">
<cline>    this.setHP(this.getHP() - other.getHP());</cline>
<cline>    other.setHP(0);</cline>
<cline>    System.out.println(this.getName() + " wins");</cline>
</block><block order="9">
<cline>    } // end if</cline>
</block><block order="5">
<cline>    else</cline>
<cline>    {</cline>
</block><block order="4">
<cline>      other.setHP(other.getHP() - this.getHP());</cline>
<cline>      this.setHP(0);</cline>
<cline>      System.out.println(other.getName() + " wins");</cline>
</block><block order="3">
<cline>    } // end else</cline>
</block><block order="8">
<cline>  } // end fight</cline>
<cline>} // end class</cline>
</block></blocks></exercise>    </section>

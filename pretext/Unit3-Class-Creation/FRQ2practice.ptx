<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="FRQ2practice">
  <title>FRQ 2 Practice with Classes</title>
  <introduction>
    <p>
      Many of the FRQs on the AP exam contain a table which shows output or
      return values from methods in a class. In these practice exercises, you
      will be given a table that shows method calls and their output. You will
      need to write a class with the described methods that will produce the
      output shown in the table. Thank you to Sam Procopio from Bishop Blanchet
      High School in Seattle, WA, for these exercises.
    </p>
  </introduction>

  <subsection xml:id="FRQ2practiceTree">
    <title>Tree Class</title>
    <p>
      Write a class called Tree that has the appropriate instance variables and
      methods to produce the output described in the table below.
    </p>

    <table>
      <tabular row-headers="yes">
        <col top="minor" />
        <col top="minor" />
        <col top="minor" />
        <row header="yes" left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">Method Calls</cell>
          <cell bottom="minor" right="minor">Output</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">Tree birch = new Tree(10, “soft”);</cell>
          <cell bottom="minor" right="minor" />
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">System.out.println(birch.getHeight());</cell>
          <cell bottom="minor" right="minor">10</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">birch.water(5);</cell>
          <cell bottom="minor" right="minor" />
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">System.out.println(birch.getHeight());</cell>
          <cell bottom="minor" right="minor">15</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">birch.cut();</cell>
          <cell bottom="minor" right="minor" />
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">System.out.println(birch.getHeight());</cell>
          <cell bottom="minor" right="minor">7</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">System.out.println(birch.woodType());</cell>
          <cell bottom="minor" right="minor">soft wood</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">Tree oak = new Tree(20, “hard”);</cell>
          <cell bottom="minor" right="minor" />
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">System.out.println(oak.getHeight());</cell>
          <cell bottom="minor" right="minor">20</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">System.out.println(oak.woodType());</cell>
          <cell bottom="minor" right="minor">hard wood</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">oak.water(2);</cell>
          <cell bottom="minor" right="minor" />
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">System.out.println(oak.getHeight());</cell>
          <cell bottom="minor" right="minor">22</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">oak.cut();</cell>
          <cell bottom="minor" right="minor" />
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">System.out.println(oak.getHeight());</cell>
          <cell bottom="minor" right="minor">14</cell>
        </row>
      </tabular>
    </table>

    <activity label="classTree">
      <statement>
        <p>
          Write the class Tree below with the appropriate instance variables,
          constructor, and methods described in main method and in the table
          above.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
  public class Tree
  {
      // write instance variable declarations here
    
    
      // write the constructor and other methods here
    
    
      public static void main(String[] args)
      {
          Tree birch = new Tree(10, "soft");
          System.out.println(birch.getHeight());
          birch.water(5); // grows tree height by 5
          System.out.println(birch.getHeight());
          birch.cut(); // cuts off 8 from height
          System.out.println(birch.getHeight());
          System.out.println(birch.woodType());
    
          Tree oak = new Tree(20, "hard");
          System.out.println(oak.getHeight());
          System.out.println(oak.woodType());
          oak.water(2); // grows tree height by 2
          System.out.println(oak.getHeight());
          oak.cut(); // cuts off 8 from height
          System.out.println(oak.getHeight());
      }
    }
    </code>
        <tests>
    import static org.junit.Assert.*;
    import org.junit.*;
    import java.io.*;    
    public class RunestoneTests extends CodeTestHelper
    {
        public RunestoneTests()
        {
            super("Tree");
        }
    
        @Test
        public void testMain()
        {
            String expected = "10\n15\n7\nsoft wood\n20\nhard wood\n22\n14\n";
            String output = getMethodOutput("main");

            boolean passed = getResults(expected, output, "Checking main method output");
            assertTrue(passed);
        }
        @Test
        public void test2()
        {          
            String results = checkConstructor(2);
    
            boolean passed = getResults("pass", results, "Checking constructor with 2 parameters");
            assertTrue(passed);
        }
    
        @Test
        public void test3()
        {
            String actual = testPrivateInstanceVariables();
            String expected = "2 Private";
    
            boolean passed = getResults(expected, actual, "Checking declaration of instance variables");
            assertTrue(passed);
        }
        @Test
        public void test4() {
          boolean passed = checkCodeContains("public water method with an int parameter", "public void water(int");
         assertTrue(passed);
        }
        @Test
        public void test5() {
          boolean passed = checkCodeContains("public cut method", "public void cut()");
         assertTrue(passed);
        }
        @Test 
        public void test6() {
          boolean passed = checkCodeContains("public woodType method that returns a String", "public String woodType()");
         assertTrue(passed);
        }
        @Test
        public void test7() {
          boolean passed = checkCodeContains("public getHeight method that returns an int", "public int getHeight()");
         assertTrue(passed);
        }
      }
            </tests>
      </program>
    </activity>
  </subsection>

  <subsection xml:id="FRQ2practiceBook">
    <title>Book Class</title>
    <p>
      Based on the table below, write a complete class called Book that has the
      appropriate instance variables and methods to produce the output described
      in the table.
    </p>

    <table>
      <tabular row-headers="yes">
        <col top="minor" />
        <col top="minor" />
        <col top="minor" />
        <row header="yes" left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">Method Calls</cell>
          <cell bottom="minor" right="minor">Output</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">Book hp = new Book(“Harry Potter”, 150, true);</cell>
          <cell bottom="minor" right="minor" />
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">System.out.println(hp.getNumPages());</cell>
          <cell bottom="minor" right="minor">150</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">System.out.println(hp.getName());</cell>
          <cell bottom="minor" right="minor">Harry Potter</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">System.out.println(hp.isHardCover());</cell>
          <cell bottom="minor" right="minor">true</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">System.out.println(hp.getDamages());</cell>
          <cell bottom="minor" right="minor">0</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">System.out.println(hp.repairBook());</cell>
          <cell bottom="minor" right="minor">false</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">hp.addDamages(49);</cell>
          <cell bottom="minor" right="minor" />
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">System.out.println(hp.getDamages());</cell>
          <cell bottom="minor" right="minor">49</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">System.out.println(hp.repairBook());</cell>
          <cell bottom="minor" right="minor">false</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">hp.addDamages(1);</cell>
          <cell bottom="minor" right="minor" />
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">System.out.println(hp.getDamages());</cell>
          <cell bottom="minor" right="minor">50</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor" />
          <cell bottom="minor" right="minor">System.out.println(hp.repairBook());</cell>
          <cell bottom="minor" right="minor">true</cell>
        </row>
      </tabular>
    </table>

    <activity label="classBook">
      <statement>
        <p>
          Write the class Book below with the appropriate instance variables,
          constructor, and methods described in main method and in the table
          above.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
  public class Book
  {
      // write instance variable declarations here
     
      // write the constructor and other methods here
     
      public static void main(String[] args)
      {
          Book hp = new Book("Harry Potter", 150, true);
          System.out.println(hp.getNumPages());
          System.out.println(hp.getName());
          System.out.println(hp.isHardCover());
          System.out.println(hp.getDamages());
          System.out.println(hp.repairBook()); // should be false
    
          hp.addDamages(49);
          System.out.println(hp.getDamages());
          System.out.println(hp.repairBook()); // should be false
    
          hp.addDamages(1);
          System.out.println(hp.getDamages());
          System.out.println(hp.repairBook()); // should be true
      }
    }
    </code>
        <tests>
    import static org.junit.Assert.*;
    import org.junit.*;
    import java.io.*;
    public class RunestoneTests extends CodeTestHelper
    {
        public RunestoneTests()
        {
            super("Book");
        }
    
        @Test
        public void testMain()
        {
            String expected = "150\nHarry Potter\ntrue\n0\nfalse\n49\nfalse\n50\ntrue\n";
            String output = getMethodOutput("main");

            boolean passed = getResults(expected, output, "Checking main method output");
            assertTrue(passed);
        }
        @Test
        public void test2()
        {          
            String results = checkConstructor(3);
    
            boolean passed = getResults("pass", results, "Checking constructor with 3 parameters");
            assertTrue(passed);
        }
    
        @Test
        public void test3()
        {  
            String expect = "3 Private";
            String output = testPrivateInstanceVariables();
            boolean passed = false;
            if (Integer.parseInt(expect.substring(0, 1)) &lt;= Integer.parseInt(output.substring(0, 1)))
                passed = true;
            passed = getResults(expect, output, "Checking private instance variables", passed);
            assertTrue(passed);
        }
        @Test
        public void test4() {
          boolean passed = checkCodeContains("public addDamages method with an int parameter", "public void addDamages(int");
         assertTrue(passed);
        }
        @Test
        public void test5() {
          boolean passed = checkCodeContains("public repairBook method that returns a boolean", "public boolean repairBook()");
         assertTrue(passed);
        }
        @Test
        public void test6() {
          boolean passed = checkCodeContains("public getNumPages method that returns an int", "public int getNumPages()");
         assertTrue(passed);
        }
      }
            </tests>
      </program>
    </activity>
  </subsection>

  <subsection xml:id="FRQ2practicePresent">
    <title>Present Class</title>
    <p>
      Write a class called Present that describes a gift for an occasion. Use
      the method calls in the main method below to create the appropriate
      instance variables and methods for the Present class.
    </p>

    <program language="java">
      <code>
    public static void main(String[] args)
    {
        //creates a Present object
        Present gift = new Present("Birthday", 29.99, "Legos");

        //prints out the gift name and cost 
        System.out.println("The gift is " + gift.getName() 
                  + ", and it costs $" + gift.getPrice() );
        
        // prints out the reaction "Wow!"
        System.out.println("The reaction when opening the gift was " 
                + gift.reaction() ); 
        // Prints out "Purchased at local store"
        gift.purchasedAt("local store");
    } 
}
</code>
    </program>

    <activity label="classPresent">
      <statement>
        <p>
          Write the class Present below with the appropriate instance variables,
          constructor, and methods described in main method.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class Present
{
    // Write the instance variables here

    // Write the constructor here

    // Write the methods here
  
  
    public static void main(String[] args)
    {
        //creates a Present object
        Present gift = new Present("Birthday", 29.99, "Legos");

        //prints out the gift name and cost
        System.out.println("The gift is " + gift.getName() 
                  + ", and it costs $" + gift.getPrice() );
        
        // prints out the reaction "Wow!"
        System.out.println("The reaction when opening the gift was " 
                + gift.reaction() ); 
        // Prints out "Purchased at local store"
        gift.purchasedAt("local store");
    } 
}
</code>
        <tests>
    import static org.junit.Assert.*; 
    import org.junit.*;
    import java.io.*;
    public class RunestoneTests extends CodeTestHelper
    {
        public RunestoneTests()
        {
            super("Present");
        }
    
        @Test
        public void testMain()
        {
            String expected = "The gift is Legos, and it costs $29.99\nThe reaction when opening the gift was Wow!\nPurchased at local store\n";
            String output = getMethodOutput("main");

            boolean passed = getResults(expected, output, "Checking main method output", true);
            assertTrue(passed);
        }
        @Test
        public void test2()
        {          
            String results = checkConstructor(3);
    
            boolean passed = getResults("pass", results, "Checking constructor with 3 parameters");
            assertTrue(passed);
        }
    
        @Test
        public void test3()
        {
            String expect = "2 Private";
            String output = testPrivateInstanceVariables();
            boolean passed = false;
            if (Integer.parseInt(expect.substring(0, 1)) &lt;= Integer.parseInt(output.substring(0, 1)))
                passed = true;
            passed = getResults(expect, output, "Checking private instance variable(s)", passed);
            assertTrue(passed);
        }
        @Test
        public void test4() {
          boolean passed = checkCodeContains("public getName method that returns a String", "public String getName()");
         assertTrue(passed);
        }
        @Test
        public void test5() {
          boolean passed = checkCodeContains("public getPrice method that returns a double", "public double getPrice()");
         assertTrue(passed);
        }
        @Test
        public void test6() {
          boolean passed = checkCodeContains("public reaction method that returns a String", "public String reaction()");
         assertTrue(passed);
        }
        @Test
        public void test7() {
          boolean passed = checkCodeContains("public purchasedAt method with a String parameter", "public void purchasedAt(String");
         assertTrue(passed);
        }
      }
            </tests>
      </program>
    </activity>
  </subsection>
</section>


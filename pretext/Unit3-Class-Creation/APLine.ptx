<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section xml:id="UNIQUE-ID-001710">
  <title>Free Response Question - APLine</title>
  <introduction>
    <p xml:id="UNIQUE-ID-001711">The following is a free response question from 2010.  It was question 2 on the exam.  You can see all the free response questions from past exams at <url href="https://apstudents.collegeboard.org/courses/ap-computer-science-a/free-response-questions-by-year" visual="https://apstudents.collegeboard.org/courses/ap-computer-science-a/free-response-questions-by-year">https://apstudents.collegeboard.org/courses/ap-computer-science-a/free-response-questions-by-year</url>.</p>
    <p><term>Question 2.</term>  An <title_reference>APLine</title_reference> is a line defined by the equation <c>ax + by + c = 0</c>,where <c>a</c> is not equal to zero, <c>b</c> is not equal to
            zero, and <c>a</c>, <c>b</c>, and <c>c</c> are all integers. The slope of an <title_reference>APLine</title_reference> is defined to be the double value <c>-a / b</c> . A point (represented by integers <c>x</c> and <c>y</c>) is on an <title_reference>APLine</title_reference> if the equation of the <title_reference>APLine</title_reference> is satisfied when those <c>x</c> and <c>y</c> values are substituted into the equation. That is, a point represented by <c>x</c> and <c>y</c> is on the line if
            <c>ax + by + c</c> is equal to 0. Examples of two <title_reference>APLine</title_reference> equations are shown in the following table.</p>
    <figure align="center" xml:id="UNIQUE-ID-001712">
      <image source="Unit3-Class-Creation/Figures/apLineTable.png" width="NaN%"/>
    </figure>
    <p>Assume that the following code segment appears in a class other than <title_reference>APLine</title_reference>. The code segment shows an example of using the <title_reference>APLine</title_reference> class to represent the two equations shown in the table.</p>
    <program language="java">
      <input>
APLine line1 = new APLine(5, 4, -17);
double slope1 = line1.getSlope();        // slope1 is assigned -1.25
boolean onLine1 = line1.isOnLine(5, -2); // true because 5(5) + 4(-2) + (-17) = 0

APLine line2 = new APLine(-25, 40, 30);
double slope2 = line2.getSlope();        // slope2 is assigned 0.625
boolean onLine2 = line2.isOnLine(5, -2); // false because -25(5) + 40(-2) + 30 != 0
</input>
    </program>
  </introduction>
  <subsection xml:id="UNIQUE-ID-001713">
    <title>Try and Solve It</title>
    <p>Write the <title_reference>APLine</title_reference> class. Your implementation must include a constructor that has three integer parameters that represent <c>a</c>, <c>b</c>, and <c>c</c>, in that order.
                You may assume that the values of the parameters representing <c>a</c> and <c>b</c> are not zero.</p>
    <p>It must also include a method <c>getSlope()</c> that calculates and returns the slope of the line (using the equation <c>-a / b</c>) and a method <c>isOnLine(x, y)</c> that returns <c>true</c> if the point represented by its two parameters (<c>x</c> and <c>y</c>, in that order) is on the <c>APLine</c> and returns <c>false</c> otherwise, by testing  if
                <c>ax + by + c</c> is equal to 0.</p>
    <p>Your class must produce the indicated results when the main method below is run. You may ignore any issues related to integer overflow.</p>
    <exercise label="APLineFRQ">
      <statement>
        <p>Write a class APLine with instance variables, a constructor with 3 paramaters for a, b, c, and the methods getSlope() and isOnLine(x,y).</p>
      </statement>
      <program xml:id="UNIQUE-ID-001714" interactive="activecode" language="java">
        <input>
// Declare the APLine class

{
 /** Declare instance variables */

 /** Constructor with 3 int parameters. */

 /** method getSlope(): Determine the slope of this APLine. */

 /** method isOnLine(x,y): Determine if coordinates (x,y) represent a point on this APLine. */

 /** Test with this main method */
 public static void main(String[] args)
 {
     APLine line1 = new APLine(5, 4, -17);
     double slope1 = line1.getSlope(); // slope1 is assigned -1.25
     boolean onLine1 = line1.isOnLine(5, -2); // true because 5(5) + 4(-2) + (-17) = 0

     APLine line2 = new APLine(-25, 40, 30);
     double slope2 = line2.getSlope(); // slope2 is assigned 0.625
     boolean onLine2 = line2.isOnLine(5, -2); // false because -25(5) + 40(-2) + 30 != 0
     // Should print out true and false
     System.out.println(onLine1 + " " + onLine2);
  }
}
        </input>
        <tests>
// Test Code for Lesson 5.15 - FRQ - APLine
import static org.junit.Assert.*;

import org.junit.Test;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("APLine");
        // This sets default values for when objects are instantiated
        Object[] values = new Object[] {3, 2, -6};
        setDefaultValues(values);
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = " true false";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }

    @Test
    public void testConstructor()
    {
        String output = checkConstructor(3);
        String expect = "pass";

        boolean passed = getResults(expect, output, "Checking constructor with 3 parameters");
        assertTrue(passed);
    }

    @Test
    public void testGetSlope() throws IOException
    {
        double output = Double.parseDouble(getMethodOutput("getSlope"));
        double expect = -1.5;

        boolean passed = getResults(expect, output, "Checking method getSlope()");
        assertTrue(passed);
    }

    @Test
    public void testIsOnLine1() throws IOException
    {
        Object[] args = {2, 0};
        String output = getMethodOutput("isOnLine", args);
        String expect = "true";

        boolean passed = getResults(expect, output, "Checking method isOnLine(5, -2)");
        assertTrue(passed);
    }

    @Test
    public void testIsOnLine2() throws IOException
    {
        Object[] args = {5, -2};
        String output = getMethodOutput("isOnLine", args);
        String expect = "false";

        boolean passed = getResults(expect, output, "Checking method isOnLine(5, -2)");
        assertTrue(passed);
    }

    @Test
    public void testPrivateVariables()
    {
        String expect = "3 Private";
        // Will produce a printout with number of private and public variables
        String output = testPrivateInstanceVariables();

        boolean passed = getResults("3 Private", output, "Checking Instance Variable(s)");

        assertTrue(passed);
    }
}
</tests>
      </program>
    </exercise>
  </subsection>
</section>

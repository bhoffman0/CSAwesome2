<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="unit3-test">
        <title>Unit 3 Test</title>
        <p>The following questions are similar to what you might see on the AP CSA exam.  You may only take this test once while logged in. There are no time limits, but it will keep track of how much time you take. Click on the finish button after you have answered all the questions, and the number correct and feedback on the answers will be displayed.</p>
        <p>We estimate that a score of about 50% on this test would correspond to the passing grade of 3 on the AP exam, a score of 65% to a 4, and a score of 80% and above to a 5 on the AP exam. These are just estimates and may not correspond to individual scores.</p>
        

    <exercise label="u3_1">
        <statement>

            <p> Consider the following <c>Cat</c> class that has an <c>age</c> attribute of type int. The <c>getAge</c> method is intended to allow methods in other classes to access a Cat objectâ€™s age value; however, it does not work as intended. Which of the following best explains why the <c>getAge</c> method does NOT work as intended?</p>
            <program language="java"><code>
public class Cat
{
    private int age;

    public Cat(int a)
    {
        age = a;
    }

    public int getAge()
    {
        return a;
    }
}
</code></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>The ``getAge()`` method should be declared as private.</p>
                </statement>
                <feedback>
                    <p>The method should be public so it can be accessed outside of the class.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The return type of the ``getAge()`` method should be void.</p>
                </statement>
                <feedback>
                    <p>The method's return type should be int.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The ``getAge()`` method should have at least one parameter.</p>
                </statement>
                <feedback>
                    <p>The getAge method should not take any parameters.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The variable ``age`` is not declared inside the ``getAge()`` method.</p>
                </statement>
                <feedback>
                    <p>This is an instance variable and should be declared outside of the method.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>The instance variable ``age`` should be returned instead of a, which is local to the constructor.</p>
                </statement>
                <feedback>
                    <p>Correct! The accessor method getAge should return the instance variable age.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="u3_2">
        <statement>

            <p> Which of the following statements are TRUE about local variables?</p>
            <p><ol marker="I">
                <li>
                    <p>Local variables can be declared in the body of constructors and methods.</p>
                </li>
                <li>
                    <p>Local variables may only be used within the constructor or method and cannot be declared to be public or private.</p>
                </li>
                <li>
                    <p>When there is a local variable with the same name as an instance variable, the variable name will refer to the local variable instead of the instance variable.</p>
                </li>
            </ol></p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>I only</p>
                </statement>
                <feedback>
                    <p>It's true that the local variables can be declared in the body of constructors and methods, but there are other options that are also true about local variables.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>I and II only</p>
                </statement>
                <feedback>
                    <p>Both I and II are true but III is also true regarding local variables.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>I and III only</p>
                </statement>
                <feedback>
                    <p>Both I and III are true but II is also true regarding local variables.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>I, II, and III</p>
                </statement>
                <feedback>
                    <p>Correct! All of the above are true.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>II and III only</p>
                </statement>
                <feedback>
                    <p>Both of these are true but I is also true.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="u3_3">
        <statement>

            <p> Which of the following statements are TRUE about <term>static</term> methods?</p>
            <p><ol marker="I">
                <li>
                    <p>Static methods and variables include the keyword static before their name in the header or declaration and can be public or private.</p>
                </li>
                <li>
                    <p>Static methods can access or change the values of instance variables.</p>
                </li>
                <li>
                    <p>Static methods are associated with the class, not objects of the class.</p>
                </li>
            </ol></p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>I and II only</p>
                </statement>
                <feedback>
                    <p>Static methods cannot acccess instance variables. They can only access static variables.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>I, II, and III</p>
                </statement>
                <feedback>
                    <p>Static methods cannot acccess instance variables. They can only access static variables.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>I and III only</p>
                </statement>
                <feedback>
                    <p>Correct! I and III are true, but static methods cannot acccess instance variables. They can only access static variables.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>I only</p>
                </statement>
                <feedback>
                    <p>I is true, but there is another option that is true too.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>III only</p>
                </statement>
                <feedback>
                    <p>III is true, but there is another option that is true too.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="u3_4">
        <statement>

            <p> Consider the following declaration for a class that will be used to represent points in time.  Which of these options correctly implement <c>addMinutes()</c>?</p>
            <program language="java"><code>
public class Timer
{
   private int hours; // number of hours
   private int minutes; // 0 &lt;= minutes &lt; 60

   void addHours(int addition)
   {
      hours = hours + addition;
   }

   /** addMinutes adds the given argument to the time stored in hours and minutes.
   The argument additionMinutes is between 0 and 119.  **/
   void addMinutes(int additionMinutes)
   {
      // implementation not shown
   }

   // ... other methods not shown
}


//Proposed Implementations:
I.   public void addMinutes(int additionMinutes)
     {
         minutes = minutes + additionMinutes;
     }
II.  public void addMinutes(int additionMinutes)
     {
         minutes += additionMinutes;
         if (minutes &gt;= 60)
         {
            hours += minutes / 60;
            minutes = minutes % 60;
         }
     }
III. public void addMinutes(int additionMinutes)
     {
         minutes += additionMinutes;
         while (minutes &gt;= 60)
         {
            hours++;
            minutes -= 60;
         }
     }
IV.  public void addMinutes(int additionMinutes)
     {
         if (additionMinutes + minutes &gt;= 60)
         {
            minutes = additionMinutes + minutes - 60;
            hours += 1;
         }
     }
</code></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>I only</p>
                </statement>
                <feedback>
                    <p>This implementation of ``addMinutes`` does not account for values of additionMinutes that push the minute count above 60.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>II only</p>
                </statement>
                <feedback>
                    <p>Implementation II works, but implementation III also works.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>IV only</p>
                </statement>
                <feedback>
                    <p>Implementation IV does not work for situations where additionMinutes + minutes does not go above 60.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>II and III</p>
                </statement>
                <feedback>
                    <p>Correct!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>I, II, and III</p>
                </statement>
                <feedback>
                    <p>Implementations II and III are correct, but implementation I is not. Implementation I does not account for values of additionMinutes that push the minute account above 60.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="u3_5">
        <statement>

            <p> What does the method <c>mystery</c> do?</p>
            <program language="java"><code>
public void mystery(String tester)
{
   for (int i = tester.length() - 1; i &gt;= 0; i--)
   {
      System.out.print(tester.substring(i,i+1));
   }
   System.out.println("");
}
</code></program>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>Prints the string in reverse order</p>
                </statement>
                <feedback>
                    <p>Correct! This method prints the reversed string.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Deletes the second half of the string</p>
                </statement>
                <feedback>
                    <p>Incorrect, this method prints the parameter reversed.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Prints string normally</p>
                </statement>
                <feedback>
                    <p>Incorrect, this method prints the parameter reversed.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Compile-time error occurs</p>
                </statement>
                <feedback>
                    <p>Incorrect, this method prints the parameter reversed.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Prints alternating characters from beginning and end of the string.</p>
                </statement>
                <feedback>
                    <p>Incorrect, this method prints the parameter reversed.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="u3_6">
        <statement>

            <p> Which of the following code segments correctly creates an instance of a new <c>Party</c> object?</p>
            <program language="java"><code>
public class Party
{

   private int numInvited;
   private boolean partyCancelled;

   public Party()
   {
      numInvited = 1;
      partyCancelled = false;
   }

   public Party(int invites)
   {
      numInvited = invites;
      partyCancelled = false;
   }
}

I.   Party myParty;
II.  int classSize = 20;
     Party ourParty = new Party(classSize);
III. int numOfFriends = 6;
     Party yourParty = new Party(numOfFriends + 3.0);
</code></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>I only</p>
                </statement>
                <feedback>
                    <p>I contains incorrect syntax. Try again!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>I and II</p>
                </statement>
                <feedback>
                    <p>I contains incorrect syntax. Try again!</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>II only</p>
                </statement>
                <feedback>
                    <p>Correct! II is the only correct option.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>II and III</p>
                </statement>
                <feedback>
                    <p>III is incorrect due to a problem with the constructor argument. Try again!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>I, II, and III</p>
                </statement>
                <feedback>
                    <p>Two of these options are incorrect. Take a closer look at the syntax of I and parameters of III.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="u3_7">
        <statement>

            <p> Consider the following class, which uses the instance variable dollars to represent the money in a wallet in dollars.</p>
            <program language="java"><code>
public class Wallet
{
      private double dollars;

      public double putMoneyInWallet(int amount)
      {
         /* missing code */
      }
}
</code></program>
            <p>The putMoneyInWallet method is intended to increase the dollars in the wallet by the parameter amount and then return the updated dollars in the wallet. Which of the following code segments should replace  <em>missing code</em> so that the putMoneyInWallet method will work as intended?</p>
</statement><choices><choice><statement id="u3_7_opt_a">            <program language="java"><code>
amount += dollars;
return dollars;
</code></program>
</statement><feedback id="u3_7_opt_a">
            <p>dollars should be incremented by amount.</p>
</feedback></choice><choice><statement id="u3_7_opt_b">            <program language="java"><code>
dollars = amount;
return amount;
</code></program>
</statement><feedback id="u3_7_opt_b">
            <p>dollars should be incremented by amount.</p>
</feedback></choice><choice correct="yes"><statement id="u3_7_opt_c">            <program language="java"><code>
dollars += amount;
return dollars;
</code></program>
</statement><feedback id="u3_7_opt_c">
            <p>Correct.</p>
</feedback></choice><choice><statement id="u3_7_opt_d">            <program language="java"><code>
dollars = dollars + amount;
return amount;
</code></program>
</statement><feedback id="u3_7_opt_d">
            <p>amount is returned instead of dollars.</p>
</feedback></choice><choice><statement id="u3_7_opt_e">            <program language="java"><code>
amount = dollars + amount;
return dollars;
</code></program>
</statement><feedback id="u3_7_opt_e">
            <p>dollars should be incremented by amount.</p>
</feedback></choice></choices>

    </exercise>

    <exercise label="u3_8">
        <statement>

            <p> Consider the Liquid class below.</p>
            <program language="java"><code>
public class Liquid
{
      private int currentTemp;
      private int boilingPoint;

      public Liquid(int ct, int bp)
      {
         currentTemp = ct;
         boilingPoint = bp;
      }

      public boolean isBoiling(int amount)
      {
         /* missing code */
      }
}
</code></program>
            <p>The isBoiling method is intended to return true if increasing the currentTemp by the parameter amount is greater than or equal to the boilingPoint, or otherwise return false. Which of the following code segments can replace <em>missing code</em> to ensure that the isBoiling method works as intended?</p>
            <program language="java"><code>
I.   if (currentTemp + amount &lt; boilingPoint)
      {
         return false;
      }
      else
      {
         return true;
      }
II.  if (amount &gt; currentTemp)
      {
         return false;
      }
      else
      {
         return currentTemp;
      }
III. if (amount + currentTemp &gt;= boilingPoint)
      {
         return true;
      }
      else
      {
         return false;
      }
</code></program>
</statement><choices><choice><statement id="u3_8_opt_a">            <p>I only</p>
</statement><feedback id="u3_8_opt_a">
            <p>I would work but it is not the only code that would work.</p>
</feedback></choice><choice><statement id="u3_8_opt_b">            <p>II only</p>
</statement><feedback id="u3_8_opt_b">
            <p>II does not check against the boilingPoint and does not return only boolean values.</p>
</feedback></choice><choice><statement id="u3_8_opt_c">            <p>III only</p>
</statement><feedback id="u3_8_opt_c">
            <p>III would work but it is not the only code that would work.</p>
</feedback></choice><choice correct="yes"><statement id="u3_8_opt_d">            <p>I and III only.</p>
</statement><feedback id="u3_8_opt_d">
            <p>Correct!</p>
</feedback></choice><choice><statement id="u3_8_opt_e">            <p>I, II, III</p>
</statement><feedback id="u3_8_opt_e">
            <p>II does not check against the boilingPoint and does not return only boolean values.</p>
</feedback></choice></choices>

    </exercise>

    <exercise label="u3_9">
        <statement>

            <p> Consider the following class definition.</p>
            <program language="java"><code>
public class Liquid
{
    private int currentTemp;
    private int boilingPoint;

    public Liquid(int ct, int bp)
    {
        currentTemp = ct;
        boilingPoint = bp;
    }

    public void changeTemp(int newTemp)
    {
        currentTemp = newTemp;
    }

    public void increaseTemp(int howMuch)
    {
        currentTemp = newTemp + howMuch;
    }
}
</code></program>
            <p>Which of the following best explains why the class will not compile?</p>
</statement><choices><choice><statement id="u3_9_opt_a">            <p>The class is missing an accessor method.</p>
</statement><feedback id="u3_9_opt_a">
            <p>The class does not necessarily need an accessor method.</p>
</feedback></choice><choice><statement id="u3_9_opt_b">            <p>The instance variables currentTemp and boilingPoint should be  public instead of private.</p>
</statement><feedback id="u3_9_opt_b">
            <p>Instance variables are usually private.</p>
</feedback></choice><choice><statement id="u3_9_opt_c">            <p>The Liquid constructor needs a return type.</p>
</statement><feedback id="u3_9_opt_c">
            <p>Constructors do not have return types.</p>
</feedback></choice><choice><statement id="u3_9_opt_d">            <p>The Liquid class is missing a constructor.</p>
</statement><feedback id="u3_9_opt_d">
            <p>The class includes a constructor.</p>
</feedback></choice><choice correct="yes"><statement id="u3_9_opt_e">            <p>The variable newTemp is not defined in the increaseTemp method.</p>
</statement><feedback id="u3_9_opt_e">
            <p>Correct! newTemp is defined in a different method. The instance variable currentTemp should be used instead.</p>
</feedback></choice></choices>

    </exercise>

    <exercise label="u3_10">
        <statement>

            <p> Consider the following class definition for Party.  The following code segment appears in a method in a class other than Party. The code segment is intended to print the value 30, but does not print the correct value because of an error in the Party class. Which of the following best explains why the correct value isnâ€™t printed?</p>
            <program language="java"><code>
Party p = new Party(20, 15);
p.orderMoreFood(20);
p.eatFood(5);
System.out.println(p.getBoxesOfFood());

public class Party
{
    private int boxesOfFood;
    private int numOfPeople;

    public Party(int people, int foodBoxes)
    {
        numOfPeople = people;
        boxesOfFood = foodBoxes;
    }

    public void orderMoreFood(int additionalFoodBoxes)
    {
        int updatedAmountOfFood = boxesOfFood + additionalFoodBoxes;
        boxesOfFood = updatedAmountOfFood;
    }

    public int getNumOfPeople() {
        return numOfPeople;
    }

    public int getBoxesOfFood() {
        return boxesOfFood;
    }

    public void eatFood(int eatenBoxes)
    {
        boxesOfFood = updatedAmountOfFood - eatenBoxes;
    }
}
</code></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>The private variables boxesOfFood and numOfPeople are not properly initialized.</p>
                </statement>
                <feedback>
                    <p>The private variables boxesOfFood and numOfPeople are initialized by the constructor.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The private variables boxesOfFood and numOfPeople should have been declared public.</p>
                </statement>
                <feedback>
                    <p>Instance variables are usually private.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The public method getBoxesOfFood should have been declared private.</p>
                </statement>
                <feedback>
                    <p>Methods are usually public.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>The variable updatedAmountOfFood in the eatFood method is not declared in this method.</p>
                </statement>
                <feedback>
                    <p>The variable updatedAmountOfFood in the eatFood method is not declared in this method. It could be replaced by the boxesOfFood instance variable.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The variables boxesOfFood and numOfPeople in the updatedAmountOfFood method are local variables.</p>
                </statement>
                <feedback>
                    <p>The variables boxesOfFood and numOfPeople are instance variables.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="u3_11">
        <statement>

            <p> Consider the following class definitions.</p>
            <program language="java"><code>
public class Party
{
    private String partyHost;
    private int monthOfParty;
    private int partyStartTime;

    public Party(String h, int month, int startTime)
    {
        partyHost = h;
        monthOfParty = month;
        partyStartTime = startTime;
    }

    public int getMonth()
    {
        return monthOfParty;
    }

    public int getStartTime()
    {
        return partyStartTime;
    }

    public String getHost()
    {
        return partyHost;
    }

    public void addToOptions(PartyOptions o)
    {
        o.addParty(this);
    }
}

public class PartyOptions
{
    private int onlyThisMonth;

    public PartyOptions(int month)
    {
        onlyThisMonth = month;
    }

    /* A Party should only be added to this PartyOption if the partyâ€™s month matches onlyThisMonth */
    public void addParty(Party p)
    {
        if (p.getMonth() == onlyThisMonth)
        {
            System.out.print("Party by " + p.getHost() + " accepted; ");
        }
        else
        {
            System.out.print("Party by " + p.getHost() + " rejected; ");
        }
    }
}
</code></program>
            <p>Consider the following code segment, which appears in a class other than Party or PartyOptions.</p>
            <program language="java"><code>
Party p1 = new Party("Kerry", 10, 7);
Party p2 = new Party("Jules", 9, 6);

PartyOptions options = new PartyOptions(10);
p1.addToOptions(options);
p2.addToOptions(options);
</code></program>
</statement><choices><choice><statement id="u3_11_opt_a">            <p>Party by Kerry rejected; Party by Jules rejected;</p>
</statement><feedback id="u3_11_opt_a">
            <p>Kerryâ€™s party should be accepted because it is in the 10th month.</p>
</feedback></choice><choice><statement id="u3_11_opt_b">            <p>Party by Kerry rejected; Party by Jules accepted;</p>
</statement><feedback id="u3_11_opt_b">
            <p>Kerryâ€™s party should be accepted because it is in the 10th month. Julesâ€™ party should be rejected because it is not in the 10th month.</p>
</feedback></choice><choice correct="yes"><statement id="u3_11_opt_c">            <p>Party by Kerry accepted; Party by Jules rejected;</p>
</statement><feedback id="u3_11_opt_c">
            <p>Kerryâ€™s party is accepted because it is in the 10th month, and Julesâ€™ party is not.</p>
</feedback></choice><choice><statement id="u3_11_opt_d">            <p>Party by Kerry accepted; Party by Jules accepted;</p>
</statement><feedback id="u3_11_opt_d">
            <p>Julesâ€™ party should be rejected because it is not in the 10th month.</p>
</feedback></choice></choices>

    </exercise>
        
    </section>

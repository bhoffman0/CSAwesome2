<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="topic-3-7-static-vars-methods">
  <title>Class (static) Variables and Methods</title><introduction>
    
    <p>In Unit 1, we learned about methods by using the <c>Math</c> class and its many <term>static</term> methods like <c>Math.random()</c>, and we wrote our own main methods and other methods that were static. These are called <term>class methods</term> because they belong to the class and not to any object of the class.
            In this lesson, you will learn to write your own class variables and methods using the keyword <c>static</c> and compare them to instance variables and methods.</p>
  </introduction>
  <subsection>
            <title>Class Methods</title>
            <p>Class methods belong to the class and not to any object of the class. They are called with the class name and the dot operator, like <c>ClassName.methodName();</c>, for example the Math methods like <c>Math.random();</c>. There is only one copy of a class variable or method for the whole class. For example, the main method is a class (static) method because there should only be 1 main method. If the method is in the same class, you can call it with or without the class name from other static methods in the class: <c>Classname.methodName();</c> or <c>staticMethodName();</c> or even with an object of the class: <c>objectName.methodName();</c>.</p>
            <program language="java"><code>
// Calling class methods
// ClassName.methodName();
int x = Math.sqrt(9);

 // If the method is in the same class,
 // you can call it with or without the class name
 // from other static methods in the class
 ClassName.methodName();
 methodName();
</code></program>
            <p>Let’s revisit the following flowchart to compare three different ways of calling methods. Class (static) methods are called using the class name. Instance methods can only be called using an object of the class. If you are calling the instance method from the main method or from another class, you must first create an object of that class and then call its methods using <c>object.methodName()</c>. If you are calling the method from within the same class, you can just call the method using <c>methodName()</c> which will refer to the current object.</p>
            <figure align="center"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Comparing Method Calls to Static and Instance Methods</caption><image source="Unit3-Class-Creation/Figures/FlowChartCallingMethods.png" width="98%" alt="Comparing method calls to static and instance methods"/></figure>
            <p>When writing class methods, they can be public or private. The static keyword is placed right after the public/private modifier and right before the type of variables and methods in their declarations.</p>
            <program language="java"><code>
public class ClassName
{
  // static class variable
  public static type variableName;

  // static class method
  public static returnType methodName(parameters)
  {
        // implementation not shown
  }
}
</code></program>
            <p>Class (static) methods can access or change the values of class (static) variables and can call other class (static) methods. However, they cannot access or change the values of (non-static) instance variables or call (nont-static) instance methods without being passed an instance of the class via a parameter. For example, the main method which is static can call other static methods directly with or without the classname, but it cannot call instance methods without first creating an object. Try this below to see “non-static variable or method cannot be referenced from a static context” errors.</p>

<exercise label="staticmethods">
    <statement>
            <p>Note that the static method printStatic has errors in it because it cannot access the instance variables and methods. Fix the printStatic method by giving it the Person object as a parameter and using this object to call its instance variables and methods. Also fix the method call to printStatic in main to pass in the object as an argument.</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
public class Person
{
    // instance variables
    private String name;
    private String email;

    // constructor
    public Person(String initName, String initEmail)
    {
        name = initName;
        email = initEmail;
    }

    // instance method
    public void print()
    {
        System.out.println(name + ": " + email);
    }

    // static method
    public static void printStatic()
    {
        System.out.println("Static methods cannot print out non-static variables.");
        // The following lines will cause errors

        // TODO: Fix this by giving it the Person object as a parameter
        // Use the object to print out the name and call its instance methods.
        System.out.println(name);
        print();
    }

    public static void main(String[] args)
    {
        Person p = new Person("Jana", "jana@gmail.com");

        // Call p's instance method to print
        p.print();

        // Call printStatic with the class name
        // Note this has errors.
        // TODO: Fix the errors by giving it the object p as an arguments
        Person.printStatic();
    }
}
</code><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "printStatic(p)";
        boolean passed = checkCodeContains(target, target);
        assertTrue(passed);
    }
    @Test
    public void test2()
    {
        String target = "printStatic(Person";
        boolean passed = checkCodeContains(target, target);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
            <p>This example also shows how instance methods easily share data variables without the need for parameters.  Whereas, static methods cannot directly access the instance methods. They are often used for utility methods, like Math operations, that do not need access to the instance variables of an object.</p>
        </subsection>
  <subsection>
            <title>Class Variables</title>
            <p><term>Class variables</term> belong to the class, with all objects of a class sharing a single copy of the class variable. Class variables are designated with the <c>static</c> keyword before the variable type. Class variables that are designated <c>public</c> are accessed outside of the class by using the class name and the dot operator, since they are associated with a class, not objects of a class.</p>
            <p>In the following class <c>Person</c>, there is a <c>static</c> variable called <c>personCounter</c> that is incremented each time the <c>Person</c> constructor is called to initialize a new <c>Person</c> object. The static method <c>printCounter</c> prints out its value.  You can also watch how it works in the <url href="http://www.pythontutor.com/visualize.html#code=%20public%20class%20Person%20%0A%20%20%7B%0A%20%20%20%20%20//%20instance%20variables%20%0A%20%20%20%20%20private%20String%20name%3B%0A%20%20%20%20%20private%20String%20email%3B%0A%20%20%20%20%20private%20String%20phoneNumber%3B%0A%20%20%20%20%20%0A%20%20%20%20%20//%20Static%20counter%20variable%0A%20%20%20%20%20public%20static%20int%20personCounter%20%3D%200%3B%0A%20%20%20%20%20%0A%20%20%20%20%20//%20static%20method%20to%20print%20out%20counter%0A%20%20%20%20%20public%20static%20void%20printPersonCounter%28%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20System.out.println%28%22Person%20counter%3A%20%22%20%2B%20personCounter%29%3B%0A%20%20%20%20%20%7D%0A%20%20%20%20%20%0A%20%20%20%20%20//%20constructor%3A%20construct%20a%20Person%20copying%20in%20the%20data%20into%20the%20instance%20variables%0A%20%20%20%20%20public%20Person%28String%20initName,%20String%20initEmail,%20String%20initPhone%29%0A%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20name%20%3D%20initName%3B%0A%20%20%20%20%20%20%20%20email%20%3D%20initEmail%3B%0A%20%20%20%20%20%20%20%20phoneNumber%20%3D%20initPhone%3B%0A%20%20%20%20%20%20%20%20personCounter%2B%2B%3B%0A%20%20%20%20%20%7D%0A%20%20%20%20%20%0A%20%20%20%20%20//%20toString%28%29%20method%0A%20%20%20%20%20public%20String%20toString%28%29%20%0A%20%20%20%20%20%7B%20%0A%20%20%20%20%20%20%20return%20%20name%20%2B%20%22%3A%20%22%20%2B%20email%20%2B%20%22%20%22%20%2B%20phoneNumber%3B%0A%20%20%20%20%20%7D%0A%20%20%20%20%20%0A%20%20%20%20%20//%20main%20method%20for%20testing%0A%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20//%20call%20the%20constructor%20to%20create%20a%20new%20person%0A%20%20%20%20%20%20%20%20Person%20p1%20%3D%20new%20Person%28%22Sana%22,%20%22sana%40gmail.com%22,%20%22123-456-7890%22%29%3B%0A%20%20%20%20%20%20%20%20Person%20p2%20%3D%20new%20Person%28%22Jean%22,%20%22jean%40gmail.com%22,%20%22404%20899-9955%22%29%3B%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20Person.printPersonCounter%28%29%3B%0A%20%20%20%20%20%7D%0A%20%20%7D%0A%20%20&amp;cumulative=false&amp;curInstr=1&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" visual="http://www.pythontutor.com/visualize.html#code=%20public%20class%20Person%20%0A%20%20%7B%0A%20%20%20%20%20//%20instance%20variables%20%0A%20%20%20%20%20private%20String%20name%3B%0A%20%20%20%20%20private%20String%20email%3B%0A%20%20%20%20%20private%20String%20phoneNumber%3B%0A%20%20%20%20%20%0A%20%20%20%20%20//%20Static%20counter%20variable%0A%20%20%20%20%20public%20static%20int%20personCounter%20%3D%200%3B%0A%20%20%20%20%20%0A%20%20%20%20%20//%20static%20method%20to%20print%20out%20counter%0A%20%20%20%20%20public%20static%20void%20printPersonCounter%28%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20System.out.println%28%22Person%20counter%3A%20%22%20%2B%20personCounter%29%3B%0A%20%20%20%20%20%7D%0A%20%20%20%20%20%0A%20%20%20%20%20//%20constructor%3A%20construct%20a%20Person%20copying%20in%20the%20data%20into%20the%20instance%20variables%0A%20%20%20%20%20public%20Person%28String%20initName,%20String%20initEmail,%20String%20initPhone%29%0A%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20name%20%3D%20initName%3B%0A%20%20%20%20%20%20%20%20email%20%3D%20initEmail%3B%0A%20%20%20%20%20%20%20%20phoneNumber%20%3D%20initPhone%3B%0A%20%20%20%20%20%20%20%20personCounter%2B%2B%3B%0A%20%20%20%20%20%7D%0A%20%20%20%20%20%0A%20%20%20%20%20//%20toString%28%29%20method%0A%20%20%20%20%20public%20String%20toString%28%29%20%0A%20%20%20%20%20%7B%20%0A%20%20%20%20%20%20%20return%20%20name%20%2B%20%22%3A%20%22%20%2B%20email%20%2B%20%22%20%22%20%2B%20phoneNumber%3B%0A%20%20%20%20%20%7D%0A%20%20%20%20%20%0A%20%20%20%20%20//%20main%20method%20for%20testing%0A%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20//%20call%20the%20constructor%20to%20create%20a%20new%20person%0A%20%20%20%20%20%20%20%20Person%20p1%20%3D%20new%20Person%28%22Sana%22,%20%22sana%40gmail.com%22,%20%22123-456-7890%22%29%3B%0A%20%20%20%20%20%20%20%20Person%20p2%20%3D%20new%20Person%28%22Jean%22,%20%22jean%40gmail.com%22,%20%22404%20899-9955%22%29%3B%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20Person.printPersonCounter%28%29%3B%0A%20%20%20%20%20%7D%0A%20%20%7D%0A%20%20&amp;cumulative=false&amp;curInstr=1&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false">Java visualizer</url> by clicking the CodeLens button below.</p>

<exercise label="PersonClassStaticCounter">
    <statement>
            <p>What will the following code print out? Try adding another Person object and see what happens. Try the CodeLens button to run the code step by step.</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
public class Person
{
    // instance variables
    private String name;
    private String email;
    private String phoneNumber;

    // Static counter variable
    public static int personCounter = 0;

    // static method to print out counter
    public static void printPersonCounter()
    {
        System.out.println("Person counter: " + personCounter);
    }

    // constructor: construct a Person copying in the data into the instance
    // variables
    public Person(String initName, String initEmail, String initPhone)
    {
        name = initName;
        email = initEmail;
        phoneNumber = initPhone;
        personCounter++;
    }

    // toString() method
    public String toString()
    {
        return name + ": " + email + " " + phoneNumber;
    }

    // main method for testing
    public static void main(String[] args)
    {
        // call the constructor to create a new person
        Person p1 = new Person("Sana", "sana@gmail.com", "123-456-7890");
        Person p2 = new Person("Jean", "jean@gmail.com", "404 899-9955");

        Person.printPersonCounter();
    }
}

</code><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Person counter: 2";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
            <p>Another common use for static variables is the keep track of a minimum or maximum value or an average of the values in a collection of objects.</p>

    <exercise label="staticTrace">
        <statement>

            <p> Consider the class Temperature below which has a static variable. What is the output of the main method below?</p>
            <program language="java"><code>
public class Temperature
{
    private double temperature;
    public static double maxTemp = 0;

    public Temperature(double t)
    {
        temperature = t;
        if (t &gt; maxTemp)
        {
             maxTemp = t;
        }
    }

    public static void main(String[] args)
    {
        Temperature t1 = new Temperature(75);
        Temperature t2 = new Temperature(100);
        Temperature t3 = new Temperature(65);
        System.out.println("Max Temp: " + Temperature.maxTemp);
    }
}
</code></program>
</statement><choices><choice><statement id="staticTrace_opt_a">            <p>Max Temp: 0</p>
</statement><feedback id="staticTrace_opt_a">
            <p>maxTemp is changed in each call to the Temperature() constructor.</p>
</feedback></choice><choice><statement id="staticTrace_opt_b">            <p>There is a compiler error because the static variable maxTemp cannot be used inside a non-static constructor.</p>
</statement><feedback id="staticTrace_opt_b">
            <p>Non-static methods and constructors can use any instance or static variables in the class.</p>
</feedback></choice><choice correct="yes"><statement id="staticTrace_opt_c">            <p>Max Temp: 100</p>
</statement><feedback id="staticTrace_opt_c">
            <p>Yes, maxTemp is initialized to 0 and then changed to 75 and then 100 by the constructor calls.</p>
</feedback></choice><choice><statement id="staticTrace_opt_d">            <p>Max Temp: 75</p>
</statement><feedback id="staticTrace_opt_d">
            <p>maxTemp will be changed to 100 by the second constructor call since 100 &gt; 75.</p>
</feedback></choice><choice><statement id="staticTrace_opt_e">            <p>Max Temp: 65</p>
</statement><feedback id="staticTrace_opt_e">
            <p>maxTemp will not be changed to 65 by the third constructor call because 67 is not &gt; 100.</p>
</feedback></choice></choices>

    </exercise>
            <p>You can see this code in action in the <url href="http://www.pythontutor.com/visualize.html#code=public%20class%20Temperature%20%0A%7B%0A%20%20%20private%20double%20temperature%3B%0A%20%20%20public%20static%20double%20maxTemp%20%3D%200%3B%0A%20%20%20%0A%20%20%20public%20Temperature%28double%20t%29%0A%20%20%20%7B%0A%20%20%20%20%20%20%20temperature%20%3D%20t%3B%0A%20%20%20%20%20%20%20if%20%28t%20%3E%20maxTemp%29%0A%20%20%20%20%20%20%20%20%20%20%20maxTemp%20%3D%20t%3B%0A%20%20%20%7D%0A%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%7B%0A%20%20%20%20%20%20%20Temperature%20t1%20%3D%20new%20Temperature%2875%29%3B%0A%20%20%20%20%20%20%20Temperature%20t2%20%3D%20new%20Temperature%28100%29%3B%0A%20%20%20%20%20%20%20Temperature%20t3%20%3D%20new%20Temperature%2865%29%3B%0A%20%20%20%20%20%20%20System.out.println%28%22Max%20Temp%3A%20%22%20%2B%20Temperature.maxTemp%29%3B%0A%20%20%20%7D%0A%7D&amp;cumulative=false&amp;curInstr=0&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" visual="http://www.pythontutor.com/visualize.html#code=public%20class%20Temperature%20%0A%7B%0A%20%20%20private%20double%20temperature%3B%0A%20%20%20public%20static%20double%20maxTemp%20%3D%200%3B%0A%20%20%20%0A%20%20%20public%20Temperature%28double%20t%29%0A%20%20%20%7B%0A%20%20%20%20%20%20%20temperature%20%3D%20t%3B%0A%20%20%20%20%20%20%20if%20%28t%20%3E%20maxTemp%29%0A%20%20%20%20%20%20%20%20%20%20%20maxTemp%20%3D%20t%3B%0A%20%20%20%7D%0A%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%7B%0A%20%20%20%20%20%20%20Temperature%20t1%20%3D%20new%20Temperature%2875%29%3B%0A%20%20%20%20%20%20%20Temperature%20t2%20%3D%20new%20Temperature%28100%29%3B%0A%20%20%20%20%20%20%20Temperature%20t3%20%3D%20new%20Temperature%2865%29%3B%0A%20%20%20%20%20%20%20System.out.println%28%22Max%20Temp%3A%20%22%20%2B%20Temperature.maxTemp%29%3B%0A%20%20%20%7D%0A%7D&amp;cumulative=false&amp;curInstr=0&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false">Java visualizer</url>.</p>

<exercise label="TemperatureBugs">
    <statement>
            <p>Fix the bugs in the following code. Static methods should only access static variables.</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
public class Temperature
{
    private double temperature;
    public static double maxTemp = 0;

    public Temperature(double t)
    {
        temperature = t;
        if (t &gt; maxTemp)
        {
             maxTemp = t;
        }
    }
    // This static method should print out the static variable
    public static printMax()
    {
        System.out.println(temperature);
    }

    public static void main(String[] args)
    {
        Temperature t1 = new Temperature(75);
        Temperature t2 = new Temperature(100);
        Temperature.printMax();
    }
}

 </code><tests>
 import static org.junit.Assert.*;

 import org.junit.*;

 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     @Test
     public void testCodeContains1()
     {

         boolean passed =
                 checkCodeContains("static printMax() header", "public static void printMax()");
         assertTrue(passed);
     }

     @Test
     public void testCodeContains2()
     {
         String code = getCode();
         boolean passed =
                 code.contains("System.out.println(maxTemp);")
                         || code.contains("System.out.println(Temperature.maxTemp);");
         getResults("true", "" + passed, "printMax method returns the right value", passed);
         assertTrue(passed);
     }

     @Test
     public void testMain() throws IOException
     {
         String output = getMethodOutput("main");
         String expect = "100.0";
         boolean passed = getResults(expect, output, "Expected output from main", true);
         assertTrue(passed);
     }
 }
        </tests>
    </program>
</exercise>
        </subsection>
  <subsection>
            <title>final keyword</title>
            <p>The keyword <term>final</term> can be used in front of a variable declaration to make it a constant value that cannot be modified. Constants are traditionally capitalized.</p>
            <program language="java"><code>
final double PI = 3.14
</code></program>

<exercise label="finalPi">
    <statement>
            <p>Try the following code and notice the syntax error when we try to change the constant PI. Put the comment symbols // in front of that line to remove the error and run it again.</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
public class TestFinal
{
    // A static final variable for PI
    public static final double PI = 3.14;

    public static void main(String[] args)
    {
        System.out.println(PI);
        PI = 4.2; // This will cause a syntax error
    }
}
</code><tests>
// should pass if/when they run code
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "3.14";
        boolean passed =
                getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
        </subsection>
  <subsection>
            <title>Coding Challenge : Static Song and counter</title>
            <p>In Unit 1, we wrote a class with methods to print out the song <url href="https://www.youtube.com/watch?v=QPwEZ8Vv2YQ" visual="https://www.youtube.com/watch?v=QPwEZ8Vv2YQ">The Ants Go Marching</url>. Here’s the song with 3 verses, where the chorus is the last 2 lines of each verse:</p>
            <program language="java"><code>
Verse 1:
The ants go marching one by one, hurrah, hurrah
The ants go marching one by one, hurrah, hurrah
The ants go marching one by one
The little one stops to suck a thumb
And they all go marching down to the ground
To get out of the rain, BOOM! BOOM! BOOM! BOOM!

Verse 2:
The ants go marching two by two, hurrah, hurrah
The ants go marching two by two, hurrah, hurrah
The ants go marching two by two
The little one stops to tie a shoe
And they all go marching down to the ground
To get out of the rain, BOOM! BOOM! BOOM! BOOM!

Verse 3:
The ants go marching three by three, hurrah, hurrah
The ants go marching three by three, hurrah, hurrah
The ants go marching three by three
The little one stops to climb a tree
And they all go marching down to the ground
To get out of the rain, BOOM! BOOM! BOOM! BOOM!
</code></program>
            <p>Let’s create a class to print out the song with 2 methods <c>chorus()</c> and <c>verse</c>, where the verse takes 2 parameters for the numbers and the action. Notice that this is a class where there are no instance variables and we don’t really need to generate multiple objects. With students or pets, it makes sense to have multiple objects. With a class printing out a song, we can just make the methods static and have just 1 copy of them.</p>
            <p><ol marker="1">
                <li>
                    <p>Create a class called <c>Song</c> with two static methods: <c>chorus()</c> and <c>verse()</c>. The chorus method prints out the last two lines of each verse. The verse method takes two parameters, a number and an action, and prints out the verse with the number and action.</p>
                </li>
                <li>
                    <p>Add a public static variable called <term>numVerses</term> to the class that keeps track of the number of verses. Increment this variable in the method verse and print it out at the beginning of the verse.</p>
                </li>
            </ol></p>

    <program interactive="activecode" language="java">
        <code>
public class Song
{
    // Add a public static variable called numVerses

    // Add a static chorus method

    // Add a static verse method with two parameters

    public static void main(String args[])
    {
        // Print out the static variable numVerses
        // and call the static methods to print out the Song for 3 verses


    }
}

</code><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @After
    public void tearDown()
    {
        super.tearDown();
        // Song.numVerses = 0;

    }

    @Test
    public void checkCodeContains1()
    {
        // check verse 1
        boolean passed =
                checkCodeContains(
                        "verse(...) method header with two String parameters",
                        "public static void verse(String *, String *)");

        assertTrue(passed);
    }

    @Test
    public void checkCodeContains2()
    {
        // check static
        String code = getCode();
        int actual = countOccurences(code, "Song.verse(");
        String expected = "3";

        boolean passed = actual &gt;= 3;
        getResults(
                expected,
                "" + actual,
                "Checking that code contains three calls to verse(...) method using"
                    + " ClassName.staticMethod(...) syntax",
                passed);
        assertTrue(passed);
    }

    @Test
    public void checkCodeContains3()
    {
        // check static
        String code = getCode();
        int actual = countOccurences(code, "public static int numVerses = 0");
        String expected = "1";

        boolean passed = actual &gt;= 1;
        getResults(
                expected,
                "" + actual,
                "Checking that code declares variable numVerses according to instructions and sets"
                    + " it to zero",
                passed);

        assertTrue(passed);
    }

    @Test
    public void checkCodeContains4()
    {
        // check static
        String code = getCode();
        boolean increment = code.contains("numVerses++");
        String expected = "increments: true\n";
        String actual = "increments: " + increment + "\n";

        String anytext = "[\\s\\S]*";
        String regex = "System.out.print[ln]*\\([\"a-zA-Z0-9 +]*numVerses[\"a-zA-Z0-9 +]*\\);";
        boolean printed = code.matches(anytext + regex + anytext);
        expected += "prints: true";
        actual += "prints: " + printed;

        boolean passed = increment &amp;&amp; printed;
        getResults(expected, actual, "Checking that code increments and prints numVerses", passed);

        assertTrue(passed);
    }

    @Test
    public void testVerses() throws IOException
    {
        String output = getMethodOutput("main").replaceAll(" his ", " a ").replaceAll("\n\n", "\n");
        String[] actualArray = output.split("\n");

        boolean passed = true;
        String error = "";
        String expect = "No errors";
        String actual = "No errors";

        int j = 0;

        for (int i = 0; i &lt; actualArray.length; i++)
        {
            while (j &lt; expectedArray.length &amp;&amp; expectedArray[j].length() &lt; 2) j++;
            while (i &lt; expectedArray.length &amp;&amp; actualArray[i].length() &lt; 2) i++;

            if (j &lt; expectedArray.length &amp;&amp; actualArray[i].length() &gt; 1)
            {
                /*
                 * System.out.println(expectedArray[j]);
                 * System.out.println(actualArray[i]);
                 * System.out.println();
                 */
                if (actualArray[i].matches("[\\s\\S]*[0-9]+[\\s\\S]*"))
                {
                    continue;
                }

                String compAct = removeSpaces(actualArray[i].toLowerCase());
                String compExp = removeSpaces(expectedArray[j].toLowerCase());

                if (!compAct.equals(compExp))
                {
                    expect = expectedArray[j].trim();
                    actual = actualArray[i].trim() + "\n(Error on line " + (i + 1) + " of output)";
                    passed = false;
                    error =
                            "\n"
                                + "There may be more than one error! Did you forget a line?\n"
                                + "(check spelling, new lines, and punctuation carefully)";
                    break;
                }
            }

            j++;
        }

        getResults(expect, actual, "Checking output from main" + error, passed);
        assertTrue(passed);
    }

    private static String expectedOutput =
            "The ants go marching one by one, hurrah, hurrah\n"
                    + "The ants go marching one by one, hurrah, hurrah\n"
                    + "The ants go marching one by one\n"
                    + "The little one stops to suck a thumb\n"
                    + "And they all go marching down to the ground\n"
                    + "To get out of the rain, BOOM! BOOM! BOOM! BOOM!\n"
                    + "\n"
                    + "The ants go marching two by two, hurrah, hurrah\n"
                    + "The ants go marching two by two, hurrah, hurrah\n"
                    + "The ants go marching two by two\n"
                    + "The little one stops to tie a shoe\n"
                    + "And they all go marching down to the ground\n"
                    + "To get out of the rain, BOOM! BOOM! BOOM! BOOM!\n"
                    + "\n"
                    + "The ants go marching three by three, hurrah, hurrah\n"
                    + "The ants go marching three by three, hurrah, hurrah\n"
                    + "The ants go marching three by three\n"
                    + "The little one stops to climb a tree\n"
                    + "And they all go marching down to the ground\n"
                    + "To get out of the rain, BOOM! BOOM! BOOM! BOOM!";
    private static String[] expectedArray = expectedOutput.replaceAll("\n\n", "\n").split("\n");
}
        </tests>
    </program>
        </subsection>
  <subsection>
            <title>Summary</title>
            <p><ul>
                <li>
                    <p>(AP 3.7.A.1) Class methods cannot access or change the values of instance variables or call instance methods without being passed an instance of the class via a parameter.</p>
                </li>
                <li>
                    <p>(AP 3.7.A.2) Class methods can access or change the values of class variables and can call other class methods.</p>
                </li>
                <li>
                    <p>(AP 3.7.B.1) Class variables belong to the class, with all objects of a class sharing a single copy of the class variable. Class variables are designated with the <term>static</term> keyword before the variable type.</p>
                </li>
                <li>
                    <p>(AP 3.7.B.2)  Class variables that are designated <c>public</c> are accessed outside of the class by using the class name and the dot operator, since they are associated with a class, not objects of a class.</p>
                </li>
                <li>
                    <p>(AP 3.7.B.3) When a variable is declared <c>final</c>, its value cannot be modified.</p>
                </li>
            </ul></p>
        </subsection>
</section>

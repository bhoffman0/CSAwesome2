<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section xml:id="UNIQUE-ID-001680">
  <title>RandomStringChooser - Part B - 2nd time</title>
  <introduction>
    <p xml:id="UNIQUE-ID-001681"><term>Part b.</term>   The following partially completed <c>RandomLetterChooser</c> class is a subclass of the <c>RandomStringChooser</c> class.  You will write the constructor for the <c>RandomLetterChooser</c> class.</p>
    <program language="java">
      <input>
public class RandomLetterChooser extends RandomStringChooser
{
    /** Constructs a random letter chooser using the given string str.
     *  Precondition: str contains only letters.
     */
    public RandomLetterChooser (String str)
    { /* to be implemented in part (b) */ }

    /** Returns an array of single-letter strings.
     *  Each of these strings consists of a single letter from str.  Element k
     *  of the returned array contains the single letter at position k of str.
     *  For example, getSingleLetters("cat") return the
     *  array {"c", "a", "t" }.
     */
    public static String[] getSingleLetters(String str)
    {    /* implementation not shown */ }
</input>
    </program>
    <p>The following code segment shows an example of using <c>RandomLetterChooser</c>.</p>
    <program language="java">
      <input>
RandomLetterChooser letterChooser = new RandomLetterChooser("cat");
for (int k = 0; k &lt; 4; k++)
{
    System.out.print(letterChooser.getNext());
}
</input>
    </program>
    <p>The code segment will print the three letters in <c>"cat"</c> in one of the possible orders.  Because there are only three letters in the original string, the code segment prints <c>"NONE"</c> the fourth time through the loop.  One possible output is shown below.</p>
    <program language="java">
      <input>
actNONE
</input>
    </program>
    <p>Assume that the <c>RandomStringChooser</c> class that you wrote in part (a) has been implemented correctly and that
            <c>getSingleLetters</c> works as specified.  You must use <c>getSingleLetters</c> appropriately to receive full credit.</p>
    <p>Complete the <c>RandomLetterChooser</c> constructor below.  The following code block shows the construtor declaration.</p>
    <program language="java">
      <input>
/** Constructs a random letter chooser using the given string str.
 *  Precondition: str contains only letters.
 */
public RandomLetterChooser(String str)
</input>
    </program>
  </introduction>
  <subsection xml:id="UNIQUE-ID-001682">
    <title>Try and Solve It - Again</title>
    <p>Complete the <c>RandomLetterChooser</c> constructor below.</p>
    <p>The code below has a main method for testing.  Write the constructor for the <c>RandomLetterChooser</c> class and use the main method to test it.</p>
    <exercise label="RandomStrChooserB1-2">
      <statement>
        <p>Complete the <c>RandomLetterChooser</c> constructor below (which can be 1 or 2 lines of code). Copy in your RandomStringChooser class from the previous lesson (delete the public from in front of it since there can only be 1 public class if you ha</p>
      </statement>
      <program xml:id="UNIQUE-ID-001683" interactive="activecode" language="java">
        <input>

// Add in class RandomStringChooser from the previous lesson.
// Do not make it public

public class RandomLetterChooser extends RandomStringChooser
{
    /**
     * Constructs a random letter chooser using the given string str. Precondition:
     * str contains only letters.
     */
    public RandomLetterChooser(String str)
    {
        // *** write the constructor here ***!
    }

    /**
     * Returns an array of single-letter strings. Each of these strings consists of
     * a single letter from str. Element k of the returned array contains the
     * single letter at position k of str. For example, getSingleLetters("cat")
     * return the array {"c", "a", "t" }.
     */
    public static String[] getSingleLetters(String str)
    {
        String[] strArr = new String[str.length()];
        for (int i = 0; i &lt; str.length(); i++)
        {
            strArr[i] = str.substring(i, i + 1);
        }
        return strArr;
    }

    public static void main(String[] args)
    {
        RandomLetterChooser letterChooser = new RandomLetterChooser("cat");
        System.out.println(
                "This should print three letters at random from cat and then"
                    + " NONE");
        for (int k = 0; k &lt; 4; k++)
        {
            System.out.print(letterChooser.getNext());
        }
    }
}

        </input>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("RandomLetterChooser");
        // CodeTestHelper.sort = true;
    }

    @Test
    public void testMain1()
    {
        boolean passed = false;

        String expect = "This should print three letters at random from cat and then NONE\ntcaNONE";

        String output1 = getMethodOutput("main");

        expect = expect.substring(expect.indexOf("\n") + 1);
        output1 = output1.substring(output1.indexOf("\n") + 1);

        int num1 = countOccurences(output1, "c");
        int num2 = countOccurences(output1, "a");
        int num3 = countOccurences(output1, "t");
        int num5 = countOccurences(output1, "NONE");

        passed = num1 == 1 &amp;&amp; num2 == 1 &amp;&amp; num3 == 1 &amp;&amp; num5 == 1;

        getResults(
                expect,
                output1,
                "Checking that each letter is in output correct number of times",
                passed);
        assertTrue(passed);
    }

    @Test
    public void testMain2()
    {
        boolean passed = false;

        String output1 = getMethodOutput("main");
        String output2 = getMethodOutput("main");
        String output3 = getMethodOutput("main");

        passed = !output1.equals(output2) || !output2.equals(output3) || !output1.equals(output3);

        getResults(
                "Different results each time",
                "Same results each time",
                "Checking for random order",
                passed);
        assertTrue(passed);
    }
}
</tests>
      </program>
    </exercise>
  </subsection>
</section>

<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section>
  <title>Picture Lab A4: 2D Arrays in Java</title>
  <p>In this activity you will work with integer data stored in a two-dimensional array. Some programming
            languages use a one-dimensional (1D) array to represent a two-dimensional (2D) array with the data in
            either row-major or column-major order. <term>Row-major order</term> in a 1D array means that all the data for the
            first row is stored before the data for the next row in the 1D array. <term>Column-major order</term> in a 1D array
            means that all the data for the first column is stored before the data for the next column in the 1D array.
            The order matters, because you need to calculate the position in the 1D array based on the order, the
            number of rows and columns, and the current column and row numbers (indices). The rows and
            columns are numbered (indexed) and often that numbering starts at 0 as it does in Java. The top left row
            has an index of 0 and the top left column has an index of 0. The row number (index) increases from top
            to bottom and the column number (index) increases from left to right.</p>
  <figure align="center">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">A 2D array stored in row-major order or column-major order as a 1D array.</caption>
    <image source="Unit4-Data-Collections/Figures/rowMajor.png" width="45%%"/>
  </figure>
  <p>Java actually uses arrays of arrays to represent 2D arrays. This means that each element in the outer array is a reference to another array. The data can be in either row-major or column-major order.
            The AP Computer Science A course specification tells you to assume that all 2D arrays are row-major, which means that the outer array in Java represents the rows and the inner arrays represent the columns.</p>
  <figure align="center">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Java arrays of arrays</caption>
    <image source="Unit4-Data-Collections/Figures/ArrayRowsAndCols.png" width="54%%"/>
  </figure>
  <p>To loop through the values in a 2D array you must have two indexes. One index is used to change the
            row index and one is used to change the column index. You can use nested loops, which is one for
            loop inside of another, to loop through all the values in a 2D array. Let’s try some nested loops with 2D arrays.</p>
  <p>Here is the code for the <c>getTotal</c> method in the <c>IntArrayWorker</c> class that totals all the values in a 2D array of integers in
            a private instance variable (field in the class) named <c>matrix</c>. Notice the nested <c>for</c> loop and how it
            uses <c>matrix.length</c> to get the number of rows and <c>matrix[0].length</c> to get the number of
            columns. Since <c>matrix[0]</c> returns the inner array in a 2D array, you can use
            <c>matrix[0].length</c> to get the number of columns.</p>
  <program language="java">
    <input>
public int getTotal()
{
     int total = 0;
     for (int row = 0; row &lt; matrix.length; row++)
     {
          for (int col = 0; col &lt; matrix[0].length; col++)
          {
              total = total + matrix[row][col];
          }
     }
     return total;
}
</input>
  </program>
  <p>Because Java two-dimensional arrays are actually arrays of arrays, you can also get the total using nested
            for-each loops as shown in getTotalNested below. The outer loop will loop through the outer
            array (each of the rows) and the inner loop will loop through the inner array (columns in that row).
            You can use a nested for-each loop whenever you want to loop through all items in a 2D array and
            you don’t need to know the row index or column index.</p>
  <program language="java">
    <input>
public int getTotalNested()
{
     int total = 0;
     for (int[] rowArray : matrix)
     {
         for (int item : rowArray)
         {
              total = total + item;
         }
    }
    return total;
}
</input>
  </program>
  <p>1. Write a <c>getCount</c> method in the <c>IntArrayWorker</c> class that returns the count of the
            number of times a passed integer value is found in the matrix. There is already a method to test
            this in IntArrayWorkerTester.</p>
  <p>2. Write a <c>getLargest</c> method in the <c>IntArrayWorker</c> class that returns the largest value
            in the matrix. There is already a method to test this in IntArrayWorkerTester.</p>
  <p>3. Write a <c>getColTotal</c> method in the <c>IntArrayWorker</c> class that returns the total of all
            integers in a specified column. There is already a method to test this in
            IntArrayWorkerTester.</p>
  <exercises>
    <exercise label="picture-lab-A4-0a">
        <statement>

        <p> Given an array A = { 2  4  6 }, {1  3  5} how would A be stored in a 1D array in row-major order?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>[1, 2, 3, 4, 5, 6]</p>
                </statement>
                <feedback>
                    <p>Remember, row-major order means the rows are stored starting from first to last.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[2, 1, 4, 3, 6, 5]</p>
                </statement>
                <feedback>
                    <p>For row-major order, we need to store the rows which go horizontally across the array.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>[2, 4, 6, 1, 3, 5]</p>
                </statement>
                <feedback>
                    <p>Correct!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[1, 3, 5, 2, 4, 6]</p>
                </statement>
                <feedback>
                    <p>Remember, row-major order means the rows are stored starting from first to last.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="picture-lab-A4-1a">
        <statement>

        <p> Given an array A = { 2  4  6 }, {1  3  5} how would A be stored in a 1D array in column-major order?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>[1, 2, 3, 4, 5, 6]</p>
                </statement>
                <feedback>
                    <p>This answer has stored the columns, but they need to be stored from the lowest index to the highest.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>[2, 1, 4, 3, 6, 5]</p>
                </statement>
                <feedback>
                    <p>Correct</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[2, 4, 6, 1, 3, 5]</p>
                </statement>
                <feedback>
                    <p>We need to store this array in column-major order. The columns of the array are aligned vertically.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[1, 3, 5, 2, 4, 6]</p>
                </statement>
                <feedback>
                    <p>We need to store this array in column-major order. The columns of the array are aligned vertically.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="picture-lab-A4-2a">
        <statement>

        <p> Here is a mysteryMethod in the <c>IntArrayWorker</c> class that uses a private instance variable which is a 2D array
            named <c>matrix</c>. What does this method do?</p>
        <program language="Java"><input>
public int mysteryMethod() {
  int total = 0;
  for (int row = 0; row &lt; matrix.length; row++) {
     for (int col = 0; col &lt; matrix[0].length; col++) {
         total = total + matrix[row][col];
     }
  }
  return total;
}
</input></program>
</statement><choices><choice><statement id="picture-lab-A4-2a_opt_a">        <p>It sums up all the values in the matrix[0] column</p>
</statement><feedback id="picture-lab-A4-2a_opt_a">
        <p>matrix[0].length is different from just the matrix column 0, what does matrix[0].length return? How does this affect the inner loop</p>
</feedback></choice><choice><statement id="picture-lab-A4-2a_opt_b">        <p>This method sums up all the column and row indexes to find the matrix’s ‘weight’</p>
</statement><feedback id="picture-lab-A4-2a_opt_b">
        <p>This is not what the method does and matrix ‘weight’ does not exist.</p>
</feedback></choice><choice><statement id="picture-lab-A4-2a_opt_c">        <p>This method finds the number of elements in a given 2D array.</p>
</statement><feedback id="picture-lab-A4-2a_opt_c">
        <p>The number of elements would be found through multiplying the rows by the columns.</p>
</feedback></choice><choice correct="yes"><statement id="picture-lab-A4-2a_opt_d">        <p>This method finds the total of all the values in a 2D array of numbers.</p>
</statement><feedback id="picture-lab-A4-2a_opt_d">
        <p>correct!</p>
</feedback></choice></choices>

    </exercise>
    <exercise label="picture-lab-A4-3a">
        <statement>

        <p> Which of these methods correctly sum up the values in a 2D array? Assume the 2D array is called <c>matrix</c>.</p>
</statement><choices><choice><statement id="picture-lab-A4-3a_opt_a">        <program language="Java"><input>
public int getSum() {
  int total = 0;
  int i = 0;
  int j = 0;
  while (matrix.length != 0) {
     while (matrix[0].length != 0) {
         total += matrix[i][j];
         i++;
         j++;
     }
  }
}
</input></program>
</statement><feedback id="picture-lab-A4-3a_opt_a">
        <p>This method will continue forever and give an index out of bounds error.</p>
</feedback></choice><choice correct="yes"><statement id="picture-lab-A4-3a_opt_b">        <program language="Java"><input>
public int getSum() {
  int total = 0;
  for (int[] rowArray : matrix) {
     for (int item : rowArray) {
         total = total + item;
     }
  }
  return total;
}
</input></program>
</statement><feedback id="picture-lab-A4-3a_opt_b">
        <p>Correct! This uses nested for each loops to iterate through the array.</p>
</feedback></choice><choice correct="yes"><statement id="picture-lab-A4-3a_opt_c">        <program language="Java"><input>
public int getSum() {
  int total = 0;
  for (int i = 0; i &lt; matrix.length; i++) {
     for (int j = 0; j &lt; matrix[0].length; j++) {
         total = total + matrix[i][j];
     }
  }
  return total;
}
</input></program>
</statement><feedback id="picture-lab-A4-3a_opt_c">
        <p>Correct! This uses nested for loops to traverse through the matrix.</p>
</feedback></choice><choice><statement id="picture-lab-A4-3a_opt_d">        <program language="Java"><input>
public int getSum() {
   int total = 0;
   int mystery = 0;
   int row = 0;
   while (row &lt; matrix.length) {
       for (int col = 0; j &lt; matrix[0].length; i++) {
           if (row % 2 == 0) {
               total = total +  matrix[row][col];
           }
           else {
               mystery = mystery + matrix[row][col];
           }
       }
       row++;
   }
   return (total - mystery);
}
</input></program>
</statement><feedback id="picture-lab-A4-3a_opt_d">
        <p>This does not return the correct amount.</p>
</feedback></choice></choices>

    </exercise>
    <exercise label="picture-lab-A4-getCount">
    <statement>
        <p>Write a <c>getCount</c> method in the <c>IntArrayWorker</c> class that returns the count of the number of times a passed integer value is found in the matrix.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class IntArrayWorker
{
    /** two dimensional matrix */
    private int[][] matrix = null;

    /**
     * set the matrix to the passed one
     *
     * @param theMatrix the one to use
     */
    public void setMatrix(int[][] theMatrix)
    {
        matrix = theMatrix;
    }

    /** print the values in the array in rows and columns */
    public void print()
    {
        for (int row = 0; row &lt; matrix.length; row++)
        {
            for (int col = 0; col &lt; matrix[0].length; col++)
            {
                System.out.print(matrix[row][col] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    /** Method to test getCount */
    public static void testGetCount()
    {
        IntArrayWorker worker = new IntArrayWorker();
        worker.setMatrix(new int[][] { {1, 2, 1}, {2, 1, 0}});
        int count = worker.getCount(1);
        System.out.println("Count should be 3 and count is " + count);
    }

    /**
     * getCount counts number of times value is found in the matrix.
     *
     * @return the number of times value is found in the array
     */
    public int getCount(int value)
    {
        // TO DO
    }

    public static void main(String[] args)
    {
        testGetCount();
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    public RunestoneTests()
    {
        super("IntArrayWorker");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Count should be 3 and count is 3\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        IntArrayWorker worker = new IntArrayWorker();
        worker.setMatrix(new int[][] { {1, 4, 8}, {8, 8, 8}});
        int count = worker.getCount(8);
        int expectedCount = 4;

        boolean passed =
                getResults(
                        expectedCount + "",
                        count + "",
                        "Testing getCount for matrix { {1,4,8},{8,8,8} }");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="picture-lab-A4-getLargest">
    <statement>
        <p>Write a <c>getLargest</c> method in the <c>IntArrayWorker</c> class that returns the largest value in the matrix.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class IntArrayWorker
{
    /** two dimensional matrix */
    private int[][] matrix = null;

    /**
     * set the matrix to the passed one
     *
     * @param theMatrix the one to use
     */
    public void setMatrix(int[][] theMatrix)
    {
        matrix = theMatrix;
    }

    /** print the values in the array in rows and columns */
    public void print()
    {
        for (int row = 0; row &lt; matrix.length; row++)
        {
            for (int col = 0; col &lt; matrix[0].length; col++)
            {
                System.out.print(matrix[row][col] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    public static void testGetLargest()
    {
        // test when largest is last
        IntArrayWorker worker = new IntArrayWorker();
        int[][] nums2 = { {1, 2, 3}, {4, 5, 6}};
        worker.setMatrix(nums2);
        int largest = worker.getLargest();
        System.out.println(
                "When largest is last, it should be 6 and is " + largest);
        // test when largest is first
        int[][] nums3 = { {6, 2, 3}, {4, 5, 1}};
        worker.setMatrix(nums3);
        largest = worker.getLargest();
        System.out.println(
                "When largest is first, it should be 6 and is " + largest);
        // test when largest is in the middle
        int[][] nums4 = { {1, 2, 3}, {6, 5, 1}};
        worker.setMatrix(nums4);
        largest = worker.getLargest();
        System.out.println(
                "When largest is in the middle, it should be 6 and is " + largest);
    }

    /**
     * Method to return the largest value in the array
     *
     * @return the largest value found in the array
     */
    public int getLargest()
    {
        // TO DO
    }

    public static void main(String[] args)
    {
        testGetLargest();
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    public RunestoneTests()
    {
        super("IntArrayWorker");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "When largest is last, it should be 6 and is 6\n"
                    + "When largest is first, it should be 6 and is 6\n"
                    + "When largest is in the middle, it should be 6 and is 6\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        IntArrayWorker worker = new IntArrayWorker();
        worker.setMatrix(new int[][] { {1, 4, 8}, {6, 9, 7}});
        int output = worker.getLargest();
        int expect = 9;

        boolean passed =
                getResults(
                        expect + "",
                        output + "",
                        "Testing getLargest for matrix { {1, 4,8},{6, 9, 7} }");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="picture-lab-A4-getColTotal">
    <statement>
        <p>Write a <c>getColTotal</c> method in the <c>IntArrayWorker</c> class that returns the total of all integers in a specified column.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class IntArrayWorker
{
    /** two dimensional matrix */
    private int[][] matrix = null;

    /**
     * set the matrix to the passed one
     *
     * @param theMatrix the one to use
     */
    public void setMatrix(int[][] theMatrix)
    {
        matrix = theMatrix;
    }

    /** print the values in the array in rows and columns */
    public void print()
    {
        for (int row = 0; row &lt; matrix.length; row++)
        {
            for (int col = 0; col &lt; matrix[0].length; col++)
            {
                System.out.print(matrix[row][col] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    /**
     * getColTotal adds and returns the total of all integers in a specified
     * column.
     *
     * @return the total of elements in a column
     */
    public int getColTotal(int column)
    {
        // TO DO
    }

    /** Method to test getColTotal */
    public static void testGetColTotal()
    {
        IntArrayWorker worker = new IntArrayWorker();
        int[][] nums2 = { {1, 2, 3}, {4, 5, 6}};
        worker.setMatrix(nums2);
        int total = worker.getColTotal(0);
        System.out.println("Total for column 0 should be 5 and is " + total);
        total = worker.getColTotal(1);
        System.out.println("Total for column 1 should be 7 and is " + total);
        total = worker.getColTotal(2);
        System.out.println("Total for column 2 should be 9 and is " + total);
    }

    public static void main(String[] args)
    {
        testGetColTotal();
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    public RunestoneTests()
    {
        super("IntArrayWorker");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "Total for column 0 should be 5 and is 5\n"
                    + "Total for column 1 should be 7 and is 7\n"
                    + "Total for column 2 should be 9 and is 9";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        IntArrayWorker worker = new IntArrayWorker();
        worker.setMatrix(new int[][] { {1, 1, 1}, {0, 1, 2}});
        int count = worker.getColTotal(1);
        int expectedCount = 2;

        boolean passed =
                getResults(
                        expectedCount + "",
                        count + "",
                        "Testing getColTotal for matrix { {1,1,1},{0,1,2} }");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
  </exercises>
</section>

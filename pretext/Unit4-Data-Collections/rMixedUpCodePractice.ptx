<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section>
  <title>More Mixed Up Code Practice</title>
  <p>Try to solve each of the following. Click the <em>Check Me</em> button to check each solution.  You will be told if your solution is too short, has a block in the wrong order, or you are using the wrong block.  Some of the problems have an extra block that isn’t needed in the correct solution.  Try to solve these on your phone or other mobile device!</p>
  <exercises>
    <exercise label="ch12p2ex1muc" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>The following method should recursively reverse the string that is passed in the parameter and return the reversed string.  It if is passed “abcd” it should return “dcba”.  It has one extra block that is not needed in a correct solution.</p>
</statement>
<blocks><block order="4">
<cline>public String reverse(String str)</cline>
<cline>{</cline>
</block><block order="3">
<cline>    if(str.length() &lt;= 1)</cline>
<cline>    {</cline>
</block><block order="5">
<cline>        return str;</cline>
</block><block order="6">
<cline>    }</cline>
<cline>    return reverse(str.substring(1)) + str.charAt(0);</cline>
</block><block order="1">
<cline>}</cline>
</block><block order="2" correct="no">
<cline>    return reverse(str.substring(1)); </cline>
</block></blocks></exercise>
    <exercise label="ch12p2ex2muc" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>The following method should recursively return the fibonacci sequence of the first n numbers.  The fibonacci (f) of f(0) is 0 and of f(1) is 1.  The fibonacci of any other number is f(n-1) + f(n-2).  It has one extra block that is not needed in a correct solution.</p>
</statement>
<blocks><block order="9">
<cline>public int fibonacci(int n)</cline>
<cline>{</cline>
</block><block order="4">
<cline>    if(n == 0)</cline>
<cline>    {</cline>
</block><block order="5">
<cline>        return 0;</cline>
</block><block order="1">
<cline>    }</cline>
<cline>    else if(n == 1)</cline>
<cline>    {</cline>
</block><block order="8">
<cline>        return 1;</cline>
</block><block order="7">
<cline>    }</cline>
<cline>    else</cline>
<cline>    {</cline>
</block><block order="3">
<cline>        return fibonacci(n - 1) + fibonacci(n - 2);</cline>
</block><block order="2">
<cline>    }</cline>
<cline>}</cline>
</block><block order="6" correct="no">
<cline>     return fibonacci(n - 1); </cline>
</block></blocks></exercise>
    <exercise label="ch12p2ex3muc" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>The following method should recursively replace all the spaces in the String str with dashes.</p>
</statement>
<blocks><block order="5">
<cline>public String spaceDash(String str)</cline>
<cline>{</cline>
</block><block order="8">
<cline>    if(str.length == 0)</cline>
<cline>    {</cline>
</block><block order="3">
<cline>        return str;</cline>
</block><block order="9">
<cline>    }</cline>
<cline>    else if(str.charAt(0) ==  ' ')</cline>
<cline>    {</cline>
</block><block order="2">
<cline>        return "-" + spaceDash(str.substring(1));</cline>
</block><block order="6">
<cline>    }</cline>
<cline>    else</cline>
<cline>    {</cline>
</block><block order="1">
<cline>        return str.charAt(0) + spaceDash(str.substring(1));</cline>
</block><block order="7">
<cline>    }</cline>
<cline>}</cline>
</block><block order="4" correct="no">
<cline>     return "-" + str.substring(1); </cline>
</block></blocks></exercise>
    <exercise label="ch12p2ex4muc" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>The following method should recursively count and return the number of 2’s that are present in the number.</p>
</statement>
<blocks><block order="7">
<cline>public int numberOf2s(int n)</cline>
<cline>{</cline>
</block><block order="9">
<cline>    if(n == 0)</cline>
<cline>    {</cline>
</block><block order="5">
<cline>        return 0;</cline>
</block><block order="4">
<cline>    }</cline>
<cline>    else if(n % 10 == 2)</cline>
<cline>    {</cline>
</block><block order="2">
<cline>        return 1 + numberOf2s(n / 10);</cline>
</block><block order="3">
<cline>    }</cline>
<cline>    else</cline>
<cline>    {</cline>
</block><block order="8">
<cline>        return numberOf2s(n / 10);</cline>
</block><block order="6">
<cline>    }</cline>
<cline>}</cline>
</block><block order="1" correct="no">
<cline>     return 1 + numberOf2s(n % 10); </cline>
</block></blocks></exercise>
    <exercise label="ch12p2ex5muc" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>The following method should recursively find and return the sum of the digits of int n.</p>
</statement>
<blocks><block order="6">
<cline>public int sum(int n)</cline>
<cline>{</cline>
</block><block order="4">
<cline>    if(n / 10 == 0)</cline>
<cline>    {</cline>
</block><block order="2">
<cline>        return n;</cline>
</block><block order="7">
<cline>    }</cline>
<cline>    else</cline>
<cline>    {</cline>
</block><block order="5">
<cline>        return sum(n / 10) + n % 10;</cline>
</block><block order="3">
<cline>    }</cline>
<cline>}</cline>
</block><block order="1" correct="no">
<cline>     return 1 + sum(n % 10); </cline>
</block></blocks></exercise>
    <exercise label="ch12p2ex6muc" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>The following method should recursively find and return the number of even digits in int n.</p>
</statement>
<blocks><block order="8">
<cline>public int evenDigits(int n)</cline>
<cline>{</cline>
</block><block order="1">
<cline>    if(n / 10 == 0)</cline>
<cline>    {</cline>
</block><block order="10">
<cline>        if(n % 2 == 0)</cline>
<cline>        {</cline>
</block><block order="3">
<cline>           return 1;</cline>
</block><block order="2">
<cline>        }</cline>
<cline>        else</cline>
<cline>        {</cline>
<cline>            return 0;</cline>
<cline>        }</cline>
</block><block order="4">
<cline>    }</cline>
<cline>    else if((n % 10) % 2 == 0)</cline>
<cline>    {</cline>
</block><block order="9">
<cline>        return evenDigits(n / 10) + 1;</cline>
</block><block order="7">
<cline>    }</cline>
<cline>    else</cline>
<cline>    {</cline>
</block><block order="5">
<cline>        return evenDigits(n / 10);</cline>
</block><block order="6">
<cline>    }</cline>
<cline>}</cline>
</block></blocks></exercise>
    <exercise label="ch12p2ex7muc" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>The following method should recursively find and print the factorial of int n. It has 1 extra block of code.</p>
</statement>
<blocks><block order="1">
<cline>public int factorial(int n)</cline>
<cline>{</cline>
</block><block order="3">
<cline>    if(n == 1)</cline>
<cline>    {</cline>
</block><block order="4">
<cline>        return 1;</cline>
</block><block order="5">
<cline>    }</cline>
<cline>    else</cline>
<cline>    {</cline>
</block><block order="7">
<cline>        return n * factorial(n - 1);</cline>
</block><block order="6">
<cline>    }</cline>
<cline>}</cline>
</block><block order="2" correct="no">
<cline>     return 1 + factorial(n % 10); </cline>
</block></blocks></exercise>
  </exercises>
</section>

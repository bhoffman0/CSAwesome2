<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="unit-6-summary">
  <title>Unit 6 Summary</title><introduction>
    
    <p>In this chapter you learned about <term>Arrays</term>.  An <term>array</term> is consecutive storage for multiple items of the same type like the top five scores in a game.  You learned how to declare arrays, create them, and access array elements.  Array elements are accessed using an index.  The first element in an array is at index 0.</p>
    <figure align="center">
      <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Two 5 element arrays with their values set to the default values for integer and object arrays.</caption>
      <image source="Unit4-Data-Collections/Figures/arrayIndicies.png" width="36%%"/>
    </figure>
  </introduction>
  <subsection>
            <title>Concept Summary</title>
            <p><ul>
                <li>
                    <p><term>Array</term> - An array can hold many items (elements) of the same type.  You can access an item (element) at an index and set an item (element) at an index.</p>
                </li>
                <li>
                    <p><term>Array Declaration</term> - To declare an array specify the type of elements that will be stored in the array, then (<c>[]</c>) to show that it is an array of that type, then at least one space, and then a name for the array. Examples:  <c>int[] highScores;</c>  <c>String[] names;</c></p>
                </li>
                <li>
                    <p><term>Array Creation</term> - To create an array type the name and an equals sign then use the <em>new</em> keyword, followed by a space, then the type, and then in square brackets the size of the array (the number of elements it can hold). Example:   <c>names = new String[5];</c></p>
                </li>
                <li>
                    <p><term>Array Index</term> - You can access and set values in an array using an index.  The first element in an array called <c>arr</c> is at index 0 <c>arr[0]</c>.  The last element in an array is at the length minus one - <c>arr[arr.length - 1]</c>.</p>
                </li>
                <li>
                    <p><term>Array Initialization</term> - You can also initialize (set) the values in the array when you create it. In this case you don’t need to specify the size of the array, it will be determined from the number of values that you specify. Example: <c>int[] highScores = {99,98,98,88,68};</c></p>
                </li>
                <li>
                    <p><term>Array Length</term> - The length of an array is the number of elements it can hold. Use the public <c>length</c> field to get the length of the array. Example: given <c>int[] scores = {1,2,2,1,3,1};</c>, <c>scores.length</c> equals 6.</p>
                </li>
                <li>
                    <p><term>Element Reference</term> - A specific element can be referenced by using the name of the array and the element’s index in square brackets. Example: <c>scores[3]</c> will return the 4th element (since index starts at 0, not 1). To reference the last element in an array, use <c>array[array.length - 1]</c></p>
                </li>
                <li>
                    <p><term>For-each Loop</term> - Used to loop through all elements of an array.  Each time through the loop the loop variable will be the next element in the array starting with the element at index 0, then index 1, then index 2, etc.</p>
                </li>
                <li>
                    <p><term>Out of Bounds Exception</term> - An error that means that you tried to access an element of the array that doesn’t exist maybe by doing <c>arr[arr.length]</c>.  The first valid indices is 0 and the last is the length minus one.</p>
                </li>
            </ul></p>
        </subsection>
  <subsection>
            <title>Java Keyword Summary</title>
            <p><ul>
                <li>
                    <p><term>for</term> - starts both a general for loop and a for-each loop.  The syntax for a for each loop is <c>for (type variable : array)</c>.  Each time through the loop the variable will take on the next value in the array.  The first time through the loop it will hold the value at index 0, then the value at index 1, then the value at index 2, etc.</p>
                </li>
                <li>
                    <p><term>static</term> - used to create a class method, which is a method that can be called using the class name like <c>Math.abs(-3)</c>.</p>
                </li>
            </ul></p>
        </subsection>
  <subsection>
            <title>Vocabulary Practice</title>

<exercise label="ch7_match_1">
    <statement><p>Drag the item from the left and drop it on its corresponding answer on the right.  Click the "Check Me" button to see if you are correct.</p></statement>
    <feedback><p>Review the summaries above.</p></feedback>
<matches><match order="1"><premise>The index of the last element</premise><response>length - 1</response></match><match order="2"><premise>The number of elements in the array</premise><response>length</response></match><match order="3"><premise>The index of the first element</premise><response>0</response></match><match order="4"><premise>The index of the second element</premise><response>1</response></match></matches></exercise>
<exercise label="ch7_match_2">
    <statement><p>Drag the description from the left and drop it on the correct code on the right.  Click the "Check Me" button to see if you are correct.</p></statement>
    <feedback><p>Review the summaries above.</p></feedback>
<matches><match order="1"><premise>Declare an integer array named nums</premise><response>int[] nums;</response></match><match order="2"><premise>Declare and create a String array named list1 that can hold 3 elements</premise><response>String[] list1 = new String[3];</response></match><match order="3"><premise>Initialize an array of integers named nums to contain the first 3 whole numbers</premise><response>int[] nums = {1,2,3};</response></match><match order="4"><premise>Initialize a String array named list1 to contain the first 3 letters of the alphabet as separate strings</premise><response>String[] list1 = {"a", "b", "c"};</response></match></matches></exercise>            <p>For more practice, see this <url href="https://quizlet.com/434081272/cs-awesome-unit-6-vocabulary-flash-cards/" visual="https://quizlet.com/434081272/cs-awesome-unit-6-vocabulary-flash-cards/">Quizlet</url>.</p>
        </subsection>
  <subsection>
            <title>Common Mistakes</title>
            <blockquote>
                <p><ul>
                    <li>
                        <p>forgetting to create the array - only declaring it (<c>int[ ] nums;</c>)</p>
                    </li>
                    <li>
                        <p>using 1 as the first index not 0</p>
                    </li>
                    <li>
                        <p>using <c>array.length</c> as the last valid index in an array, not <c>array.length - 1</c>.</p>
                    </li>
                    <li>
                        <p>using <c>array.length()</c> instead of <c>array.length</c> (not penalized on the free response)</p>
                    </li>
                    <li>
                        <p>using <c>array.get(0)</c> instead of <c>array[0]</c> (not penalized on the free response)</p>
                    </li>
                    <li>
                        <p>going out of bounds when looping through an array  (using <c>index &lt;= array.length</c>).  You will get an <c>ArrayIndexOutOfBoundsException</c>.</p>
                    </li>
                    <li>
                        <p>jumping out an loop too early by using one or more return statements before every value has been processed.</p>
                    </li>
                </ul></p>
            </blockquote>
        </subsection>
</section>

<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="climbClubA">
  <title>Free Response - Climbing Club A</title><introduction>
    
    <p>The following is part a of a free response question from 2012.  It was question 1 on the exam.  You can see all the free response questions from past exams at <url href="https://apstudents.collegeboard.org/courses/ap-computer-science-a/free-response-questions-by-year" visual="https://apstudents.collegeboard.org/courses/ap-computer-science-a/free-response-questions-by-year">https://apstudents.collegeboard.org/courses/ap-computer-science-a/free-response-questions-by-year</url>.</p>
    <p><term>Question 1.</term>  A mountain climbing club maintains a record of the climbs that its members have made. Information about a
            climb includes the name of the mountain peak and the amount of time it took to reach the top. The information is
            contained in the <c>ClimbInfo</c> class as declared below.</p>
    <program language="java">
      <code>
public class ClimbInfo
{
    /**
     * Creates a ClimbInfo object with name peakName and time climbTime.
     *
     * @param peakName the name of the mountain peak
     * @param climbTime the number of minutes taken to complete the climb
     */
    public ClimbInfo(String peakName, int climbTime)
    {
        /* implementation not shown */
    }

    /**
     * @return the name of the mountain peak
     */
    public String getName()
    {
        /* implementation not shown */
    }

    /**
     * @return the number of minutes taken to complete the climb
     */
    public int getTime()
    {
        /* implementation not shown */
    }

    // There may be instance variables, constructors, and methods
    // that are not shown.
}
</code>
    </program>
    <p>The <c>ClimbingClub</c> class maintains a list of the climbs made by members of the club. The declaration of the
            <c>ClimbingClub</c> class is shown below. You will write two different implementations of the <c>addClimb</c>
            method. You will also answer two questions about an implementation of the <c>distinctPeakNames</c> method</p>
    <program language="java">
      <code>
public class ClimbingClub
{
    /**
     * The list of climbs completed by members of the club. Guaranteed not to be
     * null. Contains only non-null references.
     */
    private List&lt;ClimbInfo&gt; climbList;

    /** Creates a new ClimbingClub object. */
    public ClimbingClub()
    {
        climbList = new ArrayList&lt;ClimbInfo&gt;();
    }

    /**
     * Adds a new climb with name peakName and time climbTime to the list of
     * climbs.
     *
     * @param peakName the name of the mountain peak climbed
     * @param climbTime the number of minutes taken to complete the climb
     */
    public void addClimb(String peakName, int climbTime)
    {
        /* to be implemented in part (a) */
    }

    /**
     * @return the number of distinct names in the list of climbs
     */
    public int distinctPeakNames()
    {
        /* implementation shown in part (c) */
    }

    // There may be instance variables, constructors, and methods
    // that are not shown.
}
</code>
    </program>
    <p><term>Part a.</term>  Write an implementation of the <c>ClimbingClub</c> method <c>addClimb</c> that stores the <c>ClimbInfo</c>
            objects in the order they were added. This implementation of <c>addClimb</c> should create a new
            <c>ClimbInfo</c> object with the given name and time. It appends a reference to that object to the end of
            climbList. For example, consider the following code segment.</p>
    <program language="java">
      <code>
ClimbingClub hikerClub = new ClimbingClub();
hikerClub.addClimb("Monadnock", 274);
hikerClub.addClimb("Whiteface", 301);
hikerClub.addClimb("Algonquin", 225);
hikerClub.addClimb("Monadnock", 344);
</code>
    </program>
    <p>When the code segment has completed executing, the instance variable <c>climbList</c> would contain the
            following entries.</p>
    <image source="Unit4-Data-Collections/Figures/climbClubA.png" width="89%%" alt="Picture of the list after the above code executes"/>
  </introduction>
  <subsection>
            <title>How To Solve This</title>
            <p>Click to reveal the algorithm and practice problems to help you write your solution.</p>
            <subsection>
                <p>In the <c>addClimb</c> method you need to create a new <c>ClimbInfo</c> object and initialize the <c>peakName</c> and <c>climbTime</c>.  How do you create a new object of a class and initialize the fields?</p>
                <p>Once you have created the <c>ClimbInfo</c> object you want to add it in the order they were created.  To do this you can add it to the end of the <c>climbList</c>.  How do you add an object to the end of a list?</p>
            </subsection>
            <exercises line="132" runestone_options="{'showtitle': 'data-showtitle=&quot;Reveal Problems&quot;', 'hidetitle': 'data-hidetitle=&quot;Hide Problems&quot;', 'optional': 'data-optional=true', 'subchapter': 'climbClubA', 'chapter': 'Unit4-Data-Collections', 'basecourse': 'csawesome2beta', 'optclass': '', 'divid': 'fr_climbA_r1', 'instructoronly': '', 'is_dynamic': 'True'}" source="/mnt/c/users/hoffmanb/Documents/Github/csawesome2/_fixed_sources/Unit4-Data-Collections/climbClubA.rst">

    <exercise label="fr_climbA_1">
        <statement>

                <p> How would you create a new object newClimb of the ClimbInfo class, with a peakName of Everest and climbTime of 600?</p>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>ClimbInfo newClimb = new ClimbInfo("Everest", 600);</p>
                </statement>
                <feedback>
                    <p>Correct!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>new ClimbInfo("Everest", 600);</p>
                </statement>
                <feedback>
                    <p>This answer is missing the instantiation of the variable newClimb. Try again!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>ClimbInfo newClimb = new ClimbInfo();</p>
                </statement>
                <feedback>
                    <p>The constructor of a ClimbInfo object requires two arguments. Try again!</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="fr_climbA_2">
        <statement>

                <p> How do you append a new item, 7, to the end of a non-empty ArrayList&lt;Integer&gt; list?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>list.add(0, 7);</p>
                </statement>
                <feedback>
                    <p>This would add 7 to the beginning of the list. Try again!</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>list.add(7);</p>
                </statement>
                <feedback>
                    <p>Correct!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>add(7);</p>
                </statement>
                <feedback>
                    <p>You must reference the ArrayList list using a dot operator to use the add() method. Try again!</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            </exercises>
        </subsection>
  <subsection>
            <title>Try and Solve It</title>

<exercise label="ClimbClubA">
    <statement>
            <p>Complete the method <c>addClimb</c> in the <c>ClimbingClub</c> class in the code below.  The code includes a <c>main</c> method that will test the <c>addClimb</c> method.</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
import java.util.ArrayList;
import java.util.List;

class ClimbInfo
{
    private String name;
    private int time;

    /**
     * Creates a ClimbInfo object with name peakName and time climbTime.
     *
     * @param peakName the name of the mountain peak
     * @param climbTime the number of minutes taken to complete the climb
     */
    public ClimbInfo(String peakName, int climbTime)
    {
        name = peakName;
        time = climbTime;
    }

    /**
     * @return the name of the mountain peak
     */
    public String getName()
    {
        return name;
    }

    /**
     * @return the number of minutes taken to complete the climb
     */
    public int getTime()
    {
        return time;
    }

    public String toString()
    {
        return "Peak name: " + name + " time: " + time;
    }
}

public class ClimbingClub
{
    /**
     * The list of climbs completed by members of the club. * Guaranteed not to be
     * null. Contains only non-null references.
     */
    private List&lt;ClimbInfo&gt; climbList;

    /** Creates a new ClimbingClub object. */
    public ClimbingClub()
    {
        climbList = new ArrayList&lt;ClimbInfo&gt;();
    }

    /**
     * Adds a new climb with name peakName and time climbTime to the end of the
     * list of climbs
     *
     * @param peakName the name of the mountain peak climbed
     * @param climbTime the number of minutes taken to complete the climb
     */
    public void addClimb(String peakName, int climbTime) {}

    public String toString()
    {
        String output = "";
        for (ClimbInfo info : climbList)
        {
            output = output + info.toString() + "\n";
        }
        return output;
    }

    public static void main(String[] args)
    {
        // test a
        ClimbingClub hikerClub = new ClimbingClub();
        hikerClub.addClimb("Monadnock", 274);
        hikerClub.addClimb("Whiteface", 301);
        hikerClub.addClimb("Algonquin", 225);
        hikerClub.addClimb("Monadnock", 344);
        System.out.print(hikerClub);
        System.out.println(
                "The order printed above should be Monadnock, Whiteface,"
                    + " Algonquin, Monadnock");
    }
}

</code><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    public RunestoneTests()
    {
        super("ClimbingClub");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");

        String expect =
                "Peak name: Monadnock time: 274\n"
                    + "Peak name: Whiteface time: 301\n"
                    + "Peak name: Algonquin time: 225\n"
                    + "Peak name: Monadnock time: 344\n";

        expect =
                expect
                        + "The order printed above should be Monadnock, Whiteface, Algonquin,"
                        + " Monadnock\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        ClimbingClub hikerClub = new ClimbingClub();
        hikerClub.addClimb("Monadnock", 274);
        hikerClub.addClimb("Whiteface", 301);
        hikerClub.addClimb("Algonquin", 225);
        hikerClub.addClimb("Monadnock", 344);

        String output = hikerClub.toString();

        String expect =
                "Peak name: Monadnock time: 274\n"
                    + "Peak name: Whiteface time: 301\n"
                    + "Peak name: Algonquin time: 225\n"
                    + "Peak name: Monadnock time: 344\n";

        boolean result = (output.compareTo(expect) == 0);

        boolean passed =
                getResults(
                        "true",
                        "" + result,
                        "addClimb method works with arguments Monadnock: 274, Whiteface:301,"
                            + " Algonquin: 225, Monadnock: 344");

        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
        </subsection>
  <subsection>
            <title>Video - One way to code the solution</title>
            <p>There are many possible solutions to this problem.  The video below shows one solution.</p>
            
            <p>The following video is also on YouTube at <url href="https://youtu.be/dAbU9_Qn92I" visual="https://youtu.be/dAbU9_Qn92I">https://youtu.be/dAbU9_Qn92I</url>.  It walks through coding a solution.</p>

    <video youtube="dAbU9_Qn92I"/>
            </subsection>
</section>

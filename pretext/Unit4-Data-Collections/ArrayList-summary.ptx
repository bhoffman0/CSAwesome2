<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="arraylist-summary">
  <title>ArrayList Summary</title><introduction>
    
    <p>In this chapter you learned about <term>ArrayLists</term> which are dynamic re-sizable arrays.  You learned how to declare and create ArrayLists, add and remove objects from them, set the object at an index, and get the object at an index.</p>
    <p>List are like arrays in that you can store many objects of the same type in a list, just as you can in an array.  Lists are different from arrays in that they can grow or shrink as needed. You can also add an element anywhere in a list and remove an element from any index. The first element in a list is at index 0 just like arrays.</p>
    <p>Lists also differ from arrays in that you can have an array of any of the primitive types: int, double, or boolean, but you can only put objects in a list.   You can use the wrapper classes <c>Integer</c>, <c>Double</c>, and <c>Boolean</c> to wrap a primitive value in an object so that you can put it in a list. Java will also do this automatically for you if you try to add a primitive value to a list or set a primitive variable to an item of a list.  This is called <term>autoboxing</term> and <term>unboxing</term>.</p>
  </introduction>
  <subsection>
            <title>Concept Summary</title>
            <p><ul>
                <li>
                    <p><term>Autoboxing</term> - Automatically wrapping a primitive type in a wrapper class object.  For instance if you try to add an <c>int</c> value to a list, it will automatically be converted to an <c>Integer</c> object.</p>
                </li>
                <li>
                    <p><term>Abstract Method</term> - A method that only has a declaration and no method body (no code inside the method).</p>
                </li>
                <li>
                    <p><term>ArrayList</term> -  An ArrayList can hold many objects of the same type.  It can grow or shrink as needed.  You can add and remove items at any index.</p>
                </li>
                <li>
                    <p><term>Add</term> - You can add an object to the end of a list using <c>listName.add(obj)</c>.  You can add an object at an index of a list using <c>add(index,obj)</c>.  This will first move any objects at that index or higher to the right one position to make room for the new object.</p>
                </li>
                <li>
                    <p><term>Declaration</term> - To declare an ArrayList use <c>ArrayList&lt;Type&gt; name</c>, where <c>Type</c> is the class name for the type of objects in the list.  If you leave off the <c>&lt;Type&gt;</c> it will default to <c>Object</c>.</p>
                </li>
                <li>
                    <p><term>Creation</term> - To create an ArrayList use <c>new ArrayList&lt;Type&gt;</c>, where <c>Type</c> is the class name for the type of objects you want to store in the list. There are other classes that implement the <c>List</c> interface, but you only need to know the <c>ArrayList</c> class for the exam.</p>
                </li>
                <li>
                    <p><term>Get</term> - To get an object at an index from a list use <c>listName.get(index)</c>.</p>
                </li>
                <li>
                    <p><term>Index</term> - You can access and set values in a list using an index.  The first element in a list called <c>list1</c> is at index 0 <c>list1.get(0)</c>.  The last element in a list is at the length minus one - <c>list1[list1.size() - 1]</c>.</p>
                </li>
                <li>
                    <p><term>Remove</term> - To remove the object at an index use <c>ListName.remove(index)</c>.  This will move all object past that index to the left one index.</p>
                </li>
                <li>
                    <p><term>Set</term> - To set the value at an index in a list use <c>listName.set(index,obj)</c>.</p>
                </li>
                <li>
                    <p><term>Size</term> - Use <c>listName.size()</c> to get the number of objects in the list.</p>
                </li>
                <li>
                    <p><term>Wrapper Class</term> - Classes used to create objects that hold primitive type values like <c>Integer</c> for <c>int</c>, <c>Double</c> for <c>double</c> and <c>Boolean</c> for <c>boolean</c>.</p>
                </li>
                <li>
                    <p><term>Unboxing</term> - Automatically converting a wrapper object like an <c>Integer</c> into a primitive type such as an <c>int</c>.</p>
                </li>
            </ul></p>
        </subsection>
  <subsection>
            <title>Vocabulary Practice</title>

<exercise label="ch10_17_match_1">
    <statement><p>Drag the item from the left and drop it on its corresponding answer on the right.  Click the "Check Me" button to see if you are correct.</p></statement>
    <feedback><p>Review the summaries above.</p></feedback>
<matches><match order="1"><premise>The index of the last element</premise><response>size() - 1</response></match><match order="2"><premise>The number of elements in the list</premise><response>size()</response></match><match order="3"><premise>The index of the first element</premise><response>0</response></match><match order="4"><premise>The index of the second element</premise><response>1</response></match></matches></exercise>
<exercise label="ch10_17_match_2">
    <statement><p>Drag the description from the left and drop it on the correct code on the right.  Click the "Check Me" button to see if you are correct.</p></statement>
    <feedback><p>Review the summaries above.</p></feedback>
<matches><match order="1"><premise>Declare an integer list named numList</premise><response>List&lt;Integer&gt; numList = null;</response></match><match order="2"><premise>Declare and create a list of strings named list1 </premise><response>List&lt;String&gt; list1 = new ArrayList&lt;String&gt;();</response></match><match order="3"><premise>Declare and create a list of integers named list1 </premise><response>List&lt;Integer&gt; list1 = new ArrayList&lt;Integer&gt;();</response></match><match order="4"><premise>Get the first object in a list named list1</premise><response>list1.get(0);</response></match><match order="5"><premise>Get the last object in a list named list1</premise><response>list1.get(list1.size() - 1);</response></match></matches></exercise>            <p>For more practice, see this <url href="https://quizlet.com/434082008/cs-awesome-unit-7-vocabulary-flash-cards/" visual="https://quizlet.com/434082008/cs-awesome-unit-7-vocabulary-flash-cards/">Quizlet</url>.</p>
        </subsection>
  <subsection>
            <title>Common Mistakes</title>
            <blockquote>
                <p><ul>
                    <li>
                        <p>forgetting that <c>set</c> replaces the item at the index</p>
                    </li>
                    <li>
                        <p>forgetting that <c>remove</c> at an index moves all items that were to the right of that index left one index</p>
                    </li>
                    <li>
                        <p>forgetting that <c>add</c> at an index moves everything that was at the index and greater to the right one index</p>
                    </li>
                    <li>
                        <p>incrementing an index when looping through a list even though you removed an item from the list</p>
                    </li>
                    <li>
                        <p>using <c>nameList[0]</c> instead of <c>nameList.get(0)</c>.</p>
                    </li>
                    <li>
                        <p>using <c>nameList.length</c> instead of <c>nameList.size()</c> to get the number of elements in a list</p>
                    </li>
                </ul></p>
            </blockquote>
        </subsection>
</section>

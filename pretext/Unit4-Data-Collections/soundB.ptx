<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section xml:id="UNIQUE-ID-001381">
  <title>Free Response - Sound B</title>
  <introduction>
    <p xml:id="UNIQUE-ID-001382">The following is a free response question from 2011.  It was question 1 on the exam.  You can see all the free response questions from past exams at <url href="https://apstudents.collegeboard.org/courses/ap-computer-science-a/free-response-questions-by-year" visual="https://apstudents.collegeboard.org/courses/ap-computer-science-a/free-response-questions-by-year">https://apstudents.collegeboard.org/courses/ap-computer-science-a/free-response-questions-by-year</url>.</p>
    <p><term>Question 1.</term>  Digital sounds can be represented as an array of integer values. For this question, you will write two unrelated methods of the <em>Sound</em> class.</p>
    <p>A partial declaration of the <c>Sound</c> class is shown below.</p>
    <program language="java">
      <input>
public class Sound
{
 /** the array of values in this sound; guaranteed not to be null */
 private int[] samples;

 /** Changes those values in this sound that have an amplitude
  *  greater than limit */
  *  Values greater than limit are changed to limit.
  *  @param limit the amplitude limit
  *         Precondition: limit &gt;= 0
  *  @return the number of values in this sound that this
  *    method changed
  */
 public int limitAmplitude(int limit)
 { /* to be implemented in part (a) */ }

 /** Removes all silence from the beginning of this sound.
  *  Silence is represented by a value of 0.
  *  Precondition: samples contains at least one nonzero value
  *  Postcondition: the length of samples reflects the
  *                  removal of starting silence
  */
 public void trimSilenceFromBeginning()
 { /* to be implemented in part (b) */ }

 // There may be instance variables, constructors, and methods
 // that are not shown.
}
</input>
    </program>
    <p><term>Part b.</term> Recorded sound often begins with silence. Silence in a sound is represented by a value of 0.</p>
    <p>Write the method <c>trimSilenceFromBeginning</c> that removes the silence from the beginning of a
            sound. To remove starting silence, a new array of values is created that contains the same values as the
            original <c>samples</c> array in the same order but without the leading zeros. The instance variable <c>samples</c>
            is updated to refer to the new array. For example, suppose the instance variable <c>samples</c> refers to the
            following array.</p>
    <figure align="center" xml:id="UNIQUE-ID-001383">
      <image source="Unit4-Data-Collections/Figures/soundTable3.png" width="NaN%"/>
    </figure>
    <p>After <c>trimSilenceFromBeginning</c> has been called, the instance variable <c>samples</c> will refer to the following array.</p>
    <figure align="center" xml:id="UNIQUE-ID-001384">
      <image source="Unit4-Data-Collections/Figures/soundTable4.png" width="NaN%"/>
    </figure>
  </introduction>
  <subsection xml:id="UNIQUE-ID-001385">
    <title>How to Solve This</title>
    <p>Click to reveal problems and the algorithm to help you write your solution.</p>
    <subsection>
      <p>
        <ol marker="1">
          <li>
            <p>You will need to loop through each element in the array until you reach a non-zero element. You will also need to keep track of the number of leading zeros.</p>
          </li>
          <li>
            <p>Remember that you must replace the samples array with a new array without the leading zeros.  How do you create an array of a particular size?</p>
          </li>
        </ol>
      </p>
    </subsection>
    <exercises line="84" runestone_options="{'showtitle': 'data-showtitle=&quot;Reveal Problems&quot;', 'hidetitle': 'data-hidetitle=&quot;Hide Problems&quot;', 'optional': 'data-optional=true', 'subchapter': 'soundB', 'chapter': 'Unit4-Data-Collections', 'basecourse': 'csawesome2', 'optclass': '', 'divid': 'fr_soundb_r1', 'instructoronly': '', 'is_dynamic': 'True'}" source="/Users/peter/Runestone/books/CSAwesome2/_sources/Unit4-Data-Collections/soundB.rst">
      <exercise label="fr_soundb_1">
        <statement>
          <p>6-4-5-1: Which loop would be best for this problem?</p>
        </statement>
        <choices>
          <choice correct="yes">
            <statement>
              <p>while</p>
            </statement>
            <feedback>
              <p>A while loop is the best choice when you don't know the number of times you need to loop.</p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>for</p>
            </statement>
            <feedback>
              <p>You could use a for loop, but typically a while loop is used when you want to loop while a condition is true.</p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>for-each</p>
            </statement>
            <feedback>
              <p>A for-each loop would only allow you to loop through all the values, but you first want to loop while there are leading zeros.</p>
            </feedback>
          </choice>
        </choices>
      </exercise>
      <exercise label="fr_soundb_2">
        <statement>
          <p>6-4-5-2: Which is the correct code for creating an integer array variable named <c>samples2</c> and setting it to refer to an array of integers of size <c>count</c>?</p>
        </statement>
        <choices>
          <choice>
            <statement>
              <p>int[] samples2;</p>
            </statement>
            <feedback>
              <p>This only declares the variable samples2 which will refer to an array of integers, it doesn't create the array object.</p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>int[] samples2 = new Array(count);</p>
            </statement>
            <feedback>
              <p>The new keyword is not used to create an array.</p>
            </feedback>
          </choice>
          <choice correct="yes">
            <statement>
              <p>int[] samples2 = new int[count];</p>
            </statement>
            <feedback>
              <p>This will create an array of integers of size count and a variable named samples2 which will refer to that array.</p>
            </feedback>
          </choice>
        </choices>
      </exercise>
    </exercises>
  </subsection>
  <subsection xml:id="UNIQUE-ID-001386">
    <title>Mixed Up Code</title>
    <p>Click to reveal the Mixed Up Code for the solution of this problem.</p>
    <exercises line="116" runestone_options="{'showtitle': 'data-showtitle=&quot;Reveal Mixed Up Code&quot;', 'hidetitle': 'data-hidetitle=&quot;Hide Mixed Up Code&quot;', 'subchapter': 'soundB', 'chapter': 'Unit4-Data-Collections', 'basecourse': 'csawesome2', 'optional': '', 'optclass': '', 'divid': 'soundB_parsons', 'instructoronly': '', 'is_dynamic': 'True'}" source="/Users/peter/Runestone/books/CSAwesome2/_sources/Unit4-Data-Collections/soundB.rst">
      <exercise label="SoundB" numbered="yes" adaptive="yes" indentation="hide" language="python">
        <statement>
          <p>The method <c>trimSilenceFromBeginning</c> below contains correct code for one solution to this problem, but it is mixed up.  Drag the code blocks from the left to the right and put them in order with the correct indention so that the code would work correctly.</p>
        </statement>
        <blocks>
          <block order="6">
            <cline>public void trimSilenceFromBeginning()</cline>
            <cline>{</cline>
            <cline>  int i = 0;</cline>
          </block>
          <block order="10">
            <cline>  while (this.samples[i] == 0)</cline>
            <cline>  {</cline>
          </block>
          <block order="8">
            <cline>     i++;</cline>
          </block>
          <block order="3">
            <cline>  } // end while</cline>
          </block>
          <block order="7">
            <cline>  int samplesLen = this.samples.length;</cline>
            <cline>  int[] newSamples = new int[samplesLen - i];</cline>
          </block>
          <block order="1">
            <cline>  for (int j = 0; j &lt; newSamples.length; j++)</cline>
            <cline>  {</cline>
          </block>
          <block order="5">
            <cline>     newSamples[j] = this.samples[j+i];</cline>
          </block>
          <block order="4">
            <cline>  } // end for</cline>
          </block>
          <block order="2">
            <cline>  this.samples = newSamples;</cline>
          </block>
          <block order="9">
            <cline>} // end method</cline>
          </block>
        </blocks>
      </exercise>
    </exercises>
  </subsection>
  <subsection xml:id="UNIQUE-ID-001387">
    <title>Try and Solve Part B</title>
    <exercise label="FRQSoundB">
      <statement>
        <p>FRQ Sound B: Finish writing the method <c>trimSilenceFromBeginning</c> below that removes the silence from the beginning of a sound. To remove starting silence, a new array of values is created that contains the same values as the original <c>samples</c> array in the same order but without the leading zeros. The instance variable <c>samples</c> is updated to refer to the new array.</p>
      </statement>
      <program xml:id="UNIQUE-ID-001388" interactive="activecode" language="java">
        <input>
import java.util.Arrays;

public class Sound
{
    /** the array of values in this sound; guaranteed not to be null */
    private int[] samples =
    {
        0, 0, 0, 0, -14, 0, -35, -39, 0, -7, 16, 32, 37, 29, 0, 0
    };

    /**
     * Removes all silence from the beginning of this sound. Silence is represented
     * by a value of 0. Precondition: samples contains at least one nonzero value
     * Postcondition: the length of samples reflects the removal of starting
     * silence
     */
    public void trimSilenceFromBeginning()
    {
        // Complete this method
    }

    public static void main(String[] args)
    {

        Sound s = new Sound();

        System.out.println(
                "The original array of samples is " + Arrays.toString(s.samples));
        s.trimSilenceFromBeginning();
        System.out.println(
                "The new array of samples is " + Arrays.toString(s.samples));
        System.out.println(
                "The length of the new array should be 12 and is "
                        + s.samples.length);
    }
}

        </input>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.lang.reflect.Field;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain()
    {
        String output = getMethodOutput("main");
        String expect = "-14, 0, -35, -39, 0, -7, 16, 32, 37, 29, 0, 0";

        boolean passed = output.contains(expect);

        expect =
                "The original array of samples is [0, 0, 0, 0, -14, 0, -35, -39, 0, -7, 16, 32, 37,"
                    + " 29, 0, 0]\n"
                    + "The new array of samples is [-14, 0, -35, -39, 0, -7, 16, 32, 37, 29, 0, 0]";

        getResults(expect, output, "Checking output from main()", passed);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        Sound s = new Sound();
        s.trimSilenceFromBeginning();

        try
        {
            Field sampleField = Sound.class.getDeclaredField("samples");
            sampleField.setAccessible(true);

            int[] samples = (int[]) sampleField.get(s);

            String expected = "12";
            String actual = "" + samples.length;

            String msg = "Checking samples array length after trimSilenceFromBeginning()";
            boolean passed = getResults(expected, actual, msg);
            assertTrue(passed);

        }
        catch (Exception e)
        {
            getResults("", "", "There was a error with the testing code.", false);
            fail();
        }
    }
}
</tests>
      </program>
    </exercise>
  </subsection>
</section>

<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="ArrayParsonsPractice">
        <title>Arrays Mixed Up Code Practice</title>
        <p>Try to solve each of the following. Click the <em>Check Me</em> button to check each solution.  You will be told if your solution is too short, has a block in the wrong order, or you are using the wrong block.  Some of the problems have an extra block or two that aren’t needed in the correct solution.  Try to solve these on your phone or other mobile device!</p>
<exercise label="arrayex1muc" numbered="yes" adaptive="yes" indentation="hide" language="java"><statement>
        <p>The following program segment should loop from 0 to less than the length of the array and double each element in the array <c>arr</c> and also print out each new value on the same line separated by “, “. The finished code should print “2, 4, 6, 8, 10, “.  But, the blocks have been mixed up.  Drag the blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</p>
</statement>
<blocks><block order="4">
<cline>int[] arr = {1, 2, 3, 4, 5};</cline>
</block><block order="1">
<cline>for (int i = 0; i &lt; arr.length; i++)</cline>
<cline>{</cline>
</block><block order="3">
<cline>    arr[i] = arr[i] * 2;</cline>
</block><block order="5">
<cline>    System.out.println(arr[i] + ", ");</cline>
</block><block order="2">
<cline>}</cline>
</block></blocks></exercise><exercise label="arrayex2muc" numbered="yes" adaptive="yes" indentation="hide" language="java"><statement>
        <p>The following program segment should fill an array with elements that count up from 0 to 50 by 5 (0, 5, 10, 15, 20…).  But the blocks have been mixed up.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</p>
</statement>
<blocks><block order="2">
<cline>int[] arr = new int[11];</cline>
</block><block order="4">
<cline>for (int i = 0; i &lt; 11; i++)</cline>
<cline>{</cline>
</block><block order="5">
<cline>    arr[i] = i * 5;</cline>
</block><block order="3">
<cline>    System.out.println(arr[i]);</cline>
</block><block order="1">
<cline>}</cline>
</block></blocks></exercise><exercise label="arrayex3muc" numbered="yes" adaptive="yes" indentation="hide" language="java"><statement>
        <p>The following program segment should print each element in the array that is even using an enhanced for each loop.  But, the blocks have been mixed up.  Drag the blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</p>
</statement>
<blocks><block order="6">
<cline>int[] arr = {14, -5, 2, 17, 29, -8, 36};</cline>
</block><block order="2">
<cline>for (int value : arr)</cline>
<cline>{</cline>
</block><block order="4">
<cline>    if (value % 2 == 0)</cline>
<cline>    {</cline>
</block><block order="5">
<cline>        System.out.println(value);</cline>
</block><block order="3">
<cline>    } //end conditional</cline>
</block><block order="1">
<cline>} //end for loop</cline>
</block></blocks></exercise><exercise label="arrayex4muc" numbered="yes" adaptive="yes" indentation="hide" language="java"><statement>
        <p>The following program segment is a method that should return the smallest integer given an array of integers (the parameter).  But, the blocks have been mixed up and include one extra block that is not needed in a correct solution.  Drag the blocks from the left and put them in the correct order with the correct indentation on the right.  Click the Check button to check your solution.</p>
</statement>
<blocks><block order="2">
<cline>public static int findSmallest(int[] arr)</cline>
<cline>{</cline>
</block><block order="4">
<cline>    int smallest = arr[0];</cline>
</block><block order="8">
<cline>    for (int i = 0 ; i &lt; arr.length; i++)</cline>
<cline>    {</cline>
</block><block order="6">
<cline>        if (arr[i] &lt; smallest)</cline>
<cline>        {</cline>
</block><block order="3" correct="no">
<cline>        if (arr[i] &gt; smallest)</cline>
<cline>        { </cline>
</block><block order="5">
<cline>            smallest = arr[i];</cline>
</block><block order="1">
<cline>        }</cline>
</block><block order="10">
<cline>    } //end for loop</cline>
</block><block order="7">
<cline>    return smallest;</cline>
</block><block order="9">
<cline>} //end findSmallest method</cline>
</block></blocks></exercise><exercise label="arrayex5muc" numbered="yes" adaptive="yes" indentation="hide" language="java"><statement>
        <p>The following program segment is a method that should return the average given an array of integers (the parameter).  But, the blocks have been mixed up and include one extra block that is not needed in a correct solution.  Drag the blocks from the left and put them in the correct order with the correct indentation on the right.  Click the Check button to check your solution.</p>
</statement>
<blocks><block order="1">
<cline>public static double findAverage(int[] arr)</cline>
<cline>{</cline>
</block><block order="4">
<cline>    double sum = 0;</cline>
</block><block order="6" correct="no">
<cline>    int sum = 0; </cline>
</block><block order="3">
<cline>    for (int i = 0; i &lt; arr.length; i++)</cline>
<cline>    {</cline>
</block><block order="7">
<cline>        sum += arr[i];</cline>
</block><block order="8">
<cline>    } //end for loop</cline>
</block><block order="2">
<cline>    return (sum / arr.length);</cline>
</block><block order="5">
<cline>} //end findAverage method</cline>
</block></blocks></exercise><exercise label="arrayex6muc" numbered="yes" adaptive="yes" indentation="hide" language="java"><statement>
        <p>The following program segment is a method that should return the largest integer given an array of integers (the parameter).  But, the blocks have been mixed up and include two extra blocks that are not needed in a correct solution.  Drag the needed code from the left to the right and put them in order with the correct indention so that the code would work correctly.  Click the Check button to check your solution.</p>
</statement>
<blocks><block order="5">
<cline>public static int findLargest(int[] arr)</cline>
<cline>{</cline>
</block><block order="8">
<cline>   int largest = arr[0];</cline>
</block><block order="2" correct="no">
<cline>   int largest = arr.get(0); </cline>
</block><block order="3">
<cline>   for (int i = 0; i &lt; arr.length; i++)</cline>
<cline>   {</cline>
</block><block order="7">
<cline>       if (largest &lt; arr[i])</cline>
<cline>       {</cline>
</block><block order="1" correct="no">
<cline>       if (largest &gt; arr[i])</cline>
<cline>       { </cline>
</block><block order="10">
<cline>           largest = arr[i];</cline>
</block><block order="6">
<cline>       } //end conditional</cline>
</block><block order="11">
<cline>   } //end for loop</cline>
</block><block order="4">
<cline>   return largest;</cline>
</block><block order="9">
<cline>} //end findLargest method</cline>
</block></blocks></exercise><exercise label="arrayex7muc" numbered="yes" adaptive="yes" indentation="hide" language="java"><statement>
        <p>The following program segment is a method that should return an integer array that is “right shifted” by one – so {6, 2, 5, 3} returns {3, 6, 2, 5} (the parameter). Note that the method return type is int[] which means it will return an int array. But, the blocks have been mixed up and include one extra block that is not needed in a correct solution.  Drag the blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</p>
</statement>
<blocks><block order="8">
<cline>public static int[] shiftRight(int[] arr)</cline>
<cline>{</cline>
</block><block order="7">
<cline>    int[] result = new int[arr.length];</cline>
</block><block order="2">
<cline>    result[0] = arr[arr.length-1];</cline>
</block><block order="4">
<cline>    for (int i = 0; i &lt; arr.length - 1; i++)</cline>
<cline>    {</cline>
</block><block order="6" correct="no">
<cline>    for (int i = 0; i &lt; arr.length; i++)</cline>
<cline>    { </cline>
</block><block order="9">
<cline>        result[i + 1] = arr[i];</cline>
</block><block order="1">
<cline>    } //end for loop</cline>
</block><block order="5">
<cline>    return result;</cline>
</block><block order="3">
<cline>} //end shiftRight method</cline>
</block></blocks></exercise><exercise label="arrayex8muc" numbered="yes" adaptive="yes" indentation="hide" language="java"><statement>
        <p>The following program segment is a method that should return a new array of length 2 containing the middle two elements of a given array of integers of even length (the parameter) – so {1,2,3,4} should return {2,3}.  But, the blocks have been mixed up and include one extra block that is not needed in a correct solution.  Drag the blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</p>
</statement>
<blocks><block order="3">
<cline>public static int[] makeMiddle(int[] arr)</cline>
<cline>{</cline>
</block><block order="5">
<cline>    int[] result = new int[2];</cline>
</block><block order="2">
<cline>    int middleIndex = (arr.length / 2) - 1;</cline>
</block><block order="7" correct="no">
<cline>    int middleIndex = (arr.length / 2); </cline>
</block><block order="6">
<cline>    result[0] = arr[middleIndex];</cline>
<cline>    result[1] = arr[middleIndex + 1];</cline>
</block><block order="1">
<cline>    return result;</cline>
</block><block order="4">
<cline>} //end makeMiddle method</cline>
</block></blocks></exercise><exercise label="arrayex9muc" numbered="yes" adaptive="yes" indentation="hide" language="java"><statement>
        <p>The following program segment is a method that should return string array that is in reverse order – so {“b”, “a”, “z”} should return {“z”, “a”, “b”}.  But, the blocks have been mixed up and include two extra blocks that are not needed in a correct solution.  Drag the blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</p>
</statement>
<blocks><block order="8">
<cline>public static String[] reverse(String[] arr)</cline>
<cline>{</cline>
</block><block order="4">
<cline>    String[] result = new String[arr.length];</cline>
</block><block order="5">
<cline>    int i = arr.length - 1;</cline>
</block><block order="1" correct="no">
<cline>    int i = arr.length; </cline>
</block><block order="7">
<cline>    for (String element: arr)</cline>
<cline>    {</cline>
</block><block order="6" correct="no">
<cline>    for (element: arr)</cline>
<cline>    { </cline>
</block><block order="10">
<cline>      result[i] = element;</cline>
</block><block order="9">
<cline>      i--;</cline>
</block><block order="11">
<cline>    } //end for loop</cline>
</block><block order="3">
<cline>    return result;</cline>
</block><block order="2">
<cline>} //end reverse method</cline>
</block></blocks></exercise><exercise label="arrayex10muc" numbered="yes" adaptive="yes" indentation="hide" language="java"><statement>
        <p>The following program copies the first half of an array given as an argument to the method into a result array which is returned. But, the blocks have been mixed up and include one extra block that is not needed in a correct solution.  Drag the blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</p>
</statement>
<blocks><block order="5">
<cline>public static int[] firstHalf(int[] arr)</cline>
<cline>{</cline>
</block><block order="1">
<cline>    int[] result = new int[arr.length / 2];</cline>
</block><block order="6">
<cline>    for (int i = 0; i &lt; result.length; i++)</cline>
<cline>    {</cline>
</block><block order="3" correct="no">
<cline>    for (int i = 0; i &lt; arr.length; i++)</cline>
<cline>    { </cline>
</block><block order="2">
<cline>      result[i] = arr[i];</cline>
</block><block order="4">
<cline>    } //end for loop</cline>
</block><block order="8">
<cline>    return result;</cline>
</block><block order="7">
<cline>} //end firstHalf method</cline>
</block></blocks></exercise>    </section>

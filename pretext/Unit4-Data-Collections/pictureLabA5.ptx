<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="pictureLabA5">
  <title>Picture Lab A5: Modifying a Picture</title>
  <introduction>
    <p>
      Even though digital pictures have millions of pixels, modern computers are
      so fast that they can process all of them quickly. You will write methods
      in the <c>Picture</c> class that modify digital pictures like the ones
      below.
    </p>

    <p>
      <datafile label="beach" filename="beach.jpg"> <image
      source="Unit4-Data-Collections/Figures/beach.jpg" height="200px" />
      </datafile> <datafile label="metalLion" filename="metalLion.jpg"
      height="200px"> <image
      source="Unit4-Data-Collections/Figures/metalLion.jpg" height="200px" />
      </datafile> <datafile label="water" filename="water.jpg"> <image
      source="Unit4-Data-Collections/Figures/water.jpg" height="200px" />
      </datafile> <datafile label="kitten" filename="kitten.jpg"> <image
      source="Unit4-Data-Collections/Figures/kitten.jpg" height="200px" />
      </datafile> <datafile label="puppies" filename="puppies.jpg"> <image
      source="Unit4-Data-Collections/Figures/puppies.jpg" height="200px" />
      </datafile> <datafile label="blueMotorcycle"
      filename="blueMotorcycle.jpg"> <image
      source="Unit4-Data-Collections/Figures/blueMotorcycle.jpg" height="200px"
      /> </datafile> <datafile label="student" filename="student.jpg"> <image
      source="Unit4-Data-Collections/Figures/student.jpg" height="200px" />
      </datafile>
    </p>

    <p>
      You can loop through all the Pixel objects in the two-dimensional array to
      modify the picture. You can get and set the red, green, and/or blue value
      for a Pixel object. You can also get and/or set the Color value for a
      Pixel object. For example,
    </p>

    <program language="java">
      <code>
Picture pict = new Picture("beach.jpg");
Pixel[][] pixels = pict.getPixels2D();
Pixel p = pixels[0][0]; // get the first pixel
int blue = p.getBlue(); // get its blue value
System.out.println("Pixel (0,0) has a blue value of " + blue );
p.setBlue(255);  // set its blue value to 255
pict.show();
      </code>
    </program>
  </introduction>

  <subsection xml:id="image-modification-exercises">
    <title>Image Modification Exercises</title>
    <image source="Unit4-Data-Collections/Figures/beach.jpg" width="45%" />
    <p>
      What do you think you will see if you modify the beach picture to set all
      the blue values to zero? Do you think you will still see a beach? Run the
      main method in the Picture class in the Active Code below. The body of the
      main method will create a Picture object named beach from the “beach.jpg”
      file and call the method that sets the blue values at all pixels to zero.
      The following code is the main method from the Picture class.
    </p>

    <program language="java">
      <code>
public static void main(String[] args)
{
  Picture pict = new Picture("beach.jpg");
  pict.show(); // show the before picture
  pict.zeroBlue();
  pict.show(); // show the after picture
}
      </code>
    </program>

    <p>
      The method <c>zeroBlue</c> in the <c>Picture</c> class gets a
      two-dimensional array of <c>Pixel</c> objects from the current picture
      (the picture the method was called on). It then declares a variable that
      will refer to a <c>Pixel</c> object named <c>pixelObj</c>. It uses a
      nested for-each loop to loop through all the pixels in the picture. Inside
      the body of the nested for-each loop it sets the blue value for the
      current pixel to zero. Note that you cannot change the elements of an
      array when you use a for-each loop. If, however, the array elements are
      references to objects that have methods that allow changes, as they are
      here, you can change the internal state of objects referenced in the
      array.
    </p>

    <p>
      The following code is the <c>zeroBlue</c> method in the <c>Picture</c>
      class.
    </p>

    <program language="java">
      <code>
public void zeroBlue()
{
     Pixel[][] pixels = this.getPixels2D();
     for (Pixel[] rowArray : pixels)
     {
          for (Pixel p : rowArray)
          {
             p.setBlue(0);
          }
     }
}
      </code>
    </program>

    <p>
      Another option is to use for loops with indices to visit each pixel in the
      picture:
    </p>

    <program language="java">
      <code>
public void zeroBlue()
{
     Pixel[][] pixels = this.getPixels2D();
     for (int row = 0; row &lt; pixels.length; row++)
     {
          for (int col = 0 ; col &lt; pixels[0].length; col++)
          {
             Pixel p = pixels[row][col];
             p.setBlue(0);
          }
     }
}
      </code>
    </program>

    <image source="Unit4-Data-Collections/Figures/keepOnlyBlue.png" width="45%" />
    <p>
      1. You may have already done this exercise in a coding challenge for 2D arrays.
      Using the <c>zeroBlue</c> method as a starting point, write the method
      <c>keepOnlyBlue</c> that will keep only the blue values, that is, it will
      set the red and green values to zero. Be sure to call the new test method
      in the <c>main</c> method.
    </p>

    <p>
      You can use beach.jpg or one of the other images seen at the bottom of
      this lesson in the active codes below which are autograded. To use your
      own images, you can fork this <url
      href="https://replit.com/@BerylHoffman/Picture-Lab"
      visual="https://replit.com/@BerylHoffman/Picture-Lab">replit.com Swing
      project</url> or this <url href="https://replit.com/@jds7184/PictureLab"
      visual="https://replit.com/@jds7184/PictureLab">alternative replit.com
      project</url> (click output.jpg to see the result) or download the project
      files form replit to your own IDE.
    </p>

    <activity label="picture-lab-A5-keepOnlyBlue">
      <statement>
        <p>
          Picture Lab keepOnlyBlue: Using zeroBlue() as a guide, write a method
          called keepOnlyBlue() that keeps only the blue values by setting the
          red and green values to zero. Change the method call in main from
          zeroBlue to keepOnlyBlue to test it. Try one of the other images below
          like metalLion.jpg, water.jpg, kitten.jpg, puppies.jpg,
          blueMotorcycle.jpg, or student.jpg.
        </p>
      </statement>

      <program interactive="activecode" language="java" datafile="pictureLab.jar,beach.jpg,metalLion.jpg, water.jpg, kitten.jpg, puppies.jpg,blueMotorcycle.jpg, student.jpg">
        <code>
import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /** zeroBlue() method sets the blue values at all pixels to zero */
    public void zeroBlue()
    {
        Pixel[][] pixels = this.getPixels2D();

        for (Pixel[] rowArray : pixels)
        {
            for (Pixel p : rowArray)
            {
                p.setBlue(0);
            }
        }
    }

    /*
       keepOnlyBlue() method sets the red and green values at all pixels to zero.

       Add new method here and call it from main.
    */

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        Picture pict = new Picture("beach.jpg");
        pict.show();
        pict.zeroBlue(); // Change this to call keepOnlyBlue()
        pict.show();
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void keepOnlyBlue()";
        boolean passed = checkCodeContains("keepOnlyBlue() method", target);
        assertTrue(passed);
    }

    @Test
    public void test1b()
    {
        String target = ".keepOnlyBlue()";
        boolean passed = checkCodeContains("Call to keepOnlyBlue() in main", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = ".setGreen(0);";
        boolean passed =
                checkCodeContains("keepOnlyBlue() setting green pixels to the number 0", target);
        assertTrue(passed);
    }

    @Test
    public void test2b()
    {
        String target = ".setRed(0);";
        boolean passed =
                checkCodeContains("keepOnlyBlue() setting red pixels to the number 0", target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "for";
        String code = getCode();
        int index = code.indexOf("public void keepOnlyBlue()");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 2;
        }
        getResults(
                "true", "" + passed, "Checking that keepOnlyBlue() contains 2 for loops", passed);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <image source="Unit4-Data-Collections/Figures/negate.jpg" width="45%" />
    <p>
      2. Write the negate method to negate all the pixels in a picture. To
      negate a picture, set the red value to 255 minus the current red value
      (use the pixel’s <c>getRed</c> method), the green value to 255 minus the
      current green value and the blue value to 255 minus the current blue
      value. Be sure to call the new test method in the main method.
    </p>

    <activity label="picture-lab-A5-negate">
      <statement>
        <p>
          Picture Lab negate: Write a method called negate() that negates all
          the pixels in a picture by setting the red value to 255 minus the
          current red value (use the pixel’s getRed() method), the green value
          to 255 minus the current green value and the blue value to 255 minus
          the current blue value. Try one of the other images below like
          beach.jpg, metalLion.jpg, water.jpg, kitten.jpg, puppies.jpg,
          blueMotorcycle.jpg, or student.jpg.
        </p>
      </statement>

      <program interactive="activecode" language="java" datafile="pictureLab.jar,beach.jpg,metalLion.jpg, water.jpg, kitten.jpg, puppies.jpg,blueMotorcycle.jpg, student.jpg">
        <code>
import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /*
       negate() method negates all the pixels in a picture by setting the red value to 255 minus the current red value (use the pixel's getRed() method), the green value to 255 minus the current green value and the blue value to 255 minus the current blue value.

       Add new method here.
    */

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        Picture pict = new Picture("puppies.jpg");
        pict.show();
        System.out.println("Negate: ");
        pict.negate();
        pict.show();
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void negate()";
        boolean passed = checkCodeContains("negate() method", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "255";
        boolean passed = checkCodeContains("negate() subtracts from 255", target);
        assertTrue(passed);
    }

    @Test
    public void test2b()
    {
        String target = ".getRed()";
        boolean passed = checkCodeContains("negate() uses get methods", target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "for";
        String code = getCode();
        int index = code.indexOf("public void negate()");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 2;
        }
        getResults("true", "" + passed, "Checking that negate() contains 2 for loops", passed);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <image source="Unit4-Data-Collections/Figures/grayscale.jpg" width="45%" />
    <p>
      3. Write the grayscale method to turn the picture into shades of gray. Set
      the red, green, and blue values to the average of the current red, green,
      and blue values (add all three values and divide by 3). Be sure to call
      the new test method in the main method.
    </p>

    <activity label="picture-lab-A5-gray-scale">
      <statement>
        <p>
          Picture Lab Grayscale: Write a method called grayscale to turn the
          picture into shades of gray. Set the red, green, and blue values to
          the average of the current red, green, and blue values (add all three
          values and divide by 3). Try another image file from beach.jpg,
          metalLion.jpg, water.jpg, kitten.jpg, puppies.jpg, blueMotorcycle.jpg,
          student.jpg.
        </p>
      </statement>

      <program interactive="activecode" language="java" datafile="pictureLab.jar,beach.jpg,metalLion.jpg, water.jpg, kitten.jpg, puppies.jpg,blueMotorcycle.jpg, student.jpg">
        <code>
import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /*
       grayscale() method sets the red, green, andblue values to the average of the current red, green, and blue values (add all three values and divide by 3).

       Add new method here.
    */

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        Picture pict = new Picture("blueMotorcycle.jpg");
        pict.show();
        System.out.println("Gray Scale: ");
        pict.grayscale();
        pict.show();
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void grayscale()";
        boolean passed = checkCodeContains("grayscale() method", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = ".getRed()";
        boolean passed = checkCodeContains("grayscale() uses get methods", target);
        assertTrue(passed);
    }

    @Test
    public void test2b()
    {
        String target = "/3";
        boolean passed =
                checkCodeContains("grayscale() divides by 3 to average the values", target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "for";
        String code = getCode();
        int index = code.indexOf("public void grayscale()");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 2;
        }
        getResults("true", "" + passed, "Checking that grayscale() contains 2 for loops", passed);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <image source="Unit4-Data-Collections/Figures/water.jpg" width="36%" />
    <image source="Unit4-Data-Collections/Figures/fixunderwater.jpg" width="36%" />
    <p>
      4. Challenge — Explore the water.jpg picture. Write a method
      fixUnderwater() to modify the pixel colors to make the fish easier to see.
      There are many ways to do this, but you could try increasing one of the
      colors by a certain factor. Here are some more complex algorithms for
      increasing the brightness and contrast of images <url
      href="https://web.archive.org/web/20240911001714/https://ie.nitk.ac.in/blog/2020/01/19/algorithms-for-adjusting-brightness-and-contrast-of-an-image/">
      https://web.archive.org/web/20240911001714/https://ie.nitk.ac.in/blog/2020/01/19/algorithms-for-adjusting-brightness-and-contrast-of-an-image/</url>.
    </p>

    <activity label="picture-lab-A5-fix-underwater">
      <statement>
        <p>
          Picture Lab fix-underwater: Write a method called fixUnderwater() to
          modify the pixel colors to make the fish easier to see. Try increasing
          one of the colors by a certain factor.
        </p>
      </statement>

      <program interactive="activecode" language="java" datafile="pictureLab.jar,beach.jpg,metalLion.jpg, water.jpg, kitten.jpg, puppies.jpg,blueMotorcycle.jpg, student.jpg">
        <code>
import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /*
       fixUnderwater() modifies the pixel colors to make the fish easier to see.

       Add new method here.
    */

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        Picture pict = new Picture("water.jpg");
        pict.show();
        System.out.println("Fix Underwater: ");
        pict.fixUnderwater();
        pict.show();
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void fixUnderwater()";
        boolean passed = checkCodeContains("fixUnderwater() method", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = ".setRed(";
        boolean passed =
                checkCodeContains(
                        "fixUnderwater() uses the setRed() method to increase red values", target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "for";
        String code = getCode();
        int index = code.indexOf("public void fixUnderwater()");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 2;
        }
        getResults(
                "true", "" + passed, "Checking that fixUnderwater() contains 2 for loops", passed);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <image source="Unit4-Data-Collections/Figures/changetshirt.png" width="27%" />
    <p>
      5. Extra Challenge — This exercise is not in the original picture lab. Can
      you change just the t-shirt color in student.jpg? You will need to use an
      if statement inside the loops to look for the red t-shirt color and then
      change it. The red pixels probably have a high red value (for example
      greater than 200) and low green and blue values (for example less than
      100). After changing the t-shirt color, try changing the background color
      or the hair color.
    </p>

    <p>
      Try the following Color Chooser (also at <url
      href="https://www.cssscript.com/demo/rgb-color-picker-slider/"
      visual="https://www.cssscript.com/demo/rgb-color-picker-slider/">https://www.cssscript.com/demo/rgb-color-picker-slider/</url>)
      by moving the sliders to try to match the red color of the shirt and see
      what range and limits the RGB color values need to be for your if
      statement:
    </p>

    <interactive iframe="iframe/colorpicker.html" width="100%" aspect="1:1" />
    <activity label="picture-lab-A5-tshirt-color">
      <statement>
        <p>
          Can you change just the t-shirt color in student.jpg? You will need to
          use an if statement inside the loops to look for the red t-shirt color
          and then change it. The red pixels probably have a high red value (for
          example greater than 200) and low green and blue values (for example
          less than 100). After changing the t-shirt color, try changing the
          background color or the hair color.
        </p>
      </statement>

      <program interactive="activecode" language="java" datafile="pictureLab.jar,beach.jpg,metalLion.jpg, water.jpg, kitten.jpg, puppies.jpg,blueMotorcycle.jpg, student.jpg">
        <code>
import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /** zeroBlue() method sets the blue values at all pixels to zero */
    public void zeroBlue()
    {
        Pixel[][] pixels = this.getPixels2D();

        for (Pixel[] rowArray : pixels)
        {
            for (Pixel p : rowArray)
            {
                p.setBlue(0);
            }
        }
    }

    /*
      changeTshirt(): Can you change just the t-shirt color in student.jpg? 
      You will need to use an if statement inside the loops 
      to look for the red t-shirt color and then change it. 
      The red pixels probably have a high red value (for 
      example greater than 200) and low green and blue values 
      (for example less than 100).

       Add new method here.
    */

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        Picture pict = new Picture("student.jpg");
        pict.show();
        System.out.println("Change tshirt color: ");
        pict.changeTshirt();
        pict.show();
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void changeTshirt()";
        boolean passed = checkCodeContains("changeTshirt() method", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "if";
        boolean passed = checkCodeContains("changeTshirt uses if statement", target);
        assertTrue(passed);
    }

    @Test
    public void test2b()
    {
        String target = ".getRed() &gt;";
        boolean passed =
                checkCodeContains("changeTshirt() chacks if getRed() greater than a value", target);
        assertTrue(passed);
    }

    @Test
    public void test2c()
    {
        String target = ".setRed(0)";
        boolean passed = checkCodeContains("changeTshirt() uses setRed(0)", target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "for";
        String code = getCode();
        int index = code.indexOf("public void changeTshirt()");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 2;
        }
        getResults(
                "true", "" + passed, "Checking that changeTshirt() contains 2 for loops", passed);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>
  </subsection>
</section>

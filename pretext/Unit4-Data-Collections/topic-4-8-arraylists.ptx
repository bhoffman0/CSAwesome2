<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="topic-4-8-arraylists">
  <title>ArrayList and its Methods</title><introduction>
    
    <figure align="left">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">A couple of lists</caption>
    <image source="Unit4-Data-Collections/Figures/lists.jpg" width="54%"/>
  </figure>
    <p>At the beginning of this unit, we learned about using arrays to hold collections of related
            data. However arrays are not very flexible. Most notably, the size of an array
            is established at the time of creation and cannot be changed. What if you don’t
            know how big the collection of data will be? What if you want to both add and
            remove items from a collection? For example, if you wanted to represent a
            shopping list, you might add to the list throughout the week and remove things
            from the list while you are shopping. You probably would not know how many items
            will be on the list at the beginning of the week.</p>
    <p>For cases like this, Java has a class called <c>ArrayList</c> which is a re-sizable
            list. It is called <c>ArrayList</c> because it stores the items that have been
            added to it in an underlying array. But it also takes care of keeping track of
            how many items have been added to the array and it will create a new bigger
            array under the covers when needed to hold more items.</p>
    <p>You can use <c>ArrayList</c> instead of arrays whenever you don’t know the size of
            the array you need or you know that you will add and remove items and may need
            to change the array’s size dynamically during run time. An <c>ArrayList</c> is
            <term>mutable</term> in size and contains object references, meaning it can change during run time by adding and removing objects from it.</p>
    <note>
            <p>An <c>ArrayList</c> is often called just a list. Prior to 2020
                the AP CSA curriculum included <term>interfaces</term> which are somewhat like classes
                and the interface <c>List</c> was often used to declare a variable that would
                refer to an <c>ArrayList</c>. Interfaces are no longer on the exam, but if you
                see <c>List</c> being used in an old exam question just assume it’s an
                <c>ArrayList</c>.</p>
        </note>
  </introduction>
  <subsection>
            <title>import java.util.ArrayList</title>
            
            
            <p>The <c>ArrayList</c> class is in the <c>java.util</c> package. A <term>package</term> is a set
                or library of related classes. The classes we have used until now, such as
                <c>String</c> and <c>Math</c>, are in the special package <c>java.lang</c> whose classes
                are always available in any Java program. Other packages, such as <c>java.util</c>,
                provide classes that can only be used either by <term>importing</term> them or (much more
                rarely) by referring to them by their full name which includes the package as a
                prefix. The full name of <c>ArrayList</c> is thus <c>java.util.ArrayList</c> but
                rather than type that out all the time, in any class where we want to use
                <c>ArrayList</c> we will usually import it with an <c>import</c> statement.</p>
            <p>Import statements have to come before the class definition in a Java source file
                and serve to tell Java which class you mean when you use a short name like
                <c>ArrayList</c>. To import just one class we use a single <c>import</c> of the
                fully-qualified name of the class like this:</p>
            <program language="java"><code>
// Import just the ArrayList class from java.util
import java.util.ArrayList;
</code></program>
            
            
            <p>After such an import statement, anywhere <c>ArrayList</c> is used as a class name
                in the file it will be taken to mean <c>java.util.ArrayList</c>.</p>
            <p>Another option is to import all the classes in a package with a “wildcard” import:</p>
            <program language="java"><code>
// Import everything in java.util including ArrayList
import java.util.*;
</code></program>
            <p>This import statement will also cause, <c>ArrayList</c> to refer
                <c>java.util.ArrayList</c>. But many other names of classes defined in the
                <c>java.util</c> package will also be available whether you use them or not. (One
                that you have probably used by now is <c>Scanner</c> which can be used to read
                input a user types at the command line.) Using wildcard imports can cause
                conflicts if you import all the classes from two different packages and they
                have class names in common but usually that’s not a problem, at least with
                packages that are part of Java itself.</p>
            <note>
                <p>Don’t worry about adding import statements on the AP CSA exam.  Any that you need will be provided for you.</p>
            </note>

    <exercise label="qlib_1">
        <statement>

            <p> Which of the following is true about import statements?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>You can only have one import statement in a source file.</p>
                </statement>
                <feedback>
                    <p>You can have an many import statements as you need.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>You must specify the class to import.</p>
                </statement>
                <feedback>
                    <p>You can use * to import all classes at the specified level.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Import statements must be before other code in a Java source file.</p>
                </statement>
                <feedback>
                    <p>Import statements have to be the first Java statements in a source file.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>You must import java.lang.String to use the short name of String.</p>
                </statement>
                <feedback>
                    <p>You do not have to import any classes that are in the java.lang package.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        </subsection>
  <subsection>
            <title>Declaring and Creating ArrayLists</title>
            <p>To declare an ArrayList use <c>ArrayList&lt;Type&gt; name</c> where <em>Type</em>, called a
                <term>type parameter</term> is the type of objects you want to store in the ArrayList.
                For example a variable naming an <c>ArrayList</c> meant to hold <c>String</c>s is
                declared as <c>ArrayList&lt;String&gt;</c> as shown in the code below.  Programmers use the letter E and call it the <term>generic type</term> for an Element.  <c>ArrayList&lt;E&gt;</c>, where the generic type <c>E</c> specifies the type of the elements. (Without it, the type will be <c>Object</c>). When <c>ArrayList&lt;E&gt;</c> is specified, the types of the reference parameters and return type when using its methods are type <c>E</c>. <c>ArrayList&lt;E&gt;</c>, where the generic type <c>E</c> specifies the type of the elements. So if E is <c>String</c>, then the type of the reference parameters and return type when using its methods are type <c>String</c>.</p>
            <p>You can declare a variable to just be of type <c>ArrayList</c>, with no type parameter, and it’ll be approximately the same as if you had declared <c>ArrayList&lt;Object&gt;</c>, but it is good practice to specify the type of objects you intend to store in an
                <c>ArrayList</c> as it allows the compiler to find errors (that are specific to that to Strings or ints or whatever type you put in) that would otherwise be
                missed until run time.</p>
            <program language="java"><code>
// ArrayList&lt;Type&gt; name = new ArrayList&lt;Type&gt;();
// An ArrayList of Strings:
ArrayList&lt;String&gt; shoppingList = new ArrayList&lt;String&gt;();
</code></program>
            <p>As with other reference types, declaring a <c>ArrayList</c> variable doesn’t
                actually create a <c>ArrayList</c> object. It only creates a variable that can
                refer to a <c>ArrayList</c> or <c>null</c>. To actually create a <c>ArrayList</c> we must
                invoke a constructor such as <c>new ArrayList&lt;String&gt;()</c>. The <c>ArrayList</c> constructor <c>ArrayList()</c> constructs an empty list.</p>
            <p>You can get the number of items in a <c>ArrayList</c> using the <c>size()</c> method.
                Notice that a newly constructed <c>ArrayList</c> is empty and thus has a size of 0.
                Also remember that you can’t call methods on <c>null</c> so trying to call <c>size</c>
                on the value of <c>list2</c> at line 10 below causes a <c>NullPointerException</c>.</p>

<exercise label="ArrayListCreateStr">
    <statement>
            <p>The following code demonstrates a NullPointerException. Change the list2 declaration so that it creates a new ArrayList to remove the NullPointerException.</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
import java.util.*; // import needed for ArrayList

public class ArrayListCreateStr
{
    public static void main(String[] args)
    {
        ArrayList&lt;String&gt; nameList = new ArrayList&lt;String&gt;();
        System.out.println("The size of nameList is: " + nameList.size());
        ArrayList&lt;String&gt; list2 = null;
        System.out.println("The size of list2 is: " + list2.size());
    }
}
</code><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ArrayListCreateStr");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "The size of nameList is: 0\nThe size of list2 is: 0";

        boolean passed = getResults(expect, output, "main()", true);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
            <p>You can also create ArrayLists of integer and double values. However, you have
                to use the wrapper classes <c>Integer</c> or <c>Double</c> as the type parameter because <c>ArrayList</c>s
                can only hold objects, not primitive values. All primitive types must be
                <term>wrapped</term> in objects before they are added to an ArrayList. For example,
                <c>int</c> values can be wrapped in <c>Integer</c> objects, <c>double</c> values can be
                wrapped in <c>Double</c> objects. However this normally happens automatically
                thanks to autoboxing.</p>
            <p>You can actually put in any kind of objects in an <c>ArrayList</c>, including
                instances of classes that you write, such as the <c>Student</c>, <c>Person</c>, or
                <c>Pet</c> classes.</p>
            <program language="java"><code>
// An ArrayList of Integers:
ArrayList&lt;Integer&gt; numList = new ArrayList&lt;Integer&gt;();
// An ArrayList of Student objects:
ArrayList&lt;Student&gt; roster = new ArrayList&lt;Student&gt;();
</code></program>

    <exercise label="qArrayListInteger">
        <statement>

            <p> Which of the following is the correct way to create an ArrayList of integers?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>ArrayList[int] numbers = new ArrayList();</p>
                </statement>
                <feedback>
                    <p>The square brackets [] are only used with arrays, not ArrayLists.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>ArrayList&lt;String&amp;gt; numbers = new ArrayList();</p>
                </statement>
                <feedback>
                    <p>String is not the correct type since this is for an array of integers, and the type should be next to ArrayList on both sides.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>ArrayList&lt;int&amp;gt; numbers = new ArrayList&lt;int&amp;gt;();</p>
                </statement>
                <feedback>
                    <p>ArrayLists cannot hold primitive types like int. You must use the wrapper class Integer.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>ArrayList&lt;Integer&amp;gt; numbers = new ArrayList&lt;Integer&amp;gt;();</p>
                </statement>
                <feedback>
                    <p>The wrapper class Integer is used to hold integers in an ArrayList.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        </subsection>
  <subsection>
            <title>ArrayList Methods</title>
            
            
            <p>The following are the <c>ArrayList</c> methods that you need to know for the AP CSA
                exam. These are included on the <url href="https://apstudents.collegeboard.org/ap/pdf/ap-computer-science-a-java-quick-reference_0.pdf" visual="https://apstudents.collegeboard.org/ap/pdf/ap-computer-science-a-java-quick-reference_0.pdf">AP CSA Java Quick Reference Sheet</url> that you will receive
                during the exam so you do not need to memorize them. The E in the method headers
                below stands for the type of the element in the ArrayList; this type E can be
                any Object type. We will look at how these methods work below.</p>
            <p><ul>
                <li>
                    <p><term>int size()</term> returns the number of elements in the list</p>
                </li>
                <li>
                    <p><term>boolean add(E obj)</term> appends obj to the end of the list and returns true</p>
                </li>
                <li>
                    <p><term>E remove(int index)</term> removes the item at the index and shifts remaining items to the left (to a lower index)</p>
                </li>
                <li>
                    <p><term>void add(int index, E obj)</term>  moves any current objects at index or beyond to the right (to a higher index) and inserts obj at the index</p>
                </li>
                <li>
                    <p><term>E get(int index)</term> returns the item in the list at the index</p>
                </li>
                <li>
                    <p><term>E set(int index, E obj)</term> replaces the item at index with obj</p>
                </li>
            </ul></p>
        </subsection>
  <subsection>
            <title><c>size()</c></title>
            
            
            <p>You can get the number of items in a <c>ArrayList</c>
                using its <c>size()</c> method. The <c>ArrayList</c> starts out empty with a size
                of 0.</p>
            <program language="java"><code>
ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();
System.out.println( list.size() );
</code></program>
            <note>
                <p>With arrays, you use the <c>length</c> field to get the number of items in the
                    array. But, with an <c>ArrayList</c> you use the <c>size()</c> method to get the
                    number of items in the <c>ArrayList</c>. You will not be penalized if you mix up
                    <c>length</c> and <c>size()</c> in the CSA exam. The number of items in an empty
                    <c>ArrayList</c> is 0.</p>
            </note>
        </subsection>
  <subsection>
            <title><c>add(obj)</c></title>
            
            
            <p>You can add values to an <c>ArrayList</c> using the method <c>add(obj)</c> which will
                add the object to the end of the list, just like you would join the end of the
                line to board a bus. Note that we can add objects of any type to an
                <c>ArrayList</c>. The following code has a <c>String</c> list and an <c>Integer</c> list.</p>

<exercise label="listAdd">
    <statement>
            <p>Can you add another item to the shopping list and print out the new list?</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
import java.util.*;

public class Shopping
{
    public static void main(String[] args)
    {
        ArrayList&lt;String&gt; shoppingList = new ArrayList&lt;String&gt;();
        System.out.println("Size: " + shoppingList.size());
        shoppingList.add("carrots");
        System.out.println(shoppingList);
        shoppingList.add("bread");
        System.out.println(shoppingList);
        shoppingList.add("chocolate");
        System.out.println(shoppingList);
        System.out.println("Size: " + shoppingList.size());
        ArrayList&lt;Integer&gt; quantities = new ArrayList&lt;Integer&gt;();
        quantities.add(2);
        quantities.add(4);
        System.out.println(quantities);
    }
}
</code><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Shopping");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect =
                "Size: 0\n"
                    + "[carrots]\n"
                    + "[carrots, bread]\n"
                    + "[carrots, bread, chocolate]\n"
                    + "Size: 3\n"
                    + "[2, 4]";

        boolean passed = !output.equals(expect);

        passed = getResults(expect, output, "Changed code", passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
            
            
            <p>Primitive types like <c>int</c> and <c>double</c> are automatically converted to their corresponding wrapper classes  <c>Integer</c> and <c>Double</c> using autoboxing when added to an <c>ArrayList</c>. When you pull an <c>int</c> value out of a list of <c>Integers</c>
                that is called <term>unboxing</term>.</p>
            <program language="java"><code>
ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();
list.add(new Integer(5)); // this will work in Java 7
list.add(5); // this will work in all Java versions
</code></program>
            <p>You can put any kind of objects into an <c>ArrayList</c>. Even instances of a class
                that you wrote. For example, here is an <c>ArrayList</c> of <c>Student</c>s.</p>
        </subsection>
  <subsection>
            <title><c>add(index,obj)</c></title>
            <p>There are actually two different <c>add</c> methods in the <c>ArrayList</c> class. The
                <c>add(obj)</c> method adds the passed object to the end of the list. The
                <c>add(index,obj)</c> method adds the passed object at the passed index, but first
                moves over any existing values to higher indices to make room for the new
                object. The indices for an <c>ArrayList</c> start at <c>0</c> and end at the number of elements <c>- 1</c>.</p>
            <note>
                <p><c>ArrayList</c>s like arrays start numbering their elements from 0.</p>
            </note>
            <p>You can step through the code above by clicking on this <problematic refid="id2">|Java Visualizer 1|</problematic>.</p>
            <p>You can step through the code above by clicking on the following <url href="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=import+java.util.*%3B%0A%0Apublic+class+ClassNameHere+%7B%0A+++public+static+void+main(String%5B%5D+args)+%7B%0A++++++%0A++++++List%3CString%3E+list1+%3D+new+ArrayList%3CString%3E()%3B%0A++++++list1.add(%22Anaya%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(%22Layla%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(%22Sharrie%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(1,+%22Sarah%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++%0A+++%7D%0A%7D&amp;mode=display&amp;curInstr=0" visual="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=import+java.util.*%3B%0A%0Apublic+class+ClassNameHere+%7B%0A+++public+static+void+main(String%5B%5D+args)+%7B%0A++++++%0A++++++List%3CString%3E+list1+%3D+new+ArrayList%3CString%3E()%3B%0A++++++list1.add(%22Anaya%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(%22Layla%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(%22Sharrie%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(1,+%22Sarah%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++%0A+++%7D%0A%7D&amp;mode=display&amp;curInstr=0">Java Visualizer</url>.</p>
        </subsection>
  <subsection>
            <title><c>remove(index)</c></title>
            
            
            <p>You can also remove values from an <c>ArrayList</c> using the <c>remove(index)</c>
                method. It removes and returns the item at the given index. This will move all
                the other items over in the underlying array and decrease the size of the
                <c>ArrayList</c> by 1.</p>
            <note>
                <p>The <c>remove(int index)</c> method will remove the object at the given index
                    and shift left any values to the right of that index. It doesn’t remove the
                    object that matches the integer value given. In the example above it doesn’t
                    remove the value 1. It removes the value 2 at index 1.</p>
            </note>
            <p>You can step through the code above by clicking on the following <url href="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=import+java.util.*%3B%0A%0Apublic+class+ClassNameHere+%7B%0A+++public+static+void+main(String%5B%5D+args)+%7B%0A++++++List%3CInteger%3E+list1+%3D+new+ArrayList%3CInteger%3E()%3B%0A++++++list1.add(new+Integer(1))%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(new+Integer(2))%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(new+Integer(3))%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.remove(2)%3B%0A++++++System.out.println(list1)%3B%0A+++%7D%0A%7D&amp;mode=display&amp;curInstr=0" visual="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=import+java.util.*%3B%0A%0Apublic+class+ClassNameHere+%7B%0A+++public+static+void+main(String%5B%5D+args)+%7B%0A++++++List%3CInteger%3E+list1+%3D+new+ArrayList%3CInteger%3E()%3B%0A++++++list1.add(new+Integer(1))%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(new+Integer(2))%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(new+Integer(3))%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.remove(2)%3B%0A++++++System.out.println(list1)%3B%0A+++%7D%0A%7D&amp;mode=display&amp;curInstr=0">RemoveExample</url>.</p>
        </subsection>
  <subsection>
            <title><c>get(index)</c> and <c>set(index, obj)</c></title>
            
            
            <p>You can get the object at an index using <c>obj = listName.get(index)</c> and set
                the object at an index using <c>listName.set(index,obj)</c>. Both methods require
                that the index argument refer to an existing element of the list, i.e. the index
                must be greater than or equal to 0 and less than the <c>size()</c> of the list.</p>
            <p>Notice that <c>ArrayList</c>s use <c>get</c> and <c>set</c> methods instead of the
                index operator that we use with arrays: <c>array[index]</c>. This is because
                <c>ArrayList</c> is a class with methods, not a built in type with special support
                in the language like arrays.</p>
            <p>You can step through the code above by clicking on the following <url href="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=import+java.util.*%3B%0A%0Apublic+class+ClassNameHere+%7B%0A+++public+static+void+main(String%5B%5D+args)+%7B%0A++++++%0A++++++ArrayList%3CInteger%3E+list1+%3D+new+ArrayList%3CInteger%3E()%3B%0A++++++list1.add(1)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(2)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(3)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.set(2,4)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(2,5)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(6)%3B%0A++++++System.out.println(list1)%3B%0A++++++%0A+++%7D%0A%7D&amp;mode=display&amp;curInstr=0" visual="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=import+java.util.*%3B%0A%0Apublic+class+ClassNameHere+%7B%0A+++public+static+void+main(String%5B%5D+args)+%7B%0A++++++%0A++++++ArrayList%3CInteger%3E+list1+%3D+new+ArrayList%3CInteger%3E()%3B%0A++++++list1.add(1)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(2)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(3)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.set(2,4)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(2,5)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(6)%3B%0A++++++System.out.println(list1)%3B%0A++++++%0A+++%7D%0A%7D&amp;mode=display&amp;curInstr=0">Example1</url>.</p>
            <p>You can step through the code above by clicking on the following <url href="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=import+java.util.*%3B%0A%0Apublic+class+ClassNameHere+%7B%0A+++public+static+void+main(String%5B%5D+args)+%7B%0A++++++%0A++++++List%3CString%3E+list1+%3D+new+ArrayList%3CString%3E()%3B%0A++++++list1.add(%22Anaya%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(%22Layla%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(%22Sharrie%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.set(1,+%22Destini%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(1,+%22Sarah%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++%0A+++%7D%0A%7D&amp;mode=display&amp;curInstr=0" visual="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=import+java.util.*%3B%0A%0Apublic+class+ClassNameHere+%7B%0A+++public+static+void+main(String%5B%5D+args)+%7B%0A++++++%0A++++++List%3CString%3E+list1+%3D+new+ArrayList%3CString%3E()%3B%0A++++++list1.add(%22Anaya%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(%22Layla%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(%22Sharrie%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.set(1,+%22Destini%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(1,+%22Sarah%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++%0A+++%7D%0A%7D&amp;mode=display&amp;curInstr=0">Example2</url>.</p>
        </subsection>
  <subsection>
            <title>Comparing arrays and <c>ArrayList</c>s</title>
            <p>When do you use arrays and when do you use <c>ArrayList</c>s? Use an array when
                you want to store several items of the same type and you know how many items
                will be in the array and the items in the array won’t change in order or number.
                Use an <c>ArrayList</c> when you want to store several items of the same type and
                you don’t know how many items you will need in the list or when you want to
                remove items from the list or add items to the list while the program is
                running.</p>
            <p>Here is a comparison of how to create arrays and <c>ArrayList</c>s:</p>
            <program language="java"><code>
// arrays must specify a size!
int[] highScores = new int[5];
String[] names = new String[5];

// ArrayLists are empty to start with
ArrayList&lt;Integer&gt; highScoreList = new ArrayList&lt;Integer&gt;();
ArrayList&lt;String&gt; nameList = new ArrayList&lt;String&gt;();
</code></program>
            <p>Here is a comparison of how to access and change elements in arrays and
                <c>ArrayList</c>s. Note that <c>ArrayList</c>s have a method <c>size()</c> instead of a
                <c>length</c> property, and <c>ArrayList</c>s use <c>get</c>/<c>set</c> methods instead of
                the index operator (<c>[]</c>).</p>
            <table><tabular>
                
                    
                    
                    
                    
                        <row header="yes">
                            <cell>
                                Operation
                            </cell>
                            <cell>
                                array
                            </cell>
                            <cell>
                                ArrayList
                            </cell>
                        </row>
                    
                    
                        <row>
                            <cell>
                                length/size
                            </cell>
                            <cell>
                                array.length
                            </cell>
                            <cell>
                                list.size()
                            </cell>
                        </row>
                        <row>
                            <cell>
                                Access
                            </cell>
                            <cell>
                                value = array[index];
                            </cell>
                            <cell>
                                value = list.get(index);
                            </cell>
                        </row>
                        <row>
                            <cell>
                                Modify
                            </cell>
                            <cell>
                                array[index] = value;
                            </cell>
                            <cell>
                                list.set(index,value);
                            </cell>
                        </row>
                    
                
            </tabular></table>
            <p>Note that the <c>ArrayList</c> methods <c>add</c> and <c>remove</c> do not have a simple
                equivalent in arrays because they change the number of elements in the list and
                may shift the positions of other elements.</p>
            <p>Here is a <url href="https://drive.google.com/file/d/1EzkHa3TNlbHOKVeZReQIf4HzuwwXsCAV/view?usp=sharing" visual="https://drive.google.com/file/d/1EzkHa3TNlbHOKVeZReQIf4HzuwwXsCAV/view?usp=sharing">comparison handout</url> of the basic operations to access 1-dimensional
                and 2-dimensional arrays (which we will see in the next lessons), <c>ArrayList</c>s,
                and <c>String</c>s made by AP CSA teacher Sam Procopio of Bishop Blanchet High
                School.</p>

<exercise label="array-to-arraylist">
    <statement>
            <p>Rewrite the following code that uses an array to use an <c>ArrayList</c>
                instead. In the comments write why you think an <c>ArrayList</c> is a better
                data structure to use than an array for this problem.</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
import java.util.*;

public class ToDoList
{
    public static void main(String[] args)
    {
        // Rewrite this code to use an ArrayList instead of an array
        String[] toDoList = new String[3];
        toDoList[0] = "Do homework";
        toDoList[1] = "Help make dinner";
        toDoList[2] = "Call grandma";

        // changing element 1
        toDoList[1] = "Order pizza";

        System.out.println(toDoList.length + " things to do!");
        System.out.println("Here's the first thing to do: " + toDoList[0]);

        // remove item 0 and move everything down
        //  (this can be done in one method call with ArrayList)
        toDoList[0] = toDoList[1];
        toDoList[1] = toDoList[2];
        toDoList[2] = "";

        System.out.println("Here's the next thing to do: " + toDoList[0]);

        // Why is an ArrayList better than an array for a toDoList?
        // Answer:
    }
}

</code><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ToDoList");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect =
                "3 things to do!\n"
                    + "Here's the first thing to do: Do homework\n"
                    + "Here's the next thing to do: Order pizza";

        boolean passed = getResults(expect, output, "Output is the same");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
         boolean passed = checkCodeContains("ArrayList&lt;String&gt;");
         assertTrue(passed);
    }
    @Test
    public void contains2()
    {
         boolean passed = checkCodeContains(".add");
         assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String expect = "[*]";

        boolean passed = checkCodeNotContains(expect);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
            <p>Although it is not on the AP exam, you can convert an array to a <c>List</c> using
                the static method <c>asList</c> from the <c>Arrays</c> helper class:
                <c>Arrays.asList(arrayname)</c>. Note that <c>ArrayList</c> has a <c>toString</c> method
                that is automatically called to print the list in a nice format.</p>

<exercise label="ArrayListFromArray">
    <statement>
            <p>Example code creating an ArrayList from an array.</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
import java.util.*;

public class ArrayListFromArray
{
    public static void main(String[] args)
    {
        String[] names = {"Dakota", "Madison", "Brooklyn"};
        ArrayList&lt;String&gt; namesList = new ArrayList&lt;String&gt;(Arrays.asList(names));
        System.out.println(namesList);
    }
}

</code><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ArrayListFromArray");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "[Dakota, Madison, Brooklyn]";

        boolean passed = getResults(expect, output, "main()", true);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
        </subsection>
  <subsection>
            <title>Coding Challenge : FRQ Digits</title>
            <p>This coding challenge is based on the <url href="https://apcentral.collegeboard.org/pdf/ap-computer-science-a-frq-2017.pdf?course=ap-computer-science-a" visual="https://apcentral.collegeboard.org/pdf/ap-computer-science-a-frq-2017.pdf?course=ap-computer-science-a">2017 Free Response Question</url> part 1a on the 2017 AP CSA
                exam. In this question, you are asked to write a constructor for a class called
                <c>Digits</c>. This constructor takes an integer number as its argument and divides
                it up into its digits and puts the digits into an <c>ArrayList</c>. For example,
                <c>new Digits(154)</c> creates an ArrayList with the digits [1, 5, 4].</p>
            <p>First, let’s discuss how to break up a number into its digits. Try the code
                below. What happens if you divide an integer by 10? Remember that in integer
                division the result truncates (cuts off) everything to the right of the decimal
                point. Which digit can you get by using <c>% 10</c> which returns the remainder
                after dividing by 10? Try a different number and guess what it will print and
                then run to check.</p>

<exercise label="divideby10">
    <statement>
            <p>Set number to a different number and guess what number / and % will return. Which operator gives you a digit in number?</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
public class DivideBy10
{
    public static void main(String[] args)
    {
        int number = 154;
        System.out.println(number / 10);
        System.out.println(number % 10);
    }
}

</code><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("DivideBy10");
    }

    @Test
    public void test1()
    {
        String origCode =
                "public class DivideBy10{public static void main(String[] args){int number ="
                    + " 154;System.out.println(number / 10);System.out.println(number % 10);}}";

        boolean changed = codeChanged(origCode);

        assertTrue(changed);
    }
}
        </tests>
    </program>
</exercise>
            <p>We can use a while loop to print out each digit in reverse order starting from
                the right (4, 5, 1 for the number 154) while dividing it by 10. You can try it
                in the active code above. Here is the pseudocode:</p>
            <p><ul>
                <li>
                    <p>while number is greater than 0</p>
                    <p><ul>
                        <li>
                            <p>print out the last digit using %</p>
                        </li>
                        <li>
                            <p>change the number to cut off the last digit using /</p>
                        </li>
                    </ul></p>
                </li>
            </ul></p>
            <p>Now, let’s write a constructor for the <c>Digits</c> class that uses this loop and
                adds each found digit to the <c>ArrayList</c> instead of printing it out.</p>
            <p>Note that this will create the digit list in reverse order. To get the digits in
                the right order, you can use the <c>add(index, obj)</c> method to add the digit to
                the beginning of the <c>ArrayList</c> instead of the end.</p>

<exercise label="challenge-digits">
    <statement>
            <p>Complete the challenge below to put the digits of a number in an ArrayList.</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
import java.util.*;

public class Digits
{
    /** A list of digits */
    private ArrayList&lt;Integer&gt; digitList;

    /** Constructs a list of digits from the given number */
    public Digits(int number)
    {
        // initialize digitList to an empty ArrayList of Integers

        // Use a while loop to add each digit in number to digitList
        //   use add(object,index) with the index 0 to add the
        //   digit to the beginning of the list instead of the end


    }

    /** returns the string representation of the digits list */
    public String toString()
    {
        return digitList.toString();
    }

    public static void main(String[] args)
    {
        Digits d1 = new Digits(154);
        System.out.println(d1);
    }
}

</code><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Digits");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "[1, 5, 4]";

        boolean passed = getResults(expect, output, "Digits(154)");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        Digits test = new Digits(123456);
        String output = test.toString();
        String expect = "[1, 2, 3, 4, 5, 6]";

        boolean passed = getResults(expect, output, "Digits(123456)");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
        </subsection>
  <subsection>
            <title>Summary</title>
            <p><ul>
                <li>
                    <p><term>ArrayLists</term> are re-sizable lists that allow adding and removing items to
                        change their size during run time.</p>
                </li>
                <li>
                    <p>(AP 4.8.A.4) The <c>ArrayList</c> class is part of the <c>java.util</c> package. An <c>import</c> statement can be used to make this class available for use in the program.(import <c>java.util.ArrayList</c> or <c>java.util.*</c>).</p>
                </li>
                <li>
                    <p>(AP 4.8.A.1) An <c>ArrayList</c> object is <term>mutable</term> in size and contains object references. (Mutable means that it can change by adding and removing items from it.</p>
                </li>
                <li>
                    <p>(AP 4.8.A.2) The <c>ArrayList</c> constructor <c>ArrayList()</c> constructs an empty list (of size 0).</p>
                </li>
                <li>
                    <p>(AP 4.8.A.3) Java allows the generic type <c>ArrayList&lt;E&gt;</c>, where the generic type <c>E</c> specifies the type of the elements. (Without it, the type will be <c>Object</c>). When <c>ArrayList&lt;E&gt;</c> is specified, the types of the reference parameters and
                        return type when using its methods are type <c>E</c>.</p>
                </li>
                <li>
                    <p>(AP 4.8.A.3) <c>ArrayList&lt;E&gt;</c> is preferred over <c>ArrayList</c> (which creates an list of of type <c>Object</c>). For example, <c>ArrayList&lt;String&gt; names = new ArrayList&lt;String&gt;();</c> allows the compiler to find errors that would otherwise be found at run time.</p>
                </li>
                <li>
                    <p><c>ArrayList</c>s cannot hold primitive types like <c>int</c> or <c>double</c>, so
                        you must use the wrapper classes <c>Integer</c> or <c>Double</c> to put numerical
                        values into an <c>ArrayList</c>. However autoboxing usually takes care of that
                        for you.</p>
                </li>
                <li>
                    <p>(AP 4.8.A.6) The indices for an <c>ArrayList</c> start at <c>0</c> and end at the number of elements <c>- 1</c>.</p>
                </li>
                <li>
                    <p>(AP 4.8.A.5) The following ArrayList methods, including what they do and when they are used, are part of the Java Quick Reference:</p>
                    <p><ul>
                        <li>
                            <p><term>int size()</term> : Returns the number of elements in the list</p>
                        </li>
                        <li>
                            <p><term>boolean add(E obj)</term> : Appends obj to end of list; returns true</p>
                        </li>
                        <li>
                            <p><term>void add(int index, E obj)</term> : Inserts obj at position index (0 &lt;= index &lt;= size), moving elements at position index and higher to the right (adds 1 to their indices) and adds 1 to size</p>
                        </li>
                        <li>
                            <p><term>remove(int index)</term> — Removes element from position index, moving elements at position index + 1 and higher to the left (subtracts 1 from their indices) and subtracts 1 from size; returns the element formerly at position index</p>
                        </li>
                        <li>
                            <p><term>E get(int index)</term> : Returns the element at position index in the list</p>
                        </li>
                        <li>
                            <p><term>E set(int index, E obj)</term> : Replaces the element at position index with obj; returns the element formerly at position index</p>
                        </li>
                    </ul></p>
                </li>
            </ul></p>
        </subsection>
  <exercises>
    <exercise label="qloopList">
        <statement>

        <p> Which of the following is a reason to use an ArrayList instead of an array?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>An ArrayList will always use less memory than an array.</p>
                </statement>
                <feedback>
                    <p>No, An ArrayList grows as needed and is typically bigger than the data put into it. If the underlying array in an ArrayList is full when adding in new data, it usually doubles in size.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>An ArrayList can store objects, but arrays can only store primitive types.</p>
                </statement>
                <feedback>
                    <p>No, you can have an array of objects.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>An ArrayList has faster access to the last element than an array.</p>
                </statement>
                <feedback>
                    <p>No, an ArrayList is implemented using an array so it has the same access time to any index as an array does.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>An ArrayList resizes itself as necessary as items are added, but an array does not.</p>
                </statement>
                <feedback>
                    <p>An ArrayList is really a dynamic array (one that can grow or shrink as needed).</p>
                </feedback>
            </choice>
</choices>

    </exercise>
  </exercises>
</section>

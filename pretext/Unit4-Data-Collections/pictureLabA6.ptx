<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by Docutils 0.17.1 -->

<section xml:id="pictureLabA6">
  <title>Picture Lab A6: Mirroring Pictures</title>
  <p>
    Car designers at General Motors Research Labs only sculpt half of a car out
    of clay and then use a vertical mirror to reflect that half to see the whole
    car. What if we want to see what a picture would look like if we placed a
    mirror on a vertical line in the center of the width of the picture to
    reflect the left side (Figure 1)?
  </p>

  <figure align="center">
    <caption>Original picture (left) and picture after mirroring (right)</caption>
    <image source="Unit4-Data-Collections/Figures/picturelabmirror1.png" width="80%" />
  </figure>

  <p>
    How can we write a method to mirror a picture in this way? One way to figure
    out the algorithm, which is a description of the steps for solving a
    problem, is to try it on smaller and simpler data. Figure 2 shows the result
    of mirroring a two-dimensional array of numbers from left to right
    vertically.
  </p>

  <figure align="center">
    <caption>
      Two-Dimensional array of numbers (left) and mirrored result (right)
    </caption>

    <image source="Unit4-Data-Collections/Figures/picturelabmirror2.png" width="80%" />
  </figure>

  <p>
    Can you figure out the algorithm for this process? Test your algorithm on
    different sizes of twodimensional arrays of integers. Will it work for 2D
    arrays with an odd number of columns? Will it work for 2D arrays with an
    even number of columns?
  </p>

  <p>
    One algorithm is to loop through all the rows and half the columns. You need
    to get a pixel from the left side of the picture and a pixel from the right
    side of the picture, which is the same distance from the right end as the
    left pixel is from the left end. Set the color of the right pixel to the
    color of the left pixel. The column number at the right end is the number of
    columns, also known as the width, minus one. So assuming there are at least
    3 pixels in a row,
  </p>

  <p>
    <ul>
      <li>
        <p>
          The first left pixel will be at row=0, col=0 and the first right pixel
          will be at row=0, col=width-1.
        </p>
      </li>

      <li>
        <p>
          The second left pixel will be at row=0, col=1 and the corresponding
          right pixel will be at row=0, col=width-1-1.
        </p>
      </li>

      <li>
        <p>
          The third left pixel will be at row=0, col=2 and its right pixel will
          be at row=0, col=width-1-2.
        </p>
      </li>

      <li>
        <p>
          Each time the left pixel is at (current row value, current column
          value), the corresponding right pixel is at (current row value, width
          - 1 - (current column value)).
        </p>
      </li>
    </ul>
  </p>

  <p>
    The following method implements this algorithm. Note that, because the
    method is not looping through all the pixels, it cannot use a nested for-
    each loop.
  </p>

  <program language="java">
    <code>
public void mirrorVertical()
{
     Pixel[][] pixels = this.getPixels2D();
     Pixel leftPixel = null;
     Pixel rightPixel = null;
     int width = pixels[0].length;
     for (int row = 0; row &lt; pixels.length; row++)
     {
          for (int col = 0; col &lt; width / 2; col++)
          {
               leftPixel = pixels[row][col];
               rightPixel = pixels[row][width - 1 - col];
               rightPixel.setColor(leftPixel.getColor());
          }
     }
}
</code>
  </program>

  <p>
    You can see <c>mirrorVertical</c> in action by running the active code in
    the exercise below.
  </p>

  <p>
    You can use caterpillar.jpg, puppy.jpg, redmotorcycle.jpg, or beach.jpg in
    the active codes below which are autograded. To use your own images, you can
    fork this <url href="https://replit.com/@BerylHoffman/Picture-Lab"
    visual="https://replit.com/@BerylHoffman/Picture-Lab">Replit Swing
    project</url> or this <url href="https://replit.com/@jds7184/PictureLab"
    visual="https://replit.com/@jds7184/PictureLab">alternative replit.com
    project</url> (click output.jpg to see the result) or download the project
    files form replit to your own IDE.
  </p>

  <image source="Unit4-Data-Collections/Figures/mirrorright.png" width="27%" />
  <p>
    1. Write the method mirrorVerticalRightToLeft that mirrors a picture around
    a mirror placed vertically from right to left, so that you get 2 tails for
    the caterpillar instead of two heads. Hint: you can copy the body of
    <c>mirrorVertical</c> and only change one line in the body of the method to
    accomplish this.
  </p>

  <hidden>
    <datafile label="caterpillar" filename="caterpillar.jpg">
      <image source="Unit4-Data-Collections/Figures/caterpillar.jpg" />
    </datafile>

    <datafile label="puppy" filename="puppy.jpg">
      <image source="Unit4-Data-Collections/Figures/puppy.jpg" />
    </datafile>

    <datafile label="redmotorcycle" filename="redMotorcycle.jpg">
      <image source="Unit4-Data-Collections/Figures/redMotorcycle.jpg" />
    </datafile>
  </hidden>

  <activity label="picture-lab-A6-mirrorVerticalRightToLeft">
    <statement>
      <p>
        Picture Lab A6 Mirroring: Write a method mirrorVerticalRightToLeft that
        mirrors a picture around a mirror placed vertically from right to left
        so that you get two tails for the caterpillar instead of two heads.
        Hint: you can copy the body of mirrorVertical and only change one line
        in the body of the method to accomplish this. Change the method call in
        the main method.
      </p>
    </statement>

    <program interactive="activecode" language="java" datafile="pictureLab.jar,caterpillar.jpg,beach.jpg,puppy.jpg,redMotorcycle.jpg">
      <code>
import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /**
     * Method that mirrors the picture around a vertical mirror in the center of
     * the picture from left to right
     */
    public void mirrorVertical()
    {
        Pixel[][] pixels = this.getPixels2D();
        Pixel leftPixel = null;
        Pixel rightPixel = null;
        int width = pixels[0].length;
        for (int row = 0; row &lt; pixels.length; row++)
        {
            for (int col = 0; col &lt; width / 2; col++)
            {
                leftPixel = pixels[row][col];
                rightPixel = pixels[row][width - 1 - col];
                rightPixel.setColor(leftPixel.getColor());
            }
        }
    }

    /*
      Write a method mirrorVerticalRightToLeft that mirrors a picture around a mirror placed vertically from right to left. Hint: you can copy the body of mirrorVertical() above and only change one line in the body of the method to accomplish this.

      Add new method here. Change the method call in main to test this.
    */

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        // or try puppy.jpg
        Picture pict = new Picture("caterpillar.jpg");
        pict.show();

        pict.mirrorVertical(); // change this to pict.mirrorVerticalRightToLeft();

        pict.show();
    }
}

</code>
      <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void mirrorVerticalRightToLeft()";
        boolean passed = checkCodeContains("mirrorVerticalRightToLeft() method", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "leftPixel.setColor(";
        boolean passed =
                checkCodeContains("mirrorVerticalRightToLeft() sets leftPixel's color", target);
        assertTrue(passed);
    }

    @Test
    public void test2b()
    {
        String target = "rightPixel.getColor(";
        boolean passed =
                checkCodeContains("mirrorVerticalRightToLeft() uses rightPixel's getColor", target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "for";
        String code = getCode();
        int index = code.indexOf("public void mirrorVerticalRightToLeft()");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 2;
        }
        getResults(
                "true",
                "" + passed,
                "Checking that mirrorVerticalRightToLeft() contains 2 for loops",
                passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
  </activity>

  <p>
    2. Write the method <c>mirrorHorizontal</c> that mirrors a picture around a
    mirror placed horizontally at the middle of the height of the picture.
    Mirror from top to bottom as shown in the pictures below (Figure 3).
  </p>

  <figure align="center">
    <caption>Original picture (left) and mirrored from top to bottom (right)</caption>
    <image source="Unit4-Data-Collections/Figures/picturelabmirror3.png" width="89%" />
  </figure>

  <activity label="picture-lab-A6-mirrorHorizontal">
    <statement>
      <p>
        Picture Lab A6 Mirroring: Write a method mirrorHorizontal that mirrors a
        picture around a mirror placed horizontally at the middle of the height
        of the picture from top to bottom. Change the bottom pixel to be the
        color of the top pixel.
      </p>
    </statement>

    <program interactive="activecode" language="java" datafile="pictureLab.jar,caterpillar.jpg,beach.jpg,puppy.jpg,redMotorcycle.jpg">
      <code>
import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /**
     * Method that mirrors the picture around a vertical mirror in the center of
     * the picture from left to right
     */
    public void mirrorVertical()
    {
        Pixel[][] pixels = this.getPixels2D();
        Pixel leftPixel = null;
        Pixel rightPixel = null;
        int width = pixels[0].length;
        for (int row = 0; row &lt; pixels.length; row++)
        {
            for (int col = 0; col &lt; width / 2; col++)
            {
                leftPixel = pixels[row][col];
                rightPixel = pixels[row][width - 1 - col];
                rightPixel.setColor(leftPixel.getColor());
            }
        }
    }

    /*
      Write a method mirrorHorizontal that mirrors a picture around a mirror placed horizontally at the middle of the height of the picture from top to bottom.

      Add new method here.
    */

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        // or try puppy.jpg or caterpillar.jpg
        Picture pict = new Picture("redMotorcycle.jpg");
        pict.show();
        pict.mirrorHorizontal();
        pict.show();
    }
}

</code>
      <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void mirrorHorizontal()";
        boolean passed = checkCodeContains("mirrorHorizontal() method", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "height = pixels.length;";
        boolean passed =
                checkCodeContains("mirrorHorizontal() sets height to pixels.length", target);
        assertTrue(passed);
    }

    @Test
    public void test2b()
    {
        String target = "height/2";
        boolean passed = checkCodeContains("mirrorHorizontal() uses height/2", target);
        assertTrue(passed);
    }

    @Test
    public void test2c()
    {
        String target = "pixels[height - row - 1][col]";
        boolean passed =
                checkCodeContains(
                        "mirrorHorizontal() uses pixels[height - row - 1][col] to get the bottom"
                            + " pixel",
                        target);
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String target = "bottomPixel.setColor(";
        boolean passed =
                checkCodeContains(
                        "mirrorHorizontal() uses bottomPixel.setColor to change the bottom pixel",
                        target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "for";
        String code = getCode();
        int index = code.indexOf("public void mirrorHorizontal()");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 2;
        }
        getResults(
                "true",
                "" + passed,
                "Checking that mirrorHorizontal() contains 2 for loops",
                passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
  </activity>

  <image source="Unit4-Data-Collections/Figures/horizontalbot2top.png" width="27%" />
  <p>
    <ol marker="1">
      <li>
        <p>
          Write the method <c>mirrorHorizontalBotToTop</c> that mirrors the
          picture around a mirror placed horizontally from bottom to top. Hint:
          you can copy the body of mirrorHorizontal and only change one line to
          accomplish this.
        </p>
      </li>
    </ol>
  </p>

  <activity label="picture-lab-A6-mirrorHorizontalBotToTop">
    <statement>
      <p>
        Picture Lab A6 Mirroring: Write the method mirrorHorizontalBotToTop that
        mirrors the picture around a mirror placed horizontally from bottom to
        top. Hint: you can copy the body of mirrorHorizontal and only change one
        line to accomplish this. Change the top pixel to the bottom pixel
        instead of the other way around.
      </p>
    </statement>

    <program interactive="activecode" language="java" datafile="pictureLab.jar,caterpillar.jpg,beach.jpg,puppy.jpg,redMotorcycle.jpg">
      <code>
import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /*
      Write the method mirrorHorizontalBotToTop that mirrors the picture around a mirror placed horizontally from bottom to top. Hint: you can copy the body of mirrorHorizontal and only change one line to accomplish this.

      Add new method here.
    */

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        // or try puppy.jpg or caterpillar.jpg
        Picture pict = new Picture("redMotorcycle.jpg");
        pict.show();
        pict.mirrorHorizontalBotToTop();
        pict.show();
    }
}

</code>
      <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void mirrorHorizontalBotToTop()";
        boolean passed = checkCodeContains("mirrorHorizontalBotToTop() method", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "height = pixels.length;";
        boolean passed =
                checkCodeContains(
                        "mirrorHorizontalBotToTop() sets height to pixels.length", target);
        assertTrue(passed);
    }

    @Test
    public void test2b()
    {
        String target = "height/2";
        boolean passed = checkCodeContains("mirrorHorizontalBotToTop() uses height/2", target);
        assertTrue(passed);
    }

    @Test
    public void test2c()
    {
        String target = "pixels[height - row - 1][col]";
        boolean passed =
                checkCodeContains(
                        "mirrorHorizontalBotToTop() uses pixels[height - row - 1][col]", target);
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String target = "topPixel.setColor(";
        boolean passed =
                checkCodeContains(
                        "mirrorHorizontalBotToTop() uses setColor to change the topPixel variable",
                        target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "for";
        String code = getCode();
        int index = code.indexOf("public void mirrorHorizontalBotToTop(");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 2;
        }
        getResults(
                "true",
                "" + passed,
                "Checking that mirrorHorizontalBotToTop() contains 2 for loops",
                passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
  </activity>

  <p>
    4. Challenge — Work in groups to figure out the algorithm for the method
    <c>mirrorDiagonal</c> that mirrors just a square part of the picture from
    bottom left to top right around a mirror placed on the diagonal line (the
    diagonal line is the one where the row index equals the column index). This
    will copy the triangular area to the left and below the diagonal line as
    shown below. This is like folding a square piece of paper from the bottom
    left to the top right, painting just the bottom left triangle and then
    (while the paint is still wet) folding the paper up to the top right again.
    The paint would be copied from the bottom left to the top right as shown in
    the pictures below (Figure 2).
  </p>

  <figure align="center">
    <caption>
      Original picture (left) and mirrored around the diagonal line with copying
      from bottom left to top right (right)
    </caption>

    <image source="Unit4-Data-Collections/Figures/picturelabmirror4.png" width="89%" />
  </figure>

  <activity label="picture-lab-A6-mirrorDiagonal">
    <statement>
      <p>
        Picture Lab A6 Mirroring: Write a method method mirrorDiagonal that
        mirrors just a square part of the picture from bottom left to top right
        around a mirror placed on the diagonal line (the diagonal line is the
        one where the row index equals the column index).
      </p>
    </statement>

    <program interactive="activecode" language="java" datafile="pictureLab.jar,caterpillar.jpg,beach.jpg,puppy.jpg,redMotorcycle.jpg">
      <code>
import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /**
     * Method that mirrors the picture around a vertical mirror in the center of
     * the picture from left to right
     */
    public void mirrorVertical()
    {
        Pixel[][] pixels = this.getPixels2D();
        Pixel leftPixel = null;
        Pixel rightPixel = null;
        int width = pixels[0].length;
        for (int row = 0; row &lt; pixels.length; row++)
        {
            for (int col = 0; col &lt; width / 2; col++)
            {
                leftPixel = pixels[row][col];
                rightPixel = pixels[row][width - 1 - col];
                rightPixel.setColor(leftPixel.getColor());
            }
        }
    }

    /*
      Write a method method mirrorDiagonal that mirrors just a square part of the picture from bottom left to top right around a mirror placed on the diagonal line (the diagonal line is the one where the row index equals the column index).

      Add new method here.
    */

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        // or try puppy.jpg or caterpillar.jpg
        Picture pict = new Picture("beach.jpg");
        pict.show();
        pict.mirrorDiagonal();
        pict.show();
    }
}

</code>
      <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void mirrorDiagonal()";
        boolean passed = checkCodeContains("mirrorDiagonal() method", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "col &lt; row";
        boolean passed = checkCodeContains("mirrorDiagonal() loops for col &lt; row", target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "for";
        String code = getCode();
        int index = code.indexOf("public void mirrorDiagonal()");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 2;
        }
        getResults(
                "true", "" + passed, "Checking that mirrorDiagonal() contains 2 for loops", passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
  </activity>
</section>


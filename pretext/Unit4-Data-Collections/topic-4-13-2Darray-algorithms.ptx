<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="topic-4-13-2Darray-algorithms">
  <title>Implementing 2D Array Algorithms</title><introduction>
    
    <idx>2D-array\ algorithms</idx>
 <idx>minimum</idx>
 <idx>maximum</idx>
 <idx>sum</idx>
 <idx>average</idx>
 <idx>pairs</idx>
 <idx>duplicates</idx>
 <idx>shift</idx>
 <idx>rotate</idx>

    <p>All of the array algorithms can be applied to 2D arrays too.
            There are standard algorithms that utilize 2D array traversals to:</p>
    <p>
      <ul>
            <li>
                <p>determine a minimum or maximum value of all the elements or for a designated row, column, or other subsection</p>
            </li>
            <li>
                <p>compute a sum or average of all the elements or for a designated row, column, or other subsection</p>
            </li>
            <li>
                <p>determine if at least one element has a particular property in the entire 2D array or for a designated row, column, or other subsection</p>
            </li>
            <li>
                <p>determine if all elements of the 2D array or a designated row, column, or other subsection have a particular property</p>
            </li>
            <li>
                <p>determine the number of elements in the 2D array or in a designated row, column, or other subsection having a particular property</p>
            </li>
            <li>
                <p>access all consecutive pairs of elements</p>
            </li>
            <li>
                <p>determine the presence or absence of duplicate elements in the 2D array or in a designated row, column, or other subsection</p>
            </li>
            <li>
                <p>shift or rotate elements in a row left or right or in a column up or down</p>
            </li>
            <li>
                <p>reverse the order of the elements in a row or column</p>
            </li>
        </ul>
    </p>
    <p>Remember that with 1D arrays, many algorithms followed the following patterns with a for loop or enhanced for loop.</p>
    <program language="java">
      <code>
// 1 Dimensional Array Traversal
for (int value : array)
{
    if (value ....)
        ...
}

for(int i=0; i &lt; array.length; i++)
{
   if (array[i] ....)
       ...
}
</code>
    </program>
    <p>But with 2D arrays, you will need to use nested loops to traverse the rows and columns of the 2D array. We often use indexed for loops for this to better control the row and column index values, but you can also use enhanced for loops.</p>
    <program language="java">
      <code>
// 2 Dimensional Array Traversal
for (int row = 0; row &lt; array.length; row++)
{
    for (int col = 0; col &lt; array[0].length; col++)
    {
        if (array[row][col] ....)
            ...
    }
}

// enhanced for loops
for (int[] row : array)
{
    for (int value : row)
    {
        if (value ....)
            ...
    }
}
</code>
    </program>
  </introduction>
  <subsection xml:id="sum-average-min-max-2d-array-algorithms">
            <title>Sum, Average, Min, Max 2D Array Algorithms</title>
            <p>For example, counting and searching algorithms work very similarly in 1D and 2D arrays. The following code adds all of the values in a given row.</p>

<exercise label="lca2dloopPart">
    <statement>
            <p>What will the following code print out? Can you complete the  method called <c>getTotalForCol</c> that gets the total for a column? To do this, you must loop through the rows. The array’s length will tell you how many rows you have since it is an array of arrays, while the length of the array’s first element will tell you how many columns.</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
public class Total
{

    public static int getTotalForRow(int row, int[][] a)
    {
        int total = 0;
        for (int col = 0; col &lt; a[0].length; col++)
        {
            total = total + a[row][col];
        }
        return total;
    }

    // Complete the method getTotalForCol below
    public static int getTotalForCol(int col, int[][] a)
    {
        int total = 0;
        // Add a loop here to total a column col

        return total;
    }

    public static void main(String[] args)
    {
        int[][] matrix = { {1, 2, 3}, {4, 5, 6}};
        System.out.println(getTotalForRow(0, matrix));
        System.out.println(getTotalForCol(0, matrix));
    }
}

</code><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Total");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "6\n5";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        int[][] array = { {1, 4, 8}, {6, 7, 9}};
        int value = 0;
        Object[] args = {value, array};

        String output = getMethodOutput("getTotalForCol", args);
        String expect = "7";

        boolean passed =
                getResults(expect, output, "Testing getTotalForCol(0, { {1, 4,8},{6, 7, 9} })");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
<exercise label="max2DArrayParsons" numbered="yes" adaptive="yes" indentation="show" language="java"><statement>
            <p>The following has the correct code to find the largest value in a 2D array. Drag the blocks from the left into the correct order on the right and indent them as well. Check your solution by clicking on the Check button.  You will be told if any of the blocks are in the wrong order or have the wrong indention.</p>
</statement>
<blocks><block order="3">
<cline>public int getLargest(int[][] arr)</cline>
<cline>{</cline>
</block><block order="7">
<cline> int largest = arr[0][0];</cline>
<cline> int current = 0;</cline>
<cline> for(int r=0;r &lt; arr.length;r++)</cline>
<cline> {</cline>
<cline> </cline>
</block><block order="2">
<cline>   for(int c=0;c &lt; arr[0].length;c++)</cline>
<cline>   {</cline>
<cline> </cline>
</block><block order="8">
<cline>     current = arr[r][c];</cline>
<cline>     if (current &gt; largest)</cline>
<cline>     {</cline>
<cline> </cline>
</block><block order="9">
<cline>       largest = current;</cline>
<cline> </cline>
</block><block order="1">
<cline>     } // end if</cline>
<cline> </cline>
</block><block order="5">
<cline>   } // end column loop</cline>
<cline> </cline>
</block><block order="6">
<cline> } // end row loop</cline>
<cline> return largest;</cline>
</block><block order="4">
<cline>} // end method</cline>
</block></blocks></exercise>            <p>You can step through this code using the Java Visualizer by clicking on the following <url href="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=public+class+Test+%7B%0A+++%0A+++public+static+int+getLargest(int%5B%5D%5B%5D+arr)++%7B%0A++++int+largest+%3D+arr%5B0%5D%5B0%5D%3B%0A++++for+(int+row+%3D+0%3B+row+%3C+arr.length%3B+row%2B%2B)++%7B%0A++++++for+(int+col+%3D+0%3B+col+%3C+arr%5B0%5D.length%3B+col%2B%2B)++%7B%0A++++++++if+(arr%5Brow%5D%5Bcol%5D+%3E+largest)++%7B%0A++++++++++largest+%3D+arr%5Brow%5D%5Bcol%5D%3B%0A++++++++%7D+//+end+if%0A++++++%7D+//+end+column+loop%0A++++%7D+//+end+row+loop%0A++++return+largest%3B%0A+++%7D+//+end+method%0A+++%0A+++public+static+void+main(String%5B%5D+args)+%7B%0A++++++int%5B%5D%5B%5D+testArray+%3D+%7B%7B-32,+-6,+-3%7D,+%7B-392,+-93,+-2%7D%7D%3B%0A++++++System.out.println(getLargest(testArray))%3B%0A+++%7D%0A%7D&amp;mode=display&amp;curInstr=40" visual="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=public+class+Test+%7B%0A+++%0A+++public+static+int+getLargest(int%5B%5D%5B%5D+arr)++%7B%0A++++int+largest+%3D+arr%5B0%5D%5B0%5D%3B%0A++++for+(int+row+%3D+0%3B+row+%3C+arr.length%3B+row%2B%2B)++%7B%0A++++++for+(int+col+%3D+0%3B+col+%3C+arr%5B0%5D.length%3B+col%2B%2B)++%7B%0A++++++++if+(arr%5Brow%5D%5Bcol%5D+%3E+largest)++%7B%0A++++++++++largest+%3D+arr%5Brow%5D%5Bcol%5D%3B%0A++++++++%7D+//+end+if%0A++++++%7D+//+end+column+loop%0A++++%7D+//+end+row+loop%0A++++return+largest%3B%0A+++%7D+//+end+method%0A+++%0A+++public+static+void+main(String%5B%5D+args)+%7B%0A++++++int%5B%5D%5B%5D+testArray+%3D+%7B%7B-32,+-6,+-3%7D,+%7B-392,+-93,+-2%7D%7D%3B%0A++++++System.out.println(getLargest(testArray))%3B%0A+++%7D%0A%7D&amp;mode=display&amp;curInstr=40">Java Visualizer</url>.</p>
        </subsection>
  <subsection xml:id="subsection-of-a-2d-array-for-a-property">
            <title>Subsection of a 2D Array for a Property</title>
            <idx><h>2D\ Array</h><h>loop\ range</h></idx>

            
            <p>You can loop through just part of a 2D array. You can change the starting value and ending value to loop through a subset of a 2D array. The following code counts the number of times a value appears in a part of the 2D array indicated by the row and column start and end values.</p>

<exercise label="lca2dloopPart2">
    <statement>
            <p>Looping through just part of a 2D array.</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
public class Count
{
    public static int countValues(int value, int[][] a, int rowStart,
                               int rowEnd, int colStart, int colEnd)
    {
        int count = 0;
        for (int row = rowStart; row &lt;= rowEnd; row++)
        {
            for (int col = colStart; col &lt;= colEnd; col++)
            {
                if (a[row][col] == value)
                {
                     count++;
                }
            }
        }
        return count;
    }

    public static void main(String[] args)
    {
        int[][] matrix = { {3, 2, 3}, {4, 3, 6}, {8, 9, 3}, {10, 3, 3}};
        System.out.println(countValues(3, matrix, 0, 2, 0, 2));
    }
}

</code><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "4";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
        </subsection>
  <subsection xml:id="duplicates-in-2d-arrays">
            <title>Duplicates in 2D Arrays</title>
            <p>You can determine the presence or absence of duplicate elements in the 2D array or in a designated row, column, or other subsection.
                With 1D arrays, we sometimes needed 2 nested loops to check for duplicates or pairs. With 2D arrays, you often need 4 nested loop to check the whole array!</p>

<exercise label="noDups2DArray">
    <statement>
            <p>The method <c>noDups(nums)</c> returns <c>true</c> if there are no repeated (duplicate) items in the array <c>nums</c>. It should return false if it does find a repeated element using nested loops.</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
public class Duplicates
{
    public static boolean noDups(int[][] nums)
    {
        for (int row = 0; row &lt; nums.length; row++)
        {
            for (int col = 0; col &lt; nums[0].length; col++)
            {
                for (int row2 = row; row2 &lt; nums.length; row2++)
                {
                    for (int col2 = col + 1; col2 &lt; nums[0].length; col2++)
                    {
                        if (nums[row][col] == nums[row2][col2])
                        {
                            return false;
                        }
                    }
                }
            }
        }
        return true;
    }

    public static void main(String[] args)
    {
        int[][] matrix = { {3, 2, 3}, {4, 3, 6}, {8, 9, 3}, {10, 3, 3}};
        System.out.println(noDups(matrix));
    }
}
        </code>
    </program>
</exercise>
        </subsection>
  <subsection xml:id="rotate-and-reverse">
            <title>Rotate and Reverse</title>
            <p>We can also rotate or reverse the order of the elements in a row or column. The following code rotates the elements in a row to the right by one position. This algorithm is very similar to the 1D array rotation algorithm since we are dealing with a single row or column.</p>

<exercise label="rotate2DArray">
    <statement>
            <field_list>
                <field>
                    <field_name>language</field_name>
                    <field_body>
                        <p>java</p>
                    </field_body>
                </field>
                <field>
                    <field_name>autograde</field_name>
                    <field_body>
                        <p>unittest</p>
                    </field_body>
                </field>
                <field>
                    <field_name>practice</field_name>
                    <field_body>
                        <p>T</p>
                    </field_body>
                </field>
            </field_list>
            <p>Create a method <c>rotateRowRight</c> that rotates the elements in a row to the right by one position. It should return the rotated array.</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
public class Rotate
{
     public static int[][] rotateRowRight(int[][] nums, int row)
     {
          int last = nums[row][nums[0].length - 1];
          // Write a backwards loop through the row's columns
          //  to copy elements at col-1 to col


          // Copy the last element to the first element at col 0


          return nums;
     }

     public static void main(String[] args)
     {
          int[][] matrix = { {3, 2, 3}, {4, 3, 6}, {8, 9, 3}, {10, 3, 3}};
          int[][] rotated = rotateRowRight(matrix, 1);
          for (int row = 0; row &lt; rotated.length; row++)
          {
            for (int col = 0; col &lt; rotated[0].length; col++)
            {
                 System.out.print(rotated[row][col] + " ");
            }
            System.out.println();
          }
     }
}

</code><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
     @Test
     public void testMain() throws IOException
     {
          String output = getMethodOutput("main");
          String expect = "3 2 3\n6 4 3\n8 9 3\n10 3 3\n";
          boolean passed = getResults(expect, output, "Expected output from main", true);
          assertTrue(passed);
     }
     @Test
        public void test2()
        {
            int[][] array = { {1, 4, 8}, {6, 7, 9}};
            int value = 0;
            Object[] args = {array, 0};

            String output = getMethodOutput("rotateRowRight", args);
            String expect = "8 1 4\n6 7 9\n";

            boolean passed =
                    getResults(expect, output, "Testing rotateRowRight({ {1, 4,8},{6, 7, 9} }, 1)");
            assertTrue(passed);
        }
}
        </tests>
    </program>
</exercise>
        </subsection>
  <subsection xml:id="review-and-frq-practice-with-2d-arrays">
            <title>Review and FRQ Practice with 2D arrays</title>
            <p>This lesson ends the 2D arrays section of this unit.
                You can now do the following review lessons and FRQs at the end of the unit
                and College Board Progress Checks in the AP Classroom.</p>
            <p><ul>
 <li><url href="a2dsummary.html" visual="a2dsummary.html">2D Arrays Summary</url></li>
 <li><url href="Array2dParsonsPractice.html" visual="Array2dParsonsPractice.html">2D Arrays Parsons Practice</url></li>
 <li><url href="a2d-toggle-problems.html" visual="a2d-toggle-problems.html">2D Arrays Toggle Problems</url></li>
 <li><url href="Array2dCodePractice.html" visual="Array2dCodePractice.html">2D Arrays Code Practice</url></li>
 <li><url href="Array2dMoreCodePractice.html" visual="Array2dMoreCodePractice.html">2D Arrays More Code Practice</url></li>
 <li><url href="a2d-Exercises.html" visual="a2d-Exercises.html">2D Arrays Exercises</url></li>
 </ul></p>
            <p>We encourage you to work in pairs or groups to tackle the following challenging FRQ problems and take them one step at a time.  These will get easier with practice!</p>
            <p><ul>
 <li><url href="grayImageA.html" visual="grayImageA.html">Gray Image A FRQ</url></li>
 <li><url href="grayImageB.html" visual="grayImageB.html">Gray Image B FRQ</url></li>
 <li><url href="routeCipherA.html" visual="routeCipherA.html">Route Cipher A FRQ</url></li>
 <li><url href="routeCipherB.html" visual="routeCipherB.html">Route Cipher B FRQ</url></li>
 </ul></p>
            <p>We also encourage you to finish the very fun Picture Lab lessons at the end of the unit in <url href="pictureLab.html" visual="pictureLab.html">PictureLab</url>.</p>
        </subsection>
</section>

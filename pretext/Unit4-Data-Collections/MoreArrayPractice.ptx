<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="MoreArrayPractice">
  <title>More Code Practice with Arrays</title>
  <exercises>
    <exercise label="sum13_written">
    <statement>
        <p>Create a method <c>sum13(nums)</c> that takes an array of integers, <c>nums</c> and
            returns the sum of the numbers in the array. However, the number 13 is
            very unlucky, so do not add it or the number that comes immediately
            after a 13 to the sum.    Return <c>0</c> if <c>nums</c> is an empty array.</p>
        <blockquote>
            <table><tabular>
                
                    
                    
                    
                        <row header="yes">
                            <cell>
                                Example Input
                            </cell>
                            <cell>
                                Expected Output
                            </cell>
                        </row>
                    
                    
                        <row>
                            <cell>
                                <c>sum13({13, 1, 2})</c>
                            </cell>
                            <cell>
                                <c>2</c>
                            </cell>
                        </row>
                        <row>
                            <cell>
                                <c>sum13({1,13})</c>
                            </cell>
                            <cell>
                                <c>1</c>
                            </cell>
                        </row>
                        <row>
                            <cell>
                                <c>sum13({4, 13, 8})</c>
                            </cell>
                            <cell>
                                <c>4</c>
                            </cell>
                        </row>
                        <row>
                            <cell>
                                <c>sum13({13, 1, 13, 3, 2})</c>
                            </cell>
                            <cell>
                                <c>2</c>
                            </cell>
                        </row>
                        <row>
                            <cell>
                                <c>sum13({})</c>
                            </cell>
                            <cell>
                                <c>0</c>
                            </cell>
                        </row>
                    
                
            </tabular></table>
        </blockquote>

    </statement>
    <program interactive="activecode" language="java">
        <code>
public class Sum13
{
   public static int sum13(int[] nums)
   {
       // ADD CODE HERE //
   }

   public static void main(String[] args)
   {
      int[] nums1 = {13, 1, 2};
      System.out.println(sum13(nums1));

      int[] nums2 = {1, 13};
      System.out.println(sum13(nums2));

      int[] nums3 = {4, 13, 8};
      System.out.println(sum13(nums3));

      int[] nums4 = {13, 1, 13, 3, 2};
      System.out.println(sum13(nums4));

      int[] nums5 = {};
      System.out.println(sum13(nums5));
  }
}

</code><tests>
import static org.junit.Assert.*;
import org.junit.Test;
import java.io.IOException;
import java.util.Arrays;

public class RunestoneTests extends CodeTestHelper {
    public RunestoneTests()
     {
        super();
    }

    @Test
    public void testSum13() throws IOException {
         String output = getMethodOutput("main");
         String expect = "2\n1\n4\n2\n0\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
   }
}
        </tests>
    </program>
</exercise>
    <exercise label="has22_written2">
    <statement>
        <p>Create a method <c>has22(nums)</c> that takes an array of integers, <c>nums</c>
            and returns <c>true</c> if there are at least two items in the list that are
            adjacent and both equal to <c>2</c>, otherwise return <c>false</c>.</p>
        <table><tabular>
            
                
                
                
                    <row header="yes">
                        <cell>
                            Example Input
                        </cell>
                        <cell>
                            Expected Output
                        </cell>
                    </row>
                
                
                    <row>
                        <cell>
                            <c>has22({1, 2, 2})</c>
                        </cell>
                        <cell>
                            <c>true</c>
                        </cell>
                    </row>
                    <row>
                        <cell>
                            <c>has22({2, 1, 2})</c>
                        </cell>
                        <cell>
                            <c>false</c>
                        </cell>
                    </row>
                    <row>
                        <cell>
                            <c>has22({2, 2, 8})</c>
                        </cell>
                        <cell>
                            <c>true</c>
                        </cell>
                    </row>
                    <row>
                        <cell>
                            <c>has22({3, 3, 5})</c>
                        </cell>
                        <cell>
                            <c>false</c>
                        </cell>
                    </row>
                
            
        </tabular></table>

    </statement>
    <program interactive="activecode" language="java">
        <code>
import java.util.Scanner;
import java.util.Arrays;

public class Has22
{
   public static boolean has22(int[] nums)
   {
       // ADD CODE HERE //

   }


   public static void main(String[] args)
   {

      int[] nums1 = {1, 2, 2};
      System.out.println(has22(nums1));

      int[] nums2 = {2, 1, 2};
      System.out.println(has22(nums2));

      int[] nums3 = {2, 2, 8};
      System.out.println(has22(nums3));

      int[] nums4 = {3, 3, 5};
      System.out.println(has22(nums4));
   }

}

</code>
	<stdin> </stdin><tests>
import static org.junit.Assert.*;
import org.junit.Test;
import java.io.IOException;
import java.util.Arrays;

public class RunestoneTests extends CodeTestHelper {
   public RunestoneTests()
     {
      super();
   }

   @Test
   public void testHas22() throws IOException {
      String output = getMethodOutput("main");
      String expect = "true\nfalse\ntrue\nfalse\n";
      boolean passed = getResults(expect, output, "Expected output from main");
      assertTrue(passed);
   }
}
        </tests>
    </program>
</exercise>
    <exercise label="total89_written">
    <statement>
        <p>Create the <c>total89(nums)</c> method below that takes an array of integers,
            <c>nums</c>, and returns the total of the numbers in <c>nums</c> except for all numbers
            in the array between an 8 and a 9 (inclusive).</p>
        <table><tabular>
            
                
                
                
                    <row header="yes">
                        <cell>
                            Example Input
                        </cell>
                        <cell>
                            Expected Output
                        </cell>
                    </row>
                
                
                    <row>
                        <cell>
                            <c>total89({1, 2})</c>
                        </cell>
                        <cell>
                            <c>3</c>
                        </cell>
                    </row>
                    <row>
                        <cell>
                            <c>total89({2, 8, 3, 9, 2})</c>
                        </cell>
                        <cell>
                            <c>4</c>
                        </cell>
                    </row>
                    <row>
                        <cell>
                            <c>total89({8, 3, 5, 9, 6})</c>
                        </cell>
                        <cell>
                            <c>6</c>
                        </cell>
                    </row>
                
            
        </tabular></table>

    </statement>
    <program interactive="activecode" language="java">
        <code>
public class Total89
{
   public static int total89(int[] nums)
   {
       // ADD CODE HERE //
   }

   public static void main(String[] args)
   {
      int[] nums1 = {1, 2};
      System.out.println(total89(nums1));

      int[] nums2 = {2, 8, 3, 9, 2};
      System.out.println(total89(nums2));

      int[] nums3 = {8, 3, 5, 9, 6};
      System.out.println(total89(nums3));
  }
}

</code><tests>
import static org.junit.Assert.*;
import org.junit.Test;
import java.io.IOException;
import java.util.Arrays;

public class RunestoneTests extends CodeTestHelper {
    public RunestoneTests()
     {
        super();
    }

    @Test
    public void testTotal89() throws IOException {
         String output = getMethodOutput("main");
         String expect = "3\n4\n6\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
   }
}
        </tests>
    </program>
</exercise>
    <exercise label="twoSum_written">
    <statement>
        <p>Create a method <c>twoSum(nums, target)</c> that takes an array of integers
            <c>nums</c> and an integer <c>target</c> and returns an array with the indices of
            two numbers such that they add up to <c>target</c>. If no two numbers add up to
            <c>target</c>, it returns an empty array. Assume that each input has exactly one
            solution, and you may not use the same element twice.</p>
        <table><tabular>
            
                
                
                
                    <row header="yes">
                        <cell>
                            Example Input
                        </cell>
                        <cell>
                            Expected Output
                        </cell>
                    </row>
                
                
                    <row>
                        <cell>
                            <c>twoSum({2,7,11,15}, 9)</c>
                        </cell>
                        <cell>
                            <c>{0, 1}</c>
                        </cell>
                    </row>
                    <row>
                        <cell>
                            <c>twoSum({2,7,11,15}, 13)</c>
                        </cell>
                        <cell>
                            <c>{0, 2}</c>
                        </cell>
                    </row>
                    <row>
                        <cell>
                            <c>twoSum({2,7,11,15}, 5)</c>
                        </cell>
                        <cell>
                            <c>{}</c>
                        </cell>
                    </row>
                
            
        </tabular></table>

    </statement>
    <program interactive="activecode" language="java">
        <code>
import java.util.Scanner;
import java.util.Arrays;

public class TwoSum
{
   public static int[] twoSum(int[] nums, int target)
   {
       // ADD CODE HERE //
   }

   public static void main(String[] args)
   {
     int[] nums = {2, 7, 11, 15};
     int target = 9;
     System.out.println(Arrays.toString(twoSum(nums, target)));
     target = 13;
     System.out.println(Arrays.toString(twoSum(nums, target)));
     target = 5;
     System.out.println(Arrays.toString(twoSum(nums, target)));
   }
}

</code>
	<stdin> </stdin><tests>
import static org.junit.Assert.*;
import org.junit.Test;
import java.io.IOException;
import java.util.Arrays;

public class RunestoneTests extends CodeTestHelper {
    public RunestoneTests()
     {
        super();
    }

    @Test
    public void testTwoSum() throws IOException {
         String output = getMethodOutput("main");
         String expect = "{0, 1}, {0, 2}, {}";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);

    }
 }
        </tests>
    </program>
</exercise>
  </exercises>
</section>

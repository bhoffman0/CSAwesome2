<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="topic-4-7-wrapper-classes">
  <title>Wrapper Classes - Integer and Double</title><introduction>
    
    <p>A <term>wrapper class</term> is a class that wraps (encloses) around a primitive data type and gives it an object appearance. The wrapper classes are part of the <c>java.lang</c> package, which is imported by default into all Java programs. The <c>Integer</c> class and <c>Double</c> class are <term>wrapper classes</term> that create objects from primitive types of <c>int</c> and <c>double</c> respectively. Sometimes you need to create a wrapped object for a primitive type so that you can give it to a method that is expecting an object, or to put it in a collection like an <c>ArrayList</c> that we will see in the next lesson. The wrapper classes are also used to convert strings to primitive data types and to convert primitive data types to strings which is useful when using the <c>Scanner</c> class with input.</p>
  </introduction>
  <subsection>
            <title>Creating <c>Integer</c> and <c>Double</c> Objects</title>
            <p>Here are some examples of creating <c>Integer</c> and <c>Double</c> objects. In Java version 7, you can use a constructor like <c>new Integer(2)</c> to create an object with the value 2 in it. In Java 9 and later, you can just use <c>Integer i = 2;</c> to create an object with the value 2 wrapped in it.  <c>Integer</c> and <c>Double</c> objects are immutable, meaning once the objects are created, their attributes (their values) cannot be changed.</p>
            <program language="java"><code>
// in older versions of Java
Integer i = new Integer(2); // create an object with 2 in it
Double d = new Double(3.5); // create an object with 3.5 in it

// in newer versions of Java (9+)
Integer i = 2;
Double d = 3.5;
</code></program>
            <p>These wrapper classes are also useful because they have some special values (like the minimum and maximum values for the type) and methods that you can use. Try the following code to see the minimum and maximum values possible for the type int.</p>

<exercise label="lcmm1">
    <statement>
            <p>What’s the minimum and maximum numbers for an int? What happens if you go beyond these limits with - 1 or + 1?</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
public class Test1
{
    public static void main(String[] args)
    {
        System.out.println(Integer.MIN_VALUE);
        System.out.println(Integer.MAX_VALUE);
        System.out.println(Integer.MIN_VALUE - 1);
        System.out.println(Integer.MAX_VALUE + 1);
    }
}

</code><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "-2147483648\n2147483647\n2147483647\n-2147483648";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
            <p>The int type in Java can be used to represent any whole number from -2147483648 to 2147483647.  Why those numbers?  Integers in Java are represented in 2’s complement binary and each integer gets 32 bits of space.  In 32 bits of space with one bit used to represent the sign you can represent that many values.  Why is there one more negative number than positive number?  It is because 0 is considered a positive number.</p>
            
            
            <p>What do the last two lines print out?  Did this surprise you?  Java will actually return the maximum integer value if you try to subtract one from the minimum value. This is called <term>underflow</term>. And, Java will return the minimum integer value if you try to add one to the maximum.  This is called <term>overflow</term>.  It is similar to how odometers work – in a really old car that reaches the maximum miles possible on the odometer, the odometer rolls over back to 0, the minimum value. In Java, any int value that surpasses 32 bits gets rolled over, so that  the Integer.MAX_VALUE 2147483647 incremented (+1) returns -2147483648 which is the Integer.MIN_VALUE.</p>
            <p>When would you ever use Integer.MIN_VALUE or Integer.MAX_VALUE?  They are handy if you want to initialize a variable to the smallest possible value and then search a sequence of values for a larger value.</p>
        </subsection>
  <subsection>
            <title>Autoboxing and Unboxing</title>
            <p><term>Autoboxing</term> is the automatic conversion that the Java compiler makes between primitive types and their corresponding object wrapper classes. This includes converting an <c>int</c> to an <c>Integer</c> and a <c>double</c> to a <c>Double</c>. The Java compiler applies autoboxing when a primitive value is passed as a parameter to a method that expects an object of the corresponding wrapper class or assigned to a variable of the corresponding wrapper class. Here’s an example of autoboxing.</p>
            <program language="java"><code>
Integer i = 2;
Double d = 3.5;
</code></program>
            <p><term>Unboxing</term> is the automatic conversion that the Java compiler makes  from the wrapper class to the primitive type. This includes converting an Integer to an int and a Double to a double. The Java compiler applies unboxing when a wrapper class object is passed as a parameter to a method that expects a value of the corresponding primitive type or assigned to a variable of the corresponding primitive type. Here’s an example of unboxing:</p>
            <program language="java"><code>
Integer i = 2;  // autoboxing - wrap 2
int number = i; // unboxing - back to primitive type
</code></program>

<exercise label="WrapperClasses">
    <statement><p>Drag the definition from the left and drop it on the correct word on the right.  Click the "Check Me" button to see if you are correct.</p></statement>
    <feedback><p>Review the vocabulary.</p></feedback>
<matches><match order="1"><premise>automatic conversion from the primitive type to the wrapper object</premise><response>autoboxing</response></match><match order="2"><premise>automatic conversion from the wrapper object to the primitive type</premise><response>unboxing</response></match><match order="3"><premise>Integer</premise><response>wrapper class</response></match><match order="4"><premise>int</premise><response>primitive type</response></match><match order="5"><premise>Integer.MAX_VALUE + 1</premise><response>overflow</response></match><match order="6"><premise>Integer.MIN_VALUE - 1 </premise><response>underflow</response></match></matches></exercise>        </subsection>
  <subsection>
            <title>Parsing Strings to Numbers</title>
            <p>The <c>Integer</c> and <c>Double</c> classes have methods called <c>Integer.parseInt</c> and <c>Double.parseDouble</c> that can be used to convert strings to numbers. They are often used with the <c>Scanner</c> class to convert input which is read in as a <c>String</c> into an <c>int</c> or <c>double</c> so that you can create arithmetic expressions (do math) or create logical conditions that test the values against other numbers using relational operators like <c>&lt;</c> and <c>&gt;</c>.  These methods are listed on the Java Quick Reference Sheet provided during the AP exam.</p>
            <p><ul>
                <li>
                    <p><c>static int parseInt(String s)</c> returns the <c>String</c> argument as a signed <c>int</c>.</p>
                </li>
                <li>
                    <p><c>static double parseDouble(String s)</c> returns the <c>String</c> argument as a signed <c>double</c>.</p>
                </li>
            </ul></p>
            <p>Here’s an example of using these methods:</p>

<exercise label="parseMethods">
    <statement>
            <p>Run the code below to see useful parse methods in the Integer and Double wrapper classes.</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
public class Test2
{
    public static void main(String[] args)
    {
        Integer i = 2;
        Double d = 3.5;
        System.out.println(
                i.intValue()); // intValue() returns the primitive value
        System.out.println(d.doubleValue());

        String ageStr = "16";
        // Integer.parseInt and Double.parseDouble are often used to
        // convert an input string to a number so you can do math on it.
        System.out.println(
                "Age "
                        + ageStr
                        + " in 10 years is "
                        + (Integer.parseInt(ageStr) + 10));

    }
}

</code><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
           String output = getMethodOutput("main");
           String expect = "2\n3.5\nAge 16 in 10 years is 26";
           boolean passed = getResults(expect, output, "Expected output from main", true);
           assertTrue(passed);

    }
}
        </tests>
    </program>
</exercise>

<exercise label="wrapperDebug">
    <statement>
            <p>Find and fix the bugs below to use the correct Integer and Double methods and variables.</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
public class Debug
{
    public static void main(String[] args)
    {
        integer i = 2.3;
        Double d = 5;
        System.out.println( i.intValue );
        System.out.println( doubleValue() );
        // Print out the min and max values possible for integers
        System.out.println(Integer.min_value);
        System.out.println( int.MAX_VALUE() );
        // parse strings to numbers
        String numStr = "2.5";
        System.out.println( Int.parseInt(numStr) * 2 );
    }
}
</code><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "2\n5.0\n-2147483648\n2147483647\n5.0";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testCode() throws IOException
    {
        String target = "Integer.MAX_VALUE";
        boolean passed = checkCodeContains("MAX_VALUE", target);
        assertTrue(passed);
    }
    @Test
    public void testCode() throws IOException
    {
        boolean passed = checkCodeContains("Double.parseDouble");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
        </subsection>
  <subsection>
            <title>Coding Challenge: Pokemon Speed</title>
            <p>In the last lesson, we read in a file of Pokemon data. In this exercise, we will read in the file and calculate the average Pokemon speed and find the Pokemon with the highest speed. The speed is the 8th column in the file; when a row of data is split into an array with the index starting at 0, the speed will have the 7th index.  We will use the <c>Integer.parseInt</c> method to convert the speed from a string to an integer so we can compare the speeds.</p>

<exercise label="challenge-pokespeed">
    <statement>
            <p>This program reads in each line from the pokemon file into a String array of lines. Complete the <c>findMaxSpeed</c> and <c>findAverageSpeed</c> methods below.</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
import java.io.*;
import java.util.*;

public class PokeSpeed
{
    private String filename = "pokemon.csv";
    private String[] pokemonLines = new String[152];

    public PokeSpeed() throws IOException
    {
        readFile(); // read in the file
    }

    /* This method reads in filename into the pokemonLines array */
    public int readFile() throws IOException
    {
        File myFile = new File(filename);
        Scanner scan = new Scanner(myFile);
        int i = 0;
        while (scan.hasNext())
        {
            pokemonLines[i] = scan.nextLine();
            i++;
        }
        System.out.println("Read in " + i + " lines.");
        scan.close();
        return i;
    }

    /* Write a function findMaxSpeed that loops through the pokemonLines array,
      splits it on commas to get the speed in the 7th index, and parses it to compare to a maxSpeed, and returns the maxSpeed.  */
    public int findMaxSpeed()
    {
        int maxSpeed = 0;
        String maxPokemonName = "";

        // 1. Loop through the pokemonLines array starting at index 1
        //     (0 is the column headers)
            // 2. Split the line on commas into a data array
            // 3. Use parseInt on the 7th element of the data array to get the  speed
            // 4. If speed is larger than maxSpeed, update maxSpeed and maxPokemonName

        // 5. Print out the maxPokemonName and return the maxSpeed
        return maxSpeed;
    }

    /* Write a function findAverageSpeed that loops through the pokemonLines array,
      splits it on commas to get the speed in the 7th index, and parses it to add it to the total, and returns the average speed.  */
    public double findAverageSpeed()
    {
        double averageSpeed = 0;
        double totalSpeed = 0;

        // Loop through the pokemonLines array, split, parse, and add up the speeds

        return averageSpeed;
    }

    public static void main(String[] args) throws IOException
    {
        PokeSpeed p = new PokeSpeed();
        System.out.println("Max speed: " + p.findMaxSpeed());
        System.out.println("Average speed: " + p.findAverageSpeed());
    }
}
</code><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
   public RunestoneTests() throws IOException
   {
       super("PokeSpeed");
   }

   @Test
   public void parseTest()
   {
       boolean passed = checkCodeContains("Integer.parseInt");
       assertTrue(passed);
   }

   @Test
   public void callFindMax() throws IOException
   {
        String output = getMethodOutput("findMaxSpeed");
        String expect = "140";
        boolean passed = getResults(expect, output, "Expected output from findMaxSpeed");
        assertTrue(passed);
    }

    @Test
     public void callAvgSpeed() throws IOException
     {
            String output = getMethodOutput("findAverageSpeed");
            String expect = "68";
            boolean passed = output.startsWith(expect);
            passed = getResults(expect, output, "Expected output from findAverageSpeed", passed);
            assertTrue(passed);
     }

   @Test
   public void splitCode()
   {
       boolean passed = checkCodeContains("call to split method", ".split");
       assertTrue(passed);
   }

   @Test
   public void speedIndexCode()
   {
       boolean passed = checkCodeContains("the correct index for the speed (7)", "[7]");
       assertTrue(passed);
   }
}
        </tests>
    </program>
</exercise>
        </subsection>
  <subsection>
            <title>Summary</title>
            <p><ul>
                <li>
                    <p>The <c>Integer</c> class and <c>Double</c> class are <term>wrapper classes</term> that create objects from primitive types.</p>
                </li>
                <li>
                    <p>(AP 4.7.A.1) The <c>Integer</c> class and <c>Double</c> class are part of the <c>java.lang</c> package.</p>
                </li>
                <li>
                    <p>(AP 4.7.A.1) An <c>Integer</c> object is immutable, meaning once an <c>Integer</c> object is created, its attributes cannot be changed. A <c>Double</c> object is immutable, meaning once a <c>Double</c> object is created, its attributes cannot be changed.</p>
                </li>
                <li>
                    <p>(AP 4.7.A.2) <term>Autoboxing</term> is the automatic conversion that the Java compiler makes between primitive types and their corresponding object wrapper classes. This includes converting an <c>int</c> to an <c>Integer</c> and a <c>double</c> to a <c>Double</c>. The Java compiler applies autoboxing when a primitive value is:</p>
                    <blockquote>
                        <p><ul>
                            <li>
                                <p>passed as a parameter to a method that expects an object of the corresponding wrapper class</p>
                            </li>
                            <li>
                                <p>assigned to a variable of the corresponding wrapper class</p>
                            </li>
                        </ul></p>
                    </blockquote>
                </li>
                <li>
                    <p>(AP 4.7.A.3) <term>Unboxing</term> is the automatic conversion that the Java compiler makes from the wrapper class to the primitive type. This includes converting an <c>Integer</c> to an <c>int</c> and a <c>Double</c> to a <c>double</c>. The Java compiler applies unboxing when a wrapper class object is:</p>
                    <blockquote>
                        <p><ul>
                            <li>
                                <p>passed as a parameter to a method that expects a value of the corresponding primitive type</p>
                            </li>
                            <li>
                                <p>assigned to a variable of the corresponding primitive type</p>
                            </li>
                        </ul></p>
                    </blockquote>
                </li>
                <li>
                    <p>(AP 4.7.A.4) The following class <c>Integer</c> method—including what it does and when it is used—is part of the Java Quick Reference: <c>static int parseInt(String s)</c> returns the <c>String</c> argument as a signed <c>int</c>.</p>
                </li>
                <li>
                    <p>(AP 4.7.A.5) The following class <c>Double</c> method—including what it does and when it is used—is part of the Java Quick Reference: <c>static double parseDouble(String s)</c> returns the <c>String</c> argument as a signed <c>double</c>.</p>
                </li>
            </ul></p>
        </subsection>
</section>

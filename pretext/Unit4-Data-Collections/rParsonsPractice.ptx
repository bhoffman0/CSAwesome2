<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="rParsonsPractice">
  <title>Mixed Up Code Practice</title>
  <p>Try to solve each of the following. Click the <em>Check Me</em> button to check each solution.  You will be told if your solution is too short, has a block in the wrong order, or you are using the wrong block.  Some of the problems have an extra block or two that aren’t needed in the correct solution.  Try to solve these on your phone or other mobile device!</p>
  <exercises>
    <exercise label="ch12ex1muc" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>The following method should reverse the order of the characters in the given string – so “abcd” should become “dcba”.  But, the blocks have been mixed up.  Drag the blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</p>
</statement>
<blocks><block order="1">
<cline>public static String reverse(String myText)</cline>
<cline>{</cline>
<cline>    if (myText.length() == 0)</cline>
<cline>    {</cline>
</block><block order="5">
<cline>        return "";</cline>
</block><block order="6">
<cline>    } //end if</cline>
</block><block order="2">
<cline>    else</cline>
<cline>    {</cline>
</block><block order="3">
<cline>        return reverse(myText.substring(1)) + myText.charAt(0);</cline>
</block><block order="4">
<cline>    } //end else</cline>
<cline>} //end method</cline>
</block></blocks></exercise>
    <exercise label="ch12ex2muc" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>The following method should multiply the two passed-in positive integers (using the fact that multiplication is repeated addition) – so multiply(3, 4) should become 12 (3+3+3+3).  But the blocks have been mixed up and include one extra block that is not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</p>
</statement>
<blocks><block order="4">
<cline>public static int multiply(int a, int b)</cline>
<cline>{</cline>
</block><block order="2">
<cline>    if (b == 0)</cline>
<cline>    {</cline>
</block><block order="5">
<cline>      return 0;</cline>
</block><block order="3" correct="no">
<cline>      return 1; </cline>
</block><block order="7">
<cline>    } //end if</cline>
</block><block order="1">
<cline>    else</cline>
<cline>    {</cline>
</block><block order="8">
<cline>      return multiply(a, b - 1) + a;</cline>
</block><block order="6">
<cline>    } //end else</cline>
<cline>} //end method</cline>
</block></blocks></exercise>
    <exercise label="ch12ex3muc" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>The following method should add up all of the elements in the passed-in array – so {1,2,3,12} should return 18 (Note when the method is called, the index will always start off as 0).  But the blocks have been mixed up and include two extra blocks that are not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</p>
</statement>
<blocks><block order="4">
<cline>public static int sumElements(int[] arr, int index)</cline>
<cline>{</cline>
</block><block order="6">
<cline>    if (index &gt;= arr.length)</cline>
<cline>    {</cline>
<cline>        return 0;</cline>
<cline>    } //end if</cline>
</block><block order="3" correct="no">
<cline>    if (index &gt;= arr.length) </cline>
<cline>    {</cline>
<cline>        return 1;</cline>
<cline>    } //end if</cline>
</block><block order="7">
<cline>    else</cline>
<cline>    {</cline>
</block><block order="1">
<cline>        return sumElements(arr, index + 1) + arr[index];</cline>
</block><block order="2" correct="no">
<cline>        return sumElements(arr, index) + arr[index]; </cline>
</block><block order="5">
<cline>    } //end else</cline>
<cline>} //end method</cline>
</block></blocks></exercise>
    <exercise label="ch12ex4muc" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>The following method should remove any occurrence of an asterisk “*” from a passed-in string – so “ab*c**d” should become “abcd”.  But the blocks have been mixed up.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</p>
</statement>
<blocks><block order="4">
<cline>public static String removeStar(String myText)</cline>
<cline>{</cline>
</block><block order="5">
<cline>    if (myText.length() == 0)</cline>
<cline>    {</cline>
<cline>       return "";</cline>
<cline>    } //end if</cline>
</block><block order="1">
<cline>    if (myText.charAt(0) == '*')</cline>
<cline>    {</cline>
<cline>       return removeStar(myText.substring(1));</cline>
<cline>    } //end if</cline>
</block><block order="2">
<cline>    return myText.charAt(0) + removeStar(myText.substring(1));</cline>
</block><block order="3">
<cline>} //end method</cline>
</block></blocks></exercise>
    <exercise label="ch12ex5muc" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>The following method should return the base multiplied power times. In other words, the base ^ power – so exponent(2, 4) should return 16.  But the blocks have been mixed up and include one extra block that is not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</p>
</statement>
<blocks><block order="6">
<cline>public static int exponent(int base, int power)</cline>
<cline>{</cline>
</block><block order="2">
<cline>    if (power == 0)</cline>
<cline>    {</cline>
</block><block order="5">
<cline>        return 1;</cline>
</block><block order="3" correct="no">
<cline>        return 0; </cline>
</block><block order="1">
<cline>    } //end if</cline>
<cline>    else</cline>
<cline>    {</cline>
</block><block order="4">
<cline>        return base * exponent(base, power - 1);</cline>
</block><block order="7">
<cline>    } //end else</cline>
<cline>} //end method</cline>
</block></blocks></exercise>
    <exercise label="ch12ex6muc" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>The following method should return the number of times “5” is an element in the passed-in array – so {1, 5, 7, 14, 5} will return 2 (Note that when the method is called the index will always start off as 0).  But the blocks have been mixed up and include two extra blocks that are not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</p>
</statement>
<blocks><block order="3">
<cline>public static int numFiveOccurrence(int[] arr, int index)</cline>
<cline>{</cline>
</block><block order="8">
<cline>    if (index &gt;= arr.length)</cline>
<cline>    {</cline>
</block><block order="9" correct="no">
<cline>    if (index &lt;= arr.length) </cline>
<cline>    {</cline>
</block><block order="4">
<cline>        return 0;</cline>
</block><block order="6">
<cline>    } //end if</cline>
<cline>    else</cline>
<cline>    {</cline>
</block><block order="5">
<cline>        if (arr[index] == 5)</cline>
<cline>        {</cline>
<cline>            return numFiveOccurrence(arr, index + 1) + 1;</cline>
<cline>        }</cline>
</block><block order="2">
<cline>        return numFiveOccurrence(arr, index + 1);</cline>
</block><block order="1" correct="no">
<cline>        return numFiveOccurrence(arr, index); </cline>
</block><block order="7">
<cline>    } //end else</cline>
<cline>} //end method</cline>
</block></blocks></exercise>
    <exercise label="ch12ex7muc" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>The following method should repeat the passed-in string a set number of times – so repeatThis(“hi”, 3) should return “hihihi”.  But the blocks have been mixed up and include two extra blocks that are not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</p>
</statement>
<blocks><block order="4">
<cline>public static String repeatThis(String s, int i)</cline>
<cline>{</cline>
</block><block order="8">
<cline>    if (i == 0)</cline>
<cline>    {</cline>
</block><block order="2" correct="no">
<cline>    if (i &gt;= 0) </cline>
<cline>    {</cline>
</block><block order="5">
<cline>       return "";</cline>
</block><block order="1">
<cline>    } //end if</cline>
<cline>    else</cline>
<cline>    {</cline>
</block><block order="6">
<cline>       return s + repeatThis(s, i-1);</cline>
</block><block order="7" correct="no">
<cline>       return repeatThis(s, i-1); </cline>
</block><block order="3">
<cline>    } //end else</cline>
<cline>} //end method</cline>
</block></blocks></exercise>
    <exercise label="ch12ex8muc" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>The following method should return number of times the character ” x ” is in a String – so findNumX(“xHihxixx”) should return 4.  But the blocks have been mixed up and include one extra block that is not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</p>
</statement>
<blocks><block order="2">
<cline>public static int findNumX(String s)</cline>
<cline>{</cline>
</block><block order="6">
<cline>    if (s.length() == 0)</cline>
<cline>    {</cline>
<cline>        return 0;</cline>
<cline>    } //end if</cline>
</block><block order="1">
<cline>    else</cline>
<cline>    {</cline>
</block><block order="7">
<cline>        if (s.charAt(0) == 'x')</cline>
<cline>        {</cline>
<cline>            return 1 + findNumX(s.substring(1));</cline>
<cline>        } //end if</cline>
</block><block order="4" correct="no">
<cline>        if (s.charAt(0) = 'x') </cline>
<cline>        {</cline>
<cline>            return 1 + findNumX(s.substring(0));</cline>
<cline>        } //end if</cline>
</block><block order="5">
<cline>        return findNumX(s.substring(1));</cline>
</block><block order="3">
<cline>    } //end else</cline>
<cline>} //end method</cline>
</block></blocks></exercise>
    <exercise label="ch12ex9muc" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>The following method should return a string counting from 1 to the specified number – so countTo(4) should return “1…2…3…4…”.  But the blocks have been mixed up and include two extra blocks that are not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</p>
</statement>
<blocks><block order="3">
<cline>public static String countTo(int x)</cline>
<cline>{</cline>
</block><block order="2">
<cline>    if (x == 0)</cline>
<cline>    {</cline>
</block><block order="5" correct="no">
<cline>    if (x == 1) </cline>
<cline>    {</cline>
</block><block order="8">
<cline>        return "";</cline>
</block><block order="1">
<cline>    } //end if</cline>
<cline>    else</cline>
<cline>    {</cline>
</block><block order="6">
<cline>        return countTo(x - 1) + x + "...";</cline>
</block><block order="7" correct="no">
<cline>        return countTo(x - 1) + (x - 1) + "..."; </cline>
</block><block order="4">
<cline>    } //end else</cline>
<cline>} //end method</cline>
</block></blocks></exercise>
    <exercise label="ch12ex10muc" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
        <p>The following method should take an passed-in number and return a string such that only the even numbers are still present. All of the odd digits should be replaced with a “_” – so 4321 should become <c>4_2_</c>.  But the blocks have been mixed up and include two extra blocks that are not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</p>
</statement>
<blocks><block order="6">
<cline>public static String displayEvenDigits(int num)</cline>
<cline>{</cline>
</block><block order="7">
<cline>    if (num == 0)</cline>
<cline>    {</cline>
<cline>        return "";</cline>
<cline>    } //end if</cline>
</block><block order="4">
<cline>    else</cline>
<cline>    {</cline>
</block><block order="1">
<cline>        if ((num % 10) % 2 == 0)</cline>
<cline>        {</cline>
</block><block order="5" correct="no">
<cline>        if ((num % 10) % 2 == 1) </cline>
<cline>        {</cline>
</block><block order="8">
<cline>            return "" + displayEvenDigits(num / 10) + (num % 10);</cline>
<cline>        } //end if</cline>
</block><block order="3">
<cline>        return displayEvenDigits(num / 10) + "_";</cline>
</block><block order="2" correct="no">
<cline>        return "_" + displayEvenDigits(num / 10); </cline>
</block><block order="9">
<cline>    } //end else</cline>
<cline>} //end method</cline>
</block></blocks></exercise>
  </exercises>
</section>

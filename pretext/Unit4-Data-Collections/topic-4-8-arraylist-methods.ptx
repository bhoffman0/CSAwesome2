<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="arraylist-methods">
  <title>ArrayList Methods</title><introduction>
    
    <p>The following are the <c>ArrayList</c> methods that you need to know for the AP CSA
            exam. These are included on the <url href="https://apstudents.collegeboard.org/ap/pdf/ap-computer-science-a-java-quick-reference_0.pdf" visual="https://apstudents.collegeboard.org/ap/pdf/ap-computer-science-a-java-quick-reference_0.pdf">AP CSA Java Quick Reference Sheet</url> that you will receive
            during the exam so you do not need to memorize them. The E in the method headers
            below stands for the type of the element in the ArrayList; this type E can be
            any Object type. We will look at how these methods work below.</p>
    <p>
      <ul>
            <li>
                <p><term>int size()</term> returns the number of elements in the list</p>
            </li>
            <li>
                <p><term>boolean add(E obj)</term> appends obj to the end of the list and returns true</p>
            </li>
            <li>
                <p><term>E remove(int index)</term> removes the item at the index and shifts remaining items to the left (to a lower index)</p>
            </li>
            <li>
                <p><term>void add(int index, E obj)</term>  moves any current objects at index or beyond to the right (to a higher index) and inserts obj at the index</p>
            </li>
            <li>
                <p><term>E get(int index)</term> returns the item in the list at the index</p>
            </li>
            <li>
                <p><term>E set(int index, E obj)</term> replaces the item at index with obj</p>
            </li>
        </ul>
    </p>
  </introduction>
  <subsection>
            <title><c>size()</c></title>
            
            
            <p>As we saw in the last lesson, you can get the number of items in a <c>ArrayList</c>
                using its <c>size()</c> method. The <c>ArrayList</c> starts out empty with a size
                of 0.</p>
            <program language="java"><input>
ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();
System.out.println( list.size() );
</input></program>
            <note>
                <p>With arrays, you use the <c>length</c> field to get the number of items in the
                    array. But, with an <c>ArrayList</c> you use the <c>size()</c> method to get the
                    number of items in the <c>ArrayList</c>. You will not be penalized if you mix up
                    <c>length</c> and <c>size()</c> in the CSA exam. The number of items in an empty
                    <c>ArrayList</c> is 0.</p>
            </note>
        </subsection>
  <subsection>
            <title><c>add(obj)</c></title>
            
            
            <p>You can add values to an <c>ArrayList</c> using the method <c>add(obj)</c> which will
                add the object to the end of the list, just like you would join the end of the
                line to board a bus.</p>
            <p><problematic refid="id1">|CodingEx|</problematic> <term>Coding Exercise</term></p>

<exercise label="listAdd1">
    <statement>
            <p>Run the code below to see how the list changes as each object is added to the
                end. Notice that we added the same string to the list more than once. Lists
                can hold duplicate objects. Can you add your name to the list and then print
                out the list?</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
import java.util.*; // import all classes in this package.

public class listAdd1
{
    public static void main(String[] args)
    {
        ArrayList&lt;String&gt; nameList = new ArrayList&lt;String&gt;();
        nameList.add("Diego");
        System.out.println(nameList);
        nameList.add("Grace");
        System.out.println(nameList);
        nameList.add("Diego");
        System.out.println(nameList);
        System.out.println(nameList.size());
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("listAdd1");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "[Diego, Grace, Diego, Your name]";
        String searchString = "\\[Diego, Grace, Diego, [A-Za-z0-9 '-,]+\\]";

        String[] lines = output.split("\n");
        String longest = lines[0];
        for (int i = 0; i &lt; lines.length; i++)
        {
            if (lines[i].length() &gt; longest.length())
            {
                 longest = lines[i];
            }
        }

        boolean passed = output.matches("[\\s\\S]+" + searchString + "[\\s\\S]*");

        passed = getResults(expect, longest, "Add your name to the list", passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
            
            
            <p>When adding Integer objects to the list, you can use the Integer constructor
                like <c>add(new Integer(5))</c> in Java version 7 which is used on the exam
                (although this is deprecated and no longer used in Java version 9) or you can
                just add the int value directly like <c>add(5)</c> in any Java version and it will
                be changed into an <c>Integer</c> object automatically. This is called
                <term>autoboxing</term>. When you pull an <c>int</c> value out of a list of <c>Integers</c>
                that is called <term>unboxing</term>.</p>
            <program language="java"><input>
ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();
list.add(new Integer(5)); // this will only work in Java 7
list.add(5); // this will work in all Java versions
</input></program>
            <p>You can put any kind of objects into an <c>ArrayList</c>. Even instances of a class
                that you wrote. For example, here is an <c>ArrayList</c> of <c>Student</c>s.</p>

<exercise label="StudentArrayList">
    <statement>
            <p>An example of an <c>ArrayList</c> of <c>Student</c> objects. Add a new student with
                your name and info in it.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
import java.util.*;

public class StudentList
{
    // main method for testing
    public static void main(String[] args)
    {
        ArrayList&lt;Student&gt; roster = new ArrayList&lt;Student&gt;();
        roster.add(new Student("Skyler", "skyler@sky.com", 123456));
        roster.add(new Student("Ayanna", "ayanna@gmail.com", 789012));

        System.out.println(roster);
    }
}

class Student
{
    private String name;
    private String email;
    private int id;

    public Student(String initName, String initEmail, int initId)
    {
        name = initName;
        email = initEmail;
        id = initId;
    }

    // toString() method
    public String toString()
    {
        return id + ": " + name + ", " + email;
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("StudentList");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "[123456: Skyler, skyler@sky.com, 789012: Ayanna, ayanna@gmail.com]";

        boolean passed = getResults(expect, output, "main()", true);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
        </subsection>
  <subsection>
            <title><c>add(index,obj)</c></title>
            <p>There are actually two different <c>add</c> methods in the <c>ArrayList</c> class. The
                <c>add(obj)</c> method adds the passed object to the end of the list. The
                <c>add(index,obj)</c> method adds the passed object at the passed index, but first
                moves over any existing values to higher indices to make room for the new
                object.</p>
            <p><problematic refid="id3">|CodingEx|</problematic> <term>Coding Exercise</term></p>

<exercise label="listAddInt2">
    <statement>
            <p>What will the code below print out? Try figuring it out before running it.
                Remember that <c>ArrayList</c>s start at index 0 and that the add(index,obj) always
                has the index as the first argument.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
import java.util.*; // import all classes in this package.

public class listAddInt2
{
    public static void main(String[] arts)
    {
        ArrayList&lt;Integer&gt; list1 = new ArrayList&lt;Integer&gt;();
        list1.add(1);
        System.out.println(list1);
        // adds the number 2 to the end of the list
        list1.add(2);
        System.out.println(list1);
        // This will add the number 3 at index 1
        list1.add(1, 3);
        System.out.println(list1);
        // This will add the number 4 at index 1
        list1.add(1, 4);
        System.out.println(list1);
        System.out.println(list1.size());
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("listAddInt2");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "[1]\n[1, 2]\n[1, 3, 2]\n[1, 4, 3, 2]\n4\n";

        boolean passed = getResults(expect, output, "main()", true);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
            <note>
                <p><c>ArrayList</c>s like arrays start numbering their elements from 0.</p>
            </note>
            <p><problematic refid="id5">|Exercise|</problematic> <term>Check your understanding</term></p>

    <exercise label="qalAdd1">
        <statement>

            <p>7-2-4: What will print when the following code executes?</p>
            <program language="java"><input>
ArrayList&lt;Integer&gt; list1 = new ArrayList&lt;Integer&gt;();
list1.add(1);
list1.add(2);
list1.add(3);
list1.add(2, 4);
list1.add(5);
System.out.println(list1);
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>[1, 2, 3, 4, 5]</p>
                </statement>
                <feedback>
                    <p>This would be true if all the <code>add</code> method calls were <code>add(value)</code>, but at least one is not.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[1, 4, 2, 3, 5]</p>
                </statement>
                <feedback>
                    <p>This would be true if it was <code>add(1, 4)</code></p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>[1, 2, 4, 3, 5]</p>
                </statement>
                <feedback>
                    <p>The <code>add(2, 4)</code> will put the 4 at index 2, but first move the 3 to index 3.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[1, 2, 4, 5]</p>
                </statement>
                <feedback>
                    <p>This would be true if the <code>add(2, 4)</code> replaced what was at index 2, but it actually moves the value currently at index 2 to index 3.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            <p>You can step through the code above by clicking on this <problematic refid="id7">|Java Visualizer 1|</problematic>.</p>

    <exercise label="qalAdd2">
        <statement>

            <p>7-2-5: What will print when the following code executes?</p>
            <program language="java"><input>
ArrayList&lt;String&gt; list1 = new ArrayList&lt;String&gt;();
list1.add("Anaya");
list1.add("Layla");
list1.add("Sharrie");
list1.add(1, "Sarah");
System.out.println(list1);
</input></program>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>["Anaya", "Sarah", "Layla", "Sharrie"]</p>
                </statement>
                <feedback>
                    <p>The <code>add(1, "Sarah")</code> will move any current items to the right and then put "Sarah" at index 1.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>["Anaya", "Layla", "Sharrie", "Sarah"]</p>
                </statement>
                <feedback>
                    <p>This would be true if the last one was <code>add("Sarah")</code></p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>["Sarah", "Anaya", "Layla", "Sharrie"]</p>
                </statement>
                <feedback>
                    <p>This would be true if the last one was <code>add(0, "Sarah")</code></p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>["Anaya", "Layla", "Sarah", "Sharrie"]</p>
                </statement>
                <feedback>
                    <p>This would be true if the last one was <code>add(2, "Sarah")</code></p>
                </feedback>
            </choice>
</choices>

    </exercise>
            <p>You can step through the code above by clicking on the following <url href="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=import+java.util.*%3B%0A%0Apublic+class+ClassNameHere+%7B%0A+++public+static+void+main(String%5B%5D+args)+%7B%0A++++++%0A++++++List%3CString%3E+list1+%3D+new+ArrayList%3CString%3E()%3B%0A++++++list1.add(%22Anaya%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(%22Layla%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(%22Sharrie%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(1,+%22Sarah%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++%0A+++%7D%0A%7D&amp;mode=display&amp;curInstr=0" visual="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=import+java.util.*%3B%0A%0Apublic+class+ClassNameHere+%7B%0A+++public+static+void+main(String%5B%5D+args)+%7B%0A++++++%0A++++++List%3CString%3E+list1+%3D+new+ArrayList%3CString%3E()%3B%0A++++++list1.add(%22Anaya%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(%22Layla%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(%22Sharrie%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(1,+%22Sarah%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++%0A+++%7D%0A%7D&amp;mode=display&amp;curInstr=0">Java Visualizer</url>.</p>
        </subsection>
  <subsection>
            <title><c>remove(index)</c></title>
            
            
            <p>You can also remove values from an <c>ArrayList</c> using the <c>remove(index)</c>
                method. It removes and returns the item at the given index. This will move all
                the other items over in the underlying array and decrease the size of the
                <c>ArrayList</c> by 1.</p>
            <p><problematic refid="id9">|CodingEx|</problematic> <term>Coding Exercise</term></p>

<exercise label="listRem">
    <statement>
            <p>What will the following code print out? Try to guess before you run it. Were you surprised? Read the note below.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
import java.util.*; // import all classes in this package.

public class listRem
{
    public static void main(String[] arts)
    {
        ArrayList&lt;Integer&gt; list1 = new ArrayList&lt;Integer&gt;();
        list1.add(1);
        list1.add(2);
        list1.add(3);
        System.out.println(list1);
        list1.remove(1);
        System.out.println(list1);
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("listRem");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "[1, 2, 3]\n[1, 3]";

        boolean passed = getResults(expect, output, "main()", true);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
            <note>
                <p>The <c>remove(int index)</c> method will remove the object at the given index
                    and shift left any values to the right of that index. It doesn’t remove the
                    object that matches the integer value given. In the example above it doesn’t
                    remove the value 1. It removes the value 2 at index 1.</p>
            </note>

    <exercise label="qListRem">
        <statement>

            <p>7-2-7: What will print when the following code executes?</p>
            <program language="java"><input>
List&lt;Integer&gt; list1 = new ArrayList&lt;Integer&gt;();
list1.add(1);
list1.add(2);
list1.add(3);
list1.remove(2);
System.out.println(list1);
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>[2, 3]</p>
                </statement>
                <feedback>
                    <p>This would be true if it was <code>remove(0)</code></p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[1, 2, 3]</p>
                </statement>
                <feedback>
                    <p>The <code>remove</code> will remove a value from the list, so this can't be correct.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>[1, 2]</p>
                </statement>
                <feedback>
                    <p>The 3 (at index 2) is removed</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[1, 3]</p>
                </statement>
                <feedback>
                    <p>This would be true if it was <code>remove(1)</code></p>
                </feedback>
            </choice>
</choices>

    </exercise>
            <p>You can step through the code above by clicking on the following <url href="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=import+java.util.*%3B%0A%0Apublic+class+ClassNameHere+%7B%0A+++public+static+void+main(String%5B%5D+args)+%7B%0A++++++List%3CInteger%3E+list1+%3D+new+ArrayList%3CInteger%3E()%3B%0A++++++list1.add(new+Integer(1))%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(new+Integer(2))%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(new+Integer(3))%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.remove(2)%3B%0A++++++System.out.println(list1)%3B%0A+++%7D%0A%7D&amp;mode=display&amp;curInstr=0" visual="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=import+java.util.*%3B%0A%0Apublic+class+ClassNameHere+%7B%0A+++public+static+void+main(String%5B%5D+args)+%7B%0A++++++List%3CInteger%3E+list1+%3D+new+ArrayList%3CInteger%3E()%3B%0A++++++list1.add(new+Integer(1))%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(new+Integer(2))%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(new+Integer(3))%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.remove(2)%3B%0A++++++System.out.println(list1)%3B%0A+++%7D%0A%7D&amp;mode=display&amp;curInstr=0">RemoveExample</url>.</p>
        </subsection>
  <subsection>
            <title><c>get(index)</c> and <c>set(index, obj)</c></title>
            
            
            <p>You can get the object at an index using <c>obj = listName.get(index)</c> and set
                the object at an index using <c>listName.set(index,obj)</c>. Both methods require
                that the index argument refer to an existing element of the list, i.e. the index
                must be greater than or equal to 0 and less than the <c>size()</c> of the list.</p>
            <p>Notice that <c>ArrayList</c>s use <c>get</c> and <c>set</c> methods instead of the
                index operator that we use with arrays: <c>array[index]</c>. This is because
                <c>ArrayList</c> is a class with methods, not a built in type with special support
                in the language like arrays.</p>
            <p><problematic refid="id11">|CodingEx|</problematic> <term>Coding Exercise</term></p>

<exercise label="listGetSet">
    <statement>
            <p>Try to guess what the code below will print before running it. Can you get the last element in the nameList to print it out? Can you set the first element in the list to your name and print out the list?</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
import java.util.*; // import all classes in this package.

public class listGetSet
{
    public static void main(String[] args)
    {
        ArrayList&lt;String&gt; nameList = new ArrayList&lt;String&gt;();
        nameList.add("Diego");
        nameList.add("Grace");
        nameList.add("Deja");
        System.out.println(nameList);
        System.out.println(nameList.get(0));
        System.out.println(nameList.get(1));
        nameList.set(1, "John");
        System.out.println(nameList);
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("listGetSet");
    }

    @Test
    public void test1()
    {
        boolean passed =
                checkCodeContainsRegex("nameList.set(0, \"Your name\")", "nameList.set(0, ");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String output = getMethodOutput("main");
        String searchString = "Deja";

        boolean passed =
                output.contains("\n" + searchString)
                        || output.matches("\\s+" + searchString + "\\s+");

        passed = getResults("true", "" + passed, "Prints last item in list (Deja)", passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
            <p><problematic refid="id13">|Exercise|</problematic> <term>Check your understanding</term></p>

    <exercise label="qListRem1">
        <statement>

            <p>7-2-9: What will print when the following code executes?</p>
            <program language="java"><input>
List&lt;Integer&gt; list1 = new ArrayList&lt;Integer&gt;();
list1.add(1);
list1.add(2);
list1.add(3);
list1.set(2, 4);
list1.add(2, 5);
list1.add(6);
System.out.println(list1);
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>[1, 2, 3, 4, 5]</p>
                </statement>
                <feedback>
                    <p>The <code>set</code> will replace the item at index 2 so this can not be right.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[1, 2, 4, 5, 6]</p>
                </statement>
                <feedback>
                    <p>The <code>add</code> with an index of 2 and a value of 5 adds the 5 at index 2 not 3. Remember that the first index is 0.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>[1, 2, 5, 4, 6]</p>
                </statement>
                <feedback>
                    <p>The <code>set</code> will change the item at index 2 to 4.  The add of 5 at index 2 will move everything else to the right and insert 5.  The last <code>add</code> will be at the end of the list.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[1, 5, 2, 4, 6]</p>
                </statement>
                <feedback>
                    <p>The <code>add</code> with an index of 2 and a value of 5 adds the 5 at index 2 not 1. Remember that the first index is 0.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            <p>You can step through the code above by clicking on the following <url href="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=import+java.util.*%3B%0A%0Apublic+class+ClassNameHere+%7B%0A+++public+static+void+main(String%5B%5D+args)+%7B%0A++++++%0A++++++ArrayList%3CInteger%3E+list1+%3D+new+ArrayList%3CInteger%3E()%3B%0A++++++list1.add(1)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(2)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(3)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.set(2,4)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(2,5)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(6)%3B%0A++++++System.out.println(list1)%3B%0A++++++%0A+++%7D%0A%7D&amp;mode=display&amp;curInstr=0" visual="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=import+java.util.*%3B%0A%0Apublic+class+ClassNameHere+%7B%0A+++public+static+void+main(String%5B%5D+args)+%7B%0A++++++%0A++++++ArrayList%3CInteger%3E+list1+%3D+new+ArrayList%3CInteger%3E()%3B%0A++++++list1.add(1)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(2)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(3)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.set(2,4)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(2,5)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(6)%3B%0A++++++System.out.println(list1)%3B%0A++++++%0A+++%7D%0A%7D&amp;mode=display&amp;curInstr=0">Example1</url>.</p>

    <exercise label="qListRem2">
        <statement>

            <p>7-2-10: What will print when the following code executes?</p>
            <program language="java"><input>
List&lt;String&gt; list1 = new ArrayList&lt;String&gt;();
list1.add("Anaya");
list1.add("Layla");
list1.add("Sharrie");
list1.set(1, "Destini");
list1.add(1, "Sarah");
System.out.println(list1);
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>["Sarah", "Destini", "Layla", "Sharrie"]</p>
                </statement>
                <feedback>
                    <p>Remember that the first index is 0 not 1.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>["Sarah", "Destini", "Anaya", "Layla", "Sharrie"]</p>
                </statement>
                <feedback>
                    <p><code>set</code> changes the value and the first index is 0 not 1.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>["Anaya", "Sarah", "Sharrie"]</p>
                </statement>
                <feedback>
                    <p><code>add</code> at index 1 adds the new value at that index but moves right any existing values.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>["Anaya", "Sarah", "Destini", "Sharrie"]</p>
                </statement>
                <feedback>
                    <p>The list is first ["Anaya", "Layla", "Sharrie"] and then changes to ["Anaya", Destini", "Sharrie"] and then to ["Anaya", "Sarah", "Destini", "Sharrie"]</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            <p>You can step through the code above by clicking on the following <url href="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=import+java.util.*%3B%0A%0Apublic+class+ClassNameHere+%7B%0A+++public+static+void+main(String%5B%5D+args)+%7B%0A++++++%0A++++++List%3CString%3E+list1+%3D+new+ArrayList%3CString%3E()%3B%0A++++++list1.add(%22Anaya%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(%22Layla%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(%22Sharrie%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.set(1,+%22Destini%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(1,+%22Sarah%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++%0A+++%7D%0A%7D&amp;mode=display&amp;curInstr=0" visual="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=import+java.util.*%3B%0A%0Apublic+class+ClassNameHere+%7B%0A+++public+static+void+main(String%5B%5D+args)+%7B%0A++++++%0A++++++List%3CString%3E+list1+%3D+new+ArrayList%3CString%3E()%3B%0A++++++list1.add(%22Anaya%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(%22Layla%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(%22Sharrie%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.set(1,+%22Destini%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++list1.add(1,+%22Sarah%22)%3B%0A++++++System.out.println(list1)%3B%0A++++++%0A+++%7D%0A%7D&amp;mode=display&amp;curInstr=0">Example2</url>.</p>
        </subsection>
  <subsection>
            <title>Comparing arrays and <c>ArrayList</c>s</title>
            <p>When do you use arrays and when do you use <c>ArrayList</c>s? Use an array when
                you want to store several items of the same type and you know how many items
                will be in the array and the items in the array won’t change in order or number.
                Use an <c>ArrayList</c> when you want to store several items of the same type and
                you don’t know how many items you will need in the list or when you want to
                remove items from the list or add items to the list while the program is
                running.</p>
            <p>Here is a comparison of how to create arrays and <c>ArrayList</c>s:</p>
            <program language="java"><input>
// arrays must specify a size!
int[] highScores = new int[5];
String[] names = new String[5];

// ArrayLists are empty to start with
ArrayList&lt;Integer&gt; highScoreList = new ArrayList&lt;Integer&gt;();
ArrayList&lt;String&gt; nameList = new ArrayList&lt;String&gt;();
</input></program>
            <p>Here is a comparison of how to access and change elements in arrays and
                <c>ArrayList</c>s. Note that <c>ArrayList</c>s have a method <c>size()</c> instead of a
                <c>length</c> property, and <c>ArrayList</c>s use <c>get</c>/<c>set</c> methods instead of
                the index operator (<c>[]</c>).</p>
            <table><tabular>
                
                    
                    
                    
                    
                        <row header="yes">
                            <cell>
                                Operation
                            </cell>
                            <cell>
                                array
                            </cell>
                            <cell>
                                ArrayList
                            </cell>
                        </row>
                    
                    
                        <row>
                            <cell>
                                length/size
                            </cell>
                            <cell>
                                array.length
                            </cell>
                            <cell>
                                list.size()
                            </cell>
                        </row>
                        <row>
                            <cell>
                                Access
                            </cell>
                            <cell>
                                value = array[index];
                            </cell>
                            <cell>
                                value = list.get(index);
                            </cell>
                        </row>
                        <row>
                            <cell>
                                Modify
                            </cell>
                            <cell>
                                array[index] = value;
                            </cell>
                            <cell>
                                list.set(index,value);
                            </cell>
                        </row>
                    
                
            </tabular></table>
            <p>Note that the <c>ArrayList</c> methods <c>add</c> and <c>remove</c> do not have a simple
                equivalent in arrays because they change the number of elements in the list and
                may shift the positions of other elements.</p>
            <p>Here is a <url href="https://drive.google.com/file/d/1EzkHa3TNlbHOKVeZReQIf4HzuwwXsCAV/view?usp=sharing" visual="https://drive.google.com/file/d/1EzkHa3TNlbHOKVeZReQIf4HzuwwXsCAV/view?usp=sharing">comparison handout</url> of the basic operations to access 1-dimensional
                and 2-dimensional arrays (which we will see in the next unit), <c>ArrayList</c>s,
                and <c>String</c>s made by AP CSA teacher Sam Procopio of Bishop Blanchet High
                School.</p>
        </subsection>
  <subsection>
            <title><problematic refid="id15">|Groupwork|</problematic> Programming Challenge : Array to ArrayList</title>

<exercise label="challenge-7-2-array-to-arraylist">
    <statement>
            <p>Rewrite the following code that uses an array to use an <c>ArrayList</c>
                instead. In the comments write why you think an <c>ArrayList</c> is a better
                data structure to use than an array for this problem.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
import java.util.*;

public class ToDoList
{
    public static void main(String[] args)
    {
        // Rewrite this code to use an ArrayList instead of an array
        String[] toDoList = new String[3];
        toDoList[0] = "Do homework";
        toDoList[1] = "Help make dinner";
        toDoList[2] = "Call grandma";

        // changing element 1
        toDoList[1] = "Order pizza";

        System.out.println(toDoList.length + " things to do!");
        System.out.println("Here's the first thing to do: " + toDoList[0]);

        // remove item 0 and move everything down
        //  (this can be done in one method call with ArrayList)
        toDoList[0] = toDoList[1];
        toDoList[1] = toDoList[2];
        toDoList[2] = "";

        System.out.println("Here's the next thing to do: " + toDoList[0]);

        // Why is an ArrayList better than an array for a toDoList?
        // Answer:
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ToDoList");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect =
                "3 things to do!\n"
                    + "Here's the first thing to do: Do homework\n"
                    + "Here's the next thing to do: Order pizza";

        boolean passed = getResults(expect, output, "Output is the same");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String output = removeSpaces(getCode());
        String expect = "ArrayList&lt;String&gt;";

        boolean passed = output.contains(expect);

        passed = getResults("true", "" + passed, "Declare ArrayList", passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String expect = "[*]";

        boolean passed = checkCodeNotContains(expect);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
        </subsection>
  <subsection>
            <title>Summary</title>
            <p><ul>
                <li>
                    <p>The following ArrayList methods, including what they do and when they are used, are part of the Java Quick Reference:</p>
                    <p><ul>
                        <li>
                            <p><term>int size()</term> : Returns the number of elements in the list</p>
                        </li>
                        <li>
                            <p><term>boolean add(E obj)</term> : Appends obj to end of list; returns true</p>
                        </li>
                        <li>
                            <p><term>void add(int index, E obj)</term> : Inserts obj at position index (0 &lt;= index &lt;= size), moving elements at position index and higher to the right (adds 1 to their indices) and adds 1 to size</p>
                        </li>
                        <li>
                            <p><term>remove(int index)</term> — Removes element from position index, moving elements at position index + 1 and higher to the left (subtracts 1 from their indices) and subtracts 1 from size; returns the element formerly at position index</p>
                        </li>
                        <li>
                            <p><term>E get(int index)</term> : Returns the element at position index in the list</p>
                        </li>
                        <li>
                            <p><term>E set(int index, E obj)</term> : Replaces the element at position index with obj; returns the element formerly at position index</p>
                        </li>
                    </ul></p>
                </li>
            </ul></p>
        </subsection>
</section>

<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by Docutils 0.17.1 -->

<section xml:id="hashmap">
  <title>Optional: HashMap (Dictionary) Data Structure</title>
  <idx>HashMap</idx>
  <p>
    In this unit, we introduced the Java data structures of arrays, ArrayLists,
    and 2D arrays. In addition to these, Java provides many other data
    collection classes in the <c>java.util</c> library that are not covered in
    the AP CSA exam. This section provides an optional introduction to a
    powerful data structure called <c>HashMap</c> which stores key-value pairs.
    In a <c>HashMap</c>, each key is unique and serves as an index that maps to
    a specific value. Other programming languages like Python call this data
    structure a dictionary. For example, given a word (the key) you can look up
    its definition (the value) in a dictionary.
  </p>

  <p>
    Here is how you use a <c>HashMap</c> in Java to create an English-Spanish
    dictionary:
  </p>

  <program language="java">
    <code>
    import java.util.*;
    
    HashMap&lt;String, String&gt; dictionary = new HashMap&lt;String, String&gt;();
    dictionary.put("cat","gato"); 
    String spanish = dictionary.get("cat");
    System.out.println("The Spanish word for cat is " + spanish);
    </code>
  </program>

  <p>
    In this example, we create a <c>HashMap</c> called <c>dictionary</c> that
    maps English words (the keys) to their Spanish translations (the values). We
    add a key-value pair using the <c>put</c> method and retrieve the value
    using the <c>get</c> method. To check if a key exists in the <c>HashMap</c>,
    you can use the <c>containsKey</c> method.
  </p>

  <p>
    We can loop through the keys and values in the <c>HashMap</c> using a for-
    each loop. Here is an example:
  </p>

  <program language="java">
    <code>
    for (String key : dictionary.keySet()) 
    {
        String value = dictionary.get(key);
        System.out.println(key + " in Spanish is " + value);
    }
    </code>
  </program>

  <p>Let's try this code out below:</p>
  <activity label="dictionaryPut">
    <statement>
      <p>
        Put more English and equivalent Spanish words into the dictionary.
      </p>
    </statement>

    <program interactive="activecode" language="java">
      <code>
import java.util.*;

public class EnglishSpanishDictionary
{
    public static void main(String[] args)
    {
        HashMap&lt;String, String&gt; dictionary = new HashMap&lt;String, String&gt;();
        // Add your words here using put
        dictionary.put("cat", "gato");
        // put the word dog and perro into the dictionary

        // add another word pair here
        
        // Print out each word and its translation using a loop
        for (String key : dictionary.keySet()) 
        {
            String value = dictionary.get(key);
            System.out.println(key + " in Spanish is " + value);
        }
    }  
}
</code>
      <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("EnglishSpanishDictionary");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect =
                "dog in Spanish is perro\n";

        boolean passed = getResults(expect, output, "Expected output");
        assertTrue(passed);
    }
}
        </tests>
    </program>
  </activity>

  <activity label="HashMapPhoneBook">
    <statement>
      <p>
        Can you create a HashMap that maps the names of your friends to their
        phone numbers? Print out the name and phone number of each friend.
      </p>
    </statement>

    <program interactive="activecode" language="java">
      <code>  
import java.util.*;   
public class FriendsPhoneBook
{
    public static void main(String[] args)
    {
        HashMap&lt;String, String&gt; phoneBook = new HashMap&lt;String, String&gt;();
        // Add your friends and their phone numbers here using put
       
        // Print out each friend's name and phone number using a loop
       
    }  
}
        </code>
      <tests>
import static org.junit.Assert.*;
import org.junit.*;
import java.io.*;
public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("FriendsPhoneBook");
    }
    @Test
    public void contains1()
    {
         boolean passed = checkCodeContains("phoneBook.put");
         assertTrue(passed);
    }
    @Test
    public void contains2()
    {
         boolean passed = checkCodeContains("phoneBook.get");
         assertTrue(passed);
    }
    @Test
    public void contains3()
    {
         boolean passed = checkCodeContains("for");
         assertTrue(passed);
    }
}
        </tests>
    </program>
  </activity>

  <p>
    There is also a newer Java <c>lambda operator</c> that you can use to
    traverse through data collections. Try it above.
  </p>

  <program language="java">
    <code>
    phoneBook.forEach((key, value) -&gt;   
              System.out.println(key + " : " + value));
    </code>
  </program>
</section>


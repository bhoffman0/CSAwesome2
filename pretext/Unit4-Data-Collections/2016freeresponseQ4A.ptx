<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="2016freeresponseQ4A">
  <title>Free Response - StringFormatter A</title><introduction>
    
    <p>The following is a free response question from 2016. It was question 4 part A on the exam. You can see all the free response questions from past exams at <url href="https://apstudents.collegeboard.org/courses/ap-computer-science-a/free-response-questions-by-year" visual="https://apstudents.collegeboard.org/courses/ap-computer-science-a/free-response-questions-by-year">https://apstudents.collegeboard.org/courses/ap-computer-science-a/free-response-questions-by-year</url>.</p>
    <p>This question involves the process of taking a list of words, called <c>wordList</c>, and producing a formatted string of a specified length.
            The list <c>wordList</c> contains at least two words, consisting of letters only.
            When the formatted string is constructed, spaces are placed in the gaps between words so that as many spaces as possible are evenly distributed to each gap.
            The equal number of spaces inserted into each gap is referred to as the basic gap width.
            Any leftover spaces are inserted one at a time into the gaps from left to right until there are no more leftover spaces.</p>
    <p>The following three examples illustrate these concepts. In each example, the list of words is to be placed into a formatted string of length 20.</p>
    <figure align="center">
      <image source="Unit4-Data-Collections/Figures/2016FRQ4A1.png" width="100%"/>
    </figure>
    <p>The leftover spaces are inserted one at a time between the words from left to right until there are no more leftover spaces.
            In this example, the first two gaps get an extra space.</p>
    <figure align="center">
      <image source="Unit4-Data-Collections/Figures/2016FRQ4A2.png" width="100%"/>
    </figure>
    <p>You will implement three static methods in a class named <c>StringFormatter</c> that is not shown.</p>
  </introduction>
  <subsection>
            <title>Part A</title>
            <p>(a) Write the <c>StringFormatter</c> method <c>totalLetters</c>, which returns the total number of letters in the words in its parameter <c>wordList</c>.
                For example, if the <c>variableList&lt;String&gt; words</c> is [“A”, “frog”, “is”],then the call <c>StringFormatter.totalLetters(words)</c> returns 7.
                You may assume that all words in <c>wordList</c> consist of one or more letters.</p>
            <p>Complete method <c>totalLetters</c> below.</p>
            <program language="java"><code>
/** Returns the total number of letters in wordList.
*  Precondition: wordList contains at least two words, consisting of letters only.
*/
public static int totalLetters(List&lt;String&gt; wordList)
</code></program>
        </subsection>
  <subsection>
            <title>How to Solve Part A</title>
            <p>Click to reveal the algorithm and multiple choice problems that may help you write your solution.</p>
            <subsection>
                <p>We need to return the total number of letters for all of the strings in <c>wordList</c>.  We will need to create an
                    integer variable to keep track of the number of letters and initialize it to 0.  Then we will loop through all of the strings in <c>wordList</c> and
                    add the length of the current string to the number of letters.  When the loop is finished we will return the number of letters.</p>
            </subsection>
            <exercises line="68" runestone_options="{'showtitle': 'data-showtitle=&quot;Reveal Problems&quot;', 'hidetitle': 'data-hidetitle=&quot;Hide Problems&quot;', 'optional': 'data-optional=true', 'subchapter': '2016freeresponseQ4A', 'chapter': 'Unit4-Data-Collections', 'basecourse': 'csawesome2beta', 'optclass': '', 'divid': 'fr_formatter_r1', 'instructoronly': '', 'is_dynamic': 'True'}" source="/mnt/c/Users/hoffmanb/Documents/Github/CSAwesome2/_fixed_sources/Unit4-Data-Collections/2016freeresponseQ4A.rst">

    <exercise label="fr_formatter_1">
        <statement>

                <p> Which loop would be best for this problem?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>while</p>
                </statement>
                <feedback>
                    <p>A while loop is the best choice when you don't know the number of times you need to loop.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>for</p>
                </statement>
                <feedback>
                    <p>You could use a for loop, but there is a more concise option since you are not changing any values of wordList.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>for-each</p>
                </statement>
                <feedback>
                    <p>Correct! A for-each loop is the most concise way to access every string in wordList to keep track of numLetters</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="fr_formatter_2">
        <statement>

                <p> What is the correct way to access the length of a String str?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>str.size()</p>
                </statement>
                <feedback>
                    <p>.size() is not the correct method call to find the length of a string. .size() is used with ArrayLists. Try again!</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>str.length()</p>
                </statement>
                <feedback>
                    <p>Correct! str.length() will return the length of String str.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>str.length</p>
                </statement>
                <feedback>
                    <p>Almost! length() is a method call, so parentheses are required.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            </exercises>
        </subsection>
  <subsection>
            <title>Put the Code in Order</title>
            <exercises line="100" runestone_options="{'showtitle': 'data-showtitle=&quot;Reveal Mixed Up Code&quot;', 'hidetitle': 'data-hidetitle=&quot;Hide Mixed Up Code&quot;', 'subchapter': '2016freeresponseQ4A', 'chapter': 'Unit4-Data-Collections', 'basecourse': 'csawesome2beta', 'optional': '', 'optclass': '', 'divid': 'stringFormatterA_parsons', 'instructoronly': '', 'is_dynamic': 'True'}" source="/mnt/c/Users/hoffmanb/Documents/Github/CSAwesome2/_fixed_sources/Unit4-Data-Collections/2016freeresponseQ4A.rst">
<exercise label="stringFormatterA" numbered="yes" adaptive="yes" indentation="show" language="python"><statement>
                <p>The following has the correct code to solve this problem, but also contains extra code that isn’t needed in a correct solution.  Drag the needed blocks from the left into the correct order on the right and indent them as well. Check your solution by clicking on the Check button.  You will be told if any of the blocks are in the wrong or are in the wrong order.  You will also be told if the indention is wrong.</p>
</statement>
<blocks><block order="1">
<cline>public static int totalLetters(List&lt;String&gt; wordList)</cline>
<cline>{</cline>
</block><block order="9">
<cline>   int numLetters = 0;</cline>
</block><block order="4">
<choice correct="yes"><cline>   for (String s : wordList)</cline>
</choice><choice><cline>   for (String s in wordList) </cline>
</choice></block><block order="7">
<choice correct="yes"><cline>      numLetters = numLetters + s.length();</cline>
</choice><choice><cline>      numLetters = numLetters + wordList.length(); </cline>
</choice></block><block order="2">
<choice correct="yes"><cline>   return numLetters;</cline>
</choice><choice><cline>   return numletters; </cline>
</choice></block><block order="6">
<cline>} //end method</cline>
</block></blocks></exercise>            </exercises>
        </subsection>
  <subsection>
            <title>Write the Code</title>

<exercise label="lcfrsTotalLetters">
    <statement>
            <p>Finish writing the <c>totalLetters</c> method below so that it returns the number of letters for all the strings in <c>wordList</c>.  The <c>main</c> method below will test your code to check that you solved it correctly.</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
import java.util.*;

public class StringFormatter
{
    /**
     * Returns the total number of letters in wordList. Precondition: wordList
     * contains at least two words, consisting of letters only.
     */
    public static int totalLetters(List&lt;String&gt; wordList) {}

    public static void main(String[] args)
    {
        List&lt;String&gt; myWords = new ArrayList&lt;String&gt;();
        myWords.add("A");
        myWords.add("frog");
        myWords.add("is");
        System.out.println("Should print 7 and prints: " + totalLetters(myWords));

        List&lt;String&gt; words2 = new ArrayList&lt;String&gt;();
        words2.add("Hi");
        words2.add("Bye");
        System.out.println("Should print 5 and prints: " + totalLetters(words2));
    }
}

</code><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.util.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("StringFormatter");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Should print 7 and prints: 7\n" + "Should print 5 and prints: 5\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        List&lt;String&gt; myWords = new ArrayList&lt;String&gt;();
        myWords.add("A");
        myWords.add("dog");
        myWords.add("is");

        String output = String.valueOf(StringFormatter.totalLetters(myWords));
        String expect = "6";

        boolean passed = getResults(expect, output, "totalLetters method test on A, dog, is");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
        </subsection>
</section>

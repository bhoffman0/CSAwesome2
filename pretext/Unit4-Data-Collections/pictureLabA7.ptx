<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by Docutils 0.17.1 -->

<section xml:id="pictureLabA7">
  <title>Picture Lab A7: Mirroring Part of a Picture</title>
  <p>
    Sometimes you only want to mirror part of a picture. For example, Figure 1
    shows a temple in Greece that is missing a part of the roof called the
    pediment. You can use the <url
    href="https://replit.com/@BerylHoffman/PictureExplorer"
    visual="https://replit.com/@BerylHoffman/PictureExplorer">Picture Explorer
    Repl</url> to find the area that you want to mirror in temple.jpg to produce
    the picture on the right. If you do this you will find that you can mirror
    the rows from 27 to 96 (inclusive) and the columns from 13 to 275
    (inclusive). You can change the starting and ending points for the row and
    column values to mirror just part of the picture.
  </p>

  <figure align="center">
    <caption>
      Greek temple before (left) and after (right) mirroring the pediment
    </caption>

    <image source="Unit4-Data-Collections/Figures/picturelabmirror5.png" width="89%" />
  </figure>

  <p>
    To work with just part of a picture, change the starting and ending values
    for the nested for loops as shown in the following <c>mirrorTemple</c>
    method. This method also calculates the distance the current column is from
    the <c>mirrorPoint</c> and then adds that distance to the <c>mirrorPoint</c>
    to get the column to copy to.
  </p>

  <program language="java">
    <code>
public void mirrorTemple()
{
     int mirrorPoint = 276;
     Pixel leftPixel = null;
     Pixel rightPixel = null;
     int count = 0;
     Pixel[][] pixels = this.getPixels2D();

     // loop through the rows
     for (int row = 27; row &lt; 97; row++)
     {
          // loop from 13 to just before the mirror point
          for (int col = 13; col &lt; mirrorPoint; col++)
          {
               leftPixel = pixels[row][col];
               rightPixel = pixels[row][mirrorPoint - col + mirrorPoint];
               rightPixel.setColor(leftPixel.getColor());
          }
     }
 }
</code>
  </program>

  <p>
    You can test this with the <c>mirrorTemple</c> method below.
  </p>

  <hidden>
    <datafile label="temple" filename="temple.jpg">
      <image source="Unit4-Data-Collections/Figures/temple.jpg" />
    </datafile>

    <datafile label="snowperson" filename="snowperson.jpg">
      <image source="Unit4-Data-Collections/Figures/snowperson.jpg" />
    </datafile>

    <datafile label="seagull" filename="seagull.jpg">
      <image source="Unit4-Data-Collections/Figures/seagull.jpg" />
    </datafile>
  </hidden>

  <activity label="picture-lab-A7-mirrorTemple">
    <statement>
      <p>Picture Lab A7: Run to see mirrorTemple() working.</p>
    </statement>

    <program interactive="activecode" language="java" datafile="pictureLab.jar, temple.jpg, snowperson.jpg, seagull.jpg">
      <code>
import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /** Method mirrorTemple() fixes the temple.jpg picture */
    public void mirrorTemple()
    {
        int mirrorPoint = 276;
        Pixel leftPixel = null;
        Pixel rightPixel = null;
        Pixel[][] pixels = this.getPixels2D();

        // loop through the rows
        for (int row = 27; row &lt; 97; row++)
        {
            // loop from 13 to just before the mirror point
            for (int col = 13; col &lt; mirrorPoint; col++)
            {
                leftPixel = pixels[row][col];
                rightPixel = pixels[row][mirrorPoint - col + mirrorPoint];
                rightPixel.setColor(leftPixel.getColor());
            }
        }
    }

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        Picture pict = new Picture("temple.jpg");
        pict.show();
        pict.mirrorTemple();
        pict.show();
    }
}

</code>
      <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void mirrorTemple()";
        boolean passed = checkCodeContains("mirrorTemple() method", target);
        assertTrue(passed);
    }
}
        </tests>
    </program>
  </activity>

  <p>
    How many times was <c>leftPixel = pixels[row][col];</c> executed? The
    formula for the number of times a nested loop executes is the number of
    times the outer loop executes multiplied by the number of times the inner
    loop executes. The outer loop is the one looping through the rows, because
    it is outside the other loop. The inner loop is the one looping through the
    columns, because it is inside the row loop.
  </p>

  <p>
    How many times does the outer loop execute? The outer loop starts with row
    equal to 27 and ends when it reaches 97, so the last time through the loop
    row is 96. To calculate the number of times a loop executes, subtract the
    starting value from the ending value and add one. The outer loop executes 96
    – 27 + 1 times, which equals 70 times. The inner loop starts with col equal
    to 13 and ends when it reaches 276, so, the last time through the loop, col
    will be 275. It executes 275 – 13 + 1 times, which equals 263 times. The
    total is 70 * 263, which equals 18,410.
  </p>

  <activity label="picture-A7-1">
    <statement>
      <p>How many times would the body of this nested for loop execute?</p>
      <program language="java">
        <code>
for (int row = 7; row &lt; 17; row++)
    for (int col = 6; col &lt; 15; col++)
</code>
      </program>
    </statement>

    <choices>
      <choice>
        <statement>
          <p>17</p>
        </statement>

        <feedback>
          <p>Don't forget the inner loop.</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>17 - 7 = 10</p>
        </statement>

        <feedback>
          <p>Don't forget the inner loop.</p>
        </feedback>
      </choice>

      <choice correct="yes">
        <statement>
          <p>(17 - 7) * (15 - 6) = 90</p>
        </statement>

        <feedback>
          <p>Correct</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>17 * 15 = 255</p>
        </statement>

        <feedback>
          <p>The loops do not start at 0.</p>
        </feedback>
      </choice>
    </choices>
  </activity>

  <activity label="picture-A7-2">
    <statement>
      <p>How many times would the body of this nested for loop execute?</p>
      <pre>
        for (int row = 5; row &lt;= 11; row++)
    for (int col = 3; col &lt;= 18; col++)
      </pre>
    </statement>

    <choices>
      <choice>
        <statement>
          <p>11</p>
        </statement>

        <feedback>
          <p>Don't forget the inner loop.</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>11 - 5 = 6</p>
        </statement>

        <feedback>
          <p>Don't forget the inner loop.</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>(11 - 5) * (18 - 3) = 90</p>
        </statement>

        <feedback>
          <p>Notice that these loops use &lt;=</p>
        </feedback>
      </choice>

      <choice correct="yes">
        <statement>
          <p>(11 - 5 + 1) * (18 - 3 + 1) = 112</p>
        </statement>

        <feedback>
          <p>Yes, the loops do not start at 0 and use &lt;=.</p>
        </feedback>
      </choice>
    </choices>
  </activity>

  <p>
    1. Check the calculation of the number of times the body of the nested loop
    executes by adding an integer count variable to the <c>mirrorTemple</c>
    method that starts out at 0 and increments inside the body of the loop.
    Print the value of count after the nested loop ends.
  </p>

  <activity label="picture-lab-A7-mirror-temple-count">
    <statement>
      <p>
        Picture Lab A7 Mirroring: Check the calculation of the number of times
        the body of the nested loop executes by adding an integer count variable
        to the mirrorTemple method that starts out at 0 and increments inside
        the body of the loop. Print the value of count after the nested loop
        ends which should be 18410.
      </p>
    </statement>

    <program interactive="activecode" language="java" datafile="pictureLab.jar, temple.jpg, snowperson.jpg, seagull.jpg">
      <code>
import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /** Method mirrorTemple() fixes the temple.jpg picture */
    public void mirrorTemple()
    {
        int mirrorPoint = 276;
        Pixel leftPixel = null;
        Pixel rightPixel = null;
        int count = 0;
        Pixel[][] pixels = this.getPixels2D();

        // loop through the rows
        for (int row = 27; row &lt; 97; row++)
        {
            // loop from 13 to just before the mirror point
            for (int col = 13; col &lt; mirrorPoint; col++)
            {
                leftPixel = pixels[row][col];
                rightPixel = pixels[row][mirrorPoint - col + mirrorPoint];
                rightPixel.setColor(leftPixel.getColor());
            }
        }
    }

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        Picture pict = new Picture("temple.jpg");
        pict.show();
        pict.mirrorTemple();
        pict.show();
    }
}

</code>
      <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "count = 0";
        boolean passed = checkCodeContains("mirrorTemple() has count = 0", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "count++";
        boolean passed = checkCodeContains("mirrorTemple() has count++", target);
        assertTrue(passed);
    }
}
        </tests>
    </program>
  </activity>

  <image source="Unit4-Data-Collections/Figures/mirrorarms.png" width="27%" />
  <p>
    <ol marker="1">
      <li>
        <p>
          Write the method <c>mirrorArms</c> to mirror the arms on the
          snowperson (“snowperson.jpg”) to make a snowperson with 4 arms. Fork
          <url href="https://replit.com/@BerylHoffman/PictureExplorer"
          visual="https://replit.com/@BerylHoffman/PictureExplorer">Picture
          Explorer Repl</url> and change it to explore snowperson.jpg and find
          out the pixel coordinates to start and end the mirroring and the
          mirror point.
        </p>
      </li>
    </ol>
  </p>

  <activity label="picture-lab-A7-mirrorArms">
    <statement>
      <p>
        Picture Lab A7 Mirroring: Write the method mirrorArms to mirror the arms
        on the snowperson (“snowperson.jpg”) to make a snowperson with 4 arms.
      </p>
    </statement>

    <program interactive="activecode" language="java" datafile="pictureLab.jar, temple.jpg, snowperson.jpg, seagull.jpg">
      <code>
import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /** Write the method mirrorArms() to add more arms to snowperson.jpg */

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        Picture pict = new Picture("snowperson.jpg");
        pict.show();
        pict.mirrorArms();
        pict.show();
    }
}

</code>
      <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void mirrorArms()";
        boolean passed = checkCodeContains("mirrorArms() method", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "row = 155";
        boolean passed = checkCodeContains("starts looping at row = 155", target);
        assertTrue(passed);
    }

    @Test
    public void test2b()
    {
        String target = "191";
        boolean passed = checkCodeContains("mirrors at pixel 191", target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "for";
        String code = getCode();
        int index = code.indexOf("public void mirrorArms()");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 4;
        }
        getResults(
                "true",
                "" + passed,
                "Checking that mirrorArms() contains 4 (2 nested) for loops for mirroring arms",
                passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
  </activity>

  <image source="Unit4-Data-Collections/Figures/mirrorgull.png" width="27%" />
  <p>
    3. Write the method <c>mirrorGull</c> to mirror the seagull (“seagull.jpg”)
    to the right so that there are two seagulls on the beach near each other.
    Fork <url href="https://replit.com/@BerylHoffman/PictureExplorer"
    visual="https://replit.com/@BerylHoffman/PictureExplorer">Picture Explorer
    Repl</url> and change it to explore seagull.jpg and find out the pixel
    coordinates to start and end the mirroring and the mirror point.
  </p>

  <activity label="picture-lab-A7-mirrorGull">
    <statement>
      <p>
        Picture Lab A7 Mirroring: Write the method mirrorGull to mirror the
        seagull (“seagull.jpg”) to the right so that there are two seagulls on
        the beach near each other.
      </p>
    </statement>

    <program interactive="activecode" language="java" datafile="pictureLab.jar, temple.jpg, snowperson.jpg, seagull.jpg">
      <code>
import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /**
     * Write the method mirrorGull to mirror the seagull to the right so that there
     * are two seagulls on the beach near each other.
     */

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        Picture pict = new Picture("seagull.jpg");
        pict.show();
        pict.mirrorGull();
        pict.show();
    }
}

</code>
      <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void mirrorGull()";
        boolean passed = checkCodeContains("mirrorGull() method", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "row = 225";
        boolean passed = checkCodeContains("starts looping at row = 225", target);
        assertTrue(passed);
    }

    @Test
    public void test2b()
    {
        String target = "350";
        boolean passed = checkCodeContains("mirrors at pixel 350", target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "for";
        String code = getCode();
        int index = code.indexOf("public void mirrorGull()");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 2;
        }
        getResults("true", "" + passed, "Checking that mirrorGull() contains 2 for loops", passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
  </activity>
</section>


<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section>
  <title>Easier Search/Sort Multiple Choice Questions</title>
  <p>These problems are easier than most of those that you will usually see on the AP CSA exam.</p>
  <p>You can step through the code above by clicking on the following <url href="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=import+java.util.Arrays%3B%0A%0Apublic+class+Test+%7B%0A+++%0A+++public+static+int+mystery(int%5B%5D+elements,+int+target)%0A+++%7B%0A++++++for+(int+j+%3D+0%3B+j+%3C+elements.length%3B+j%2B%2B)%0A++++++%7B%0A+++++++++if+(elements%5Bj%5D+%3D%3D+target)%0A+++++++++%7B%0A++++++++++++return+j%3B%0A+++++++++%7D%0A++++++%7D%0A++++++return+-1%3B%0A+++%7D%0A+++%0A+++public+static+void+main(String%5B%5D+args)+%7B%0A++++++int%5B%5D+nums+%3D+%7B90,+-30,+50%7D%3B%0A++++++int+found+%3D+mystery(nums,+50)%3B%0A++++++System.out.println(found)%3B%0A++++++%0A+++%7D%0A%7D&amp;mode=display&amp;curInstr=0" visual="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=import+java.util.Arrays%3B%0A%0Apublic+class+Test+%7B%0A+++%0A+++public+static+int+mystery(int%5B%5D+elements,+int+target)%0A+++%7B%0A++++++for+(int+j+%3D+0%3B+j+%3C+elements.length%3B+j%2B%2B)%0A++++++%7B%0A+++++++++if+(elements%5Bj%5D+%3D%3D+target)%0A+++++++++%7B%0A++++++++++++return+j%3B%0A+++++++++%7D%0A++++++%7D%0A++++++return+-1%3B%0A+++%7D%0A+++%0A+++public+static+void+main(String%5B%5D+args)+%7B%0A++++++int%5B%5D+nums+%3D+%7B90,+-30,+50%7D%3B%0A++++++int+found+%3D+mystery(nums,+50)%3B%0A++++++System.out.println(found)%3B%0A++++++%0A+++%7D%0A%7D&amp;mode=display&amp;curInstr=0">Ex-12-7-1</url>.</p>
  <p>You can step through the code above by clicking on the following <url href="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=import+java.util.Arrays%3B%0A%0Apublic+class+Test+%7B%0A+++%0A+++public+static+int+mystery(int%5B%5D+elements,+int+target)%0A+++%7B%0A++++++for+(int+j+%3D+0%3B+j+%3C+elements.length%3B+j%2B%2B)%0A++++++%7B%0A+++++++++if+(elements%5Bj%5D+%3D%3D+target)%0A+++++++++%7B%0A++++++++++++return+j%3B%0A+++++++++%7D%0A++++++%7D%0A++++++return+-1%3B%0A+++%7D%0A+++%0A+++public+static+void+main(String%5B%5D+args)+%7B%0A++++++int%5B%5D+nums+%3D+%7B90,+-30,+50%7D%3B%0A++++++int+found+%3D+mystery(nums,+-20)%3B%0A++++++System.out.println(found)%3B%0A++++++%0A+++%7D%0A%7D&amp;mode=display&amp;curInstr=0" visual="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=import+java.util.Arrays%3B%0A%0Apublic+class+Test+%7B%0A+++%0A+++public+static+int+mystery(int%5B%5D+elements,+int+target)%0A+++%7B%0A++++++for+(int+j+%3D+0%3B+j+%3C+elements.length%3B+j%2B%2B)%0A++++++%7B%0A+++++++++if+(elements%5Bj%5D+%3D%3D+target)%0A+++++++++%7B%0A++++++++++++return+j%3B%0A+++++++++%7D%0A++++++%7D%0A++++++return+-1%3B%0A+++%7D%0A+++%0A+++public+static+void+main(String%5B%5D+args)+%7B%0A++++++int%5B%5D+nums+%3D+%7B90,+-30,+50%7D%3B%0A++++++int+found+%3D+mystery(nums,+-20)%3B%0A++++++System.out.println(found)%3B%0A++++++%0A+++%7D%0A%7D&amp;mode=display&amp;curInstr=0">Ex-12-7-2</url>.</p>
  <p>You can step through the code above by clicking on the following <url href="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=public+class+SearchTest%0A%7B%0A+++public+static+int+binarySearch(int%5B%5D+elements,+int+target)+%7B%0A++++++int+left+%3D+0%3B%0A++++++int+right+%3D+elements.length+-+1%3B%0A++++++int+count+%3D+0%3B%0A++++++while+(left+%3C%3D+right)%0A++++++%7B%0A+++++++++count%2B%2B%3B%0A+++++++++System.out.println(%22count%3A+%22+%2B+count)%3B%0A+++++++++%0A+++++++++int+middle+%3D+(left+%2B+right)+/+2%3B%0A+++++++++if+(target+%3C+elements%5Bmiddle%5D)%0A+++++++++%7B%0A++++++++++++right+%3D+middle+-+1%3B%0A+++++++++%7D%0A+++++++++else+if+(target+%3E+elements%5Bmiddle%5D)%0A+++++++++%7B%0A++++++++++++left+%3D+middle+%2B+1%3B%0A+++++++++%7D%0A+++++++++else+%7B%0A++++++++++++return+middle%3B%0A+++++++++%7D%0A+++++++%7D%0A+++++++return+-1%3B%0A+++%7D%0A%0A+++public+static+void+main(String%5B%5D+args)%0A+++%7B%0A++++++int%5B%5D+arr+%3D+%7B2,+10,+23,+31,+55,+86%7D%3B%0A%0A++++++//+test+when+the+target+is+in+the+middle%0A++++++int+index+%3D+binarySearch(arr,2)%3B%0A++++++System.out.println(index)%3B%0A+++%7D%0A%7D%0A%0A&amp;mode=display&amp;curInstr=0" visual="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=public+class+SearchTest%0A%7B%0A+++public+static+int+binarySearch(int%5B%5D+elements,+int+target)+%7B%0A++++++int+left+%3D+0%3B%0A++++++int+right+%3D+elements.length+-+1%3B%0A++++++int+count+%3D+0%3B%0A++++++while+(left+%3C%3D+right)%0A++++++%7B%0A+++++++++count%2B%2B%3B%0A+++++++++System.out.println(%22count%3A+%22+%2B+count)%3B%0A+++++++++%0A+++++++++int+middle+%3D+(left+%2B+right)+/+2%3B%0A+++++++++if+(target+%3C+elements%5Bmiddle%5D)%0A+++++++++%7B%0A++++++++++++right+%3D+middle+-+1%3B%0A+++++++++%7D%0A+++++++++else+if+(target+%3E+elements%5Bmiddle%5D)%0A+++++++++%7B%0A++++++++++++left+%3D+middle+%2B+1%3B%0A+++++++++%7D%0A+++++++++else+%7B%0A++++++++++++return+middle%3B%0A+++++++++%7D%0A+++++++%7D%0A+++++++return+-1%3B%0A+++%7D%0A%0A+++public+static+void+main(String%5B%5D+args)%0A+++%7B%0A++++++int%5B%5D+arr+%3D+%7B2,+10,+23,+31,+55,+86%7D%3B%0A%0A++++++//+test+when+the+target+is+in+the+middle%0A++++++int+index+%3D+binarySearch(arr,2)%3B%0A++++++System.out.println(index)%3B%0A+++%7D%0A%7D%0A%0A&amp;mode=display&amp;curInstr=0">Ex-12-7-3</url>.</p>
  <exercises>
    <exercise label="qsearchse_1">
        <statement>

        <p>7-11-4-1: What would the following code return from mystery([90, -30, 50], 50)?</p>
        <program language="java"><input>
 public static int mystery(int[] elements, int target)
 {
   for (int j = 0; j &lt; elements.length; j++)
   {
      if (elements[j] == target)
      {
         return j;
      }
  }
  return -1;
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>-1</p>
                </statement>
                <feedback>
                    <p>This value is returned if the target is not in the list since this is a sequential search.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>0</p>
                </statement>
                <feedback>
                    <p>This would be true if the target was 90 since this is a sequential search.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>1</p>
                </statement>
                <feedback>
                    <p>This would be true if the target was -30 since this is a sequential search.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>2</p>
                </statement>
                <feedback>
                    <p>This is a sequential search that returns the index where the target appears in the elements list</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>50</p>
                </statement>
                <feedback>
                    <p>A sequential search returns the index, not the value.  What is the index of the 50?</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="qsearchse_2">
        <statement>

        <p>7-11-4-2: What would the following code return from mystery([90, -30, 50], -20)?</p>
        <program language="java"><input>
 public static int mystery(int[] elements, int target)
 {
   for (int j = 0; j &lt; elements.length; j++)
   {
      if (elements[j] == target)
      {
         return j;
      }
  }
  return -1;
}
</input></program>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>-1</p>
                </statement>
                <feedback>
                    <p>A sequential search returns -1 if the target value is not found in the list.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>0</p>
                </statement>
                <feedback>
                    <p>This would be true if the target was 90 since this is a sequential search.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>1</p>
                </statement>
                <feedback>
                    <p>This would be true if the target was -30 since this is a sequential search.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>2</p>
                </statement>
                <feedback>
                    <p>This would be true if the target was</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>-20</p>
                </statement>
                <feedback>
                    <p>A sequential search returns negative one when the value isn't found in the list.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="qsearchse_3">
        <statement>

        <p>7-11-4-3: Consider the <c>binarySearch</c> method below.  How many times would the while loop execute if you first do int[] arr = {2, 10, 23, 31, 55, 86} and then call  binarySearch(arr,2)?</p>
        <program language="java"><input>
public static int binarySearch(int[] elements, int target) {
   int left = 0;
   int right = elements.length - 1;
   while (left &lt;= right)
   {
      int middle = (left + right) / 2;
      if (target &lt; elements[middle])
      {
         right = middle - 1;
      }
      else if (target &gt; elements[middle])
      {
         left = middle + 1;
      }
      else {
         return middle;
      }
    }
    return -1;
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>1</p>
                </statement>
                <feedback>
                    <p>This would be true if we were looking for 23.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>2</p>
                </statement>
                <feedback>
                    <p>It first compares 23 at index 2 (5 / 2 is 2) to 2.  The second time it compares the 2 at index 0 (1 / 2 = 0) to 2 and returns 0.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>3</p>
                </statement>
                <feedback>
                    <p>This would be true if we were looking for 10.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="qsearchse_4">
        <statement>

        <p>7-11-4-4: Which sort contains a recursive call?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>selection sort</p>
                </statement>
                <feedback>
                    <p>A selection sort has nested for loops.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>insertion sort</p>
                </statement>
                <feedback>
                    <p>An insertion sort has a while loop inside a for loop.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>merge sort</p>
                </statement>
                <feedback>
                    <p>A merge sort has a recursive call to mergeSortHelper in mergeSortHelper.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="qsearchse_5">
        <statement>

        <p>7-11-4-5: Under what condition will an ascending insertion sort execute the slowest?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>If the data is already sorted in ascending order</p>
                </statement>
                <feedback>
                    <p>If the data is already sorted in the correct order you don't need to move any values.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>If the data is already sorted in descending order</p>
                </statement>
                <feedback>
                    <p>All values will have to be moved multiple times since the data was sorted into descending order.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>It will always take the same amount of time to execute</p>
                </statement>
                <feedback>
                    <p>This would be true if it was a selection sort.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
  </exercises>
</section>

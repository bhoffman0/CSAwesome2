<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="stringScrambleB">
  <title>Free Response - String Scramble B</title><introduction>
    
    <p>The following is part b of a free response question from 2014.  It was question 1 on the exam.  You can see all the free response questions from past exams at <url href="https://apstudents.collegeboard.org/courses/ap-computer-science-a/free-response-questions-by-year" visual="https://apstudents.collegeboard.org/courses/ap-computer-science-a/free-response-questions-by-year">https://apstudents.collegeboard.org/courses/ap-computer-science-a/free-response-questions-by-year</url>.</p>
    <p><term>Question 1.</term>  This question involves reasoning about strings made up of uppercase letters. You will implement two related methods that appear in the same class (not shown). The first method takes a single string parameter and returns a scrambled version of that string. The second method takes a list of strings and modifies the list by scrambling each entry in the list. Any entry that cannot be scrambled is removed from the list.</p>
    <p><term>Part b.</term> Write the method <c>scrambleOrRemove</c>, which replaces each word in the parameter <c>wordList</c> with its scrambled version and removes any words that are unchanged after scrambling.  The relative order of the words in <c>wordList</c> remains the same as before the call to <c>scrambleOrRemove</c>.</p>
    <p>The following example shows how the contents of <c>wordList</c> would be modified as a result of calling <c>scrambleOrRemove</c>.</p>
    <figure align="center">
      <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Example call and result</caption>
      <image source="Unit4-Data-Collections/Figures/stringScrambleB.png" width="89%"/>
    </figure>
    <p>Assume that the method <c>scrambleWord</c> works as intended and is in the same class.  It will return the scrambled word or the same word.  You will write the <c>scrambleOrRemove</c> method to replace each original word with the scrambled word or remove the word if it was not scrambled.</p>
    <program language="java">
      <code>
import java.util.List;

public class ScrambledStrings
{

    /**
     * Modifies wordList by replacing each word with its scrambled version,
     * removing any words that are unchanged as a result of scrambling.
     *
     * @param wordList the list of words Precondition: wordList contains only
     *     non-null objects Postcondition: - all words unchanged by scrambling have
     *     been removed from wordList - each of the remaining words has been
     *     replaced by its scrambled version - the relative ordering of the entries
     *     in wordList is the same as it was before the method was called
     */
    public static void scrambleOrRemove(List&lt;String&gt; wordList)
    {
        /* to be implemented in part b */
    }
}
</code>
    </program>
  </introduction>
  <subsection>
            <title>How to solve this problem</title>

<exercise label="2014string_algorithm_partB">
    <statement>
            <p> Explain in plain English what your code will have to do to answer this question.  Use the variable names given above.</p>

    </statement>
</exercise>
            <p>This section contains a plain English explanation of one way to solve this problem as well as problems that test your understanding of how to write the code to do those things.  Click on the buttons to reveal the questions.</p>
            <subsection>
                <p>In the example the first word (at index 0) <c>TAN</c> is scrambled and replaced. The second word <c>ABRACADABRA</c> (at index 1) is scrambled and replaced. The third word <c>WHOA</c> (at index 2) is removed. The fourth word <c>APPLE</c> (at index 3) is scrambled and replaced. The fifth word <c>EGGS</c> (at index 4) is removed since the scrambled word is the same as the original. What method of List allows you to replace an element in a list? What method of list allows you to remove an element from a list? How can you loop through a list and not always increment the current index?</p>
            </subsection>
            <exercises line="66" runestone_options="{'showtitle': 'data-showtitle=&quot;Reveal Data Type Problem&quot;', 'hidetitle': 'data-hidetitle=&quot;Hide Data Type Problem&quot;', 'subchapter': 'stringScrambleB', 'chapter': 'Unit4-Data-Collections', 'basecourse': 'csawesome2beta', 'optional': '', 'optclass': '', 'divid': 'strng_mcalg_hint_0', 'instructoronly': '', 'is_dynamic': 'True'}" source="/mnt/c/Users/hoffmanb/Documents/Github/CSAwesome2/_fixed_sources/Unit4-Data-Collections/stringScrambleB.rst">

    <exercise label="strng_mcalg_answr_0">
        <statement>

                <p> What is returned by this method?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>String</p>
                </statement>
                <feedback>
                    <p>Reread the method header, the datatype returned is to the left of the method name.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>ArrayList</p>
                </statement>
                <feedback>
                    <p>Reread the method header, the datatype returned is to the left of the method name.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Array</p>
                </statement>
                <feedback>
                    <p>Reread the method header, the datatype returned is to the left of the method name.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>void</p>
                </statement>
                <feedback>
                    <p>Correct!</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            </exercises>
            <exercises line="83" runestone_options="{'showtitle': 'data-showtitle=&quot;Reveal Parameter Problem&quot;', 'hidetitle': 'data-hidetitle=&quot;Hide Parameter problem&quot;', 'subchapter': 'stringScrambleB', 'chapter': 'Unit4-Data-Collections', 'basecourse': 'csawesome2beta', 'optional': '', 'optclass': '', 'divid': 'strng_mcalg_hint_0_5', 'instructoronly': '', 'is_dynamic': 'True'}" source="/mnt/c/Users/hoffmanb/Documents/Github/CSAwesome2/_fixed_sources/Unit4-Data-Collections/stringScrambleB.rst">

    <exercise label="strng_mcalg_answr_0_5">
        <statement>

                <p> This method accepts an <c>ArrayList</c>, what is the datatype of the objects contained in this <c>ArrayList</c>?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>void</p>
                </statement>
                <feedback>
                    <p>you cannot have an ArrayList of type void</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>String</p>
                </statement>
                <feedback>
                    <p>Correct!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>List</p>
                </statement>
                <feedback>
                    <p>This is not an ArrayList of more Lists</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>int</p>
                </statement>
                <feedback>
                    <p>This list does not contain integers.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            </exercises>
            <exercises line="100" runestone_options="{'showtitle': 'data-showtitle=&quot;Reveal While Loop Problem&quot;', 'hidetitle': 'data-hidetitle=&quot;Hide While Loop problem&quot;', 'subchapter': 'stringScrambleB', 'chapter': 'Unit4-Data-Collections', 'basecourse': 'csawesome2beta', 'optional': '', 'optclass': '', 'divid': 'strng_mcalg_hint_1', 'instructoronly': '', 'is_dynamic': 'True'}" source="/mnt/c/Users/hoffmanb/Documents/Github/CSAwesome2/_fixed_sources/Unit4-Data-Collections/stringScrambleB.rst">

    <exercise label="strng_mcalg_answr_1">
        <statement>

                <p> There are many ways to use loops to solve this problem. If we were to use a while loop, what conditional could we write to make sure the loop does not go out of bounds? (Assume an integer index has already been initialized).</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>(index != wordList.current())</p>
                </statement>
                <feedback>
                    <p>the .current() method does not exist</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>(int index = wordList.size() - 1; index &gt;= 0; index--)</p>
                </statement>
                <feedback>
                    <p>this form of range control does not work with while loops</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>(index &lt; wordList.size())</p>
                </statement>
                <feedback>
                    <p>Correct!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>(wordList(index) != wordList.size())</p>
                </statement>
                <feedback>
                    <p>this does not accurately update the list as you iterate through wordList</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            </exercises>
            <exercises line="117" runestone_options="{'showtitle': 'data-showtitle=&quot;Reveal For Loop Problem&quot;', 'hidetitle': 'data-hidetitle=&quot;Hide For Loop Problem&quot;', 'subchapter': 'stringScrambleB', 'chapter': 'Unit4-Data-Collections', 'basecourse': 'csawesome2beta', 'optional': '', 'optclass': '', 'divid': 'strng_mcalg_hint_2', 'instructoronly': '', 'is_dynamic': 'True'}" source="/mnt/c/Users/hoffmanb/Documents/Github/CSAwesome2/_fixed_sources/Unit4-Data-Collections/stringScrambleB.rst">

    <exercise label="strng_mcalg_answr_2">
        <statement>

                <p> You can also use a for loop to solve this problem instead of a while loop. what conditional could we write to make sure the loop does not go out of bounds?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>(int i = wordList.size() - 1; i != wordList.size(); i--)</p>
                </statement>
                <feedback>
                    <p>this will lead to an infinite loop</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>(int i = wordList.size() - 1; i &gt;= 0; i--)</p>
                </statement>
                <feedback>
                    <p>Correct!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>(int i = wordList.size(); i &gt;= 0; i--)</p>
                </statement>
                <feedback>
                    <p>This loop starts out of bounds since there isn't an element at wordList.size().</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>(int i = wordList.size() - 1; i &gt; 0; i--)</p>
                </statement>
                <feedback>
                    <p>This loop doesn't iterate all the way through the wordList. It misses the 0th element.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            </exercises>
            <exercises line="134" runestone_options="{'showtitle': 'data-showtitle=&quot;Reveal Accessor Problem&quot;', 'hidetitle': 'data-hidetitle=&quot;Hide Accessor Problem&quot;', 'subchapter': 'stringScrambleB', 'chapter': 'Unit4-Data-Collections', 'basecourse': 'csawesome2beta', 'optional': '', 'optclass': '', 'divid': 'strng_mcalg_hint_3', 'instructoronly': '', 'is_dynamic': 'True'}" source="/mnt/c/Users/hoffmanb/Documents/Github/CSAwesome2/_fixed_sources/Unit4-Data-Collections/stringScrambleB.rst">

    <exercise label="strng_mcalg_answr_3">
        <statement>

                <p> How would you access each element in wordList assuming you already have an integer index properly initialized.</p>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>wordList.get(index)</p>
                </statement>
                <feedback>
                    <p>Correct!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>wordList[index]</p>
                </statement>
                <feedback>
                    <p>This accessor method doesn't work for arrayLists.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>wordList(index)</p>
                </statement>
                <feedback>
                    <p>This accessor method doesn't work for arrayLists.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>wordList.at(index)</p>
                </statement>
                <feedback>
                    <p>This accessor method doesn't work for arrayLists.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            </exercises>
            <exercises line="151" runestone_options="{'showtitle': 'data-showtitle=&quot;Reveal Checking Equality Problem&quot;', 'hidetitle': 'data-hidetitle=&quot;Hide Checking Equality Problem&quot;', 'subchapter': 'stringScrambleB', 'chapter': 'Unit4-Data-Collections', 'basecourse': 'csawesome2beta', 'optional': '', 'optclass': '', 'divid': 'strng_mcalg_hint_4', 'instructoronly': '', 'is_dynamic': 'True'}" source="/mnt/c/Users/hoffmanb/Documents/Github/CSAwesome2/_fixed_sources/Unit4-Data-Collections/stringScrambleB.rst">

    <exercise label="strng_mcalg_answr_4">
        <statement>

                <p> How would you check that a string <c>word</c> is equal to a different string called <c>other</c>?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>!(word != other)</p>
                </statement>
                <feedback>
                    <p>This checks to make sure that word does not equal a different space in memory that other.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>word.size() == other.size()</p>
                </statement>
                <feedback>
                    <p>This only checks the size of the strings, it does not check for equality</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>word == other</p>
                </statement>
                <feedback>
                    <p>This checks the actual addresses in memory of the strings, not their contents.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>word.equals(other)</p>
                </statement>
                <feedback>
                    <p>Correct!</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            </exercises>
        </subsection>
  <subsection>
            <title>The Algorithm</title>
            <p>Loop through the list and scramble the current word.  If the scrambled word and original are equal then remove the word from the list and otherwise replace it.  We will have to be careful since the size of the list can change in the loop.  If we remove an element all the other elements will shift left.
                We will only want to increment the index if the word was replaced and not removed. There are many ways to solve this problem but we have outlined 2 in the following optional questions. If you feel that you are ready to solve the problem, please skip ahead to the active code block.</p>
            <subsection>
                <program language="java"><code>
public static void scrambleOrRemove(List&lt;String&gt; wordList)
    initialize index counter
    while (index less than wordlist size)
      initialize a string and set it equal to word in wordList at index

      initialize another string and set it equal to the scrambled version
      of the word in wordlist at index

      if (the normal string equals the scrambled string)
          remove the word in wordList at the current index
      else
          reassign the current word in wordList to be the scrambled version
          iterate the index
</code></program>
            </subsection>
            <exercises line="195" runestone_options="{'showtitle': 'data-showtitle=&quot;Reveal Solution 1 Problem&quot;', 'hidetitle': 'data-hidetitle=&quot;Hide Solution 1 Problem&quot;', 'subchapter': 'stringScrambleB', 'chapter': 'Unit4-Data-Collections', 'basecourse': 'csawesome2beta', 'optional': '', 'optclass': '', 'divid': 'strng_scarmble_parsons', 'instructoronly': '', 'is_dynamic': 'True'}" source="/mnt/c/Users/hoffmanb/Documents/Github/CSAwesome2/_fixed_sources/Unit4-Data-Collections/stringScrambleB.rst">
<exercise label="StringScrambleB1" numbered="yes" adaptive="yes" indentation="show" language="python"><statement>
                <p>The method test below contains the correct code for one solution to this problem, but it is mixed up.  Drag the needed code from the left to the right and put them in order with the correct indention so that the code would work correctly.</p>
</statement>
<blocks><block order="2">
<cline>public static void test(List&lt;String&gt; wordList)</cline>
<cline>{</cline>
</block><block order="4">
<cline>  int i = 0;</cline>
<cline>  while (i &lt; wordList.size())</cline>
<cline>  {</cline>
</block><block order="9">
<cline>     String current = wordList.get(i);</cline>
<cline>     String scrambled = scrambleWord(current);</cline>
</block><block order="6">
<cline>     if (scrambled.equals(current))</cline>
</block><block order="11">
<cline>        wordList.remove(i);</cline>
</block><block order="7">
<cline>     else</cline>
<cline>     {</cline>
</block><block order="3">
<cline>        wordList.set(i,scrambled);</cline>
</block><block order="5">
<cline>        i++;</cline>
</block><block order="8">
<cline>     } // end else</cline>
</block><block order="10">
<cline>  } // end while</cline>
</block><block order="1">
<cline>} // end method</cline>
</block></blocks></exercise>            </exercises>
            <p>Another way to solve this problem is to start at the end of the list and loop towards the front of the list. That way you don’t have to worry about the index being off if you remove an item from the list.</p>
            <subsection>
                <program language="java"><code>
public static void scrambleOrRemove(List&lt;String&gt; wordList)
      for( int i = wordList size - 1; i &gt;= 0; i--)
          initialize a string and set it equal to word in wordList at index

          initialize another string and set it equal to the scrambled version
          of the word in wordlist at index

          if (the normal string equals the scrambled string)
              remove the word in wordList at the current index
          else
              reassign the current word in wordList to be the scrambled version
              iterate the index
</code></program>
            </subsection>
            <exercises line="253" runestone_options="{'showtitle': 'data-showtitle=&quot;Reveal Solution 2 Problem&quot;', 'hidetitle': 'data-hidetitle=&quot;Hide Solution Problem&quot;', 'subchapter': 'stringScrambleB', 'chapter': 'Unit4-Data-Collections', 'basecourse': 'csawesome2beta', 'optional': '', 'optclass': '', 'divid': 'strng_scarmble_parsons_2', 'instructoronly': '', 'is_dynamic': 'True'}" source="/mnt/c/Users/hoffmanb/Documents/Github/CSAwesome2/_fixed_sources/Unit4-Data-Collections/stringScrambleB.rst">
<exercise label="StringScrambleB2" numbered="yes" adaptive="yes" indentation="show" language="python"><statement>
                <p>The method test below contains the correct code for another solution to this problem, but it is mixed up.  Drag the needed code from the left to the right and put them in order with the correct indention so that the code would work correctly.</p>
</statement>
<blocks><block order="5">
<cline>public static void test(List&lt;String&gt; wordList)</cline>
<cline>{</cline>
</block><block order="8">
<cline>   for (int i = wordList.size() - 1; i &gt;= 0; i--)</cline>
<cline>   {</cline>
</block><block order="6">
<cline>      String word = wordList.get(i);</cline>
</block><block order="7">
<cline>      String scrambled = scrambleWord(word);</cline>
</block><block order="9">
<cline>      if (!scrambled.equals(word))</cline>
</block><block order="2">
<cline>        wordList.set(i, scrambled);</cline>
</block><block order="1">
<cline>      else</cline>
</block><block order="10">
<cline>        wordList.remove(i);</cline>
</block><block order="4">
<cline>   } // end for</cline>
</block><block order="3">
<cline>} // end method</cline>
</block></blocks></exercise>            </exercises>
        </subsection>
  <subsection>
            <title>Try and Solve It</title>

<exercise label="frqScrambleOrRemove">
    <statement>
            <p>Write the method <c>scrambleOrRemove</c> below. The main has code to test the result.</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
import java.util.ArrayList;
import java.util.List;

public class ScrambledStrings
{

    /**
     * Scrambles a given word.
     *
     * @param word the word to be scrambled
     * @return the scrambled word (possibly equal to word) Precondition: word is
     *     either an empty string or contains only uppercase letters.
     *     Postcondition: the string returned was created from word as follows: -
     *     the word was scrambled, beginning at the first letter and continuing
     *     from left to right - two consecutive letters consisting of "A" followed
     *     by a letter that was not "A" were swapped - letters were swapped at most
     *     once
     */
    public static String scrambleWord(String word)
    {
        String scrambled = "";
        int i = 0;

        while (i &lt; word.length())
        {
            String letter1 = word.substring(i, i + 1);
            String letter2 = "";
            if (i &lt; word.length() - 1)
            {
                letter2 = word.substring(i + 1, i + 2);
            }
            if (letter1.equals("A")
                    &amp;&amp; !letter2.equals("A")
                    &amp;&amp; !letter2.equals(""))
            {
                scrambled += letter2 + letter1;
                i += 2;
            }
            else
            {
                scrambled += letter1;
                i += 1;
            }
        }
        return scrambled;
    }

    /********************** Part (b) *********************/

    /**
     * Modifies wordList by replacing each word with its scrambled version,
     * removing any words that are unchanged as a result of scrambling.
     *
     * @param wordList the list of words Precondition: wordList contains only
     *     non-null objects Postcondition: - all words unchanged by scrambling have
     *     been removed from wordList - each of the remaining words has been
     *     replaced by its scrambled version - the relative ordering of the entries
     *     in wordList is the same as it was before the method was called
     */
    public static void scrambleOrRemove(List&lt;String&gt; wordList) {}

    /********************** Test *********************/

    public static void main(String[] args)
    {

        System.out.println("\nTesting Part (b):\n");

        String[] words2 = {"TAN", "ABRACADABRA", "WHOA", "APPLE", "EGGS"};
        ArrayList&lt;String&gt; wordList = new ArrayList&lt;String&gt;();
        for (String word : words2) wordList.add(word);
        System.out.print(wordList);
        scrambleOrRemove(wordList);
        System.out.println(" ==&gt; " + wordList);
    }
}

</code><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;

@SuppressWarnings("unchecked")
public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ScrambledStrings");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "[TNA, BARCADABARA, PAPLE]";
        boolean passed = output.contains(expect);
        passed = getResults(expect, output, "expected output from main", passed);
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        ArrayList&lt;String&gt; wordList =
                new ArrayList(Arrays.asList("TAN", "ABRACADABRA", "WHOA", "APPLE", "EGGS"));

        ArrayList&lt;String&gt; wordListExpect =
                new ArrayList&lt;String&gt;(Arrays.asList("TNA", "BARCADABARA", "PAPLE"));

        ScrambledStrings.scrambleOrRemove(wordList);

        boolean result = wordList.equals(wordListExpect);

        boolean passed =
                getResults(
                        "true",
                        "" + result,
                        "scrambleOrRemove works for ArrayList #1: TAN, ABRACADABRA, WHOA, APPLE,"
                            + " EGGS");

        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        ArrayList&lt;String&gt; wordList = new ArrayList(Arrays.asList("TESTING", "ONE", "TWO", "THREE"));

        ArrayList&lt;String&gt; wordListExpect = new ArrayList&lt;String&gt;(Arrays.asList());

        ScrambledStrings.scrambleOrRemove(wordList);

        boolean result = wordList.equals(wordListExpect);

        boolean passed =
                getResults(
                        "true",
                        "" + result,
                        "scrambleOrRemove works for ArrayList #2: TESTING, ONE, TWO, THREE");

        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
        </subsection>
</section>

<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="ArrayListParsonsPractice">
  <title>ArrayList Mixed Up Code Practice</title>
  <p>
    Try to solve each of the following. Click the <em>Check</em> button to check
    each solution. You will be told if your solution is too short, has a block
    in the wrong order, or you are using the wrong block. Some of the problems
    have an extra block or two that aren’t needed in the correct solution. Try
    to solve these on your phone or other mobile device!
  </p>

  <activity label="ch8ex1muc" xml:id="ch8ex1muc" numbered="yes" adaptive="yes" indentation="hide" language="java">
    <statement>
      <p>
        The following program segment should be a class that adds some Strings
        of conversational phrases to a List and then prints them out. But, the
        blocks have been mixed up and include one extra block that is not needed
        in a correct solution. Drag the needed code from the left to the right
        and put them in order with the correct indention so that the code would
        work correctly. Click the Check button to check your solution.
      </p>
    </statement>

    <blocks>
      <block order="2">
        <cline>import java.util.List;</cline>
        <cline>import java.util.ArrayList;</cline>
      </block>

      <block order="9" correct="no">
        <cline>import java.util.List;</cline>
      </block>

      <block order="4">
        <cline>public class ListTest</cline>
        <cline>{</cline>
      </block>

      <block order="1">
        <cline>   public static void main(String[] args)</cline>
        <cline>   {</cline>
      </block>

      <block order="6">
        <cline>       List&lt;String&gt; conversation;</cline>
        <cline>       conversation = new ArrayList&lt;String&gt;();</cline>
      </block>

      <block order="7">
        <cline>       conversation.add("hello");</cline>
        <cline>       conversation.add("goodbye");</cline>
        <cline>       conversation.add("how are you");</cline>
        <cline>       conversation.add("see you later");</cline>
      </block>

      <block order="5">
        <cline>       for (String element: conversation)</cline>
        <cline>       {</cline>
      </block>

      <block order="3">
        <cline>           System.out.print(element + ", ");</cline>
      </block>

      <block order="8">
        <cline>       } //end for loop</cline>
        <cline>   } //end main method</cline>
        <cline>} //end class</cline>
      </block>
    </blocks>
  </activity>

  <activity label="ch8ex2muc" xml:id="ch8ex2muc" numbered="yes" adaptive="yes" indentation="hide" language="java">
    <statement>
      <p>
        The following program segment should be a method that traverses through
        an ArrayList of Strings (the parameter) and print out the elements in
        reverse order – so {“cat”, “dog”, “mouse”} should print “mouse, dog,
        cat, ” as output. Assume the ArrayList “myList” has been instantiated
        and filled with Strings. But, the blocks have been mixed up and include
        two extra blocks that are not needed in a correct solution. Drag the
        needed blocks from the left and put them in the correct order on the
        right. Click the Check button to check your solution.
      </p>
    </statement>

    <blocks>
      <block order="4">
        <cline>public static void printBackwards(ArrayList&lt;String&gt; myList)</cline>
        <cline>{</cline>
      </block>

      <block order="6">
        <cline>    for (int i = myList.size() - 1; i &gt;= 0; i--)</cline>
        <cline>    {</cline>
      </block>

      <block order="5" correct="no">
        <cline>    for (int i = myList.size() - 1; i &gt; 0; i--)</cline>
        <cline>    {</cline>
      </block>

      <block order="1">
        <cline>        System.out.print(myList.get(i) + ", ");</cline>
      </block>

      <block order="2" correct="no">
        <cline>        System.out.print(myList[i] + ", ");</cline>
      </block>

      <block order="3">
        <cline>    } //end for loop</cline>
        <cline>} //end printBackwards method</cline>
      </block>
    </blocks>
  </activity>

  <activity label="ch8ex3muc" xml:id="ch8ex3muc" numbered="yes" adaptive="yes" indentation="hide" language="java">
    <statement>
      <p>
        The following program segment should remove all the zeros from an
        ArrayList of Integers. Assume the ArrayList “listOfNums” has been
        instantiated and filled with Integers. But, the blocks have been mixed
        up and include two extra blocks that are not needed in a correct
        solution. Drag the blocks from the left and put them in the correct
        order on the right. Click the Check button to check your solution.
      </p>
    </statement>

    <blocks>
      <block order="6">
        <cline>Integer zero = new Integer(0);</cline>
        <cline>int i = 0;</cline>
      </block>

      <block order="5">
        <cline>while (i &lt; listOfNums.size())</cline>
        <cline>{</cline>
      </block>

      <block order="1">
        <cline>    if (listOfNums.get(i).equals(zero))</cline>
        <cline>    {</cline>
      </block>

      <block order="3" correct="no">
        <cline>    if (listOfNums.get(i) == zero)</cline>
        <cline>    {</cline>
      </block>

      <block order="7">
        <cline>        listOfNums.remove(i);</cline>
      </block>

      <block order="8">
        <cline>    } //end if</cline>
      </block>

      <block order="2">
        <cline>    else</cline>
        <cline>    {</cline>
        <cline>        i++;</cline>
        <cline>    }</cline>
      </block>

      <block order="4" correct="no">
        <cline>    i++;</cline>
      </block>

      <block order="9">
        <cline>} //end while loop</cline>
      </block>
    </blocks>
  </activity>

  <activity label="ch8ex4muc" xml:id="ch8ex4muc" numbered="yes" adaptive="yes" indentation="hide" language="java">
    <statement>
      <p>
        The following program segment is a method that should return the
        smallest int given an ArrayList of Integers (the parameter). But, the
        blocks have been mixed up and include one extra block that is not needed
        in a correct solution. Drag the blocks from the left and put them in the
        correct order on the right. Click the Check button to check your
        solution.
      </p>
    </statement>

    <blocks>
      <block order="6">
        <cline>public static int findSmallest(ArrayList&lt;Integer&gt; nums)</cline>
        <cline>{</cline>
      </block>

      <block order="10">
        <cline>    int smallest = nums.get(0);</cline>
      </block>

      <block order="3" correct="no">
        <cline>    int smallest = nums[0];</cline>
      </block>

      <block order="1">
        <cline>    for (int i = 0; i &lt; nums.size(); i++)</cline>
        <cline>    {</cline>
      </block>

      <block order="2">
        <cline>        if (nums.get(i) &lt; smallest)</cline>
        <cline>        {</cline>
      </block>

      <block order="8">
        <cline>            smallest = nums.get(i);</cline>
      </block>

      <block order="7">
        <cline>        }</cline>
      </block>

      <block order="5">
        <cline>    } //end for loop</cline>
      </block>

      <block order="4">
        <cline>    return smallest;</cline>
      </block>

      <block order="9">
        <cline>} //end findSmallest method</cline>
      </block>
    </blocks>
  </activity>

  <activity label="ch8ex5muc" xml:id="ch8ex5muc" numbered="yes" adaptive="yes" indentation="hide" language="java">
    <statement>
      <p>
        The following program segment is a method that should remove all the
        positive and negative odd values in an ArrayList of Integers (the
        parameter). But, the blocks have been mixed up and include one extra
        block that is not needed in a correct solution. Drag the blocks from the
        left and put them in the correct order on the right. Click the Check
        button to check your solution.
      </p>
    </statement>

    <blocks>
      <block order="4">
        <cline>public static void removeOdd(ArrayList&lt;Integer&gt; nums)</cline>
        <cline>{</cline>
      </block>

      <block order="1">
        <cline>    int i = 0;</cline>
      </block>

      <block order="2">
        <cline>    while (i &lt; nums.size())</cline>
        <cline>    {</cline>
      </block>

      <block order="6">
        <cline>        if (Math.abs(nums.get(i)) % 2 == 1)</cline>
        <cline>        {</cline>
      </block>

      <block order="8" correct="no">
        <cline>        if (nums.get(i) % 2 == 1)</cline>
        <cline>        {</cline>
      </block>

      <block order="5">
        <cline>            nums.remove(i);</cline>
      </block>

      <block order="7">
        <cline>        } else {</cline>
        <cline>            i++;</cline>
        <cline>        }</cline>
      </block>

      <block order="3">
        <cline>    } //end while loop</cline>
      </block>

      <block order="9">
        <cline>} //end removeOdd method</cline>
      </block>
    </blocks>
  </activity>

  <activity label="ch8ex6muc" xml:id="ch8ex6muc" numbered="yes" adaptive="yes" indentation="hide" language="java">
    <statement>
      <p>
        The following method should calculate the average from an ArrayList of
        Integers (the parameter). But, the blocks have been mixed up and include
        one extra block that is not needed in a correct solution. Drag the
        needed code from the left to the right and put them in order with the
        correct indention so that the code would work correctly. Click the Check
        button to check your solution.
      </p>
    </statement>

    <blocks>
      <block order="1">
        <cline>public static double average(ArrayList&lt;Integer&gt; nums)</cline>
        <cline>{</cline>
      </block>

      <block order="5">
        <cline>   double sum = 0;</cline>
      </block>

      <block order="2">
        <cline>   for (int i = 0; i &lt; nums.size(); i++)</cline>
        <cline>   {</cline>
      </block>

      <block order="6" correct="no">
        <cline>   for (int i = 0; i &lt; nums.length; i++)</cline>
        <cline>   {</cline>
      </block>

      <block order="7">
        <cline>       sum += nums.get(i);</cline>
      </block>

      <block order="4">
        <cline>   } //end for loop</cline>
      </block>

      <block order="8">
        <cline>   return (sum / nums.size());</cline>
      </block>

      <block order="3">
        <cline>} //end average method</cline>
      </block>
    </blocks>
  </activity>

  <activity label="ch8ex7muc" xml:id="ch8ex7muc" numbered="yes" adaptive="yes" indentation="hide" language="java">
    <statement>
      <p>
        The following program segment is a method that should find the largest
        value given an ArrayList of Integers (the parameter) and move it to the
        back of the list. But, the blocks have been mixed up and include two
        extra blocks that are not needed in a correct solution. Drag the blocks
        from the left and put them in the correct order on the right. Click the
        Check button to check your solution.
      </p>
    </statement>

    <blocks>
      <block order="8">
        <cline>public static void moveLargest(ArrayList&lt;Integer&gt; nums)</cline>
        <cline>{</cline>
      </block>

      <block order="6">
        <cline>    int largest = 0;</cline>
      </block>

      <block order="5">
        <cline>    for (int i = 0; i &lt; nums.size(); i++)</cline>
        <cline>    {</cline>
      </block>

      <block order="3">
        <cline>        if (nums.get(i) &gt; nums.get(largest))</cline>
        <cline>        {</cline>
      </block>

      <block order="1" correct="no">
        <cline>        if (nums[i] &gt; nums[largest])</cline>
        <cline>        {</cline>
      </block>

      <block order="2">
        <cline>            largest = i;</cline>
      </block>

      <block order="11">
        <cline>        }</cline>
      </block>

      <block order="9">
        <cline>    } //end for loop</cline>
      </block>

      <block order="10">
        <cline>    Integer largestVal = nums.remove(largest);</cline>
        <cline>    nums.add(largestVal);</cline>
      </block>

      <block order="4" correct="no">
        <cline>    nums.add(largest);</cline>
      </block>

      <block order="7">
        <cline>} //end moveLargest method</cline>
      </block>
    </blocks>
  </activity>

  <activity label="ch8ex8muc" xml:id="ch8ex8muc" numbered="yes" adaptive="yes" indentation="hide" language="java">
    <statement>
      <p>
        The following method should remove all the Strings that have length 3 or
        shorter from an ArrayList of Strings (the parameter) – so {“catch”,
        “dog”, “tree”, “me”} should return {“catch”, “tree”}. But, the blocks
        have been mixed up and include one extra block that is not needed in a
        correct solution. Drag the needed code from the left to the right and
        put them in order with the correct indention so that the code would work
        correctly. Click the Check button to check your solution.
      </p>
    </statement>

    <blocks>
      <block order="5">
        <cline>public static void removeShort(ArrayList&lt;String&gt; words)</cline>
        <cline>{</cline>
      </block>

      <block order="6">
        <cline>    int i = 0;</cline>
      </block>

      <block order="2">
        <cline>    while (i &lt; words.size())</cline>
        <cline>    {</cline>
      </block>

      <block order="9">
        <cline>        if (words.get(i).length() &lt;= 3)</cline>
        <cline>        {</cline>
      </block>

      <block order="1" correct="no">
        <cline>        if (words.get(i).length &lt;= 3)</cline>
        <cline>        {</cline>
      </block>

      <block order="8">
        <cline>            words.remove(i);</cline>
      </block>

      <block order="3">
        <cline>        } else {</cline>
        <cline>            i++;</cline>
        <cline>        }</cline>
      </block>

      <block order="7">
        <cline>    } //end while loop</cline>
      </block>

      <block order="4">
        <cline>} //end removeShort method</cline>
      </block>
    </blocks>
  </activity>

  <activity label="ch8ex9muc" xml:id="ch8ex9muc" numbered="yes" adaptive="yes" indentation="hide" language="java">
    <statement>
      <p>
        The following program segment is a method that should take each String
        from an ArrayList of Strings (the parameter) and add it again to the
        list – so {“cat”, “ribbon”, “house”} should become {“cat”, “cat”,
        “ribbon”, “ribbon”, “house”, “house”}. But, the blocks have been mixed
        up and include two extra blocks that are not needed in a correct
        solution. Drag the blocks from the left and put them in the correct
        order on the right. Click the Check button to check your solution.
      </p>
    </statement>

    <blocks>
      <block order="3">
        <cline>public static void doubleList(ArrayList&lt;String&gt; words)</cline>
        <cline>{</cline>
      </block>

      <block order="7">
        <cline>    int count = 0;</cline>
      </block>

      <block order="2">
        <cline>    while (count &lt; words.size())</cline>
        <cline>    {</cline>
      </block>

      <block order="8" correct="no">
        <cline>    while (count &lt;= words.size())</cline>
        <cline>    {</cline>
      </block>

      <block order="6">
        <cline>        String toAdd = words.get(count);</cline>
        <cline>        words.add(count, toAdd);</cline>
      </block>

      <block order="9">
        <cline>        count += 2;</cline>
      </block>

      <block order="4" correct="no">
        <cline>        count++;</cline>
      </block>

      <block order="1">
        <cline>    } //end while loop</cline>
      </block>

      <block order="5">
        <cline>} //end doubleList method</cline>
      </block>
    </blocks>
  </activity>

  <activity label="ch8ex10muc" xml:id="ch8ex10muc" numbered="yes" adaptive="yes" indentation="hide" language="java">
    <statement>
      <p>
        The following method should remove a specific Integer (specified in
        parameter) whenever it occurs in a given ArrayList of Integers (the
        parameter). But, the blocks have been mixed up and include three extra
        blocks that are not needed in a correct solution. Drag the needed code
        from the left to the right and put them in order with the correct
        indention so that the code would work correctly. Click the Check button
        to check your solution.
      </p>
    </statement>

    <blocks>
      <block order="4">
        <cline>public static void removeElement(</cline>
        <cline>                      ArrayList&lt;Integer&gt; nums,</cline>
        <cline>                      int toRemove)</cline>
        <cline>{</cline>
      </block>

      <block order="3">
        <cline>   int i = 0;</cline>
      </block>

      <block order="5">
        <cline>   while (i &lt; nums.size())</cline>
        <cline>   {</cline>
      </block>

      <block order="6" correct="no">
        <cline>   while (i &lt; nums.length)</cline>
        <cline>   {</cline>
      </block>

      <block order="11">
        <cline>       if (nums.get(i) == toRemove)</cline>
        <cline>       {</cline>
      </block>

      <block order="8" correct="no">
        <cline>       if (nums.get(i) == nums(toRemove))</cline>
        <cline>       {</cline>
      </block>

      <block order="1">
        <cline>        nums.remove(i);</cline>
      </block>

      <block order="2">
        <cline>       } //end if</cline>
      </block>

      <block order="10">
        <cline>       else {</cline>
        <cline>           i++;</cline>
        <cline>       }</cline>
      </block>

      <block order="9" correct="no">
        <cline>       i++;</cline>
      </block>

      <block order="7">
        <cline>   } //end while loop</cline>
        <cline>} //end method</cline>
      </block>
    </blocks>
  </activity>
</section>

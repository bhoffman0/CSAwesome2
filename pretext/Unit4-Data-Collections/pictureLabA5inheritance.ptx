<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by Docutils 0.17.1 -->

<section xml:id="pictureLabA5inheritance">
  <title>Picture Lab A5: Picture Classes and Inheritance</title>
  <subsection xml:id="picture-classes-uml-and-inheritance">
    <title>Picture Classes: UML and Inheritance</title>
    <p>
      The <c>Picture</c> class inherits attributes and methods from the
      <c>SimplePicture</c> class and the <c>SimplePicture</c> class implements
      the <c>DigitalPicture</c> interface as shown in the <term>Unified Modeling
      Language (UML)</term> class diagram in the figure below.
    </p>

    <figure align="center">
      <caption>A UML Class diagram</caption>
      <image source="Unit4-Data-Collections/Figures/UML.png" width="100%" />
    </figure>

    <p>
      A UML class diagram shows classes and the relationships between the
      classes. Each class is shown in a box with the class name at the top. The
      middle area shows attributes (instance or class variables) and the bottom
      area shows methods. The open triangle points to the class that the
      connected class inherits from. The straight line links show associations
      between classes. Association is also called a “has-a” relationship. The
      numbers at the end of the association links give the number of objects
      associated with an object at the other end.
    </p>

    <p>
      For example, it shows that one <c>Pixel</c> object has one <c>Color</c>
      object associated with it and that a <c>Color</c> object can have zero to
      many <c>Pixel</c> objects associated with it. You may notice that the UML
      class diagram doesn’t look exactly like Java code. UML isn’t language
      specific.
    </p>

    <p>
      The following questions require some knowledge about inheritance which is
      covered in the next unit, Unit 9. You may want to come back to do these
      questions after Unit 9.
    </p>

    <p>
      Click on this <url href="https://replit.com/@BerylHoffman/Picture-Lab"
      visual="https://replit.com/@BerylHoffman/Picture-Lab">Picture Lab project
      link</url> and click on Show files to answer the following questions.
    </p>

    <activity label="picture-day5-0a">
      <statement>
        <p>
          Click on the <url href="https://replit.com/@BerylHoffman/Picture-Lab"
          visual="https://replit.com/@BerylHoffman/Picture-Lab">Picture Lab
          project link</url> and click on Show files. Open <c>Picture.java</c>
          and look for the method <c>getPixels2D</c>. Is it there?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>Yes</p>
          </statement>

          <feedback>
            <p>
              The Picture.java class does not have the getPixels2D() method
              defined in it but it inherits it from the class SimplePicture.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>No, but it is inherited</p>
          </statement>

          <feedback>
            <p>
              Correct, this class inherits that method from the class
              SimplePicture.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="picture-day5-1">
      <statement>
        <p>
          Open <c>SimplePicture.java</c> and look for the method
          <c>getPixels2D</c>. Is it there?
        </p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>Yes</p>
          </statement>

          <feedback>
            <p>Yes, the SimplePicture class contains the method getPixels2D.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>No</p>
          </statement>

          <feedback>
            <p>The SimplePicture class contains the method getPixels2D.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="picture-day5-1a">
      <statement>
        <p>
          This question is about interfaces which are not covered in the AP
          exam. Interfaces are like abstract templates of a class that specify
          the method headers but not the definitions. Does the following code
          compile? Try it in the main method if you do not know.
        </p>

        <p>DigitalPicture p = new DigitalPicture();</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>yes</p>
          </statement>

          <feedback>
            <p>
              We cannot create an object from an interface because it is
              abstract.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>no</p>
          </statement>

          <feedback>
            <p>
              Correct! We cannot create an object from an interface because it
              is abstract.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="picture-day5-2a">
      <statement>
        <p>
          This question is about interfaces which are not covered in the AP
          exam. Assuming that a no-argument constructor exists for
          SimplePicture, would the following code compile?
        </p>

        <p>DigitalPicture p = new SimplePicture();</p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>yes</p>
          </statement>

          <feedback>
            <p>
              Yes. The SimplePicture class implements the interface
              DigitalPicture which means it is a type of Digital Picture.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>no</p>
          </statement>

          <feedback>
            <p>
              The SimplePicture class implements the interface DigitalPicture
              which means it is a type of Digital Picture.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="picture-day5-3a">
      <statement>
        <p>
          This question is about interfaces which are not covered in the AP
          exam. Assuming that a no-argument constructor exists for Picture,
          would the following code compile?
        </p>

        <p>DigitalPicture p = new Picture();</p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>yes</p>
          </statement>

          <feedback>
            <p>
              Yes, because Picture extends SimplePicture which implements the
              interface DigitalPicture.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>no</p>
          </statement>

          <feedback>
            <p>
              Picture extends SimplePicture which implements the interface
              DigitalPicture.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="picture-day5-4a">
      <statement>
        <p>
          Assuming that a no-argument constructor exists for Picture, does the
          following code compile?
        </p>

        <p>SimplePicture p = new Picture();</p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>yes</p>
          </statement>

          <feedback>
            <p>
              Yes, because Picture extends SimplePicture which implements the
              interface DigitalPicture.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>no</p>
          </statement>

          <feedback>
            <p>
              Picture extends SimplePicture which implements the interface
              DigitalPicture.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="picture-day5-5a">
      <statement>
        <p>
          Assuming that a no-argument constructor exists for SimplePicture, does
          the following code compile?
        </p>

        <p>Picture p = new SimplePicture();</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>yes</p>
          </statement>

          <feedback>
            <p>
              Picture inherits from SimplePicture, but not the other way around.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>no</p>
          </statement>

          <feedback>
            <p>
              Picture inherits from SimplePicture, but not the other way around.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <p>
      Because DigitalPicture declares a getPixels2D method that returns a two-
      dimensional array of Pixel objects, SimplePicture implements that
      interface, and Picture inherits from SimplePicture, you can use the
      getPixels2D method on a Picture object. You can loop through all the Pixel
      objects in the two-dimensional array to modify the picture. You can get
      and set the red, green, and/or blue value for a Pixel object. You can also
      get and/or set the Color value for a Pixel object. For example,
    </p>

    <program language="java">
      <code>
Picture pict = new Picture("beach.jpg");
Pixel[][] pixels = pict.getPixels2D();
Pixel p = pixels[0][0]; // get the first pixel
int blue = p.getBlue(); // get its blue value
System.out.println("Pixel (0,0) has a blue value of " + blue );
p.setBlue(255);  // set its blue value to 255
pict.show();
</code>
    </program>
  </subsection>
</section>


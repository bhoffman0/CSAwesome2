<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="delimitersQ3b">
  <title>Free Response - Delimiters B</title><introduction>
    
  </introduction>
  <subsection xml:id="part-b">
            <title>Part B</title>
            <p>(b) Write the method <c>isBalanced</c>, which returns <c>true</c> when the delimiters are balanced and returns <c>false</c> otherwise.  The delimiters are balanced when both
                of the following conditions are satisfied; otherwise they are not balanced.</p>
            <p><ol marker="1">
                <li>
                    <p>When traversing the <c>ArrayList</c> from the first element to the last element, there is no point at which there are more close delimiters than open delimiters at or before that point.</p>
                </li>
                <li>
                    <p>the total number of open delimiters is equal to the total number of close delimiters.</p>
                </li>
            </ol></p>
            <p>Consider a <c>Delimiters</c> object for which <title_reference>openDel`</title_reference> is <c>"&lt;sup&gt;"</c> and <c>closeDel</c> is <c>"&lt;/sup&gt;"</c>.  The examples below show different <c>ArrayList</c> objects that could
                be returned by calls to <c>getDelimitersList</c> and the value that would be returned by a call to <c>isBalanced</c>.</p>
            <figure align="center"><image source="Unit4-Data-Collections/Figures/frq-delim-2019-q3b.png" width="50%"/></figure>
        </subsection>
  <subsection xml:id="check-your-understanding-of-the-question-1">
            <title>Check your understanding of the Question</title>
            <p>The problems in this section can help you check your understanding of part B.  You can skip these if you think you know what to do already.  Click on a button to reveal a question.</p>
            

    <exercise label="delim_cub_mc_1">
        <statement>

                <p> What type does isBalanced return?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>String</p>
                </statement>
                <feedback>
                    <p>What type are false and true?</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>boolean</p>
                </statement>
                <feedback>
                    <p>The values false and true are of type boolean.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>int</p>
                </statement>
                <feedback>
                    <p>In some languages false and true are represented by integers, but not in Java.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>ArrayList</p>
                </statement>
                <feedback>
                    <p>What type are false and true?</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            
            

    <exercise label="delim_cub_mc_2">
        <statement>

                <p> What is the name of the variable the code will be looping through?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>openDel</p>
                </statement>
                <feedback>
                    <p>openDel holds the open delimiter</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>closeDel</p>
                </statement>
                <feedback>
                    <p>closeDel holds the close delimiter</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Delimiters</p>
                </statement>
                <feedback>
                    <p>Delimiters is the class name</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>delimiters</p>
                </statement>
                <feedback>
                    <p>delimiters is the variable which is passed to the isBalanced method</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            
        </subsection>
  <subsection xml:id="how-to-solve-part-b">
            <title>How to Solve Part B</title>
            <p>Here is the question again.</p>
            <p>Write the method <c>isBalanced</c>, which returns <c>true</c> when the delimiters are balanced and returns <c>false</c> otherwise.  The delimiters are balanced when both
                of the following conditions are satisfied; otherwise they are not balanced.</p>
            <p><ol marker="1">
                <li>
                    <p>When traversing the <c>ArrayList&lt;String&gt; delimiters</c> from the first element to the last element, there is no point at which there are more close delimiters than open delimiters at or before that point.</p>
                </li>
                <li>
                    <p>the total number of open delimiters is equal to the total number of close delimiters.</p>
                </li>
            </ol></p>

<exercise label="delim_algorithm_partb">
    <statement>
            <p> Explain in plain English what your code will have to do to answer this question.  Use the names given above.</p>

    </statement>
</exercise>
            <p>This section contains a plain English explanation of one way to solve this problem as well as problems that test your understanding of how to write the code to do those things.  Click on a button to reveal the algorithm or problem.</p>
            <subsection>
                <p>The method <c>isBalanced</c> will loop through <c>delimiters</c> and keep track of the number of open and close delimiters we have found so far.  To do that we can create two integer variables: <c>totalOpen</c> and <c>totalClose</c> and set them to 0
                    initially. Each time through the loop we will check if the current string which we will call currString is equal to <c>openDel</c> and if so increment <c>totalOpen</c>, otherwise if it is equal to <c>closeDel</c> increment <c>totalClose</c>.   Next if <c>totalClose</c> &gt; <c>totalOpen</c> the method should return false.  A
                    After the loop return <c>totalOpen</c> == <c>totalClose</c>.  This will return true if they are equal and false otherwise.</p>
            </subsection>
            

    <exercise label="delim_solveb_mc_1">
        <statement>

                <p> Which loop would be best for this situation?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>while</p>
                </statement>
                <feedback>
                    <p>You can use a while loop, but it would make your code more error prone than another type of loop</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>for</p>
                </statement>
                <feedback>
                    <p>You can use a for loop, but it would make your code more error prone than another type of loop</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>for-each</p>
                </statement>
                <feedback>
                    <p>Since you need to loop through all the strings in the ArrayList in order, a for-each loop would be best</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>nested for loop</p>
                </statement>
                <feedback>
                    <p>There is no need for a nested loop in this situation</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            
            

    <exercise label="delim_solveb_mc_2">
        <statement>

                <p> Which Java expression correctly tests if currString is equal to openDel?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>if (currString = openDel)</p>
                </statement>
                <feedback>
                    <p>You must declare the type for delList</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>if (currString == openDel)</p>
                </statement>
                <feedback>
                    <p>You must include the () when creating a new object</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>if (currString.equals(openDel))</p>
                </statement>
                <feedback>
                    <p>You must create an ArrayList using a concrete subclass like ArrayList</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>if (currString.equal(openDel))</p>
                </statement>
                <feedback>
                    <p>The declared type must be the same or a parent class of the actual type.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            
        </subsection>
  <subsection xml:id="write-the-code-2">
            <title>Write the Code</title>
            <p>Write the method <c>isBalanced</c>, which returns <c>true</c> when the delimiters are balanced and returns <c>false</c> otherwise.  The delimiters are balanced when both
                of the following conditions are satisfied; otherwise they are not balanced.</p>
            <p><ol marker="1">
                <li>
                    <p>When traversing the <c>ArrayList</c> from the first element to the last element, there is no point at which there are more close delimiters than open delimiters at or before that point.</p>
                </li>
                <li>
                    <p>the total number of open delimiters is equal to the total number of close delimiters.</p>
                </li>
            </ol></p>

<exercise label="frq2019Q3B-delim">
    <statement>
            <p>Write the method <c>isBalanced</c> in the code below. The <c>main</c> method contains code to test your solution.</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
import java.util.*;

public class Delimiters
{

    /** The open and close delimiters * */
    private String openDel;

    private String closeDel;

    /**
     * Constructs a Delimiters object were open is the open delimiter and close is
     * the close delimiter. Precondition: open and close are non-empty strings
     */
    public Delimiters(String open, String close)
    {
        openDel = open;
        closeDel = close;
    }

    /**
     * Returns an ArrayList of delimiters from the array tokens, as described in
     * part (a).
     */
    public ArrayList&lt;String&gt; getDelimitersList(String[] tokens)
    {
        ArrayList&lt;String&gt; delList = new ArrayList&lt;String&gt;();

        for (String currString : tokens)
        {
            if (currString.equals(openDel) || currString.equals(closeDel))
            {
                delList.add(currString);
            }
        }
        return delList;
    }

    /**
     * Returns true if the delimiters are balanced and false otherwise, as
     * described in part (b). Precondition: delimiters contains only valid open and
     * close delimiters.
     */
    public boolean isBalanced(ArrayList&lt;String&gt; delimiters)
    {
        /* to be implemented in part (b) */
    }

    public static void main(String[] args)
    {
        Delimiters d1 = new Delimiters("&lt;sup&gt;", "&lt;/sup&gt;");
        String[] tokens =
        {
            "&lt;sup&gt;", "&lt;sup&gt;", "&lt;/sup&gt;", "&lt;sup&gt;", "&lt;/sup&gt;", "&lt;/sup&gt;"
        };
        ArrayList&lt;String&gt; delList1 = d1.getDelimitersList(tokens);
        boolean res1 = d1.isBalanced(delList1);
        System.out.println("It should print true and it prints " + res1);

        String[] tokens2 = {"&lt;sup&gt;", "&lt;/sup&gt;", "&lt;/sup&gt;", "&lt;sup&gt;"};
        ArrayList&lt;String&gt; delList2 = d1.getDelimitersList(tokens2);
        boolean res2 = d1.isBalanced(delList2);
        System.out.println("It should print false and it prints " + res2);

        String[] tokens3 = {"&lt;/sup&gt;"};
        ArrayList&lt;String&gt; delList3 = d1.getDelimitersList(tokens3);
        boolean res3 = d1.isBalanced(delList2);
        System.out.println("It should print false and it prints " + res3);

        String[] tokens4 = {"&lt;sup&gt;", "&lt;/sup&gt;", "&lt;/sup&gt;"};
        ArrayList&lt;String&gt; delList4 = d1.getDelimitersList(tokens4);
        boolean res4 = d1.isBalanced(delList2);
        System.out.println("It should print false and it prints " + res4);
    }
}

</code><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.util.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Delimiters");
    }

    @Test
    public void test0()
    {
        String output = getMethodOutput("main");
        String expect =
                "It should print true and it prints true\n"
                    + "It should print false and it prints false\n"
                    + "It should print false and it prints false\n"
                    + "It should print false and it prints false\n";

        boolean passed =
                getResults(
                        expect,
                        output,
                        "Expected output from main: testing isBalanced on 4 sets of delimiters.");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        Delimiters d1 = new Delimiters("{", "}");

        String[] tokens = {"{", "{", "}", "{", "}", "}"};
        ArrayList&lt;String&gt; delList1 = d1.getDelimitersList(tokens);
        boolean res1 = d1.isBalanced(delList1);

        boolean passed =
                getResults(
                        "true",
                        "" + res1,
                        "isBalanced works on a balanced set of delimiters "
                                + Arrays.toString(tokens));

        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        Delimiters d1 = new Delimiters("{", "}");

        String[] tokens2 = {"{", "}", "}", "{"};
        ArrayList&lt;String&gt; delList2 = d1.getDelimitersList(tokens2);

        boolean res2 = d1.isBalanced(delList2);

        boolean passed =
                getResults(
                        "false",
                        "" + res2,
                        "isBalanced on a non-balanced set of delimiters "
                                + Arrays.toString(tokens2));

        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        Delimiters d1 = new Delimiters("{", "}");

        String[] tokens3 = {"}"};
        ArrayList&lt;String&gt; delList3 = d1.getDelimitersList(tokens3);

        boolean res3 = d1.isBalanced(delList3);

        boolean passed =
                getResults(
                        "false",
                        "" + res3,
                        "isBalanced on a non-balanced set of delimiters "
                                + Arrays.toString(tokens3));

        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        Delimiters d1 = new Delimiters("{", "}");

        String[] tokens4 = {"{", "}", "}"};
        ArrayList&lt;String&gt; delList4 = d1.getDelimitersList(tokens4);

        boolean res4 = d1.isBalanced(delList4);

        boolean passed =
                getResults(
                        "false",
                        "" + res4,
                        "isBalanced on a non-balanced set of delimiters "
                                + Arrays.toString(tokens4));

        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
        </subsection>
</section>

<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section>
  <title>Parsons Problems for Experiments</title>
  <p>Try to solve each of the following. Click the <em>Check Me</em> button to check each solution.  You will be told if your solution is too short, has a block in the wrong order, or you are using the wrong block.  Some of the problems have an extra block or two that arenâ€™t needed in the correct solution.  Try to solve these on your phone or other mobile device!</p>
  <exercises>
    <exercise label="ex-array-nd-has22" numbered="yes" adaptive="yes" indentation="show" language="python"><statement>
        <p>Create the method <c>boolean has22(int[] arr)</c> that takes an array of ints, <c>arr</c>,
            and returns <c>true</c> if there are at least two items in the array <c>arr</c> that are adjacent
            and both equal to <c>2</c>.
            For example, <c>has22({1, 2, 2})</c> returns <c>true</c> and <c>has22({1, 2, 1, 2})</c> returns <c>false</c>.</p>
</statement>
<blocks><block order="8">
<cline>public boolean has22(int[] arr) {</cline>
</block><block order="7">
<cline>    for (int i = 0; i &lt; arr.length - 1; i++) {</cline>
</block><block order="6">
<cline>        if (arr[i] == 2 &amp;&amp; arr[i+1] == 2) {</cline>
</block><block order="4">
<cline>            return true;</cline>
</block><block order="3">
<cline>        }</cline>
</block><block order="5">
<cline>    }</cline>
</block><block order="1">
<cline>    return false;</cline>
</block><block order="2">
<cline>}</cline>
</block></blocks></exercise>
    <exercise label="ex-array-wd-has22" numbered="yes" adaptive="yes" indentation="show" language="python"><statement>
        <p>Create the method <c>has22(int[] arr)</c> that takes an array of ints, <c>arr</c> and
            returns <c>true</c> if there are at least two items in the array <c>arr</c> that are adjacent
            and both equal to <c>2</c>.
            For example, <c>has22({1, 2, 2})</c> returns <c>true</c> and <c>has22({1, 2, 1, 2})</c> returns <c>false</c>.</p>
</statement>
<blocks><block order="5">
<cline>public boolean has22(int[] arr) {</cline>
</block><block order="3">
<choice correct="yes"><cline>    for (int i = 0; i &lt; arr.length - 1; i++) {</cline>
</choice><choice><cline>    for (int i = 0; i &lt; arr.length; i++) { : need to stop one less than the length since looking at current and next</cline>
</choice></block><block order="7">
<choice correct="yes"><cline>        if (arr[i] == 2 &amp;&amp; arr[i+1] == 2) {</cline>
</choice><choice><cline>        if (arr[i] == arr[i+1]) { : need to check if equal to 2 as well</cline>
</choice></block><block order="6">
<cline>            return true;</cline>
</block><block order="2">
<cline>        }</cline>
</block><block order="9">
<cline>    }</cline>
</block><block order="10">
<cline>    return false;</cline>
</block><block order="8">
<cline>}</cline>
</block></blocks></exercise>
    <exercise label="has22_written">
    <statement>
        <p>Write the method <c>has22(int[] arr)</c> that takes an array of ints, <c>arr</c> and
            returns <c>true</c> if there are at least two items in the array <c>arr</c> that are
            adjacent and both equal to <c>2</c>.
            For example, <c>has22({1, 2, 2})</c> returns <c>true</c> and <c>has22({1, 2, 1, 2})</c> returns <c>false</c>.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class StudentCode
{

    public static boolean has22(int[] arr)
    {

        // write  code here

    }

    public static void main(String[] args)
    {

        int[] arr = {1, 2, 2};
        System.out.println(has22(arr));
        int[] arr2 = {1, 2, 1, 2};
        System.out.println(has22(arr2));
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;

public class has22Tester extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "true";
        assertEquals("Output doesn't match", cleanString(expect), cleanString      (output));
    }

    @Test
    public void testHas22() throws IOException {
        StudentCode s = new StudentCode();
        assertEquals("Testing {1, 2, 2}", true, s.has22({1, 2, 2}));
        assertEquals("Testing {1, 2, 1, 2}", false, s.has22({1, 2, 1, 2}));
        assertEquals("Testing {1, 2, 3}", false, s.has22({1, 2, 3}));
        assertEquals("Testing {2, 1, 2}", false, s.has22({2, 1, 2}));
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="ex-array-wd-has3OddOrEven" numbered="yes" adaptive="yes" indentation="show" language="python"><statement>
        <p>Create the method <c>has3OddOrEven(int[] arr)</c> that takes an array of ints, <c>arr</c>
            and returns <c>true</c> if the array contains either 3 odd or even values that are adjacent.
            For example <c>has3OddOrEven({2, 1, 3, 5})</c> returns <c>true</c> and <c>has3OddOrEven({2, 1, 2, 5})</c> returns <c>false</c>.</p>
</statement>
<blocks><block order="4">
<cline>public boolean has3OddOrEven(int[] arr) {</cline>
</block><block order="1">
<cline>    int count = 0;</cline>
</block><block order="6">
<choice correct="yes"><cline>    for (int i = 0; i &lt; arr.length - 1; i++) {</cline>
</choice><choice><cline>    for (int i = 0; i &lt; arr.length - 2; i++) { : need to stop two less than the length since looking at current and next two</cline>
</choice></block><block order="8">
<cline>        if (arr[i] % 2 == arr[i+1] % 2 &amp;&amp; arr[i+1] % 2 == arr[i+2] % 2) {</cline>
</block><block order="7">
<cline>            return true;</cline>
</block><block order="2">
<cline>        }</cline>
</block><block order="3">
<cline>    }</cline>
</block><block order="5">
<cline>    return false;</cline>
</block><block order="9">
<cline>}</cline>
</block></blocks></exercise>
    <exercise label="ex-array-nd-has3OddOrEven" numbered="yes" adaptive="yes" indentation="show" language="python"><statement>
        <p>Create the method <c>has3OddOrEven(int[] arr)</c> that takes an array of ints, <c>arr</c>
            and returns <c>true</c> if the array contains either 3 odd or even values that are adjacent.
            For example <c>has3OddOrEven({2, 1, 3, 5})</c> returns <c>true</c> and <c>has3OddOrEven({2, 1, 2, 5})</c> returns <c>false</c>.</p>
</statement>
<blocks><block order="5">
<cline>public boolean has3OddOrEven(int[] arr) {</cline>
</block><block order="6">
<cline>    int count = 0;</cline>
</block><block order="8">
<cline>    for (int i = 0; i &lt; arr.length - 2; i++) {</cline>
</block><block order="2">
<cline>        if (arr[i] % 2 == arr[i+1] % 2 &amp;&amp; arr[i+1] % 2 == arr[i+2] % 2) {</cline>
</block><block order="3">
<cline>            return true;</cline>
</block><block order="1">
<cline>        }</cline>
</block><block order="7">
<cline>    }</cline>
</block><block order="4">
<cline>    return false;</cline>
</block><block order="9">
<cline>}</cline>
</block></blocks></exercise>
    <exercise label="has3OddOrEven_written">
    <statement>
        <p>Write the method <c>has3OddOrEven(int[] arr)</c> that takes an array of ints, <c>arr</c>
            and returns <c>true</c> if the array contains either 3 even or 3 odd values all next to each other.
            For example <c>has3OddOrEven({2, 1, 3, 5})</c> returns <c>true</c> and <c>has3OddOrEven({2, 1, 2, 5})</c> returns <c>false</c>.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class StudentCode
{

    public static boolean has3OddOrEven(int[] arr)
    {

        // write code here
    }

    public static void main(String[] args)
    {

        int[] arr = {2, 1, 3, 5};
        System.out.println(has3OddOrEven(arr));
        int[] arr2 = {2, 1, 2, 5};
        System.out.println(has3OddOrEven(arr2));
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;

 public class has3OddOrEvenTester extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "true";
        assertEquals("Output doesn't match", cleanString(expect), cleanString      (output));
    }

    @Test
    public void testHas3OddOrEven() throws IOException {
        StudentCode s = new StudentCode();
        assertEquals("Testing [2, 1, 3, 5]", true, s.has3OddOrEven([2, 1, 3, 5]));
        assertEquals("Testing [2, 1, 2, 5]", false, s.has3OddOrEven([2, 1, 2, 5]));
        assertEquals("Testing [2, 1, 2]", false, s.has3OddOrEven([2, 1, 2]));
        assertEquals("Testing [3, 1, 3]", true, s.has3OddOrEven([3, 1, 3]));
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="ex-array-nd-isascending" numbered="yes" adaptive="yes" indentation="show" language="python"><statement>
        <p>Create the method <c>isAscending(int[] arr)</c> that takes an array of ints, <c>arr</c> and
            returns <c>true</c> if the all of the elements in the array are in ascending order.
            For example, <c>isAscending({1, 2, 3})</c> returns <c>true</c> and <c>isAscending({1, 2, 3, 2})</c>
            returns <c>false</c>.</p>
</statement>
<blocks><block order="3">
<cline>public boolean isAscending(int[] arr) {</cline>
</block><block order="8">
<cline>    for (int i = 0; i &lt; arr.length - 1; i++) {</cline>
</block><block order="1">
<cline>        if (arr[i] &gt; arr[i+1]) {</cline>
</block><block order="4">
<cline>            return false;</cline>
</block><block order="6">
<cline>        }</cline>
</block><block order="5">
<cline>    }</cline>
</block><block order="7">
<cline>    return true;</cline>
</block><block order="2">
<cline>}</cline>
</block></blocks></exercise>
    <exercise label="ex-array-wd-isascending" numbered="yes" adaptive="yes" indentation="show" language="python"><statement>
        <p>Create the method <c>isAscending(int[] arr)</c> that takes an array of ints, <c>arr</c> and
            returns <c>true</c> if the all of the elements in the array are in ascending order.
            For example, <c>isAscending({1, 2, 3})</c> returns <c>true</c> and <c>isAscending({1, 2, 3, 2})</c>
            returns <c>false</c>.</p>
</statement>
<blocks><block order="1">
<cline>public boolean isAscending(int[] arr) {</cline>
</block><block order="10">
<choice correct="yes"><cline>    for (int i = 0; i &lt; arr.length-1; i++) {</cline>
</choice><choice><cline>    for (int i = 0; i &lt; arr.length; i++) { : need to stop one less than the length since looking at current and next</cline>
</choice></block><block order="4">
<cline>        if (arr[i] &gt; arr[i+1]) {</cline>
</block><block order="6">
<choice correct="yes"><cline>            return false;</cline>
</choice><choice><cline>            return true; : need to return false since a greater than relationship would indicate descending</cline>
</choice></block><block order="3">
<cline>        }</cline>
</block><block order="9">
<cline>    }</cline>
</block><block order="5">
<cline>    return true;</cline>
</block><block order="2">
<cline>}</cline>
</block></blocks></exercise>
    <exercise label="isAscending_written">
    <statement>
        <p>Write the method <c>isAscending(int[] arr)</c> that takes an array of ints, <c>arr</c> and
            returns <c>true</c> if the all of the elements in the array are in ascending order.
            For example, <c>isAscending({1, 2, 3})</c> returns <c>true</c> and <c>isAscending({1, 2, 3, 2})</c>
            returns <c>false</c>.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class StudentCode
{

    public static boolean isAscending(int[] arr)
    {

        // write code here

    }

    public static void main(String[] args)
    {

        int[] arr = {1, 2, 3};
        System.out.println(isAscending(arr));
        int[] arr2 = {1, 2, 3, 2};
        System.out.println(isAscending(arr2));
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;

public class isAscendingTester extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "true";
        assertEquals("Output doesn't match", cleanString(expect), cleanString      (output));
    }

    @Test
    public void testIsAscending() throws IOException {
        StudentCode s = new StudentCode();
        assertEquals("Testing {1, 2, 3}", true, s.isAscending({1, 2, 3}));
        assertEquals("Testing {1, 2, 3, 2}", false, s.isAscending({1, 2, 3, 2}));
        assertEquals("Testing {3, 2, 1}", false, s.isAscending({3, 2, 1}));
        assertEquals("Testing {1, 5, 10}", true, s.isAscending({1, 5, 10}));
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="ex-array-nd-isdescending" numbered="yes" adaptive="yes" indentation="show" language="python"><statement>
        <p>Create the method <c>isDescending(int[] arr)</c> that takes an array of ints, <c>arr</c> and
            returns true if the all of the elements in the array are in descending order.
            For example, <c>isDescending({3, 2, 1})</c> returns <c>true</c> and <c>isDescending({3, 2, 1, 2})</c>
            returns <c>false</c>.</p>
</statement>
<blocks><block order="3">
<cline>public boolean isDescending(int[] arr) {</cline>
</block><block order="2">
<cline>    for (int i = 0; i &lt; arr.length - 1; i++) {</cline>
</block><block order="4">
<cline>        if (arr[i] &lt; arr[i+1]) {</cline>
</block><block order="6">
<cline>            return false;</cline>
</block><block order="7">
<cline>        }</cline>
</block><block order="5">
<cline>    }</cline>
</block><block order="8">
<cline>    return true;</cline>
</block><block order="1">
<cline>}</cline>
</block></blocks></exercise>
    <exercise label="ex-array-wd-isdescending" numbered="yes" adaptive="yes" indentation="show" language="python"><statement>
        <p>Create the method <c>isDescending(int[] arr)</c> that takes an array of ints, <c>arr</c> and
            returns true if the all of the elements in the array are in descending order.
            For example, <c>isDescending({3, 2, 1})</c> returns <c>true</c> and <c>isDescending({3, 2, 1, 2})</c>
            returns <c>false</c>.</p>
</statement>
<blocks><block order="3">
<cline>public boolean isDescending(int[] arr) {</cline>
</block><block order="6">
<choice correct="yes"><cline>    for (int i = 0; i &lt; arr.length-1; i++) {</cline>
</choice><choice><cline>    for (int i = 0; i &lt; arr.length; i++) { : need to stop one less than the length since looking at current and next</cline>
</choice></block><block order="7">
<cline>        if (arr[i] &lt; arr[i+1]) {</cline>
</block><block order="4">
<choice correct="yes"><cline>            return false;</cline>
</choice><choice><cline>            return true; : need to return false since a less than relationship would indicate ascending</cline>
</choice></block><block order="1">
<cline>        }</cline>
</block><block order="8">
<cline>    }</cline>
</block><block order="10">
<cline>    return true;</cline>
</block><block order="5">
<cline>}</cline>
</block></blocks></exercise>
    <exercise label="isDescending_written">
    <statement>
        <p>Write the method <c>isDescending(int[] arr)</c> that takes an array of ints, <c>arr</c>
            and returns true if the all of the elements in the array are in descending order.
            For example, <c>isDescending({3, 2, 1})</c> returns <c>true</c> and <c>isDescending({3, 2, 1, 2})</c>
            returns <c>false</c>.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class StudentCode
{

    public static boolean isDescending(int[] arr)
    {

        // write code here

    }

    public static void main(String[] args)
    {

        int[] arr = {3, 2, 1};
        System.out.println(isDescending(arr));
        int[] arr2 = {3, 2, 1, 2};
        System.out.println(isDescending(arr2));
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;

public class isDescendingTester extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "true";
        assertEquals("Output doesn't match", cleanString(expect), cleanString      (output));
    }

    @Test
    public void testIsDescending() throws IOException {
        StudentCode s = new StudentCode();
        assertEquals("Testing {3, 2, 1}", true, s.isDescending({3, 2, 1}));
        assertEquals("Testing {3, 2, 1, 2}", false, s.isDescending({3, 2, 1, 2}));
        assertEquals("Testing {1, 2, 3}", false, s.isDescending({1, 2, 3}));
        assertEquals("Testing {10, 5, 1}", true, s.isDescending({10, 5, 1}));
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="ex-array-nd-islevel" numbered="yes" adaptive="yes" indentation="show" language="python"><statement>
        <p>Create the method <c>isLevel(int[] arr, int x)</c> that takes an array of ints, <c>arr</c> and returns <c>false</c> if the
            difference between any two adjacent values is greater than the passed value, <c>x</c>.
            For example, <c>isLevel({3, 4, 6}, 2)</c> returns <c>true</c> and <c>isLevel({3, 5, 8, 6}, 2)</c> returns <c>false</c>.</p>
</statement>
<blocks><block order="1">
<cline>public boolean isLevel(int[] arr, int x) {</cline>
</block><block order="5">
<cline>    for (int i = 0; i &lt; arr.length-1; i++) {</cline>
</block><block order="8">
<cline>        if(arr[i+1]-arr[i] &gt; x) {</cline>
</block><block order="4">
<cline>            return false;</cline>
</block><block order="7">
<cline>        }</cline>
</block><block order="6">
<cline>    }</cline>
</block><block order="3">
<cline>    return true;</cline>
</block><block order="2">
<cline>}</cline>
</block></blocks></exercise>
    <exercise label="ex-array-wd-islevel" numbered="yes" adaptive="yes" indentation="show" language="python"><statement>
        <p>Create the method <c>isLevel(int[] arr, int x)</c> that takes an array of ints, <c>arr</c> and returns <c>false</c> if the
            difference between any two adjacent values is greater than the passed value, <c>x</c>.
            For example, <c>isLevel({3, 4, 6}, 2)</c> returns <c>true</c> and <c>isLevel({3, 5, 8, 6}, 2)</c> returns <c>false</c>.</p>
</statement>
<blocks><block order="9">
<cline>public boolean isLevel(int[] arr, int x) {</cline>
</block><block order="3">
<choice correct="yes"><cline>    for (int i = 0; i &lt; arr.length-1; i++) {</cline>
</choice><choice><cline>    for (int i = 0; i &lt; arr.length; i++) { : need to stop one less than length since we are comparing current element to next</cline>
</choice></block><block order="10">
<choice correct="yes"><cline>        if(arr[i+1]-arr[i] &gt; x) {</cline>
</choice><choice><cline>        if(arr[i+1]-arr[i] &gt;= x) { : need to check greater than only</cline>
</choice></block><block order="1">
<cline>            return false;</cline>
</block><block order="8">
<cline>        }</cline>
</block><block order="2">
<cline>    }</cline>
</block><block order="5">
<cline>    return true;</cline>
</block><block order="7">
<cline>}</cline>
</block></blocks></exercise>
    <exercise label="isLevel_written">
    <statement>
        <p>Write the method <c>isLevel(int[] arr, int x)</c> that takes an array of ints, <c>arr</c>
            and returns <c>false</c> if the difference between any two adjacent values is greater
            than a passed value, <c>x</c>. For example, <c>isLevel({3, 4, 6}, 2)</c> returns <c>true</c>
            and <c>isLevel({3, 5, 8, 6}, 2)</c> returns <c>false</c>.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class StudentCode
{

    public static boolean isLevel(int[] arr, int x)
    {

        // write code here

    }

    public static void main(String[] args)
    {

        int[] arr = {3, 4, 6};
        System.out.println(isLevel(arr, 2));
        int[] arr = {3, 5, 8, 6};
        System.out.println(isLevel(arr, 2));
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;

public class isLevelTester extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "true";
        assertEquals("Output doesn't match", cleanString(expect), cleanString      (output));
    }

    @Test
    public void isLevel() throws IOException {
        StudentCode s = new StudentCode();
        assertEquals("Testing [3, 4, 3] and 2", true, s.isLevel([3, 4, 3], 2));
        assertEquals("Testing [3, 5, 7, 2] and 2", false, s.isLevel([3, 5, 7, 2], 2));
        assertEquals("Testing [3, 5, 7] and 3", true, s.isLevel([3, 5, 7], 3));
        assertEquals("Testing [3, 3, 3] and 1", true, s.isLevel([3, 3, 3], 1));
    }
}
        </tests>
    </program>
</exercise>
  </exercises>
</section>

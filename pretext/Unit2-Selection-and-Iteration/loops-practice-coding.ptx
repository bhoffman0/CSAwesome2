<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section>
  <title>Coding Practice with Loops</title>
  <exercises>
    <exercise>
      <statement>
                <p>Rewrite the following code so that it uses a <c>for</c> loop instead of a <c>while</c> loop to print out all the integers from 5 to 1 (inclusive).</p>

    </statement>
      <program interactive="activecode" language="java" datafile="">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        int x = 5;
        while (x &gt; 0)
        {
            System.out.println(x);
            x = x - 1;
        }
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "5\n4\n3\n2\n1\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testForLoop() throws IOException
    {
        String target = "for(int * = 5;";
        boolean passed = checkCodeContains("for loop", target);
        assertTrue(passed);
    }
}
        </tests>
    </program>
      <solution>


    
                Answer: In a for loop you declare and initialize the variable(s), specify the condition, and specify how the loop variable(s) change in the header of the for loop as shown below.

    
    <program language="java">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        for (int x = 5; x &gt; 0; x = x - 1) System.out.println(x);
    }
}
        </input>
    </program>

            

<exercise label="ch6ex1a">
    <statement>
                <p>Answer: In a <c>for</c> loop you declare and initialize the variable(s), specify the condition, and specify how the loop variable(s) change in the header of the <c>for</c> loop as shown below.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        for (int x = 5; x &gt; 0; x = x - 1) System.out.println(x);
    }
}
        </input>
    </program>
</exercise>
            </solution>
    </exercise>
    <exercise>
      <statement>
                <p>Rewrite the following code to use a <c>while</c> loop instead of a <c>for</c> loop to print out the numbers from 1 to 10 (inclusive).</p>

    </statement>
      <program interactive="activecode" language="java" datafile="">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        for (int x = 1; x &lt;= 10; x++) System.out.println(x);
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

// import java.util.regex.*;
/* Do NOT change Main or CodeTestHelper.java. */
public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testForLoop() throws IOException
    {
        String target = "while (";
        boolean passed = checkCodeContains("while loop", target);
        assertTrue(passed);
    }
}
        </tests>
    </program>
      <solution>
                Answer: You need to specify the declarations and initializations of the loop variables(s) before the Boolean condition.  You need to do the change(s) at the end of the body of the loop.

    <program language="java">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        int x = 1;
        while (x &lt;= 10)
        {
            System.out.println(x);
            x++;
        }
    }
}
        </input>
    </program>
            
                <p>Answer: You need to specify the declarations and initializations of the loop variables(s) before the Boolean condition.  You need to do the change(s) at the end of the body of the loop.</p>

    
            </solution>
    </exercise>
    <exercise>
      <statement>
                <p>Rewrite the following code so that it uses a <c>for</c> loop instead of a <c>while</c> loop to print out all the integers from 5 to 15 (inclusive).</p>

    </statement>
      <program interactive="activecode" language="java" datafile="">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        int x = 5;
        while (x &lt;= 15)
        {
            System.out.println(x);
            x = x + 1;
        }
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testForLoop() throws IOException
    {
        String target = "for (int * = 5;";
        boolean passed = checkCodeContains("for loop", target);
        assertTrue(passed);
    }
}
        </tests>
    </program>
      <solution>
                Answer: In a for loop you declare and initialize the variable(s), specify the condition, and specify how the loop variable(s) change in the header of the for loop as shown below.

    <program language="java">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        for (int x = 5; x &lt;= 15; x++)
        {
            System.out.println(x);
        }
    }
}
        </input>
    </program>
            
                <p>Answer: In a <c>for</c> loop you declare and initialize the variable(s), specify the condition, and specify how the loop variable(s) change in the header of the <c>for</c> loop as shown below.</p>

    
            </solution>
    </exercise>
    <exercise>
      <statement>
                <p>Rewrite the following code to use a <c>while</c> loop instead of a <c>for</c> loop to print out the numbers from 10 to 100 by 10’s (inclusive).</p>

    </statement>
      <program interactive="activecode" language="java" datafile="">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        for (int x = 10; x &lt;= 100; x = x + 10) System.out.println(x);
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "10\n20\n30\n40\n50\n60\n70\n80\n90\n100\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testForLoop() throws IOException
    {
        String target = "while (";
        boolean passed = checkCodeContains("while loop", target);
        assertTrue(passed);
    }
}
        </tests>
    </program>
      <solution>
                Answer: You need to specify the declarations and initializations of the loop variables(s) before the Boolean condition.  You need to do the change(s) at the end of the body of the loop.

    <program language="java">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        int x = 10;
        while (x &lt;= 100)
        {
            System.out.println(x);
            x = x + 10;
        }
    }
}
        </input>
    </program>
            
                <p>Answer: You need to specify the declarations and initializations of the loop variables(s) before the Boolean condition.  You need to do the change(s) at the end of the body of the loop.</p>

    
            </solution>
    </exercise>
    <exercise>
      <statement>
                <p>The following code should print the values from 1 to 10 (inclusive) but has errors.  Fix the errors so that the code works as intended. If the code is in an infinite loop you can refresh the page in the browser to stop the loop and then click on Load History and move the bar above it to see your last changes.</p>

    </statement>
      <program interactive="activecode" language="java" datafile="">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        int x = 1;
        while (x &lt; 10)
        {
            System.out.println(x);
        }
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testWhileLoop() throws IOException
    {
        String target1 = "x=x+1;";
        String target2 = "x++;";
        String code = removeSpaces(getCode());
        boolean passed = code.contains(target1) || code.contains(target2);
        getResults("true", "" + passed, "changing the loop variable x");
        assertTrue(passed);
    }
}
        </tests>
    </program>
      <solution>
                Answer: On line 6 it should be while (x &lt;= 10).  Add line 9 at the end of the loop body to increment x so that the loop ends (isn’t an infinite loop).

    <program language="java">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        int x = 1;
        while (x &lt;= 10)
        {
            System.out.println(x);
            x++;
        }
    }
}
        </input>
    </program>
            
                <p>Answer: On line 6 it should be <c>while (x &lt;= 10)</c>.  Add line 9 at the end of the loop body to increment <c>x</c> so that the loop ends (isn’t an infinite loop).</p>

    
            </solution>
    </exercise>
    <exercise>
      <statement>
                <p>The following code should print the values from 10 to 5, but it has errors.  Fix the errors so that the code works as intended.</p>

    </statement>
      <program interactive="activecode" language="java" datafile="">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        for (int x = 10; x &gt;= 5; x--)
        {
            System.out.println(x);
            x--;
        }
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "10\n9\n8\n7\n6\n5\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
        </tests>
    </program>
      <solution>
                Answer: Remove the x--; at the end of the body of the loop.  The change area in the for loop decrements x by 1, so this line isn’t needed.

    <program language="java">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        for (int x = 10; x &gt;= 5; x--)
        {
            System.out.println(x);
        }
    }
}
        </input>
    </program>
            
                <p>Answer: Remove the <c>x--;</c> at the end of the body of the loop.  The change area in the for loop decrements <c>x</c> by 1, so this line isn’t needed.</p>

    
            </solution>
    </exercise>
    <exercise>
      <statement>
                <p>The following code should print the values from 10 to 1, but it has errors.  Fix the errors so that the code works as intended.</p>

    </statement>
      <program interactive="activecode" language="java" datafile="">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        int x = 10;
        while (x &gt;= 0)
        {
            x--;
            System.out.println(x);
        }
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
        </tests>
    </program>
      <solution>
                Answer: Move the x--; to the end of the loop body (after the System.out.println.  Change the while to x &gt; 0.

    <program language="java">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        int x = 10;
        while (x &gt; 0)
        {
            System.out.println(x);
            x--;
        }
    }
}
        </input>
    </program>
            
                <p>Answer: Move the <c>x--;</c> to the end of the loop body (after the <c>System.out.println</c>.  Change the <c>while</c> to <c>x &gt; 0</c>.</p>

    
            </solution>
    </exercise>
    <exercise>
      <statement>
                <p>Finish the code below to print a countdown from 100 to 0 by 10’s using a for or while loop.</p>

    </statement>
      <program interactive="activecode" language="java" datafile="">
        <input>
public class Test1
{
    public static void main(String[] args) {}
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "100\n90\n80\n70\n60\n50\n40\n30\n20\n10\n0\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testForLoop() throws IOException
    {
        String code = getCode();
        boolean passed = code.contains("for") || code.contains("while");
        getResults("Expected loop", "" + passed, "Checking for loop", passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
      <solution>
                Answer: You can use a for loop as shown below. Start x at 100, loop while it is greater or equal to 0, and subtract 10 each time after the body of the loop executes.

    <program language="java">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        for (int x = 100; x &gt;= 0; x = x - 10) System.out.println(x);
    }
}
        </input>
    </program>
            
                <p>Answer: You can use a <c>for</c> loop as shown below. Start <c>x</c> at 100, loop while it is greater or equal to 0, and subtract 10 each time after the body of the loop executes.</p>

    
            </solution>
    </exercise>
    <exercise>
      <statement>
                <p>Finish the code to print the value of <c>x</c> and <c>" is even"</c> if <c>x</c> is even and <c>" is odd"</c> if it is odd for all values from 10 to 1.</p>

    </statement>
      <program interactive="activecode" language="java" datafile="">
        <input>
public class Test1
{
    public static void main(String[] args) {}
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "10 is even\n"
                    + "9 is odd\n"
                    + "8 is even\n"
                    + "7 is odd\n"
                    + "6 is even\n"
                    + "5 is odd\n"
                    + "4 is even\n"
                    + "3 is odd\n"
                    + "2 is even\n"
                    + "1 is odd\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testIfLoop()
    {
        String code = getCode();
        boolean passed = code.contains("if") &amp;&amp; (code.contains("for") || code.contains("while"));
        getResults(
                "Expected loop and if", "" + passed, "Checking for loop and if statement", passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
      <solution>
                Answer: Use a for loop to loop from 10 to 1.  Use a conditional to test if x is even (x % 2 == 0).

    <program language="java">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        for (int x = 10; x &gt;= 1; x--)
        {
            if (x % 2 == 0)
            {
                System.out.println(x + " is even");
            }
            else
            {
                System.out.println(x + " is odd");
            }
        }
    }
}
        </input>
    </program>
            
                <p>Answer: Use a <c>for</c> loop to loop from 10 to 1.  Use a conditional to test if x is even (x % 2 == 0).</p>

    
            </solution>
    </exercise>
    <exercise>
      <statement>
                <p>Finish the code below to print the values for <c>10 * x</c> where <c>x</c> changes from 0 to 10 using a loop.</p>

    </statement>
      <program interactive="activecode" language="java" datafile="">
        <input>
public class Test1
{
    public static void main(String[] args) {}
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "0\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testForLoop()
    {
        // String target = "for (";
        // boolean passed = checkCodeContains("for loop", target);
        String code = getCode();
        boolean passed = code.contains("for") || code.contains("while");
        getResults("Expected loop", "" + passed, "Checking for loop", passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
      <solution>


    
                Answer: Use a for loop with x changing from 0 to 10 and print the value of x and 10 * x.

    
    <program language="java">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        for (int x = 0; x &lt;= 10; x++)
        {
            System.out.println(x * 10);
        }
    }
}
        </input>
    </program>

            

<exercise label="ch6ex11na">
    <statement>
                <p>Answer: Use a <c>for</c> loop with <c>x</c> changing from 0 to 10 and print the value of <c>x</c> and <c>10 * x</c>.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        for (int x = 0; x &lt;= 10; x++)
        {
            System.out.println(x * 10);
        }
    }
}
        </input>
    </program>
</exercise>
            </solution>
    </exercise>
    <exercise>
      <statement>
                <p>Finish the following code so that it prints a string message minus the last character each time through the loop until there are no more characters in message.</p>

    </statement>
      <program interactive="activecode" language="java" datafile="">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        String message = "help";
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "help\nhel\nhe\nh\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testForLoop()
    {
        String code = getCode();
        boolean passed = code.contains("for") || code.contains("while");
        getResults("Expected loop", "" + passed, "Checking for loop", passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
      <solution>
                Answer: Add a while loop and loop while there is still at least one character in the string. At the end of the body of the loop reset the message to all characters except the last one.

    <program language="java">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        String message = "help";
        while (message.length() &gt; 0)
        {
            System.out.println(message);
            message = message.substring(0, message.length() - 1);
        }
    }
}
        </input>
    </program>
            
                <p>Answer: Add a <c>while</c> loop and loop while there is still at least one character in the string. At the end of the body of the loop reset the message to all characters except the last one.</p>

    
            </solution>
    </exercise>
    <exercise>
      <statement>
                <p>Finish the code to loop printing the message each time through the loop and remove an <c>x</c> from the message until all the <c>x</c>’s are gone.</p>

    </statement>
      <program interactive="activecode" language="java" datafile="">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        String message = "Ix lovex youxxx";
        System.out.println(message);
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

// import java.util.regex.*;
/* Do NOT change Main or CodeTestHelper.java. */
public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "Ix lovex youxxx\n"
                    + "I lovex youxxx\n"
                    + "I love youxxx\n"
                    + "I love youxx\n"
                    + "I love youx\n"
                    + "I love you\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testForLoop()
    {
        String code = getCode();
        boolean passed = code.contains("for") || code.contains("while");
        getResults("Expected loop", "" + passed, "Checking for loop", passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
      <solution>
                Answer: Use a while loop.  Loop while x has been found in the message (using indexOf).  Remove the x (using substring). Use indexOf again to get the position of the next x or -1 if there are none left in the message.

    <program language="java">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        String message = "Ix lovex youxxx";
        System.out.println(message);
        int pos = message.indexOf("x");
        while (pos &gt;= 0)
        {
            message = message.substring(0, pos) + message.substring(pos + 1);
            pos = message.indexOf("x");
            System.out.println(message);
        }
    }
}
        </input>
    </program>
            
                <p>Answer: Use a <c>while</c> loop.  Loop while <c>x</c> has been found in the message (using <c>indexOf</c>).  Remove the <c>x</c> (using substring). Use indexOf again to get the position of the next <c>x</c> or -1 if there are none left in the message.</p>

    
            </solution>
    </exercise>
    <exercise>
      <statement>
                <p>Write a loop below to print the number of <c>x</c>’s in the string message.  Use the <c>indexOf</c> and <c>substring</c> methods.</p>

    </statement>
      <program interactive="activecode" language="java" datafile="">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        String message = "xyxxzax";
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "4";

        boolean passed = output.contains(expect);
        getResults(expect, output, "Expected output from main", passed);
        assertTrue(passed);
    }

    @Test
    public void testForLoop()
    {
        String code = getCode();
        boolean passed = code.contains("for") || code.contains("while");
        getResults("Expected loop", "" + passed, "Checking for loop", passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
      <solution>
                Answer: Use indexOf to find the next x.  Loop while pos is greater than or equal to 0.  Use substring to reset message beyond the next x.

    <program language="java">
        <input>
public class Test1
{
    public static void main(String[] args)
    {

        String message = "xyxxzax";
        int pos = message.indexOf("x");
        int count = 0;
        while (pos &gt;= 0)
        {
            count++;
            message = message.substring(pos + 1);
            pos = message.indexOf("x");
        }
        System.out.println("There were " + count + " x's");
    }
}
        </input>
    </program>
            
                <p>Answer: Use indexOf to find the next <c>x</c>.  Loop while pos is greater than or equal to 0.  Use substring to reset message beyond the next <c>x</c>.</p>

    
            </solution>
    </exercise>
    <exercise>
      <statement>
                <p>Write the code below to print a rectangle of stars (<c>*</c>) with 5 rows of stars and 3 stars per row. Hint: use nested for loops.</p>

    </statement>
      <program interactive="activecode" language="java" datafile="">
        <input>
public class Test1
{
    public static void main(String[] args) {}
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "***\n***\n***\n***\n***\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String code = getCode();
        String target = "for (int * = #; * ? *; *~)";

        int num = countOccurencesRegex(code, target);

        boolean passed = num == 2;

        getResults("2", "" + num, "2 For loops (nested)", passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
      <solution>
                Answer: Use nested for loops.  Use the outer loop to control the number of rows and the inner loop to control the number of stars per row.

    <program language="java">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        for (int row = 0; row &lt; 5; row++)
        {
            for (int col = 0; col &lt; 3; col++)
            {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}
        </input>
    </program>
            
                <p>Answer: Use nested <c>for</c> loops.  Use the outer loop to control the number of rows and the inner loop to control the number of stars per row.</p>

    
            </solution>
    </exercise>
    <exercise>
      <statement>
                <p>Write the code below to print a rectangle of stars (<c>*</c>) with 3 rows of stars and 5 stars per row.</p>

    </statement>
      <program interactive="activecode" language="java" datafile="">
        <input>
public class Test1
{
    public static void main(String[] args) {}
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "*****\n*****\n*****\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String code = getCode();
        String target = "for (int * = #; * ? *; *~)";

        int num = countOccurencesRegex(code, target);

        boolean passed = num == 2;

        getResults("2", "" + num, "2 For loops (nested)", passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
      <solution>
                Answer: Use nested for loops.  Use the outer loop to control the number of rows and the inner loop to control the number of stars per row.

    <program language="java">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        for (int row = 0; row &lt; 3; row++)
        {
            for (int col = 0; col &lt; 5; col++)
            {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}
        </input>
    </program>
            
                <p>Answer: Use nested <c>for</c> loops.  Use the outer loop to control the number of rows and the inner loop to control the number of stars per row.</p>

    
            </solution>
    </exercise>
    <exercise>
      <statement>
                <p>Write the code below to print 55555, 4444, 333, 22, 1 with each on a different line.</p>

    </statement>
      <program interactive="activecode" language="java" datafile="">
        <input>
public class Test1
{
    public static void main(String[] args) {}
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "55555\n4444\n333\n22\n1\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String code = getCode();
        String target = "for (int * = #; * ? *; *~)";

        int num = countOccurencesRegex(code, target);

        boolean passed = num == 2;

        getResults("2", "" + num, "2 For loops (nested)", passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
      <solution>
                Answer: Use nested for loops. The outer loop controls what is printed on each row and the number of rows.  The inner loop controls the number of values printer per row.

    <program language="java">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        for (int x = 5; x &gt;= 1; x--)
        {
            for (int y = x; y &gt; 0; y--)
            {
                System.out.print(x);
            }
            System.out.println();
        }
    }
}
        </input>
    </program>
            
                <p>Answer: Use nested <c>for</c> loops. The outer loop controls what is printed on each row and the number of rows.  The inner loop controls the number of values printer per row.</p>

    
            </solution>
    </exercise>
  </exercises>
</section>

<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="topic-2-3-ifs">
  <title>if Statements</title><introduction>
    
    <p><term>If statements</term> are found in all programming languages as a way to choose between different paths in an algorithm. An if statement is a type of <term>selection</term> statement that changes the sequential execution. It affects the flow of control by executing different segments of code based on the value of a <term>Boolean expression</term>.</p>
    <p>If you took an AP CSP course or used a block programming language like Scratch, you’ve probably seen if blocks or statements before.  Here’s a comparison of ifs in App Inventor blocks, AP CSP block code and pseudocode, and Java ifs.</p>
    <figure align="center">
      <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Comparison of App Inventor if block, AP CSP ifs, and Java if statements</caption>
      <image source="Unit2-Selection-and-Iteration/Figures/BlocksIfComparison.png" width="100%%"/>
    </figure>
  </introduction>
  <subsection>
            <title>One-way selection</title>
            <p>A one-way selection (if statement) is used when there is a segment of code (called the <term>body</term> of the if statement) to execute under a certain condition. In this case, the body is executed only when the Boolean expression is true. If the Boolean expression is false, the body of the if statement is skipped and the program continues with the next statement after the if statement.</p>
            <figure align="center"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">The order that statements execute in a conditional</caption><image source="Unit2-Selection-and-Iteration/Figures/Condition.png" width="36%%"/></figure>
            <p>The open curly brace <c>{</c> and a close curly brace <c>}</c> are used to group a block of statements together as the body of the if statement.  It is recommended to always put in the curly braces even if you have just one statement under the if statement. The questions you will see on the AP exam will use curly braces.</p>
            <program language="java"><code>
// A single if statement
if (boolean expression)
    Do statement;
// Or a single if with {}
if (boolean expression)
{
   Do statement;
}
// A block if statement: { } required
if (boolean expression)
{
   Do Statement1;
   Do Statement2;
   ...
   Do StatementN;
}
</code></program>
            <note>
                <p>Note that there is no semicolon (;) at the end of the boolean expression in an if statement even if it is the end of that line. The semicolon goes at the end of the whole if statement, often on the next line. Or { } are used to mark the beginning and end of the block of code under the if condition.</p>
            </note>
            <p>Imagine that your cell phone wanted to remind you to take an umbrella if it was currently raining in your area when it detected that you were leaving the house.  This type of thing is going to become more common in the future and it is an area of research called Human Computer Interaction (HCI) or Ubiquitous Computing (computers are everywhere).</p>

<exercise label="if-raining">
    <statement>
            <p>The variable <c>isRaining</c> is a boolean variable that is either true or false. If it is true then the message <c>Take an umbrella!</c> will be printed and then execution will continue with the next statement which will print <c>Drive carefully</c>. Run the code below to see this.</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
public class Test1
{
    public static void main(String[] args)
    {
        boolean isRaining = true;
        if (isRaining)
        {
            System.out.println("Take an umbrella!");
        }
        System.out.println("Drive carefully");
    }
}

</code><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Take an umbrella! \nDrive carefully";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>

        <exercise label="iffalseOutput">
            <statement>
    <p> Try changing the code above to <c>boolean isRaining = false;</c>.  What will it print? <var/>  </p></statement><setup><var><condition string="^\s*^Drive\s+carefully$\s*$"><feedback><p>Correct.  If the boolean is false, it will skip executing the print statement after the if.</p></feedback></condition><condition string="^\s*.*\s*$"><feedback><p>Try it and see</p></feedback></condition></var></setup></exercise>        </subsection>
  <subsection>
            <title>Relational Operators in If Statements</title>
            <p>Most if statements have a boolean condition that uses relational operators like ==, !=, &lt;, &gt;, &lt;=, &gt;=, as we saw in the last lesson.</p>

<exercise label="if-relational">
    <statement>
            <p>Run the following active code a couple times until you see all the possible outputs. It prints out whether a random number is positive or equal to 0. Add another if statement that tests if it is a negative number.</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
public class TestNumbers
{
    public static void main(String[] args)
    {
        // Get a random number from -10 up to 10.
        int number = (int) (Math.random() * 21) - 10;
        System.out.println("The number is " + number);

        // is it positive?
        if (number &gt; 0)
        {
            System.out.println(number + " is positive!");
        }
        // is it 0?
        if (number == 0)
        {
            System.out.println(number + " is zero!");
        }
        // is it negative?
        // Add another if statement

    }
}

</code><tests>
import static org.junit.Assert.*;

import org.junit.Test;

import java.io.*;
import java.util.regex.MatchResult;
import java.util.regex.Pattern;

public class RunestoneTests extends CodeTestHelper
{

    @Test
    public void testPositive()
    {
        String output = "";
        int num = -999, count = 0;

        while (num &lt;= 0 &amp;&amp; count &lt; 50)
        {
            output = getMethodOutput("main");
            num = getNumber(output);
            count++;

            if (num == 9999999)
            {
                getResults(
                        "The number is ##\n## is positive!",
                        output,
                        "Did you forget to print the number?",
                        false);
                assertTrue(false);
                return;
            }
        }

        String expect = "The number is " + num + "\n" + num + " is positive!";

        boolean passed = output.contains("positive");
        getResults(expect, output, "Testing positive numbers", passed);
        assertTrue(passed);
    }

    @Test
    public void testZero()
    {
        String output = "";
        int num = -999, count = 0;

        while (num != 0 &amp;&amp; count &lt; 50)
        {
            output = getMethodOutput("main");
            num = getNumber(output);
            count++;

            if (num == 9999999)
            {
                getResults(
                        "The number is ##\n## is zero!",
                        output,
                        "Did you forget to print the number?",
                        false);
                assertTrue(false);
                return;
            }
        }

        String expect = "The number is " + num + "\n" + num + " is zero!";

        boolean passed = output.contains("zero");
        getResults(expect, output, "Testing zero", passed);
        assertTrue(passed);
    }

    @Test
    public void testNegative()
    {
        String output = "";
        int num = 999, count = 0;

        while (num &gt;= 0 &amp;&amp; count &lt; 50)
        {
            output = getMethodOutput("main");
            num = getNumber(output);
            count++;

            if (num == 9999999)
            {
                getResults(
                        "The number is ##\n## is negative!",
                        output,
                        "Did you forget to print the number?",
                        false);
                assertTrue(false);
                return;
            }
        }

        String expect = "The number is " + num + "\n" + num + " is negative!";

        boolean passed = output.contains("negative");
        getResults(expect, output, "Testing negative numbers", passed);
        assertTrue(passed);
    }

    private int getNumber(String output)
    {
        String regex = "[0-9]+";

        String[] matches =
                Pattern.compile(regex)
                        .matcher(output)
                        .results()
                        .map(MatchResult::group)
                        .toArray(String[]::new);

        int num = 9999999;

        if (matches.length &gt; 0)
        {
            num = Integer.parseInt(matches[0]);
        }

        if (output.contains("-"))
        {
            num *= -1;
        }

        return num;
    }
}
        </tests>
    </program>
</exercise>
            <note>
                <p>A common mistake in if statements is using = instead of == in the condition by mistake. You should always <term>use ==</term>, not =, in the condition of an if statement to test a variable. One equal sign (=) assigns a value to a variable, and two equal signs (==) test if a variable has a certain value.</p>
            </note>

    <exercise label="mcq-if-trace">
        <statement>

            <p> Consider the following code segment. What is printed as a result of executing the code segment?</p>
            <program language="java"><code>
int x = 3;
if (x &gt; 2)
{
   x = x * 2;
}
if (x &gt; 4)
{
   x = 0;
}
System.out.print(x);
</code></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>3</p>
                </statement>
                <feedback>
                    <p>x is changed by the if statements.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>6</p>
                </statement>
                <feedback>
                    <p>What happens when x is greater than 2 and then greater than 4? Do both if statements.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>0</p>
                </statement>
                <feedback>
                    <p>If x is greater than 2, it's always doubled, and then that result is always greater than 4, so it's set to 0 in the second if statement.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>4</p>
                </statement>
                <feedback>
                    <p>x is changed by the if statements.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The code will not compile</p>
                </statement>
                <feedback>
                    <p>This code will compile.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        </subsection>
  <subsection>
            <title>Two-way selection</title>
            <p>What if you want to pick between two possibilities?  If you are trying to decide between a couple of things to do, you might flip a coin and do one thing if it lands as heads and another if it is tails.  In programming, you can use the <term>if</term> keyword followed by a statement or block of statements and then the <term>else</term> keyword also followed by a statement or block of statements.</p>
            <program language="java"><code>
// A block if/else statement
if (boolean expression)
{
   statement1;
   statement2;
}
else
{
   do other statement;
   and another one;
}
</code></program>
            <program language="java"><code>
// A single if/else statement
if (boolean expression)
    Do statement;
else
    Do other statement;
</code></program>
            <p>A two-way selection (if-else statement) is used when there are two segments of code—one to be executed when the Boolean expression is true and another segment for when the Boolean expression is false. In this case, the body of the if is executed when the Boolean expression is true, and the body of the else is executed when the Boolean expression is false.</p>
            <p>The following flowchart demonstrates that if the condition (the boolean expression) is true, one block of statements is executed, but if the condition is false, a different block of statements inside the else clause is executed.</p>
            <figure align="center"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">The order that statements execute in a if/else statement</caption><image source="Unit2-Selection-and-Iteration/Figures/Condition-two.png" width="63%%"/></figure>

<exercise label="ifHeads">
    <statement>
            <p>Try the following code. If <c>isHeads</c> is true it will print <c>Let's go to the game</c> and then <c>after conditional</c>.</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
public class Test2
{
    public static void main(String[] args)
    {
        boolean isHeads = true;
        if (isHeads)
        {
            System.out.println("Let's go to the game");
        }
        else
        {
            System.out.println("Let's watch a movie");
        }
        System.out.println("after conditional");
    }
}

</code><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Let's go to the game\nafter conditional";

        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>

        <exercise label="falseElse">
            <statement>
    <p> Try changing the code above to <c>boolean isHeads = false;</c>.  What line will be printed before the <c>after conditional</c>? <var/>  </p></statement><setup><var><condition string="^\s*^Let's\s+watch\s+a\s+movie$\s*$"><feedback><p>Correct.  If the boolean value is false, the statement following the else will execute</p></feedback></condition><condition string="^\s*.*\s*$"><feedback><p>Try it and see</p></feedback></condition></var></setup></exercise>            <p>If/else statements can also be used with relational operators and numbers like below. If your code has an if/else statement, you need to test it with 2 test-cases to make sure that both parts of the code work.</p>
        </subsection>
  <subsection>
            <title>Common Errors with If Statements</title>
            <p>Here are some rules to follow with if statements to avoid some common errors:</p>
            <blockquote>
                <p><ul>
                    <li>
                        <p>Always use curly braces (<c>{</c> and <c>}</c>) to enclose the block of statements under the if condition. Java doesn’t care if you indent the code—it goes by the <c>{ }</c>.</p>
                    </li>
                    <li>
                        <p>Don’t put in a semicolon <c>;</c> after the first line of the if statement, <c>if (test);</c>. The <c>if</c> statement is a multiline block of code that starts with the <c>if</c> condition and then <c>{</c> the body of the if statement <c>}</c>.</p>
                    </li>
                    <li>
                        <p>Always use <c>==</c>, not <c>=</c>, in the condition of an if statement to test a variable. One <c>=</c> assigns, two <c>==</c> tests!</p>
                    </li>
                    <li>
                        <p>The <c>else</c> statement matches with the closest <c>if</c> statement. If you want to match an <c>else</c> with a different <c>if</c> statement, you need to use curly braces to group the <c>if</c> and <c>else</c> together.</p>
                    </li>
                </ul></p>
            </blockquote>

<exercise label="if-missing-curlies">
    <statement>
            <p>The code below doesn’t work as expected.  Fix it to only print <c>Wear a coat</c> and <c>Wear gloves</c> when isCold is true.</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
public class Test1
{
    public static void main(String[] args)
    {
        boolean isCold = false;
        if (isCold = true);
            System.out.println("Wear a coat");
            System.out.println("Wear gloves");
    }
}

</code><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "";
        boolean passed = getResults(expect, output, "Expected output from main if isCold is false");
        assertTrue(passed);
    }

    @Test
    public void testCountCurlies()
    {
        String code = getCode();
        int num = countOccurences(code, "{");
        boolean passed = num &gt;= 3;

        getResults("3", "" + num, "Number of {", passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
        </subsection>
  <subsection>
            <title>Coding Challenge: Magic 8 Ball</title>
            <image source="Unit2-Selection-and-Iteration/Figures/Magic_eight_ball.png" width="18%%" alt="Magic 8 Ball"/>
            <p>Have you ever seen a Magic 8 ball? You ask it a yes-no question and then shake it to get a random response like <c>Signs point to yes!</c>, <c>Very doubtful</c>, etc. If you’ve never seen a Magic 8 ball, check out this <url href="https://magic-8ball.com/" visual="https://magic-8ball.com/">simulator</url>. In the exercise below, come up with 8 responses to yes-no questions. Write a program below that chooses a random number from 1 to 8 and then uses if statements to test the number and print out the associated random response from 1-8. If you need help with random numbers, see the <url href="../Unit1-Using-Objects-and-Methods/topic-1-11-Math.html" visual="../Unit1-Using-Objects-and-Methods/topic-1-11-Math.html">Math lesson</url> and remember the formula <c>(int) (Math.random() * max) + min</c>.</p>

<exercise label="challenge-Magic8ball">
    <statement>
            <p>Complete the <c>printRandomResponse()</c> method to print out 1 of 8 random responses and the <c>lucky()</c> method to toss a coin and print out “Lucky!” or “No Luck!” based on the result. Run the code multiple times to see the responses.</p>

    </statement>
    <program interactive="activecode" language="java">
        <code>
public class Magic8Ball
{
    public static void printRandomResponse()
    {
        // 1. Get a random number from 1 to 8

        // 2. Use if statements to test the random number
        //    and print out 1 of 8 random responses

     }

     public static void lucky()
     {
         // 3. Use Math.random() to toss a coin to choose between 2 choices
         // 4. Use an if/else statement to test the random number
         //    and print out "Lucky!" or else "No Luck!"

     }

     public static void main(String[] args)
     {
         String question = "Will it rain tomorrow?";
         System.out.println(question);
         printRandomResponse();
         lucky();
     }
 }
</code><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.util.ArrayList;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Magic8Ball");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");

        boolean passed = output.length() &gt; 0;

        passed =
                getResults(
                        "Output length &gt; 0",
                        "Output length of " + output.length(),
                        "Prints a statement",
                        passed);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String[] output = new String[200];

        for (int i = 0; i &lt; output.length; i++)
        {
            output[i] = getMethodOutput("main");
        }

        ArrayList&lt;String&gt; lines = new ArrayList&lt;String&gt;();

        for (int i = 0; i &lt; output.length; i++)
        {
            if (!lines.contains(output[i]))
            {
                lines.add(output[i]);
            }
        }

        int responses = lines.size();
        boolean passed = lines.size() &gt;= 8;

        passed = getResults("8", "" + responses, "Unique responses", passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCodeWithoutComments();

        int numIfs = countOccurences(code, "if");

        boolean passed = numIfs &gt;= 8;

        passed = getResults("8 or more", "" + numIfs, "Code has at least 8 if statements", passed);
        assertTrue(passed);
    }
    @Test
    public void testElse()
    {
        String expect = "else";
        boolean passed = checkCodeContains("else statement in lucky() method", target);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
            <p>You can make this code more interactive by using the <c>Scanner</c> class to have the user ask a question first; you can try your code with input in <url href="https://play.juicemind.com/dashboard/teams/Mk2wWMTqPkekcxTDWqRn/item/feaeda26-4591-4523-bbc2-ad6e8eca2633#abe979a9-45e0-455d-8a0d-1dde8c8a5d4e" visual="https://play.juicemind.com/dashboard/teams/Mk2wWMTqPkekcxTDWqRn/item/feaeda26-4591-4523-bbc2-ad6e8eca2633#abe979a9-45e0-455d-8a0d-1dde8c8a5d4e">JuiceMind</url> or <url href="https://replit.com/@BerylHoffman/Magic8BallTemplate#Main.java" visual="https://replit.com/@BerylHoffman/Magic8BallTemplate#Main.java">replit</url> or a local IDE.</p>
        </subsection>
  <subsection>
            <title>Summary</title>
            <p><ul>
                <li>
                    <p>(AP 2.3.A.1) Selection statements change the sequential execution of statements.</p>
                </li>
                <li>
                    <p>(AP 2.3.A.2) An <term>if statement</term> is a type of selection statement that affects the flow of control by executing different segments of code based on the value of a Boolean expression.</p>
                </li>
                <li>
                    <p>(AP 2.3.A.3) A one-way selection (if statement) is used when there is a segment of code to execute under a certain condition. In this case, the body is executed only when the Boolean expression is true.</p>
                </li>
                <li>
                    <p><term>if statements</term> test a boolean expression and if it is true, go on to execute the body which is the following statement or block of statements surrounded by curly braces  (<c>{}</c>) like below.</p>
                </li>
            </ul></p>
            <program language="java"><code>
// A single if statement
if (boolean expression)
    Do statement;
// A block if statement
if (boolean expression)
{
   Do Statement1;
   Do Statement2;
   ...
   Do StatementN;
}
</code></program>
            <p><ul>
                <li>
                    <p>Relational operators (==, !=, &lt;, &gt;, &lt;=, &gt;=) are used in boolean expressions to compare values and arithmetic expressions.</p>
                </li>
                <li>
                    <p>If statements can be followed by an associated <term>else</term> part to form a 2-way branch:</p>
                </li>
            </ul></p>
            <program language="java"><code>
if (boolean expression)
{
    Do statement;
}
else
{
    Do other statement;
}
</code></program>
            <p><ul>
                <li>
                    <p>(AP 2.3.A.4) A two-way selection (if-else statement) is used when there are two segments of code—one to be executed when the Boolean expression is true and another segment for when the Boolean expression is false. In this case, the body of the if is executed when the Boolean expression is true, and the body of the else is executed when the Boolean expression is false.</p>
                </li>
            </ul></p>
        </subsection>
  <subsection>
            <title>AP Practice</title>

    <exercise label="AP2-3-1">
        <statement>

            <p> Consider the following code segment.</p>
            <program language="java"><code>
int speed = 35;
boolean rain = false;

if (rain)
{
   speed -= 10;
}

if (rain == false)
{
  speed += 5;
}

if (speed &gt; 35)
{
   speed = speed - 2;
}

System.out.println(speed);
</code></program>
            <p>What is printed as a result of executing the code segment?</p>
</statement><choices><choice><statement id="AP2-3-1_opt_a">            <p>28</p>
</statement><feedback id="AP2-3-1_opt_a">
            <p>Some of the if statement conditions are false so they will not run.</p>
</feedback></choice><choice><statement id="AP2-3-1_opt_b">            <p>35</p>
</statement><feedback id="AP2-3-1_opt_b">
            <p>Take a look at the changes to speed in the if statements.</p>
</feedback></choice><choice correct="yes"><statement id="AP2-3-1_opt_c">            <p>38</p>
</statement><feedback id="AP2-3-1_opt_c">
            <p>Correct! The first if statement condition is false, and the second and third if conditions are true.</p>
</feedback></choice><choice><statement id="AP2-3-1_opt_d">            <p>25</p>
</statement><feedback id="AP2-3-1_opt_d">
            <p>The first if statement would only run if rain is true.</p>
</feedback></choice><choice><statement id="AP2-3-1_opt_e">            <p>33</p>
</statement><feedback id="AP2-3-1_opt_e">
            <p>The second if statement would run since rain is false.</p>
</feedback></choice></choices>

    </exercise>

    <exercise label="AP2-3-2">
        <statement>

            <p> Consider the following code segment.</p>
            <program language="java"><code>
int x = 5;

if (x &lt; 5)
{
   x = 3 * x;
}

if (x % 2 == 1)
{
   x = x / 2;
}

System.out.print(2*x + 1);
</code></program>
            <p>What is printed as a result of executing the code segment?</p>
</statement><choices><choice><statement id="AP2-3-2_opt_a">            <p>3</p>
</statement><feedback id="AP2-3-2_opt_a">
            <p>Take a look at the second if statement again!</p>
</feedback></choice><choice><statement id="AP2-3-2_opt_b">            <p>11</p>
</statement><feedback id="AP2-3-2_opt_b">
            <p>Take a look at the second if statement again!</p>
</feedback></choice><choice><statement id="AP2-3-2_opt_c">            <p>31</p>
</statement><feedback id="AP2-3-2_opt_c">
            <p>The first if statement condition is false.</p>
</feedback></choice><choice><statement id="AP2-3-2_opt_d">            <p>15</p>
</statement><feedback id="AP2-3-2_opt_d">
            <p>The first if statement condition is false.</p>
</feedback></choice><choice correct="yes"><statement id="AP2-3-2_opt_e">            <p>5</p>
</statement><feedback id="AP2-3-2_opt_e">
            <p>Correct! The first if statement is not true. The second one is true since 5 is odd, and x becomes 2. And 2*2 + 1 = 5 is printed out.</p>
</feedback></choice></choices>

    </exercise>

    <exercise label="AP2-3-if-else">
        <statement>

            <p> Consider the following code segment where a range of “High”, “Middle”, or “Low” is being determined
                where x is an int and a “High” is 80 and above, a “Middle” is between 50 - 79, and “Low” is below 50.</p>
            <program language="java"><code>
if (x &gt;= 80)
{
   System.out.println("High");
}

if (x &gt;= 50)
{
  System.out.println("Middle");
}
else
{
   System.out.println("Low");
}
</code></program>
            <p>Which of the following initializations for <em>x</em> will demonstrate that the code segment will not work as intended?</p>
</statement><choices><choice correct="yes"><statement id="AP2-3-if-else_opt_a">            <p>80</p>
</statement><feedback id="AP2-3-if-else_opt_a">
            <p>This would print out both “High” and “Middle”, showing that there is an error in the code. As you will see in the next lesson, one way to fix the code is to add another else in front of the second if.</p>
</feedback></choice><choice><statement id="AP2-3-if-else_opt_b">            <p>60</p>
</statement><feedback id="AP2-3-if-else_opt_b">
            <p>This would correctly print out “Middle”.</p>
</feedback></choice><choice><statement id="AP2-3-if-else_opt_c">            <p>50</p>
</statement><feedback id="AP2-3-if-else_opt_c">
            <p>This would correctly print out “Middle”.</p>
</feedback></choice><choice><statement id="AP2-3-if-else_opt_d">            <p>30</p>
</statement><feedback id="AP2-3-if-else_opt_d">
            <p>This would print out “Low” which is correct according to this problem description.</p>
</feedback></choice><choice><statement id="AP2-3-if-else_opt_e">            <p>-10</p>
</statement><feedback id="AP2-3-if-else_opt_e">
            <p>This would print out “Low” which is correct according to this problem description.</p>
</feedback></choice></choices>

    </exercise>
        </subsection>
</section>

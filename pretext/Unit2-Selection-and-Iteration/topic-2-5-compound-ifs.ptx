<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="compound-boolean-expressions">
  <title>Compound Boolean Expressions</title><introduction>
    
  </introduction>
  <subsection>
            <title>And (&amp;&amp;), Or (||), and Not (!)</title>
            <p>What if you want two things to be true before the body of the conditional is executed?  Use <c>&amp;&amp;</c> as a logical <term>and</term> to join two Boolean expressions and the body of the condition will only be executed only if both are true.</p>
            <p><problematic refid="id1">|CodingEx|</problematic> <term>Coding Exercise</term></p>

<exercise label="lccc1">
    <statement>
            <p>What if you want to go out and your parents say you can go out if you clean your room and do your homework?  Run the code below and try different values for <c>cleanedRoom</c> and <c>didHomework</c> and see what they have to be for it to print <c>You can go out</c>.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class Test1
{
    public static void main(String[] args)
    {
        boolean cleanedRoom = true;
        boolean didHomework = false;
        if (cleanedRoom &amp;&amp; didHomework)
        {
            System.out.println("You can go out");
        }
        else
        {
            System.out.println("No, you can't go out");
        }
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class Test1 { public static void main(String[] args){ boolean cleanedRoom ="
                    + " true; boolean didHomework = false; if (cleanedRoom &amp;&amp; didHomework){"
                    + " System.out.println(\"You can go out\");} else { System.out.println(\"No,"
                    + " you can't go out\");}}}";

        boolean changed = codeChanged(origCode);
        assertTrue(changed);
    }

    @Test
    public void testMain()
    {
        String output = getMethodOutput("main");
        String expect = "You can go out";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
            <p>What if it is okay if only one of two things is true? Use <c>||</c> as a logical <term>or</term> to join two Boolean expressions and the body of the condition will be executed if one or both are true.</p>
            <p><problematic refid="id3">|CodingEx|</problematic> <term>Coding Exercise</term></p>

<exercise label="lccc2">
    <statement>
            <p>For example, your parents might say you can go out if you can walk or they don’t need the car.  Try different values for <c>walking</c> and <c>carIsAvailable</c> and see what the values have to be to print <c>You can go out</c>.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class Test2
{
    public static void main(String[] args)
    {
        boolean walking = false;
        boolean carIsAvailable = false;
        if (walking || carIsAvailable)
        {
            System.out.println("You can go out");
        }
        else
        {
            System.out.println("No, you can't go out");
        }
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class Test2 { public static void main(String[] args){ boolean walking ="
                    + " false; boolean carIsAvailable = false; if (walking || carIsAvailable) {"
                    + " System.out.println(\"You can go out\"); } else{System.out.println(\"No, you"
                    + " can't go out\"); }}}";

        boolean changed = codeChanged(origCode);
        assertTrue(changed);
    }

    @Test
    public void testMain()
    {
        String output = getMethodOutput("main");
        String expect = "You can go out";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
            <note>
                <p>In English, we often use an exclusive-or like in the sentence “do you want to be player 1 <em>or</em> player 2?” where you can’t be both player 1 and player 2. In programming, the or-operator is an inclusive-or which means that the whole expression is true if either one or the other or <em>both</em> conditions are true.</p>
            </note>
            <p>With numerical values, the <term>or</term> (||) operator is often used to check for error conditions on different ends of the number line, while the <term>and</term> (&amp;&amp;) operator is often used to see if a number is in an range.</p>
            <p><problematic refid="id5">|CodingEx|</problematic> <term>Coding Exercise</term></p>

<exercise label="lcccnum">
    <statement>
            <p>Explore how &amp;&amp; and || are used with numbers below. Try different values for score like -10 and 110 in the code below.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class TestNum
{
    public static void main(String[] args)
    {
        int score = 10; // Try -10 and 110
        if (score &lt; 0 || score &gt; 100)
        {
            System.out.println("Score has an illegal value.");
        }
        if (score &gt;= 0 &amp;&amp; score &lt;= 100)
        {
            System.out.println("Score is in the range 0-100");
        }
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class TestNum{public static void main(String[] args){int score = 10;  if"
                    + " (score &lt; 0 || score &gt; 100){ System.out.println(\"Score has an illegal"
                    + " value.\");}if (score &gt;= 0 &amp;&amp; score &lt;= 100){ System.out.println(\"Score is"
                    + " in the range 0-100\");}}}";

        boolean changed = codeChanged(origCode);
        assertTrue(changed);
    }
}
        </tests>
    </program>
</exercise>
            <p>The <term>not</term> (<c>!</c>) operator can be used to negate a boolean value. We’ve seen <c>!</c> before in <c>!=</c> (not equal).  If you use <c>!</c> in expressions with <c>&amp;&amp;</c> and <c>||</c>, be careful because the results are often the opposite of what you think it will be at first. We’ll see examples of this in the next lesson.</p>
            <p><problematic refid="id7">|CodingEx|</problematic> <term>Coding Exercise</term></p>

<exercise label="lcccnot">
    <statement>
            <p>The code below says if homework is not done, you can’t go out. Try different values for <c>homeworkDone</c>.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class TestNot
{
    public static void main(String[] args)
    {
        boolean homeworkDone = false;
        if (!homeworkDone)
        {
            System.out.println("Sorry, you can't go out!");
        }
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class TestNot{public static void main(String[] args){ boolean homeworkDone"
                    + " = false; if (!homeworkDone) { System.out.println(\"Sorry, you can't go"
                    + " out!\"); } } }";

        boolean changed = codeChanged(origCode);
        assertTrue(changed);
    }
}
        </tests>
    </program>
</exercise>
            <note>
                <p>In Java, ! will be executed before &amp;&amp;, and &amp;&amp; will be executed before ||, unless there are parentheses. Anything inside parentheses is executed first.</p>
            </note>
        </subsection>
  <subsection>
            <title>Truth Tables</title>
            <p>The following table (also called a <term>truth table</term>) shows the result for <c>P &amp;&amp; Q</c> when <c>P</c> and <c>Q</c> are both expressions that can be <c>true</c> or <c>false</c>. An expression involving logical operators like <c>P &amp;&amp; Q</c> evaluates to a <c>boolean</c> value, <c>true</c> or <c>false</c>. As you can see below the result of <c>P &amp;&amp; Q</c> is only <c>true</c> if both <c>P</c> and <c>Q</c> are <c>true</c>.</p>
            <table><tabular>
                
                    
                    
                    
                    
                        <row header="yes">
                            <cell>
                                P
                            </cell>
                            <cell>
                                Q
                            </cell>
                            <cell>
                                P &amp;&amp; Q
                            </cell>
                        </row>
                    
                    
                        <row>
                            <cell>
                                true
                            </cell>
                            <cell>
                                true
                            </cell>
                            <cell>
                                true
                            </cell>
                        </row>
                        <row>
                            <cell>
                                false
                            </cell>
                            <cell>
                                true
                            </cell>
                            <cell>
                                false
                            </cell>
                        </row>
                        <row>
                            <cell>
                                true
                            </cell>
                            <cell>
                                false
                            </cell>
                            <cell>
                                ?
                            </cell>
                        </row>
                        <row>
                            <cell>
                                false
                            </cell>
                            <cell>
                                false
                            </cell>
                            <cell>
                                false
                            </cell>
                        </row>
                    
                
            </tabular></table>
            <p><problematic refid="id9">|Exercise|</problematic> <term>Check your understanding</term></p>

        <exercise label="3_5_1_trueAndFalse">
            <statement>
    <p>3-5-5: The truth table above is missing one result.  What is the result of <c>P &amp;&amp; Q</c> when <c>P=true</c> and <c>Q=false</c>? <var/>  </p></statement><setup><var><condition string="^\s*^false$\s*$"><feedback><p>Correct.  Both values must be true for &amp;&amp; to return true.</p></feedback></condition><condition string="^\s*.*\s*$"><feedback><p>Try it and see</p></feedback></condition></var></setup></exercise>            <p>The following table shows the result for <c>P || Q</c> when <c>P</c> and <c>Q</c> are both expressions that can be <c>true</c> or <c>false</c>.  As you can see below the result of <c>P || Q</c> is <c>true</c> if either <c>P</c> or <c>Q</c> is <c>true</c>.  It is also <c>true</c> when both of them are <c>true</c>.</p>
            <table><tabular>
                
                    
                    
                    
                    
                        <row header="yes">
                            <cell>
                                P
                            </cell>
                            <cell>
                                Q
                            </cell>
                            <cell>
                                P || Q
                            </cell>
                        </row>
                    
                    
                        <row>
                            <cell>
                                true
                            </cell>
                            <cell>
                                true
                            </cell>
                            <cell>
                                true
                            </cell>
                        </row>
                        <row>
                            <cell>
                                false
                            </cell>
                            <cell>
                                true
                            </cell>
                            <cell>
                                ?
                            </cell>
                        </row>
                        <row>
                            <cell>
                                true
                            </cell>
                            <cell>
                                false
                            </cell>
                            <cell>
                                true
                            </cell>
                        </row>
                        <row>
                            <cell>
                                false
                            </cell>
                            <cell>
                                false
                            </cell>
                            <cell>
                                false
                            </cell>
                        </row>
                    
                
            </tabular></table>
            <p><problematic refid="id11">|Exercise|</problematic> <term>Check your understanding</term></p>

        <exercise label="3_5_2_falseOrTrue">
            <statement>
    <p>3-5-6: The truth table above is missing one result.  What is the result of <c>P || Q</c> when <c>P=false</c> and <c>Q=true</c>? <var/>  </p></statement><setup><var><condition string="^\s*^true$\s*$"><feedback><p>Correct.  Only one of the two has to be true with || so this will print true.</p></feedback></condition><condition string="^\s*.*\s*$"><feedback><p>Try it and see</p></feedback></condition></var></setup></exercise>            <p><problematic refid="id13">|Exercise|</problematic> <term>Check your understanding</term></p>

    <exercise label="qcbc_7">
        <statement>

            <p>3-5-7: What is printed when the following code executes and x has been set to 3 and y has been set to 9?</p>
            <program language="java"><input>
if (x &gt; 0 &amp;&amp; (y / x) == 3)
{
   System.out.println("first case");
}
else
{
   System.out.println("second case");
}
</input></program>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>first case</p>
                </statement>
                <feedback>
                    <p>first case will print if both of the conditions are true and they are.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>second case</p>
                </statement>
                <feedback>
                    <p>second case will print either of the conditions are false.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="qcbc_8">
        <statement>

            <p>3-5-8: What is printed when the following code executes and x has been set to 3 and y has been set to 6?</p>
            <program language="java"><input>
if (x &gt; 0 &amp;&amp; (y / x) == 3)
{
   System.out.println("first case");
}
else
{
   System.out.println("second case");
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>first case</p>
                </statement>
                <feedback>
                    <p>first case will print if both of the conditions are true, but the second is not.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>second case</p>
                </statement>
                <feedback>
                    <p>second case will print if either of the conditions are false and the second one is (6 / 3 == 2).</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="qcbc_or">
        <statement>

            <p>3-5-9: What is printed when the following code executes and x has been set to 3 and y has been set to 6?  Notice that it is now an <term>or</term> (||) instead of <term>and</term> (&amp;&amp;).</p>
            <program language="java"><input>
if (x &gt; 0 || (y / x) == 3)
{
   System.out.println("first case");
}
else
{
   System.out.println("second case");
}
</input></program>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>first case</p>
                </statement>
                <feedback>
                    <p>first case will print if either of the two conditions are true.  The first condition is true, even though the second one isn't.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>second case</p>
                </statement>
                <feedback>
                    <p>second case will print if both of the conditions are false, but the first condition is true.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        </subsection>
  <subsection>
            <title>Short Circuit Evaluation</title>
            
            
            <p>Both <c>&amp;&amp;</c> and <c>||</c> use <term>short circuit evaluation</term>.  That means that the second expression (on the right of the operator) isn’t necessarily checked, if the result from the first expression is enough to tell if the compound boolean expression is true or false:</p>
            <p><ul>
                <li>
                    <p>If two boolean values/expressions are combined with a logical <term>or</term> (<c>||</c>) and the first expression is <c>true</c>, then the second expression won’t be executed, since only one needs to be <c>true</c> for the result to be <c>true</c>.</p>
                </li>
                <li>
                    <p>If two boolean values/expressions are combined with a logical <term>and</term> (<c>&amp;&amp;</c>) and the first expression is <c>false</c>, then the second expression won’t be executed.  If the first expression is <c>false</c>, the result will be <c>false</c>, since both sides of the <c>&amp;&amp;</c> need to be <c>true</c> for the result to be <c>true</c>.</p>
                </li>
            </ul></p>
            <p><problematic refid="id15">|Exercise|</problematic> <term>Check your understanding</term></p>

    <exercise label="qcbc_5">
        <statement>

            <p>3-5-10: What is printed when the following code executes and x has been set to 0 and y to 3?</p>
            <program language="java"><input>
if (x &gt; 0 &amp;&amp; (y / x) == 3)
{
   System.out.println("first case");
}
else
{
   System.out.println("second case");
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>first case</p>
                </statement>
                <feedback>
                    <p>first case will only print if x is greater than 0 and it is not.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>second case</p>
                </statement>
                <feedback>
                    <p>second case will print if x is less than or equal to zero or if y divided by x is not equal to 3.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>You will get a error because you can't divide by zero.</p>
                </statement>
                <feedback>
                    <p>Since the first condition is false when x is equal to zero the second condition won't execute.  Execution moves to the else.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="qcb_7sc">
        <statement>

            <p>3-5-11: What is printed when the following code executes and x has been set to zero and y is set to 3?</p>
            <program language="java"><input>
if (x == 0 || (y / x) == 3)
{
   System.out.println("first case");
}
else
{
   System.out.println("second case");
}
</input></program>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>first case</p>
                </statement>
                <feedback>
                    <p>Since x is equal to zero the first expression in the complex conditional will be true and the (y / x) == 3 won't be evaluated, so it won't cause a divide by zero error.  It will print "first case".</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>second case</p>
                </statement>
                <feedback>
                    <p>Since x is equal to zero the first part of the complex conditional is true so it will print first case.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>You will get a error because you can't divide by zero.</p>
                </statement>
                <feedback>
                    <p>You won't get an error because of short circuit evaluation.  The (y / x) == 3 won't be evaluated since the first expression is true and an or is used.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        </subsection>
  <subsection>
            <title><problematic refid="id17">|Groupwork|</problematic> Programming Challenge : Truth Tables POGIL</title>
            <p>We encourage you to do this activity as a <problematic refid="id19">|POGIL|</problematic> (Process Oriented Guided Inquiry Learning) group activity. POGIL groups are self-managed teams of up to 4 students where everyone has a <url href="https://docs.google.com/document/d/1_NfNLWJxaG4qZ2Jd2x8UctDS05twn1h6p-o3XaAcRv0/edit?usp=sharing" visual="https://docs.google.com/document/d/1_NfNLWJxaG4qZ2Jd2x8UctDS05twn1h6p-o3XaAcRv0/edit?usp=sharing">POGIL role</url> and works together to solve the problems, making sure that everyone in the team participates and learns.</p>
            <p>Explore the following problems with your group:</p>
            <p><ol marker="1">
                <li>
                    <p>Draw or print a <problematic refid="id21">|Venn diagram|</problematic> of 4 intersecting circles. Put the names of the 4 people in your group one in each circle. Write down the age of each person in your group in the circles. If two or more people are the same age, put the age in the intersecting parts of their circles. Write a Boolean expression that compares the age of each person in the group using <c>==</c>, <c>&lt;</c>, <c>&gt;</c>, and <c>&amp;&amp;</c>, for example Ada’s age <c>&gt;</c> Alan’s age <c>&amp;&amp;</c> Alan’s age <c>==</c> Grace’s age. Then, ask each person in your group their favorite movie. If two or more people have the same favorite movie, put the movie in the intersecting parts of their circles. Write a Boolean expression that compares the favorite movies in the group using <c>==</c>, <c>!=</c>, and <c>&amp;&amp;</c>, for example Ada’s movie <c>==</c> Alan’s movie <c>&amp;&amp;</c> Alan’s movie <c>!=</c> Grace’s movie. Think of 1 more comparison and write it in the circles and as a Boolean expression. Share the Boolean expressions with the class. (Thank you to Jill Westerlund of Hoover High School and Art Lopez of Sweetwater High School for this activity suggestion).</p>
                </li>
                <li>
                    <p>Write the sentence “If it’s sunny, OR if the temperature is greater than 80 and it’s not raining, I will go to the beach.” as a Java if statement using an int variable <c>temperature</c> and boolean variables <c>sunny</c> and <c>raining</c>.  If the conditional is true, print out “Go to the beach!”. So, you will go to the beach on days that it is sunny in any temperature, or you will go to the beach on days when the temperature is over 80 degrees and it’s not raining.</p>
                </li>
                <li>
                    <p>Complete a truth table for the if statement that you wrote in #2 with columns for sunny, temperature &gt; 80, raining, and go to the beach.</p>
                </li>
                <li>
                    <p>Write Java code below to test your if statement and try all the values in your truth table to see if you filled it out correctly. You will need test case for each of the 8 rows in your truth table, for example when sunny is true and false, when raining is true or false, and for a value of temperature greater than 80, for example 90, and less than 80, for example 60.</p>
                </li>
            </ol></p>

<exercise label="challenge3-5-truthtables">
    <statement>
            <p>Challenge-3-5-truthtables: Test your boolean expression in an if statement below.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class TruthTable
{
    public static void main(String[] args)
    {
        // Test multiple values for these variables
        boolean sunny = false;
        int temperature = 90;
        boolean raining = false;

        // Write an if statement for: If it's sunny,
        //  OR if the temperature is greater than 80
        //     and it's not raining, "Go to the beach!"

    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String expect = "Go to the beach!";
        String output = getMethodOutput("main");
        String code = getCode();
        boolean passed;
        if (getCode().contains("boolean sunny = false"))
            passed =
                    getResults(
                            expect,
                            output,
                            "Prints Go to the beach! with initial input (sunny = false; temperature"
                                + " = 90; raining = false;)");
        else passed = getResults("sunny = false", "sunny = true", "Set sunny to false to test");

        assertTrue(passed);
    }

    @Test
    public void testCodeContains1()
    {
        boolean ifStatement = checkCodeContains("conditional: if", "if");
        assertTrue(ifStatement);
    }

    @Test
    public void testCodeContains2()
    {
        boolean ifStatement1 =
                checkCodeContains("conditional: temperature greater than 80", "temperature &gt; 80");

        assertTrue(ifStatement1);
    }

    @Test
    public void testCodeContains4()
    {
        boolean ifStatement3 = checkCodeContains("and", "&amp;&amp;");
        assertTrue(ifStatement3);
    }

    @Test
    public void testCodeContains5()
    {
        boolean ifStatement3 = checkCodeContains("or", "||");
        assertTrue(ifStatement3);
    }
}
        </tests>
    </program>
</exercise>
        </subsection>
  <subsection>
            <title>Summary</title>
            <p><ul>
                <li>
                    <p>Logical operators <c>!</c> (not), <c>&amp;&amp;</c> (and), and <c>||</c> (or) are used with Boolean values.</p>
                </li>
                <li>
                    <p><c>A &amp;&amp; B</c> is <c>true</c> if both <c>A</c> and <c>B</c> are <c>true</c>.</p>
                </li>
                <li>
                    <p><c>A || B</c> is <c>true</c> if either <c>A</c> or <c>B</c> (or both) are <c>true</c>.</p>
                </li>
                <li>
                    <p><c>!A</c> is <c>true</c> if <c>A</c> is <c>false</c>.</p>
                </li>
                <li>
                    <p>In Java, <c>!</c> has precedence (is executed before) <c>&amp;&amp;</c> which has precedence over <c>||</c>. Parentheses can be used to force the order of execution in a different way.</p>
                </li>
                <li>
                    <p>When the result of a logical expression using <c>&amp;&amp;</c> or <c>||</c> can be determined by evaluating only the first Boolean operand, the second is not evaluated. This is known as <term>short-circuit evaluation</term>.</p>
                </li>
            </ul></p>
        </subsection>
  <subsection>
            <title>AP Practice</title>

    <exercise label="AP3-5-1">
        <statement>

            <p>3-5-13: Consider the following code segment. What is printed as a result of executing the code segment?</p>
            <program language="java"><input>
int x = 10;
int y = 5;

if (x % 2 == 0 &amp;&amp; y % 2 == 0 || x &gt; y)
{
    System.out.print("First ");

    if (y * 2 == x || y &gt; 5 &amp;&amp; x &lt;= 10)
    {
       System.out.print("Second ");
    }
    else
    {
       System.out.print("Third ");
    }
}
</input></program>
</statement><choices><choice><statement id="AP3-5-1_opt_a">            <p>Nothing is printed out.</p>
</statement><feedback id="AP3-5-1_opt_a">
            <p>Some of these conditions are true.</p>
</feedback></choice><choice><statement id="AP3-5-1_opt_b">            <p>First</p>
</statement><feedback id="AP3-5-1_opt_b">
            <p>This is partially correct.</p>
</feedback></choice><choice><statement id="AP3-5-1_opt_c">            <p>Third</p>
</statement><feedback id="AP3-5-1_opt_c">
            <p>Third cannot be printed out unless First is printed out first.</p>
</feedback></choice><choice correct="yes"><statement id="AP3-5-1_opt_d">            <p>FirstSecond</p>
</statement><feedback id="AP3-5-1_opt_d">
            <p>Good tracing!</p>
</feedback></choice><choice><statement id="AP3-5-1_opt_e">            <p>FirstThird</p>
</statement><feedback id="AP3-5-1_opt_e">
            <p>Take another look at the second condition.</p>
</feedback></choice></choices>

    </exercise>
        </subsection>
  <subsection>
            <title>Boolean Game</title>
            <p>Try the game below written to practice Booleans. Click on <term>Booleans</term>, look at the color and number in the block and evaluate the boolean expression to choose true or false. Then, check on Compound for an added challenge. We encourage you to work in pairs and see how high a score you can get.</p>
            <raw format="html" xml:space="preserve">&lt;iframe height="100%" width="100%" style="margin-left:10%;max-width:80%" src="https://csa-games.netlify.app/"&gt;&lt;/iframe&gt;
&lt;script&gt;      window.scrollTo(0, 0);&lt;/script&gt;</raw>
        </subsection>
</section>

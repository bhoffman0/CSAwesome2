<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="u4b-toggle-write-code">
  <time minutes="90" />
  <title>Unit 4b ArrayList Write Code for Toggle Code</title>
  <p>
    This is the ArrayList write code problems associated with the mixed up code problems.
  </p>

  <activity label="u4b_muc_wc1" xml:id="u4b_muc_wc1">
    <statement>
      <p>
        The following program should create an ArrayList called <c>conversation</c>,
        add in some elements(<c>"hello"</c>, <c>"goodbye"</c>, <c>"how are
        you"</c>, and <c>"see you later"</c>), and print out the elements with
        <c>", "</c> after each. Fill in the code so that it adds the elements to
        <c>conversation</c>. The rest of the program is finished for you.
      </p>
    </statement>

    <program interactive="activecode" language="java">
      <code>
import java.util.ArrayList;
import java.util.List;

public class ListTest
{

    public static void main(String[] args)
    {

        ArrayList&lt;String&gt; conversation;
        conversation = new ArrayList&lt;String&gt;();

        // YOUR CODE HERE //

        for (String element : conversation)
        {

            System.out.print(element + ", ");
        }
    }
}
      </code>
      <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ListTest");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "hello, goodbye, how are you, see you later,";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }

    // @Test
    public void test2()
    {
        String code = getCodeWithoutComments();
        System.out.println("Stuck here");

        int count = countOccurences(code, "new ArrayList");
        boolean passed = getResults("1", "" + count, "Counting number of new ArrayList");
        assertTrue(passed);
    }

    // @Test
    public void test3()
    {
        String code = getCodeWithoutComments();
        // System.out.println("Stuck here");
        int count = countOccurences(code, ".add(");
        boolean passed = getResults("4", "" + count, "Counting number of .add()");
        assertTrue(passed);
    }
}
      </tests>
    </program>
  </activity>

  <activity label="u4b_muc_wc2" xml:id="u4b_muc_wc2">
    <statement>
      <p>
        Fix the two errors in the <c>printBackwards</c> method so that it will
        correctly iterate through the parameter <c>myList</c> backwards and
        print each element.
      </p>
    </statement>

    <program interactive="activecode" language="java">
      <code>
import java.util.ArrayList;

public class ListTest
{

    public static void printBackwards(ArrayList&lt;String&gt; myList)
    {

        for (int i = myList.size() - 1; i &gt; 0; i--)
        {

            System.out.print(myList[i] + ", ");
        }
    }

    public static void main(String[] args)
    {

        ArrayList&lt;String&gt; conversation;
        conversation = new ArrayList&lt;String&gt;();

        conversation.add("hello");
        conversation.add("goodbye");
        conversation.add("how are you");
        conversation.add("see you later");

        printBackwards(conversation);
    }
}
      </code>
      <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

// import java.util.ArrayList;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ListTest");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "see you later, how are you, goodbye, hello,";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }
}
      </tests>
    </program>
  </activity>

  <activity label="u4b_muc_wc3" xml:id="u4b_muc_wc3">
    <statement>
      <p>
        Write code to define the <c>removeZeros</c> method. This method should
        take in an ArrayList of integers <c>listOfNums</c> and delete all of the
        zeros. For example, <c>{3, 0, 5, 0}</c> would change into <c>{3, 5}</c>.
      </p>
    </statement>

    <program interactive="activecode" language="java">
      <code>
import java.util.ArrayList;

public class ListTest
{

    public static void removeZeros(ArrayList&lt;Integer&gt; listOfNums)
    {
        // YOUR CODE HERE

        // HINT: When you delete an element, the indexes of the following elements
        // shift!
        // That means you CANNOT use an enhanced for loop
        // And it also means you need to carefully handle when you increment your
        // index variable

    }

    public static void main(String[] args)
    {

        ArrayList&lt;Integer&gt; list;
        list = new ArrayList&lt;Integer&gt;();

        list.add(1);
        list.add(0);
        list.add(0);
        list.add(3);
        list.add(2);
        list.add(0);
        list.add(9);

        System.out.println("Before: " + list);
        removeZeros(list);
        System.out.println("After: " + list);
    }
}
      </code>
      <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

// import java.util.ArrayList;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ListTest");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "Before: [1, 0, 0, 3, 2, 0, 9]\nAfter: [1, 3, 2, 9]";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }
}
      </tests>
    </program>
  </activity>

  <activity label="u4b_muc_wc4" xml:id="u4b_muc_wc4">
    <statement>
      <p>
        Write code for the <c>findSmallest</c> method. This code segment should
        take in an ArrayList <c>nums</c> and return the smallest element
        present. For example, <c>findSmallest</c> called on <c>{5, 3, 1, 6}</c>
        should return <c>1</c>.
      </p>
    </statement>

    <program interactive="activecode" language="java">
      <code>
import java.util.ArrayList;

public class ListTest
{

    public static int findSmallest(ArrayList&lt;Integer&gt; nums)
    {
        int min = nums.get(0);

        // YOUR CODE HERE //

        return min;
    }

    public static void main(String[] args)
    {

        ArrayList&lt;Integer&gt; list;
        list = new ArrayList&lt;Integer&gt;();

        list.add(12);
        list.add(45);
        list.add(23);
        list.add(34);
        list.add(2);
        list.add(7);
        list.add(9);

        System.out.println(findSmallest(list));
    }
}
      </code>
      <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

// import java.util.ArrayList;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ListTest");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "2";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }
}
      </tests>
    </program>
  </activity>

  <activity label="u4b_muc_wc5" xml:id="u4b_muc_wc5">
    <statement>
      <p>
        Write code to flesh out the <c>removeOdd</c> method. This method should
        take in a parameter <c>nums</c> and delete every odd number from it. For
        example, <c>{5, 3, 2, 1, 4}</c> should become <c>{2, 4}</c>.
      </p>
    </statement>

    <program interactive="activecode" language="java">
      <code>
import java.util.ArrayList;

public class ListTest
{

    public static void removeOdd(ArrayList&lt;Integer&gt; nums)
    {

        // YOUR CODE HERE //
        // Just like in problem three, be wary about the changing indexes

    }

    public static void main(String[] args)
    {

        ArrayList&lt;Integer&gt; list;
        list = new ArrayList&lt;Integer&gt;();

        list.add(12);
        list.add(7);
        list.add(16);
        list.add(39);
        list.add(28);
        list.add(40);
        list.add(9);

        System.out.println("Before: " + list);
        removeOdd(list);
        System.out.println("After: " + list);
    }
}
      </code>
      <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ListTest");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "[12, 16, 28, 40]";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }
}
      </tests>
    </program>
  </activity>

  <activity label="u4b_muc_wc6" xml:id="u4b_muc_wc6">
    <statement>
      <p>
        Fill out the <c>average</c> method. It should take in an ArrayList
        <c>nums</c> and calculate the arithmetic mean (the sum divided by the
        length). For example, <c>average</c> called on <c>{5, 9, 6}</c> should
        return <c>6.66666666667</c> as that is <c>(5 + 9 + 6) / 3</c>.
      </p>
    </statement>

    <program interactive="activecode" language="java">
      <code>
import java.util.ArrayList;

public class ListTest
{

    public static double average(ArrayList&lt;Integer&gt; nums)
    {
        // YOUR CODE HERE //
    }

    public static void main(String[] args)
    {

        ArrayList&lt;Integer&gt; list;
        list = new ArrayList&lt;Integer&gt;();

        list.add(12);
        list.add(20);
        list.add(4);
        list.add(31);
        list.add(2);

        System.out.println(average(list));
    }
}
      </code>
      <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

// import java.util.ArrayList;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ListTest");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "13.8";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }
}
      </tests>
    </program>
  </activity>

  <activity label="u4b_muc_wc7" xml:id="u4b_muc_wc7">
    <statement>
      <p>
        Create the <c>moveLargest</c> method. This should find the largest value
        in an ArrayList of Integers (the parameter) and move it to the back of
        the list.
      </p>
    </statement>

    <program interactive="activecode" language="java">
      <code>
import java.util.ArrayList;

public class ListTest
{

    public static void moveLargest(ArrayList&lt;Integer&gt; nums)
    {

        // YOUR CODE HERE //

    } // end moveLargest method

    public static void main(String[] args)
    {

        ArrayList&lt;Integer&gt; list;
        list = new ArrayList&lt;Integer&gt;();

        list.add(1);
        list.add(3);
        list.add(12);
        list.add(0);
        list.add(9);

        System.out.println("Before: " + list);
        moveLargest(list);
        System.out.println("After: " + list);
    } // end main method
} // end class
      </code>
      <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

// import java.util.ArrayList;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ListTest");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "Before: [1, 3, 12, 0, 9]\nAfter: [1, 3, 0, 9, 12]";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }
}
      </tests>
    </program>
  </activity>

  <activity label="u4b_muc_wc8" xml:id="u4b_muc_wc8">
    <statement>
      <p>
        Write code to finish the <c>removeShort</c> method. It should take an
        ArrayList <c>words</c> and remove all elements that are three characters
        long or shorter. For example, <c>{"Dog", "Monkey", "Lion", "Cat"}</c>
        would become <c>{"Monkey", "Lion"}</c>.
      </p>
    </statement>

    <program interactive="activecode" language="java">
      <code>
import java.util.ArrayList;

public class ListTest
{

    public static void removeShort(ArrayList&lt;String&gt; words)
    {

        // YOUR CODE HERE //
        // Just like in problem three, consider iterating backwards or using a
        // while loop

    } // end removeShort method

    public static void main(String[] args)
    {

        ArrayList&lt;String&gt; list;
        list = new ArrayList&lt;String&gt;();

        list.add("catch");
        list.add("dog");
        list.add("tree");
        list.add("me");

        System.out.println("Before: " + list);
        removeShort(list);
        System.out.println("After: " + list);
    } // end main method
} // end class
      </code>
      <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ListTest");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "Before: [catch, dog, tree, me]\nAfter: [catch, tree]";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }
}
      </tests>
    </program>
  </activity>

  <activity label="u4b_muc_wc9" xml:id="u4b_muc_wc9">
    <statement>
      <p>
        Write the method <c>doubleList</c>. This should take in an ArrayList
        <c>words</c> and insert a copy of each element such that <c>{"cat",
        "ribbon", "house"}</c> would become <c>{"cat", "cat", "ribbon",
        "ribbon", "house", "house"}</c>.
      </p>
    </statement>

    <program interactive="activecode" language="java">
      <code>
import java.util.ArrayList;

public class ListTest
{

    public static void doubleList(ArrayList&lt;String&gt; words)
    {

        // YOUR CODE HERE
        // Remember - when you insert elements, you'll change the indexes!

    } // end doubleList method

    public static void main(String[] args)
    {

        ArrayList&lt;String&gt; list;
        list = new ArrayList&lt;String&gt;();

        list.add("catch");
        list.add("dog");
        list.add("tree");
        list.add("me");

        System.out.println("Before: " + list);
        doubleList(list);
        System.out.println("After: " + list);
    } // end main method
} // end class
      </code>
      <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ListTest");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect =
                "Before: [catch, dog, tree, me]\n"
                    + "After: [catch, catch, dog, dog, tree, tree, me, me]";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }
}
      </tests>
    </program>
  </activity>

  <activity label="u4b_muc_wc10" xml:id="u4b_muc_wc10">
    <statement>
      <p>
        Write the method <c>removeElement</c>. This should take in an ArrayList
        <c>nums</c> and an integer <c>toRemove</c> and remove every instance of
        that integer from <c>nums</c>. E.g., if nums was <c>{3, 6, 5, 3, 4}</c>,
        it should become <c>{6, 5, 4}</c> after calling <c>removeElement(nums,
        3)</c>.
      </p>
    </statement>

    <program interactive="activecode" language="java">
      <code>
import java.util.ArrayList;

public class ListTest
{

    public static void removeElement(ArrayList&lt;Integer&gt; nums, int toRemove)
    {

        // YOUR CODE HERE

    } // end average method

    public static void main(String[] args)
    {

        ArrayList&lt;Integer&gt; list;
        list = new ArrayList&lt;Integer&gt;();

        list.add(1);
        list.add(3);
        list.add(2);
        list.add(9);

        System.out.println("Before: " + list);
        removeElement(list, 3);
        System.out.println("After: " + list);
    } // end main method
} // end class
      </code>
      <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ListTest");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "Before: [1, 3, 2, 9]\nAfter: [1, 2, 9]";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }
}
      </tests>
    </program>
  </activity>
</section>

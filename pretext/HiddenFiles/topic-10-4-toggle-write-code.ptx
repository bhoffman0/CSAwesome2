<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section>
  <title>Unit 10 Write Code for Toggle Code</title>
  <p>This is the write code problems associated with the mixed up code problems. Remember to use recursion!</p>
  <exercises>
    <exercise label="u10_muc_wc1">
    <statement>
        <p>Finish the <c>reverse</c> method. This should take in a parameter <c>myText</c> and return a reversed version of it. For example, <c>reverse("Cat")</c> would return <c>"taC"</c>. Fill in the missing code (labeled with YOUR CODE HERE comments) to complete the problem.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class Test1
{
    public static String reverse(String myText)
    {
        if (myText.length() == 0) // this is the base case
        {
            // YOUR CODE HERE - what should we return in the base case?
        }

        else // this is the recursive case
        {
            reverse() + myText.charAt(0); // YOUR CODE HERE -- Fill in the call to reverse()
            // HINT: You'll need to use a substring
        }
    }

    public static void main(String[] args)
    {
        String str1 = "test";

        System.out.println("str1 --&gt; " + str1);
        System.out.println("reverse(str1) --&gt; " + reverse(str1));

        String str2 = "computer science is awesome";

        System.out.println("str2 --&gt; " + str2);
        System.out.println("reverse(str1) --&gt; " + reverse(str2));
    }
}
</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Test1");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect =
                "str1 --&gt; test\n"
                    + "reverse(str1) --&gt; tset\n"
                    + "str2 --&gt; computer science is awesome\n"
                    + "reverse(str1) --&gt; emosewa si ecneics retupmoc";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String str = "this is a test";
        String expected = "tset a si siht";
        String actual = Test1.reverse(str);

        boolean passed = getResults("" + expected, "" + actual, "Testing reverse(" + str + ")");
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCodeWithoutComments();
        int count = countOccurences(code, "while") + countOccurences(code, "for");
        boolean passed = count == 0;
        getResults(
                "0 loops",
                count + " loop(s)",
                "Making sure method is recursive, not iterative",
                passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="u10_muc_wc2">
    <statement>
        <p>Fill in the <c>multiply</c> method. It should take in two non-negative integers and return their product, using the fact that multiplication is repeated addition (e.g., 3x4 = 3 + 3 + 3 + 3). Thus, <c>multiply(3, 4)</c> would return <c>12</c>. Do NOT use multiplication; only use addition.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class ListTest
{
    public static int multiply(int a, int b)
    {

        if ()  // YOUR CODE HERE - What's the base case condition?
        {

            // YOUR CODE HERE - And what should we return in the base case?

        }
        else
        {
            // This is the recursive case
            return multiply(a, b - 1) + a;
        }
    }

    public static void main(String[] args)
    {
        System.out.println("Before: multiply(3, 4)");
        System.out.println("After: " + multiply(3, 4));
    }
}
</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ListTest");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "Before: multiply(3, 4)\nAfter: 12";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="u10_muc_wc3">
    <statement>
        <p>Write the <c>sumElements</c> method. It should add up all of the elements in the passed-in array from <c>index</c> onward - so calling <c>sumElements(nums, 1)</c> with <c>nums</c> as {1,2,3,12} would return <c>17</c> (as that is 2 + 3 + 12). Be sure to use recursion when creating the method.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class ListTest
{

    public static int sumElements(int[] arr, int index)
    {

        if (index &gt;= arr.length) // This is the base case
        {
            return 0;
        } else
        {
            // This is the recursive case
            // YOUR CODE HERE
        }
    }

    public static void main(String[] args)
    {
        int[] list = {1, 2, 3, 12};
        System.out.println("Answer: " + sumElements(list, 0));
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ListTest");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "Answer: 18";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="u10_muc_wc4">
    <statement>
        <p>Finish the <c>removeStar</c> method. It should remove any occurrence of an asterisk (“*”) from a passed-in string. For example, calling <c>removeStar</c> on <c>"ab*c**d"</c> would return <c>"abcd"</c>.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class ListTest
{

    public static String removeStar(String myText)
    {

        if (myText.length() == 0)
        {
            return "";
        }

        if (myText.charAt(0) == '*')
        {
            // YOUR CODE HERE
            // HINT: Use substring() and removeStar()
        }
        else
        {
            // YOUR CODE HERE
            // HINT: Use substring(), removeStar(), and concatenation
        }
    }

    public static void main(String[] args)
    {
        String myText = "ab*c**d";
        System.out.println("Before: " + myText);

        System.out.println("After: " + removeStar(myText));
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ListTest");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "Before: ab*c**d\nAfter: abcd";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="u10_muc_wc5">
    <statement>
        <p>Write the <c>exponent</c> program. This should take in two <c>int</c> parameters - <c>base</c> and <c>power</c> - and return <c>base</c> ^ <c>power</c> (<c>base</c> multiplied by itself <c>power</c> times). For example, <c>exponent(3, 5)</c> would return <c>243</c> because that is 3x3x3x3x3.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class ListTest
{

    public static int exponent(int base, int power)
    {

        // YOUR CODE HERE
        // Think of what the base and recursive cases should be
        // If you get stuck, problem two (writing the multiply method) should be a
        // good guide
        // Unlike that problem, it's totally fine to do multiplication here

    }

    public static void main(String[] args)
    {

        System.out.println("Before: exponent(2,4)");
        System.out.println("After: " + exponent(2, 4));
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

// import java.util.ArrayList;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ListTest");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "Before: exponent(2,4)\nAfter: 16";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="u10_muc_wc6">
    <statement>
        <p>Write the <c>numFiveOccurrence</c> method. It should return the number of times that <c>5</c> is present in the passed <c>int</c> array <c>arr</c>. Just as in problem three (<c>sumElements</c>), there will also be an <c>index</c> parameter to make recursion possible. The initial call to <c>numFiveOccurrence</c> will be with index 0, and, from then on, <c>numFiveOccurrence(arr, index)</c> should return the number of 5s in <c>arr</c> from index onward.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>

public class ListTest
{
    public static int numFiveOccurrence(int[] arr, int index)
    {

        // YOUR CODE HERE
        // Hint: Remember that you will have to handle two different possibilities
        // in the recursive case based on arr[index]
        // If you get stuck, look at sumElements and removeStar

    }

    public static void main(String[] args)
    {

        int[] list = {1, 5, 7, 14, 5};

        System.out.println("Before: {1, 5, 7, 14, 5}");
        System.out.println("After: " + numFiveOccurrence(list, 0));
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ListTest");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "Before: {1, 5, 7, 14, 5}\nAfter: 2";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="u10_muc_wc7">
    <statement>
        <p>Write the <c>repeatThis</c> method. It should take in two parameters - a String <c>s</c> and an int <c>i</c> - and return a new String composed of <c>s</c> <c>i</c> times. For example, <c>repeatThis("Cat", 2)</c> would return <c>"CatCat"</c>.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class ListTest
{

    public static String repeatThis(String s, int i)
    {

        // YOUR CODE HERE

    }

    public static void main(String[] args)
    {

        System.out.println("Before: (hi, 3)");
        System.out.println("After: " + repeatThis("hi", 3));
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ListTest");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "Before: (hi, 3)\nAfter: hihihi";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="u10_muc_wc8">
    <statement>
        <p>Write the <c>findNumX</c> method. This should take in a String <c>s</c> and return the number of occurrences of the character <c>'x'</c> (NOT including <c>'X'</c>). For example, <c>findNumX("axbcx")</c> would return <c>2</c>.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class Test1
{

    public static int findNumX(String s)
    {

        // YOUR CODE HERE

    }

    public static void main(String[] args)
    {

        System.out.println("Before: xHihxixx");
        System.out.println("After: " + findNumX("xHihxixx"));
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Test1");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "Before: xHihxixx\nAfter: 4";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String str = "axbcx";
        int expected = 2;
        int actual = Test1.findNumX(str);

        boolean passed = (expected == actual);
        getResults("" + expected, "" + actual, "Testing findNumX(" + str + ")");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="u10_muc_wc9">
    <statement>
        <p>Write the <c>countTo</c> method. This should take in an integer <c>x</c> and return a String with the positive numbers from 1 to <c>x</c> (inclusive) with “…” after each. For example, <c>countTo(5)</c> would return “1…2…3…4…5…”.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class Test1
{
    public static String countTo(int x)
    {

        // YOUR CODE HERE

    }

    public static void main(String[] args)
    {
        int num1 = 10;
        System.out.println("countTo(" + num1 + ") --&gt; " + countTo(num1));

        int num2 = 5;
        System.out.println("countTo(" + num2 + ") --&gt; " + countTo(num2));

        int num3 = 0;
        System.out.println("countTo(" + num3 + ") --&gt; " + countTo(num3));
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Test1");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect =
                "countTo(10) --&gt; 1...2...3...4...5...6...7...8...9...10...\n"
                    + "countTo(5) --&gt; 1...2...3...4...5...\n"
                    + "countTo(0) --&gt;";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        int str = 6;
        String expected = "1...2...3...4...5...6...";
        String actual = Test1.countTo(str);

        boolean passed = getResults("" + expected, "" + actual, "Testing countTo(" + str + ")");
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCodeWithoutComments();
        int count = countOccurences(code, "while") + countOccurences(code, "for");
        boolean passed = count == 0;
        getResults(
                "0 loops",
                count + " loop(s)",
                "Making sure method is recursive, not iterative",
                passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="u10_muc_wc10">
    <statement>
        <p>Write the <c>displayEvenDigits</c> method. It should take in an integer <c>num</c> and return a String version of <c>num</c> with the odd digits replaced by <c>'_'</c>. For example, <c>displayEvenDigits(42356)</c> should return <c>"42__6".</c> To achieve this recursively, you should use modulo and division to get the least-significant digit and then pass a version of <c>num</c> without that digit (hint: use integer division).</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class Test1
{
    public static String displayEvenDigits(int num)
    {

        // YOUR CODE HERE

    } // end method

    public static void main(String[] args)
    {
        int num1 = 12345678;
        System.out.println(
                "displayEvenDigits(" + num1 + ") --&gt; " + displayEvenDigits(num1));

        int num2 = 2468;
        System.out.println(
                "displayEvenDigits(" + num2 + ") --&gt; " + displayEvenDigits(num2));

        int num3 = 1357;
        System.out.println(
                "displayEvenDigits(" + num3 + ") --&gt; " + displayEvenDigits(num3));
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Test1");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect =
                "displayEvenDigits(12345678) --&gt; _2_4_6_8\n"
                    + "displayEvenDigits(2468) --&gt; 2468\n"
                    + "displayEvenDigits(1357) --&gt; ____";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        int str = 987654321;
        String expected = "_8_6_4_2_";
        String actual = Test1.displayEvenDigits(str);

        boolean passed =
                getResults("" + expected, "" + actual, "Testing displayEvenDigits(" + str + ")");
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCodeWithoutComments();
        int count = countOccurences(code, "while") + countOccurences(code, "for");
        boolean passed = count == 0;
        getResults(
                "0 loops",
                count + " loop(s)",
                "Making sure method is recursive, not iterative",
                passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="u10_p2_muc_wc2">
    <statement>
        <p>Write the <c>fibonacci</c> method. This program should take in an integer <c>n</c> and return the <c>n``th fibonacci number. The 0th fibonacci number is ``0</c> and the 1st is <c>1</c>. From then on, the <c>n``th fibonacci number is the ``n-1``th fibonacci number + the ``n-2``th fibonacci number. For example, the first few fibonacci numbers are 0, 1, 1, 2, 3, 5, 8. ``fibonacci(4)</c> should return <c>3</c>, as that is the 4th fibonacci number (remember that 0 is the 0th!). <c>fibonacci(6)</c> should return <c>8</c>, as that is the 6th fibonacci number.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class ListTest
{

    public static int fibonacci(int n)
    {

        // YOUR CODE HERE
        // HINT: Unlike most problems, there are TWO base cases

    }

    public static void main(String[] args)
    {

        System.out.println("Before: " + " fibonacci(8)");
        System.out.println("After: " + fibonacci(8));
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ListTest");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "Before: fibonacci(8)\nAfter: 21";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="u10_p2_muc_wc3">
    <statement>
        <p>Create the <c>spaceDash</c> method. It should take in a String <c>str</c> and return a new String that has all of the spaces in <c>str</c> replaced by dashes.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class Test1
{
    public static String spaceDash(String str)
    {

        // YOUR CODE HERE

    }

    public static void main(String[] args)
    {
        String s = "Hello World !";
        System.out.println(spaceDash(s));
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Test1");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "Hello-World-!";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="u10_p2_muc_wc4">
    <statement>
        <p>Write the <c>numberOf2s</c> method. It should take in an integer <c>n</c> and count the number of 2s in the digits. Try to do this without converting <c>n</c> to a String. Here’s a hint: modulo and integer division will both be very useful.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class Test1
{
    public static int numberOf2s(int n)
    {

        // YOUR CODE HERE

    }

    public static void main(String[] args)
    {
        int s = 1932294812;
        System.out.println(numberOf2s(s));
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Test1");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "3";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="u10_p2_muc_wc5">
    <statement>
        <p>Write the <c>sum</c> method. It should take in an integer <c>n</c> and recursively find and return the sum of the digits of <c>n</c>. For example, <c>sum(362)</c> would return <c>11</c>, as that is 3+6+2.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class Test1
{
    public static int sum(int n)
    {

        // YOUR CODE HERE

    }

    public static void main(String[] args)
    {
        int num = 123456789;
        System.out.println(sum(num));
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Test1");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "45";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="u10_p2_muc_wc6">
    <statement>
        <p>Write the <c>evenDigits</c> method. This should take in an integer <c>n</c> and recursively return the number of even digits in <c>n</c>.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class Test1
{
    public static int evenDigits(int n)
    {

        // YOUR CODE HERE

    }

    public static void main(String[] args)
    {
        int num1 = 12345678;
        System.out.println("evenDigits(" + num1 + ") --&gt; " + evenDigits(num1));

        int num2 = 9876543;
        System.out.println("evenDigits(" + num2 + ") --&gt; " + evenDigits(num2));
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Test1");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "evenDigits(12345678) --&gt; 4\nevenDigits(9876543) --&gt; 3";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        int num = 55555;
        int expected = 0;
        int actual = Test1.evenDigits(num);

        boolean passed = getResults("" + expected, "" + actual, "Testing evenDigits(" + num + ")");
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCodeWithoutComments();
        int count = countOccurences(code, "while") + countOccurences(code, "for");
        boolean passed = count == 0;
        getResults(
                "0 loops",
                count + " loop(s)",
                "Making sure method is recursive, not iterative",
                passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="u10_p2_muc_wc7">
    <statement>
        <p>Write the <c>factorial</c> method. This should take in an integer <c>n</c> and return the factorial of <c>n</c>. The factorial of N is equal to N x (N - 1) x (N - 2)… x 2 x 1. Note that N times the factorial of (N - 1) would be N factorial.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class Test1
{
    public static int factorial(int n)
    {

        // YOUR CODE HERE

    }

    public static void main(String[] args)
    {
        int num1 = 5;
        System.out.println("factorial(" + num1 + ") --&gt; " + factorial(num1));

        int num2 = 12;
        System.out.println("factorial(" + num2 + ") --&gt; " + factorial(num2));
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Test1");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "factorial(5) --&gt; 120\nfactorial(12) --&gt; 479001600";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        int num = 10;
        int expected = 3628800;
        int actual = Test1.factorial(num);

        boolean passed = getResults("" + expected, "" + actual, "Testing factorial(" + num + ")");
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCodeWithoutComments();
        int count = countOccurences(code, "while") + countOccurences(code, "for");
        boolean passed = count == 0;
        getResults(
                "0 loops",
                count + " loop(s)",
                "Making sure method is recursive, not iterative",
                passed);
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
  </exercises>
</section>

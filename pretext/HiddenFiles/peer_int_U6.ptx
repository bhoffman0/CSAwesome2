<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section>
  <title>Peer Instruction: Arrays Multiple Choice Questions</title>
  <exercises>
    <exercise label="bs-arrays-21-8">
        <statement>

        <p>16-6-1:  What does this code do?</p>
        <blockquote>
            <program language="java"><input>
public void lab7Quiz3(Sound mySound)
{
    Sound[] source = this.getSamples();
    Sound[] result = mySound.getSamples();
    for (int i = source.length/2; i &lt; source.length; i++)
    {
        int value = source[i].getValue();
        result[i].setValue(value);
    }
}
</input></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Erases half of the sound</p>
                </statement>
                <feedback>
                    <p>Incorrect. This code modifies one half of the sound, but does not erase it.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Changes the result sound based on the this sound</p>
                </statement>
                <feedback>
                    <p>Incorrect. The result sound is modified in a way involving the this sound, however this is not based on the contents of the this sound.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Replaces the parameter sound with the calling object sound</p>
                </statement>
                <feedback>
                    <p>Incorrect. The parameter sound itself is not modified, even though a copy of it (result) is.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Puts the last half of the calling object sound into the parameter sound</p>
                </statement>
                <feedback>
                    <p>Incorrect. The parameter sound itself is not modified, even though a copy of it (result) is.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Replaces the last half of the parameter sound with the last half of the calling object sound</p>
                </statement>
                <feedback>
                    <p>Correct. Based on the for loop, the second half of the parameter sound is replaced by the second half of the this sound.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="bs-arrays-21-9">
        <statement>

        <p>16-6-2:  What is printed by this code when it is called on the object {60, 80, 60, 65, 100, 90, 0, 0, 0, 0}?</p>
        <blockquote>
            <program language="java"><input>
public void guess()
{
    SoundSample[] noiseArray = this.getSamples();
    int a, b = 0;
    for (int i=0;i&lt;noiseArray.length; i++)
    {
        SoundSample sample = noiseArray[i];
        int foo = sample.getValue();
        if (foo &gt; a)
        {
            a = foo;
            b = i;
        }
    }
    System.out.println(a + ","+b);
}
</input></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>0,9</p>
                </statement>
                <feedback>
                    <p>Incorrect. Examine what the variables a and b hold. a holds a value found in the array, and b holds an index.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>60,0</p>
                </statement>
                <feedback>
                    <p>Incorrect. Examine what the variables a and b hold. a holds a value found in the array, and b holds an index.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>90,5</p>
                </statement>
                <feedback>
                    <p>Incorrect. Examine what the variables a and b hold. a holds a value found in the array, and b holds an index.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>100,4</p>
                </statement>
                <feedback>
                    <p>Correct. The a value holds the greatest value found in the array. The b value holds the index of the greatest value.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>None of the above</p>
                </statement>
                <feedback>
                    <p>Incorrect. Examine what the variables a and b hold. a holds a value found in the array, and b holds an index.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="bs-arrays-21-10">
        <statement>

        <p>16-6-3:  What is printed by this code when it is called on the object {60, 80, 60, 65, 100, 90, 0, 0, 0, 0}?</p>
        <blockquote>
            <program language="java"><input>
public void guess()
{
    SoundSample[] noiseArray = this.getSamples();
    int a = 32767;
    Int b = 0;
    for (int i=0;i&lt;noiseArray.length; i++)
    {
        SoundSample sample = noiseArray[i];
        int foo = sample.getValue();
        if (foo &lt; a)
        {
            a = foo;
            b = i;
        }
    }
}
</input></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>0,9</p>
                </statement>
                <feedback>
                    <p>Incorrect. Examine when the value of b is changed. When is the condition "foo &lt; a" satisfied?</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>0,6</p>
                </statement>
                <feedback>
                    <p>Correct. a holds the smallest value found in the array, and b holds an index. b is only changed when "foo &lt; a" is satified, which last occurs at index 6.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>90,5</p>
                </statement>
                <feedback>
                    <p>Incorrect. Examine when a and b are changed. At one point these values are correct, but finish running the for loop.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>32767,0</p>
                </statement>
                <feedback>
                    <p>Incorrect. Examine what the variables a and b hold. a holds a value found in the array, and b holds an index.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>None of the above</p>
                </statement>
                <feedback>
                    <p>Incorrect. Examine what the variables a and b hold. a holds a value found in the array, and b holds an index.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="bs-arrays-22-6">
        <statement>

        <p>16-6-4:  What does this code do for the object {60, 80, 60, 65, 90, 0, 0, 0, 0}?</p>
        <blockquote>
            <program language="java"><input>
int a,b = 0;

for (int i=0;i&lt;noiseArray.length; i++)
{
    SoundSample sample = noiseArray[i];
    int foo = sample.getValue();
    if (foo &gt; a)
    {
        a = foo;
        b = i;
    }
}
</input></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Sets the end of the array to 0s</p>
                </statement>
                <feedback>
                    <p>Incorrect. The values of the original array are not reassigned in this code block.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Finds the first value</p>
                </statement>
                <feedback>
                    <p>Incorrect. This code loops through the entire array, and the values can be changed to correspond to any value, not just the first one.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Finds the minimum (and its location)</p>
                </statement>
                <feedback>
                    <p>Incorrect. a is only changed when "foo &gt; a" is satified, which means that the current value is greater than the previous value.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Finds the maximum (and its location)</p>
                </statement>
                <feedback>
                    <p>Correct. The value of a is the maximum value in the array. The value of b is the index where the maximum value is located.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Finds the last value</p>
                </statement>
                <feedback>
                    <p>Incorrect. This code loops through the entire array, and the values can be changed to correspond to any value, not just the last one.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="bs-arrays-22-8">
        <statement>

        <p>16-6-5:  How does the sound sample change if funky() is called on [40, 60, 30, 30]?</p>
        <blockquote>
            <program language="java"><input>
public void funky()
{
    SoundSample[] noiseArray = this.getSamples();
    int zzz = 0;
    for (int i=0;i&lt;noiseArray.length; i++)
    {
        SoundSample sample = noiseArray[i];
        int foo = sample.getValue();
        zzz += foo;
    }
    int yyy = zzz / noiseArray.length;
    for (int i = 0; i &lt; noiseArray.length; i++)
    {
        SoundSample sample = noiseArray[i];
        sample.setValue(yyy);
    }
}
</input></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>[160, 160, 160, 160]</p>
                </statement>
                <feedback>
                    <p>Incorrect. The value of yyy is the sum of all values divided by the size of the array (remember integer math). Is the original array ever changed using this value?</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>[40, 40, 40, 40]</p>
                </statement>
                <feedback>
                    <p>Incorrect. The value of yyy is the sum of all values divided by the size of the array (remember integer math). Is the original array ever changed using this value?</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[53, 53, 53, 53]</p>
                </statement>
                <feedback>
                    <p>Incorrect. The value of yyy is the sum of all values divided by the size of the array (remember integer math). Is the original array ever changed using this value?</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[80, 100, 70, 70]</p>
                </statement>
                <feedback>
                    <p>Incorrect. The value of yyy is the sum of all values divided by the size of the array (remember integer math). Is the original array ever changed using this value?</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>None of the above</p>
                </statement>
                <feedback>
                    <p>Correct. Even though the value of sample is continuously reassigned to the value 40, the values in the original array itself are never actually modified. Thus, the end array is exactly the same as the original.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="bs-arrays-22-11">
        <statement>

        <p>16-6-6:  What if all positive values (including zero) were (set to) the maximum value (32,767) and all negative values were set to the minimum value (-32,768)? Which line would complete the code block to accomplish this?</p>
        <blockquote>
            <program language="java"><input>
SoundSample[] foo = this.getSamples();
for (int i = 0; i &lt; foo.length; i++)
{
    &lt;&lt;Pick a Line to Insert here&gt;&gt;
        foo[i].setValue(32767);
    else
        foo[i].setValue(-32768);
}
</input></program>
        </blockquote>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>if (foo[i].getValue() &gt;= 0)</p>
                </statement>
                <feedback>
                    <p>Correct. The term "foo[i].getValue()" retrieves the value at index i. This code successfully sets all value sero and greater to the maximum, and all others to the minimum.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>if (i &gt;= 0)</p>
                </statement>
                <feedback>
                    <p>Incorrect. i is the index of a space in the array, but not a value found in the array itself. We need to know the value at i for this code to run properly.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>if (foo[i].getValue() &lt; 0)</p>
                </statement>
                <feedback>
                    <p>Incorrect. This would set every negative value to the positive maximum and vis versa, which is the opposite of our goal.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>if (i &lt; 0)</p>
                </statement>
                <feedback>
                    <p>Incorrect. i is the index of a space in the array, but not a value found in the array itself. We need to know the value at i for this code to run properly.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>None of the above</p>
                </statement>
                <feedback>
                    <p>Incorrect. One of the options above can successfully complete this code.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="bs-arrays-23-5">
        <statement>

        <p>16-6-7:  What is the resulting soundSample if the original soundSample is [40, 50, 60, 70, 100, 130, 150, 100, 110, 90] and foo is equal to 5?</p>
        <blockquote>
            <program language="java"><input>
public Sound funky2(int foo)
{
    Sound s = new Sound(this.getFileName());
    int value = 0;
    for (int i = foo; i &lt; this.getLength(); i++)
    {
        value = (int) s.getSampleValueAt(i) * .1;
        this.setSampleValueAt(i-foo, value + this.getSampleValueAt(i-foo));
    }
}
</input></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>[143, 165, 110, 121, 99, 0, 0, 0, 0, 0]</p>
                </statement>
                <feedback>
                    <p>Incorrect. While the first values of the array are assigned new values, the second part is not altered.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[143, 165, 110, 121, 98, 130, 150, 100, 110, 90]</p>
                </statement>
                <feedback>
                    <p>Incorrect. Look at how the new values of the array are calculated. When i is 5, the "value" variable is 13. This 13 is added to the number at a different index of the array.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[53, 65, 70, 81, 109, 0, 0, 0, 0, 0]</p>
                </statement>
                <feedback>
                    <p>Incorrect. While the first values of the array are assigned new values, the second part is not altered.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>[53, 65, 70, 81, 109, 130, 150, 100, 110, 90]</p>
                </statement>
                <feedback>
                    <p>Correct. The pattern is that, starting at zero, the value at the current index is increased by one-tenth of the value of the current index + 5, until the end of the arry is reached.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Array index out of bounds error</p>
                </statement>
                <feedback>
                    <p>Incorrect. This block of code only calls to valid indexes within the soundSample.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="bs-arrays-23-13">
        <statement>

        <p>16-6-8:  What code would you replace &lt;&lt;X&gt;&gt; with is order to create a new sound of correct length 1/2 ?</p>
        <blockquote>
            <program language="java"><input>
public void raiseP()
{
    Sound highP = &lt;&lt;X&gt;&gt;
    SoundSample[] original = this.getSamples();
    SoundSample[] higher = highP.getSamples();

    &lt;&lt;SOME LOOP HERE TO COPY ORIGINAL INTO HIGHER&gt;&gt;
}
</input></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>this;</p>
                </statement>
                <feedback>
                    <p>Incorrect. This will create a copy of the "this" sound, when we are trying to create a sound of half the length.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>new Sound(this);</p>
                </statement>
                <feedback>
                    <p>Incorrect. The value of this.getLength()/2 is an integer, but we need a valid Sound to assign highP to.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>this.getLength()/2;</p>
                </statement>
                <feedback>
                    <p>Incorrect. While the first values of the array are assigned new values, the second part is not altered.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>new Sound(this.getLength()/2);</p>
                </statement>
                <feedback>
                    <p>Correct. We need to use the keyword new to create a new object, and then insert the proper size parameter into the Sound constructor.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>None of the above</p>
                </statement>
                <feedback>
                    <p>Incorrect. There is a proper answer above.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="bs-arrays-23-14">
        <statement>

        <p>16-6-9:  What lines should be inserted into the for loop in order to fill in our new higher array, which is 1/2 the length of the “this” array?</p>
        <blockquote>
            <program language="java"><input>
public void raiseP()
{
    Sound higher = &lt;&lt;X&gt;&gt;
    SoundSample[] original = this.getSamples();
    SoundSample[] higher = highP.getSamples();

    int newPlace = 0;
    for (int origI = 0; origI &lt; original.length; origI+=2){
        //insert lines here
    }
}
</input></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>higher[newPlace].setValue( original[origI].getValue()); newPlace = origI;</p>
                </statement>
                <feedback>
                    <p>Incorrect. This will cause an out-of-bounds error once origI surpasses the size of higher.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>higher[newPlace].setValue( original[origI].getValue()); newPlace++;</p>
                </statement>
                <feedback>
                    <p>Correct. We set new values into the higher array, not the original array. We use newPlace to track the current index of our new, smaller array, which only increases by one for every time origI increases by 2.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>original[origI].getValue( higher[newPlace].setValue()); newPlace = origI;</p>
                </statement>
                <feedback>
                    <p>Incorrect. This will cause an out-of-bounds error once origI surpasses the size of higher.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>original[origI].getValue( higher[newPlace].setValue()); newPlace++;</p>
                </statement>
                <feedback>
                    <p>Incorrect. While this answer will increment our index values correctly, no new values are actually assigned to our higher array.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>None of the above</p>
                </statement>
                <feedback>
                    <p>Incorrect. There is a proper answer above.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="bs-arrays-24-9">
        <statement>

        <p>16-6-10:  What header/value combo should we use in ored to modify an existing sound?</p>
        <blockquote>
            <program language="java"><input>
public Sound funky2(int foo)
{
    Sound s = new Sound(this.getFileName());
    int value = 0;
    for (int i = foo; i &lt; this.getLength(); i++)
    {
        value = (int) s.getSampleValueAt(i) * .1;
        this.setSampleValueAt(i-foo, value + this.getSampleValueAt(i-foo));
    }
}
</input></program>
        </blockquote>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>[A] public void raisePitch(), [B] this.getSamples();</p>
                </statement>
                <feedback>
                    <p>Correct. If we want to modify an existing object, we do not need to return an object, so void is appropriate. This sound will also be passed in as an object, and not a parameter.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[A] public void raisePitch(Sound noise), [B] noise.getSamples();</p>
                </statement>
                <feedback>
                    <p>Incorrect. Since this function is a method of an object class, we do not need to pass in the sound as a parameter.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[A] public Sound raisePitch(), [B] this.getSamples();</p>
                </statement>
                <feedback>
                    <p>Incorrect. If we want to modify an existing object, we do not need to return an object, so we could use void instead of Sound in the method declaration.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[A] public Sound raisePitch(Sound noise), [B] noise.getSamples();</p>
                </statement>
                <feedback>
                    <p>Incorrect. Since this function is a method of an object class, we do not need to pass in the sound as a parameter.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>None of the above</p>
                </statement>
                <feedback>
                    <p>Incorrect. One of the above options does successfully satisfy this question.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="bs-arrays-24-10">
        <statement>

        <p>16-6-11:  What is the result of running this code if noiseArr is [10, 15, 20, 25, 30, 35, 40, 45, 50, 55]?</p>
        <blockquote>
            <program language="java"><input>
int newPlace = 0;
for(int i = 0; i &lt; noiseAr.length; i+=2)
{
    noiseAr[newPlace] = noiseAr[i];
}
</input></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>[10, 15, 20, 25, 30, 35, 40, 45, 50, 55]</p>
                </statement>
                <feedback>
                    <p>Incorrect. This sound is modified in some way within the for loop.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>[50, 15, 20, 25, 30, 35, 40, 45, 50, 55]</p>
                </statement>
                <feedback>
                    <p>Correct. Only noiseArr[0] is changed since newPlace isn't modified. The last time the loop runs the value of i is 8, so noiseArr[0] is changed to 50.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[10, 20, 30, 40, 50, 0, 0, 0, 0, 0]</p>
                </statement>
                <feedback>
                    <p>Incorrect. While the first value of the array is assigned new values, track to see if the value of newPlace is changing as the for loop progresses.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[10, 20, 30, 40, 50, 35, 40, 45, 50, 55]</p>
                </statement>
                <feedback>
                    <p>Incorrect. While the first value of the array is assigned new values, track to see if the value of newPlace is changing as the for loop progresses.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>None of the above</p>
                </statement>
                <feedback>
                    <p>Incorrect. One of the above options does successfully satisfy this question.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
  </exercises>
</section>

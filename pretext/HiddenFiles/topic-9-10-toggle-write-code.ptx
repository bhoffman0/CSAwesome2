<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section>
  <title>Unit 9 Write Code for Toggle Code</title>
  <p>This is the write code problems associated with the mixed up code problems.</p>
  <exercises>
    <exercise label="u9_muc_wc2">
    <statement>
        <p>Fix the class header so that the <c>Dog</c> class inherits from the <c>Animal</c> class.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
class Animal
{
    /* implementation not shown */
}

public class Dog  // TODO: fix this line
{
    /* implementation not shown */
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Dog");
    }

    @Test
    public void inherits() throws IOException
    {
        boolean res = checkCodeContains("class Dog extends Animal");
        assertTrue(res);
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="u9_muc_wc3">
    <statement>
        <p>Overload the <c>talk</c> method in the <c>Person</c> class so it can take in a String <c>name</c> and print <c>"Hello {name}!"</c> (e.g., calling <c>p.talk("Sarah")</c> on a <c>Person</c> <c>p</c> would print <c>"Hello Sarah!"</c>).</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
class GenericPerson
{
    public void talk()
    {
        System.out.println("Hello!");
    }
}

public class Person extends GenericPerson
{

    // TODO: overload talk()

    // ignore the rest of this class

    public static void main(String[] args)
    {
        GenericPerson gp = new GenericPerson();
        gp.talk();
        Person p = new Person();
        p.talk("jim");
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Person");
    }

    @Test
    public void testMain() throws IOException
    {
        String expected = "Hello!\nHello jim!";
        String output = getMethodOutput("main");
        boolean passed = getResults(expected, output, "Checking main output");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="u9_muc_wc5">
    <statement>
        <p>There is a <c>Car</c> class whose with a private int instance variable <c>numWheels</c> set to <c>4</c> and a private int instance variable <c>numSeats</c> whose value is set in the constructor. The <c>Sedan</c> class inherits from <c>Car</c>. Fill in the <c>Sedan</c> constructor so that <c>numSeats</c> is already initialized as <c>5</c>.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
class Car
{
    // this class is complete

    private int numWheels;
    private int numSeats;

    public Car(int numSeats)
    {
        this.numWheels = 4;
        this.numSeats = numSeats;
    }

    public int getNumSeats()
    {
        return this.numSeats;
    }
}

public class Sedan extends Car
{

    public Sedan()
    {
        // TODO: Fill in this method
    }

    // ignore the rest of this class
    public static void main(String[] args)
    {
        Car c = new Car(4);
        System.out.println("c has " + c.getNumSeats() + " seats");
        Sedan s = new Sedan();
        System.out.println("s has " + s.getNumSeats() + " seats");
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Sedan");
    }

    @Test
    public void testMain() throws IOException
    {
        String expected = "c has 4 seats\ns has 5 seats";
        String output = getMethodOutput("main");
        boolean passed = getResults(expected, output, "Checking main output");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="u9_muc_wc6">
    <statement>
        <p>There is a <c>Person</c> class with private String instance variables <c>firstName</c> and <c>lastName</c> and a constructor that takes them in that order. There is also a <c>Customer</c> class that should inherit from <c>Person</c>, adding an <c>id</c> String instance variable. The only missing component is a <c>Customer</c> constructor that should take <c>firstName</c>, <c>lastName</c>, and <c>id</c> in that order.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
class Person
{
    // this class is complete

    private String firstName;
    private String lastName;

    public Person(String firstName, String lastName)
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public String getFirstName()
    {
        return this.firstName;
    }

    public String getLastName()
    {
        return this.lastName;
    }
}

public class Customer extends Person
{
    private String id;

    // TODO: Create a constructor that takes
    // firstName, lastName, and id in that order

    // YOUR CODE HERE

    // Ignore the rest of the class

    public String getId()
    {
        return this.id;
    }

    public static void main(String[] args)
    {
        Customer c = new Customer("Jane", "Doe", "abc");
        System.out.println(
                c.getFirstName() + "\t" + c.getLastName() + "\t" + c.getId());
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Customer");
    }

    @Test
    public void checkConstructorHeader() throws IOException
    {
        String[] arr = new String[] {"String firstName", "String lastName", "String id"};
        String expected = "pass";
        String output = checkConstructor(arr);
        boolean res = getResults(expected, output, "Checking constructor types");
        assertTrue(res);
    }

    @Test
    public void testMain() throws IOException
    {
        String expected = "Jane\tDoe\tabc\n";
        String output = getMethodOutput("main");
        boolean res = getResults(expected, output, "Checking main output");
        assertTrue(res);
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="u9_muc_wc7">
    <statement>
        <p>There is a <c>House</c> class with private int instance variables <c>numWindows</c> and <c>numDoors</c> and a constructor that takes those in that order. Create a <c>MobileHouse</c> class that inherits from <c>House</c> while adding a <c>numWheels</c> instance variable (and thus has a constructor that takes <c>numWindows</c>, <c>numDoors</c>, and <c>numWheels</c> in that order) and a <c>getNumWheels()</c> method. your solution.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class House
{
    private int numWindows;
    private int numDoors;

    public House(int numWindows, int numDoors)
    {
        this.numWindows = numWindows;
        this.numDoors = numDoors;
    }

    // ignore the rest of this class
    public static void main(String[] args)
    {
        MobileHouse m = new MobileHouse(3, 4, 5);
        System.out.println("Windows: " + m.getNumWindows());
        System.out.println("Doors: " + m.getNumDoors());
        System.out.println("Wheels: " + m.getNumWheels());
    }

    public int getNumWindows()
    {
        return numWindows;
    }

    public int getNumDoors()
    {
        return numDoors;
    }
}

        // TODO: Create MobileHouse class
            // It should NOT be public
            // 1: Create class header
            // 2: Create numWheels variable
            // 3: Create constructor
            // 4: Create getNumWheels() method

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("House");
    }

    @Test
    public void checkConstructorHeader() throws IOException
    {
        Object[] arr = new Integer[] {1, 2, 3};
        String expected = "fail";
        String output = checkConstructor(arr);
        boolean res = getResults(expected, output, "Checking no new constructor for House");
        assertTrue(res);
    }

    @Test
    public void testMain() throws IOException
    {
        String expected = "Windows: 3\nDoors: 4\nWheels: 5";
        String output = getMethodOutput("main");
        boolean res = getResults(expected, output, "Testing main method");
        assertTrue(res);
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="u9_muc_wc8">
    <statement>
        <p>There is a <c>Entity</c> class with private int instance variable <c>healthPoints</c> and a constructor that takes that as an argument. Finish the <c>Hero</c> class so that it initializes with a <c>healthPoints</c> of <c>100</c> and so that its <c>fight()</c> method prints <c>"Attacked the enemy!"</c>.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
class Entity
{
    // this class is complete

    private int healthPoints;

    public Entity(int HP)
    {
        this.healthPoints = HP;
    }

    public void fight()
    {
        System.out.println("Attacked the hero!");
    }

    public int getHP()
    {
        return this.healthPoints;
    }
}

public class Hero extends Entity
{

    // TODO: Create a constructor

    // TODO: Override the fight() method

    // ignore the main method
    public static void main(String[] args)
    {
        Entity e = new Entity(105);
        System.out.println("e HP: " + e.getHP());
        e.fight();

        Hero h = new Hero();
        System.out.println("Hero HP: " + h.getHP());
        h.fight();
    }
} // end Hero

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Hero");
    }

    @Test
    public void testMain() throws IOException
    {
        // as opposed to testFight, this method checks that
        // Entity's fight() method has not been changed
        String expected = "e HP: 105\nAttacked the hero!\nHero HP: 100\nAttacked the enemy!";
        String output = getMethodOutput("main");
        boolean res = getResults(expected, output, "Testing main method");
        assertTrue(res);
    }

    @Test
    public void testFight() throws IOException
    {
        // this is useful in case the student hardcoded
        // a print statement to get past testMain()
        String expected = "Attacked the enemy!";
        String output = getMethodOutput("fight");
        boolean res = getResults(expected, output, "Testing hero's fight() method");
        assertTrue(res);
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="u9_muc_wc9">
    <statement>
        <p>There is a <c>Furniture</c> class with a String instance variable <c>material</c> and an int instance variable <c>cost</c>. The <c>Furniture</c> class also includes an <c>equals()</c> method that should return <c>true</c> if two <c>Furniture</c> objects have the same <c>material</c> and <c>cost</c>. Fill in this <c>equals()</c> method.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
public class Furniture
{
    private String material;
    private int cost;

    public Furniture(String material, int cost)
    {
        this.material = material;
        this.cost = cost;
    }

    public String getMaterial()
    {
        return this.material;
    }

    public int getCost()
    {
        return this.cost;
    }

    public boolean equals(Furniture other)
    {
        // TODO: Fill this in
    }

    // ignore the main method
    public static void main(String[] args)
    {
        Furniture f = new Furniture("wood", 50);
        Furniture f2 = new Furniture("ivory", 100);
        Furniture f3 = new Furniture("wood", 50);
        System.out.println("f equals f2? " + f.equals(f2));
        System.out.println("f equals f3? " + f.equals(f3));
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Furniture");
    }

    @Test
    public void testMain() throws IOException
    {
        String expected = "f equals f2? false\nf equals f3? true";
        String output = getMethodOutput("main");
        boolean res = getResults(expected, output, "Testing main method");
        assertTrue(res);
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="u9_muc_wc10">
    <statement>
        <p>There is a <c>Car</c> class with a method called <c>drive()</c> that prints <c>"vroom"</c>. There is a subclass of <c>Car</c> called <c>Racecar</c>. The <c>Racecar</c> class should override <c>drive()</c> with a new <c>drive()</c> method that prints <c>"vroom"</c> twice by calling <c>Car</c>’s <c>drive()</c> method twice.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
class Car
{
    public void drive()
    {
        System.out.println("vroom");
    }
}

public class Racecar extends Car
{
    public void drive()
    {
        // YOUR CODE HERE
    }

    // ignore the main method
    public static void main(String[] args)
    {
        Racecar r = new Racecar();
        r.drive();
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Racecar");
    }

    @Test
    public void testHardcode() throws IOException
    {
        String target = "super.drive";
        boolean res = checkCodeContains(target);
        assertTrue(res);
    }

    @Test
    public void testMain() throws IOException
    {
        String expected = "vroom\nvroom";
        String output = getMethodOutput("main");
        boolean passed = getResults(expected, output, "Checking main output");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="u9_muc_wc11">
    <statement>
        <p>There is a <c>Computer</c> class with private String instance variables <c>name</c> and <c>company</c>. You should override the Object <c>equals</c> method to evaluate whether both <c>Computers</c> have the same <c>name</c> and <c>company</c>, in which case they are “equal”. There is also a <c>Laptop</c> class that inherits from <c>Computer</c> while adding a String <c>keyboardType</c> instance variable. The <c>Laptop</c> class should override the <c>equals</c> method from <c>Computer</c>, instead evaluating whether the <c>name</c>, <c>company</c>, and <c>keyboardType</c> are the same (remember that <c>name</c> and <c>company</c> are not readable to <c>Laptop</c> so some polymorphism might be needed). Fill in the code so that both <c>equals()</c> methods work.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
class Computer
{
    private String name;
    private String company;

    public Computer(String name, String company)
    {
        this.name = name;
        this.company = company;
    }

    public boolean equals(Computer other)
    {
        // YOUR CODE HERE
    }
}

public class Laptop extends Computer
{

    private String keyboardType;

    public Laptop(String name, String company, String keyboardType)
    {
        super(name, company);
        this.keyboardType = keyboardType;
    }

    public boolean equals(Laptop other)
    {
        // YOUR CODE HERE
    }

    // Ignore the rest of this class

    public static void main(String[] args)
    {
        Computer c = new Computer("HB", "XPX");
        Computer c2 = new Computer("Pear", "Lapbook Pro");
        Laptop l = new Laptop("HB", "XPX", "Mechanical");
        Laptop l2 = new Laptop("HB", "XPX", "Membrane");
        System.out.println(c.equals(c2)); // false
        System.out.println(c.equals(l)); // true
        System.out.println(c.equals(l2)); // true
        System.out.println(c2.equals(l)); // false
        System.out.println(l.equals(l2)); // false
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Laptop");
    }

    @Test
    public void testMain() throws IOException
    {
        String expected = "false\ntrue\ntrue\nfalse\nfalse";
        String output = getMethodOutput("main");
        boolean passed = getResults(expected, output, "Checking main output");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
    <exercise label="u9_muc_wc12">
    <statement>
        <p>There is a <c>Food</c> class with a private <c>numCalories</c> integer instance variable. <c>Food</c> has a <c>chomp()</c> method that returns nothing and prints <c>"{numCalories} calories consumed"</c> (e.g., <c>"5 calories consumed"</c>). There should also be a <c>Fruit</c> subclass that inherits from <c>Food</c> and adds the private <c>color</c> String instance variable. The <c>Fruit</c> class should override the <c>Food</c> <c>chomp()</c> method to return nothing, print <c>"{numCalories} calories consumed"</c>, and print <c>"the fruit is {color}"</c> (on a new line). Finally, there should be an <c>Apple</c> subclass that inherits from <c>Fruit</c>, sets <c>color</c> to <c>"red"</c>, and adds a <c>variety</c> String private instance variable. The <c>Apple</c> class should have an overriden <c>chomp()</c> method that returns nothing, prints <c>"{numCalories} calories consumed"</c>, prints <c>"the fruit is {color}"</c>, and prints <c>"ate {variety} apple"</c> (all separated by new lines). Remember that the <c>numCalories</c> and <c>color</c> variables are private, so the <c>Apple</c> class does NOT have access to their values.</p>

    </statement>
    <program interactive="activecode" language="java">
        <input>
class Food
{

    private int numCalories;

    public Food(int numCalories)
    {
        this.numCalories = numCalories;
    }

    public void chomp()
    {
        System.out.println(numCalories + " calories consumed");
    }
}

class Fruit extends Food
{
    private String color;

    public Fruit(int numCalories, String color)
    {
        super(numCalories);
        this.color = color;
    }

    public void chomp()
    {
        // YOUR CODE HERE //
        System.out.println("the fruit is " + color);
    }
}

public class Apple extends Fruit
{
    private String variety;

    public Apple(int numCalories, String color, String variety)
    {
        super(numCalories, color);
        this.variety = variety;
    }

    public void chomp()
    {
        // YOUR CODE HERE
        System.out.println("ate " + variety + " apple");
    }

    // ignore the main method
    public static void main(String[] args)
    {
        Apple a = new Apple(5, "red", "delicious");
        a.chomp();
    }
}

</input><tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Apple");
    }

    @Test
    public void testMain() throws IOException
    {
        String expected = "5 calories consumed\nthe fruit is red\nate delicious apple";
        String output = getMethodOutput("main");
        boolean passed = getResults(expected, output, "Checking main output");
        assertTrue(passed);
    }

    @Test
    public void testCustomInstance() throws IOException
    {
        setDefaultValues(new Object[] {6, "green", "Granny Smith"});
        String expected = "6 calories consumed\nthe fruit is green\nate Granny Smith apple";
        String output = getMethodOutput("chomp");
        boolean passed = getResults(expected, output, "Checking chomp() output");
        assertTrue(passed);
    }
}
        </tests>
    </program>
</exercise>
  </exercises>
</section>

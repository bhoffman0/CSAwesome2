<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="peer_int_pic_U6">
  <title>Peer Instruction: Unit 6 Multiple Choice Questions (with pictures)</title>
  <exercises>
    <exercise label="bs-array-06-09">
        <statement>

        <p> What is the type of each indicated variable?</p>
        <image source="https://i.postimg.cc/VNFVKKsM/lecture06-Q09.png" width="71%%"/>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>1 - Pixel, 2 - Pixel[ ]</p>
                </statement>
                <feedback>
                    <p>Incorrect! The larger highlighted section (1) represents the array Pixel[ ], which is composed of the smaller highlighted section (2), Pixel objects.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>1 - Pixel[ ], 2 - Pixel</p>
                </statement>
                <feedback>
                    <p>Correct! The larger highlighted section (1) represents the array Pixel[ ], which is composed of the smaller highlighted section (2), Pixel objects.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>1 - Pixel[ ], 2 - Color</p>
                </statement>
                <feedback>
                    <p>Incorrect! The larger highlighted section (1) represents the array Pixel[ ], which is composed of the smaller highlighted section (2), Pixel objects, not Color objects.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>1 - Pixel, 2 - Color</p>
                </statement>
                <feedback>
                    <p>Incorrect! The larger highlighted section (1) represents the array Pixel[ ] which is composed of the smaller highlighted section (2), Pixel objects. Pixel[ ] cannot be composed of Color objects and a Pixel object is not an array so it cannot contain other objects.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="bs-array-07-07">
        <statement>

        <p> What pixels does this code modify (assuming Pixel objects in pixelArray follow this pattern: [(0,0), (0,1), (0,2)â€¦])?</p>
        <program language="java"><code>
Pixel[] pixelArray = this.getPixels();
int value = 0;
int index = 0;
while (index &lt; pixelArray.length/4)
{
  value = pixelArray[index].getRed();
  value = (int) (value * 0.5);
  pixelArray[index].setRed(value);
}
</code></program>
        <image source="https://i.postimg.cc/KcDCVXTH/lecture07-Q07.png" width="36%%"/>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>A</p>
                </statement>
                <feedback>
                    <p>Incorrect! The while loop continues to iterate as long as the index value is less than the length of the Pixel array divided by 4. For this reason, 1/4 of the pixels are modified as a result of this code. The first 1/4 of the pixels will be changed.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>B</p>
                </statement>
                <feedback>
                    <p>Incorrect! The while loop continues to iterate as long as the index value is less than the length of the Pixel array divided by 4. For this reason, 1/4 of the pixels are modified as a result of this code. The first 1/4 of the pixels will be changed.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>C</p>
                </statement>
                <feedback>
                    <p>Incorrect! The while loop continues to iterate as long as the index value is less than the length of the Pixel array divided by 4. For this reason, 1/4 of the pixels are modified as a result of this code. The first 1/4 of the pixels will be changed.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>D</p>
                </statement>
                <feedback>
                    <p>Correct! The while loop continues to iterate as long as the index value is less than the length of the Pixel array divided by 4. For this reason, 1/4 of the pixels are modified as a result of this code. The first 1/4 of the pixels will be changed.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>None of the above</p>
                </statement>
                <feedback>
                    <p>Incorrect! One of the answers above correctly represents what pixels this code modifies. The while loop continues to iterate as long as the index value is less than the length of the Pixel array divided by 4. For this reason, 1/4 of the pixels are modified as a result of this code. The first 1/4 of the pixels will be changed.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="bs-array-09-05">
        <statement>

        <p> What picture most accurately describes what this code does ?</p>
        <program language="java"><code>
Pixel[] pixelArray = this.getPixels();
int value = 0;
Pixel p  = null;
for(int index = 0; index &lt; pixelArray.length-1; index++)
{
    p = pixelArray[index];
    q = pixelArray[index+1];
    p.setRed(q.getRed());
    p.setBlue(q.getRed());
    p.setGreen(q.getGreen());
}
</code></program>
        <image source="https://i.postimg.cc/SRhMBw8D/lecture09-Q05.png" width="71%%"/>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>A</p>
                </statement>
                <feedback>
                    <p>Incorrect! Each time the for loop executes, p is assigned the pixel value at the current index and q is assigned the pixel value at the next index. p's red value is replaced with q's red value and q's blue value. Then p's green value is replaced with q's green value. Each time the code runs, p is changed and q stays the same.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>B</p>
                </statement>
                <feedback>
                    <p>Incorrect! Each time the for loop executes, p is assigned the pixel value at the current index and q is assigned the pixel value at the next index. p's red value is replaced with q's red value and q's blue value. Then p's green value is replaced with q's green value. Each time the code runs, p is changed and q stays the same.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>C</p>
                </statement>
                <feedback>
                    <p>Correct! Each time the for loop executes, p is assigned the pixel value at the current index and q is assigned the pixel value at the next index. p's red value is replaced with q's red value and q's blue value. Then p's green value is replaced with q's green value. Each time the code runs, p is changed and q stays the same.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>None of the above.</p>
                </statement>
                <feedback>
                    <p>Incorrect! One of the choices above accurately represents what this code does. Each time the for loop executes, p is assigned the pixel value at the current index and q is assigned the pixel value at the next index. p's red value is replaced with q's red value and q's blue value. Then p's green value is replaced with q's green value. Each time the code runs, p is changed and q stays the same.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="bs-array-09-06">
        <statement>

        <p> What picture most accurately describes what this code does ?</p>
        <program language="java"><code>
Pixel[] pixelArray = this.getPixels();
int value = 0;
Pixel p  = null;
for(int index = 0; index &lt; pixelArray.length-1; index++)
{
  p = pixelArray[index+1];
  q = pixelArray[index];
  p.setRed(q.getRed());
  p.setBlue(q.getRed());
  p.setGreen(q.getGreen());
}
</code></program>
        <image source="https://i.postimg.cc/SRhMBw8D/lecture09-Q05.png" width="71%%"/>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>A</p>
                </statement>
                <feedback>
                    <p>Incorrect! Each time the for loop executes, p is assigned the pixel value at the next index and q is assigned the pixel value at the current index. p's red value is replaced with q's red value and q's blue value. Then p's green value is replaced with q's green value. Each time the code runs, p is changed and q stays the same.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>B</p>
                </statement>
                <feedback>
                    <p>Correct! Each time the for loop executes, p is assigned the pixel value at the next index and q is assigned the pixel value at the current index. p's red value is replaced with q's red value and q's blue value. Then p's green value is replaced with q's green value. Each time the code runs, p is changed and q stays the same.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>C</p>
                </statement>
                <feedback>
                    <p>Incorrect! Each time the for loop executes, p is assigned the pixel value at the next index and q is assigned the pixel value at the current index. p's red value is replaced with q's red value and q's blue value. Then p's green value is replaced with q's green value. Each time the code runs, p is changed and q stays the same.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>None of the above.</p>
                </statement>
                <feedback>
                    <p>Incorrect! One of the choices above accurately represents what this code does. Each time the for loop executes, p is assigned the pixel value at the next index and q is assigned the pixel value at the current index. p's red value is replaced with q's red value and q's blue value. Then p's green value is replaced with q's green value. Each time the code runs, p is changed and q stays the same.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="bs-soundarray-20-05">
        <statement>

        <p> How would we fill in this SampleSound[]?</p>
        <image source="https://i.postimg.cc/gcVpRjS3/lecture20-Q05.png" width="89%%"/>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>A</p>
                </statement>
                <feedback>
                    <p>Incorrect! Since the sample rate is 3 Hz, there are 3 samples per second. Though there are 3 samples in this example, they do not convey a broad range of sample points.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>B</p>
                </statement>
                <feedback>
                    <p>Correct! Since the sample rate is 3 Hz, there are 3 samples per second. There are 3 samples in this example and they convey a broad range of sample points.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>C</p>
                </statement>
                <feedback>
                    <p>Incorrect! Since the sample rate is 3 Hz, there should be 3 samples per second, not 6.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>D</p>
                </statement>
                <feedback>
                    <p>Incorrect! Since the sample rate is 3 Hz, there should be 3 samples per second, not 6.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="bs-soundarray-20-09">
        <statement>

        <p> Which code which makes the following changes?</p>
        <program language="java"><code>
String fileName = FileChooser.pickAFile();
Sound noise = new Sound(fileName);
SoundSample[] noiseArray = noise.getSamples();
&lt;&lt;&lt;  PICK SOME CODE  &gt;&gt;&gt;
</code></program>
        <image source="https://i.postimg.cc/qM1r7YqK/lecture20-Q09.png" width="71%%"/>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>A</p>
                </statement>
                <feedback>
                    <p>Incorrect! This code adjusts the entire array rather than the second half.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>B</p>
                </statement>
                <feedback>
                    <p>Correct! This code adjusts the second half of the array.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>C</p>
                </statement>
                <feedback>
                    <p>Incorrect! This code adjusts the entire array rather than the second half.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="bs-soundarray-20-14">
        <statement>

        <p> What does this code do?</p>
        <program language="java"><code>
String fileName = FileChooser.pickAFile();
Sound noise = new Sound(fileName);
SoundSample[] noiseArray = noise.getSamples();
for (int i = noiseArray.length/2; i &lt; noiseArray.length)
{
  SoundSample sample = noiseArray[i];
  int foo = sample.getValue();
  sample.setValue(foo/2);
}
</code></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Makes a lower pitched sound during first half of play</p>
                </statement>
                <feedback>
                    <p>Incorrect! This code adjusts the second half of the sound array, not the first half.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Makes a quieter sound during first half of play</p>
                </statement>
                <feedback>
                    <p>Incorrect! This code adjusts the second half of the sound array, not the first half.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Makes a lower pitched sound during second half of play</p>
                </statement>
                <feedback>
                    <p>Correct! This code adjusts the second half of the array, specifically halving the pitch.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Makes a quieter sound during second half of play</p>
                </statement>
                <feedback>
                    <p>Incorrect! Although this code adjusts the second half of the array, it does not impact the loudness/quietness of the sound. Rather, it impacts the pitch.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>For each SoundSample element if the array it gets the Value and stores that in an int and then sets the Value with something that is half that</p>
                </statement>
                <feedback>
                    <p>Incorrect! This code only adjusts the second half of the array, not the whole array.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
  </exercises>
</section>

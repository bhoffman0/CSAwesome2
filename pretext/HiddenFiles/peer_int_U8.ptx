<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section xml:id="peer_int_U8">
        <title>Peer Instruction: 2D Arrays Multiple Choice Questions</title>

    <exercise label="bs-2d-arrays-7-6">
        <statement>

        <p>  What does this code do?</p>
        <blockquote>
            <program language="java"><code>
Pixel[] pixelArray = this.getPixels();
int value = 0;
Pixel p = null;
int index = 0;
while (index &lt; pixelArray.length)
{
    value = pixelArray[index].getRed();
    value = (int) (value * 0.5);
    pixelArray[index].setRed(value);
}
</code></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Removes all red from the picture</p>
                </statement>
                <feedback>
                    <p>Incorrect. While this code does modify the red value of each pixel, it does not completely remove it</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Changes half of the red pixels to not be red</p>
                </statement>
                <feedback>
                    <p>Incorrect. Based on the while loop, this code modifies every pixel, not just half</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Reduces the red component of half of the pixels</p>
                </statement>
                <feedback>
                    <p>Incorrect. Based on the while loop, this code modifies every pixel, not just half</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Reduces the red component of each pixel to half of its original value</p>
                </statement>
                <feedback>
                    <p>Correct. This code takes the original red value of a pixel, halves it, and then sets the red value of this pixel to our new value</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Sets the red component of each pixel to 0.5</p>
                </statement>
                <feedback>
                    <p>Incorrect. The value of each color must be an int, which 0.5 is not</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="bs-2d-arrays-8-6">
        <statement>

        <p>  For debugging, where is the best place to put a print statement?</p>
        <blockquote>
            <program language="java"><code>
Pixel[] pixelArray = this.getPixels();
int value = 0;
Pixel p  = null;
int index = 0;
//Location A
while (index &lt; pixelArray.length) //Location B
{
    //Location C
    value = pixelArray[index].getRed();
    value = (int) (value * 0.5);
    pixelArray[index].setRed(value);
    index = index + 1;
    //Location D
}
</code></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Location A</p>
                </statement>
                <feedback>
                    <p>Incorrect. This statement will only print once, and most of the code has yet to be called</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Location B</p>
                </statement>
                <feedback>
                    <p>Incorrect. This would result in the print statement being run in a loop, instead of the contents inside the curly braces</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Location C</p>
                </statement>
                <feedback>
                    <p>Incorrect. This way, the statement will print new information each time the code is run</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Location D</p>
                </statement>
                <feedback>
                    <p>Correct. Location D allows you to assess and print the all varibales used in this code block. This gives you the most data, and makes it the optiomal location.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="bs-2d-arrays-8-7">
        <statement>

        <p>  This code should swap the red and blue components at each pixel, what does it actually do?</p>
        <blockquote>
            <program language="java"><code>
Pixel[] pixelArray = this.getPixels();
int value = 0;
int index = 0;
while (index &lt; pixelArray.length)
{
    Pixel pix = pixelArray[index];
    value = pix.getRed();
    value = pix.getBlue();
    pix.setRed(value);
    pixelArray[index].setBlue(value);
    index++;
}
</code></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>It has a compiler error</p>
                </statement>
                <feedback>
                    <p>Incorrect. This code can successfully compile.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>It sets the red value to be the same as blue</p>
                </statement>
                <feedback>
                    <p>Correct. The variable value is set to pix.getBlue() when both .setRed() and .setBlue() are called.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>It sets the blue value to be the same as red</p>
                </statement>
                <feedback>
                    <p>Incorrect. The variable value is set to pix.getBlue() when pix.setRed(value) is called.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>It really does swap</p>
                </statement>
                <feedback>
                    <p>Incorrect. Look closer at the variable value. Do you see where it is reassigned?</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="bs-2d-arrays-8-9">
        <statement>

        <p>  Which code chunk should be inserted into the marked location to swap the red and blue components at each pixel?</p>
        <blockquote>
            <program language="java"><code>
Pixel[] pixelArray = this.getPixels();
int value = 0;
int index = 0;
while (index &lt; pixelArray.length)
{
    Pixel pix = pixelArray[index];
    **CODE GOES HERE**
    index++;
}
</code></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>value = pix.getRed();
pix.setBlue(pix.getRed());
pix.setRed(value);</p>
                </statement>
                <feedback>
                    <p>Incorrect. The value of the blue component is successfully changed, however the value of component is not.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>value = pix.getRed();
pix.setBlue(value);
pix.setRed(pix.getBlue());</p>
                </statement>
                <feedback>
                    <p>Incorrect. The value of the blue component is successfully changed, however the value of component is not.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>value = pix.getRed();
pix.setRed(pix.getBlue());
pix.setBlue(value);</p>
                </statement>
                <feedback>
                    <p>Correct. In this case, "value" is the temporary variable we use to remember the original value of pix.getRed(), even after the red component is changed.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>value = pix.getRed();
pix.setRed(value);
pix.setBlue(pix.getRed());</p>
                </statement>
                <feedback>
                    <p>Incorrect. If value is set to pix.getRed(), the call to pix.setRed(value) will leave the red component unchanged.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="bs-2d-arrays-9-7">
        <statement>

        <p>  Why does this code have an error?</p>
        <blockquote>
            <program language="java"><code>
Pixel[] pixelArray = this.getPixels();
Pixel p, q;
for(int index = 0; index &lt; pixelArray.length; index++)
{
    p = pixelArray[index];
    q = pixelArray[index+1];
    p.setRed(q.getRed());
    p.setBlue(q.getRed());
    p.setGreen(q.getGreen());
}
</code></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>It tries to access pixelArray[-1]</p>
                </statement>
                <feedback>
                    <p>Incorrect. Even though this would throw an error, pixelArray[-1] is never called.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>It tries to access pixelArray[0]</p>
                </statement>
                <feedback>
                    <p>Incorrect. This code does try to access pixelArray[0], but due to zero-based indexing, this is not an error.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>It tries to access pixelArray[pixelArray.length]</p>
                </statement>
                <feedback>
                    <p>Correct. In the final iteration of the for loop, the value of "index" is pixelArray.length - 1. So, when "q" is assigned to pixelArray[index + 1], the code tries to access pixelArray[pixelArray.length], which does not exist.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>It tries to access pixelArray[pixelArray.length + 1]</p>
                </statement>
                <feedback>
                    <p>Incorrect. Due to the parameters in the for loop, the largest value index can take on is pixelArray.length - 1, and thus pixelArray[index+1] is never called.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>None of the above</p>
                </statement>
                <feedback>
                    <p>Incorrect. Consider the range of values index can have, and then examine the line where q is assigned.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="bs-2d-arrays-10-7">
        <statement>

        <p>  Why does this code have an error?</p>
        <blockquote>
            <program language="java"><code>
//A method in Picture.java
Pixel p;
for (int bar = 0; bar &lt; getWidth(); bar++)
{
    for (int foo = 0; foo &lt; getHeight(); foo++)
    {
        p = getPixel(foo, bar);
        p.setColor(Color.BLACK);
    }
}
</code></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>It doesn’t, this loops across rows, going down</p>
                </statement>
                <feedback>
                    <p>Incorrect. For each instance of the first for loop, every pixel of a given column is set to black.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>It doesn’t this loops down columns, going right</p>
                </statement>
                <feedback>
                    <p>Correct. For each instance of the first for loop, every pixel of a given column is set to black, moving downwards.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>It tries to index a pixel off the end of a row (foo value too big)</p>
                </statement>
                <feedback>
                    <p>Incorrect. The largest value of foo called is getHeight() - 1, which is an accessible value.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>It tries to index a pixel off the end of a column (bar value too big)</p>
                </statement>
                <feedback>
                    <p>Incorrect. The largest value of bar called is getWidth() - 1, which is an accessible value.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="bs-2d-arrays-11-9">
        <statement>

        <p>  Which of the following is the best answer?</p>
        <blockquote>
            <program language="java"><code>
//Code to mirror around the vertical axis
int mirrorPt = getWidth()/2;
Pixel leftP, rightP;
for (int y = 0; y &lt; getHeight); y++)
{
    for (int x = 0; x &lt; mirrorPt; x++)
    {
        leftP = getPixel(x,y);
        rightP = getPixel(getWidth()-1-x,y);
        rightP.setColor(leftP.getColor());
    }
}
</code></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>y increases faster than x</p>
                </statement>
                <feedback>
                    <p>Incorrect. For each increase of the y value by 1, the x value can increase by more than one.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>x increases faster than y</p>
                </statement>
                <feedback>
                    <p>Inorrect. Although this stament alone is true, consider the pattern it follows due to the for loops.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>x and y increase together, in step</p>
                </statement>
                <feedback>
                    <p>Incorrect. Consider the nesting. For each increase of the y value by 1, the x value can increase by more than one.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>x increases for a while, then y increases once, then x restarts and increases again</p>
                </statement>
                <feedback>
                    <p>Correct. The first loop increases the value of y by 1. Then the x value increases to the "mirrorPT" value. Then the x value is reset and the first loop runs again.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>y increases for a while, then x increases once, then y restarts and increases again</p>
                </statement>
                <feedback>
                    <p>Incorrect. Consider the nesting. For each increase of the y value by 1, the x value is reset.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="bs-2d-arrays-11-15">
        <statement>

        <p>  What does this code do?</p>
        <blockquote>
            <program language="java"><code>
int magic = getWidth()/2;
Pixel foo, bar;
for(int y = 0; y &lt; getHeight(); y++)
{
    int countingDown = getWidth()-1;
    for(int x = 0; x &lt; magic; x++)
    {
        foo = getPixel(x,y);
        bar = getPixel(countingDown,y);
        bar.setColor(foo.getColor());
        countingDown--;
    }
}
</code></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Copies top half into bottom half not mirrored</p>
                </statement>
                <feedback>
                    <p>Incorrect. Since the x parameter increases as countingDown increases (also used as an x paramter), there transformation involves mirroring.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Copies left half into right half not mirrored</p>
                </statement>
                <feedback>
                    <p>Incorrect. Since the x parameter increases as countingDown increases (also used as an x paramter), there transformation involves mirroring.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Mirrors around vertical axis, left into right</p>
                </statement>
                <feedback>
                    <p>Correct. There is mirroring occurring, and this happens within the second for loop. The values are changing around one given x value, so the transformation is around a vertical axis.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Mirrors around horizontal axis, top into bottom</p>
                </statement>
                <feedback>
                    <p>Incorrect. There is mirroring occurring, and this happens within the second for loop. If the values are changing around one given x value, which axis are they transforming around?</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Some other bizarre transformation</p>
                </statement>
                <feedback>
                    <p>Incorrect. Examine the options again. Hint: There is mirroring occurring in the second for loop.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="bs-2d-arrays-12-6">
        <statement>

        <p>  This code makes a red box of size (width, height)</p>
        <blockquote>
            <program language="java"><code>
Pixel foo;
for(int y = 40; y &lt; 50; y++)
{
    for(int x = 1 ; x &lt; 5; x++)
    {
        foo = getPixel(x,y);
        foo.setColor(Color.RED);
    }
}
</code></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>10, 4</p>
                </statement>
                <feedback>
                    <p>Incorrect. You have the values correct, but consider which dimensions the x and y correspond to.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>9, 5</p>
                </statement>
                <feedback>
                    <p>Incorrect. Consider how many times the first for loop runs. How many values are included in the span of 40 to &lt;50 ?</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>4, 10</p>
                </statement>
                <feedback>
                    <p>Correct. The first for loop spans the range of 40-49 (10 values), which correspond to the height. The second for loop spans the range of 1-4 (4 values), and corresponds to the height.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>5, 9</p>
                </statement>
                <feedback>
                    <p>Incorrect. Consider how many times the first for loop runs. How many values are included in the span of 40 to &lt;50 ?</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="bs-2d-arrays-12-7">
        <statement>

        <p>  This code makes a red box of size (width, height)</p>
        <blockquote>
            <program language="java"><code>
Pixel foo;
for(int y = 40; y &lt;= 50; y++)
{
    for(int x = 1 ; x &lt;= 5; x++)
    {
        foo = getPixel(x,y);
        foo.setColor(Color.RED);
    }
}
</code></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>11, 5</p>
                </statement>
                <feedback>
                    <p>Incorrect. You have the values correct, but consider which dimensions the x and y correspond to.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>10, 5</p>
                </statement>
                <feedback>
                    <p>Incorrect. Consider how many times the first for loop runs. How many values are included in the span of 40 to 50 inclusive?</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>5, 11</p>
                </statement>
                <feedback>
                    <p>Correct. The first for loop spans the range of 40-50 (11 values), which correspond to the height. The second for loop spans the range of 1-5 (5 values), and corresponds to the height.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>5, 10</p>
                </statement>
                <feedback>
                    <p>Incorrect. Consider how many times the first for loop runs. How many values are included in the span of 40 to 50 inclusive?</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="bs-2d-arrays-12-8">
        <statement>

        <p> What are the correct loop headers to make a black box of width x and height y?</p>
        <blockquote>
            <program language="java"><code>
public void foo(int x, int y)
{
    Pixel foo;
    **LOOP HEADER 1**
    {
        **LOOP HEADER 2**
        {
            foo = getPixel(w,h);
            foo.setColor(Color.BLACK);
        }
    }
}
</code></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>for (int w = 0; w &lt;= x; w++)   for (int h = 0; h &lt;= y; h++)</p>
                </statement>
                <feedback>
                    <p>Incorrect. The range from 0 to x inclusive has has a total size of x+1. In addition, the call to getPixel(w,h) could be out of range. Think about our use of zero-based indexing.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>for (int w = 10; w &lt; x +10; w++)   for (int h = 20; h &lt; y + 20; h++)</p>
                </statement>
                <feedback>
                    <p>Incorrect. Even though the range from 10 to x+10 does have a size of x, the call to getPixel(w,h) could fall out of range if x + 10 is greater than the width of the drawing area.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>for (int w = 0; w &lt; x; w++)    for (int h = 0; h &lt; y; h++)</p>
                </statement>
                <feedback>
                    <p>Correct. The range of 0 to &lt;x has a total size of x. By starting the w and h variables at 0, we can ensure that we will not go out of bounds by calling getPixel(w,h) as long as x and y are valid values.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>for (int w = 10; w &lt;= x+10; w++) for (int h = 20; h &lt;= y+20; h++)</p>
                </statement>
                <feedback>
                    <p>Incorrect. The range from 10 to x inclusive has has a total size of x+1. In addition, the call to getPixel(w,h) could be out of range. Think about our use of zero-based indexing.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="bs-2d-arrays-14-5">
        <statement>

        <p>  How many times is the variable pix assigned a value?</p>
        <blockquote>
            <program language="java"><code>
public void everyColumn(Color newColor)
{
    Pixel pix;
    for (int aaa = 0; aaa &lt; this.getHeight(); aaa++)
    {
        for (int bbb = 0; bbb &lt; this.getWidth(); bbb++)
        {
            pix = this.getPixel(bbb,aaa);
            pix.setColor(newColor);
        }
    }
}
</code></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>1</p>
                </statement>
                <feedback>
                    <p>Incorrect. The value of pix is reassigned every time the innermost body of the for loops is run.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>this.getWidth() times</p>
                </statement>
                <feedback>
                    <p>Incorrect. The value of pix is reassigned every time the innermost body of the for loops is run. Everytime the inner loop runs, it does run this.getWidth() times, however this occurs more than once.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>this.getHeight() times</p>
                </statement>
                <feedback>
                    <p>Incorrect. The value of pix is reassigned every time the innermost body of the for loops is run. The outer loop does run this.getHeight() times, however this answer disregards the inner for loop.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>getHeight() * getWidth() times</p>
                </statement>
                <feedback>
                    <p>Correct. The outer loop executes this.getHeight() times, and each execution of this loop results in the inner for loop running this.getWidth() times.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>getHeight()/2 * getWidth() times</p>
                </statement>
                <feedback>
                    <p>Incorrect. The value of pix is reassigned every time the innermost body of the for loops is run. Examine how many respective times the inner loop runs, and how this is affecting by the running of the outer for loop.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="bs-2d-arrays-14-8">
        <statement>

        <p>  How many iterations of the loop body are executed?</p>
        <blockquote>
            <program language="java"><code>
public void everyOtherColumn(Color newColor)
{
    Pixel pix;
    for (int aaa = 0; aaa &lt; this.getHeight(); aaa++)
    {
        for (int bbb = 0; bbb &lt; this.getWidth(); bbb = bbb + 2)
        {
            pix = this.getPixel(bbb,aaa);
            pix.setColor(newColor);
        }
    }
}
</code></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>getHeight()-1 * getWidth()-1</p>
                </statement>
                <feedback>
                    <p>Incorrect. Due to zero-based indexing, the statement "aaa &lt; this.getHeight()" will execute this.getHeight() times. Ex. For an image of width 4, aaa will take on the values 0 1 2 and 3, for a total of 4 values.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>getHeight()-1 * (getWidth()-1)/2</p>
                </statement>
                <feedback>
                    <p>Incorrect. Due to zero-based indexing, the statement "aaa &lt; this.getHeight()" will execute this.getHeight() times. Ex. For an image of width 4, aaa will take on the values 0 1 2 and 3, for a total of 4 values.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>getHeight() * getWidth()</p>
                </statement>
                <feedback>
                    <p>Incorrect. Examine how the first loop is incremented with "aaa++", but the second loop is incremented with "bbb = bbb + 2";</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>getHeight() * getWidth()/2</p>
                </statement>
                <feedback>
                    <p>Correct. Due to zero-based indexing, the statement "aaa &lt; this.getHeight()" will execute this.getHeight() times. The number of potential iterations is cut in half due to the second for loop using "bbb = bbb + 2" to increment.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>None of the above</p>
                </statement>
                <feedback>
                    <p>Incorrect. Examine both the less than conditions and the way the for loops are incremented.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="bs-2d-arrays-14-9">
        <statement>

        <p>  Adding which if statement at the marked line would result in the inner body of the for loop running the same way it would if the inner for loop was “for (int bbb = 0; bbb &lt; this.getWidth(); bbb = bbb + 2)”?</p>
        <blockquote>
            <program language="java"><code>
public void everyOtherColumn(Color newColor)
{
    Pixel pix;
    for (int aaa = 0; aaa &lt; this.getHeight(); aaa++)
    {
        //inner for loop
        for (int bbb = 0; bbb &lt; this.getWidth(); bbb++)
        {
            **Add If Statement Here**
            {
                pix = this.getPixel(bbb,aaa);
                pix.setColor(newColor);
            }
        }
    }
}
</code></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>if(bbb &lt; this.getWidth()/2)</p>
                </statement>
                <feedback>
                    <p>Incorrect. Even though this would result in the inner body running in one half of cases, changing the for loop would result in the body running for every-other value of bbb, while this change results in a solid half of the pixels changing with no alternating pattern.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>if(bbb &lt; this.getHeight()/2)</p>
                </statement>
                <feedback>
                    <p>Incorrect. Even though this would result in the inner body running in one half of cases, changing the for loop would result in the body running for every-other value of bbb, while this change results in a solid half of the pixels changing with no alternating pattern.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>if((bbb %2) == 0)</p>
                </statement>
                <feedback>
                    <p>Correct. Using a modulus in the if statement causes the inner body to run at every-other value of bbb, which is the same as incrementing bbb by 2 each time and using no if statement.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>if((this.getPixel(bbb,aaa)%2) == 0)</p>
                </statement>
                <feedback>
                    <p>Incorrect. The suggested change to the for loop runs based on the value of bbb, not the content of the pixel, as is suggested by answer d.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="bs-2d-arrays-15-6">
        <statement>

        <p>  What is this code doing?</p>
        <blockquote>
            <program language="java"><code>
//Inside loop over all pixels
topP = this.getPixel(x,y);
botP = this.getPixel(x,y+1);

topAvg = topP.getAverage();
botAvg = botP.getAverage();

if (Math.abs(topAv – botAv) &lt; 10)
    topP.setColor(Color.WHITE);
else
    topP.setColor(Color.BLACK);
</code></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Comparing 2 pixels side by side and, if they are similar make the pixel white, otherwise black</p>
                </statement>
                <feedback>
                    <p>Incorrect. The pixels that this code compares are not side by side, as the y value is changed, not the x value.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Comparing 2 pixels one on top of the other and, if they are similar make the pixel white, otherwise black</p>
                </statement>
                <feedback>
                    <p>Correct. We look at the pixel directly below the pixel of interest. If they are similar, the if statement turns the pixel white. Else, it becomes black.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Comparing 2 pixels side by side and, if they are different make the pixel white, otherwise black</p>
                </statement>
                <feedback>
                    <p>Incorrect. The pixels that this code compares are not side by side, as the y value is changed, not the x value.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Comparing 2 pixels one on top of the other and, if they are different make the pixel white, otherwise black</p>
                </statement>
                <feedback>
                    <p>Incorrect. Even though we are comparing two pixels, one on top of the other, the if statement does not turn similar pixels black.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="bs-2d-arrays-15-10">
        <statement>

        <p>  Which is most true about ONE execution of this code (for a specific diffValue)?</p>
        <blockquote>
            <program language="java"><code>
int diffValue = Math.abs(topAv – botAv);

if (diffValue &lt; 10)
    topP.setColor(Color.WHITE); //Section A
else
    topP.setColor(Color.BLACK); //Section B
</code></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Section A AND Section B may BOTH be executed</p>
                </statement>
                <feedback>
                    <p>Incorrect. Only one section can be executed, as once one if/else statement is satisfied, all others will be ignored for that execution.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>If Section B is executed then Section A is not executed</p>
                </statement>
                <feedback>
                    <p>Correct. If the if statement is satisfied, section A will be executed and section B will be ignored. If the if statement is not satisfied, section A will be ignored, and the else statement will cause section B to automatically execute.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Neither Section is ever executed</p>
                </statement>
                <feedback>
                    <p>Incorrect. If an if statement is followed by an else statement, it is guaranteed that one section will always be executed.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>It is possible neither section will be executed (but sometimes one might be).</p>
                </statement>
                <feedback>
                    <p>Incorrect. If an if statement is followed by an else statement, it is guaranteed that one section will always be executed.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="bs-2d-arrays-15-11">
        <statement>

        <p>  Which is most true about ONE execution of this code (for a specific diffValue)?</p>
        <blockquote>
            <program language="java"><code>
int diffValue = Math.abs(topAv – botAv);

if (diffValue &lt; 10)
    topP.setColor(Color.WHITE); //Section A
else if (diffValue &lt; 50)
    topP.setColor(Color.GREY); //Section B
else
    topP.setColor(Color.BLACK); //Section C
</code></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Section A can be executed AND Section B may BOTH be executed but then C can’t be executed</p>
                </statement>
                <feedback>
                    <p>Incorrect. Only one section can be executed, as once one if/else statement is satisfied, all others will be ignored for that execution.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>If Section A is executed then neither Section B nor C can be</p>
                </statement>
                <feedback>
                    <p>Correct. If the first if statement is satisfied, section A will be executed and section B and C will be ignored. If the first if statement is not satisfied, section A will be ignored, and the process will be repeated for the second if statement. If neither are satisfied, section C will execute.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>All sections can be executed for a single diffValue</p>
                </statement>
                <feedback>
                    <p>Incorrect. Only one section can be executed, as once one if/else statement is satisfied, all others will be ignored for that execution.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>It’s possible no section is executed for a given diffValue</p>
                </statement>
                <feedback>
                    <p>Incorrect. If an if statement is followed by an else statement, it is guaranteed that one section will always be executed.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="bs-2d-arrays-15-12">
        <statement>

        <p>  Which best describes the conditions under which we change pixel color?</p>
        <blockquote>
            <program language="java"><code>
public void makeConvict()
{
for (int x = 0; x &lt; this.getWidth(); x++)
{
    for (int y = 0; y &lt; this.getHeight(); y++)
    {
        Pixel currentPix = this.getPixel(x,y);

        if ( (currentPix.getGreen() &gt; 200) &amp;&amp; (y%2==0))
        {
            currentPix.setColor(Color.BLACK);
        }
        else if( (currentPix.getGreen() &gt; 200) &amp;&amp; y%2 == 1)
        {
        currentPix.setColor(Color.WHITE);
        }
    }
}
</code></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Based on the coordinates of the Pixel</p>
                </statement>
                <feedback>
                    <p>Incorrect. While the y value is considered, it is not the only quality considered in the if statements.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Based on the color of the Pixel</p>
                </statement>
                <feedback>
                    <p>Incorrect. While the color is considered, it is not the only quality considered in the if statements.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Based on the coordinates for some Pixels, the color for other Pixels</p>
                </statement>
                <feedback>
                    <p>Incorrect. All pixels are considered via the same criteria, regardles of coordinates.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Based on a compound condition of color and coordinates of the Pixel</p>
                </statement>
                <feedback>
                    <p>Correct. Both the amount of green in a pixel and its y coordinate are considered when it is being determined if the pixel color should be changed.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="bs-2d-arrays-16-6">
        <statement>

        <p> How would you call and display a flipped picture of Picture p?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Picture changed = new Picture(p);  p.mystery(changed);   changed.show();</p>
                </statement>
                <feedback>
                    <p>Incorrect. Calling the mystery function on the object "p" will not alter the "changed" object, and thus changed.show() will display a picture identical to "p".</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Picture changed = new Picture();   p.mystery(changed);   changed.show();</p>
                </statement>
                <feedback>
                    <p>Incorrect. Calling the mystery function on the object "p" will not alter the "changed" object, and thus changed.show() will display a default picture.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Picture changed = new Picture(p);  changed.mystery(p);   changed.show();</p>
                </statement>
                <feedback>
                    <p>Incorrect. The "changed" object does not need to be initialized as a copy of "p", and can be initialized with the default constructor.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Picture changed = new Picture();   changed.mystery(p);   changed.show();</p>
                </statement>
                <feedback>
                    <p>Correct. The "changed" object can be initialized with the default constructor, as the next line calls the mystery function with the parameter "p". This is the simplest correct way to successfully accomplish this.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>None of the above</p>
                </statement>
                <feedback>
                    <p>Incorrect. One of the above answers is correct.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="bs-2d-arrays-16-7">
        <statement>

        <p>  How many times is the marked line below executed?</p>
        <blockquote>
            <program language="java"><code>
public void makeConvict()
{
    for (int x = 0; x &lt; this.getWidth(); x++)
    {
        for (int y = 0; y &lt; this.getHeight(); y++)
        {
            Pixel currentPix = this.getPixel(x,y);
            if ( (currentPix.getGreen() &gt; 200) &amp;&amp; (y%2==0)) // THIS LINE
            {
                currentPix.setColor(Color.BLACK);
            }
            else if( (currentPix.getGreen() &gt; 200) &amp;&amp; y%2 == 1)
            {
                currentPix.setColor(Color.WHITE);
            }
        }
    }
}
</code></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>width * height / 2</p>
                </statement>
                <feedback>
                    <p>Incorrect. This line is executed as many times as the code innermost to both for loops is called. Consider only the for loop conditions.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>width * height</p>
                </statement>
                <feedback>
                    <p>Correct. The if statement is executed evey time it is called, which in this case is equal to the number of times the code within both for loops is called.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>width * height * 2</p>
                </statement>
                <feedback>
                    <p>Incorrect. This line is executed as many times as the code innermost to both for loops is called. Consider only the for loop conditions.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>width * height * 1.5</p>
                </statement>
                <feedback>
                    <p>Incorrect. This line is executed as many times as the code innermost to both for loops is called. Consider only the for loop conditions.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Depends on the color of the Pixels in the picture</p>
                </statement>
                <feedback>
                    <p>Incorrect. This line is executed as many times as the code innermost to both for loops is called, which is not dependent on pixel color.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="bs-2d-arrays-16-8">
        <statement>

        <p>  How many times is the marked line below executed?</p>
        <blockquote>
            <program language="java"><code>
public void makeConvict()
{
    for (int x = 0; x &lt; this.getWidth(); x++)
    {
        for (int y = 0; y &lt; this.getHeight(); y++)
        {
            Pixel currentPix = this.getPixel(x,y);
            if ( (currentPix.getGreen() &gt; 200) &amp;&amp; (y%2==0))
            {
                currentPix.setColor(Color.BLACK);
            }
            else if( (currentPix.getGreen() &gt; 200) &amp;&amp; y%2 == 1) // THIS LINE
            {
                currentPix.setColor(Color.WHITE);
            }
        }
    }
}
</code></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>width * height / 2</p>
                </statement>
                <feedback>
                    <p>Incorrect. This line is executed everytime the first if statement is not satified, consider what the first conditional examines.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>width * height</p>
                </statement>
                <feedback>
                    <p>Incorrect. This line is executed everytime the first if statement is not satified, consider what the first conditional examines.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>width * height * 2</p>
                </statement>
                <feedback>
                    <p>Incorrect. This line is executed everytime the first if statement is not satified, consider what the first conditional examines.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>width * height * 1.5</p>
                </statement>
                <feedback>
                    <p>Incorrect. This line is executed everytime the first if statement is not satified, consider what the first conditional examines.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Depends on the color of the Pixels in the picture</p>
                </statement>
                <feedback>
                    <p>Correct. This line is executed everytime the first if statement is not satified, which is dependent upon the amount of green in each pixel of the picture.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="bs-2d-arrays-16-9">
        <statement>

        <p> Which of these statements is true?</p>
        <program language="java"><code>
public void makeConvict()
{
    for (int x = 0; x &lt; this.getWidth(); x++)
    {
        for (int y = 0; y &lt; this.getHeight(); y++)
        {
            Pixel currentPix = this.getPixel(x,y);
            if ( (currentPix.getGreen() &gt; 200) &amp;&amp; (y%2==0))
            {
                currentPix.setColor(Color.BLACK);
            }
            else if( (currentPix.getGreen() &gt; 200) &amp;&amp; y%2 == 1) // LINE A
            {
                currentPix.setColor(Color.WHITE); //LINE B
            }
        }
    }
}
</code></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Line A is executed the same number of times as Line B</p>
                </statement>
                <feedback>
                    <p>Incorrect. While this is true if the if statement in Line A is always satified, consider that this may not always be the case.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Line A is executed more times than Line B</p>
                </statement>
                <feedback>
                    <p>Incorrect. While this is true if the if statement in Line A is not always satified, consider that this may not always be the case.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Line A is executed fewer times than Line B</p>
                </statement>
                <feedback>
                    <p>Incorrect. Line B can only be executed after Line A, and is only executed 0 or 1 time every time Line A is called. It cannot be executed more times than Line A.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>The relationship depends on the specific Picture that this code is run on</p>
                </statement>
                <feedback>
                    <p>Correct. Line B will be executed the same number of times or fewer times than Line A. If the if statement in Line A is always satisfied, Line B will be executed the same number of times as line A. Else, Line B will be executed fewer times.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="bs-2d-arrays-20-11">
        <statement>

        <p>  What does this code do?</p>
        <blockquote>
            <program language="java"><code>
Pixel[] pixelArray = this.getPixels();
int mystery;
for(int i = pixelArray.length/4; i &lt; 3*pixelArray.length/4; i++)
{
    mystery = (pixelArray[i].getBlue() + pixelArray[i].getGreen() + pixelArray[i].getRed() ) / 3;
    Color thing = new Color(mystery, mystery, mystery);
    pixelArray[i].setColor(thing);
}
</code></program>
        </blockquote>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>This code modifies the middle half (from the top and bottom) of the picture</p>
                </statement>
                <feedback>
                    <p>Incorrect. This code modifies a 1D array, and thus there is no top-to-bottom dimension.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>This code modifies the middle half (from the left and right) of the picture</p>
                </statement>
                <feedback>
                    <p>Correct. Based on the for loop, the code modifies from the 1/4 length mark to the 3/4 length mark, moving left to right.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>This code loops over the pixels in the Pixel array starting at length/4 and up to 2*length/4 and gets the red, blue and green values adds them up and divides by 3 and sets that pixel to the calculated value</p>
                </statement>
                <feedback>
                    <p>Incorrect. Even though this line does correctly describe how the pixel colors are modified, it does not correctly describe which pixels are modified.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    </section>

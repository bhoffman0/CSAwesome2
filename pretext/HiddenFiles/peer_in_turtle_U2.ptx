<?xml version="1.0"?>
<!-- Generated by Docutils 0.17.1 -->
<section>
  <title>Peer Instruction: Unit 2 Turtle Multiple Choice Questions</title>
  <exercises>
    <exercise label="bs-objectsandclasses-02-19">
        <statement>

        <p>16-6-1: What are the components of the second line of code?</p>
        <program language="java"><input>
Turtle turtle1 = new Turtle();
turtle1.turn(-45);
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Type, method/message name, parameter list</p>
                </statement>
                <feedback>
                    <p>Incorrect! Turtle is a "type" (similar to int or double types) but turtle1 is an object. An object is an instance of a class. In this case, turtle1 is an instance of the Turtle class.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Class, method/message name, parameter list</p>
                </statement>
                <feedback>
                    <p>Incorrect! Turtle is the specific class "type" that turtle1 is. turtle1 itself is an object. An object is an instance of a class. In this case, turtle1 is an instance of the Turtle class.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Object, method/message name, parameter list</p>
                </statement>
                <feedback>
                    <p>Correct! turtle1 is a Turtle object. An object is an instance of a class. In this case, turtle1 is an instance of the Turtle class.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="bs-methods-03-07">
        <statement>

        <p>16-6-2: Why is this code incorrect? Assume this method is a method of the Turtle class (There are multiple correct answers)</p>
        <program language="java"><input>
public bethsSquare(int size) {
    turtle1.turnLeft();
    turtle1.forward(100);
    turtle1.turnLeft();
    turtle1.forward(100);
    turtle1.turnLeft();
    turtle1.forward(100);
    turtle1.turnLeft();
    turtle1.forward(100);
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Nothing is incorrect</p>
                </statement>
                <feedback>
                    <p>Incorrect! There are multiple places where the code is incorrect.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Return type is wrong</p>
                </statement>
                <feedback>
                    <p>Correct! This is a method of the Turtle class. It should have a return type of void. It doesn’t produce a number – it causes an action to happen.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Parameter is used incorrectly</p>
                </statement>
                <feedback>
                    <p>Correct! The bethsSquare parameter "size" is not used in the method. Perhaps it could replace the "100" in the method calls (ex. turtle1.forward(size)).</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>turnLeft should be turnRight</p>
                </statement>
                <feedback>
                    <p>Incorrect! Although it is true that you could use turnRight instead of turnLeft, this is not necessarily an incorrect aspect of the code because turnLeft still produces the expected response.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Use of turtle1 is incorrect</p>
                </statement>
                <feedback>
                    <p>Correct! Because this is a method of the turtle class, it is callable by any turtle object. Whichever turtle calls it is the turtle that should be controlled (turned, moved forward). The object ``this`` can be used instead of ``turtle1`` to refer to the object performing the method.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="bs-methods-03-10">
        <statement>

        <p>16-6-3: What’s the right way to call the bethsSquare method to draw a square (void method that takes one parameter)?</p>
</statement><choices><choice><statement id="bs-methods-03-10_opt_a">        <pre>World w = new World();
Turtle t = new Turtle(10,10, w);
t = bethsSquare(50);</pre>
</statement><feedback id="bs-methods-03-10_opt_a">
        <p>Incorrect! bethsSquare is a void method, and it doesn’t return anything, so t should not equal bethsSquare(50).</p>
</feedback></choice><choice><statement id="bs-methods-03-10_opt_b">        <pre>World w = new World();
Turtle t = new Turtle(10,10, w);
t.bethsSquare();</pre>
</statement><feedback id="bs-methods-03-10_opt_b">
        <p>Incorrect! bethsSquare has a parameter which is not accounted for.</p>
</feedback></choice><choice><statement id="bs-methods-03-10_opt_c">        <pre>World w = new World();
Turtle t = new Turtle(10,10, w);
t.bethssquare();</pre>
</statement><feedback id="bs-methods-03-10_opt_c">
        <p>Incorrect! bethsSquare has a parameter which is not accounted for, and the method call is spelled with a lowercase ‘s’ instead of an uppercase ‘s.’</p>
</feedback></choice><choice><statement id="bs-methods-03-10_opt_d">        <pre>World w = new World();
Turtle t = new Turtle(10,10, w);
t = bethssquare(50);</pre>
</statement><feedback id="bs-methods-03-10_opt_d">
        <p>Incorrect! bethsSquare is a void method, and it doesn’t return anything, so t should not equal bethsSquare(50). Additionally, the method call is spelled with a lowercase ‘s’ instead of an uppercase ‘s.’</p>
</feedback></choice><choice correct="yes"><statement id="bs-methods-03-10_opt_e">        <p>None of the above</p>
</statement><feedback id="bs-methods-03-10_opt_e">
        <p>Correct! The correct “call” to the method to draw a square would be t.bethSquare(50), accounting for the fact that that the method is void, the correct spelling of the method, and the parameter.</p>
</feedback></choice></choices>

    </exercise>
    <exercise label="bs-methods-03-17">
        <statement>

        <p>16-6-4: What types are returned by these method calls?</p>
        <program language="java"><input>
// 1)
turtle1.turnLeft();
// 2)
turtle1.getName();
// 3)
FileChooser.pickAFile();
// 4)
new Picture();
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>main, main, Picture, String</p>
                </statement>
                <feedback>
                    <p>Incorrect! In the Turtle class, turnLeft returns void. getName returns a String. The pickAFile method returns the name of the file, a String. new Picture() calls the constructor to make a new Picture object, so it returns an object of type Picture.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>void, void, Picture, String</p>
                </statement>
                <feedback>
                    <p>Inorrect! In the Turtle class, getName returns a String. The pickAFile method returns the name of the file, a String. new Picture() calls the constructor to make a new Picture object, so it returns an object of type Picture.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Turtle, Turtle, Picture, String</p>
                </statement>
                <feedback>
                    <p>Incorrect! In the Turtle class, turnLeft returns void. getName returns a String. The pickAFile method returns the name of the file, a String. new Picture() calls the constructor to make a new Picture object, so it returns an object of type Picture.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>void, void, String, Picture</p>
                </statement>
                <feedback>
                    <p>getName returns a String rather than void.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>None of the above</p>
                </statement>
                <feedback>
                    <p>Correct! In the Turtle class, turnLeft returns void. getName returns a String. The pickAFile method returns the name of the file, a String. new Picture() calls the constructor to make a new Picture object, so it returns an object of type Picture.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
  </exercises>
</section>

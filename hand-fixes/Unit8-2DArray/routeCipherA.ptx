<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section xml:id="_free-response-route-cipher-a">
  <introduction>
    <title>Free Response - Route Cipher A</title>
    <p xml:id="_index-0-38">The following is a free response question from 2011.  It was question 4 on the exam.  You can see all the free response questions from past exams at <url href="https://apstudents.collegeboard.org/courses/ap-computer-science-a/free-response-questions-by-year" visual="https://apstudents.collegeboard.org/courses/ap-computer-science-a/free-response-questions-by-year">https://apstudents.collegeboard.org/courses/ap-computer-science-a/free-response-questions-by-year</url>.</p>
    <p><term>Question 4.</term>  In this question you will write two methods for a class <c>RouteCipher</c> that encrypts (puts into a coded form) a message by changing the order of the characters in the message. The route cipher fills a two-dimensional array with single-character substrings of the original message in row-major order, encrypting the message by retrieving the single-character substrings in column-major order.</p>
    <p>For example, the word &#x201C;Surprise&#x201D; can be encrypted using a 2-row, 4-column array as follows.</p>
    <figure align="center" xml:id="empty-66">
      <image source="Unit8-2DArray/Figures/routeCipherFig.png" width="NaN%"/>
    </figure>
    <p>An incomplete implementation of the <c>RouteCipher</c> class is shown below.</p>
    <program language="java">
      <input>
public class RouteCipher
{
  /** A two-dimensional array of single-character strings,
   instantiated in the constructor */
  private String[][] letterBlock;

  /** The number of rows of letterBlock, set by the constructor */
  private int numRows;

  /** The number of columns of letterBlock, set by the constructor */
  private int numCols;

  /** Places a string into letterBlock in row-major order.
  *   @param str the string to be processed
  *   Postcondition:
  *     if str.length() &lt; numRows * numCols, "A" in each unfilled cell
  *     if str.length() &gt; numRows * numCols, trailing characters are ignored
  */
  public void fillBlock(String str)
  { /* to be implemented in part (a) */ }

  /** Extracts encrypted string from letterBlock in column-major order.
  *   Precondition: letterBlock has been filled
  *   @return the encrypted string from letterBlock
  */
  private String encryptBlock()
  { /* implementation not shown */ }

  /** Encrypts a message.
  *   @param message the string to be encrypted
  *   @return the encrypted message;
  *           if message is the empty string, returns the empty string
  */
  public String encryptMessage(String message)
  { /* to be implemented in part (b) */ }

  // There may be instance variables, constructors, and methods that are not shown
}
</input>
    </program>
    <p><term>Part a.</term>
            Write the method <c>fillBlock</c> that fills the two-dimensional array <c>letterBlock</c> with one-character strings from the string passed as parameter <c>str</c>.</p>
    <p>The array must be filled in row-major order&#x2014;the first row is filled from left to right, then the second row is filled from left to right, and so on, until all rows are filled.</p>
    <p>If the length of the parameter <c>str</c> is smaller than the number of elements of the array, the string &#x201C;A&#x201D; is placed in each of the unfilled cells. If the length of <c>str</c> is larger than the number of elements in the array, the trailing characters are ignored.</p>
    <p>For example, if <c>letterBlock</c> has 3 rows and 5 columns and <c>str</c> is the string &#x201C;Meet at noon&#x201D;, the resulting contents of <c>letterBlock</c> would be as shown in the following table.</p>
    <figure align="center" xml:id="empty-67">
      <image source="Unit8-2DArray/Figures/routeCipherTable.png" width="NaN%"/>
    </figure>
    <p>If <c>letterBlock</c> has 3 rows and 5 columns and <c>str</c> is the string &#x201C;Meet at midnight&#x201D;, the resulting contents of <c>letterBlock</c> would be as shown in the following table.</p>
    <figure align="center" xml:id="empty-68">
      <image source="Unit8-2DArray/Figures/routeCipherTable2.png" width="NaN%"/>
    </figure>
    <p>The following expression may be used to obtain a single-character string at position <c>k</c> of the string <c>str</c>.</p>
    <program language="java">
      <input>
str.substring(k, k + 1)
</input>
    </program>
  </introduction>
  <subsection xml:id="_how-to-solve-this-7">
    <title>How to Solve This</title>
    <exercise label="routeciphera_short">
      <statement>
        <p>9-12-1: Explain in plain English what your code will have to do to answer this question.  Use the variable names given above.</p>
      </statement>
    </exercise>
    <p>This section contains a plain English explanation of one way to solve this problem as well as problems that test your understanding of how to write the code to do those things.
                Click on the buttons to reveal the questions.</p>
    <subsubsection>
      <p>You will need to access each element in the <c>letterBlock</c> array. What type of loop will you use?</p>
      <exercises line="110" runestone_options="{'showtitle': 'data-showtitle=&quot;Reveal Loop Type Problem&quot;', 'hidetitle': 'data-hidetitle=&quot;Hide Loop Type Problem&quot;', 'subchapter': 'routeCipherA', 'chapter': 'Unit8-2DArray', 'basecourse': 'csawesome', 'optional': '', 'optclass': '', 'divid': 'routeciphera_1.5', 'instructoronly': '', 'is_dynamic': 'True'}" source="/Users/peter/teaching/2023-24/csa/csawesome/_sources/Unit8-2DArray/routeCipherA.rst">
        <exercise label="routeciphera_1.5MC">
          <statement>
            <p>9-12-2: What type of loop should you use?</p>
          </statement>
          <choices>
            <choice>
              <statement>
                <p>for each</p>
              </statement>
              <feedback>
                <p>We need to utilize elements by indexing them so a for each loop will not work</p>
              </feedback>
            </choice>
            <choice>
              <statement>
                <p>if</p>
              </statement>
              <feedback>
                <p>This is not a type of loop</p>
              </feedback>
            </choice>
            <choice correct="yes">
              <statement>
                <p>for</p>
              </statement>
              <feedback>
                <p>Correct!</p>
              </feedback>
            </choice>
            <choice>
              <statement>
                <p>while</p>
              </statement>
              <feedback>
                <p>Although this could would, we would need some kind of tracker variable to allow use to count indexes which would be more easily accomplished by a different loop.</p>
              </feedback>
            </choice>
            <choice>
              <statement>
                <p>switch statement</p>
              </statement>
              <feedback>
                <p>This would not work in this situation.</p>
              </feedback>
            </choice>
          </choices>
        </exercise>
      </exercises>
      <p>The <c>letterBlock</c> array has two dimensions. How many loops will you use?</p>
      <exercises line="131" runestone_options="{'showtitle': 'data-showtitle=&quot;Reveal Loop Amount Problem&quot;', 'hidetitle': 'data-hidetitle=&quot;Hide Loop Amount Problem&quot;', 'subchapter': 'routeCipherA', 'chapter': 'Unit8-2DArray', 'basecourse': 'csawesome', 'optional': '', 'optclass': '', 'divid': 'routeciphera_1.75', 'instructoronly': '', 'is_dynamic': 'True'}" source="/Users/peter/teaching/2023-24/csa/csawesome/_sources/Unit8-2DArray/routeCipherA.rst">
        <exercise label="routeciphera_1.75MC">
          <statement>
            <p>9-12-3: How many Loops should you use?</p>
          </statement>
          <choices>
            <choice>
              <statement>
                <p>1</p>
              </statement>
              <feedback>
                <p>This would not correctly iterate through the 2D array</p>
              </feedback>
            </choice>
            <choice correct="yes">
              <statement>
                <p>2, nested</p>
              </statement>
              <feedback>
                <p>Correct!</p>
              </feedback>
            </choice>
            <choice>
              <statement>
                <p>2, un-nested</p>
              </statement>
              <feedback>
                <p>This would not correctly iterate through the 2D array</p>
              </feedback>
            </choice>
            <choice>
              <statement>
                <p>3, un-nested</p>
              </statement>
              <feedback>
                <p>This would not correctly iterate through the 2D array</p>
              </feedback>
            </choice>
          </choices>
        </exercise>
      </exercises>
    </subsubsection>
    <exercises line="148" runestone_options="{'showtitle': 'data-showtitle=&quot;Reveal Outer Bounds Problem&quot;', 'hidetitle': 'data-hidetitle=&quot;Hide Outer Bounds Problem&quot;', 'subchapter': 'routeCipherA', 'chapter': 'Unit8-2DArray', 'basecourse': 'csawesome', 'optional': '', 'optclass': '', 'divid': 'routeciphera_2', 'instructoronly': '', 'is_dynamic': 'True'}" source="/Users/peter/teaching/2023-24/csa/csawesome/_sources/Unit8-2DArray/routeCipherA.rst">
      <exercise label="routeciphera_2MC">
        <statement>
          <p>9-12-4: What can you use to set the outer bound while you iterate through your 2D array?</p>
        </statement>
        <choices>
          <choice correct="yes">
            <statement>
              <p>numRows</p>
            </statement>
            <feedback>
              <p>Correct!</p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>numCols</p>
            </statement>
            <feedback>
              <p>No, numCols finds the width and we are iterating through this in row-major order.</p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>str.length()</p>
            </statement>
            <feedback>
              <p>This finds us the length of the string but the array is not based on the string length.</p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>str[0].length()</p>
            </statement>
            <feedback>
              <p>Strings aren't defined under the '[]' operator and str is not a 2D array so this would return an error.</p>
            </feedback>
          </choice>
        </choices>
      </exercise>
    </exercises>
    <exercises line="165" runestone_options="{'showtitle': 'data-showtitle=&quot;Reveal Inner Bounds Problem&quot;', 'hidetitle': 'data-hidetitle=&quot;Hide Inner Bounds Problem&quot;', 'subchapter': 'routeCipherA', 'chapter': 'Unit8-2DArray', 'basecourse': 'csawesome', 'optional': '', 'optclass': '', 'divid': 'routeciphera_3', 'instructoronly': '', 'is_dynamic': 'True'}" source="/Users/peter/teaching/2023-24/csa/csawesome/_sources/Unit8-2DArray/routeCipherA.rst">
      <exercise label="routeciphera_3MC">
        <statement>
          <p>9-12-5: What can you use to set the inner bound while you iterate through your 2D array?</p>
        </statement>
        <choices>
          <choice>
            <statement>
              <p>numRows</p>
            </statement>
            <feedback>
              <p>No, numRows finds the width and should not be used as the inner bound because we are iterating through the array in row-major order.</p>
            </feedback>
          </choice>
          <choice correct="yes">
            <statement>
              <p>numCols</p>
            </statement>
            <feedback>
              <p>Correct!</p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>str.length()</p>
            </statement>
            <feedback>
              <p>This finds us the length of the string but the array is not based on the string length.</p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>str[0].length()</p>
            </statement>
            <feedback>
              <p>Strings aren't defined under the '[]' operator and str is not a 2D array so this would return an error.</p>
            </feedback>
          </choice>
        </choices>
      </exercise>
    </exercises>
    <exercises line="182" runestone_options="{'showtitle': 'data-showtitle=&quot;Reveal String Method Problem&quot;', 'hidetitle': 'data-hidetitle=&quot;Hide String Method Problem&quot;', 'subchapter': 'routeCipherA', 'chapter': 'Unit8-2DArray', 'basecourse': 'csawesome', 'optional': '', 'optclass': '', 'divid': 'routeciphera_4', 'instructoronly': '', 'is_dynamic': 'True'}" source="/Users/peter/teaching/2023-24/csa/csawesome/_sources/Unit8-2DArray/routeCipherA.rst">
      <exercise label="routeciphera_4MC">
        <statement>
          <p>9-12-6: Which <c>String</c> method can you use to access partial or full strings within another string?</p>
        </statement>
        <choices>
          <choice>
            <statement>
              <p>str.length()</p>
            </statement>
            <feedback>
              <p>This does not return a string</p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>str(lowerbound, upperbound)</p>
            </statement>
            <feedback>
              <p>This is not a valid string method</p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>str.subsection(lowerbound, upperbound)</p>
            </statement>
            <feedback>
              <p>This is not a valid string method</p>
            </feedback>
          </choice>
          <choice correct="yes">
            <statement>
              <p>str.substring(lowerbound, upperbound)</p>
            </statement>
            <feedback>
              <p>Correct!</p>
            </feedback>
          </choice>
        </choices>
      </exercise>
    </exercises>
  </subsection>
  <subsection xml:id="_the-algorithm-1">
    <title>The Algorithm</title>
    <exercises line="201" runestone_options="{'showtitle': 'data-showtitle=&quot;Reveal Access Formula Problem&quot;', 'hidetitle': 'data-hidetitle=&quot;Hide Access Formula Problem&quot;', 'subchapter': 'routeCipherA', 'chapter': 'Unit8-2DArray', 'basecourse': 'csawesome', 'optional': '', 'optclass': '', 'divid': 'routeciphera_5', 'instructoronly': '', 'is_dynamic': 'True'}" source="/Users/peter/teaching/2023-24/csa/csawesome/_sources/Unit8-2DArray/routeCipherA.rst">
      <exercise label="routeciphera_5MC">
        <statement>
          <p>9-12-7: What is the formula for obtaining a single-character string at position <c>k</c> of the string <c>str</c>?</p>
        </statement>
        <choices>
          <choice>
            <statement>
              <p>str.substring(k, k)</p>
            </statement>
            <feedback>
              <p>This will not return the correct char correctly</p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>str.substring(k + 1, k + 1)</p>
            </statement>
            <feedback>
              <p>This will not return the correct char correctly</p>
            </feedback>
          </choice>
          <choice correct="yes">
            <statement>
              <p>str.substring(k, k + 1)</p>
            </statement>
            <feedback>
              <p>Correct!</p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>str.substring(k + 1, k)</p>
            </statement>
            <feedback>
              <p>This will not return the correct char correctly</p>
            </feedback>
          </choice>
        </choices>
      </exercise>
    </exercises>
    <exercises line="218" runestone_options="{'showtitle': 'data-showtitle=&quot;Reveal Formula Variable Problem&quot;', 'hidetitle': 'data-hidetitle=&quot;Hide Formula Variable Problem&quot;', 'subchapter': 'routeCipherA', 'chapter': 'Unit8-2DArray', 'basecourse': 'csawesome', 'optional': '', 'optclass': '', 'divid': 'routeciphera_5.5', 'instructoronly': '', 'is_dynamic': 'True'}" source="/Users/peter/teaching/2023-24/csa/csawesome/_sources/Unit8-2DArray/routeCipherA.rst">
      <exercise label="routeciphera_5.5MC">
        <statement>
          <p>9-12-8: How can one find the aforementioned <c>k</c>? (this is hard to visualize, try drawing out some examples)</p>
        </statement>
        <choices>
          <choice correct="yes">
            <statement>
              <p>str.substring(c + r * this.numCols, 1 + c + r * this.numCols)</p>
            </statement>
            <feedback>
              <p>Correct!</p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>str.substring(c - r * this.numCols, 1 + c - r * this.numCols)</p>
            </statement>
            <feedback>
              <p>Try using this formula to find a given character of one of the example strings. Does it work? Try coming up with some of your own examples to figure out the forumla for k.</p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>str.substring(c + r, 1 + c + r)</p>
            </statement>
            <feedback>
              <p>Try using this formula to find a given character of one of the example strings. Does it work? Try coming up with some of your own examples to figure out the forumla for k.</p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>str.substring(c - r, 1 + c - r)</p>
            </statement>
            <feedback>
              <p>Try using this formula to find a given character of one of the example strings. Does it work? Try coming up with some of your own examples to figure out the forumla for k.</p>
            </feedback>
          </choice>
        </choices>
      </exercise>
    </exercises>
    <exercises line="235" runestone_options="{'showtitle': 'data-showtitle=&quot;Reveal Conditional Problem&quot;', 'hidetitle': 'data-hidetitle=&quot;Hide Conditional Problem&quot;', 'subchapter': 'routeCipherA', 'chapter': 'Unit8-2DArray', 'basecourse': 'csawesome', 'optional': '', 'optclass': '', 'divid': 'routeciphera_6', 'instructoronly': '', 'is_dynamic': 'True'}" source="/Users/peter/teaching/2023-24/csa/csawesome/_sources/Unit8-2DArray/routeCipherA.rst">
      <exercise label="routeciphera_6MC">
        <statement>
          <p>9-12-9: What conditional can you write to make sure trailing characters are ignored?</p>
        </statement>
        <choices>
          <choice>
            <statement>
              <p>if (str.length() &lt; (c + (r * this.numCols)))</p>
            </statement>
            <feedback>
              <p>This will not return the correct boolean</p>
            </feedback>
          </choice>
          <choice correct="yes">
            <statement>
              <p>if (str.length() &gt; (c + (r * this.numCols)))</p>
            </statement>
            <feedback>
              <p>Correct!</p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>if (str.length() &gt; numRows * numCols)</p>
            </statement>
            <feedback>
              <p>We need to determine whether or not to ignore trialing character at each step, not just check for it once at the beginning.</p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>if (str.length() &lt; numRows * numCols)</p>
            </statement>
            <feedback>
              <p>We need to determine whether or not to ignore trialing character at each step, not just check for it once at the beginning.</p>
            </feedback>
          </choice>
        </choices>
      </exercise>
    </exercises>
    <p>The exercises above have been guiding you towards just one of many possible solutions. To read through a different solution, click on the Reveal
                button below and complete the problem.</p>
    <subsubsection>
        <exercise label="RouteCipherA" numbered="yes" adaptive="yes" indentation="show" language="python">
          <statement>
            <p>The method fillBlock below contains the correct code for one solution to this problem, but it is mixed up and contains extra blocks that are not needed.  Drag the needed code from the left to the right and put them in order with the correct indention so that the code would work correctly.</p>
          </statement>
          <blocks>
            <block order="1">
              <cline>public void fillBlock(String str) {</cline>
              <cline>  int pos = 0;</cline>
            </block>
            <block order="3">
              <cline>  for (int r = 0; r &lt; this.numRows; r++ ) {</cline>
            </block>
            <block order="2">
              <cline>      for (int c = 0; c &lt; this.numCols; c++ ) {</cline>
            </block>
            <block order="5">
              <cline>          if (pos &lt; str.length()) {</cline>
            </block>
            <block order="8">
              <cline>              String subStr = str.substring(pos, pos+1);</cline>
              <cline>              this.letterBlock[r][c] = subStr;</cline>
              <cline>              pos++;</cline>
            </block>
            <block order="9">
              <cline>          } else {</cline>
              <cline>              this.letterBlock[r][c] = "A";</cline>
              <cline>          } // end else block</cline>
            </block>
            <block order="6">
              <cline>      } // end inner for</cline>
            </block>
            <block order="7">
              <cline>  } // end outer for</cline>
            </block>
            <block order="4">
              <cline>} // end method</cline>
            </block>
          </blocks>
        </exercise>
    </subsubsection>
  </subsection>
  <subsection xml:id="_try-and-solve-it-4">
    <title>Try And Solve It</title>
    <exercise label="activecode-FRQRouteCipherA">
      <statement>
        <p>Complete the method <c>fillBlock</c> below.</p>
      </statement>
      <program xml:id="activecode-FRQRouteCipherA_editor" interactive="activecode" language="java">
        <input>
public class RouteCipher
{
  /** A two-dimensional array of single-character strings, instantiated in the constructor */
  public String[][] letterBlock;

  /** The number of rows of letterBlock, set by the constructor */
  private int numRows;

  /** The number of columns of letterBlock, set by the constructor */
  private int numCols;

  public RouteCipher(int r, int c){
   this.letterBlock = new String[r][c];
   this.numRows = r;
   this.numCols = c;
  }

  /** Places a string into letterBlock in row-major order.
  *   @param str the string to be processed
  *   Postcondition:
  *     if str.length() &lt; numRows * numCols, "A" in each unfilled cell
  *     if str.length() &gt; numRows * numCols, trailing characters are ignored
  */
  public void fillBlock(String str)
  {
   // Complete this method



  }

  /** Extracts encrypted string from letterBlock in column-major order.
  *   Precondition: letterBlock has been filled
  *   @return the encrypted string from letterBlock
  */
  private String encryptBlock()
  { return ""; }

  /** Encrypts a message.
  *   @param message the string to be encrypted
  *   @return the encrypted message;
  *           if message is the empty string, returns the empty string
  */
  public String encryptMessage(String message)
  { return ""; }

  public static void main(String[] args)
  {

   boolean test1 = false;
   RouteCipher ciph = new RouteCipher(3, 3);

   ciph.fillBlock("There's 1");

   if((ciph.letterBlock[0][2]).equals("e") &amp;&amp; (ciph.letterBlock[2][1]).equals(" "))
     test1 = true;
   else
     System.out.println("Oops! Looks like your code doesn't properly insert the given String.\n");

   if(test1)
     System.out.println("Looks like your code works well!");
   else
     System.out.println("Make a few changes, please.");

  }
}
====
import static org.junit.Assert.*;
  import org.junit.*;
  import java.io.*;
  import java.util.List;
  import java.util.ArrayList;
  import java.util.Arrays;

  public class RunestoneTests extends CodeTestHelper
  {

    @Test
    public void testMain() throws IOException
    {
      String output = getMethodOutput("main");
      String expect = "Looks like your code works well!\n" ;

      boolean passed = getResults(expect, output, "Expected output from main");
      assertTrue(passed);
    }


  @Test
    public void test1()
    {
      RouteCipher ciph = new RouteCipher(3, 4);

      ciph.fillBlock("Lady Bugs");

      String result = String.valueOf((ciph.letterBlock[0][2]).equals("d") &amp;&amp; (ciph.letterBlock[2][2]).equals("A"));boolean passed = getResults("true", result, "method fillBlock works");
      assertTrue(passed);
    }
  }
        </input>
      </program>
    </exercise>
  </subsection>
</section>

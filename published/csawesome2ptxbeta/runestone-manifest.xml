<?xml version="1.0" encoding="UTF-8"?>
<manifest>
  <runestone-services version="7.4.4"/>
  <library-metadata publisher="pretext">
    <title>CSAwesome2</title>
    <subtitle>AP CSA Java 2025-6</subtitle>
    <document-id edition="2">csawesome2</document-id>
    <shelf>AP Computer Science</shelf>
    <blurb>CSAwesome2 is a College Board 2025-2026 guidelines AP CSA endorsed curriculum, an introductory college-level computer programming course in Java, by Barbara Ericson, University of Michigan; Beryl Hoffman, Elms College; and Peter Seibel, Berkeley High School.</blurb>
  </library-metadata>
  <latex-macros>

\newcommand{\lt}{&lt;}
\newcommand{\gt}{&gt;}
\newcommand{\amp}{&amp;}
</latex-macros>
  <webwork-version major="" minor=""/>
  <chapter>
    <id>csawesome2-4</id>
    <title>Getting Started</title>
    <subchapter>
      <id>preface</id>
      <title>Preface</title>
    </subchapter>
    <subchapter>
      <id>about-the-ap-csa-exam</id>
      <title>About the AP CSA Exam</title>
    </subchapter>
    <subchapter>
      <id>transitioning-from-ap-csp-to-ap-csa</id>
      <title>Transitioning from AP CSP to AP CSA</title>
    </subchapter>
    <subchapter>
      <id>java-development-environments</id>
      <title>Java Development Environments</title>
    </subchapter>
    <subchapter>
      <id>growth-mindset-and-pair-programming</id>
      <title>Growth Mindset and Pair Programming</title>
      <question>
        <label>Video: WtKJrB5rOKs</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="WtKJrB5rOKs" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: q7d_JtyCq1A</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="q7d_JtyCq1A" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>pretest-for-the-ap-csa-exam</id>
      <title>Pretest for the AP CSA Exam</title>
      <question optional="yes">
        <label>Exercise 0.6.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qpret_1" data-multipleanswers="false"><div class="para" id="qpret_1-1-1">1-1-6-1: Given the following code segment, what is printed when it is executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String test = "123456";
for (int index = 0; index &lt; test.length() - 1; index = index + 2)
{
    System.out.print(test.substring(index,index+2));
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qpret_1_opt_a"><div class="para" id="qpret_1-2-1-1-1">112233445566</div></li><li data-component="feedback" id="csawesome2_2_qpret_1_opt_a"><div class="para" id="qpret_1-2-1-2-1">This would be true if the loop was printing each character twice and was incrementing the index by 1, but it prints two characters at a time and increments the index by 2.</div></li><li data-component="answer" id="csawesome2_2_qpret_1_opt_b" data-correct=""><div class="para" id="qpret_1-2-2-1-1">123456</div></li><li data-component="feedback" id="csawesome2_2_qpret_1_opt_b"><div class="para" id="qpret_1-2-2-2-1">This will loop through the string and print two characters at a time. The first time through the loop index = 0 and it will print "12". The second time through the loop index = 2 and it will print "34". The third time through the loop index = 4 and it will print "56". Remember that the substring method that takes two integer values will start the substring at the first value and include up to the character before the second value.</div></li><li data-component="answer" id="csawesome2_2_qpret_1_opt_c"><div class="para" id="qpret_1-2-3-1-1">123234345456</div></li><li data-component="feedback" id="csawesome2_2_qpret_1_opt_c"><div class="para" id="qpret_1-2-3-2-1">This would be true if the loop was loop printing three characters at a time, but it prints two characters at a time.</div></li><li data-component="answer" id="csawesome2_2_qpret_1_opt_d"><div class="para" id="qpret_1-2-4-1-1">1223344556</div></li><li data-component="feedback" id="csawesome2_2_qpret_1_opt_d"><div class="para" id="qpret_1-2-4-2-1">This would be true if the index was incrementing by 1 instead of 2.</div></li><li data-component="answer" id="csawesome2_2_qpret_1_opt_e"><div class="para" id="qpret_1-2-5-1-1">Nothing will be printed due to an IndexOutOfBoundsException.</div></li><li data-component="feedback" id="csawesome2_2_qpret_1_opt_e"><div class="para" id="qpret_1-2-5-2-1">This would be true if the loop stopped when index was less than the string length instead of one less than the string length.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 0.6.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qpret_2" data-multipleanswers="false"><div class="para" id="qpret_2-1-1">1-1-6-2:    Consider the following data field and method <code class="code-inline tex2jax_ignore">findLongest</code>. Method <code class="code-inline tex2jax_ignore">findLongest</code> is intended to find the longest consecutive block of the value target occurring in the array nums; however, <code class="code-inline tex2jax_ignore">findLongest</code> does not work as intended. For example, if the array nums contains the values [7, 10, 10, 15, 15, 15, 15, 10, 10, 10, 15, 10, 10], the call <code class="code-inline tex2jax_ignore">findLongest(10)</code> should return 3, the length of the longest consecutive block of 10s.  Which of the following best describes the value returned by a call to <code class="code-inline tex2jax_ignore">findLongest</code>?</div> <blockquote class="blockquote" id="qpret_2-1-2"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private int[] nums;
public int findLongest(int target)
{
   int lenCount = 0;
   int maxLen = 0;

   for (int k = 0; k &lt; nums.length; k++)
   {
      if (nums[k] == target)
      {
         lenCount++;
      }

      else
      {
         if (lenCount &gt; maxLen)
         {
            maxLen = lenCount;
         }
      }
   }

   if (lenCount &gt; maxLen)
   {
      maxLen = lenCount;
   }

   return maxLen;
}
</code></pre></div></blockquote><li data-component="answer" id="csawesome2_2_qpret_2_opt_a"><div class="para" id="qpret_2-2-1-1-1">It is the length of the array nums.</div></li><li data-component="feedback" id="csawesome2_2_qpret_2_opt_a"><div class="para" id="qpret_2-2-1-2-1">This can not be true. There is no nums.length in the code and the only count happens lenCount is incremented when nums[k] == target.</div></li><li data-component="answer" id="csawesome2_2_qpret_2_opt_b"><div class="para" id="qpret_2-2-2-1-1">It is the length of the first consecutive block of the value target in nums.</div></li><li data-component="feedback" id="csawesome2_2_qpret_2_opt_b"><div class="para" id="qpret_2-2-2-2-1">It does not reset the count ever so it just counts all the times the target value appears in the array.</div></li><li data-component="answer" id="csawesome2_2_qpret_2_opt_c" data-correct=""><div class="para" id="qpret_2-2-3-1-1">It is the number of occurrences of the value target in nums.</div></li><li data-component="feedback" id="csawesome2_2_qpret_2_opt_c"><div class="para" id="qpret_2-2-3-2-1">The variable lenCount is incremented each time the current array element is the same value as the target. It is never reset so it counts the number of occurrences of the value target in nums. The method returns maxLen which is set to lenCount after the loop finishes if lenCount is greater than maxLen.</div></li><li data-component="answer" id="csawesome2_2_qpret_2_opt_d"><div class="para" id="qpret_2-2-4-1-1">It is the length of the shortest consecutive block of the value target in nums.</div></li><li data-component="feedback" id="csawesome2_2_qpret_2_opt_d"><div class="para" id="qpret_2-2-4-2-1">It does not reset the count ever so it just counts all the times the target value appears in the array.</div></li><li data-component="answer" id="csawesome2_2_qpret_2_opt_e"><div class="para" id="qpret_2-2-5-1-1">It is the length of the last consecutive block of the value target in nums.</div></li><li data-component="feedback" id="csawesome2_2_qpret_2_opt_e"><div class="para" id="qpret_2-2-5-2-1">It does not reset the count ever so it just counts all the times the target value appears in the array.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 0.6.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qpret_3" data-multipleanswers="false"><div class="para" id="qpret_3-1-1">1-1-6-3: Given the following code segment, what are the values of <code class="code-inline tex2jax_ignore">var1</code> and <code class="code-inline tex2jax_ignore">var2</code> after the while loop finishes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int var1 = 0;
int var2 = 2;

while ((var2 != 0) &amp;&amp; ((var1 / var2) &gt;= 0))
{
   var1 = var1 + 1;
   var2 = var2 - 1;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qpret_3_opt_a"><div class="para" id="qpret_3-2-1-1-1">var1=1, var2=1</div></li><li data-component="feedback" id="csawesome2_2_qpret_3_opt_a"><div class="para" id="qpret_3-2-1-2-1">This would be true if the body of the while loop only executed one time, but it executes twice.</div></li><li data-component="answer" id="csawesome2_2_qpret_3_opt_b"><div class="para" id="qpret_3-2-2-1-1">var1=3, var2=-1</div></li><li data-component="feedback" id="csawesome2_2_qpret_3_opt_b"><div class="para" id="qpret_3-2-2-2-1">This would be true if the body of the while loop executed 3 times, but it exectues twice.</div></li><li data-component="answer" id="csawesome2_2_qpret_3_opt_c"><div class="para" id="qpret_3-2-3-1-1">var1=0, var2=2</div></li><li data-component="feedback" id="csawesome2_2_qpret_3_opt_c"><div class="para" id="qpret_3-2-3-2-1">This would be true if the body of the while loop never executed. This would have happened if the while check was if var1 != 0 instead of var2 != 0.</div></li><li data-component="answer" id="csawesome2_2_qpret_3_opt_d" data-correct=""><div class="para" id="qpret_3-2-4-1-1">var1=2, var2=0</div></li><li data-component="feedback" id="csawesome2_2_qpret_3_opt_d"><div class="para" id="qpret_3-2-4-2-1">The loop starts with var1=0 and var2=2. The while checks that var2 isn’t 0 (2!=0) and that var1 / var2 is greater than or equal to zero (0/2=0) so this is equal to zero and the body of the while loop will execute. The variable var1 has 1 added to it for a new value of 1. The variable var2 has 1 subtracted from it for a value of 1. At this point var1=1 and var2=1. The while condition is checked again. Since var2 isn’t 0 (1!=0) and var1/var2 (1/1=1) is &gt;= 0 so the body of the loop will execute again. The variable var1 has 1 added to it for a new value of 2. The variable var2 has 1 subtracted from it for a value of 0. At this point var1=2 and var2=0. The while condition is checked again. Since var2 is zero the while loop stops and the value of var1 is 2 and var2 is 0.</div></li><li data-component="answer" id="csawesome2_2_qpret_3_opt_e"><div class="para" id="qpret_3-2-5-1-1">The loop won’t finish executing because of a division by zero.</div></li><li data-component="feedback" id="csawesome2_2_qpret_3_opt_e"><div class="para" id="qpret_3-2-5-2-1">The operation 0 / 2 won’t cause a division by zero. The result is just zero.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 0.6.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qpret_4" data-multipleanswers="false"><div class="para" id="qpret_4-1-1">1-1-6-4: At a certain high school students receive letter grades based on the following scale: 93 or above is an A, 84 to 92 inclusive is a B, 75 to 83 inclusive is a C, and below 75 is an F.  Which of the following code segments will assign the correct string to <code class="code-inline tex2jax_ignore">grade</code> for a given integer score?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">I.  if (score &gt;= 93)
       grade = "A";
    if (score &gt;= 84 &amp;&amp; score &lt;= 92)
       grade = "B";
    if (score &gt;= 75 &amp;&amp; score &lt;= 83)
       grade = "C";
    if (score &lt; 75)
       grade = "F";

II. if (score &gt;= 93)
       grade = "A";
    if (score &gt;= 84)
       grade = "B";
    if (score &gt;= 75)
       grade = "C";
    if (score &lt; 75)
       grade = "F";

III. if (score &gt;= 93)
        grade = "A";
     else if (score &gt;= 84)
        grade = "B";
     else if (score &gt;= 75)
        grade = "C";
     else
        grade = "F";
</code></pre></div><li data-component="answer" id="csawesome2_2_qpret_4_opt_a" data-correct=""><div class="para" id="qpret_4-2-1-1-1">I and III only</div></li><li data-component="feedback" id="csawesome2_2_qpret_4_opt_a"><div class="para" id="qpret_4-2-1-2-1">Choice I uses multiple if’s with logical ands in the conditions to check that the numbers are in range. Choice Choice II won’t work since if you had a score of 94 it would first assign the grade to an "A" but then it would execute the next if and change the grade to a "B" and so on until the grade was set to a "C". Choice III uses ifs with else if to make sure that only one conditional is executed.</div></li><li data-component="answer" id="csawesome2_2_qpret_4_opt_b"><div class="para" id="qpret_4-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qpret_4_opt_b"><div class="para" id="qpret_4-2-2-2-1">Choice II won’t work since if you had a score of 94 it would first assign the grade to an "A" but then it would execute the next if and change the grade to a "B" and so on until the grade was set to a "C". This could have been fixed by using else if instead of just if.</div></li><li data-component="answer" id="csawesome2_2_qpret_4_opt_c"><div class="para" id="qpret_4-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_qpret_4_opt_c"><div class="para" id="qpret_4-2-3-2-1">Choice III is one of the correct answers. However, choice I is also correct. Choice I uses multiple if’s with logical ands in the conditions to check that the numbers are in range. Choice III uses ifs with else if to make sure that only one conditional is executed.</div></li><li data-component="answer" id="csawesome2_2_qpret_4_opt_d"><div class="para" id="qpret_4-2-4-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_qpret_4_opt_d"><div class="para" id="qpret_4-2-4-2-1">Choice II won’t work since if you had a score of 94 it would first assign the grade to an "A" but then it would execute the next if and change the grade to a "B" and so on until the grade was set to a "C". This could have been fixed by using else if instead of just if.</div></li><li data-component="answer" id="csawesome2_2_qpret_4_opt_e"><div class="para" id="qpret_4-2-5-1-1">I, II, and III</div></li><li data-component="feedback" id="csawesome2_2_qpret_4_opt_e"><div class="para" id="qpret_4-2-5-2-1">Choice II won’t work since if you had a score of 94 it would first assign the grade to an "A" but then it would execute the next if and change the grade to a "B" and so on until the grade was set to a "C". This could have been fixed by using else if instead of just if.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 0.6.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qpret_5" data-multipleanswers="false"><div class="para" id="qpret_5-1-1">1-1-6-5: Given the following code segment, which of the following is this equivalent to?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">if ( x &gt; 0) x = -x;
if (x &lt; 0) x = 0;
</code></pre></div><li data-component="answer" id="csawesome2_2_qpret_5_opt_a" data-correct=""><div class="para" id="qpret_5-2-1-1-1">x = 0;</div></li><li data-component="feedback" id="csawesome2_2_qpret_5_opt_a"><div class="para" id="qpret_5-2-1-2-1">No matter what x is set to originally, the code will reset it to 0.</div></li><li data-component="answer" id="csawesome2_2_qpret_5_opt_b"><div class="para" id="qpret_5-2-2-1-1">if (x &gt; 0) x = 0;</div></li><li data-component="feedback" id="csawesome2_2_qpret_5_opt_b"><div class="para" id="qpret_5-2-2-2-1">Even if x is &lt; 0, the above code will set it to 0.</div></li><li data-component="answer" id="csawesome2_2_qpret_5_opt_c"><div class="para" id="qpret_5-2-3-1-1">if (x &lt; 0) x = 0;</div></li><li data-component="feedback" id="csawesome2_2_qpret_5_opt_c"><div class="para" id="qpret_5-2-3-2-1">Even if x is &gt; than 0 originally, it will be set to 0 after the code executes.</div></li><li data-component="answer" id="csawesome2_2_qpret_5_opt_d"><div class="para" id="qpret_5-2-4-1-1">if (x &gt; 0) x = -x; else x = 0;</div></li><li data-component="feedback" id="csawesome2_2_qpret_5_opt_d"><div class="para" id="qpret_5-2-4-2-1">The first if statment will always cause the second to be executed unless x already equals 0, such that x will never equal -x</div></li><li data-component="answer" id="csawesome2_2_qpret_5_opt_e"><div class="para" id="qpret_5-2-5-1-1">if ( x &lt; 0) x = 0; else x = -1;</div></li><li data-component="feedback" id="csawesome2_2_qpret_5_opt_e"><div class="para" id="qpret_5-2-5-2-1">The first if statement will always cause the second to be executed unless x already equals 0, such that x will never equal -x</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 0.6.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qpret_6" data-multipleanswers="false"><div class="para" id="qpret_6-1-1">1-1-6-6: Susan is 5 years older than Matt. Three years from now Susan’s age will be twice Matt’s age.  What should be in place of <code class="code-inline tex2jax_ignore">condition</code> in the code segment below to solve this problem?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int s = 1; s &lt;= 100; s++) {
   for (int m = 1; m &lt;= 100; m++) {
      if (condition)
         System.out.println("Susan is " + s + " and Matt is " + m);
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qpret_6_opt_a"><div class="para" id="qpret_6-2-1-1-1">(s == m - 5) &amp;&amp; (s - 3 == 2 * (m - 3))</div></li><li data-component="feedback" id="csawesome2_2_qpret_6_opt_a"><div class="para" id="qpret_6-2-1-2-1">This would be true if Susan was 5 years younger than Matt and three years ago she was twice his age. But, how could she be younger than him now and twice his age three years ago?</div></li><li data-component="answer" id="csawesome2_2_qpret_6_opt_b"><div class="para" id="qpret_6-2-2-1-1">(s == (m + 5)) &amp;&amp; ((s + 3) == (2 * m + 3))</div></li><li data-component="feedback" id="csawesome2_2_qpret_6_opt_b"><div class="para" id="qpret_6-2-2-2-1">This is almost right. It has Susan as 5 years older than Matt now. But the second part is wrong. Multiplication will be done before addition so (2 * m + 3) won’t be correct for in 3 years Susan will be twice as old as Matt. It should be (2 * (m + 3)) or (2 * m + 6).</div></li><li data-component="answer" id="csawesome2_2_qpret_6_opt_c"><div class="para" id="qpret_6-2-3-1-1">s == (m - 5) &amp;&amp; (2 * s + 3) == (m + 3)</div></li><li data-component="feedback" id="csawesome2_2_qpret_6_opt_c"><div class="para" id="qpret_6-2-3-2-1">This can’t be right because Susan is 5 years older than Matt, so the first part is wrong. It has susan equal to Matt’s age minus 5 which would have Matt older than Susan.</div></li><li data-component="answer" id="csawesome2_2_qpret_6_opt_d" data-correct=""><div class="para" id="qpret_6-2-4-1-1">s == m + 5 &amp;&amp; s + 3 == 2 * m + 6</div></li><li data-component="feedback" id="csawesome2_2_qpret_6_opt_d"><div class="para" id="qpret_6-2-4-2-1">Susan is 5 years older than Matt so s == m + 5 should be true and in 3 years she will be twice as old so s + 3 = 2 * (m + 3) = 2 * m + 6.</div></li><li data-component="answer" id="csawesome2_2_qpret_6_opt_e"><div class="para" id="qpret_6-2-5-1-1">None of the answers are correct</div></li><li data-component="feedback" id="csawesome2_2_qpret_6_opt_e"><div class="para" id="qpret_6-2-5-2-1">The answer is s == m + 5 &amp;&amp; s + 3 == 2 * m + 6.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 0.6.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qpret_7" data-multipleanswers="false"><div class="para" id="qpret_7-1-1">1-1-6-7: Given the following code segment, what is printed when it executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java"> public static void test()
 {
    int num = 0;
    while(num &lt;= 14)
    {

       if(num % 3 == 1)
       {
          System.out.print("1 ");
       }

       else if (num % 3 == 2)
       {
          System.out.print("2 ");
       }

       else
       {
          System.out.print("0 ");
       }

       num += 2;
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qpret_7_opt_a"><div class="para" id="qpret_7-2-1-1-1">0 1 2 0 1 2 0 1</div></li><li data-component="feedback" id="csawesome2_2_qpret_7_opt_a"><div class="para" id="qpret_7-2-1-2-1">The second time through the loop the value of num is 2 and 2 % 3 is 2 not 1.</div></li><li data-component="answer" id="csawesome2_2_qpret_7_opt_b" data-correct=""><div class="para" id="qpret_7-2-2-1-1">0 2 1 0 2 1 0 2</div></li><li data-component="feedback" id="csawesome2_2_qpret_7_opt_b"><div class="para" id="qpret_7-2-2-2-1">The while loop will iterate 8 times. The value of num each time through the loop is: 0, 2, 4, 6, 8, 10, 12, and 14. The corresponding remainder operator of 3 is: 0, 2, 1, 0, 2, 1, 0, 2, which is print to the console.</div></li><li data-component="answer" id="csawesome2_2_qpret_7_opt_c"><div class="para" id="qpret_7-2-3-1-1">0 2 1 0 2 1 0 2 1</div></li><li data-component="feedback" id="csawesome2_2_qpret_7_opt_c"><div class="para" id="qpret_7-2-3-2-1">The loop will iterate 8 times not 9. When the value of num exceeds 14, num will no longer be evaluated against the conditional statements. The remainder operator of 3 will be evaluated on the num values of 0, 2, 4, 6, 8, 10, 12 and 14.</div></li><li data-component="answer" id="csawesome2_2_qpret_7_opt_d"><div class="para" id="qpret_7-2-4-1-1">2 1 0 2 1 0 2 1</div></li><li data-component="feedback" id="csawesome2_2_qpret_7_opt_d"><div class="para" id="qpret_7-2-4-2-1">The value of num the first time through the loop is 0 so the first remainder is 0 not 2. This would be true if the value of num was 2 to start.</div></li><li data-component="answer" id="csawesome2_2_qpret_7_opt_e"><div class="para" id="qpret_7-2-5-1-1">0 2 1 0 2 1 0</div></li><li data-component="feedback" id="csawesome2_2_qpret_7_opt_e"><div class="para" id="qpret_7-2-5-2-1">This would be true if the loop stopped when the value of num was less than 14 but it is less than or equal to 14.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 0.6.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qpret_8" data-multipleanswers="false"><div class="para" id="qpret_8-1-1">1-1-6-8: Given the following incomplete class declaration, which of the following can be used to replace the missing code in the <code class="code-inline tex2jax_ignore">advance</code> method so that it will correctly update the time?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class TimeRecord
{
    private int hours;
    private int minutes; // 0&lt;=minutes&lt;60

    public TimeRecord(int h, int m)
    {
        hours = h;
        minutes = m;
    }

    // postcondition: returns the
    // number of hours
    public int getHours()
    {
        /* implementation not shown */
    }

    // postcondition: returns the number
    // of minutes; 0 &lt;= minutes &lt; 60
    public int getMinutes()
    {
        /* implementation not shown */
    }

    // precondition: h &gt;= 0; m &gt;= 0
    // postcondition: adds h hours and
    // m minutes to this TimeRecord
    public void advance(int h, int m)
    {
        hours = hours + h;
        minutes = minutes + m;
        /* missing code */
    }

    // ... other methods not shown

}
</code></pre></div><li data-component="answer" id="csawesome2_2_qpret_8_opt_a" data-correct=""><div class="para" id="qpret_8-2-1-1-1">hours = hours + minutes / 60; minutes = minutes % 60;</div></li><li data-component="feedback" id="csawesome2_2_qpret_8_opt_a"><div class="para" id="qpret_8-2-1-2-1">This will update the hours and minutes correctly. It will add the floor of the division of minutes by 60 to hours and then set minutes to the remainder of the division of minutes by 60.</div></li><li data-component="answer" id="csawesome2_2_qpret_8_opt_b"><div class="para" id="qpret_8-2-2-1-1">minutes = minutes % 60;</div></li><li data-component="feedback" id="csawesome2_2_qpret_8_opt_b"><div class="para" id="qpret_8-2-2-2-1">This won’t add to hour so it can’t be correct. It will set minutes to the remainder of dividing minutes by 60 so minutes will be set correctly.</div></li><li data-component="answer" id="csawesome2_2_qpret_8_opt_c"><div class="para" id="qpret_8-2-3-1-1">minutes = minutes + hours % 60;</div></li><li data-component="feedback" id="csawesome2_2_qpret_8_opt_c"><div class="para" id="qpret_8-2-3-2-1">This will set the minutes to the minutes plus the remainder of dividing the hours by 60.</div></li><li data-component="answer" id="csawesome2_2_qpret_8_opt_d"><div class="para" id="qpret_8-2-4-1-1">hours = hours + minutes % 60; minutes = minutes / 60;</div></li><li data-component="feedback" id="csawesome2_2_qpret_8_opt_d"><div class="para" id="qpret_8-2-4-2-1">This will set hours to hours plus the remainder of dividing minutes by 60 and then set minutes to the number of hours (int division of minutes by 60).</div></li><li data-component="answer" id="csawesome2_2_qpret_8_opt_e"><div class="para" id="qpret_8-2-5-1-1">hours = hours + minutes / 60;</div></li><li data-component="feedback" id="csawesome2_2_qpret_8_opt_e"><div class="para" id="qpret_8-2-5-2-1">This will correctly update the hours, but not update the minutes.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 0.6.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qpret_9" data-multipleanswers="false"><div class="para" id="qpret_9-1-1">1-1-6-9: Which of the following expressions is equivalent to the following?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">!(c || d)
</code></pre></div><li data-component="answer" id="csawesome2_2_qpret_9_opt_a"><div class="para" id="qpret_9-2-1-1-1">(c || d)</div></li><li data-component="feedback" id="csawesome2_2_qpret_9_opt_a"><div class="para" id="qpret_9-2-1-2-1">NOTing an OR expression does not result in the same values ORed.</div></li><li data-component="answer" id="csawesome2_2_qpret_9_opt_b"><div class="para" id="qpret_9-2-2-1-1">(c &amp;&amp; d)</div></li><li data-component="feedback" id="csawesome2_2_qpret_9_opt_b"><div class="para" id="qpret_9-2-2-2-1">You do negate the OR to AND, but you also need to negate the values of d and d.</div></li><li data-component="answer" id="csawesome2_2_qpret_9_opt_c" data-correct=""><div class="para" id="qpret_9-2-3-1-1">(!c) &amp;&amp; (!d)</div></li><li data-component="feedback" id="csawesome2_2_qpret_9_opt_c"><div class="para" id="qpret_9-2-3-2-1">NOTing (negating) an OR expression is the same as the AND of the individual values NOTed (negated). See De Morgans laws.</div></li><li data-component="answer" id="csawesome2_2_qpret_9_opt_d"><div class="para" id="qpret_9-2-4-1-1">!(c &amp;&amp; d)</div></li><li data-component="feedback" id="csawesome2_2_qpret_9_opt_d"><div class="para" id="qpret_9-2-4-2-1">This would be equivalent to (!c || !d)</div></li><li data-component="answer" id="csawesome2_2_qpret_9_opt_e"><div class="para" id="qpret_9-2-5-1-1">(!c) || (!d)</div></li><li data-component="feedback" id="csawesome2_2_qpret_9_opt_e"><div class="para" id="qpret_9-2-5-2-1">This would be equivalent to (!(c &amp;&amp; d))</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 0.6.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qpret_10" data-multipleanswers="false"><div class="para" id="qpret_10-1-1">1-1-6-10: Which of the following will cause an infinite loop when <code class="code-inline tex2jax_ignore">temp</code> is greater than zero and <code class="code-inline tex2jax_ignore">a</code> is an array of integers.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int k = 0; k &lt; a.length; k++ )
{
   while (a[k] &lt; temp)
   {
      a[k] *= 2;
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qpret_10_opt_a"><div class="para" id="qpret_10-2-1-1-1">The values don’t matter this will always cause an infinite loop.</div></li><li data-component="feedback" id="csawesome2_2_qpret_10_opt_a"><div class="para" id="qpret_10-2-1-2-1">An infinite loop will not always occur in this program segment. It occurs when at least one value in a is less than or equal to 0.</div></li><li data-component="answer" id="csawesome2_2_qpret_10_opt_b"><div class="para" id="qpret_10-2-2-1-1">Whenever a has values larger than temp.</div></li><li data-component="feedback" id="csawesome2_2_qpret_10_opt_b"><div class="para" id="qpret_10-2-2-2-1">Values larger then temp will not cause an infinite loop.</div></li><li data-component="answer" id="csawesome2_2_qpret_10_opt_c"><div class="para" id="qpret_10-2-3-1-1">When all values in a are larger than temp.</div></li><li data-component="feedback" id="csawesome2_2_qpret_10_opt_c"><div class="para" id="qpret_10-2-3-2-1">Values larger then temp will not cause an infinite loop.</div></li><li data-component="answer" id="csawesome2_2_qpret_10_opt_d" data-correct=""><div class="para" id="qpret_10-2-4-1-1">Whenever a includes a value that is equal to zero.</div></li><li data-component="feedback" id="csawesome2_2_qpret_10_opt_d"><div class="para" id="qpret_10-2-4-2-1">When a contains a value that is equal to zero then multiplying that value by 2 will always be 0 and will never make the result larger than the temp value (which was set to some value &gt; 0), so an infinite loop will occur.</div></li><li data-component="answer" id="csawesome2_2_qpret_10_opt_e"><div class="para" id="qpret_10-2-5-1-1">Whenever a includes a value equal to temp.</div></li><li data-component="feedback" id="csawesome2_2_qpret_10_opt_e"><div class="para" id="qpret_10-2-5-2-1">Values equal to temp will not cause the infinite loop.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 0.6.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qpret_11" data-multipleanswers="false"><div class="para" id="qpret_11-1-1">1-1-6-11: Given the following method declaration, and <code class="code-inline tex2jax_ignore">int[] a = {8, 3, 1}</code>, what is the value in <code class="code-inline tex2jax_ignore">a[1]</code> after <code class="code-inline tex2jax_ignore">m1(a);</code> is run?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static int m1(int[] a)
{
   a[1]--;
   return (a[1] * 2);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qpret_11_opt_a"><div class="para" id="qpret_11-2-1-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_qpret_11_opt_a"><div class="para" id="qpret_11-2-1-2-1">This would be true if it was return (a[1] *= 2);</div></li><li data-component="answer" id="csawesome2_2_qpret_11_opt_b" data-correct=""><div class="para" id="qpret_11-2-2-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_qpret_11_opt_b"><div class="para" id="qpret_11-2-2-2-1">The statement a[1]--; is the same as a[1] = a[1] - 1; so this will change to 3 to 2.  The return (a[1] * 2) does not change the value at a[1].</div></li><li data-component="answer" id="csawesome2_2_qpret_11_opt_c"><div class="para" id="qpret_11-2-3-1-1">16</div></li><li data-component="feedback" id="csawesome2_2_qpret_11_opt_c"><div class="para" id="qpret_11-2-3-2-1">This would be true if it was return (a[0] *= 2);</div></li><li data-component="answer" id="csawesome2_2_qpret_11_opt_d"><div class="para" id="qpret_11-2-4-1-1">7</div></li><li data-component="feedback" id="csawesome2_2_qpret_11_opt_d"><div class="para" id="qpret_11-2-4-2-1">This would be true if it was a[0]--;</div></li><li data-component="answer" id="csawesome2_2_qpret_11_opt_e"><div class="para" id="qpret_11-2-5-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_qpret_11_opt_e"><div class="para" id="qpret_11-2-5-2-1">This can’t be true because a[1]--; means the same as a[1] = a[1] - 1; so the 3 changes to 2.  Parameters are all pass by value in Java which means that a copy of the value is passed to a method. But, since an array is an object a copy of the value is a copy of the reference to the object. So changes to objects in methods are permanent.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 0.6.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qpret_12" data-multipleanswers="false"><div class="para" id="qpret_12-1-1">1-1-6-12: Given the following code segment, what will the value of <code class="code-inline tex2jax_ignore">s1</code> be after this executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String s1 = "Hi There";
String s2 = s1;
String s3 = s2;
String s4 = s1;
s2 = s2.toLowerCase();
s3 = s3.toUpperCase();
s4 = null;
</code></pre></div><li data-component="answer" id="csawesome2_2_qpret_12_opt_a" data-correct=""><div class="para" id="qpret_12-2-1-1-1">Hi There</div></li><li data-component="feedback" id="csawesome2_2_qpret_12_opt_a"><div class="para" id="qpret_12-2-1-2-1">Strings are immutable meaning that any changes to a string creates and returns a new string, so the string referred to by s1 does not change</div></li><li data-component="answer" id="csawesome2_2_qpret_12_opt_b"><div class="para" id="qpret_12-2-2-1-1">hi there</div></li><li data-component="feedback" id="csawesome2_2_qpret_12_opt_b"><div class="para" id="qpret_12-2-2-2-1">This would only be correct if we had s1 = s2; after s2.toLowerCase(); was executed. Strings are immutable and so any change to a string returns a new string.</div></li><li data-component="answer" id="csawesome2_2_qpret_12_opt_c"><div class="para" id="qpret_12-2-3-1-1">HI THERE</div></li><li data-component="feedback" id="csawesome2_2_qpret_12_opt_c"><div class="para" id="qpret_12-2-3-2-1">This would be correct if we had s1 = s3; after s3.toUpperCase(); was executed. Strings are immutable and so any change to a string returns a new string.</div></li><li data-component="answer" id="csawesome2_2_qpret_12_opt_d"><div class="para" id="qpret_12-2-4-1-1">null</div></li><li data-component="feedback" id="csawesome2_2_qpret_12_opt_d"><div class="para" id="qpret_12-2-4-2-1">This would be true if we had s1 = s4; after s4 = null; was executed. Strings are immutable and so any changes to a string returns a new string.</div></li><li data-component="answer" id="csawesome2_2_qpret_12_opt_e"><div class="para" id="qpret_12-2-5-1-1">hI tHERE</div></li><li data-component="feedback" id="csawesome2_2_qpret_12_opt_e"><div class="para" id="qpret_12-2-5-2-1">Strings are immutable and so any changes to a string returns a new string.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 0.6.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qpret_13" data-multipleanswers="false"><div class="para" id="qpret_13-1-1">1-1-6-13: Which of the following is printed as the result of the call <code class="code-inline tex2jax_ignore">mystery(1234);</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">//precondition:  x &gt;=0
public void mystery (int x)
{

   System.out.print(x % 10);

   if ((x / 10) != 0)
   {
      mystery(x / 10);
   }

   System.out.print(x % 10);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qpret_13_opt_a"><div class="para" id="qpret_13-2-1-1-1">Many digits are printed due to infinite recursion.</div></li><li data-component="feedback" id="csawesome2_2_qpret_13_opt_a"><div class="para" id="qpret_13-2-1-2-1">When the recursive call to mystery(1) occurs (the 4th call to mystery), the division of x /10 equals .01--this becomes 0 because this is integer division and the remainder is thrown away. Therefore the current call will be completed and all of the previous calls to mystery will be completed.</div></li><li data-component="answer" id="csawesome2_2_qpret_13_opt_b"><div class="para" id="qpret_13-2-2-1-1">3443</div></li><li data-component="feedback" id="csawesome2_2_qpret_13_opt_b"><div class="para" id="qpret_13-2-2-2-1">The first call to mystery with the integer 1234 will print 1234 % 10. The ’%’ means remainder. The remainder of 1234 divided by 10 is 4 so the first thing printed must be 4.</div></li><li data-component="answer" id="csawesome2_2_qpret_13_opt_c"><div class="para" id="qpret_13-2-3-1-1">12344321</div></li><li data-component="feedback" id="csawesome2_2_qpret_13_opt_c"><div class="para" id="qpret_13-2-3-2-1">The first call to mystery with the integer 1234 will print 1234 % 10. The ’%’ means remainder. The remainder of 1234 divided by 10 is 4 so the first thing printed must be 4.</div></li><li data-component="answer" id="csawesome2_2_qpret_13_opt_d"><div class="para" id="qpret_13-2-4-1-1">1441</div></li><li data-component="feedback" id="csawesome2_2_qpret_13_opt_d"><div class="para" id="qpret_13-2-4-2-1">The first call to mystery with the integer 1234 will print 1234 % 10. The ’%’ means remainder. The remainder of 1234 divided by 10 is 4 so the first thing printed must be 4.</div></li><li data-component="answer" id="csawesome2_2_qpret_13_opt_e" data-correct=""><div class="para" id="qpret_13-2-5-1-1">43211234</div></li><li data-component="feedback" id="csawesome2_2_qpret_13_opt_e"><div class="para" id="qpret_13-2-5-2-1">This has a recursive call which means that the method calls itself when (x / 10) is greater than or equal to zero. Each time the method is called it prints the remainder of the passed value divided by 10 and then calls the method again with the result of the integer division of the passed number by 10 (which throws away the decimal part). After the recursion stops by (x / 10) == 0 the method will print the remainder of the passed value divided by 10 again.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 0.6.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qpret_14" data-multipleanswers="false">
                <div class="para" id="qpret_14-1-1">1-1-6-14: Under which of these conditions will a sequential search be faster than a binary search?</div>
                <li data-component="answer" id="csawesome2_2_qpret_14_opt_a">
                  <div class="para" id="qpret_14-2-1-1-1">The search value is not in the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qpret_14_opt_a">
                  <div class="para" id="qpret_14-2-1-2-1">If the search value is not in the array, a sequential search will have to check every item in the array before failing, a binary search will be faster.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qpret_14_opt_b">
                  <div class="para" id="qpret_14-2-2-1-1">The search value is the last element in the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qpret_14_opt_b">
                  <div class="para" id="qpret_14-2-2-2-1">In this case a sequential search will have to check every element before finding the correct one, whereas a binary search will not.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qpret_14_opt_c">
                  <div class="para" id="qpret_14-2-3-1-1">The value is in the middle of the array.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qpret_14_opt_c">
                  <div class="para" id="qpret_14-2-3-2-1">Results will differ depending on the exact location of the element, but Binary Search will still find the element faster while Sequential will have to check more elements.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qpret_14_opt_d" data-correct="">
                  <div class="para" id="qpret_14-2-4-1-1">The search value is the first element in the array.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qpret_14_opt_d">
                  <div class="para" id="qpret_14-2-4-2-1">Only when the search value is the first item in the array, and thus the first value encountered in sequential search, will sequential be faster than binary.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qpret_14_opt_e">
                  <div class="para" id="qpret_14-2-5-1-1">Sequential Search can never be faster than Binary Search.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qpret_14_opt_e">
                  <div class="para" id="qpret_14-2-5-2-1">When the search value is the first element, Sequential will always be faster, as it will only need to check one element.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 0.6.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qpret_15" data-multipleanswers="false"><div class="para" id="qpret_15-1-1">1-1-6-15: Given the following code segment, what will be printed when it is executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">List&lt;Integer&gt; list1 = new ArrayList&lt;Integer&gt;();
list1.add(new Integer(1));
list1.add(new Integer(2));
list1.add(new Integer(3));
list1.set(2, new Integer(4));
list1.add(2, new Integer(5));
list1.add(new Integer(6));
System.out.println(list1);
</code></pre></div><li data-component="answer" id="csawesome2_2_qpret_15_opt_a"><div class="para" id="qpret_15-2-1-1-1">[1, 2, 3, 4, 5]</div></li><li data-component="feedback" id="csawesome2_2_qpret_15_opt_a"><div class="para" id="qpret_15-2-1-2-1">The set replaces the 3 with the 4 so this can’t be right</div></li><li data-component="answer" id="csawesome2_2_qpret_15_opt_b"><div class="para" id="qpret_15-2-2-1-1">[1, 2, 4, 5, 6]</div></li><li data-component="feedback" id="csawesome2_2_qpret_15_opt_b"><div class="para" id="qpret_15-2-2-2-1">The add with an index of 2 and a value of 5 adds the 5 at index 2 not 3. Remember that the first index is 0.</div></li><li data-component="answer" id="csawesome2_2_qpret_15_opt_c" data-correct=""><div class="para" id="qpret_15-2-3-1-1">[1, 2, 5, 4, 6]</div></li><li data-component="feedback" id="csawesome2_2_qpret_15_opt_c"><div class="para" id="qpret_15-2-3-2-1">The add method that takes just a value as a parameter adds that value to the end of the list. The set replaces the value at that index with the new value. The add with parameters of an index and a value puts the passed value at that index and moves any existing values by one index to the right (increments the index). So the list looks like: 1 // add 1 1 2 // add 2 1 2 3 // add 3 1 2 4 // set index 2 to 4 1 2 5 4 // add 5 to index 2 (move rest right) 1 2 5 4 6 // add 6 to end</div></li><li data-component="answer" id="csawesome2_2_qpret_15_opt_d"><div class="para" id="qpret_15-2-4-1-1">[1, 5, 2, 4, 6]</div></li><li data-component="feedback" id="csawesome2_2_qpret_15_opt_d"><div class="para" id="qpret_15-2-4-2-1">The add with an index of 2 and a value of 5 adds the 5 at index 2 not 1. Remember that the first index is 0.</div></li><li data-component="answer" id="csawesome2_2_qpret_15_opt_e"><div class="para" id="qpret_15-2-5-1-1">[1, 6, 2, 4, 5]</div></li><li data-component="feedback" id="csawesome2_2_qpret_15_opt_e"><div class="para" id="qpret_15-2-5-2-1">How did the 6 get in position 2?</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 0.6.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qpret_16" data-multipleanswers="false"><div class="para" id="qpret_16-1-1">1-1-6-16: Given the following code segment, What are the contents of <code class="code-inline tex2jax_ignore">mat</code> after the code segment has been executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int [][] mat = new int [3][4];
for (int row = 0; row &lt; mat.length; row++)
{

   for (int col = 0; col &lt; mat[0].length; col++)
   {
      if (row &lt; col)
         mat[row][col] = 1;
      else if (row == col)
         mat[row][col] = 2;
      else
         mat[row][col] = 3;
  }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qpret_16_opt_a" data-correct=""><div class="para" id="qpret_16-2-1-1-1">{ {2 1 1 1}, {3 2 1 1}, {3 3 2 1}}</div></li><li data-component="feedback" id="csawesome2_2_qpret_16_opt_a"><div class="para" id="qpret_16-2-1-2-1">When you create a 2-d array the first value is the number of rows and the second is the number of columns. This code will put a 1 in the array when the row index is less than the column index and a 2 in the array when the row and column index are the same, and a 3 in the array when the row index is greater than the column index.</div></li><li data-component="answer" id="csawesome2_2_qpret_16_opt_b"><div class="para" id="qpret_16-2-2-1-1">{ {2 3 3}, {1 2 3}, {1 1 2}, {1 1 1}}</div></li><li data-component="feedback" id="csawesome2_2_qpret_16_opt_b"><div class="para" id="qpret_16-2-2-2-1">This would be true if the first value when you create a 2-d array was the number of columns and the second was the number of rows. Also you would need to set the value to 3 when the column index was greater than the row and a 1 when the row index was greater than the column index.</div></li><li data-component="answer" id="csawesome2_2_qpret_16_opt_c"><div class="para" id="qpret_16-2-3-1-1">{ {2 1 1}, {3 2 1}, {3 3 2}, {3 3 3}}</div></li><li data-component="feedback" id="csawesome2_2_qpret_16_opt_c"><div class="para" id="qpret_16-2-3-2-1">This would be true if the first value when you create a 2-d array was the number of columns and the second was the number of rows.</div></li><li data-component="answer" id="csawesome2_2_qpret_16_opt_d"><div class="para" id="qpret_16-2-4-1-1">{ {2 3 3 3}, {1 2 3 3}, {1 1 2 3}}</div></li><li data-component="feedback" id="csawesome2_2_qpret_16_opt_d"><div class="para" id="qpret_16-2-4-2-1">This would be true if you set the value to 3 when the column index was greater than the row and a 1 when the row index was greater than the column index.</div></li><li data-component="answer" id="csawesome2_2_qpret_16_opt_e"><div class="para" id="qpret_16-2-5-1-1">{ {1 1 1 1}, {2 2 2 2}, {3 3 3 3}}</div></li><li data-component="feedback" id="csawesome2_2_qpret_16_opt_e"><div class="para" id="qpret_16-2-5-2-1">This would be true if you set the value to the row index.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 0.6.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qpret_17" data-multipleanswers="false"><div class="para" id="qpret_17-1-1">1-1-6-17: Given the following class declarations, and assuming that the following declaration appears in a client program: <code class="code-inline tex2jax_ignore">Base b = new Derived();</code>, what is the result of the call <code class="code-inline tex2jax_ignore">b.methodOne();</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Base
{

    public void methodOne()
    {
        System.out.print("A");
        methodTwo();
    }

    public void methodTwo()
    {
        System.out.print("B");
    }
}

public class Derived extends Base
{

    public void methodOne()
    {
        super.methodOne();
        System.out.print("C");
    }

    public void methodTwo()
    {
        super.methodTwo();
        System.out.print("D");
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qpret_17_opt_a"><div class="para" id="qpret_17-2-1-1-1">AB</div></li><li data-component="feedback" id="csawesome2_2_qpret_17_opt_a"><div class="para" id="qpret_17-2-1-2-1">This would be true if the object was created of type Base using new Base. But the object is really a Derived object. So all methods are looked for starting with the Derived class.</div></li><li data-component="answer" id="csawesome2_2_qpret_17_opt_b" data-correct=""><div class="para" id="qpret_17-2-2-1-1">ABDC</div></li><li data-component="feedback" id="csawesome2_2_qpret_17_opt_b"><div class="para" id="qpret_17-2-2-2-1">Even though b is declared as type Base it is created as an object of the Derived class, so all methods to it will be resolved starting with the Derived class. So the methodOne() in Derived will be called. This method first calls super.methodOne so this will invoke the method in the superclass (which is Base). So next the methodOne in Base will execute. This prints the letter "A" and invokes this.methodTwo(). Since b is really a Derived object, we check there first to see if it has a methodTwo. It does, so execution continues in Derived’s methodTwo. This method invokes super.methodTwo. So this will invoke the method in the super class (Base) named methodTwo. This method prints the letter "B" and then returns. Next the execution returns from the call to the super.methodTwo and prints the letter "D". We return to the Base class methodOne and return from that to the Derived class methodOne and print the letter "C".</div></li><li data-component="answer" id="csawesome2_2_qpret_17_opt_c"><div class="para" id="qpret_17-2-3-1-1">ABCD</div></li><li data-component="feedback" id="csawesome2_2_qpret_17_opt_c"><div class="para" id="qpret_17-2-3-2-1">After the call to methodOne in the super class printing "A", the code continues with the implicit this.methodTwo which resolves from the current object’s class which is Derived. methodTwo in the Derived class is executed which then calls super.methodTwo which invokes printin "B" from methodTwo in the Base class. Then the "D" in the Derive methodTwo is printed. Finally the program returns to methodOne in the Derived class are prints "C".</div></li><li data-component="answer" id="csawesome2_2_qpret_17_opt_d"><div class="para" id="qpret_17-2-4-1-1">ABC</div></li><li data-component="feedback" id="csawesome2_2_qpret_17_opt_d"><div class="para" id="qpret_17-2-4-2-1">The call to methodTwo in super.methodOne is to this.methodTwo which is the method from the Derived class. Consequently the "D" is also printed.</div></li><li data-component="answer" id="csawesome2_2_qpret_17_opt_e"><div class="para" id="qpret_17-2-5-1-1">Nothing is printed due to infinite recursion.</div></li><li data-component="feedback" id="csawesome2_2_qpret_17_opt_e"><div class="para" id="qpret_17-2-5-2-1">This is not an example of recursion. No method is called from within itself.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 0.6.18 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qpret_18" data-multipleanswers="false"><div class="para" id="qpret_18-1-1">1-1-6-18: Given the following code segment, what are the values of <code class="code-inline tex2jax_ignore">a</code> and <code class="code-inline tex2jax_ignore">b</code> after the <code class="code-inline tex2jax_ignore">for</code> loop finishes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int a = 10, b = 3, t;
for (int i=1; i&lt;=6; i++)
{
   t = a;
   a = i + b;
   b = t - i;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qpret_18_opt_a"><div class="para" id="qpret_18-2-1-1-1">a = 6 and b = 7</div></li><li data-component="feedback" id="csawesome2_2_qpret_18_opt_a"><div class="para" id="qpret_18-2-1-2-1">This would be true if the loop stopped when i was equal to 6.</div></li><li data-component="answer" id="csawesome2_2_qpret_18_opt_b"><div class="para" id="qpret_18-2-2-1-1">a = 6 and b = 13</div></li><li data-component="feedback" id="csawesome2_2_qpret_18_opt_b"><div class="para" id="qpret_18-2-2-2-1">Actually i = 6 and t = 6 and a = 13 after the loop finishes.</div></li><li data-component="answer" id="csawesome2_2_qpret_18_opt_c"><div class="para" id="qpret_18-2-3-1-1">a = 6 and b = 0</div></li><li data-component="feedback" id="csawesome2_2_qpret_18_opt_c"><div class="para" id="qpret_18-2-3-2-1">Actually i = 6 and t = 6 and b = 0 after the loop finishes.</div></li><li data-component="answer" id="csawesome2_2_qpret_18_opt_d"><div class="para" id="qpret_18-2-4-1-1">a = 0 and b = 13</div></li><li data-component="feedback" id="csawesome2_2_qpret_18_opt_d"><div class="para" id="qpret_18-2-4-2-1">Actually a = 13 and b = 0 after the loop finishes.</div></li><li data-component="answer" id="csawesome2_2_qpret_18_opt_e" data-correct=""><div class="para" id="qpret_18-2-5-1-1">a = 13 and b = 0</div></li><li data-component="feedback" id="csawesome2_2_qpret_18_opt_e"><div class="para" id="qpret_18-2-5-2-1">The variable i loops from 1 to 6 and each time the values are as follows: i = 1, t = 10, a = 4, b = 9, i = 2, t = 4, a  = 11, b =2, i = 3, t = 11, a = 5, b = 8, i = 4, t = 5, a = 12, b = 1, i = 5, t = 12, a = 6, b = 7, i = 6, t = 6, a = 13, b = 0</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 0.6.19 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qpret_19" data-multipleanswers="false">
                <div class="para" id="qpret_19-1-1">1-1-6-19: What is data encapsulation and how does Java implement it?</div>
                <li data-component="answer" id="csawesome2_2_qpret_19_opt_a">
                  <div class="para" id="qpret_19-2-1-1-1">Data (fields) can be directly accessed by all code in all classes.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qpret_19_opt_a">
                  <div class="para" id="qpret_19-2-1-2-1">Encapsulation is making data private so only code in the same class has direct access.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qpret_19_opt_b">
                  <div class="para" id="qpret_19-2-2-1-1">Data (fields) can be hidden inside of an object using the abstract visibility modifier.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qpret_19_opt_b">
                  <div class="para" id="qpret_19-2-2-2-1">There is no abstract visibility modifier.  You cannot use the keyword abstract on variable declarations.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qpret_19_opt_c" data-correct="">
                  <div class="para" id="qpret_19-2-3-1-1">Data (fields) can be hidden inside an object using the visibility modifier private.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qpret_19_opt_c">
                  <div class="para" id="qpret_19-2-3-2-1">This is the definition of encapsulation and this is done in Java using private (a member is directly accessible only in the class that defines it) and protected (a member is directly accessible only within code in the same package and in subclasses).</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qpret_19_opt_d">
                  <div class="para" id="qpret_19-2-4-1-1">Data (fields) are directly accessible by objects in the same package and in subclasses.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qpret_19_opt_d">
                  <div class="para" id="qpret_19-2-4-2-1">Encapsulation means that only code in the defining class has direct access. The visibility modifier protected gives diredct access to code in classes in the same package and subclasses.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qpret_19_opt_e">
                  <div class="para" id="qpret_19-2-5-1-1">Data (fields) are directly accessible by objects in the same package.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qpret_19_opt_e">
                  <div class="para" id="qpret_19-2-5-2-1">Encapsulation means that only code in the defining class has direct access. The default package access gives direct access to code in classes in the same package.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 0.6.20 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qpret_20" data-multipleanswers="false"><div class="para" id="qpret_20-1-1">1-1-6-20: Which of the following reasons for using an inheritance heirarchy are valid?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">I.   Methods from a superclass can be used in a subclass without
     rewriting or copying code.
II.  Objects from subclasses can be passed as arguments to a method
     designed for the superclass
III. Objects from subclasses can be stored in the same array
IV.  All of the above
V.   None of the above
</code></pre></div><li data-component="answer" id="csawesome2_2_qpret_20_opt_a"><div class="para" id="qpret_20-2-1-1-1">V.</div></li><li data-component="feedback" id="csawesome2_2_qpret_20_opt_a"><div class="para" id="qpret_20-2-1-2-1">In fact, all of the reasons listed are valid. Subclasses can reuse methods written for superclasses without code replication, subclasses can be stored in the same array, and passed as arguments to methods meant for the superclass. All of which make writing code more streamlined.</div></li><li data-component="answer" id="csawesome2_2_qpret_20_opt_b"><div class="para" id="qpret_20-2-2-1-1">I and II</div></li><li data-component="feedback" id="csawesome2_2_qpret_20_opt_b"><div class="para" id="qpret_20-2-2-2-1">III is also valid. In some cases you might want to store subclasses together in a single array, and inheritance allows for this.</div></li><li data-component="answer" id="csawesome2_2_qpret_20_opt_c"><div class="para" id="qpret_20-2-3-1-1">I and III</div></li><li data-component="feedback" id="csawesome2_2_qpret_20_opt_c"><div class="para" id="qpret_20-2-3-2-1">II is also valid. In some cases a single method is applicable for a number of subclasses, and inheritance allows you to pass objects of the subclasses to the same method instead of writing individual methods for each subclass.</div></li><li data-component="answer" id="csawesome2_2_qpret_20_opt_d" data-correct=""><div class="para" id="qpret_20-2-4-1-1">IV</div></li><li data-component="feedback" id="csawesome2_2_qpret_20_opt_d"><div class="para" id="qpret_20-2-4-2-1">All of these are valid reasons to use an inheritance heirarchy.</div></li><li data-component="answer" id="csawesome2_2_qpret_20_opt_e"><div class="para" id="qpret_20-2-5-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qpret_20_opt_e"><div class="para" id="qpret_20-2-5-2-1">II and III are also valid, in some cases a single method is applicable for a number of subclasses, and inheritance allows you to pass all the subclasses to the same method instead of writing individual methods for each subclass and you might want to store subclasses together in a single array, and inheritance allows for this.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
  </chapter>
  <chapter>
    <id>csawesome2-5</id>
    <title>Using Objects and Methods</title>
    <subchapter>
      <id>introduction-to-algorithms-programming-and-compilers</id>
      <title>Introduction to Algorithms, Programming, and Compilers</title>
      <question>
        <label>Video: Fc-BQzPbJmU</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="Fc-BQzPbJmU" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.1.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_printName">
                <div class="ac_question" id="csawesome2_2_printName_question">
                  <div class="para" id="printName-1-1">Run this code to see the output below it. Then change the code to print your name, for example “Hi Pat!”, and run again.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_printName_editor" data-question_label="" data-codelens="true">public class MyClass
{
    public static void main(String[] args)
    {
        System.out.println("Hi there!");
    }
}
====
// should pass if/when they run code
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Hi there!";
        boolean passed =
                getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.1.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone hparsons_section">
              <div data-component="hparsons" class="hparsons_section" id="csawesome2_2_mp-main-method-order-1">
                <div class="hp_question">
                  <div class="para" id="mp-main-method-order-1-1-1">Drag or click on the blocks you need to move them from the top section into the yellow area to create the first line for the <code class="code-inline tex2jax_ignore">main</code> method. There are extra blocks that you don’t need.</div>
                </div>
                <div class="hparsons"/>
                <textarea style="visibility: hidden" data-randomize="true" data-reuse="false" data-blockanswer="0 1 2 3">
--blocks--
public static

void main(

String[]

args)

public Static

</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.1.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone hparsons_section">
              <div data-component="hparsons" class="hparsons_section" id="csawesome2_2_mp-main-method-order-2">
                <div class="hp_question">
                  <div class="para" id="mp-main-method-order-2-1-1">Drag or click on the blocks you need to move them from the top section into the yellow area to create the first line for the <code class="code-inline tex2jax_ignore">main</code> method. There are extra blocks that you don’t need.</div>
                </div>
                <div class="hparsons"/>
                <textarea style="visibility: hidden" data-randomize="true" data-reuse="false" data-blockanswer="0 1 2 3 4 5">
--blocks--
public

static

void

main(

String[]

args)

Public

Static

</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.1.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone hparsons_section">
              <div data-component="hparsons" class="hparsons_section" id="csawesome2_2_mp-main-method-order-3">
                <div class="hp_question">
                  <div class="para" id="mp-main-method-order-3-1-1">Drag or click on the blocks you need to move them from the top section into the yellow area to create the first line for the <code class="code-inline tex2jax_ignore">main</code> method. There are extra blocks that you don’t need.</div>
                </div>
                <div class="hparsons"/>
                <textarea style="visibility: hidden" data-randomize="true" data-reuse="false" data-blockanswer="0 1 2 3 4 5 6 7 8">
--blocks--
public

static

void

main

(

String

[] 

args

)

()

</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.1.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone hparsons_section">
              <div data-component="hparsons" class="hparsons_section" id="csawesome2_2_mp-print-order-1">
                <div class="hp_question">
                  <div class="para" id="mp-print-order-1-1-1">Drag or click on the blocks you need to move them from the top section into the yellow area to create a Java statement that will print “Hi!”. There are extra blocks that you don’t need.</div>
                </div>
                <div class="hparsons"/>
                <textarea style="visibility: hidden" data-randomize="true" data-reuse="false" data-blockanswer="0 1 2 3 4 5 6 7">
--blocks--
System.

out

.

println

(

"Hi!"

)

;

system

</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.1.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone hparsons_section">
              <div data-component="hparsons" class="hparsons_section" id="csawesome2_2_mp-print-order-2">
                <div class="hp_question">
                  <div class="para" id="mp-print-order-2-1-1">Drag or click on the blocks you need to move them from the top section into the yellow area to create a Java statement that will print Bye!”. There are extra blocks that you don’t need.</div>
                </div>
                <div class="hparsons"/>
                <textarea style="visibility: hidden" data-randomize="true" data-reuse="false" data-blockanswer="0 1 2 3 4 5 6 7">
--blocks--
System.

out

.

println

(

"Bye!"

)

;

Out

</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: auv10y-dN4s</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="auv10y-dN4s" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.1.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_mixed-hi">
                <div class="parsons_question parsons-text">
                  <div class="para" id="mixed-hi-1-1">The following has all the correct code to print out “Hi my friend!” when the code is run, but the code is mixed up.  Drag the blocks from left to right and put them in the correct order.  Click on the “Check Me” button to check your solution. You will be told if any of the blocks are in the wrong order or if you need to remove one or more blocks. After three incorrect attempts you will be able to use the Help Me button to make the problem easier.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Hello
{
---
   public static void main(String[] args)
   {
   
---
      System.out.println("Hi my friend!");
      
---
   }
   
---
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.1.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_mixed-hi-paired">
                <div class="parsons_question parsons-text">
                  <div class="para" id="mixed-hi-paired-1-1">The following has all the correct code to print out “Hi there!” when the code is run, but the code is mixed up and contains some extra blocks with errors.  Drag the needed blocks from left to right and put them in the correct order.  Click on the “Check Me” button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Hello
{
---
public Class Hello
{                          #paired
---
   public static void main(String[] args)
   {
   
---
   public static void main()
   {                         
    #paired
---
      System.out.println("Hi there!");
      
---
      System.out.println("Hi there!") 
       #paired
---
   }
   
---
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.1.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_sc2error1">
                <div class="ac_question" id="csawesome2_2_sc2error1_question">
                  <div class="para" id="sc2error1-1-1">Fix the code below.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_sc2error1_editor" data-question_label="" data-codelens="true">public class FirstClass
{
    public static void main(String[] args)
    {
        System.out.println("Hi there!);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Hi there!";
        boolean passed =
                getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.1.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_sc2error2">
                <div class="ac_question" id="csawesome2_2_sc2error2_question">
                  <div class="para" id="sc2error2-1-1">Fix the code below.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_sc2error2_editor" data-question_label="" data-codelens="true">public class SecondClass
{
    public static void main(String[] args)
    {
        System.out.println("Hi there!";
    }
}
====
// should pass if/when they run code
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Hi there!";
        boolean passed =
                getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.1.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_sc2error3">
                <div class="ac_question" id="csawesome2_2_sc2error3_question">
                  <div class="para" id="sc2error3-1-1">Fix the code below.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_sc2error3_editor" data-question_label="" data-codelens="true">public class ThirdClass
{
    public static void main(String[] args)
    {
        system.out.println("Hi there!")
    }
}
====
// should pass if/when they run code
// This doesn't really work because it filters out the \n
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Hi there!";
        boolean passed =
                getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.1.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_divideByZeroDemo">
                <div class="ac_question" id="csawesome2_2_divideByZeroDemo_question">
                  <div class="para" id="divideByZeroDemo-1-1">The following code has a run-time error. When you click on run, the compiler will not catch it since it is not a syntax error. The program will run and try to compute 3 divided by 0 which cannot be computed. This will cause a run-time error, and the program will report an <dfn class="terminology">ArithmeticException</dfn>. Try it out!</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_divideByZeroDemo_editor" data-question_label="" data-codelens="true">public class DivideByZero
{
   public static void main(String[] args)
   {
       System.out("It makes no sense to divide a number by zero!");
       System.out.println(3/0);
   }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String target = "DivideByZero";
        boolean passed = checkCodeContains("DivideByZero", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.1.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge1-1">
                <div class="ac_question" id="csawesome2_2_challenge1-1_question">
                  <div class="para" id="challenge1-1-1-1">Fix the code below.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge1-1_editor" data-question_label="" data-codelens="true">public class Challenge1_1
{
   public static void main(String[] args)
   {
       System.out.print("Good morning! ")
       system.out.print("Good afternoon!);
       System.Print " And good evening!";

}
====
// should pass if/when they run code
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Good morning! Good afternoon! And good evening";
        boolean passed =
                getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.1.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP1-1-print" data-multipleanswers="false"><div class="para" id="AP1-1-print-1-1">2-14-16: Consider the following code segment.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">System.out.println("Roses are red, ")      // Line 1;
System.out.println("Violets are blue, ")  // Line 2;
System.out.println("Unexpected '}' on line 32. ")  // Line 3;
</code></pre></div> <div class="para" id="AP1-1-print-1-3">The code segment is intended to produce the following output but may not work as intended.</div> &lt;pre&gt;Roses are red, Violets are blue, Unexpected ’}’ on line 32.&lt;/pre&gt; <div class="para" id="AP1-1-print-1-5">Which change, if any, can be made so that the code segment produces the intended output?</div><li data-component="answer" id="csawesome2_2_AP1-1-print_opt_a"><div class="para" id="AP1-1-print-2-1-1-1">Replacing System with system on all lines.</div></li><li data-component="feedback" id="csawesome2_2_AP1-1-print_opt_a"><div class="para" id="AP1-1-print-2-1-2-1">The class name System is always capitalized.</div></li><li data-component="answer" id="csawesome2_2_AP1-1-print_opt_b"><div class="para" id="AP1-1-print-2-2-1-1">Replacing println with print on lines 1 and 2.</div></li><li data-component="feedback" id="csawesome2_2_AP1-1-print_opt_b"><div class="para" id="AP1-1-print-2-2-2-1">println is correct to print out with a newline in between.</div></li><li data-component="answer" id="csawesome2_2_AP1-1-print_opt_c"><div class="para" id="AP1-1-print-2-3-1-1">Removing the single quotes in line 3.</div></li><li data-component="feedback" id="csawesome2_2_AP1-1-print_opt_c"><div class="para" id="AP1-1-print-2-3-2-1">The single quotes are fine in this line.</div></li><li data-component="answer" id="csawesome2_2_AP1-1-print_opt_d" data-correct=""><div class="para" id="AP1-1-print-2-4-1-1">Putting the semicolon after the ) on each line.</div></li><li data-component="feedback" id="csawesome2_2_AP1-1-print_opt_d"><div class="para" id="AP1-1-print-2-4-2-1">Correct! The semicolon should go after each statement but not in the comment.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>variables-and-data-types</id>
      <title>Variables and Data Types</title>
      <question>
        <label>Video: pHgYlVjagmA</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="pHgYlVjagmA" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.2.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_chooseType1" data-multipleanswers="false">
                <div class="para" id="chooseType1-1-1">1-2-2: What type should you use to represent the average grade for a course?</div>
                <li data-component="answer" id="csawesome2_2_chooseType1_opt_a">
                  <div class="para" id="chooseType1-2-1-1-1">int</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_chooseType1_opt_a">
                  <div class="para" id="chooseType1-2-1-2-1">While you could use an int, this would throw away any digits after the decimal point, so it isn’t the best choice.  You might want to round up a grade based on the average (89.5 or above is an A).</div>
                </li>
                <li data-component="answer" id="csawesome2_2_chooseType1_opt_b" data-correct="">
                  <div class="para" id="chooseType1-2-2-1-1">double</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_chooseType1_opt_b">
                  <div class="para" id="chooseType1-2-2-2-1">An average is calculated by summing all the values and dividing by the number of values.  To keep the most amount of information this should be done with decimal numbers so use a double.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_chooseType1_opt_c">
                  <div class="para" id="chooseType1-2-3-1-1">boolean</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_chooseType1_opt_c">
                  <div class="para" id="chooseType1-2-3-2-1">Is an average true or false?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_chooseType1_opt_d">
                  <div class="para" id="chooseType1-2-4-1-1">String</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_chooseType1_opt_d">
                  <div class="para" id="chooseType1-2-4-2-1">While you can use a string to represent a number, using a number type (int or double) is better for doing calculations.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.2.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_chooseType2" data-multipleanswers="false">
                <div class="para" id="chooseType2-1-1">1-2-3: What type should you use to represent the number of people in a household?</div>
                <li data-component="answer" id="csawesome2_2_chooseType2_opt_a" data-correct="">
                  <div class="para" id="chooseType2-2-1-1-1">int</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_chooseType2_opt_a">
                  <div class="para" id="chooseType2-2-1-2-1">The number of people is a whole number so using an integer make sense.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_chooseType2_opt_b">
                  <div class="para" id="chooseType2-2-2-1-1">double</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_chooseType2_opt_b">
                  <div class="para" id="chooseType2-2-2-2-1">Can you have 2.5 people in a household?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_chooseType2_opt_c">
                  <div class="para" id="chooseType2-2-3-1-1">boolean</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_chooseType2_opt_c">
                  <div class="para" id="chooseType2-2-3-2-1">Is the number of people something that is either true or false?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_chooseType2_opt_d">
                  <div class="para" id="chooseType2-2-4-1-1">String</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_chooseType2_opt_d">
                  <div class="para" id="chooseType2-2-4-2-1">While you can use a string, a number is better for doing calculations with (like finding the average number of people in a household).</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.2.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_chooseType3" data-multipleanswers="false">
                <div class="para" id="chooseType3-1-1">1-2-4: What type should you use to hold the first name of a person?</div>
                <li data-component="answer" id="csawesome2_2_chooseType3_opt_a">
                  <div class="para" id="chooseType3-2-1-1-1">int</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_chooseType3_opt_a">
                  <div class="para" id="chooseType3-2-1-2-1">People don’t usually have whole numbers like 7 as their first name.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_chooseType3_opt_b">
                  <div class="para" id="chooseType3-2-2-1-1">double</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_chooseType3_opt_b">
                  <div class="para" id="chooseType3-2-2-2-1">People don’t usually have decimal numbers like 3.5 as their first name.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_chooseType3_opt_c">
                  <div class="para" id="chooseType3-2-3-1-1">boolean</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_chooseType3_opt_c">
                  <div class="para" id="chooseType3-2-3-2-1">This could only be used if the name was true or false.  People don’t usually have those as first names.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_chooseType3_opt_d" data-correct="">
                  <div class="para" id="chooseType3-2-4-1-1">String</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_chooseType3_opt_d">
                  <div class="para" id="chooseType3-2-4-2-1">Strings hold sequences of characters like you have in a person’s name.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.2.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_chooseType4" data-multipleanswers="false">
                <div class="para" id="chooseType4-1-1">1-2-5: What type should you use to record if it is raining or not?</div>
                <li data-component="answer" id="csawesome2_2_chooseType4_opt_a">
                  <div class="para" id="chooseType4-2-1-1-1">int</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_chooseType4_opt_a">
                  <div class="para" id="chooseType4-2-1-2-1">While you could use an int and use 0 for false and 1 for true this would waste 31 of the 32 bits an int uses. Java has a special type for things that are either true or false.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_chooseType4_opt_b">
                  <div class="para" id="chooseType4-2-2-1-1">double</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_chooseType4_opt_b">
                  <div class="para" id="chooseType4-2-2-2-1">Java has a special type for variables that are either true or false.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_chooseType4_opt_c" data-correct="">
                  <div class="para" id="chooseType4-2-3-1-1">boolean</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_chooseType4_opt_c">
                  <div class="para" id="chooseType4-2-3-2-1">Java uses boolean for values that are only true or false.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_chooseType4_opt_d">
                  <div class="para" id="chooseType4-2-4-1-1">String</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_chooseType4_opt_d">
                  <div class="para" id="chooseType4-2-4-2-1">While you can use a string to represent "True" or "False", using a boolean variable would be better for making decisions.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.2.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_chooseType5" data-multipleanswers="false">
                <div class="para" id="chooseType5-1-1">1-2-6: What type should you use to represent the amount of money you have?</div>
                <li data-component="answer" id="csawesome2_2_chooseType5_opt_a">
                  <div class="para" id="chooseType5-2-1-1-1">int</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_chooseType5_opt_a">
                  <div class="para" id="chooseType5-2-1-2-1">The integer type (int) can’t be used to represent decimal numbers so you couldn’t use it if you had any cents.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_chooseType5_opt_b" data-correct="">
                  <div class="para" id="chooseType5-2-2-1-1">double</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_chooseType5_opt_b">
                  <div class="para" id="chooseType5-2-2-2-1">The double type can be used to represent an amount of money.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_chooseType5_opt_c">
                  <div class="para" id="chooseType5-2-3-1-1">boolean</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_chooseType5_opt_c">
                  <div class="para" id="chooseType5-2-3-2-1">Java uses boolean for values that are only true or false.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_chooseType5_opt_d">
                  <div class="para" id="chooseType5-2-4-1-1">String</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_chooseType5_opt_d">
                  <div class="para" id="chooseType5-2-4-2-1">While you can use a string to represent the amount of money you have it is easier to do calculations on the numeric types (int or double).</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.2.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_strConcatDemo">
                <div class="ac_question" id="csawesome2_2_strConcatDemo_question">
                  <div class="para" id="strConcatDemo-1-1">Run the following code to see what is printed. Then, change the values and run it again. Try adding quotes to variables and removing spaces in the print statements to see what happens.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_strConcatDemo_editor" data-question_label="" data-codelens="true">public class Test2
{
    public static void main(String[] args)
    {
        int score;
        score = 0;
        System.out.print("The score is ");
        System.out.println(score);

        double price = 23.25;
        System.out.println("The price is " + price);

        boolean won = false;
        System.out.println(won);
        won = true;
        System.out.println(won);

        String name = "Jose";
        System.out.println("Hi " + name);
    }
}
====
// should pass if/when they run code
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "The score is 0\nThe price is 23.25\nfalse\ntrue\nHi Jose";
        boolean passed =
                getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.2.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_var_declare">
                <span data-question="">
                  <div class="para" id="var_declare-1-1">Click on all of the variable declarations in the following code.</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="var_declare-2-1">Variable declarations start with a type and then a name.</div>
                </span>
                <pre><span data-incorrect="">public class Test2</span>
<span data-incorrect="">{</span>
    <span data-incorrect="">public static void main(String[] args)</span>
    <span data-incorrect="">{</span>
        <span data-correct="">int numLives;</span>
        <span data-incorrect="">numLives = 0;</span>
        <span data-incorrect="">System.out.println(numLives);</span>
        <span data-correct="">double health;</span>
        <span data-incorrect="">health = 8.5;</span>
        <span data-incorrect="">System.out.println(health);</span>
        <span data-correct="">boolean powerUp;</span>
        <span data-incorrect="">powerUp = true;</span>
        <span data-incorrect="">System.out.println(powerUp);</span>
    <span data-incorrect="">}</span>
<span data-incorrect="">}</span>
</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.2.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_var_init">
                <span data-question="">
                  <div class="para" id="var_init-1-1">Click on all of the variable initializations (first time the variable is set to a value) in the following code.</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="var_init-2-1">Variables are initialized using name = value;</div>
                </span>
                <pre><span data-incorrect="">public class Test2</span>
<span data-incorrect="">{</span>
    <span data-incorrect="">public static void main(String[] args)</span>
    <span data-incorrect="">{</span>
        <span data-incorrect="">int numLives;</span>
        <span data-correct="">numLives = 0;</span>
        <span data-incorrect="">System.out.println(numLives);</span>
        <span data-correct="">double health = 8.5;</span>
        <span data-incorrect="">System.out.println(health);</span>
        <span data-correct="">boolean powerUp = true;</span>
        <span data-incorrect="">System.out.println(powerUp);</span>
    <span data-incorrect="">}</span>
<span data-incorrect="">}</span>
</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.2.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_asgn_order">
                <div class="ac_question" id="csawesome2_2_asgn_order_question">
                  <div class="para" id="asgn_order-1-1">This assignment statement below is in the wrong order. Try to fix it to compile and run.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_asgn_order_editor" data-question_label="" data-codelens="true">public class Test3
{
    public static void main(String[] args)
    {
        int score;
        4 = score;
        System.out.println(score);
    }
}
====
// should pass if/when they run code
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "4";
        boolean passed =
                getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.2.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_fillDecVar1">
                <div class="para" id="fillDecVar1-1-1">1-2-11: Fill in the following: [blank] age = [blank]; to declare age to be an integer and set its value to 5. <input type="text" placeholder="Text"/>  <input type="text" placeholder="Number"/></div>
                <script type="application/json">[[{"regex": "^\\s*^\\s*int\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"fillDecVar1-2-1-1-1-1\"&gt;Correct.  You typically use whole numbers for ages after age 1.&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"fillDecVar1-2-1-2-1-1\"&gt;Remember that Java uses just the first 3 letters of integer&lt;\/div&gt;"}], [{"number": [[5, 5], [5, 5]], "feedback": "&lt;div class=\"para\" id=\"fillDecVar1-2-2-1-1-1\"&gt;Correct.  You can initialize to a value.&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"fillDecVar1-2-2-2-1-1\"&gt;Use 5 in the second blank&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.2.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_fillDecVar2">
                <div class="para" id="fillDecVar2-1-1">1-2-12: What type should you use for a shoe size like 8.5? <input type="text" placeholder="Text"/></div>
                <script type="application/json">[[{"regex": "^\\s*^\\s*^\\s*double$\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"fillDecVar2-2-1-1-1-1\"&gt;Correct.  Any variable that needs to values after the decimal point should be declared as a double.&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"fillDecVar2-2-1-2-1-1\"&gt;What type allows for a decimal value&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.2.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_fillDecVar3">
                <div class="para" id="fillDecVar3-1-1">1-2-13: What type should you use for a number of tickets? <input type="text" placeholder="Text"/></div>
                <script type="application/json">[[{"regex": "^\\s*^\\s*^\\s*int$\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"fillDecVar3-2-1-1-1-1\"&gt;Correct. You can’t buy half a ticket so this will be an integer.&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"fillDecVar3-2-1-2-1-1\"&gt;Use a type that represents whole numbers like 1, 2, 3, etc.&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.2.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_declareVars1">
                <div class="parsons_question parsons-text">
                  <div class="para" id="declareVars1-1-1">The following code declares and initializes variables for storing a number of visits, a person’s temperature, and if the person has insurance or not.  It also includes extra blocks that are not needed in a correct solution.  Drag the needed blocks from the left area into the correct order (declaring numVisits, temp, and hasInsurance in that order) in the right area.  Click on the “Check Me” button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">int numVisits = 5;
---
Int numVisits = 5;  #paired
---
double temp = 101.2;
---
Double temp = 101.2;   #paired
---
boolean hasInsurance = false;
---
Boolean hasInsurance = false;  #paired</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.2.18 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_varCaseSensitive">
                <div class="ac_question" id="csawesome2_2_varCaseSensitive_question">
                  <div class="para" id="varCaseSensitive-1-1">Java is case sensitive so <code class="code-inline tex2jax_ignore">gameScore</code> and <code class="code-inline tex2jax_ignore">gamescore</code> are not the same.  Run and fix the code below to use the right variable name.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_varCaseSensitive_editor" data-question_label="" data-codelens="true">public class CaseSensitiveClass
{
    public static void main(String[] args)
    {
        int gameScore = 0; // variable name using camel case
        // this is using a different variable without camel case!
        System.out.println("gameScore is " + gamescore);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "gameScore is 0\n";
        boolean passed =
                getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.2.19 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_fillName1">
                <div class="para" id="fillName1-1-1">1-2-16: What is the camel case variable name for a variable that represents a shoe size? <input type="text" placeholder="Text"/></div>
                <script type="application/json">[[{"regex": "^\\s*^\\s*^\\s*shoeSize$\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"fillName1-2-1-1-1-1\"&gt;Correct.  Start with the first word in all lowercase and uppercase the first letter of each additional word&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"fillName1-2-1-2-1-1\"&gt;In camel case just appended the words after each other but uppercase the first letter of each word after the 1st word&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.2.20 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_fillName2">
                <div class="para" id="fillName2-1-1">1-2-17: What is the camel case variable name for a variable that represents the top score? <input type="text" placeholder="Text"/></div>
                <script type="application/json">[[{"regex": "^\\s*^\\s*^\\s*topScore$\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"fillName2-2-1-1-1-1\"&gt;Correct.&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"fillName2-2-1-2-1-1\"&gt;In camel case just put the words after each other but uppercase the first letter of each word after the 1st word.&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.2.21 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge1-2-weather">
                <div class="ac_question" id="csawesome2_2_challenge1-2-weather_question">
                  <div class="para" id="challenge1-2-weather-1-1">Debug the following code. Can you find the all the bugs and get the code to run?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge1-2-weather_editor" data-question_label="" data-codelens="true">public class Challenge1_2_weather
{
   public static void main(String[] args)
   {
       int temperature = 70.5;
       double tvChannel = 101;
       boolean sunny = 1

       System.out.print("Welcome to the weather report on Channel ")
       System.out.println(TVchannel);
       System.out.print("The temperature today is );
       System.out.println(tempurature);
       System.out.print("Is it sunny today? ");
       System.out.println(sunny);
   }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "Welcome to the weather report on Channel 101 \n"
                    + "The temperature today is 70.5\n"
                    + "Is it sunny today? true";
        boolean passed =
                getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.2.22 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challengeMadLibs">
                <div class="ac_question" id="csawesome2_2_challengeMadLibs_question">
                  <div class="para" id="challengeMadLibs-1-1">Replace the text “Replace” below with silly words following the description in the variable names (for example, “cats” for a plural noun, “blue” for a color, etc.) to create a silly poem. Run the code to see the poem. Then, create your own silly story using 5 more String variables.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challengeMadLibs_editor" data-question_label="" data-codelens="true">public class MadLibs1
{
    public static void main(String[] args)
    {
        // fill these in with silly words/strings (don't read the poem yet)
        String pluralnoun1 = "Replace";
        String color1 = "Replace";
        String color2 = "Replace";
        String food = "Replace";
        String pluralnoun2 = "Replace";


        // Run to see the silly poem!
        System.out.println("Roses are " + color1);
        System.out.println(pluralnoun1 + " are " + color2);
        System.out.println("I like " + food);
        System.out.println("Do " + pluralnoun2 + " like them too?");

        // Now come up with your own silly poem!
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Roses are *\n* are *\nI like *\nDo * like them too?";

        boolean passed = getResultsRegEx(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testNull() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Replace";

        String actual = countOccurences(output, expect) + " Replace values";

        boolean passed = getResults("0 Replace values", actual, "Change all \"Replace\" values");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.2.23 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP1-2-types" data-multipleanswers="false">
                <div class="para" id="AP1-2-types-1-1">1-2-20: Which of the following pairs of declarations are the most appropriate to store a student’s average course grade in the variable GPA and the number of students in the variable numStudents?</div>
                <li data-component="answer" id="csawesome2_2_AP1-2-types_opt_a">
                  <div class="para" id="AP1-2-types-2-1-1-1">int GPA; int numStudents;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP1-2-types_opt_a">
                  <div class="para" id="AP1-2-types-2-1-2-1">The average grade in GPA could be a decimal number like 3.5.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP1-2-types_opt_b" data-correct="">
                  <div class="para" id="AP1-2-types-2-2-1-1">double GPA; int numStudents;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP1-2-types_opt_b">
                  <div class="para" id="AP1-2-types-2-2-2-1">Yes, the average grade could be a decimal number, and the number of students is an integer.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP1-2-types_opt_c">
                  <div class="para" id="AP1-2-types-2-3-1-1">double GPA; double numStudents;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP1-2-types_opt_c">
                  <div class="para" id="AP1-2-types-2-3-2-1">The number of students is an integer number. Although it could be saved in a double, an int would be more appropriate.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP1-2-types_opt_d">
                  <div class="para" id="AP1-2-types-2-4-1-1">int GPA; boolean numStudents;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP1-2-types_opt_d">
                  <div class="para" id="AP1-2-types-2-4-2-1">The average grade in GPA could be a decimal number like 3.5. Booleans hold a true or false value, not numbers.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP1-2-types_opt_e">
                  <div class="para" id="AP1-2-types-2-5-1-1">double GPA; boolean numStudents;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP1-2-types_opt_e">
                  <div class="para" id="AP1-2-types-2-5-2-1">Booleans hold a true or false value, not numbers.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>expressions-and-output</id>
      <title>Expressions and Output</title>
      <question>
        <label>Exercise 1.3.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_printCommands">
                <div class="ac_question" id="csawesome2_2_printCommands_question">
                  <div class="para" id="printCommands-1-1">Run this code to see the output below it. How would you change it to print the ! on the same line as Hi there keeping all 3 print statements?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_printCommands_editor" data-question_label="" data-codelens="true">public class MyClass
{
    public static void main(String[] args)
    {
        System.out.print("Hi ");
        System.out.println("there");
        System.out.print("!");
    }
}
====
// should pass if/when they run code
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Hi there!";
        boolean passed =
                getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testLineCount() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "1 output line";
        String actual = "  output line";

        if (output.length() &gt; 0)
        {
            actual = output.split("\n").length + actual;
        }
        else
        {
            actual = output.length() + actual;
        }
        boolean passed =
                getResults(expect, actual, "Checking lines of output");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.3.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_bhescape">
                <div class="ac_question" id="csawesome2_2_bhescape_question">
                  <div class="para" id="bhescape-1-1">Here are the escape sequences that may be used in the AP course.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_bhescape_editor" data-question_label="" data-codelens="true">public class TestEscape
{
    public static void main(String[] args)
    {
        String message =
                "Here is a backslash quote \" "
                        + " and a backslashed backslash (\\) "
                        + "Backslash n \n prints out a new line.";
        System.out.println(message);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = output;
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.3.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcop1">
                <div class="ac_question" id="csawesome2_2_lcop1_question">
                  <div class="para" id="lcop1-1-1">Run the code below to see all the operators in action. Do all of those operators do what you expected? What about 2 / 3? Isn’t it surprising that it prints 0?  See the note above about truncating division with integers. Change the code to make it print the decimal part of the division too. You can do this by making at least one of the numbers a double like 2.0.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcop1_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        System.out.println(2 + 3);
        System.out.println(2 - 3);
        System.out.println(2 * 3);
        System.out.println(2 / 3);
    }
}
====
import static org.junit.Assert.*;
import org.junit.Test;
import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "5\n-1\n6\n" + 2.0/3;
        boolean passed =
                getResults(expect, output, "Expected output from main. Make sure you change 2/3 to 2.0/3.");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.3.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_cm2in-runtime-error">
                <div class="ac_question" id="csawesome2_2_cm2in-runtime-error_question">
                  <div class="para" id="cm2in-runtime-error-1-1">The following code is trying to convert centimeters to inches, but it has a math error. Run the code to see that there are no error messages, but it simply does the wrong calculation! Can you fix the logic error in the code? 1 inch = 2.54 cms.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_cm2in-runtime-error_editor" data-question_label="" data-codelens="true">public class CmToInches
{
    public static void main(String[] args)
    {
        System.out.print("100 centimeters in inches is: ");
        System.out.println(100 * 2.54);
    }
}
====
import static org.junit.Assert.*;
import org.junit.Test;
import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "" + 100/2.54;
        boolean passed =
                getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
    @Test
    public void test2()
    {
        String target = "/";
        boolean passed = checkCodeContains("the division operator", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.3.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_compound1">
                <div class="ac_question" id="csawesome2_2_compound1_question">
                  <div class="para" id="compound1-1-1">In the example below, try to guess what it will print out and then run it to see if you are right. Remember to consider <dfn class="terminology">operator precedence</dfn>. How do the parentheses change the precedence?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_compound1_editor" data-question_label="" data-codelens="true">public class TestCompound
{
    public static void main(String[] args)
    {
        System.out.println(2 + 3 * 2);
        System.out.println((2 + 3) * 2);
        System.out.println(2 + (3 * 2));
    }
}
====
// Test Code for Lesson 1.4 Expressions - compounds
import static org.junit.Assert.*;

import org.junit.Test;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "8\n10\n8";
        boolean passed =
                getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: jp-T9lFISlI</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="jp-T9lFISlI" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.3.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcop2">
                <div class="ac_question" id="csawesome2_2_lcop2_question">
                  <div class="para" id="lcop2-1-1">In the example below, try to guess what it will print out and then run it to see if you are right.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcop2_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        System.out.println(11 % 10);
        System.out.println(3 % 4);
        System.out.println(8 % 2);
        System.out.println(9 % 2);
    }
}
====
// Test Code for Lesson 1.4 Expressions - lcop2
import static org.junit.Assert.*;

import org.junit.Test;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "1\n3\n0\n1";
        boolean passed =
                getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.3.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mcq-rem1" data-multipleanswers="false">
                <div class="para" id="mcq-rem1-1-1">1-3-8: What is the result of 158 % 10?</div>
                <li data-component="answer" id="csawesome2_2_mcq-rem1_opt_a">
                  <div class="para" id="mcq-rem1-2-1-1-1">15</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq-rem1_opt_a">
                  <div class="para" id="mcq-rem1-2-1-2-1">This would be the result of 158 divided by 10.  % gives you the remainder.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mcq-rem1_opt_b">
                  <div class="para" id="mcq-rem1-2-2-1-1">16</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq-rem1_opt_b">
                  <div class="para" id="mcq-rem1-2-2-2-1">% gives you the remainder after the division.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mcq-rem1_opt_c" data-correct="">
                  <div class="para" id="mcq-rem1-2-3-1-1">8</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq-rem1_opt_c">
                  <div class="para" id="mcq-rem1-2-3-2-1">When you divide 158 by 10 you get a remainder of 8.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.3.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mcq-rem2" data-multipleanswers="false">
                <div class="para" id="mcq-rem2-1-1">1-3-9: What is the result of 3 % 8?</div>
                <li data-component="answer" id="csawesome2_2_mcq-rem2_opt_a" data-correct="">
                  <div class="para" id="mcq-rem2-2-1-1-1">3</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq-rem2_opt_a">
                  <div class="para" id="mcq-rem2-2-1-2-1">8 goes into 3 no times so the remainder is 3.  The remainder of a smaller number divided by a larger number is always the smaller number!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mcq-rem2_opt_b">
                  <div class="para" id="mcq-rem2-2-2-1-1">2</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq-rem2_opt_b">
                  <div class="para" id="mcq-rem2-2-2-2-1">This would be the remainder if the question was 8 % 3 but here we are asking for the reminder after we divide 3 by 8.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mcq-rem2_opt_c">
                  <div class="para" id="mcq-rem2-2-3-1-1">8</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq-rem2_opt_c">
                  <div class="para" id="mcq-rem2-2-3-2-1">What is the remainder after you divide 3 by 8?</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.3.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge1-3-pay-calculator">
                <div class="ac_question" id="csawesome2_2_challenge1-3-pay-calculator_question">
                  <div class="para" id="challenge1-3-pay-calculator-1-1">Complete the following expressions for a pay calculator.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge1-3-pay-calculator_editor" data-question_label="" data-codelens="true">public class Challenge1_3_Pay_Calculator
{
   public static void main(String[] args)
   {
       // Put in the math operator between 4 and 10 below to compute
       // the pay for 4 hours of work at 10 dollars per hour.
       System.out.println("Pay for 4 hours of work at 10 dollars an hour");
       System.out.println(4  10);

       // Put in the math operator to compute the number of hours worked
       // if the pay is 120 dollars and the rate is 15 dollars per hour.
       System.out.println("Number of hours worked for pay 120 dollars &amp; rate 15 dollars per hour");
       System.out.println(120  15);

       // Put in the math expression to compute the pay
       //  for 12 hours of work at 7.50 dollars per hour.
       System.out.println("Pay for 12 hours of work at 7.50 dollars an hour");
       System.out.println(        );

       // Put in the math expression to compute the integer number of
       // hours worked if the pay is 100 dollars and the rate is 9 dollars per hour.
       System.out.println("Number of int hours worked for pay 100 dollars &amp; rate 9 dollars per hour");
       System.out.println(        );

       // Put in the math operator to give the remainder when
       //  100 dollars is divided by 9 dollars per hour.
       System.out.println("The remainder of 100 dollars divided by 9 dollars per hour");
       System.out.println(        );

   }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "40\n"
                + "8\n"
                + "90.0\n"
                + "11\n"
                + "1\n";
        boolean passed =
                getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test1() throws IOException
    {
        String target = "100/9";
        boolean passed = checkCodeContains("expression 100/9", target);
        assertTrue(passed);
    }
    @Test
    public void test2() throws IOException
    {
        String target = "100%9";
        boolean passed = checkCodeContains("expression 100 % 9", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.3.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP1-3-1" data-multipleanswers="false"><div class="para" id="AP1-3-1-1-1">1-3-11: Consider the following code segment.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">System.out.println("Java is ");
System.out.println("fun ");
System.out.print("and cool!");
</code></pre></div> <div class="para" id="AP1-3-1-1-3">What is printed as a result of executing the code segment?</div><li data-component="answer" id="csawesome2_2_AP1-3-1_opt_a">&lt;pre&gt;Java is fun and cool!&lt;/pre&gt;</li><li data-component="feedback" id="csawesome2_2_AP1-3-1_opt_a"><div class="para" id="AP1-3-1-2-1-2-1">Notice the println in line 2.</div></li><li data-component="answer" id="csawesome2_2_AP1-3-1_opt_b">&lt;pre&gt; Java isfun and cool! &lt;/pre&gt;</li><li data-component="feedback" id="csawesome2_2_AP1-3-1_opt_b"><div class="para" id="AP1-3-1-2-2-2-1">Notice the space after is in the first line.</div></li><li data-component="answer" id="csawesome2_2_AP1-3-1_opt_c">&lt;pre&gt;Java is fun and cool!  &lt;/pre&gt;</li><li data-component="feedback" id="csawesome2_2_AP1-3-1_opt_c"><div class="para" id="AP1-3-1-2-3-2-1">Notice that the first line is a print, not println.</div></li><li data-component="answer" id="csawesome2_2_AP1-3-1_opt_d" data-correct="">&lt;pre&gt;Java is fun and cool!  &lt;/pre&gt;</li><li data-component="feedback" id="csawesome2_2_AP1-3-1_opt_d"><div class="para" id="AP1-3-1-2-4-2-1">Correct! Pay attention to which lines are print or println.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.3.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_apcsa_sample1_exp" data-multipleanswers="false"><div class="para" id="apcsa_sample1_exp-1-1">1-3-12: Consider the following code segment.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">System.out.println(5 + 5 / 2 * 3 - 1);
</code></pre></div> <div class="para" id="apcsa_sample1_exp-1-3">What is printed when the code segment is executed?</div><li data-component="answer" id="csawesome2_2_apcsa_sample1_exp_opt_a"><div class="para" id="apcsa_sample1_exp-2-1-1-1">0.666666666666667</div></li><li data-component="feedback" id="csawesome2_2_apcsa_sample1_exp_opt_a"><div class="para" id="apcsa_sample1_exp-2-1-2-1">Don’t forget that division and multiplication will be done first due to operator precedence.</div></li><li data-component="answer" id="csawesome2_2_apcsa_sample1_exp_opt_b"><div class="para" id="apcsa_sample1_exp-2-2-1-1">9.0</div></li><li data-component="feedback" id="csawesome2_2_apcsa_sample1_exp_opt_b"><div class="para" id="apcsa_sample1_exp-2-2-2-1">Don’t forget that division and multiplication will be done first due to operator precedence.</div></li><li data-component="answer" id="csawesome2_2_apcsa_sample1_exp_opt_c" data-correct=""><div class="para" id="apcsa_sample1_exp-2-3-1-1">10.0</div></li><li data-component="feedback" id="csawesome2_2_apcsa_sample1_exp_opt_c"><div class="para" id="apcsa_sample1_exp-2-3-2-1">Yes, this is equivalent to (5 + ((5/2)*3) - 1).</div></li><li data-component="answer" id="csawesome2_2_apcsa_sample1_exp_opt_d"><div class="para" id="apcsa_sample1_exp-2-4-1-1">11.5</div></li><li data-component="feedback" id="csawesome2_2_apcsa_sample1_exp_opt_d"><div class="para" id="apcsa_sample1_exp-2-4-2-1">Don’t forget that division and multiplication will be done first due to operator precedence, and that an int/int gives an int truncated result where everything to the right of the decimal point is dropped.</div></li><li data-component="answer" id="csawesome2_2_apcsa_sample1_exp_opt_e"><div class="para" id="apcsa_sample1_exp-2-5-1-1">14.0</div></li><li data-component="feedback" id="csawesome2_2_apcsa_sample1_exp_opt_e"><div class="para" id="apcsa_sample1_exp-2-5-2-1">Don’t forget that division and multiplication will be done first due to operator precedence.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>assignment-and-input</id>
      <title>Assignment and Input</title>
      <question>
        <label>Video: MZwIgM__5C8</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="MZwIgM__5C8" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="csawesome2_2_" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;java&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/assignment-and-input-3-9.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.4.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qasgn1" data-multipleanswers="false"><div class="para" id="qasgn1-1-1">1-4-3: What are the values of x, y, and z after the following code executes?  You can step through this code by clicking on this <a class="external" href="http://www.pythontutor.com/visualize.html#code=public+class+Test2%0A%7B%0A+++public+static+void+main(String%5B%5D+args%29%0A+++%7B%0A+++++int+x+%3D+0%3B%0A+++++int+y+%3D+1%3B%0A+++++int+z+%3D+2%3B%0A+++++x+%3D+y%3B%0A+++++y+%3D+y+*+2%3B%0A+++++z+%3D+3%3B%0A+++++System.out.println(x%29%3B%0A+++++System.out.println(y%29%3B%0A+++++System.out.println(z%29%3B%0A+++%7D%0A%7D&amp;mode=display&amp;origin=opt-frontend.js&amp;cumulative=false&amp;heapPrimitives=false&amp;textReferences=false&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;curInstr=0" target="_blank">Java visualizer</a><details class="ptx-footnote" aria-live="polite" id="qasgn1-1-1-2"><summary class="ptx-footnote__number" title="Footnote 1.4.3"><sup> 3 </sup></summary><div class="ptx-footnote__contents" id="qasgn1-1-1-2"><code class="code-inline tex2jax_ignore">http://www.pythontutor.com/visualize.html#code=public+class+Test2%0A%7B%0A+++public+static+void+main(String%5B%5D+args%29%0A+++%7B%0A+++++int+x+%3D+0%3B%0A+++++int+y+%3D+1%3B%0A+++++int+z+%3D+2%3B%0A+++++x+%3D+y%3B%0A+++++y+%3D+y+*+2%3B%0A+++++z+%3D+3%3B%0A+++++System.out.println(x%29%3B%0A+++++System.out.println(y%29%3B%0A+++++System.out.println(z%29%3B%0A+++%7D%0A%7D&amp;mode=display&amp;origin=opt-frontend.js&amp;cumulative=false&amp;heapPrimitives=false&amp;textReferences=false&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;curInstr=0</code></div></details> link.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int x = 0;
int y = 1;
int z = 2;
x = y;
y = y * 2;
z = 3;
</code></pre></div><li data-component="answer" id="csawesome2_2_qasgn1_opt_a"><div class="para" id="qasgn1-2-1-1-1">x = 0, y = 1, z = 2</div></li><li data-component="feedback" id="csawesome2_2_qasgn1_opt_a"><div class="para" id="qasgn1-2-1-2-1">These are the initial values in the variable, but the values are changed.</div></li><li data-component="answer" id="csawesome2_2_qasgn1_opt_b" data-correct=""><div class="para" id="qasgn1-2-2-1-1">x = 1, y = 2, z = 3</div></li><li data-component="feedback" id="csawesome2_2_qasgn1_opt_b"><div class="para" id="qasgn1-2-2-2-1">x changes to y’s initial value, y’s value is doubled, and z is set to 3</div></li><li data-component="answer" id="csawesome2_2_qasgn1_opt_c"><div class="para" id="qasgn1-2-3-1-1">x = 2, y = 2, z = 3</div></li><li data-component="feedback" id="csawesome2_2_qasgn1_opt_c"><div class="para" id="qasgn1-2-3-2-1">Remember that the equal sign doesn’t mean that the two sides are equal.  It sets the value for the variable on the left to the value from evaluating the right side.</div></li><li data-component="answer" id="csawesome2_2_qasgn1_opt_d"><div class="para" id="qasgn1-2-4-1-1">x = 0, y = 0, z = 3</div></li><li data-component="feedback" id="csawesome2_2_qasgn1_opt_d"><div class="para" id="qasgn1-2-4-2-1">Remember that the equal sign doesn’t mean that the two sides are equal.  It sets the value for the variable on the left to the value from evaluating the right side.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.4.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_swapParsons">
                <div class="parsons_question parsons-text">
                  <div class="para" id="swapParsons-1-1">The following has the correct code to ‘swap’ the values in x and y (so that x ends up with y’s initial value and y ends up with x’s initial value), but the code is mixed up and contains one extra block which is not needed in a correct solution.  Drag the needed blocks from the left into the correct order on the right. Check your solution by clicking on the Check button.  You will be told if any of the blocks are in the wrong order or if you need to remove one or more blocks.  After three incorrect attempts you will be able to use the Help Me button to make the problem easier.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">int x = 3;
int y = 5;
int temp = 0;
---
temp = x;
---
x = y;
---
y = temp;
---
y = x;  #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.4.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_assignmentTypes">
                <div class="ac_question" id="csawesome2_2_assignmentTypes_question">
                  <div class="para" id="assignmentTypes-1-1">The code below looks okay at first glance, but if you run it, you will see that there is an error of incompatible types. Change the data type of one of the variables to fix the error.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_assignmentTypes_editor" data-question_label="" data-codelens="true">public class Asgn
{
    public static void main(String[] args)
    {
          int x = 1;
          double y = 2.2;
          x = 2 * y;
          System.out.println(x);
    }
}
====
import static org.junit.Assert.*;

import org.junit.Test;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "4.4\n";
        boolean passed =
                getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.4.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_incrementScore">
                <div class="ac_question" id="csawesome2_2_incrementScore_question">
                  <div class="para" id="incrementScore-1-1">Try the code below to see how score is incremented by 1. Try substituting 2 instead of 1 to see what happens.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_incrementScore_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int score = 0;
        System.out.println(score);
        score = score + 1;
        System.out.println(score);
    }
}
====
import static org.junit.Assert.*;

import org.junit.Test;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "0\n1\n";
        boolean passed =
                getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.4.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_inputName">
                <div class="ac_question" id="csawesome2_2_inputName_question">
                  <div class="para" id="inputName-1-1">The code below will say hello to anyone who types in their name.  Type in your name below and then click on run.  Try again with a friend’s name.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_inputName_editor" data-question_label="" data-codelens="true">import java.util.Scanner;

public class Main
{
    public static void main(String[] args)
    {
        System.out.println("Please type in a name in the input box below.");
        Scanner scan = new Scanner(System.in);
        String name = scan.nextLine();
        System.out.println("Hello " + name);
        scan.close();
     }
 }
====
import static org.junit.Assert.*;

import org.junit.Test;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        //String output = getMethodOutput("main");
        boolean passed =
                getResults("", "", "Scanner example", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.4.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge1-4">
                <div class="ac_question" id="csawesome2_2_challenge1-4_question">
                  <div class="para" id="challenge1-4-1-1">Calculate your age and your pet’s age from the birthdates, and then your pet’s age in dog years.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge1-4_editor" data-question_label="" data-codelens="true">public class Challenge1_4
{
    public static void main(String[] args)
    {
        // Fill in values for these variables
        int currentYear =
        int birthYear =
        int dogBirthYear =

        // Write a formula to calculate your age from the currentYear and
        // your birthYear variables
        int age =

        // Write a formula to calculate your dog's age from the currentYear
        // and dogBirthYear variables
        int dogAge =

        // Calculate the age of your dog in dogYears (7 times your dog's age
        // in human years)
        int dogYearsAge =

        // Print out your age, your dog's age, and your dog's age in dog
        // years. Make sure you print out text too so that the user knows what
        // is being printed out.

   }
}
====
import static org.junit.Assert.*;
import org.junit.*;
import java.io.*;

public class RunestoneTests extends CodeTestHelper {
   @Test
   public void checkVariables() throws IOException {
      String code = removeSpaces(getCode());
      code = code.replaceAll("\\(", "").replaceAll("\\)", "");

      boolean passed1 = code.matches(".*intcurrentYear=[0-9]{2,4};.*");
      boolean passed2 = code.matches(".*intbirthYear=[0-9]{2,4};.*");
      boolean passed3 = code.matches(".*intbirthYear=[0-9]{1,4};.*");

      boolean passed = passed1 &amp;&amp; passed2 &amp;&amp; passed3;

      getResults("true", "" + passed, "Checking that you initialized the three variables");
      assertTrue(passed);
   }

   @Test
   public void checkOutput() throws IOException {
      String output = getMethodOutput("main");
      int num = output.length();
      boolean passed = num &gt;= 5;
      getResults("1+ characters", "" + num, "Checking that you have some output", passed);
      assertTrue(passed);
   }

   @Test
   public void checkPrintlines() throws IOException {
      String code = removeSpaces(getCode());
      int num = countOccurences(code, "System.out.print");

      boolean passed = num &gt;= 1;
      getResults("At least one", "" + num, "Checking that you have at least one print statement", passed);
      assertTrue(passed);
   }

   @Test
   public void testAsgn1() throws IOException {
      /*
       * String target = "age = currentYear - birthYear"; boolean passed =
       * checkCodeContains("formula for age", target); assertTrue(passed);
       */
      String target = removeSpaces("age = currentYear - birthYear");
      String code = removeSpaces(getCode());
      code = code.replaceAll("\\(", "").replaceAll("\\)", "");

      boolean passed = code.contains(target);
      getResults("true", "" + passed, "Checking that code contains formula for age", passed);
      assertTrue(passed);
   }

   @Test
   public void testAsgn2() throws IOException {
      String target = removeSpaces("dogAge = currentYear - dogBirthYear");
      String code = removeSpaces(getCode());
      code = code.replaceAll("\\(", "").replaceAll("\\)", "");

      boolean passed = code.contains(target);
      getResults("true", "" + passed, "Checking that code contains formula for dogAge", passed);
      assertTrue(passed);
   }

   @Test
   public void testAsgn3() throws IOException {
      String target1 = removeSpaces("dogYearsAge = dogAge * 7");
      String target2 = removeSpaces("dogYearsAge = 7 * dogAge");
      String code = removeSpaces(getCode());
      code = code.replaceAll("\\(", "").replaceAll("\\)", "");

      boolean passed1 = code.contains(target1);
      boolean passed2 = code.contains(target2);
      boolean passed = passed1 || passed2;
      getResults("true", "" + passed, "Checking that code contains formula for dogYearsAge using dogAge", passed);
      assertTrue(passed);
   }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.4.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_apcsa_sample1" data-multipleanswers="false"><div class="para" id="apcsa_sample1-1-1">1-4-9: Consider the following code segment.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int a = 5;
int b = a/2;
double c = a/2.0;
double d = 5 + a / b * c - 2;
System.out.println(d);
</code></pre></div> <div class="para" id="apcsa_sample1-1-3">What is printed when the code segment is executed?</div><li data-component="answer" id="csawesome2_2_apcsa_sample1_opt_a"><div class="para" id="apcsa_sample1-2-1-1-1">8</div></li><li data-component="feedback" id="csawesome2_2_apcsa_sample1_opt_a"><div class="para" id="apcsa_sample1-2-1-2-1">Don’t forget that the result will be a double since at least 1 double value is involved.</div></li><li data-component="answer" id="csawesome2_2_apcsa_sample1_opt_b" data-correct=""><div class="para" id="apcsa_sample1-2-2-1-1">8.0</div></li><li data-component="feedback" id="csawesome2_2_apcsa_sample1_opt_b"><div class="para" id="apcsa_sample1-2-2-2-1">Yes, this is equivalent to (5 + ((a/b)*c) - 1) using int division.</div></li><li data-component="answer" id="csawesome2_2_apcsa_sample1_opt_c"><div class="para" id="apcsa_sample1-2-3-1-1">10.5</div></li><li data-component="feedback" id="csawesome2_2_apcsa_sample1_opt_c"><div class="para" id="apcsa_sample1-2-3-2-1">Don’t forget that division and multiplication will be done first due to operator precedence, and that an int/int gives an int truncated result where everything to the right of the decimal point is dropped.</div></li><li data-component="answer" id="csawesome2_2_apcsa_sample1_opt_d"><div class="para" id="apcsa_sample1-2-4-1-1">An incompatible type error will occur.</div></li><li data-component="feedback" id="csawesome2_2_apcsa_sample1_opt_d"><div class="para" id="apcsa_sample1-2-4-2-1">No error will occur since the double result is saved in a double.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>casting-and-ranges-of-values</id>
      <title>Casting and Ranges of Values</title>
      <question>
        <label>Exercise 1.5.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_cast-division">
                <div class="ac_question" id="csawesome2_2_cast-division_question">
                  <div class="para" id="cast-division-1-1">What happens when you divide an int by an int or with a double operand or with the type cast (double) or (int) on one of the operands? Add another line that divides 5 by 2 using a (double) cast. What is the result?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_cast-division_editor" data-question_label="" data-codelens="true">public class Casting
{
    public static void main(String[] args)
    {
        System.out.println(3 / 4);          // int divided by int
        System.out.println(3.0 / 4);        // double divided by int
        System.out.println(3 / 4.0);        // int divided by double
        System.out.println((double) 3 / 4); // int cast to double, divided by int
        System.out.println((int) 3.0 / 4);  // double cast to int, divided by int
        // Add a line of code that prints out the result of dividing 5 by 2
        //  using a (double) cast.

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "0\n"
                    + "0.75\n"
                    + "0.75\n"
                    + "0.75\n"
                    + "0\n"
                    + "2.5\n";
        boolean passed =
                getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.5.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_nearestInt">
                <div class="ac_question" id="csawesome2_2_nearestInt_question">
                  <div class="para" id="nearestInt-1-1">Run the code below to see how the formula of adding or subtracting .5 and then casting with (int) rounds a positive or negative double number to the closest int. Add a line of code that rounds number + 2.3 to the nearest int.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_nearestInt_editor" data-question_label="" data-codelens="true">public class NearestInt
{
    public static void main(String[] args)
    {
        double number = 5.0 / 3;
        int nearestInt = (int) (number + 0.5);
        System.out.println("5.0/3 = " + number);
        System.out.println("5/3 truncated: " + (int) number);
        System.out.println("5.0/3 rounded to nearest int: " + nearestInt);
        double negNumber = -number;
        int nearestNegInt = (int) (negNumber - 0.5);
        System.out.println(
                "-5.0/3 rounded to nearest negative int: " + nearestNegInt);

        // Print the result of rounding (number + 2.3) to the nearest int.

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "5.0/3 = 1.6666666666666667\n"
                    + "5/3 truncated: 1\n"
                    + "5.0/3 rounded to nearest int: 2\n"
                    + "-5.0/3 rounded to nearest negative int: -2\n"
                    + "4";

        boolean passed =
                getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.5.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_overfl">
                <div class="ac_question" id="csawesome2_2_overfl_question">
                  <div class="para" id="overfl-1-1">Try the code below to see two integer overflows for a positive and negative number. An int cannot hold that many digits! Fix the integer overflow by deleting the last 0 in the numbers to store less digits.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_overfl_editor" data-question_label="" data-codelens="true">public class TestOverflow
{
    public static void main(String[] args)
    {
        int id = 2147483650; // overflow
        int negative = -2147483650; // overflow
        System.out.println(id);
        System.out.println(negative);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "214748365\n-214748365\n";

        boolean passed =
                getResults(
                        expect, output, "Fixed Integer Overflow Error");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.5.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_double_precision">
                <div class="ac_question" id="csawesome2_2_double_precision_question">
                  <div class="para" id="double_precision-1-1">Run the code below to see how a decimal number can be formatted to show 2 digits after the decimal point. Try it with 2.0/3.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_double_precision_editor" data-question_label="" data-codelens="true">public class TestFormat
{
    public static void main(String[] args)
    {
        double number = 10.0 / 3;
        System.out.println(number);
        // format number to show 2 digits after .
        System.out.printf("%.2f", number);
        // format also with $ and newline
        System.out.printf("$%.2f\n", number);
        // Print out the result of 2.0/3 formatted to show 2 digits after the decimal point.

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "3.3333333333333335\n3.33$3.33\n0.67\n";
        boolean passed =
                getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.5.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_q_round" data-multipleanswers="false">
                <div class="para" id="q_round-1-1">1-5-5: True or false: Java rounds up automatically when you do integer division.</div>
                <li data-component="answer" id="csawesome2_2_q_round_opt_a">
                  <div class="para" id="q_round-2-1-1-1">true</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_q_round_opt_a">
                  <div class="para" id="q_round-2-1-2-1">Did you try this out in Active Code?  Does it work that way?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_q_round_opt_b" data-correct="">
                  <div class="para" id="q_round-2-2-1-1">false</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_q_round_opt_b">
                  <div class="para" id="q_round-2-2-2-1">Java throws away any values after the decimal point if you do integer division.  It does not round up automatically.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.5.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_q_cast" data-multipleanswers="false">
                <div class="para" id="q_cast-1-1">1-5-6: True or false: casting always results in a double type.</div>
                <li data-component="answer" id="csawesome2_2_q_cast_opt_a">
                  <div class="para" id="q_cast-2-1-1-1">true</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_q_cast_opt_a">
                  <div class="para" id="q_cast-2-1-2-1">Try casting to int instead of double.  What does that do?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_q_cast_opt_b" data-correct="">
                  <div class="para" id="q_cast-2-2-1-1">false</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_q_cast_opt_b">
                  <div class="para" id="q_cast-2-2-2-1">Casting results in the type that you cast to. However, if you can’t really cast the value to the specified type then you will get an error.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.5.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge1-5-average">
                <div class="ac_question" id="csawesome2_2_challenge1-5-average_question">
                  <div class="para" id="challenge1-5-average-1-1">Type in three made up int grades and then sum and average them. Use type casting to report the result as a double. If you do this challenge on replit.com (see template and links below), please paste your repl link here to turn it in.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge1-5-average_editor" data-question_label="" data-codelens="true">public class Challenge1_6
{
    public static void main(String[] args)
    {
        // 1. Declare 3 int variables called grade1, grade2, grade3
        // and initialize them to 3 values

        // 2. Declare an int variable called sum for the sum of the grades

        // 3. Declare a variable called average for the average of the grades

        // 4. Write a formula to calculate the sum of the 3 grades (add them
        // up).

        // 5. Write a formula to calculate the average of the 3 grades from
        // the sum using division and type casting.

        // 6. Print out the average

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.util.regex.MatchResult;
import java.util.regex.Pattern;

/* Do NOT change Main or CodeTestHelper.java.
Put the active code exercise in a file like ForLoop.java.
Put your Junit test in the file RunestoneTests.java.
Run. Test by changing ForLoop.java (student code).
*/

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test4() throws IOException
    {
        String actual = getMethodOutput("main");
        String expect = "double value";

        boolean passed = actual.matches("[\\s\\S]*[0-9]+.[0-9]+[\\s\\S]*");

        if (!passed)
        {
            getResults(
                    expect,
                    actual,
                    "Checking that output is a double value",
                    passed);
            assertTrue(passed);
            return;
        }

        String code = getCode();
        String regex = "grade[0-9]=[0-9]+";

        String[] matches =
                Pattern.compile(regex)
                        .matcher(removeSpaces(code))
                        .results()
                        .map(MatchResult::group)
                        .toArray(String[]::new);

        int[] grades = new int[3];

        String hint = "";

        if (matches.length &gt; 3)
        {
            hint = "\n(Did you declare too many grade variables?)";
        }
        else if (matches.length &lt; 3)
        {
            hint = "\n(Did you declare too few grade variables?)";
        }

        for (int i = 0; i &lt; grades.length &amp;&amp; i &lt; matches.length; i++)
        {
            String val = matches[i].substring(matches[i].indexOf("=") + 1);
            grades[i] = Integer.parseInt(val);
        }

        double exp =
                (double) (grades[0] + grades[1] + grades[2]) / matches.length;

        passed =
                getResults(
                        "" + exp,
                        actual,
                        "Checking that calculation is correct" + hint);
        assertTrue(passed);
    }

    @Test
    public void test1() throws IOException
    {
        String code = removeSpaces(getCode());

        String expect = "Declared grade1, grade2, grade3, and average";
        String actual = "";
        String hint = "";

        boolean passed = true;

        String regex = "grade[1-3]=[0-9]+";

        String[] matches =
                Pattern.compile(regex)
                        .matcher(removeSpaces(code))
                        .results()
                        .map(MatchResult::group)
                        .toArray(String[]::new);

        if (matches.length != 3)
        {
            passed = false;
            actual += "Declared " + matches.length + " grade variables\n";
        }

        if (!code.contains("doubleaverage"))
        {
            passed = false;
            actual += "Did not declare average as a double";
        }

        if (!passed)
        {
            hint = "\n(Check spelling and capitalization)";
        }
        else
        {
            actual = expect;
        }

        getResults(
                expect,
                actual.trim(),
                "Checking that variables have been declared properly" + hint,
                passed);
        assertTrue(passed);
    }

    @Test
    public void test3() throws IOException
    {
        String code = getCode();
        String[] lines = code.split("\n");

        String expect = "(double)";
        String actual = "Cast expression as a double";

        boolean passed = false;

        if (!code.contains("(double)"))
        {
            passed = false;
            actual = "no (double)";
        }

        for (int i = 0; i &lt; lines.length; i++)
        {
            String line = lines[i];

            if (line.contains("(double)"))
            {
                passed = true;
                actual = line.trim();
                break;
            }
        }

        getResults(
                expect,
                actual,
                "Checking that expression was cast as a double",
                passed);
        assertTrue(passed);
    }

    @Test
    public void test2() throws IOException
    {
        String codeAll = getCode();
        String[] lines = codeAll.split("\n");

        String expect = "grade1 + grade2 + grade3\nsum / 3";
        String actual1 = "", actual2 = "";
        String hint = "";

        boolean passed = false;

        String regex = "grade[1-3]+\\+grade[1-3]+\\+grade[1-3]";

        for (int i = 0; i &lt; lines.length; i++)
        {
            String code = lines[i];
            String noSpaces = removeSpaces(code);

            if (noSpaces.matches("[\\s\\S]*" + regex + "[\\s\\S]*"))
            {
                passed = true;
                actual1 = code.trim();
                break;
            }
        }

        regex = "/3";

        for (int i = 0; i &lt; lines.length; i++)
        {
            String code = lines[i];
            String noSpaces = removeSpaces(code);

            if (noSpaces.matches("[\\s\\S]*" + regex + "[\\s\\S]*"))
            {
                passed = true;
                actual2 = code.trim();
                break;
            }
        }

        String actual = "No such expressions";

        if (actual1.length() &gt; 0 || actual2.length() &gt; 0)
        {
            actual = (actual1 + "\n" + actual2);
        }

        if (!passed)
        {
            hint = "\n(Check spelling and capitalization)";
        }

        getResults(
                expect,
                actual,
                "Checking that grades have been added together and divided by"
                    + " 3"
                        + hint,
                passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.5.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge1-6-unicode">
                <div class="ac_question" id="csawesome2_2_challenge1-6-unicode_question">
                  <div class="para" id="challenge1-6-unicode-1-1">Can you print out a letter from 3 different languages using this |Unicode Lookup| site?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge1-6-unicode_editor" data-question_label="" data-codelens="true">public class ChallengeUnicode
{
    public static void main(String[] args)
    {
        System.out.println(
                "'A' in ASCII and Unicode: " + Character.toString(65));
        System.out.println("Chinese for 'sun': " + Character.toString(11932));
        System.out.println("A smiley emoji: " + Character.toString(128512));

        // Old style. Doesn't work for all codepoints.
        System.out.println("This also works: " + (char) 65);
        System.out.println("But this doesn't: " + (char) 128512);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testCount()
    {
        String code = getCodeWithoutComments();
        int count = countOccurences(code, "Character.toString");
        boolean passed = count &gt;= 4;
        passed =
                getResults(
                        "4+",
                        "" + count,
                        "Counting number of Character.toString",
                        passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.5.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP_casting" data-multipleanswers="false">
                <div class="para" id="AP_casting-1-1">1-5-9: Which of the following returns the correct average for a total that is the sum of 3 int values?</div>
                <li data-component="answer" id="csawesome2_2_AP_casting_opt_a">
                  <div class="para" id="AP_casting-2-1-1-1">(double) (total / 3);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP_casting_opt_a">
                  <div class="para" id="AP_casting-2-1-2-1">This does integer division before casting the result to double so it loses the fractional part.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP_casting_opt_b">
                  <div class="para" id="AP_casting-2-2-1-1">total / 3;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP_casting_opt_b">
                  <div class="para" id="AP_casting-2-2-2-1">When you divide an integer by an integer you get an integer result and lose the fractional part.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP_casting_opt_c" data-correct="">
                  <div class="para" id="AP_casting-2-3-1-1">(double) total /  3;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP_casting_opt_c">
                  <div class="para" id="AP_casting-2-3-2-1">This will convert total to a double value and then divide by 3 to return a double result.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP_casting_opt_d">
                  <div class="para" id="AP_casting-2-4-1-1">(int) total / 3;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP_casting_opt_d">
                  <div class="para" id="AP_casting-2-4-2-1">This will return an int value losing the fractional part.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-5-7</id>
      <title>Compound Assignment Operators</title>
      <question optional="yes">
        <label>Exercise 1.6.3.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcpp">
                <div class="ac_question" id="csawesome2_2_lcpp_question">
                  <div class="para" id="lcpp-1-1">Run the code below to see what the ++ and shorcut operators do. Click on the Show Code Lens button to trace through the code and the variable values change in the visualizer. Try creating more compound assignment statements with shortcut operators and work with a partner to guess what they would print out before running the code.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcpp_editor" data-question_label="" data-codelens="true">public class Test2
{
    public static void main(String[] args)
    {
        int score = 0;
        System.out.println(score);
        score++;
        System.out.println(score);
        score *= 2;
        System.out.println(score);
        int penalty = 5;
        score -= penalty / 2;
        System.out.println(score);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "0\n1\n2\n0";

        boolean passed =
                getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.6.3.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_q_trace_increment" data-multipleanswers="false"><div class="para" id="q_trace_increment-1-1">1-6-2: What are the values of x, y, and z after the following code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int x = 0;
int y = 1;
int z = 2;
x--;
y++;
z+=y;
</code></pre></div><li data-component="answer" id="csawesome2_2_q_trace_increment_opt_a"><div class="para" id="q_trace_increment-2-1-1-1">x = -1, y = 1, z = 4</div></li><li data-component="feedback" id="csawesome2_2_q_trace_increment_opt_a"><div class="para" id="q_trace_increment-2-1-2-1">This code subtracts one from x, adds one to y, and then sets z to to the value in z plus the current value of y.</div></li><li data-component="answer" id="csawesome2_2_q_trace_increment_opt_b"><div class="para" id="q_trace_increment-2-2-1-1">x = -1, y = 2, z = 3</div></li><li data-component="feedback" id="csawesome2_2_q_trace_increment_opt_b"><div class="para" id="q_trace_increment-2-2-2-1">This code subtracts one from x, adds one to y, and then sets z to to the value in z plus the current value of y.</div></li><li data-component="answer" id="csawesome2_2_q_trace_increment_opt_c"><div class="para" id="q_trace_increment-2-3-1-1">x = -1, y = 2, z = 2</div></li><li data-component="feedback" id="csawesome2_2_q_trace_increment_opt_c"><div class="para" id="q_trace_increment-2-3-2-1">This code subtracts one from x, adds one to y, and then sets z to to the value in z plus the current value of y.</div></li><li data-component="answer" id="csawesome2_2_q_trace_increment_opt_d"><div class="para" id="q_trace_increment-2-4-1-1">x = 0, y = 1, z = 2</div></li><li data-component="feedback" id="csawesome2_2_q_trace_increment_opt_d"><div class="para" id="q_trace_increment-2-4-2-1">This code subtracts one from x, adds one to y, and then sets z to to the value in z plus the current value of y.</div></li><li data-component="answer" id="csawesome2_2_q_trace_increment_opt_e" data-correct=""><div class="para" id="q_trace_increment-2-5-1-1">x = -1, y = 2, z = 4</div></li><li data-component="feedback" id="csawesome2_2_q_trace_increment_opt_e"><div class="para" id="q_trace_increment-2-5-2-1">This code subtracts one from x, adds one to y, and then sets z to to the value in z plus the current value of y.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.6.3.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_q_trace_increment2" data-multipleanswers="false"><div class="para" id="q_trace_increment2-1-1">1-6-3: What are the values of x, y, and z after the following code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int x = 3;
int y = 5;
int z = 2;
x = z * 2;
y = y / 2;
z++;
</code></pre></div><li data-component="answer" id="csawesome2_2_q_trace_increment2_opt_a"><div class="para" id="q_trace_increment2-2-1-1-1">x = 6, y = 2.5, z = 2</div></li><li data-component="feedback" id="csawesome2_2_q_trace_increment2_opt_a"><div class="para" id="q_trace_increment2-2-1-2-1">This code sets x to z * 2 (4), y to y divided by 2 (5 / 2 = 2) and z = to z + 1 (2 + 1 = 3).</div></li><li data-component="answer" id="csawesome2_2_q_trace_increment2_opt_b"><div class="para" id="q_trace_increment2-2-2-1-1">x = 4, y = 2.5, z = 2</div></li><li data-component="feedback" id="csawesome2_2_q_trace_increment2_opt_b"><div class="para" id="q_trace_increment2-2-2-2-1">This code sets x to z * 2 (4), y to y divided by 2 (5 / 2 = 2) and z = to z + 1 (2 + 1 = 3).</div></li><li data-component="answer" id="csawesome2_2_q_trace_increment2_opt_c"><div class="para" id="q_trace_increment2-2-3-1-1">x = 6, y = 2, z = 3</div></li><li data-component="feedback" id="csawesome2_2_q_trace_increment2_opt_c"><div class="para" id="q_trace_increment2-2-3-2-1">This code sets x to z * 2 (4), y to y divided by 2 (5 / 2 = 2) and z = to z + 1 (2 + 1 = 3).</div></li><li data-component="answer" id="csawesome2_2_q_trace_increment2_opt_d"><div class="para" id="q_trace_increment2-2-4-1-1">x = 4, y = 2.5, z = 3</div></li><li data-component="feedback" id="csawesome2_2_q_trace_increment2_opt_d"><div class="para" id="q_trace_increment2-2-4-2-1">This code sets x to z * 2 (4), y to y divided by 2 (5 / 2 = 2) and z = to z + 1 (2 + 1 = 3).</div></li><li data-component="answer" id="csawesome2_2_q_trace_increment2_opt_e" data-correct=""><div class="para" id="q_trace_increment2-2-5-1-1">x = 4, y = 2, z = 3</div></li><li data-component="feedback" id="csawesome2_2_q_trace_increment2_opt_e"><div class="para" id="q_trace_increment2-2-5-2-1">This code sets x to z * 2 (4), y to y divided by 2 (5 / 2 = 2) and z = to z + 1 (2 + 1 = 3).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>apis-and-libraries</id>
      <title>APIs and Libraries</title>
      <question>
        <label>Exercise 1.7.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_count-println">
                <div class="para" id="count-println-1-1">1-7-1: How many <code class="code-inline tex2jax_ignore">println</code> methods are there in the <code class="code-inline tex2jax_ignore">PrintStream</code> class documented at <a class="external" href="https://docs.oracle.com/javase/8/docs/api/java/io/PrintStream.html" target="_blank">https://docs.oracle.com/javase/8/docs/api/java/io/PrintStream.html</a><details class="ptx-footnote" aria-live="polite" id="count-println-1-1-4"><summary class="ptx-footnote__number" title="Footnote 1.7.3"><sup> 3 </sup></summary><div class="ptx-footnote__contents" id="count-println-1-1-4"><code class="code-inline tex2jax_ignore">https://docs.oracle.com/javase/8/docs/api/java/io/PrintStream.html</code></div></details>? <input type="text" placeholder="Number"/></div>
                <script type="application/json">[[{"number": [[10, 10], [10, 10]], "feedback": "&lt;div class=\"para\" id=\"count-println-2-1-1-1-1\"&gt;Correct.  One for each type&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"count-println-2-1-2-1-1\"&gt;Only count the println methods, not print or printf methods.&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.7.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_API_vocab_match">
                <span data-subcomponent="question">
                  <div class="para" id="API_vocab_match-1-1">Drag the definition from the left and drop it on the correct concept on the right. Click the "Check Me" button to see if you are correct.</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="API_vocab_match-2-1">Review the summaries above.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_API_vocab_match_drag1">A collection of classes written by other programmers</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_API_vocab_match_drag1">library</li>
                <li data-subcomponent="draggable" id="csawesome2_2_API_vocab_match_drag2">A collection of related classes organized to be imported into your code</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_API_vocab_match_drag2">package</li>
                <li data-subcomponent="draggable" id="csawesome2_2_API_vocab_match_drag3">A specification that tells the programmer how to use classes in a library</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_API_vocab_match_drag3">API</li>
                <li data-subcomponent="draggable" id="csawesome2_2_API_vocab_match_drag4">The building blocks of Java and object-oriented programming</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_API_vocab_match_drag4">class</li>
                <li data-subcomponent="draggable" id="csawesome2_2_API_vocab_match_drag5">A block of code that performs a specific task</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_API_vocab_match_drag5">method</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.7.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_purpose_apis" data-multipleanswers="false">
                <div class="para" id="purpose_apis-1-1">1-7-3: What is the purpose of APIs and libraries in programming?</div>
                <li data-component="answer" id="csawesome2_2_purpose_apis_opt_a">
                  <div class="para" id="purpose_apis-2-1-1-1">To write new code from scratch</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_purpose_apis_opt_a">
                  <div class="para" id="purpose_apis-2-1-2-1">Incorrect. APIs and libraries allow you to use code written by others.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_purpose_apis_opt_b" data-correct="">
                  <div class="para" id="purpose_apis-2-2-1-1">To use code written by others</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_purpose_apis_opt_b">
                  <div class="para" id="purpose_apis-2-2-2-1">Correct! APIs and libraries are used to use code written by others.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_purpose_apis_opt_c">
                  <div class="para" id="purpose_apis-2-3-1-1">To create programming languages</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_purpose_apis_opt_c">
                  <div class="para" id="purpose_apis-2-3-2-1">Incorrect. APIs and libraries are not for creating programming languages.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_purpose_apis_opt_d">
                  <div class="para" id="purpose_apis-2-4-1-1">To compile code</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_purpose_apis_opt_d">
                  <div class="para" id="purpose_apis-2-4-2-1">Incorrect. APIs and libraries are not for compiling code.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.7.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_TurtleAPI">
                <div class="ac_question" id="csawesome2_2_TurtleAPI_question">
                  <div class="para" id="TurtleAPI-1-1">Try clicking the run button below to see what the following program does. Then add 1 more line of code on line 16 to make yertle go forward() again. (If the code below does not work or is too slow in your browser, you can also see the <code class="code-inline tex2jax_ignore">Turtle</code> code in action at this <a class="external" href="https://replit.com/@BerylHoffman/Java-Swing-Turtle#Main.java" target="_blank">replit link</a><details class="ptx-footnote" aria-live="polite" id="TurtleAPI-1-1-3"><summary class="ptx-footnote__number" title="Footnote 1.7.5"><sup> 5 </sup></summary><div class="ptx-footnote__contents" id="TurtleAPI-1-1-3"><code class="code-inline tex2jax_ignore">https://replit.com/@BerylHoffman/Java-Swing-Turtle#Main.java</code></div></details> (refresh page after forking and if it gets stuck) or download the files <a class="external" href="https://github.com/bhoffman0/CSAwesome2/raw/main/_sources/Unit1-Using-Objects-and-Methods/TurtleJavaSwingCode.zip" target="_blank">here</a><details class="ptx-footnote" aria-live="polite" id="TurtleAPI-1-1-5"><summary class="ptx-footnote__number" title="Footnote 1.7.6"><sup> 6 </sup></summary><div class="ptx-footnote__contents" id="TurtleAPI-1-1-5"><code class="code-inline tex2jax_ignore">https://github.com/bhoffman0/CSAwesome2/raw/main/_sources/Unit1-Using-Objects-and-Methods/TurtleJavaSwingCode.zip</code></div></details> to use in your own IDE.)</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_TurtleAPI_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.util.*;

public class TurtleTest
{
    public static void main(String[] args)
    {
        // Do not change the next 2 lines
        World habitat = new World(300, 300);
        Turtle yertle = new Turtle(habitat);

        // Code to make yertle move forward and turn right
        yertle.forward();
        yertle.turnRight();
        // Add a line of code to make yertle go forward() again



        // Do not change
        habitat.show(true);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleTest");
    }
    @Test
    public void test1()
    {
        String code = getCode();
        String expect = "yertle.forward";

        int count = countOccurences(code, expect);
        boolean passed = (count &gt;= 2);
        passed = getResults("2+", "" + count, "yertle.forward() count", passed);

        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.7.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_turtle_dir" data-multipleanswers="false">
                <div class="para" id="turtle_dir-1-1">1-7-5: Which way does a turtle face when it is first created?</div>
                <li data-component="answer" id="csawesome2_2_turtle_dir_opt_a" data-correct="">
                  <div class="para" id="turtle_dir-2-1-1-1">North</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_turtle_dir_opt_a">
                  <div class="para" id="turtle_dir-2-1-2-1">Turtles start off facing north which is toward the top of the page.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_turtle_dir_opt_b">
                  <div class="para" id="turtle_dir-2-2-1-1">South</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_turtle_dir_opt_b">
                  <div class="para" id="turtle_dir-2-2-2-1">Which way does yertle first move in the example above?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_turtle_dir_opt_c">
                  <div class="para" id="turtle_dir-2-3-1-1">East</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_turtle_dir_opt_c">
                  <div class="para" id="turtle_dir-2-3-2-1">Which way does yertle first move in the example above?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_turtle_dir_opt_d">
                  <div class="para" id="turtle_dir-2-4-1-1">West</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_turtle_dir_opt_d">
                  <div class="para" id="turtle_dir-2-4-2-1">Which way does yertle first move in the example above?</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.7.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_turtle_type" data-multipleanswers="false">
                <div class="para" id="turtle_type-1-1">1-7-6: What type of thing is Turtle in the program above?</div>
                <li data-component="answer" id="csawesome2_2_turtle_type_opt_a" data-correct="">
                  <div class="para" id="turtle_type-2-1-1-1">class</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_turtle_type_opt_a">
                  <div class="para" id="turtle_type-2-1-2-1">Yes, Turtle is a class that defines the data and behaviors for all turtles.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_turtle_type_opt_b">
                  <div class="para" id="turtle_type-2-2-1-1">object</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_turtle_type_opt_b">
                  <div class="para" id="turtle_type-2-2-2-1">yertle is an object of type Turtle.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_turtle_type_opt_c">
                  <div class="para" id="turtle_type-2-3-1-1">attribute</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_turtle_type_opt_c">
                  <div class="para" id="turtle_type-2-3-2-1">An attribute is something the object knows about itself.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_turtle_type_opt_d">
                  <div class="para" id="turtle_type-2-4-1-1">method</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_turtle_type_opt_d">
                  <div class="para" id="turtle_type-2-4-2-1">A method is something an object can do like go forward.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.7.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_type_turn_right" data-multipleanswers="false">
                <div class="para" id="type_turn_right-1-1">1-7-7: What type of thing is turnRight in the program above?</div>
                <li data-component="answer" id="csawesome2_2_type_turn_right_opt_a">
                  <div class="para" id="type_turn_right-2-1-1-1">object</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_type_turn_right_opt_a">
                  <div class="para" id="type_turn_right-2-1-2-1">An object has data and behavior.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_type_turn_right_opt_b">
                  <div class="para" id="type_turn_right-2-2-1-1">class</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_type_turn_right_opt_b">
                  <div class="para" id="type_turn_right-2-2-2-1">A class defines the data and behavior for all objects of that type.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_type_turn_right_opt_c">
                  <div class="para" id="type_turn_right-2-3-1-1">attribute</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_type_turn_right_opt_c">
                  <div class="para" id="type_turn_right-2-3-2-1">An attribute is something the object knows about itself.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_type_turn_right_opt_d" data-correct="">
                  <div class="para" id="type_turn_right-2-4-1-1">method</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_type_turn_right_opt_d">
                  <div class="para" id="type_turn_right-2-4-2-1">A behavior or method is something an object can do like turn right.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.7.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_type_position" data-multipleanswers="false">
                <div class="para" id="type_position-1-1">1-7-8: What type of thing is the position of a turtle in a world?</div>
                <li data-component="answer" id="csawesome2_2_type_position_opt_a">
                  <div class="para" id="type_position-2-1-1-1">object</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_type_position_opt_a">
                  <div class="para" id="type_position-2-1-2-1">An object has data and behavior.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_type_position_opt_b">
                  <div class="para" id="type_position-2-2-1-1">class</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_type_position_opt_b">
                  <div class="para" id="type_position-2-2-2-1">A class defines the data and behavior for all objects of that type.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_type_position_opt_c" data-correct="">
                  <div class="para" id="type_position-2-3-1-1">attribute</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_type_position_opt_c">
                  <div class="para" id="type_position-2-3-2-1">An attribute is something the object knows about itself like its position.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_type_position_opt_d">
                  <div class="para" id="type_position-2-4-1-1">method</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_type_position_opt_d">
                  <div class="para" id="type_position-2-4-2-1">A method is something an object can do like turn right.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.7.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_attributes_class" data-multipleanswers="false">
                <div class="para" id="attributes_class-1-1">1-7-9: What are attributes of a class?</div>
                <li data-component="answer" id="csawesome2_2_attributes_class_opt_a">
                  <div class="para" id="attributes_class-2-1-1-1">Methods that perform tasks</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_attributes_class_opt_a">
                  <div class="para" id="attributes_class-2-1-2-1">Incorrect. Attributes are not methods.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_attributes_class_opt_b" data-correct="">
                  <div class="para" id="attributes_class-2-2-1-1">Data related to the class stored in variables</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_attributes_class_opt_b">
                  <div class="para" id="attributes_class-2-2-2-1">Correct! Attributes are data related to the class stored in variables.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_attributes_class_opt_c">
                  <div class="para" id="attributes_class-2-3-1-1">The arguments of a class</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_attributes_class_opt_c">
                  <div class="para" id="attributes_class-2-3-2-1">Incorrect. Classes do not have arguments.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_attributes_class_opt_d">
                  <div class="para" id="attributes_class-2-4-1-1">Packages that contain the class</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_attributes_class_opt_d">
                  <div class="para" id="attributes_class-2-4-2-1">Incorrect. Attributes are not packages.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.7.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_parsons_TurtleL">
                <div class="parsons_question parsons-text">
                  <div class="para" id="parsons_TurtleL-1-1">The following program uses a turtle to draw a sideways capital L as seen in the image, but the lines are mixed up.  The program should do all necessary set-up. Then it should ask the turtle to turn right, go forward, turn left, and then go forward 50 pixels. Next, it should ask the habitat to show itself. Drag the needed blocks of statements from the left column to the right column and put them in the right order.  There are 2 extra blocks that are not needed in a correct solution.  Then click on Check Me to see if you are right. You will be told if any of the lines are in the wrong order or are the wrong blocks.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">import java.util.*;
import java.awt.*;
---
public class TurtleTest {
---
    public static void main(String[] args) {
---
        World habitat = new World(300,300);
        Turtle yertle = new Turtle(habitat);
---
        yertle.turnRight();
---
        yertle.right();  #paired
---
        yertle.forward();
---
        yertle.forward()  #paired
---
        yertle.turnLeft();
---
        yertle.forward(50);
---
        habitat.show(true);
---
    } // end main
} // end class</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.7.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge1-7-TurtleShape">
                <div class="ac_question" id="csawesome2_2_challenge1-7-TurtleShape_question">
                  <div class="para" id="challenge1-7-TurtleShape-1-1">Have yertle draw a shape, for example a square or a zigzag shape or a block letter by calling the forward method and a turn method multiple times.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge1-7-TurtleShape_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.util.*;

public class TurtleShape
{
    public static void main(String[] args)
    {
        World habitat = new World(500, 500);
        Turtle yertle = new Turtle(habitat);

        // Use yertle's forward and turnRight or turnLeft methods to draw a shape




        // Do not change the line below!
        habitat.show(true);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleShape");
    }

    @Test
    public void test2()
    {
        String code = getCode();
        String right = ".turnRight()";
        String left = ".turnLeft()";

        int countR = countOccurences(code, right);
        int countL = countOccurences(code, left);
        int count = countR + countL;

        boolean passed = (count &gt;= 3);

        passed =
                getResults(
                        "3+ turns",
                        "" + count + "+ turns",
                        "3+ turnRight() or turnLeft()",
                        passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCode();
        String forwards = ".forward";
        String backwards = ".backward";

        int forward = countOccurences(code, forwards);
        int backward = countOccurences(code, backwards);
        int moves = forward + backward;

        boolean passed = (moves &gt;= 4);

        passed =
                getResults(
                        "4+ moves", "" + moves +
                        "+ moves",
                        "forward or backward", passed);
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String[] code = getCode().split("\n");
        int expect = 25;

        boolean passed = code.length &gt;= expect;

        passed =
                getResults(
                        expect + "+ line(s)",
                        "" + code.length + " lines(s)",
                        "More than " + expect + " lines of code",
                        passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>documentation-with-comments-and-preconditions</id>
      <title>Documentation with Comments and Preconditions</title>
      <question>
        <label>Exercise 1.8.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_comments">
                <span data-subcomponent="question">
                  <div class="para" id="comments-1-1">Drag the definition from the left and drop it on the correct symbols on the right.  Click the "Check Me" button to see if you are correct.</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="comments-2-1">Review the section above.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_comments_drag1">single-line comment</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_comments_drag1">//</li>
                <li data-subcomponent="draggable" id="csawesome2_2_comments_drag2">multi-line comment</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_comments_drag2">/* */</li>
                <li data-subcomponent="draggable" id="csawesome2_2_comments_drag3">Java documentation comment</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_comments_drag3">/** */</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.8.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_math-preconditions">
                <div class="ac_question" id="csawesome2_2_math-preconditions_question">
                  <div class="para" id="math-preconditions-1-1">The following code uses the square root method in Java which has a precondition that the number that you give it is not negative.  When you click on run, the compiler will not catch the error, but it will return the error value <code class="code-inline tex2jax_ignore">NaN</code>.  Can you fix the value of num so that it does not return <code class="code-inline tex2jax_ignore">NaN</code>?  What is the precondition for the Math.sqrt method?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_math-preconditions_editor" data-question_label="" data-codelens="true">public class SqRoot
{
   public static void main(String[] args)
   {
         double num = -4;
         System.out.println(Math.sqrt(num));
   }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String target = "SqRoot";
        boolean passed = checkCodeContains("SqRoot", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.8.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_turtle-preconditions">
                <div class="ac_question" id="csawesome2_2_turtle-preconditions_question">
                  <div class="para" id="turtle-preconditions-1-1">Try to break the preconditions of the Turtle forward method below. Can you make it go completely off screen by changing the number of pixels given to the forward method in line 13? What happens if you put in negative numbers?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_turtle-preconditions_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.util.*;

public class TurtlePreconditions
{
    public static void main(String[] args)
    {
        World habitat = new World(300, 300);
        Turtle yertle = new Turtle(habitat);

        // Change 100 pixels below to a larger number
        //   to try to go off screen to break preconditions
        yertle.forward(100);

        // code to turn and come back down
        yertle.turnLeft();
        yertle.forward();
        yertle.turnLeft();
        yertle.forward();

        habitat.show(true);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtlePreconditions");
    }

    @Test
    public void test1()
    {
        String code = getCode();
        boolean passed = !(code.contains("forward(100)"));
        passed = getResults("true", "" + passed, "Change forward(100) to try to break preconditions", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: TRcReyRYIMg</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="TRcReyRYIMg" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.8.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP-preconditions" data-multipleanswers="true"><div class="para" id="AP-preconditions-1-1">1-8-7: Consider the following method.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">       /** method to add extra-credit to the score **/
       public double computeScore(double score, double extraCredit)
       {
           double totalScore = score + extraCredit;
           return totalScore;
       }

Which of the following preconditions are reasonable for the computeScore method?
</code></pre></div><li data-component="answer" id="csawesome2_2_AP-preconditions_opt_a"><div class="para" id="AP-preconditions-2-1-1-1">/* Precondition: score &lt;= 0 */</div></li><li data-component="feedback" id="csawesome2_2_AP-preconditions_opt_a"><div class="para" id="AP-preconditions-2-1-2-1">No, score should not be negative. Preconditions do not usually enforce negative values.</div></li><li data-component="answer" id="csawesome2_2_AP-preconditions_opt_b" data-correct=""><div class="para" id="AP-preconditions-2-2-1-1">/* Precondition: score &gt;= 0 */</div></li><li data-component="feedback" id="csawesome2_2_AP-preconditions_opt_b"><div class="para" id="AP-preconditions-2-2-2-1">Correct. It is reasonable that the score should be a positive value.</div></li><li data-component="answer" id="csawesome2_2_AP-preconditions_opt_c" data-correct=""><div class="para" id="AP-preconditions-2-3-1-1">/* Precondition: extraCredit &gt;= 0 */</div></li><li data-component="feedback" id="csawesome2_2_AP-preconditions_opt_c"><div class="para" id="AP-preconditions-2-3-2-1">Correct. It is reasonable that the extraCredit should be a positive value.</div></li><li data-component="answer" id="csawesome2_2_AP-preconditions_opt_d"><div class="para" id="AP-preconditions-2-4-1-1">/* Precondition: extraCredit &lt;= 0 */</div></li><li data-component="feedback" id="csawesome2_2_AP-preconditions_opt_d"><div class="para" id="AP-preconditions-2-4-2-1">No, extraCredit should not be negative. Preconditions do not usually enforce negative values.</div></li><li data-component="answer" id="csawesome2_2_AP-preconditions_opt_e"><div class="para" id="AP-preconditions-2-5-1-1">/* Precondition: computeScore &gt;= 0 */</div></li><li data-component="feedback" id="csawesome2_2_AP-preconditions_opt_e"><div class="para" id="AP-preconditions-2-5-2-1">computeScore is a method, not a variable. Preconditions are usually for variables.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>method-signatures</id>
      <title>Method Signatures</title>
      <question>
        <label>Exercise 1.9.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_repeatedcode-old-mcdonald">
                <span data-question="">
                  <div class="para" id="repeatedcode-old-mcdonald-1-1">Click on all the lines that are completely identical and repeated.</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="repeatedcode-old-mcdonald-2-1">Look for lines that are completely identical.</div>
                </span>
                <pre><span data-incorrect="">public static void main(String args[]) {</span>
    <span data-correct="">System.out.println("Old MacDonald had a farm.");</span>
    <span data-correct="">System.out.println("E-I-E-I-O");</span>
    <span data-incorrect="">System.out.println("And on this farm, they had a cow.");</span>
    <span data-correct="">System.out.println("E-I-E-I-O");</span>
    <span data-incorrect="">System.out.println("With a moo moo here and a moo moo there");</span>
    <span data-incorrect="">System.out.println("Here a moo, there a moo, everywhere a moo moo");</span>
    <span data-correct="">System.out.println("Old MacDonald had a farm");</span>
    <span data-correct="">System.out.println("E-I-E-I-O");</span>
<span data-incorrect="">}</span>
</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="csawesome2_2_" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;java&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/method-signatures-4-9.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.9.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_song-add-calls">
                <div class="ac_question" id="csawesome2_2_song-add-calls_question">
                  <div class="para" id="song-add-calls-1-1">Scroll down to the main method below and add lines of code to the main method for the second verse of the Old MacDonald Song by calling the intro() and chorus() methods and printing out lines about a duck or another animal.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_song-add-calls_editor" data-question_label="" data-codelens="true">public class OldMacDonaldSong
{
    public static void intro()
    {
        System.out.println("Old MacDonald had a farm");
        chorus();
    }

    public static void chorus()
    {
        System.out.println("E-I-E-I-O");
    }

    public static void main(String[] args)
    {
        intro();
        System.out.println("And on that farm they had a cow.");
        chorus();
        System.out.println("With a moo moo here and a moo moo there");
        System.out.println("Here a moo, there a moo, everywhere a moo moo");

        // TODO:
        // 1. Call the method intro()

        // 2. Print out the line "And on that farm..."
        //    with a duck or another animal

        // 3. Call the method chorus

        // 4. Print out the lines with the appropriate animal sounds

        // 5. Call the method intro again

    }
}
====
import static org.junit.Assert.*;
import org.junit.*;
import java.io.*;
public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String code = getCode();
        int num = countOccurences(code, "intro();");

        boolean passed = num &gt;= 3;

        passed = getResults("3 or more", "" + num, "Calls to intro()", passed);
        assertTrue(passed);
    }
    @Test
    public void test2()
    {
        String code = getCode();
        int num = countOccurences(code, "chorus();");

        boolean passed = num &gt;= 3;

        passed = getResults("3 or more", "" + num, "Calls to chorus()", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.9.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_songMethodsTrace" data-multipleanswers="false"><div class="para" id="songMethodsTrace-1-1">1-9-4: What does the following code print out?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Song
{
    public static void print()
    {
        System.out.print("I like to ");
        eat();
        eat();
        eat();
        fruit();
    }

    public static void fruit()
    {
        System.out.println("apples and bananas!");
    }

    public static void eat()
    {
        System.out.print("eat ");
    }

    public static void main(String[] args)
    {
        print();
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_songMethodsTrace_opt_a"><div class="para" id="songMethodsTrace-2-1-1-1">I like to eat eat eat.</div></li><li data-component="feedback" id="csawesome2_2_songMethodsTrace_opt_a"><div class="para" id="songMethodsTrace-2-1-2-1">Try tracing through the print method and see what happens when it calls the other methods.</div></li><li data-component="answer" id="csawesome2_2_songMethodsTrace_opt_b"><div class="para" id="songMethodsTrace-2-2-1-1">I like to eat eat eat fruit.</div></li><li data-component="feedback" id="csawesome2_2_songMethodsTrace_opt_b"><div class="para" id="songMethodsTrace-2-2-2-1">There is a fruit() method but it does not print out the word fruit.</div></li><li data-component="answer" id="csawesome2_2_songMethodsTrace_opt_c"><div class="para" id="songMethodsTrace-2-3-1-1">I like to apples and bananas eat.</div></li><li data-component="feedback" id="csawesome2_2_songMethodsTrace_opt_c"><div class="para" id="songMethodsTrace-2-3-2-1">The order things are printed out depends on the order in which they are called from the print method.</div></li><li data-component="answer" id="csawesome2_2_songMethodsTrace_opt_d" data-correct=""><div class="para" id="songMethodsTrace-2-4-1-1">I like to eat eat eat apples and bananas!</div></li><li data-component="feedback" id="csawesome2_2_songMethodsTrace_opt_d"><div class="para" id="songMethodsTrace-2-4-2-1">Yes, the print method calls the eat method 3 times and then the fruit method to print this.</div></li><li data-component="answer" id="csawesome2_2_songMethodsTrace_opt_e"><div class="para" id="songMethodsTrace-2-5-1-1">Nothing, it does not compile.</div></li><li data-component="feedback" id="csawesome2_2_songMethodsTrace_opt_e"><div class="para" id="songMethodsTrace-2-5-2-1">Try the code in an active code window to see that it does work.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.9.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_different-code-old-mcdonald">
                <span data-question="">
                  <div class="para" id="different-code-old-mcdonald-1-1">Click on the words that are different in the lines that are repeated.</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="different-code-old-mcdonald-2-1">Look for lines that are similar except for a single word and click on that word.</div>
                </span>
                <pre><span data-incorrect="">public static void main(String args[]) {</span>
    <span data-incorrect="">System.out.println("Old MacDonald had a farm.");</span>
    <span data-incorrect="">System.out.println("E-I-E-I-O");</span>
    <span data-incorrect="">System.out.println("And on this farm, they had a</span><span data-correct="">cow</span><span data-incorrect="">.");</span>
    <span data-incorrect="">System.out.println("E-I-E-I-O");</span>
    <span data-incorrect="">System.out.println("With a</span><span data-correct="">moo moo</span><span data-incorrect="">here and a</span><span data-correct="">moo moo</span><span data-incorrect="">there");</span>
    <span data-incorrect="">System.out.println("Here a</span><span data-correct="">moo</span><span data-incorrect="">, there a</span><span data-correct="">moo</span><span data-incorrect="">, everywhere a</span><span data-correct="">moo moo</span><span data-incorrect="">");</span>
    <span data-incorrect="">System.out.println("Old MacDonald had a farm");</span>
    <span data-incorrect="">System.out.println("E-I-E-I-O");</span>
    <span data-incorrect="">System.out.println("And on this farm, they had a</span><span data-correct="">duck</span><span data-incorrect="">.");</span>
    <span data-incorrect="">System.out.println("E-I-E-I-O");</span>
    <span data-incorrect="">System.out.println("With a</span><span data-correct="">quack quack</span><span data-incorrect="">here and a</span><span data-correct="">quack quack</span><span data-incorrect="">there");</span>
    <span data-incorrect="">System.out.println("Here a</span><span data-correct="">quack</span><span data-incorrect="">, there a</span><span data-correct="">quack</span><span data-incorrect="">, everywhere a</span><span data-correct="">quack quack</span><span data-incorrect="">");</span>
    <span data-incorrect="">System.out.println("Old MacDonald had a farm");</span>
    <span data-incorrect="">System.out.println("E-I-E-I-O");</span>
<span data-incorrect="">}</span>
</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="csawesome2_2_" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;java&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/method-signatures-5-18.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.9.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_OldMacDonaldSong2">
                <div class="ac_question" id="csawesome2_2_OldMacDonaldSong2_question">
                  <div class="para" id="OldMacDonaldSong2-1-1">Run the following code to see the song Old MacDonald using the verse and chorus methods.  You can also see this code run in the visualizer by clicking on the Show Code Lens button below. Scroll down to the main method, and add another verse with the animal goose and the sound honk by calling the verse method with the appropriate arguments. Then call intro again. Repeat with another animal and sound of your choice.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_OldMacDonaldSong2_editor" data-question_label="" data-codelens="true">public class OldMacDonaldSong
{
    public static void intro()
    {
        System.out.println("Old MacDonald had a farm");
        chorus();
    }

    public static void chorus()
    {
        System.out.println("E-I-E-I-O");
    }

    public static void verse(String animal, String sound)
    {
        System.out.println("And on this farm, they had a " + animal);
        chorus();
        System.out.println("With a " + sound + " " + sound
                     + " here and a " + sound + " " + sound + " there");
        System.out.println("Here a " + sound
                     + ", there a " + sound
                     + ", everywhere a " + sound + " " + sound);
    }

    public static void main(String[] args)
    {
        intro();
        verse("cow","moo");
        intro();
        verse("duck","quack");
        intro();
        // TODO:
        // Call verse again with goose and honk
        //   and then call intro again


        // Call verse again with another animal and sound
        //  and then call intro again


     }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testThree()
    {
        boolean passed = checkCodeContains("verse with goose and honk", "verse(\"goose\", \"honk\");");
        assertTrue(passed);
    }
    @Test
    public void test1()
    {
        String code = getCode();
        int num = countOccurences(code, "intro();");

        boolean passed = num &gt;= 5;

        passed = getResults("5 or more", "" + num, "Calls to intro", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.9.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_clickDifferentAntSong">
                <span data-question="">
                  <div class="para" id="clickDifferentAntSong-1-1">Click on the phrases that are different in each verse.</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="clickDifferentAntSong-2-1">Look for words that are different in verse 1, 2, and 3.</div>
                </span>
                <pre><span data-incorrect="">The ants go marching</span><span data-correct="">one by one</span><span data-incorrect="">, hurrah, hurrah</span>
<span data-incorrect="">The ants go marching</span><span data-correct="">one by one</span><span data-incorrect="">, hurrah, hurrah</span>
<span data-incorrect="">The ants go marching</span><span data-correct="">one by one</span>
<span data-incorrect="">The little one stops to</span><span data-correct="">suck a thumb</span>
<span data-incorrect="">And they all go marching down to the ground</span>
<span data-incorrect="">To get out of the rain, BOOM! BOOM! BOOM! BOOM!</span>

<span data-incorrect="">The ants go marching</span><span data-correct="">two by two</span><span data-incorrect="">, hurrah, hurrah</span>
<span data-incorrect="">The ants go marching</span><span data-correct="">two by two</span><span data-incorrect="">, hurrah, hurrah</span>
<span data-incorrect="">The ants go marching</span><span data-correct="">two by two</span>
<span data-incorrect="">The little one stops to</span><span data-correct="">tie a shoe</span>
<span data-incorrect="">And they all go marching down to the ground</span>
<span data-incorrect="">To get out of the rain, BOOM! BOOM! BOOM! BOOM!</span>

<span data-incorrect="">The ants go marching</span><span data-correct="">three by three</span><span data-incorrect="">, hurrah, hurrah</span>
<span data-incorrect="">The ants go marching</span><span data-correct="">three by three</span><span data-incorrect="">, hurrah, hurrah</span>
<span data-incorrect="">The ants go marching</span><span data-correct="">three by three</span>
<span data-incorrect="">The little one stops to</span><span data-correct="">climb a tree</span>
<span data-incorrect="">And they all go marching down to the ground</span>
<span data-incorrect="">To get out of the rain, BOOM! BOOM! BOOM! BOOM!</span>
</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.9.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-1-9-song">
                <div class="ac_question" id="csawesome2_2_challenge-1-9-song_question">
                  <div class="para" id="challenge-1-9-song-1-1">Write code in the main method that calls the verse method to print out all three verses for the Ants Go Marching song above.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-1-9-song_editor" data-question_label="" data-codelens="true">public class AntsSong
{
    public static void chorus(String num)
    {
        System.out.println("The ants go marching " + num
                         + " by " + num + " hurrah, hurrah");
        System.out.println("The ants go marching " + num
                         + " by " + num + " hurrah, hurrah");
    }

    public static void verse(String num, String action)
    {
        System.out.println("The ants go marching " + num + " by " + num);
        System.out.println("The little one stops to " + action);
        System.out.println("And they all go marching down to the ground");
        System.out.println("To get out of the rain, BOOM! BOOM! BOOM! BOOM!\n");
    }

    public static void main(String args[])
    {
        // Call the chorus and verse methods
        // with the correct arguments
        // to print out all three verses above.



    }
}
====
import static org.junit.Assert.*;
import org.junit.*;
import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void checkCodeContains1()
    {
        String code = getCode();
        int actual = countOccurences(code, "chorus(");
        String expected = "3";

        boolean passed = actual &gt;= 3;
        getResults(
                expected,
                "" + actual,
                "Checking that code contains 3 calls to  chorus",
                passed);
        assertTrue(passed);
    }
    @Test
    public void checkCodeContains2()
    {
        String code = getCode();
        int actual = countOccurences(code, "verse(");
        String expected = "3";

        boolean passed = actual &gt;= 3;
        getResults(
                expected,
                "" + actual,
                "Checking that code contains three calls to verse method",
                passed);
        assertTrue(passed);
    }
    @Test
     public void testMain() throws IOException
     {
         String output = getMethodOutput("main");

         String expect =
            "The ants go marching one by one, hurrah, hurrah\n"
                    + "The ants go marching one by one, hurrah, hurrah\n"
                    + "The ants go marching one by one\n"
                    + "The little one stops to suck a thumb\n"
                    + "And they all go marching down to the ground\n"
                    + "To get out of the rain, BOOM! BOOM! BOOM! BOOM!\n"
                    + "\n"
                    + "The ants go marching two by two, hurrah, hurrah\n"
                    + "The ants go marching two by two, hurrah, hurrah\n"
                    + "The ants go marching two by two\n"
                    + "The little one stops to tie a shoe\n"
                    + "And they all go marching down to the ground\n"
                    + "To get out of the rain, BOOM! BOOM! BOOM! BOOM!\n"
                    + "\n"
                    + "The ants go marching three by three, hurrah, hurrah\n"
                    + "The ants go marching three by three, hurrah, hurrah\n"
                    + "The ants go marching three by three\n"
                    + "The little one stops to climb a tree\n"
                    + "And they all go marching down to the ground\n"
                    + "To get out of the rain, BOOM! BOOM! BOOM! BOOM!";

               boolean passed =
               getResults(expect, output, "Expected output from main");
               assertTrue(passed);
         }

}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.9.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_vocab1_9">
                <span data-subcomponent="question">
                  <div class="para" id="vocab1_9-1-1">Drag the definition from the left and drop it on the correct concept on the right.  Click the "Check Me" button to see if you are correct.</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="vocab1_9-2-1">Review the summary below.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_vocab1_9_drag1">named block of code to perform a task</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_vocab1_9_drag1">method</li>
                <li data-subcomponent="draggable" id="csawesome2_2_vocab1_9_drag2">where execution starts</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_vocab1_9_drag2">main method</li>
                <li data-subcomponent="draggable" id="csawesome2_2_vocab1_9_drag3">method name, return type, and parameter list</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_vocab1_9_drag3">method signature</li>
                <li data-subcomponent="draggable" id="csawesome2_2_vocab1_9_drag4">a variable declared in the header of a method</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_vocab1_9_drag4">parameter</li>
                <li data-subcomponent="draggable" id="csawesome2_2_vocab1_9_drag5">value passed into a method when it is called</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_vocab1_9_drag5">argument</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.9.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP-trace-method-calls" data-multipleanswers="false"><div class="para" id="AP-trace-method-calls-1-1">1-9-11: Consider the following class definition.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Cat
{
    public static void sound1()
    {
        System.out.print("meow ");
    }

    public static void sound2()
    {
        System.out.print("purr ");
    }

    public static void hello()
    {
        sound2();
        sound1();
    }
}
</code></pre></div> <div class="para" id="AP-trace-method-calls-1-3">Which of the following code segments, if located in a method inside the Cat class, will cause the message “purr meow purr” to be printed?</div><li data-component="answer" id="csawesome2_2_AP-trace-method-calls_opt_a"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">hello();
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP-trace-method-calls_opt_a"><div class="para" id="AP-trace-method-calls-2-1-2-1">This would print “purr meow “</div></li><li data-component="answer" id="csawesome2_2_AP-trace-method-calls_opt_b" data-correct=""><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">hello();
sound2();
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP-trace-method-calls_opt_b"><div class="para" id="AP-trace-method-calls-2-2-2-1">Correct!</div></li><li data-component="answer" id="csawesome2_2_AP-trace-method-calls_opt_c"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">sound1()
sound2();
sound1();
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP-trace-method-calls_opt_c"><div class="para" id="AP-trace-method-calls-2-3-2-1">This would print out “meow purr meow” instead of “purr meow purr”.</div></li><li data-component="answer" id="csawesome2_2_AP-trace-method-calls_opt_d"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">purr();
meow();
purr()
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP-trace-method-calls_opt_d"><div class="para" id="AP-trace-method-calls-2-4-2-1">This would cause a syntax error since those are not the names of the methods.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>calling-class-methods</id>
      <title>Calling Class Methods</title>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="csawesome2_2_" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;java&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/calling-class-methods-3-9.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.10.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_squareMethod">
                <div class="ac_question" id="csawesome2_2_squareMethod_question">
                  <div class="para" id="squareMethod-1-1">Add another call to the square method in the main method that prints out the square of 6.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_squareMethod_editor" data-question_label="" data-codelens="true">public class SquareMethod
{
     public static int square(int number)
     {
         int result = number * number;
         return result;
     }

     public static void main(String[] args)
     {
         System.out.println("5 squared is " + square(5));
         // TO DO: Call the square method to print out the square of 6

     }
}
====
import static org.junit.Assert.*;
import org.junit.*;
import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void containsCall()
    {
        boolean passed = checkCodeContains("square(6)", "square(6)");
        assertTrue(passed);
    }
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "36";
        boolean passed =
             getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.10.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_traceMethods1" data-multipleanswers="false"><div class="para" id="traceMethods1-1-1">1-10-3: What does the following code print out? (<a class="external" href="https://pythontutor.com/render.html#code=%20%20%20%20%20%20public%20class%20MethodTrace%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20public%20static%20int%20square%28int%20x%29%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%28x%20*%20x%29%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20public%20static%20int%20divide%28int%20x,%20int%20y%29%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%28x%20/%20y%29%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println%28square%283%29%20%2B%20divide%285,2%29%29%3B%20%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D&amp;cumulative=false&amp;curInstr=0&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" target="_blank">visualization</a><details class="ptx-footnote" aria-live="polite" id="traceMethods1-1-1-2"><summary class="ptx-footnote__number" title="Footnote 1.10.2"><sup> 2 </sup></summary><div class="ptx-footnote__contents" id="traceMethods1-1-1-2"><code class="code-inline tex2jax_ignore">https://pythontutor.com/render.html#code=%20%20%20%20%20%20public%20class%20MethodTrace%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20public%20static%20int%20square%28int%20x%29%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%28x%20*%20x%29%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20public%20static%20int%20divide%28int%20x,%20int%20y%29%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%28x%20/%20y%29%3B%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println%28square%283%29%20%2B%20divide%285,2%29%29%3B%20%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D&amp;cumulative=false&amp;curInstr=0&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false</code></div></details>)</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class MethodTrace
{
    public static int square(int x)
    {
        return (x * x);
    }

    public static int divide(int x, int y)
    {
        return (x / y);
    }

    public static void main(String[] args)
    {
        System.out.println(square(3) + divide(5,2));
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_traceMethods1_opt_a" data-correct=""><div class="para" id="traceMethods1-2-1-1-1">11</div></li><li data-component="feedback" id="csawesome2_2_traceMethods1_opt_a"><div class="para" id="traceMethods1-2-1-2-1">Yes, the square(3) method is called first and returns 9. Then the divide(5,2) method is called and returns 2 because it does int division and leaves off the decimal part. The sum of 9 and 2 is 11.</div></li><li data-component="answer" id="csawesome2_2_traceMethods1_opt_b"><div class="para" id="traceMethods1-2-2-1-1">11.5</div></li><li data-component="feedback" id="csawesome2_2_traceMethods1_opt_b"><div class="para" id="traceMethods1-2-2-2-1">The divide function does integer division.</div></li><li data-component="answer" id="csawesome2_2_traceMethods1_opt_c"><div class="para" id="traceMethods1-2-3-1-1">92</div></li><li data-component="feedback" id="csawesome2_2_traceMethods1_opt_c"><div class="para" id="traceMethods1-2-3-2-1">The + here will be interpreted as addition since the methods return ints.</div></li><li data-component="answer" id="csawesome2_2_traceMethods1_opt_d"><div class="para" id="traceMethods1-2-4-1-1">square(3)+divide(5,2)</div></li><li data-component="feedback" id="csawesome2_2_traceMethods1_opt_d"><div class="para" id="traceMethods1-2-4-2-1">The square and divide methods are called and return values that are added together.</div></li><li data-component="answer" id="csawesome2_2_traceMethods1_opt_e"><div class="para" id="traceMethods1-2-5-1-1">Nothing, it does not compile.</div></li><li data-component="feedback" id="csawesome2_2_traceMethods1_opt_e"><div class="para" id="traceMethods1-2-5-2-1">Try the code in an active code window.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.10.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_fixMethodCalls">
                <div class="ac_question" id="csawesome2_2_fixMethodCalls_question">
                  <div class="para" id="fixMethodCalls-1-1">Fix the method calls below in the main method. Make sure the type, how many, and order of the arguments match what the methods expect. Are the returned values saved in the right type of variables? Do not change the methods other than main.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_fixMethodCalls_editor" data-question_label="" data-codelens="true">public class MathMethods
{
     /* square method returns the square of a number.
        Do NOT change */
     public static int square(int number)
     {
         return number * number;
     }

     /** divide method divides x by y to return a double result .
        Do NOT change */
     public static double divide(double x, double y)
     {
         return x / y;
     }

     public static void main(String[] args)
     {
         // TO DO: Fix the method calls and data types below
         // Make sure the type, how many, and order of the
         // arguments match what the methods expect.
         // Make sure they are saved in the right type of variables.
         // result1 should be 4 squared
         // result2 should be 5 divided by 2
         int result1 = square(4.0, 2);
         int result2 = divide(2, 5);
         System.out.println("4 squared is " + result1);
         System.out.println("5 divided by 2 is " + result2);
     }
}
====
import static org.junit.Assert.*;
import org.junit.*;
import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void containsType()
    {
        boolean passed = checkCodeContains("correct double type for result2", "double result2");
        assertTrue(passed);
    }
    @Test
    public void containsCall()
    {
        boolean passed = checkCodeContains("call to square with int 4", "square(4)");
        assertTrue(passed);
    }
    @Test
    public void containsCall2()
    {
        boolean passed = checkCodeContains("call to divide with the correct argument order", "divide(5,2)");
        assertTrue(passed);
    }
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "4 squared is 16\n5 divided by 2 is 2.5";
        boolean passed =
             getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.10.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_hypotenuse-java-mc" data-multipleanswers="true">
                <div class="para" id="hypotenuse-java-mc-1-1">1-10-5: Which of the following are correct Java expressions to compute the hypotenuse of a triangle with legs <code class="code-inline tex2jax_ignore">a</code> and <code class="code-inline tex2jax_ignore">b</code> given the Pythagorean Theorem c = \sqrt{a^{2} + b^{2}} where a and b are the lengths of the legs and c is the length of the hypotenuse?</div>
                <li data-component="answer" id="csawesome2_2_hypotenuse-java-mc_opt_a" data-correct="">
                  <div class="para" id="hypotenuse-java-mc-2-1-1-1">
                    <code class="code-inline tex2jax_ignore">Math.sqrt(a * a + b * b)</code>
                  </div>
                </li>
                <li data-component="feedback" id="csawesome2_2_hypotenuse-java-mc_opt_a">
                  <div class="para" id="hypotenuse-java-mc-2-1-2-1">✅ <code class="code-inline tex2jax_ignore">a * a</code> is a squared, likewise <code class="code-inline tex2jax_ignore">b * b</code>. Adding them with <code class="code-inline tex2jax_ignore">+</code> gives us the sum which is then passed to <code class="code-inline tex2jax_ignore">Math.sqrt</code>.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_hypotenuse-java-mc_opt_b" data-correct="">
                  <div class="para" id="hypotenuse-java-mc-2-2-1-1">
                    <code class="code-inline tex2jax_ignore">Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2))</code>
                  </div>
                </li>
                <li data-component="feedback" id="csawesome2_2_hypotenuse-java-mc_opt_b">
                  <div class="para" id="hypotenuse-java-mc-2-2-2-1">✅ <code class="code-inline tex2jax_ignore">Math.pow(a, 2)</code> is <code class="code-inline tex2jax_ignore">a</code> squared, likewise <code class="code-inline tex2jax_ignore">Math.pow(b, 2)</code>. Adding them with <code class="code-inline tex2jax_ignore">+</code> gives us the sum which is then passed to <code class="code-inline tex2jax_ignore">Math.sqrt</code>.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_hypotenuse-java-mc_opt_c">
                  <div class="para" id="hypotenuse-java-mc-2-3-1-1">
                    <code class="code-inline tex2jax_ignore">Math.sqrt(a + b)</code>
                  </div>
                </li>
                <li data-component="feedback" id="csawesome2_2_hypotenuse-java-mc_opt_c">
                  <div class="para" id="hypotenuse-java-mc-2-3-2-1">❌ Close, but we need to square the lengths of the legs.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_hypotenuse-java-mc_opt_d">
                  <div class="para" id="hypotenuse-java-mc-2-4-1-1">
                    <code class="code-inline tex2jax_ignore">a * a + b * b</code>
                  </div>
                </li>
                <li data-component="feedback" id="csawesome2_2_hypotenuse-java-mc_opt_d">
                  <div class="para" id="hypotenuse-java-mc-2-4-2-1">❌ This is the sum of the squares of the lengths of the legs which gives us the square of the hypotenuse. We need a <code class="code-inline tex2jax_ignore">Math.sqrt</code> to get the length of the hypotenuse.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.10.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-1-10-pythagorean">
                <div class="ac_question" id="csawesome2_2_challenge-1-10-pythagorean_question">
                  <div class="para" id="challenge-1-10-pythagorean-1-1">Complete the <code class="code-inline tex2jax_ignore">ladderSizeNeeded</code> method below using the Pythagorean Theorem and the <code class="code-inline tex2jax_ignore">Math.sqrt</code> method. Then in the main method, write a method call to test the <code class="code-inline tex2jax_ignore">ladderSizeNeeded</code> method with arguments for the height of 30 and the width of 40. The method should return the length of the ladder needed to reach the window of your beloved.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-1-10-pythagorean_editor" data-question_label="" data-codelens="true">public class LadderHelper
{
    /* ladderSizeNeeded computes the hypotenuse of a right triangle
     * given the lengths of the other two sides.
     * @param height : the height of the window
     * @param width : the width of the moat
     * @return the length of the ladder needed
     */
    public static double ladderSizeNeeded(double height, double width)
    {
        double ladderSize;
        // TODO: Calculate ladderSize using the Pythagorean theorem
        // with the Math.sqrt and Math.pow (or just *) methods
        // using the arguments height and width



        return ladderSize;
    }

    public static void main(String[] argv)
    {
        double size;
        // TODO: Call the ladderSizeNeeded method
        // with the height of 30 and the width of 40 and save it in size.

        System.out.println("Beloved, I need a " + size + " foot ladder!");
    }
}
====
import org.junit.Test;
import java.io.IOException;

public class RunestoneTests extends CodeTestHelper
{
    private void check(double height, double width)
    {
        double expected = Math.sqrt(Math.pow(height, 2) + Math.pow(width, 2));
        double got = LadderHelper.ladderSizeNeeded(height, width);
        String label = "ladderSizeNeeded(" + height + ", " + width + ")";
        expectExact(expected, got, label);
    }

    @Test
    public void testMain() throws IOException
    {
        String expected = "Beloved, I need a 50.0 foot ladder!";
        expect(expected, getMethodOutput("main"), "Expected output from main");
    }

    @Test
    public void testShort() {
      check(3, 4);
    }
    @Test
    public void testTall() {
      check(30, 40);
    }

    @Test
    public void testRandom() {
      check(Math.random() * 100, Math.random() * 50);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.10.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP1-10-static-method" data-multipleanswers="false"><div class="para" id="AP1-10-static-method-1-1">1-10-7: Consider the following method.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static double calculatePizzaBoxes(int numOfPeople, double slicesPerBox)
{ /*implementation not shown */}
</code></pre></div> <div class="para" id="AP1-10-static-method-1-3">Which of the following lines of code, if located in a method in the same class as calculatePizzaBoxes, will compile without an error?</div><li data-component="answer" id="csawesome2_2_AP1-10-static-method_opt_a"><div class="para" id="AP1-10-static-method-2-1-1-1">int result = calculatePizzaBoxes(45, 9.0);</div></li><li data-component="feedback" id="csawesome2_2_AP1-10-static-method_opt_a"><div class="para" id="AP1-10-static-method-2-1-2-1">The method calculatePizzaBoxes returns a double value that cannot be saved into an int variable.</div></li><li data-component="answer" id="csawesome2_2_AP1-10-static-method_opt_b"><div class="para" id="AP1-10-static-method-2-2-1-1">double result = calculatePizzaBoxes(45.0, 9.0);</div></li><li data-component="feedback" id="csawesome2_2_AP1-10-static-method_opt_b"><div class="para" id="AP1-10-static-method-2-2-2-1">The method calculatePizzaBoxes has an int parameter that cannot hold a double value 45.0.</div></li><li data-component="answer" id="csawesome2_2_AP1-10-static-method_opt_c"><div class="para" id="AP1-10-static-method-2-3-1-1">int result = calculatePizzaBoxes(45.0, 9);</div></li><li data-component="feedback" id="csawesome2_2_AP1-10-static-method_opt_c"><div class="para" id="AP1-10-static-method-2-3-2-1">The method calculatePizzaBoxes has an int parameter that cannot hold a double value 45.0. Note that the int 9 can be passed into a double parameter.</div></li><li data-component="answer" id="csawesome2_2_AP1-10-static-method_opt_d" data-correct=""><div class="para" id="AP1-10-static-method-2-4-1-1">double result = calculatePizzaBoxes(45, 9.0);</div></li><li data-component="feedback" id="csawesome2_2_AP1-10-static-method_opt_d"><div class="para" id="AP1-10-static-method-2-4-2-1">The method calculatePizzaBoxes has an int and a double parameter and returns a double result.</div></li><li data-component="answer" id="csawesome2_2_AP1-10-static-method_opt_e"><div class="para" id="AP1-10-static-method-2-5-1-1">result = calculatePizzaBoxes(45, 9);</div></li><li data-component="feedback" id="csawesome2_2_AP1-10-static-method_opt_e"><div class="para" id="AP1-10-static-method-2-5-2-1">The variable result has not been declared (with an appropriate data type).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.10.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP1-10-static-method2" data-multipleanswers="false"><div class="para" id="AP1-10-static-method2-1-1">1-10-8: Consider the following methods:</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public void static inchesToCentimeters(double i)
{
    double c = i * 2.54;
    printInCentimeters(i, c);
}

public void static printInCentimeters(double inches, double centimeters)
{
    System.out.print(inches + "--&gt;" + centimeters);
}
</code></pre></div> <div class="para" id="AP1-10-static-method2-1-3">Assume that the method call <code class="code-inline tex2jax_ignore">inchesToCentimeters(10)</code> appears in a static method in the same class. What is printed as a result of the method call?</div><li data-component="answer" id="csawesome2_2_AP1-10-static-method2_opt_a"><div class="para" id="AP1-10-static-method2-2-1-1-1">inches –&gt; centimeters</div></li><li data-component="feedback" id="csawesome2_2_AP1-10-static-method2_opt_a"><div class="para" id="AP1-10-static-method2-2-1-2-1">The values of the variables inches and centimeters should be printed out, not the words.</div></li><li data-component="answer" id="csawesome2_2_AP1-10-static-method2_opt_b"><div class="para" id="AP1-10-static-method2-2-2-1-1">10 –&gt;  25</div></li><li data-component="feedback" id="csawesome2_2_AP1-10-static-method2_opt_b"><div class="para" id="AP1-10-static-method2-2-2-2-1">Two doubles should be printed, not two ints, and the centimeters should be 25.4</div></li><li data-component="answer" id="csawesome2_2_AP1-10-static-method2_opt_c"><div class="para" id="AP1-10-static-method2-2-3-1-1">25.4 –&gt; 10</div></li><li data-component="feedback" id="csawesome2_2_AP1-10-static-method2_opt_c"><div class="para" id="AP1-10-static-method2-2-3-2-1">Inches should be printed before centimeters.</div></li><li data-component="answer" id="csawesome2_2_AP1-10-static-method2_opt_d"><div class="para" id="AP1-10-static-method2-2-4-1-1">10 –&gt; 12.54</div></li><li data-component="feedback" id="csawesome2_2_AP1-10-static-method2_opt_d"><div class="para" id="AP1-10-static-method2-2-4-2-1">c = 10 * 2.54 = 25.4, not 12.54.</div></li><li data-component="answer" id="csawesome2_2_AP1-10-static-method2_opt_e" data-correct=""><div class="para" id="AP1-10-static-method2-2-5-1-1">10.0 –&gt; 25.4</div></li><li data-component="feedback" id="csawesome2_2_AP1-10-static-method2_opt_e"><div class="para" id="AP1-10-static-method2-2-5-2-1">Correct! centimeters = 10 * 2.54 = 25.4.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>using-the-math-class</id>
      <title>Using the Math Class</title>
      <question>
        <label>Exercise 1.11.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_trymath">
                <div class="ac_question" id="csawesome2_2_trymath_question">
                  <div class="para" id="trymath-1-1">Try the Math methods below. Change the code so that it computes the absolute value of -4, the square root of 9, and 3 raised to the power of 2.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_trymath_editor" data-question_label="" data-codelens="true">public class TryMath
{
    public static void main(String[] args)
    {
        // TODO: Change the code below to compute
        //       the absolute value of -4,
        //       the square root of 9,
        //       and 3 raised to the power of 2.
        System.out.println( Math.abs(-2) );
        System.out.println( Math.sqrt(4) );
        System.out.println( Math.pow(2, 3) );
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "4\n3.0\n9.0\n";
        boolean passed = getResults(expect, output, "Expected output from main after changing code");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.11.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_call-sqrt-mc" data-multipleanswers="true">
                <div class="para" id="call-sqrt-mc-1-1">1-11-2: Knowing that <code class="code-inline tex2jax_ignore">Math.sqrt</code> takes a single argument, Which of these are syntactically correct method calls to <code class="code-inline tex2jax_ignore">sqrt</code>?</div>
                <li data-component="answer" id="csawesome2_2_call-sqrt-mc_opt_a" data-correct="">
                  <div class="para" id="call-sqrt-mc-2-1-1-1">
                    <code class="code-inline tex2jax_ignore">Math.sqrt(2)</code>
                  </div>
                </li>
                <li data-component="feedback" id="csawesome2_2_call-sqrt-mc_opt_a">
                  <div class="para" id="call-sqrt-mc-2-1-2-1">✅ This is a simple call to <code class="code-inline tex2jax_ignore">Math.sqrt</code> with the argument 2.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_call-sqrt-mc_opt_b">
                  <div class="para" id="call-sqrt-mc-2-2-1-1">
                    <code class="code-inline tex2jax_ignore">Math.sqrt()</code>
                  </div>
                </li>
                <li data-component="feedback" id="csawesome2_2_call-sqrt-mc_opt_b">
                  <div class="para" id="call-sqrt-mc-2-2-2-1">❌ <code class="code-inline tex2jax_ignore">Math.sqrt</code> takes one argument. This would be a correct call if it took no arguments.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_call-sqrt-mc_opt_c">
                  <div class="para" id="call-sqrt-mc-2-3-1-1">
                    <code class="code-inline tex2jax_ignore">Math.sqrt(2, 4)</code>
                  </div>
                </li>
                <li data-component="feedback" id="csawesome2_2_call-sqrt-mc_opt_c">
                  <div class="para" id="call-sqrt-mc-2-3-2-1">❌ <code class="code-inline tex2jax_ignore">Math.sqrt</code> takes one argument. This would be a correct call if it took two arguments.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_call-sqrt-mc_opt_d" data-correct="">
                  <div class="para" id="call-sqrt-mc-2-4-1-1">
                    <code class="code-inline tex2jax_ignore">Math.sqrt(2 + 3)</code>
                  </div>
                </li>
                <li data-component="feedback" id="csawesome2_2_call-sqrt-mc_opt_d">
                  <div class="para" id="call-sqrt-mc-2-4-2-1">✅ The argument passed to <code class="code-inline tex2jax_ignore">Math.sqrt</code> is the value of the expression 2 + 3, namely 5.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_call-sqrt-mc_opt_e">
                  <div class="para" id="call-sqrt-mc-2-5-1-1">
                    <code class="code-inline tex2jax_ignore">Math.sqrt 2</code>
                  </div>
                </li>
                <li data-component="feedback" id="csawesome2_2_call-sqrt-mc_opt_e">
                  <div class="para" id="call-sqrt-mc-2-5-2-1">❌ You must have parentheses around the arguments.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_call-sqrt-mc_opt_f" data-correct="">
                  <div class="para" id="call-sqrt-mc-2-6-1-1">
                    <code class="code-inline tex2jax_ignore">Math.sqrt(Math.sqrt(2))</code>
                  </div>
                </li>
                <li data-component="feedback" id="csawesome2_2_call-sqrt-mc_opt_f">
                  <div class="para" id="call-sqrt-mc-2-6-2-1">✅ The argument passed to <code class="code-inline tex2jax_ignore">Math.sqrt</code> is the value of <em class="emphasis">another</em> call to <code class="code-inline tex2jax_ignore">Math.sqrt</code> which is perfectly fine.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.11.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_distance-mc" data-multipleanswers="false"><div class="para" id="distance-mc-1-1">1-11-3: The distance between two numbers on the number line is defined as the absolute value of their difference. Their difference is just what you get when you subtract one from the other. For example, the distance from 0 to 3 is 3, the distance from -3 to 0 is 3, and the distance from -3 to 1 is 4.</div> <div class="image-box" style="width: 80%; margin-left: 10%; margin-right: 10%;"><img src="external/Unit1-Using-Objects-and-Methods/Figures/number-line.svg" class="contained"/></div> <div class="para" id="distance-mc-1-3">Which of the following are correct expressions to compute the distance between the numbers <code class="code-inline tex2jax_ignore">a</code> and <code class="code-inline tex2jax_ignore">b</code>.</div><li data-component="answer" id="csawesome2_2_distance-mc_opt_a" data-correct=""><div class="para" id="distance-mc-2-1-1-1"><code class="code-inline tex2jax_ignore">Math.abs(a - b)</code></div></li><li data-component="feedback" id="csawesome2_2_distance-mc_opt_a"><div class="para" id="distance-mc-2-1-2-1">✅ <code class="code-inline tex2jax_ignore">a - b</code> gives us the difference and <code class="code-inline tex2jax_ignore">Math.abs</code> gives us the absolute value of that difference.</div></li><li data-component="answer" id="csawesome2_2_distance-mc_opt_b"><div class="para" id="distance-mc-2-2-1-1"><code class="code-inline tex2jax_ignore">Math.abs(a) - Math.abs(b)</code></div></li><li data-component="feedback" id="csawesome2_2_distance-mc_opt_b"><div class="para" id="distance-mc-2-2-2-1">❌ Consider the distance between -2 and 3. It should be five. What value would this expression produce in that case?</div></li><li data-component="answer" id="csawesome2_2_distance-mc_opt_c"><div class="para" id="distance-mc-2-3-1-1"><code class="code-inline tex2jax_ignore">Math.abs(a + b)</code></div></li><li data-component="feedback" id="csawesome2_2_distance-mc_opt_c"><div class="para" id="distance-mc-2-3-2-1">❌ We need to start with the difference between <code class="code-inline tex2jax_ignore">a</code> and <code class="code-inline tex2jax_ignore">b</code>, not their sum.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.11.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_distance-abs">
                <div class="ac_question" id="csawesome2_2_distance-abs_question"><div class="para" id="distance-abs-1-1">The distance between two numbers on a number line, as we discussed in the problem above, is defined as the absolute value of their difference. Their difference is just what you get when you subtract one from the other. For example, the distance from 0 to 3 is 3, the distance from -3 to 0 is 3, and the distance from -3 to 1 is 4.</div> <div class="para" id="distance-abs-1-2">Fill in the method <code class="code-inline tex2jax_ignore">distance</code> below so it correctly computes the distance between two numbers <code class="code-inline tex2jax_ignore">a</code> and <code class="code-inline tex2jax_ignore">b</code>  using subtraction and Math.abs.</div></div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_distance-abs_editor" data-question_label="" data-codelens="true">public class DistanceCalculator
{

    public static double distance(double a, double b)
    {
        // TODO: calculate the distance from a to b using subtraction and Math.abs.
        double distance = 0.0;

        return distance;
    }

    public static void main(String[] argv)
    {
        System.out.println("distance(13.5, 26.2) = " + distance(13.5, 26.2));
        System.out.println("distance(26.2, 13.5) = " + distance(26.2, 13.5));
        System.out.println(distance(13.5, 26.2) == distance(13.5, 26.2));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
         Object[] args = {10.5, 20.6};
         String output = getMethodOutput("distance", args);
         String expect = "10.1";
         boolean passed = getResults(expect, output, "distance(10.5, 20.6)");
         assertTrue(passed);
    }
    @Test
    public void test2()
    {
         Object[] args = { -5.0, 2.4 };
         String output = getMethodOutput("distance", args);
         String expect = "7.4";
         boolean passed = getResults(expect, output, "distance(-5.0, 2.4)");
         assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.11.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_random1">
                <div class="ac_question" id="csawesome2_2_random1_question">
                  <div class="para" id="random1-1-1">Try the following code.  Run it several times to see what it prints each time.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_random1_editor" data-question_label="" data-codelens="true">public class Test3
{
    public static void main(String[] args)
    {
        System.out.println(Math.random());
        System.out.println(Math.random());
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = output;
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.11.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_random-example-stretched">
                <div class="ac_question" id="csawesome2_2_random-example-stretched_question">
                  <div class="para" id="random-example-stretched-1-1">Try the following code. Run it several times to see what it prints each time. Did you ever see 0.0? How about 1.0?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_random-example-stretched_editor" data-question_label="" data-codelens="true">public class StretchedRandom
{
    public static void main(String[] args)
    {
        System.out.println(Math.random() * 10);
        System.out.println(Math.random() * 10);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = output;
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.11.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_randomRange">
                <div class="ac_question" id="csawesome2_2_randomRange_question">
                  <div class="para" id="randomRange-1-1">Run the code below several times to see how the value changes each time. How could you change the code to return a random integer from 1 to 10?  Modify the code and see if your answer is correct. Try removing the parentheses from around (Math.random() * 10) and run the code several times. What happens? The parentheses are necessary because (int) will cast the closest expression, and (int)Math.random() will always be 0 since anything after the decimal point is dropped.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_randomRange_editor" data-question_label="" data-codelens="true">public class Test4
{
    public static void main(String[] args)
    {
        System.out.println((int) (Math.random() * 10));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testContainsRange() throws IOException
    {
        String target = "+ 1";
        boolean passed = checkCodeContains("Math.random in range 1 to 10", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.11.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qrand_1" data-multipleanswers="false">
                <div class="para" id="qrand_1-1-1">1-11-8: Which of the following would be true about 40% of the time?</div>
                <li data-component="answer" id="csawesome2_2_qrand_1_opt_a" data-correct="">
                  <div class="para" id="qrand_1-2-1-1-1">Math.random() &lt; 0.4</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qrand_1_opt_a">
                  <div class="para" id="qrand_1-2-1-2-1">This is true about 40% of the time since Math.random returns a value from 0 to not quite 1.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qrand_1_opt_b">
                  <div class="para" id="qrand_1-2-2-1-1">Math.random() &gt; 0.4</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qrand_1_opt_b">
                  <div class="para" id="qrand_1-2-2-2-1">This will be true about 60% of the time.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qrand_1_opt_c">
                  <div class="para" id="qrand_1-2-3-1-1">Math.random() == 0.4</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qrand_1_opt_c">
                  <div class="para" id="qrand_1-2-3-2-1">Do not use == with double values!  Remember that Math.random can return any number between 0 and not quite 1 (about .99999999).</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.11.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qrand_2" data-multipleanswers="false">
                <div class="para" id="qrand_2-1-1">1-11-9: Which of the following would return a random number from 1 to 5 inclusive?</div>
                <li data-component="answer" id="csawesome2_2_qrand_2_opt_a">
                  <div class="para" id="qrand_2-2-1-1-1">((int) (Math.random() * 5))</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qrand_2_opt_a">
                  <div class="para" id="qrand_2-2-1-2-1">This would be a number between 0 and 4.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qrand_2_opt_b">
                  <div class="para" id="qrand_2-2-2-1-1">((int) (Math.random() * 6))</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qrand_2_opt_b">
                  <div class="para" id="qrand_2-2-2-2-1">This would be a number between 0 and 5.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qrand_2_opt_c" data-correct="">
                  <div class="para" id="qrand_2-2-3-1-1">((int) (Math.random() * 5) + 1)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qrand_2_opt_c">
                  <div class="para" id="qrand_2-2-3-2-1">The first part would return a number between 0 and 4 and when you add 1 you get a number from 1 to 5 inclusive.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.11.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qrand_3" data-multipleanswers="false">
                <div class="para" id="qrand_3-1-1">1-11-10: Which of the following would return a random number from 0 to 10 inclusive?</div>
                <li data-component="answer" id="csawesome2_2_qrand_3_opt_a">
                  <div class="para" id="qrand_3-2-1-1-1">((int) (Math.random() * 10))</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qrand_3_opt_a">
                  <div class="para" id="qrand_3-2-1-2-1">This would be a number between 0 and 9.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qrand_3_opt_b" data-correct="">
                  <div class="para" id="qrand_3-2-2-1-1">((int) (Math.random() * 11))</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qrand_3_opt_b">
                  <div class="para" id="qrand_3-2-2-2-1">This would be a number between 0 and 10.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qrand_3_opt_c">
                  <div class="para" id="qrand_3-2-3-1-1">((int) (Math.random() * 10) + 1)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qrand_3_opt_c">
                  <div class="para" id="qrand_3-2-3-2-1">The first part would return a number between 0 and 9 and when you add 1 you get a number from 1 to 10 inclusive.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.11.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qrand_4" data-multipleanswers="false">
                <div class="para" id="qrand_4-1-1">1-11-11: Which of the following would be true about 75% of the time?</div>
                <li data-component="answer" id="csawesome2_2_qrand_4_opt_a">
                  <div class="para" id="qrand_4-2-1-1-1">Math.random() &lt; 0.25</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qrand_4_opt_a">
                  <div class="para" id="qrand_4-2-1-2-1">This is true about 25% of the time, since it will be a number from 0 to not quite 1.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qrand_4_opt_b" data-correct="">
                  <div class="para" id="qrand_4-2-2-1-1">Math.random() &gt; 0.25</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qrand_4_opt_b">
                  <div class="para" id="qrand_4-2-2-2-1">This is true about 75% of the time, since it will be a number from 0 to not quite 1.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qrand_4_opt_c">
                  <div class="para" id="qrand_4-2-3-1-1">Math.random() == 0.25</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qrand_4_opt_c">
                  <div class="para" id="qrand_4-2-3-2-1">Do not use == with double values!  Remember that Math.random can return any number between 0 and not quite 1 (about .99999999).</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.11.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_apcsa_sample3" data-multipleanswers="false">
                <div class="para" id="apcsa_sample3-1-1">1-11-12: Which of the following statements assigns a random integer between 25 and 60, inclusive, to rn?</div>
                <li data-component="answer" id="csawesome2_2_apcsa_sample3_opt_a">
                  <div class="para" id="apcsa_sample3-2-1-1-1">int rn = (int) (Math.random() * 25) + 36;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_apcsa_sample3_opt_a">
                  <div class="para" id="apcsa_sample3-2-1-2-1">Remember that (int)(Math.random()*range) + min moves the random number into a range starting from a minimum number. We want the minimum number to be 25, but the minimum number here would be 36.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_apcsa_sample3_opt_b">
                  <div class="para" id="apcsa_sample3-2-2-1-1">int rn = (int) (Math.random() * 25) + 60;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_apcsa_sample3_opt_b">
                  <div class="para" id="apcsa_sample3-2-2-2-1">Remember that (int)(Math.random()*range) + min moves the random number into a range starting from a minimum number. We want the minimum number to be 25, but the minimum number here would be 60.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_apcsa_sample3_opt_c">
                  <div class="para" id="apcsa_sample3-2-3-1-1">int rn = (int) (Math.random() * 26) + 60;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_apcsa_sample3_opt_c">
                  <div class="para" id="apcsa_sample3-2-3-2-1">Remember that (int)(Math.random()*range) + min moves the random number into a range starting from a minimum number. Here the min is 25. We want the minimum number to be 25, but the minimum number here would be 60.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_apcsa_sample3_opt_d" data-correct="">
                  <div class="para" id="apcsa_sample3-2-4-1-1">int rn = (int) (Math.random() * 36) + 25;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_apcsa_sample3_opt_d">
                  <div class="para" id="apcsa_sample3-2-4-2-1">Yes, (int)(Math.random()*36) + 25 moves the random number into a range of 36 numbers starting from a minimum number 25 up to 60. The range is (max number - min number + 1) which is (60-25 +1) = 36.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_apcsa_sample3_opt_e">
                  <div class="para" id="apcsa_sample3-2-5-1-1">int rn = (int) (Math.random() * 60) + 25;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_apcsa_sample3_opt_e">
                  <div class="para" id="apcsa_sample3-2-5-2-1">This would give us random numbers from 25 to 85. Remember that you can compute the range you need with (max number - min number + 1).</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.11.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge1-11-random-math">
                <div class="ac_question" id="csawesome2_2_challenge1-11-random-math_question">
                  <div class="para" id="challenge1-11-random-math-1-1">Complete the combination lock challenge below.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge1-11-random-math_editor" data-question_label="" data-codelens="true">public class MathChallenge
{
    public static void main(String[] args)
    {
        // 1. Use Math.random() to generate 3 integers from 0-40 (not
        // including 40) and print them out.

        // 2. Calculate the number of combinations to choose 3 numbers between
        // 0-40 (not including 40) using Math.pow() and print it out.
        // For example, Math.pow(10,2) is 10^2 and the number of permutations
        // to choose 2 numbers between 0-9.

    }
}
====
import static org.junit.Assert.*;
import org.junit.*;
import java.io.*;

public class RunestoneTests extends CodeTestHelper {
    @Test
    public void test1() {
        String output = getMethodOutput("main");
        String[] lines = output.split("\\s+");

        boolean passed = lines.length &gt;= 2;

        passed = getResults(
                "2+ lines of output",
                lines.length + " lines of output",
                "Expected output",
                passed);
        assertTrue(passed);
    }

    @Test
    public void test2() {
        String output = getMethodOutput("main");
        boolean passed = output.contains("64000");
        passed = getResults("true", "" + passed, "Prints result of 40^3", passed);
        assertTrue(passed);
    }

    @Test
    public void test3() {
        String[] code = getCode().split("\n");
        String expected = "Possible answers:\n(int) (Math.random() * 40)\n(int) (40 * Math.random())";
        String actual = "";
        int num = 0;

        for (int i = 0; i &lt; code.length; i++) {
            if (code[i].contains("Math.random()") &amp;&amp; code[i].contains("40")) {
                actual += code[i].trim() + "\n";
                if (code[i].contains("(int)"))
                    num++;
            }
        }

        boolean passed = num &gt;= 3;
        passed = getResults(
                expected,
                actual,
                "Creates 3 random numbers from 0 to 40 (not inclusive)",
                passed);
        assertTrue(passed);
    }

    @Test
    public void test4() {
        String code = getCode();
        int num = countOccurences(code, "Math.pow(");

        boolean passed = num &gt;= 1;
        passed = getResults("1 or more", "" + num, "Calls to Math.pow(...)", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.11.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-random-dancing-turtles">
                <div class="ac_question" id="csawesome2_2_challenge-random-dancing-turtles_question">
                  <div class="para" id="challenge-random-dancing-turtles-1-1">Complete the random numbers using Math.random() in the correct ranges to choose x, y coordinates and random color in the range of 0-255 for the turtle. Put on some music and watch your turtle dance!</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-random-dancing-turtles_editor" data-question_label="" data-codelens="true">import java.util.*;
import java.awt.*;

public class DancingTurtles
{
  public static void main(String[] args)
  {

      World world = new World(500,400);
      Turtle yertle = new Turtle(world);

      // This is a loop that runs 10 times (you will learn to write loops in
      // Unit 4)
      for(int i = 1; i &lt;= 10; i++)
      {
       // Can you choose a randomX between 0-500?
       // Can you adjust for the 20 pixel width of the turtle,
       // so it doesn't get cut off at the edges?
       // Move the range from 20 to 480.
       int randomX = 0;
       // Can you choose a randomY between 0-400?
       // Can you adjust for the 20 pixel height of the turtle,
       // so it doesn't get cut off at the edges?
       int randomY = 0;

       yertle.moveTo(randomX, randomY);
       yertle.turnRight();

       // Can you choose a random red, green, and blue value between 0-255?
       int randomR = 0;
       int randomG = 0;
       int randomB = 0;

       yertle.setColor(new Color(randomR, randomG, randomB));

      } // end of loop
      world.show(true);
  }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("DancingTurtles");
    }

    @Test
    public void test1()
    {
        String code = getCode();
        int numRandom = countOccurences(code, "Math.random()");

        boolean passed = numRandom &gt;= 5;
        passed = getResults("5+", "" + numRandom, "5+ calls to Math.random()", passed);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        boolean passed =
                checkCodeContainsNoRegex(
                        "Random numbers for 0-255 colors (256 values)", "Math.random() * 256");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>objects-instances-of-classes</id>
      <title>Objects - Instances of Classes</title>
      <question>
        <label>Video: 64DOwDu5SVo</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="64DOwDu5SVo" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: Y9vn6u3901Y</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="Y9vn6u3901Y" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.12.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_vocab2_1">
                <span data-subcomponent="question">
                  <div class="para" id="vocab2_1-1-1">Drag the definition from the left and drop it on the correct concept on the right.  Click the "Check Me" button to see if you are correct.</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="vocab2_1-2-1">Review the summaries above.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_vocab2_1_drag1">a specific instance of a class with defined attributes</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_vocab2_1_drag1">object</li>
                <li data-subcomponent="draggable" id="csawesome2_2_vocab2_1_drag2">defines a new data type that is like a blueprint</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_vocab2_1_drag2">class</li>
                <li data-subcomponent="draggable" id="csawesome2_2_vocab2_1_drag3">define what the object knows about itself</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_vocab2_1_drag3">attributes or instance variables</li>
                <li data-subcomponent="draggable" id="csawesome2_2_vocab2_1_drag4">define what an object can do</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_vocab2_1_drag4">behaviors or methods</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.12.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_howmanyobjects" data-multipleanswers="false">
                <div class="para" id="howmanyobjects-1-1">1-12-5: How many objects can you create from a class in Java?</div>
                <li data-component="answer" id="csawesome2_2_howmanyobjects_opt_a">
                  <div class="para" id="howmanyobjects-2-1-1-1">1</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_howmanyobjects_opt_a">
                  <div class="para" id="howmanyobjects-2-1-2-1">There is one definition of a class, but the class can create as many objects as are needed.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_howmanyobjects_opt_b">
                  <div class="para" id="howmanyobjects-2-2-1-1">10</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_howmanyobjects_opt_b">
                  <div class="para" id="howmanyobjects-2-2-2-1">There is no limit on the number of objects you can create from a class.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_howmanyobjects_opt_c">
                  <div class="para" id="howmanyobjects-2-3-1-1">1000</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_howmanyobjects_opt_c">
                  <div class="para" id="howmanyobjects-2-3-2-1">There is no limit on the number of objects you can create from a class.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_howmanyobjects_opt_d" data-correct="">
                  <div class="para" id="howmanyobjects-2-4-1-1">As many as you need</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_howmanyobjects_opt_d">
                  <div class="para" id="howmanyobjects-2-4-2-1">You can create as many objects as you need from one class.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.12.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mcq_behaviors" data-multipleanswers="false">
                <div class="para" id="mcq_behaviors-1-1">1-12-6: What specifies the behavior for objects of a class in Java?</div>
                <li data-component="answer" id="csawesome2_2_mcq_behaviors_opt_a">
                  <div class="para" id="mcq_behaviors-2-1-1-1">attributes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq_behaviors_opt_a">
                  <div class="para" id="mcq_behaviors-2-1-2-1">attributes specify the data that an object keeps track of.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mcq_behaviors_opt_b" data-correct="">
                  <div class="para" id="mcq_behaviors-2-2-1-1">methods</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq_behaviors_opt_b">
                  <div class="para" id="mcq_behaviors-2-2-2-1">Methods specify the behavior of all objects of a class.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mcq_behaviors_opt_c">
                  <div class="para" id="mcq_behaviors-2-3-1-1">class</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq_behaviors_opt_c">
                  <div class="para" id="mcq_behaviors-2-3-2-1">While the class does specify the behavior of all objects created by that class, what part of a class specifies the behavior?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mcq_behaviors_opt_d">
                  <div class="para" id="mcq_behaviors-2-4-1-1">object</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq_behaviors_opt_d">
                  <div class="para" id="mcq_behaviors-2-4-2-1">The object behavior is specified by the methods in the class that created the object.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.12.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mcq_data" data-multipleanswers="false">
                <div class="para" id="mcq_data-1-1">1-12-7: What are the data or properties of an object called?</div>
                <li data-component="answer" id="csawesome2_2_mcq_data_opt_a" data-correct="">
                  <div class="para" id="mcq_data-2-1-1-1">attributes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq_data_opt_a">
                  <div class="para" id="mcq_data-2-1-2-1">attributes specify the data that an object keeps track of.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mcq_data_opt_b">
                  <div class="para" id="mcq_data-2-2-1-1">methods</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq_data_opt_b">
                  <div class="para" id="mcq_data-2-2-2-1">Methods specify the behavior of all objects of a class.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mcq_data_opt_c">
                  <div class="para" id="mcq_data-2-3-1-1">class</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq_data_opt_c">
                  <div class="para" id="mcq_data-2-3-2-1">While the class does specify the data that all objects of the class keep track of, what part of the class stores the data?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mcq_data_opt_d">
                  <div class="para" id="mcq_data-2-4-1-1">object</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq_data_opt_d">
                  <div class="para" id="mcq_data-2-4-2-1">The object data is stored in the attributes of the object.  The attributes are defined in the class.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.12.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_TurtleTest">
                <div class="ac_question" id="csawesome2_2_TurtleTest_question">
                  <div class="para" id="TurtleTest-1-1">Try clicking the run button below to see what the following program does. (If the code below does not work or is too slow in your browser, you can also see the <code class="code-inline tex2jax_ignore">Turtle</code> code in action on <a class="external" href="https://play.juicemind.com/dashboard/teams/Mk2wWMTqPkekcxTDWqRn/item/beca9c16-4004-4a4e-b4b0-11593e140808#f5357602-b60b-44c3-be0e-dfb07de2a778" target="_blank">JuiceMind</a><details class="ptx-footnote" aria-live="polite" id="TurtleTest-1-1-3"><summary class="ptx-footnote__number" title="Footnote 1.12.3"><sup> 3 </sup></summary><div class="ptx-footnote__contents" id="TurtleTest-1-1-3"><code class="code-inline tex2jax_ignore">https://play.juicemind.com/dashboard/teams/Mk2wWMTqPkekcxTDWqRn/item/beca9c16-4004-4a4e-b4b0-11593e140808#f5357602-b60b-44c3-be0e-dfb07de2a778</code></div></details> or <a class="external" href="https://replit.com/@BerylHoffman/Java-Swing-Turtle#Main.java" target="_blank">replit</a><details class="ptx-footnote" aria-live="polite" id="TurtleTest-1-1-5"><summary class="ptx-footnote__number" title="Footnote 1.12.4"><sup> 4 </sup></summary><div class="ptx-footnote__contents" id="TurtleTest-1-1-5"><code class="code-inline tex2jax_ignore">https://replit.com/@BerylHoffman/Java-Swing-Turtle#Main.java</code></div></details> or download the files <a class="external" href="https://github.com/bhoffman0/CSAwesome2/raw/main/_sources/Unit1-Using-Objects-and-Methods/TurtleJavaSwingCode.zip" target="_blank">here</a><details class="ptx-footnote" aria-live="polite" id="TurtleTest-1-1-7"><summary class="ptx-footnote__number" title="Footnote 1.12.5"><sup> 5 </sup></summary><div class="ptx-footnote__contents" id="TurtleTest-1-1-7"><code class="code-inline tex2jax_ignore">https://github.com/bhoffman0/CSAwesome2/raw/main/_sources/Unit1-Using-Objects-and-Methods/TurtleJavaSwingCode.zip</code></div></details> to use in your own IDE.)</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_TurtleTest_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.util.*;

public class TurtleTest
{
    public static void main(String[] args)
    {
        World habitat = new World(300, 300);
        Turtle yertle = new Turtle(habitat);

        yertle.forward();
        yertle.turnLeft();
        yertle.forward();

        habitat.show(true);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleTest");
    }

    @Test
    public void test1()
    {
        boolean passed = getResults("true", "true", "main()");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: TFmmG4_KK8I</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="TFmmG4_KK8I" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.12.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_TurtleTest2">
                <div class="ac_question" id="csawesome2_2_TurtleTest2_question">
                  <div class="para" id="TurtleTest2-1-1">In the code below, <code class="code-inline tex2jax_ignore">yertle</code> goes forward and then turns left. Can you change the code to make <code class="code-inline tex2jax_ignore">yertle</code> go <code class="code-inline tex2jax_ignore">forward</code> twice and then <code class="code-inline tex2jax_ignore">turnRight</code>?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_TurtleTest2_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.util.*;

public class TurtleTest2
{
    public static void main(String[] args)
    {
        World habitat = new World(300, 300);
        Turtle yertle = new Turtle(habitat);

        yertle.forward();
        yertle.turnLeft();

        habitat.show(true);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleTest2");
    }

    @Test
    public void test1()
    {
        String code = getCode();
        String expect = "yertle.forward";

        int count = countOccurences(code, expect);

        boolean passed = getResults("2 time(s)", "" + count + " time(s)", "yertle.forward() twice");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String code = getCode();
        String expect = "yertle.turnRight()";

        int count = countOccurences(code, expect);

        boolean passed = count &gt;= 1;
        passed = getResults("1+ time(s)", "" + count + " time(s)", "yertle.turnRight()", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.12.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_TurtleTest3">
                <div class="ac_question" id="csawesome2_2_TurtleTest3_question">
                  <div class="para" id="TurtleTest3-1-1">Can you add another turtle object to the code below?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_TurtleTest3_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.util.*;

public class TurtleTest3
{
    public static void main(String[] args)
    {
        World habitat = new World(300, 300);
        Turtle yertle = new Turtle(habitat);
        Turtle myrtle = new Turtle(habitat);

        yertle.forward();
        yertle.turnLeft();
        yertle.forward();

        myrtle.turnRight();
        myrtle.forward();

        habitat.show(true);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleTest3");
    }

    @Test
    public void test1()
    {
        String code = getCode();
        String expect = "new Turtle(habitat)";

        int count = countOccurences(code, expect);

        boolean passed = count &gt;= 3;
        passed = getResults("3+ Turtles", "" + count + " Turtles", "Add a new Turtle(s)", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.12.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ParsonsDraw7">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ParsonsDraw7-1-1">The following code uses a turtle to draw the digital number 7 (with just straight lines), but the code is mixed up.  Drag the code blocks to the right and put them in the correct order to first draw the line going up (towards the top of the page) and then turn and draw a line to the left to make a 7. Remember that the turtle is facing the top of the page when it is first created. Click on the “Check Me” button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Draw7
{
---
    public static void main(String[] args)
    {
---
        World habitat = new World(300,300);
---
        Turtle yertle = new Turtle(habitat);
---
        yertle.forward();
---
        yertle.turnLeft();
        yertle.forward();
---
        habitat.show(true);
---
    } // end main
---
} // end class</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.12.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_TurtleDrawSeven">
                <div class="ac_question" id="csawesome2_2_TurtleDrawSeven_question">
                  <div class="para" id="TurtleDrawSeven-1-1">Can you make yertle draw a 7 by going forward to go up and then left?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_TurtleDrawSeven_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.util.*;

public class TurtleDraw7
{
    public static void main(String[] args)
    {
        World habitat = new World(300, 300);
        Turtle yertle = new Turtle(habitat);
        // Make yertle draw a 7 using the code above

        habitat.show(true);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleDraw7");
    }

    @Test
    public void test1()
    {
        String orig = "yertle.forward();\nyertle.turnLeft();\nyertle.forward();";
        boolean passed = checkCodeContains(orig);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.12.18 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_TurtleDrawEight">
                <div class="ac_question" id="csawesome2_2_TurtleDrawEight_question">
                  <div class="para" id="TurtleDrawEight-1-1">Can you make yertle draw the digital number 8, as 2 squares on top of each other?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_TurtleDrawEight_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.util.*;

public class TurtleDraw8
{
    public static void main(String[] args)
    {
        World habitat = new World(500, 500);
        Turtle yertle = new Turtle(habitat);
        // Make yertle draw an 8 with 2 squares
        yertle.forward();

        habitat.show(true);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleDraw8");
    }

    @Test
    public void test1()
    {
        String orig =
                "import java.awt.*;\n"
                        + "import java.util.*;\n\n"
                        + "public class TurtleDraw8\n"
                        + "{\n"
                        + "  public static void main(String[] args)\n"
                        + "  {\n"
                        + "      World habitat = new World(300,300);\n"
                        + "      Turtle yertle = new Turtle(habitat);\n"
                        + "      // Make yertle draw an 8 with 2 squares\n"
                        + "      yertle.forward();\n\n\n"
                        + "      habitat.show(true);\n"
                        + "  }\n"
                        + "}\n";
        boolean passed = codeChanged(orig);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String code = getCode();
        int numForward = countOccurences(code, "forward(");

        boolean passed = numForward &gt;= 7;

        passed = getResults("7 or more", "" + numForward, "Calls to forward()", passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCode();
        int numTurn = countOccurences(code, ".turn");

        boolean passed = numTurn &gt;= 5;

        passed =
                getResults("5 or more", "" + numTurn, "Calls to turnRight() or turnLeft()", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.12.19 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-Turtle_Letter">
                <div class="ac_question" id="csawesome2_2_challenge-Turtle_Letter_question">
                  <div class="para" id="challenge-Turtle_Letter-1-1">Have your turtle create a block drawing of the initials of your name. Use straight lines (no curves or diagonals unless you want to try adding arguments to the turtle methods).</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-Turtle_Letter_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.util.*;

public class TurtleLetter
{
    public static void main(String[] args)
    {
        World habitat = new World(300, 300);
        // Create a turtle object

        // have it draw your initials

        habitat.show(true);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleLetter");
    }

    @Test
    public void test1()
    {
        String orig =
                "import java.awt.*;\n"
                        + "import java.util.*;\n\n"
                        + "public class TurtleLetter\n"
                        + "{\n"
                        + "  public static void main(String[] args)\n"
                        + "  {\n"
                        + "      World habitat = new World(300,300);\n\n\n\n"
                        + "      habitat.show(true);\n"
                        + "  }\n"
                        + "}\n";
        boolean passed = codeChanged(orig);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String code = getCode();
        String[] lines = code.split("\n");

        boolean passed = lines.length &gt;= 20;
        passed =
                getResults(
                        "20 or more lines",
                        lines.length + " lines",
                        "Adding a reasonable amount of lines to code",
                        passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.12.20 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP-attributes" data-multipleanswers="false">
                <dl class="description-list">
                  <dt id="AP-attributes-1-1-1">1-12-16: A student has created a <code class="code-inline tex2jax_ignore">Dog</code> class. The class contains variables to represent the following.</dt>
                  <dd>
                    <div class="para logical" id="AP-attributes-1-1-1-2">
                      <ul class="disc" id="AP-attributes-1-1-1-2-1">
                        <li id="AP-attributes-1-1-1-2-1-1">
                          <div class="para" id="AP-attributes-1-1-1-2-1-1-1">A String variable called <code class="code-inline tex2jax_ignore">breed</code> to represent the breed of the dog</div>
                        </li>
                        <li id="AP-attributes-1-1-1-2-1-2">
                          <div class="para" id="AP-attributes-1-1-1-2-1-2-1">An int variable called <code class="code-inline tex2jax_ignore">age</code> to represent the age of the dog</div>
                        </li>
                        <li id="AP-attributes-1-1-1-2-1-3">
                          <div class="para" id="AP-attributes-1-1-1-2-1-3-1">A String variable called <code class="code-inline tex2jax_ignore">name</code> to represent the name of the dog</div>
                        </li>
                      </ul>
                    </div>
                    <div class="para" id="AP-attributes-1-1-1-3">The object <code class="code-inline tex2jax_ignore">pet</code> is declared as type Dog. Which of the following descriptions is accurate?</div>
                  </dd>
                </dl>
                <li data-component="answer" id="csawesome2_2_AP-attributes_opt_a">
                  <div class="para" id="AP-attributes-2-1-1-1">An attribute of the name object is String.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP-attributes_opt_a">
                  <div class="para" id="AP-attributes-2-1-2-1">name is an attribute of the pet object or Dog class.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP-attributes_opt_b" data-correct="">
                  <div class="para" id="AP-attributes-2-2-1-1">An attribute of the pet object is name.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP-attributes_opt_b">
                  <div class="para" id="AP-attributes-2-2-2-1">name is an attribute of the pet object or Dog class.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP-attributes_opt_c">
                  <div class="para" id="AP-attributes-2-3-1-1">An instance of the pet class is Dog.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP-attributes_opt_c">
                  <div class="para" id="AP-attributes-2-3-2-1">An instance of the Dog class is pet.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP-attributes_opt_d">
                  <div class="para" id="AP-attributes-2-4-1-1">An attribute of the Dog instance is pet.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP-attributes_opt_d">
                  <div class="para" id="AP-attributes-2-4-2-1">An attribute of the Dog class is name.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP-attributes_opt_e">
                  <div class="para" id="AP-attributes-2-5-1-1">An instance of the Dog object is pet.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP-attributes_opt_e">
                  <div class="para" id="AP-attributes-2-5-2-1">An instance of the Dog class is pet.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.12.21 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP-objects" data-multipleanswers="false">
                <dl class="description-list">
                  <dt id="AP-objects-1-1-1">1-12-17:  A student has created a <code class="code-inline tex2jax_ignore">Party</code> class. The class contains variables to represent the following.</dt>
                  <dd>
                    <div class="para logical" id="AP-objects-1-1-1-2">
                      <ul class="disc" id="AP-objects-1-1-1-2-1">
                        <li id="AP-objects-1-1-1-2-1-1">
                          <div class="para" id="AP-objects-1-1-1-2-1-1-1">An int variable called <code class="code-inline tex2jax_ignore">numOfPeople</code> to represent the number of people at the party.</div>
                        </li>
                        <li id="AP-objects-1-1-1-2-1-2">
                          <div class="para" id="AP-objects-1-1-1-2-1-2-1">A boolean variable called <code class="code-inline tex2jax_ignore">discoLightsOn</code> to represent whether the disco ball is on.</div>
                        </li>
                        <li id="AP-objects-1-1-1-2-1-3">
                          <div class="para" id="AP-objects-1-1-1-2-1-3-1">A boolean variable called <code class="code-inline tex2jax_ignore">partyStarted</code> to represent whether the party has started.</div>
                        </li>
                      </ul>
                    </div>
                    <div class="para" id="AP-objects-1-1-1-3">The object <code class="code-inline tex2jax_ignore">myParty</code> is declared as type Party. Which of the following descriptions is accurate?</div>
                  </dd>
                </dl>
                <li data-component="answer" id="csawesome2_2_AP-objects_opt_a">
                  <div class="para" id="AP-objects-2-1-1-1">boolean is an attribute of the myParty object.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP-objects_opt_a">
                  <div class="para" id="AP-objects-2-1-2-1">boolean is the type of an attribute, but not an attribute.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP-objects_opt_b">
                  <div class="para" id="AP-objects-2-2-1-1">myParty is an attribute of the Party class.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP-objects_opt_b">
                  <div class="para" id="AP-objects-2-2-2-1">myParty is an instance of the Party class.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP-objects_opt_c" data-correct="">
                  <div class="para" id="AP-objects-2-3-1-1">myParty is an instance of the Party class.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP-objects_opt_c">
                  <div class="para" id="AP-objects-2-3-2-1">myParty is an object that is an instance of the Party class.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP-objects_opt_d">
                  <div class="para" id="AP-objects-2-4-1-1">myParty is an attribute of the Party instance.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP-objects_opt_d">
                  <div class="para" id="AP-objects-2-4-2-1">An attribute of the Party class is numOfPeople.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP-objects_opt_e">
                  <div class="para" id="AP-objects-2-5-1-1">numOfPeople is an instance of the Party object.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP-objects_opt_e">
                  <div class="para" id="AP-objects-2-5-2-1">An attribute of the Party class is numOfPeople.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>creating-and-initializing-objects-constructors</id>
      <title>Creating and Initializing Objects: Constructors</title>
      <question>
        <label>Exercise 1.13.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mcq_world_constructor" data-multipleanswers="true">
                <div class="para" id="mcq_world_constructor-1-1">1-13-1: Which of these is valid syntax for creating and initializing a World object?</div>
                <li data-component="answer" id="csawesome2_2_mcq_world_constructor_opt_a">
                  <div class="para" id="mcq_world_constructor-2-1-1-1">World w = null;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq_world_constructor_opt_a">
                  <div class="para" id="mcq_world_constructor-2-1-2-1">This declares a variable w that refers to a World object, but it doesn’t create a World object or initialize it.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mcq_world_constructor_opt_b">
                  <div class="para" id="mcq_world_constructor-2-2-1-1">World w = new World;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq_world_constructor_opt_b">
                  <div class="para" id="mcq_world_constructor-2-2-2-1">You must include parentheses () to call a constructor.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mcq_world_constructor_opt_c" data-correct="">
                  <div class="para" id="mcq_world_constructor-2-3-1-1">World w = new World();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq_world_constructor_opt_c">
                  <div class="para" id="mcq_world_constructor-2-3-2-1">Correct, use the new keyword followed by the classname and parentheses to create a new object and call the constructor.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mcq_world_constructor_opt_d">
                  <div class="para" id="mcq_world_constructor-2-4-1-1">World w = World();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq_world_constructor_opt_d">
                  <div class="para" id="mcq_world_constructor-2-4-2-1">You must use the new keyword to create a new object.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mcq_world_constructor_opt_e" data-correct="">
                  <div class="para" id="mcq_world_constructor-2-5-1-1">World w = new World(300,500);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq_world_constructor_opt_e">
                  <div class="para" id="mcq_world_constructor-2-5-2-1">Correct, this constructor call creates a new World object with the size 300x500 pixels.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.13.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mcq_overload_constructor" data-multipleanswers="false">
                <div class="para" id="mcq_overload_constructor-1-1">1-13-2: Which of these is overloading the constructor?</div>
                <li data-component="answer" id="csawesome2_2_mcq_overload_constructor_opt_a">
                  <div class="para" id="mcq_overload_constructor-2-1-1-1">When a constructor takes one argument.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq_overload_constructor_opt_a">
                  <div class="para" id="mcq_overload_constructor-2-1-2-1">For a constructor to be overloaded there must be more than one constructor.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mcq_overload_constructor_opt_b">
                  <div class="para" id="mcq_overload_constructor-2-2-1-1">When a constructor takes more than one argument.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq_overload_constructor_opt_b">
                  <div class="para" id="mcq_overload_constructor-2-2-2-1">For a constructor to be overloaded there must be more than one constructor.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mcq_overload_constructor_opt_c">
                  <div class="para" id="mcq_overload_constructor-2-3-1-1">When one constructor is defined in a class.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq_overload_constructor_opt_c">
                  <div class="para" id="mcq_overload_constructor-2-3-2-1">For a constructor to be overloaded there must be more than one constructor.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mcq_overload_constructor_opt_d" data-correct="">
                  <div class="para" id="mcq_overload_constructor-2-4-1-1">When more than one constructor is defined in a class.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq_overload_constructor_opt_d">
                  <div class="para" id="mcq_overload_constructor-2-4-2-1">Overloading means that there is more than one constructor.  The parameter lists must differ in either number, order, or type of parameters.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.13.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_const_turtle" data-multipleanswers="false">
                <div class="para" id="const_turtle-1-1">1-13-3: Which of these is valid syntax for creating and initializing a Turtle object in world1?</div>
                <li data-component="answer" id="csawesome2_2_const_turtle_opt_a">
                  <div class="para" id="const_turtle-2-1-1-1">Turtle t = Turtle(world1);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_const_turtle_opt_a">
                  <div class="para" id="const_turtle-2-1-2-1">You must use the new keyword to create a new Turtle.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_const_turtle_opt_b">
                  <div class="para" id="const_turtle-2-2-1-1">Turtle t = new Turtle();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_const_turtle_opt_b">
                  <div class="para" id="const_turtle-2-2-2-1">All turtle constructors take a world as an argument.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_const_turtle_opt_c">
                  <div class="para" id="const_turtle-2-3-1-1">Turtle t = new Turtle(world1, 100, 100);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_const_turtle_opt_c">
                  <div class="para" id="const_turtle-2-3-2-1">The order of the parameters matter, so this would cause a syntax error.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_const_turtle_opt_d" data-correct="">
                  <div class="para" id="const_turtle-2-4-1-1">Turtle t = new Turtle(100, 100, world1);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_const_turtle_opt_d">
                  <div class="para" id="const_turtle-2-4-2-1">This creates a new Turtle object in the passed world at location (100,100)</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.13.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_TurtleConstructorTest">
                <div class="ac_question" id="csawesome2_2_TurtleConstructorTest_question">
                  <div class="para" id="TurtleConstructorTest-1-1">Try changing the code below to create a <code class="code-inline tex2jax_ignore">World</code> object with 300x400 pixels. Where is the turtle placed by default? What arguments do you need to pass to the <code class="code-inline tex2jax_ignore">Turtle</code> constructor to put the turtle at the top right corner? Experiment and find out. What happens if you mix up the order of the arguments?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_TurtleConstructorTest_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.util.*;

public class TurtleConstructorTest
{
    public static void main(String[] args)
    {
        // Change the World constructor to 300x400
        World world1 = new World(300, 300);

        // Change the Turtle constructor to put the turtle in the top right
        // corner
        Turtle t1 = new Turtle(world1);

        t1.turnLeft();
        world1.show(true);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleConstructorTest");
    }

    @Test
    public void test1()
    {
        String orig =
                "import java.awt.*;\n"
                    + "import java.util.*;\n\n"
                    + "public class TurtleConstructorTest\n"
                    + "{\n"
                    + "  public static void main(String[] args)\n"
                    + "  {\n"
                    + "      // Change the World constructor to 300x400\n"
                    + "      World world1 = new World(300,300);\n\n"
                    + "      // Change the Turtle constructor to put the turtle in the top right"
                    + " corner\n"
                    + "      Turtle t1 = new Turtle(world1);\n\n"
                    + "      t1.turnLeft();\n"
                    + "      world1.show(true);\n"
                    + "  }\n"
                    + "}\n";
        boolean passed = codeChanged(orig);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: 5fpjgXAV2BU</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="5fpjgXAV2BU" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.13.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_TurtleClass1" data-multipleanswers="false">
                <div class="para" id="TurtleClass1-1-1">1-13-6: Given the Turtle class in the figure above and a World object world1, which of the following code segments will correctly create an instance of a Turtle object at (x,y) coordinates (50,150)?</div>
                <li data-component="answer" id="csawesome2_2_TurtleClass1_opt_a">
                  <div class="para" id="TurtleClass1-2-1-1-1">Turtle t = new Turtle();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_TurtleClass1_opt_a">
                  <div class="para" id="TurtleClass1-2-1-2-1">There is no Turtle constructor that takes no arguments according to the figure above.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_TurtleClass1_opt_b">
                  <div class="para" id="TurtleClass1-2-2-1-1">Turtle t = new Turtle(50,150);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_TurtleClass1_opt_b">
                  <div class="para" id="TurtleClass1-2-2-2-1">There is no Turtle constructor that takes 2 arguments according to the figure above.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_TurtleClass1_opt_c">
                  <div class="para" id="TurtleClass1-2-3-1-1">Turtle t = new Turtle(world1);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_TurtleClass1_opt_c">
                  <div class="para" id="TurtleClass1-2-3-2-1">This would initialize the Turtle to the middle of the world, not necessarily coordinates (50,150).</div>
                </li>
                <li data-component="answer" id="csawesome2_2_TurtleClass1_opt_d">
                  <div class="para" id="TurtleClass1-2-4-1-1">Turtle t = new Turtle(world1,50,150);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_TurtleClass1_opt_d">
                  <div class="para" id="TurtleClass1-2-4-2-1">Make sure the order of the arguments match the constructor signature above.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_TurtleClass1_opt_e" data-correct="">
                  <div class="para" id="TurtleClass1-2-5-1-1">Turtle t = new Turtle(50,150,world1);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_TurtleClass1_opt_e">
                  <div class="para" id="TurtleClass1-2-5-2-1">This matches the second constructor above with the parameters of x, y, and world.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.13.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_date_constructor">
                <span data-question="">
                  <div class="para" id="date_constructor-1-1">Click on the constructor headers (signatures)</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="date_constructor-2-1">Constructors are public and have the same name as the class. Click on the constructor headers which are the first line of the constructors showing their name and parameters.</div>
                </span>
                <pre><span data-incorrect="">public class Date {</span>

    <span data-incorrect="">private int year;</span>
    <span data-incorrect="">private int month;</span>
    <span data-incorrect="">private int day;</span>

    <span data-correct="">public Date()</span>
        <span data-incorrect="">{ /** Implementation not shown */ }</span>

    <span data-correct="">public Date(int year, int month, int day)</span>
        <span data-incorrect="">{ /** Implementation not shown */ }</span>

     <span data-incorrect="">public void print()</span>
        <span data-incorrect="">{ /** Implementation not shown */ }</span>

<span data-incorrect="">}</span>
</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.13.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_DateClass1" data-multipleanswers="false">
                <div class="para" id="DateClass1-1-1">1-13-8: Given the <code class="code-inline tex2jax_ignore">Date</code> class in the figure above and assuming that months in the <code class="code-inline tex2jax_ignore">Date</code> class are numbered starting at 1, which of the following code segments will create a <code class="code-inline tex2jax_ignore">Date</code> object for the date September 20, 2020 using the correct constructor?</div>
                <li data-component="answer" id="csawesome2_2_DateClass1_opt_a">
                  <div class="para" id="DateClass1-2-1-1-1">Date d = new Date();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_DateClass1_opt_a">
                  <div class="para" id="DateClass1-2-1-2-1">This would initialize the date attributes to today’s date according to the constructor comment above, which might not be Sept. 20, 2020.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_DateClass1_opt_b">
                  <div class="para" id="DateClass1-2-2-1-1">Date d = new Date(9,20);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_DateClass1_opt_b">
                  <div class="para" id="DateClass1-2-2-2-1">There is no Date constructor that takes 2 arguments according to the figure above.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_DateClass1_opt_c">
                  <div class="para" id="DateClass1-2-3-1-1">Date d = new Date(9,20,2020);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_DateClass1_opt_c">
                  <div class="para" id="DateClass1-2-3-2-1">The comment for the second constructor in the Date class above says that the first argument must be the year.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_DateClass1_opt_d" data-correct="">
                  <div class="para" id="DateClass1-2-4-1-1">Date d = new Date(2020,9,20);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_DateClass1_opt_d">
                  <div class="para" id="DateClass1-2-4-2-1">This matches the second constructor above with the parameters year, month, day.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_DateClass1_opt_e">
                  <div class="para" id="DateClass1-2-5-1-1">Date d = new Date(2020,20,9);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_DateClass1_opt_e">
                  <div class="para" id="DateClass1-2-5-2-1">Make sure the order of the arguments match the constructor signature above.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.13.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mcq_params" data-multipleanswers="false">
                <div class="para" id="mcq_params-1-1">1-13-9: In <code class="code-inline tex2jax_ignore">public World(int width, int height)</code> what are <code class="code-inline tex2jax_ignore">width</code> and <code class="code-inline tex2jax_ignore">height</code>?</div>
                <li data-component="answer" id="csawesome2_2_mcq_params_opt_a">
                  <div class="para" id="mcq_params-2-1-1-1">objects</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq_params_opt_a">
                  <div class="para" id="mcq_params-2-1-2-1">Objects have attributes and behavior.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mcq_params_opt_b">
                  <div class="para" id="mcq_params-2-2-1-1">classes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq_params_opt_b">
                  <div class="para" id="mcq_params-2-2-2-1">A class defines the data and behavior for all objects of that type.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mcq_params_opt_c" data-correct="">
                  <div class="para" id="mcq_params-2-3-1-1">parameters</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq_params_opt_c">
                  <div class="para" id="mcq_params-2-3-2-1">The parameters are in the constructor’s signature.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mcq_params_opt_d">
                  <div class="para" id="mcq_params-2-4-1-1">arguments</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq_params_opt_d">
                  <div class="para" id="mcq_params-2-4-2-1">An argument is the value that is passed into the constructor.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.13.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mcq_arguments" data-multipleanswers="false">
                <div class="para" id="mcq_arguments-1-1">1-13-10: In <code class="code-inline tex2jax_ignore">new World(150, 200)</code> what are <code class="code-inline tex2jax_ignore">150</code> and <code class="code-inline tex2jax_ignore">200</code>?</div>
                <li data-component="answer" id="csawesome2_2_mcq_arguments_opt_a">
                  <div class="para" id="mcq_arguments-2-1-1-1">objects</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq_arguments_opt_a">
                  <div class="para" id="mcq_arguments-2-1-2-1">Objects have attributes and behavior.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mcq_arguments_opt_b">
                  <div class="para" id="mcq_arguments-2-2-1-1">classes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq_arguments_opt_b">
                  <div class="para" id="mcq_arguments-2-2-2-1">A class defines the data and behavior for all objects of that type.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mcq_arguments_opt_c">
                  <div class="para" id="mcq_arguments-2-3-1-1">parameters</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq_arguments_opt_c">
                  <div class="para" id="mcq_arguments-2-3-2-1">A parameter is in the constructor’s signature.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mcq_arguments_opt_d" data-correct="">
                  <div class="para" id="mcq_arguments-2-4-1-1">arguments</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq_arguments_opt_d">
                  <div class="para" id="mcq_arguments-2-4-2-1">An argument is the value that is passed into the constructor.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.13.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_TurtleConstructorDebug">
                <div class="ac_question" id="csawesome2_2_TurtleConstructorDebug_question">
                  <div class="para" id="TurtleConstructorDebug-1-1">Debug the following code.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_TurtleConstructorDebug_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.util.*;

public class TurtleConstructorDebug
{
    public static void main(String[] args)
    {
        World w = new World(300,0);
        turtle t0;
        Turtle t1 = new Turtle();
        Turtle t2 = new Turtle(world, 100, 50)
        t0.forward();
        t1.turnRight();
        t2.turnLeft();
        world.show(true);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleConstructorDebug");
    }

    @Test
    public void test1()
    {
        String orig =
                "import java.awt.*;\n"
                        + "import java.util.*;\n\n"
                        + "public class TurtleConstructorDebug\n"
                        + "{\n"
                        + "  public static void main(String[] args)\n"
                        + "  {\n"
                        + "      World w = new World(300,0);\n"
                        + "      turtle t0;\n"
                        + "      Turtle t1 = new Turtle();\n"
                        + "      Turtle t2 = new Turtle(world, 100, 50)\n"
                        + "      t0.forward();\n"
                        + "      t1.turnRight();\n"
                        + "      t2.turnLeft();\n"
                        + "      world.show(true);\n"
                        + "  }\n"
                        + "}\n";
        boolean passed = codeChanged(orig);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.13.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-CustomTurtles">
                <div class="ac_question" id="csawesome2_2_challenge-CustomTurtles_question">
                  <div class="para" id="challenge-CustomTurtles-1-1">Use the CustomTurtle constructors to create the following turtles.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-CustomTurtles_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.util.*;

public class CustomTurtleRunner
{
    public static void main(String[] args)
    {
        World world1 = new World(400, 400);

        // 1. Change the constructor call below to create a large
        // 150x200 CustomTurtle with a green body (Color.green)
        // and a blue shell (Color.blue) at position (150,300).
        // Move it forward to see it.
        CustomTurtle turtle1 = new CustomTurtle(world1);
        turtle1.forward();

        // 2. Create a small 25x50 CustomTurtle with a red body
        // and a yellow shell at position (350,200)
        // Move it forward to see it.

        // 3. Create a CustomTurtle of your own design

        world1.show(true);
    }
}

class CustomTurtle extends Turtle
{
    private int x;
    private int y;
    private World w;
    private Color bodycolor;
    private Color shellcolor;
    private int width;
    private int height;

    /**
     * Constructor that takes the model display
     *
     * @param modelDisplay the thing that displays the model or world
     */
    public CustomTurtle(ModelDisplay modelDisplay)
    {
        // let the parent constructor handle it
        super(modelDisplay);
    }

    /**
     * Constructor that takes the model display to draw it on and custom
     * colors and size
     *
     * @param m the world
     * @param body : the body color
     * @param shell : the shell color
     * @param w: width
     * @param h: height
     */
    public CustomTurtle(
            ModelDisplay m, Color body, Color shell, int w, int h)
            {
        // let the parent constructor handle it
        super(m);
        bodycolor = body;
        setBodyColor(body);
        shellcolor = shell;
        setShellColor(shell);
        height = h;
        width = w;
        setHeight(h);
        setWidth(w);
    }

    /**
     * Constructor that takes the x and y and a model display to draw it on
     * and custom colors and size
     *
     * @param x the starting x position
     * @param y the starting y position
     * @param m the world
     * @param body : the body color
     * @param shell : the shell color
     * @param w: width
     * @param h: height
     */
    public CustomTurtle(
            int x,
            int y,
            ModelDisplay m,
            Color body,
            Color shell,
            int w,
            int h)
            {
        // let the parent constructor handle it
        super(x, y, m);
        bodycolor = body;
        setBodyColor(body);
        shellcolor = shell;
        setShellColor(shell);
        height = h;
        width = w;
        setHeight(h);
        setWidth(w);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("CustomTurtleRunner");
    }

    @Test
    public void test1()
    {
        String target = "new CustomTurtle(150,300,world1, Color.green, Color.blue, 150, 200)";
        boolean passed =
                checkCodeContains(
                        "constructor for a large 150x200 CustomTurtle with a green body and a blue"
                                + " shell at position (150,300) in world1",
                        target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "new CustomTurtle(350,200,world1, Color.red, Color.yellow, 25, 50)";
        boolean passed =
                checkCodeContains(
                        "constructor for a small 25x50 CustomTurtle with a red body and a yellow"
                                + " shell at position (350,200) in world1",
                        target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.13.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP-constructors" data-multipleanswers="false"><div class="para" id="AP-constructors-1-1">1-13-13:  Consider the following class. Which of the following successfully creates a new Cat object?</div> <blockquote class="blockquote" id="AP-constructors-1-2"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Cat
{
    private String color;
    private String breed;
    private boolean isHungry;

    public Cat()
    {
        color = "unknown";
        breed = "unknown";
        isHungry = false;
    }

    public Cat(String c, String b, boolean h)
    {
        color = c;
        breed = b;
        isHungry = h;
    }
}

I.   Cat a = new Cat();
II.  Cat b = new Cat("Shorthair", true);
III. String color = "orange";
     boolean hungry = false;
     Cat c = new Cat(color, "Tabby", hungry);
</code></pre></div></blockquote><li data-component="answer" id="csawesome2_2_AP-constructors_opt_a"><div class="para" id="AP-constructors-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_AP-constructors_opt_a"><div class="para" id="AP-constructors-2-1-2-1">I is one of the correct constructors but the second constructor can also be used.</div></li><li data-component="answer" id="csawesome2_2_AP-constructors_opt_b"><div class="para" id="AP-constructors-2-2-1-1">I and II</div></li><li data-component="feedback" id="csawesome2_2_AP-constructors_opt_b"><div class="para" id="AP-constructors-2-2-2-1">II is not correct because there is no Cat constructor with 2 parameters.</div></li><li data-component="answer" id="csawesome2_2_AP-constructors_opt_c" data-correct=""><div class="para" id="AP-constructors-2-3-1-1">I and III</div></li><li data-component="feedback" id="csawesome2_2_AP-constructors_opt_c"><div class="para" id="AP-constructors-2-3-2-1">I and III call the correct constructors.</div></li><li data-component="answer" id="csawesome2_2_AP-constructors_opt_d"><div class="para" id="AP-constructors-2-4-1-1">I, II, and III</div></li><li data-component="feedback" id="csawesome2_2_AP-constructors_opt_d"><div class="para" id="AP-constructors-2-4-2-1">II is not correct because there is no Cat constructor with 2 parameters.</div></li><li data-component="answer" id="csawesome2_2_AP-constructors_opt_e"><div class="para" id="AP-constructors-2-5-1-1">II and III</div></li><li data-component="feedback" id="csawesome2_2_AP-constructors_opt_e"><div class="para" id="AP-constructors-2-5-2-1">II is not correct because there is no Cat constructor with 2 parameters.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.13.18 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP-constructors2" data-multipleanswers="false"><div class="para" id="AP-constructors2-1-1">1-13-14: Consider the following class.  Which of the following code segments will construct a Movie object m with a title of “Lion King” and rating of 8.0?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Movie
{
    private String title;
    private String director;
    private double rating;
    private boolean inTheaters;

    public Movie(String t, String d, double r)
    {
        title = t;
        director = d;
        rating = r;
        inTheaters = false;
    }

    public Movie(String t)
    {
        title = t;
        director = "unknown";
        rating = 0.0;
        inTheaters = false;
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_AP-constructors2_opt_a"><div class="para" id="AP-constructors2-2-1-1-1">Movie m = new Movie(8.0, "Lion King");</div></li><li data-component="feedback" id="csawesome2_2_AP-constructors2_opt_a"><div class="para" id="AP-constructors2-2-1-2-1">There is no Movie constructor with 2 parameters.</div></li><li data-component="answer" id="csawesome2_2_AP-constructors2_opt_b"><div class="para" id="AP-constructors2-2-2-1-1">Movie m = Movie("Lion King", 8.0);</div></li><li data-component="feedback" id="csawesome2_2_AP-constructors2_opt_b"><div class="para" id="AP-constructors2-2-2-2-1">There is no Movie constructor with 2 parameters.</div></li><li data-component="answer" id="csawesome2_2_AP-constructors2_opt_c"><div class="para" id="AP-constructors2-2-3-1-1">Movie m = new Movie();</div></li><li data-component="feedback" id="csawesome2_2_AP-constructors2_opt_c"><div class="para" id="AP-constructors2-2-3-2-1">This creates a Movie object but it does not have the correct title and rating.</div></li><li data-component="answer" id="csawesome2_2_AP-constructors2_opt_d" data-correct=""><div class="para" id="AP-constructors2-2-4-1-1">Movie m = new Movie("Lion King", "Disney", 8.0);</div></li><li data-component="feedback" id="csawesome2_2_AP-constructors2_opt_d"><div class="para" id="AP-constructors2-2-4-2-1">This creates a Movie object with the correct title and rating.</div></li><li data-component="answer" id="csawesome2_2_AP-constructors2_opt_e"><div class="para" id="AP-constructors2-2-5-1-1">Movie m = new Movie("Lion King");</div></li><li data-component="feedback" id="csawesome2_2_AP-constructors2_opt_e"><div class="para" id="AP-constructors2-2-5-2-1">This creates a Movie object but it does not have a rating of 8.0.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>calling-instance-methods</id>
      <title>Calling Instance Methods</title>
      <question>
        <label>Exercise 1.14.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_student_methods">
                <span data-question="">
                  <div class="para" id="student_methods-1-1">Click on the method headers (signatures) in the following class. Do not click on the constructors.</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="student_methods-2-1">Methods follow the constructors. The method header is the first line of a method.</div>
                </span>
                <pre><span data-incorrect="">public class Student {</span>

    <span data-incorrect="">private String name;</span>
    <span data-incorrect="">private String email;</span>

    <span data-incorrect="">public Student(String initName, String intEmail)</span>
    <span data-incorrect="">{</span>
        <span data-incorrect="">name = initName;</span>
        <span data-incorrect="">email = initEmail;</span>
     <span data-incorrect="">}</span>

     <span data-correct="">public String getName()</span>
     <span data-incorrect="">{</span>
        <span data-incorrect="">return name;</span>
     <span data-incorrect="">}</span>

     <span data-correct="">public void print()</span>
     <span data-incorrect="">{</span>
        <span data-incorrect="">System.out.println(name + ":" + email);</span>
     <span data-incorrect="">}</span>
<span data-incorrect="">}</span>
</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.14.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_nullPointerTest">
                <div class="ac_question" id="csawesome2_2_nullPointerTest_question">
                  <div class="para" id="nullPointerTest-1-1">Run the code below to see a NullPointerException. Fix the code by using <code class="code-inline tex2jax_ignore">new Turtle(habitat)</code> to create a new Turtle object before calling its methods.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_nullPointerTest_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.util.*;

public class NullPointerTest
{
    public static void main(String[] args)
    {
        World habitat = new World(300, 300);
        Turtle yertle = null;

        // yertle is null!
        yertle.forward();

        habitat.show(true);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String code = "new Turtle(habitat)";
        boolean passed = checkCodeContains(code);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.14.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_methodVocab">
                <span data-subcomponent="question">
                  <div class="para" id="methodVocab-1-1">Drag the definition from the left and drop it on the correct word on the right.  Click the "Check Me" button to see if you are correct.</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="methodVocab-2-1">Review the vocabulary above.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_methodVocab_drag1">an object’s behaviors or functions that can be used or called to do its job</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_methodVocab_drag1">methods</li>
                <li data-subcomponent="draggable" id="csawesome2_2_methodVocab_drag2">the values or data passed to an object’s method</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_methodVocab_drag2">arguments</li>
                <li data-subcomponent="draggable" id="csawesome2_2_methodVocab_drag3">the variables in a method’s definition that hold the arguments</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_methodVocab_drag3">parameters</li>
                <li data-subcomponent="draggable" id="csawesome2_2_methodVocab_drag4">asking to run the method</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_methodVocab_drag4">method call</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.14.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_TurtleTestMethods1">
                <div class="ac_question" id="csawesome2_2_TurtleTestMethods1_question">
                  <div class="para logical" id="TurtleTestMethods1-1-1">
                    <ol class="decimal" id="TurtleTestMethods1-1-1-1">
                      <li id="TurtleTestMethods1-1-1-1-1">
                        <div class="para" id="TurtleTestMethods1-1-1-1-1-1">Can you make yertle draw a square and change the pen color for each side of the square? Try something like: yertle.setColor(Color.red); This uses the <a class="external" href="https://docs.oracle.com/javase/7/docs/api/java/awt/Color.html" target="_blank">Color</a><details class="ptx-footnote" aria-live="polite" id="TurtleTestMethods1-1-1-1-1-1-2"><summary class="ptx-footnote__number" title="Footnote 1.14.1"><sup> 1 </sup></summary><div class="ptx-footnote__contents" id="TurtleTestMethods1-1-1-1-1-1-2"><code class="code-inline tex2jax_ignore">https://docs.oracle.com/javase/7/docs/api/java/awt/Color.html</code></div></details> class in Java which has some colors predefined like red, yellow, blue, magenta, cyan. You can also use more specific methods like setPenColor, setBodyColor, and setShellColor.</div>
                      </li>
                      <li id="TurtleTestMethods1-1-1-1-2">
                        <div class="para" id="TurtleTestMethods1-1-1-1-2-1">Can you draw a triangle? The turnRight() method always does 90 degree turns, but you’ll need external angles of 120 degree for an equilateral triangle. Use the turn method which has a parameter for the angle of the turn in degrees. For example, turn(90) is the same as turnRight(). Try drawing a triangle with different colors.</div>
                      </li>
                    </ol>
                  </div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_TurtleTestMethods1_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.util.*;

public class TurtleTestMethods1
{
    public static void main(String[] args)
    {
        World world = new World(300, 300);
        Turtle yertle = new Turtle(world);

        yertle.forward(100);
        yertle.turnLeft();
        yertle.forward(75);

        world.show(true);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleTestMethods1");
    }

    @Test
    public void test1()
    {
        boolean passed = codeChanged(
            "import java.awt.*;\n" +
            "import java.util.*;\n" +
            "\n" +
            "public class TurtleTestMethods1\n" +
            "{\n" +
            "    public static void main(String[] args)\n" +
            "    {\n" +
            "        World world = new World(300, 300);\n" +
            "        Turtle yertle = new Turtle(world);\n" +
            "\n" +
            "        yertle.forward(100);\n" +
            "        yertle.turnLeft();\n" +
            "        yertle.forward(75);\n" +
            "\n" +
            "        world.show(true);\n" +
            "    }\n" +
            "}\n"
        );
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String code = getCode();
        int numColors = countOccurences(code, "Color(");

        boolean passed = numColors &gt;= 3;
        passed = getResults("3 or more", "" + numColors, "Changes color at least 3 times", passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCode();
        int numTurns = countOccurences(code, ".turn");

        boolean passed = numTurns &gt;= 3;
        passed = getResults("3 or more", "" + numTurns, "Turns at least 3 times", passed);
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String code = getCode();
        int numTurns = countOccurences(code, ".turn(");

        boolean passed = numTurns &gt;= 1;
        passed = getResults("1 or more", "" + numTurns, "Calls to turn(...)", passed);
        assertTrue(passed);
    }

    @Test
    public void test5()
    {
        String code = getCode();
        int numForward = countOccurences(code, ".forward(");

        boolean passed = numForward &gt;= 4;
        passed = getResults("4 or more", "" + numForward, "Calls to forward()", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.14.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_DrawAHouse">
                <div class="parsons_question parsons-text">
                  <div class="para" id="DrawAHouse-1-1">The following code uses a turtle to draw a simple house, but the lines are mixed up.  Drag the code blocks to the right and put them in the correct order to first draw a square for the house and then a red triangle for the roof.  Click on the “Check Me” button to check your solution.  You can type this code in the Active Code window above to see it in action.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class TurtleDrawHouse
{
---
   public static void main(String[] args)
   {
   
---
      World world = new World(300,300);
      
---
      Turtle builder = new Turtle(world);
      
---
      // Draw a square
      builder.turnRight();
      builder.forward(100);
      builder.turnRight();
      builder.forward(100);
      builder.turnRight();
      builder.forward(100);
      builder.turnRight();
      builder.forward(100);
      
---
      builder.setColor(Color.red);
      
---
      // Draw a triangle
      builder.turn(30);
      builder.forward(100);
      builder.turn(120);
      builder.forward(100);
      builder.turn(120);
      builder.forward(100);
      
---
      world.show(true);
      
---
   }
   
---
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.14.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_TurtleTestGetSet">
                <div class="ac_question" id="csawesome2_2_TurtleTestGetSet_question">
                  <div class="para" id="TurtleTestGetSet-1-1">Try the code below that prints out the turtle’s current position using <code class="code-inline tex2jax_ignore">getXPos()</code> and <code class="code-inline tex2jax_ignore">getYPos()</code>. Can you make it go to position (0,0) or as close to it as possible?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_TurtleTestGetSet_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.util.*;

public class TurtleTestGetSet
{
    public static void main(String[] args)
    {
        World world = new World(300, 300);
        Turtle yertle = new Turtle(world);
        System.out.println(
                "Yertle is starting at: "
                        + yertle.getXPos()
                        + ", "
                        + yertle.getYPos());
        yertle.forward(100);
        yertle.turn(90);
        yertle.forward(50);
        System.out.println(
                "Yertle has ended up at: "
                        + yertle.getXPos()
                        + ", "
                        + yertle.getYPos());
        world.show(true);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleTestGetSet");
    }

    @Test
    public void test1()
    {
        String orig =
                "import java.awt.*;\n"
                    + "import java.util.*;\n\n"
                    + "public class TurtleTestGetSet\n"
                    + "{\n"
                    + "public static void main(String[] args)\n"
                    + "{\n"
                    + "World world = new World(300,300);\n"
                    + "Turtle yertle = new Turtle(world);\n"
                    + "System.out.println(\"Yertle is starting at: \" + yertle.getXPos() + \", \" +"
                    + " yertle.getYPos());\n"
                    + "yertle.forward(100);\n"
                    + "yertle.turn(90);\n"
                    + "yertle.forward(50);\n"
                    + "System.out.println(\"Yertle has ended up at: \" + yertle.getXPos() + \", \" +"
                    + " yertle.getYPos());\n"
                    + "world.show(true);\n"
                    + "}\n"
                    + "}\n";
        boolean passed = codeChanged(orig);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.14.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_TurtleArea">
                <div class="ac_question" id="csawesome2_2_TurtleArea_question">
                  <div class="para" id="TurtleArea-1-1">Fix the errors in the code below so that it prints out the area of the space that the turtle occupies by multiplying its width and height. Remember that you have to do something with the values that the get methods return.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_TurtleArea_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.lang.Math;
import java.util.*;

public class TurtleArea
{
    public static void main(String[] args)
    {
        World world = new World(300,300);
        Turtle yertle = new Turtle(world);

        int area;
        yertle.getWidth() * getHeight;
        System.out.println("Yertle's area is: ");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleArea");
    }

    @Test
    public void test1()
    {
        String actual = getMethodOutput("main");
        String expected = "Yertle's area is: 270";
        boolean passed = getResults(expected, actual, "Prints correct answer");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String code = getCode();
        String target = ".getHeight()";

        int num = countOccurences(code, target);

        boolean passed = num &gt;= 1;

        getResults("1+", "" + num, "Calls to " + target, passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCode();
        String target = ".getWidth()";

        int num = countOccurences(code, target);

        boolean passed = num &gt;= 1;

        getResults("1+", "" + num, "Calls to " + target, passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.14.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_traceCircleArea" data-multipleanswers="false"><div class="para" id="traceCircleArea-1-1">1-14-8: Consider the following class definition.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Circle
{
    private double radius;

    public Circle(double r)
    {
        radius = r;
    }

    public double getArea()
    {
        return 3.14159 * radius * radius;
    }
}
</code></pre></div> <div class="para" id="traceCircleArea-1-3">Assume that the following code segment appears in a main method.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">Circle c = new Circle(10);
System.out.println(c.getArea());
</code></pre></div> <div class="para" id="traceCircleArea-1-5">What is printed as a result of executing the code segment? (If you get stuck, try this <a class="external" href="https://pythontutor.com/visualize.html#code=public%20class%20Circle%0A%7B%0A%20%20%20%20private%20double%20radius%3B%0A%0A%20%20%20%20public%20Circle%28double%20r%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20radius%20%3D%20r%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20double%20getArea%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20return%203.14159%20*%20radius%20*%20radius%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%7B%0A%20%20%20%20%20%20%20%20Circle%20c%20%3D%20new%20Circle%2810%29%3B%0A%20%20%20%20%20%20%20%20System.out.println%28c.getArea%28%29%29%3B%0A%20%20%20%20%7D%0A%7D&amp;cumulative=false&amp;heapPrimitives=nevernest&amp;mode=edit&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" target="_blank">visualization</a><details class="ptx-footnote" aria-live="polite" id="traceCircleArea-1-5-2"><summary class="ptx-footnote__number" title="Footnote 1.14.2"><sup> 2 </sup></summary><div class="ptx-footnote__contents" id="traceCircleArea-1-5-2"><code class="code-inline tex2jax_ignore">https://pythontutor.com/visualize.html#code=public%20class%20Circle%0A%7B%0A%20%20%20%20private%20double%20radius%3B%0A%0A%20%20%20%20public%20Circle%28double%20r%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20radius%20%3D%20r%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20double%20getArea%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20return%203.14159%20*%20radius%20*%20radius%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%7B%0A%20%20%20%20%20%20%20%20Circle%20c%20%3D%20new%20Circle%2810%29%3B%0A%20%20%20%20%20%20%20%20System.out.println%28c.getArea%28%29%29%3B%0A%20%20%20%20%7D%0A%7D&amp;cumulative=false&amp;heapPrimitives=nevernest&amp;mode=edit&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false</code></div></details> to see this code in action.)</div><li data-component="answer" id="csawesome2_2_traceCircleArea_opt_a"><div class="para" id="traceCircleArea-2-1-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_traceCircleArea_opt_a"><div class="para" id="traceCircleArea-2-1-2-1">First, call the constructor, then call getArea().</div></li><li data-component="answer" id="csawesome2_2_traceCircleArea_opt_b" data-correct=""><div class="para" id="traceCircleArea-2-2-1-1">314.159</div></li><li data-component="feedback" id="csawesome2_2_traceCircleArea_opt_b"><div class="para" id="traceCircleArea-2-2-2-1">Correct! getArea() returns 3.14159 * radius * radius, where radius is set to 10 by the constructor.</div></li><li data-component="answer" id="csawesome2_2_traceCircleArea_opt_c"><div class="para" id="traceCircleArea-2-3-1-1">c.getArea()</div></li><li data-component="feedback" id="csawesome2_2_traceCircleArea_opt_c"><div class="para" id="traceCircleArea-2-3-2-1">c.getArea() is a method call, not a value.</div></li><li data-component="answer" id="csawesome2_2_traceCircleArea_opt_d"><div class="para" id="traceCircleArea-2-4-1-1">The code will not compile.</div></li><li data-component="feedback" id="csawesome2_2_traceCircleArea_opt_d"><div class="para" id="traceCircleArea-2-4-2-1">The code does compile.</div></li><li data-component="answer" id="csawesome2_2_traceCircleArea_opt_e"><div class="para" id="traceCircleArea-2-5-1-1">100.0</div></li><li data-component="feedback" id="csawesome2_2_traceCircleArea_opt_e"><div class="para" id="traceCircleArea-2-5-2-1">Don’t forget to multiply by 3.14159.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.14.18 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_traceRectangleArea" data-multipleanswers="false"><div class="para" id="traceRectangleArea-1-1">1-14-9: Consider the following class definition.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Rectangle
{
    private int width;
    private int height;

    public Rectangle(int w, int h)
    {
        width = w;
        height = h;
    }

    public void resize(int amt)
    {
        width += amt;
    }

    public int getArea()
    {
        return width * height;
    }
}
</code></pre></div> <div class="para" id="traceRectangleArea-1-3">Assume that the following code segment appears in a main method.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">Rectangle r = new Rectangle(10, 15);
r.resize(5);
System.out.println(r.getArea());
</code></pre></div> <div class="para" id="traceRectangleArea-1-5">What is printed as a result of executing the code segment? (If you get stuck, try this <a class="external" href="https://pythontutor.com/render.html#code=public%20class%20Rectangle%0A%7B%0A%20%20%20%20private%20int%20width%3B%0A%20%20%20%20private%20int%20height%3B%0A%0A%20%20%20%20public%20Rectangle%28int%20w,%20int%20h%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20width%20%3D%20w%3B%0A%20%20%20%20%20%20%20%20height%20%3D%20h%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20void%20resize%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20width%20%2B%3D%205%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20int%20getArea%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20return%20width%20*%20height%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20Rectangle%20r%20%3D%20new%20Rectangle%2810,%2015%29%3B%0A%20%20%20%20%20%20%20%20r.resize%28%29%3B%0A%20%20%20%20%20%20%20%20System.out.println%28r.getArea%28%29%29%3B%0A%20%20%20%20%7D%0A%7D&amp;cumulative=false&amp;curInstr=20&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" target="_blank">visualization</a><details class="ptx-footnote" aria-live="polite" id="traceRectangleArea-1-5-2"><summary class="ptx-footnote__number" title="Footnote 1.14.3"><sup> 3 </sup></summary><div class="ptx-footnote__contents" id="traceRectangleArea-1-5-2"><code class="code-inline tex2jax_ignore">https://pythontutor.com/render.html#code=public%20class%20Rectangle%0A%7B%0A%20%20%20%20private%20int%20width%3B%0A%20%20%20%20private%20int%20height%3B%0A%0A%20%20%20%20public%20Rectangle%28int%20w,%20int%20h%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20width%20%3D%20w%3B%0A%20%20%20%20%20%20%20%20height%20%3D%20h%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20void%20resize%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20width%20%2B%3D%205%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20int%20getArea%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20return%20width%20*%20height%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20Rectangle%20r%20%3D%20new%20Rectangle%2810,%2015%29%3B%0A%20%20%20%20%20%20%20%20r.resize%28%29%3B%0A%20%20%20%20%20%20%20%20System.out.println%28r.getArea%28%29%29%3B%0A%20%20%20%20%7D%0A%7D&amp;cumulative=false&amp;curInstr=20&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false</code></div></details> to see this code in action.)</div><li data-component="answer" id="csawesome2_2_traceRectangleArea_opt_a"><div class="para" id="traceRectangleArea-2-1-1-1">150</div></li><li data-component="feedback" id="csawesome2_2_traceRectangleArea_opt_a"><div class="para" id="traceRectangleArea-2-1-2-1">Note that the method resize() is called before getArea().</div></li><li data-component="answer" id="csawesome2_2_traceRectangleArea_opt_b"><div class="para" id="traceRectangleArea-2-2-1-1">150.0</div></li><li data-component="feedback" id="csawesome2_2_traceRectangleArea_opt_b"><div class="para" id="traceRectangleArea-2-2-2-1">Note that the method resize() is called before getArea().</div></li><li data-component="answer" id="csawesome2_2_traceRectangleArea_opt_c" data-correct=""><div class="para" id="traceRectangleArea-2-3-1-1">225</div></li><li data-component="feedback" id="csawesome2_2_traceRectangleArea_opt_c"><div class="para" id="traceRectangleArea-2-3-2-1">Correct! resize() increases the width by 5, so the area is 15 * 15 = 225.</div></li><li data-component="answer" id="csawesome2_2_traceRectangleArea_opt_d"><div class="para" id="traceRectangleArea-2-4-1-1">255.0</div></li><li data-component="feedback" id="csawesome2_2_traceRectangleArea_opt_d"><div class="para" id="traceRectangleArea-2-4-2-1">Note that getArea() returns an int</div></li><li data-component="answer" id="csawesome2_2_traceRectangleArea_opt_e"><div class="para" id="traceRectangleArea-2-5-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_traceRectangleArea_opt_e"><div class="para" id="traceRectangleArea-2-5-2-1">Note that the constructor initializes width and height.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.14.19 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_traceReturnMethods" data-multipleanswers="false"><div class="para" id="traceReturnMethods-1-1">1-14-10: What does the following code print out? (If you get stuck, try this <a class="external" href="http://www.pythontutor.com/visualize.html#code=public%20class%20MethodTrace%20%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20public%20int%20square%28int%20x%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20x*x%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20public%20int%20divide%28int%20x,%20int%20y%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20x/y%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20MethodTrace%20traceObj%20%3D%20new%20MethodTrace%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20System.out.println%28%20traceObj.square%282%29%20%2B%20traceObj.divide%286,2%29%20%29%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%7D&amp;cumulative=false&amp;curInstr=16&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" target="_blank">visualization</a><details class="ptx-footnote" aria-live="polite" id="traceReturnMethods-1-1-2"><summary class="ptx-footnote__number" title="Footnote 1.14.4"><sup> 4 </sup></summary><div class="ptx-footnote__contents" id="traceReturnMethods-1-1-2"><code class="code-inline tex2jax_ignore">http://www.pythontutor.com/visualize.html#code=public%20class%20MethodTrace%20%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20public%20int%20square%28int%20x%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20x*x%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20public%20int%20divide%28int%20x,%20int%20y%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20x/y%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20MethodTrace%20traceObj%20%3D%20new%20MethodTrace%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20System.out.println%28%20traceObj.square%282%29%20%2B%20traceObj.divide%286,2%29%20%29%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%7D&amp;cumulative=false&amp;curInstr=16&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false</code></div></details> to see this code in action.)</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class MethodTrace
{
    public int square(int x)
    {
        return x * x;
    }

    public int divide(int x, int y)
    {
        return x / y;
    }

    public static void main(String[] args)
    {
        MethodTrace traceObj = new MethodTrace();
        System.out.println(traceObj.square(2) + traceObj.divide(6, 2));
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_traceReturnMethods_opt_a"><div class="para" id="traceReturnMethods-2-1-1-1">5</div></li><li data-component="feedback" id="csawesome2_2_traceReturnMethods_opt_a"><div class="para" id="traceReturnMethods-2-1-2-1">Make sure you call both methods and compute the square of 2 and then add the results.</div></li><li data-component="answer" id="csawesome2_2_traceReturnMethods_opt_b" data-correct=""><div class="para" id="traceReturnMethods-2-2-1-1">7</div></li><li data-component="feedback" id="csawesome2_2_traceReturnMethods_opt_b"><div class="para" id="traceReturnMethods-2-2-2-1">Yes, square(2) returns 4 which is added to divide(6,2) which returns 3. The total of 4 + 3 is 7.</div></li><li data-component="answer" id="csawesome2_2_traceReturnMethods_opt_c"><div class="para" id="traceReturnMethods-2-3-1-1">4 3</div></li><li data-component="feedback" id="csawesome2_2_traceReturnMethods_opt_c"><div class="para" id="traceReturnMethods-2-3-2-1">Make sure you add the results before printing it out.</div></li><li data-component="answer" id="csawesome2_2_traceReturnMethods_opt_d"><div class="para" id="traceReturnMethods-2-4-1-1">2 3</div></li><li data-component="feedback" id="csawesome2_2_traceReturnMethods_opt_d"><div class="para" id="traceReturnMethods-2-4-2-1">Make sure you square(2) and add the results before printing it out.</div></li><li data-component="answer" id="csawesome2_2_traceReturnMethods_opt_e"><div class="para" id="traceReturnMethods-2-5-1-1">Does not compile.</div></li><li data-component="feedback" id="csawesome2_2_traceReturnMethods_opt_e"><div class="para" id="traceReturnMethods-2-5-2-1">Try the code in an active code window.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.14.20 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_TurtleDistance">
                <div class="ac_question" id="csawesome2_2_TurtleDistance_question">
                  <div class="para" id="TurtleDistance-1-1">Use the <code class="code-inline tex2jax_ignore">getXPos</code>, <code class="code-inline tex2jax_ignore">getYPos</code>, and <code class="code-inline tex2jax_ignore">getDistance(x,y)</code> methods to find yertle’s distance from the point (0,0). Add another turtle, move both turtles to different positions, and find the distance between the two turtles.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_TurtleDistance_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.util.*;

public class TurtleTestDistance
{
    public static void main(String[] args)
    {
        World world = new World(300, 300);
        Turtle yertle = new Turtle(world);

        // Can you find yertle's distance from the point (0,0)?

        // Can you find the distance between 2 turtles?

        world.show(true);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleTestDistance");
    }

    @Test
    public void test2()
    {
        String code = getCode();
        int num = countOccurences(code, ".getXPos()");

        boolean passed = num &gt; 0;
        getResults("&gt;=1", "" + num, "Calls to getXPos()", passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCode();
        int num = countOccurences(code, ".getYPos()");

        boolean passed = num &gt; 0;
        getResults("&gt;=1", "" + num, "Calls to getYPos()", passed);
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String code = getCode();
        int num = countOccurences(code, ".getDistance(");

        boolean passed = num &gt;= 2;
        getResults("&gt;=2", "" + num, "Calls to getDistance(...)", passed);
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        String code = getCode();
        int num = countOccurences(code, ".getDistance(0,0)");

        boolean passed = num &gt;= 1;
        getResults("&gt;=1", "" + num, "Calls getDistance(0,0)", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.14.21 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-TurtleHouse">
                <div class="ac_question" id="csawesome2_2_challenge-TurtleHouse_question">
                  <div class="para" id="challenge-TurtleHouse-1-1">Draw a Turtle House! Make sure you use forward, turn, penUp, penDown, moveTo methods as well as different colors. Have fun!</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-TurtleHouse_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.util.*;

public class TurtleHouse
{
    public static void main(String[] args)
    {
        World world = new World(300, 300);
        Turtle t = new Turtle(habitat);
        // Use t to draw a house



        // keep this line at the end of your code to show the drawing
        world.show(true);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleHouse");
    }

    @Test
    public void test2()
    {
        String code = getCode();
        int num = countOccurences(code, "moveTo(");

        boolean passed = num &gt;= 1;
        passed = getResults("1 or more", "" + num, "Calls moveTo(...)", passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCode();
        int num = countOccurences(code, ".penUp()");

        boolean passed = num &gt;= 1;
        passed = getResults("1 or more", "" + num, "Calls penUp()", passed);
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String code = getCode();
        int num = countOccurences(code, ".penDown(");

        boolean passed = num &gt;= 1;
        passed = getResults("1 or more", "" + num, "Calls penDown()", passed);
        assertTrue(passed);
    }

    @Test
    public void test5()
    {
        String code = getCode();
        int numTurns = countOccurences(code, ".turn");

        boolean passed = numTurns &gt;= 6;
        passed = getResults("6 or more", "" + numTurns, "turns", passed);
        assertTrue(passed);
    }

    @Test
    public void test6()
    {
        String code = getCode();
        int numForward = countOccurences(code, ".forward(");

        boolean passed = numForward &gt;= 6;
        passed = getResults("6 or more", "" + numForward, "Calls to forward()", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.14.22 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP-Party-Methods" data-multipleanswers="false"><div class="para" id="AP-Party-Methods-1-1">1-14-13: Consider the following class definition.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Party
{
    private int numInvited;
    private boolean partyCancelled;

    public Party()
    {
        numInvited = 1;
        partyCancelled = false;
    }

    public void inviteFriend()
    {
        numInvited++;
    }

    public void cancelParty()
    {
        partyCancelled = true;
    }
}
</code></pre></div> <div class="para" id="AP-Party-Methods-1-3">Assume that a Party object called myParty has been properly declared and initialized in a class other than Party.  Which of the following statements are valid?</div><li data-component="answer" id="csawesome2_2_AP-Party-Methods_opt_a" data-correct=""><div class="para" id="AP-Party-Methods-2-1-1-1">myParty.cancelParty();</div></li><li data-component="feedback" id="csawesome2_2_AP-Party-Methods_opt_a"><div class="para" id="AP-Party-Methods-2-1-2-1">Correct!</div></li><li data-component="answer" id="csawesome2_2_AP-Party-Methods_opt_b"><div class="para" id="AP-Party-Methods-2-2-1-1">myParty.inviteFriend(2);</div></li><li data-component="feedback" id="csawesome2_2_AP-Party-Methods_opt_b"><div class="para" id="AP-Party-Methods-2-2-2-1">The method inviteFriend() does not have any parameters.</div></li><li data-component="answer" id="csawesome2_2_AP-Party-Methods_opt_c"><div class="para" id="AP-Party-Methods-2-3-1-1">myParty.endParty();</div></li><li data-component="feedback" id="csawesome2_2_AP-Party-Methods_opt_c"><div class="para" id="AP-Party-Methods-2-3-2-1">There is no endParty() method in the class Party.</div></li><li data-component="answer" id="csawesome2_2_AP-Party-Methods_opt_d"><div class="para" id="AP-Party-Methods-2-4-1-1">myParty.numInvited();</div></li><li data-component="feedback" id="csawesome2_2_AP-Party-Methods_opt_d"><div class="para" id="AP-Party-Methods-2-4-2-1">There is no numInvited() method in the class Party. It is an instance variable.</div></li><li data-component="answer" id="csawesome2_2_AP-Party-Methods_opt_e"><div class="para" id="AP-Party-Methods-2-5-1-1">System.out.println( myParty.cancelParty() );</div></li><li data-component="feedback" id="csawesome2_2_AP-Party-Methods_opt_e"><div class="para" id="AP-Party-Methods-2-5-2-1">This would cause an error because the void method cancelParty() does not return a String that could be printed.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.14.23 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP-Cat-trace" data-multipleanswers="false"><div class="para" id="AP-Cat-trace-1-1">1-14-14: Consider the following class definition.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Cat
{
    public void meow()
    {
        System.out.print("Meow ");
    }

    public void purr()
    {
        System.out.print("purr");
    }

    public void welcomeHome()
    {
        purr();
        meow();
    }
    /* Constructors not shown */
}
</code></pre></div> <div class="para" id="AP-Cat-trace-1-3">Which of the following code segments, if located in a method in a class other than Cat, will cause the message “Meow purr” to be printed?</div><li data-component="answer" id="csawesome2_2_AP-Cat-trace_opt_a"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">Cat a = new Cat();
Cat.meow();
Cat.purr();
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP-Cat-trace_opt_a"><div class="para" id="AP-Cat-trace-2-1-2-1">You must use the object a, not the class name Cat, to call these methods.</div></li><li data-component="answer" id="csawesome2_2_AP-Cat-trace_opt_b"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">Cat a = new Cat();
a.welcomeHome();
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP-Cat-trace_opt_b"><div class="para" id="AP-Cat-trace-2-2-2-1">This would print “purrMeow “</div></li><li data-component="answer" id="csawesome2_2_AP-Cat-trace_opt_c" data-correct=""><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">Cat a = new Cat();
a.meow();
a.purr();
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP-Cat-trace_opt_c"><div class="para" id="AP-Cat-trace-2-3-2-1">Correct!</div></li><li data-component="answer" id="csawesome2_2_AP-Cat-trace_opt_d"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">Cat a = new Cat().welcomeHome();
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP-Cat-trace_opt_d"><div class="para" id="AP-Cat-trace-2-4-2-1">This would cause a syntax error.</div></li><li data-component="answer" id="csawesome2_2_AP-Cat-trace_opt_e"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">Cat a = new Cat();
a.meow();
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP-Cat-trace_opt_e"><div class="para" id="AP-Cat-trace-2-5-2-1">This would just print “Meow “.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.14.24 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP-Liquid-return" data-multipleanswers="false"><div class="para" id="AP-Liquid-return-1-1">1-14-15: Consider the following class definition.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Liquid
{
    private double boilingPoint;
    private double freezingPoint;
    private double currentTemp;

    public Liquid()
    {
        currentTemp = 50;
    }

    public void lowerTemp()
    {
        currentTemp -= 10;
    }

    public double getTemp()
    {
        return currentTemp;
    }
}
</code></pre></div> <div class="para" id="AP-Liquid-return-1-3">Assume that the following code segment appears in a class other than Liquid.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">Liquid water = new Liquid();
water.lowerTemp();
System.out.println(water.getTemp());
</code></pre></div> <div class="para" id="AP-Liquid-return-1-5">What is printed as a result of executing the code segment? (If you get stuck, try this <a class="external" href="https://pythontutor.com/render.html#code=public%20class%20Liquid%20%7B%0A%20%20%0A%20%20%20%20private%20double%20boilingPoint%3B%0A%20%20%20%20private%20double%20freezingPoint%3B%0A%20%20%20%20private%20double%20currentTemp%3B%0A%0A%20%20%20%20public%20Liquid%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20currentTemp%20%3D%2050%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20void%20lowerTemp%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20currentTemp%20-%3D%2010%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20double%20getTemp%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20return%20currentTemp%3B%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20Liquid%20water%20%3D%20new%20Liquid%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20water.lowerTemp%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20System.out.println%28water.getTemp%28%29%29%3B%0A%20%20%20%20%7D%0A%7D&amp;cumulative=false&amp;curInstr=18&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" target="_blank">visualization</a><details class="ptx-footnote" aria-live="polite" id="AP-Liquid-return-1-5-2"><summary class="ptx-footnote__number" title="Footnote 1.14.5"><sup> 5 </sup></summary><div class="ptx-footnote__contents" id="AP-Liquid-return-1-5-2"><code class="code-inline tex2jax_ignore">https://pythontutor.com/render.html#code=public%20class%20Liquid%20%7B%0A%20%20%0A%20%20%20%20private%20double%20boilingPoint%3B%0A%20%20%20%20private%20double%20freezingPoint%3B%0A%20%20%20%20private%20double%20currentTemp%3B%0A%0A%20%20%20%20public%20Liquid%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20currentTemp%20%3D%2050%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20void%20lowerTemp%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20currentTemp%20-%3D%2010%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20double%20getTemp%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20return%20currentTemp%3B%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20Liquid%20water%20%3D%20new%20Liquid%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20water.lowerTemp%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20System.out.println%28water.getTemp%28%29%29%3B%0A%20%20%20%20%7D%0A%7D&amp;cumulative=false&amp;curInstr=18&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false</code></div></details> to see this code in action.)</div><li data-component="answer" id="csawesome2_2_AP-Liquid-return_opt_a"><div class="para" id="AP-Liquid-return-2-1-1-1">-10</div></li><li data-component="feedback" id="csawesome2_2_AP-Liquid-return_opt_a"><div class="para" id="AP-Liquid-return-2-1-2-1">The Liquid() constructor sets the currentTemp instance variable to 50 and the lowerTemp() method subtracts 10 from it.</div></li><li data-component="answer" id="csawesome2_2_AP-Liquid-return_opt_b"><div class="para" id="AP-Liquid-return-2-2-1-1">50</div></li><li data-component="feedback" id="csawesome2_2_AP-Liquid-return_opt_b"><div class="para" id="AP-Liquid-return-2-2-2-1">The Liquid() constructor sets the currentTemp instance variable to 50 and the lowerTemp() method subtracts 10 from it.</div></li><li data-component="answer" id="csawesome2_2_AP-Liquid-return_opt_c"><div class="para" id="AP-Liquid-return-2-3-1-1">water.getTemp()</div></li><li data-component="feedback" id="csawesome2_2_AP-Liquid-return_opt_c"><div class="para" id="AP-Liquid-return-2-3-2-1">The System.out.println will print the value returned from water.getTemp().</div></li><li data-component="answer" id="csawesome2_2_AP-Liquid-return_opt_d"><div class="para" id="AP-Liquid-return-2-4-1-1">The code will not compile.</div></li><li data-component="feedback" id="csawesome2_2_AP-Liquid-return_opt_d"><div class="para" id="AP-Liquid-return-2-4-2-1">This code should compile.</div></li><li data-component="answer" id="csawesome2_2_AP-Liquid-return_opt_e" data-correct=""><div class="para" id="AP-Liquid-return-2-5-1-1">40.0</div></li><li data-component="feedback" id="csawesome2_2_AP-Liquid-return_opt_e"><div class="para" id="AP-Liquid-return-2-5-2-1">Correct, the Liquid() constructor sets the currentTemp instance variable to 50, and the lowerTemp() method subtracts 10 from it, and getTemp() returns the currentTemp value as a double.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.14.25 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP-Pizza-trace-args" data-multipleanswers="false"><div class="para" id="AP-Pizza-trace-args-1-1">1-14-16: Consider the following methods, which appear in the same class.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public void splitPizza(int numOfPeople)
{
    int slicesPerPerson = 8/numOfPeople;
    /* INSERT CODE HERE */
}

public void printSlices(int slices)
{
    System.out.println("Each person gets " + slices + " slices each");
}
</code></pre></div> <div class="para" id="AP-Pizza-trace-args-1-3">Which of the following lines would go into <code class="code-inline tex2jax_ignore">/* INSERT CODE HERE */</code> in the method splitPizza in order to call the <code class="code-inline tex2jax_ignore">printSlices</code> method to print the number of slices per person correctly?</div><li data-component="answer" id="csawesome2_2_AP-Pizza-trace-args_opt_a" data-correct=""><div class="para" id="AP-Pizza-trace-args-2-1-1-1">printSlices(slicesPerPerson);</div></li><li data-component="feedback" id="csawesome2_2_AP-Pizza-trace-args_opt_a"><div class="para" id="AP-Pizza-trace-args-2-1-2-1">Correct! If you had 4 people, slicesPerPerson would be 8/4=2 and printSlices would print out “Each person gets 2 slices each”.</div></li><li data-component="answer" id="csawesome2_2_AP-Pizza-trace-args_opt_b"><div class="para" id="AP-Pizza-trace-args-2-2-1-1">printSlices(numOfPeople);</div></li><li data-component="feedback" id="csawesome2_2_AP-Pizza-trace-args_opt_b"><div class="para" id="AP-Pizza-trace-args-2-2-2-1">If you had 4 people, this would print out that they get 4 slices each of an 8 slice pizza.</div></li><li data-component="answer" id="csawesome2_2_AP-Pizza-trace-args_opt_c"><div class="para" id="AP-Pizza-trace-args-2-3-1-1">printSlices(8);</div></li><li data-component="feedback" id="csawesome2_2_AP-Pizza-trace-args_opt_c"><div class="para" id="AP-Pizza-trace-args-2-3-2-1">This would always print out 8 slices each.</div></li><li data-component="answer" id="csawesome2_2_AP-Pizza-trace-args_opt_d"><div class="para" id="AP-Pizza-trace-args-2-4-1-1">splitPizza(8);</div></li><li data-component="feedback" id="csawesome2_2_AP-Pizza-trace-args_opt_d"><div class="para" id="AP-Pizza-trace-args-2-4-2-1">This would not call the printSlices method.</div></li><li data-component="answer" id="csawesome2_2_AP-Pizza-trace-args_opt_e"><div class="para" id="AP-Pizza-trace-args-2-5-1-1">splitPizza(slicesPerPerson);</div></li><li data-component="feedback" id="csawesome2_2_AP-Pizza-trace-args_opt_e"><div class="para" id="AP-Pizza-trace-args-2-5-2-1">This would not call the printSlices method.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-5-16</id>
      <title>Strings</title>
      <question>
        <label>Exercise 1.15.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcso1">
                <div class="ac_question" id="csawesome2_2_lcso1_question">
                  <div class="para" id="lcso1-1-1">Try the following code. Add another variable for a lastname that is “Hernandez”. Use += or + to add the lastname variable after name to the result. Use += or + to add 2 more exclamation points (!) to the end of the happy birthday greeting in result.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcso1_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String start = "Happy Birthday";
        String name = "Jose";
        String result = start + " " + name; // add together strings
        result += "!"; // add on to the same string
        System.out.println(result);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Happy Birthday Jose Hernandez!!!";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.15.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qse_1" data-multipleanswers="false"><div class="para" id="qse_1-1-1">1-14-5: Given the following code segment, what is in the string referenced by s1?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String s1 = "xy";
String s2 = s1;
s1 = s1 + s2 + "z";
</code></pre></div><li data-component="answer" id="csawesome2_2_qse_1_opt_a"><div class="para" id="qse_1-2-1-1-1">xyz</div></li><li data-component="feedback" id="csawesome2_2_qse_1_opt_a"><div class="para" id="qse_1-2-1-2-1">s1 will equal "xy" plus another "xy" then z at the end.</div></li><li data-component="answer" id="csawesome2_2_qse_1_opt_b" data-correct=""><div class="para" id="qse_1-2-2-1-1">xyxyz</div></li><li data-component="feedback" id="csawesome2_2_qse_1_opt_b"><div class="para" id="qse_1-2-2-2-1">s1 contains the original value, plus itself, plus "z"</div></li><li data-component="answer" id="csawesome2_2_qse_1_opt_c"><div class="para" id="qse_1-2-3-1-1">xy xy z</div></li><li data-component="feedback" id="csawesome2_2_qse_1_opt_c"><div class="para" id="qse_1-2-3-2-1">No spaces are added during concatenation.</div></li><li data-component="answer" id="csawesome2_2_qse_1_opt_d"><div class="para" id="qse_1-2-4-1-1">xy z</div></li><li data-component="feedback" id="csawesome2_2_qse_1_opt_d"><div class="para" id="qse_1-2-4-2-1">No spaces are added during concatenation, and an additional "xy" should be included at the beginning.</div></li><li data-component="answer" id="csawesome2_2_qse_1_opt_e"><div class="para" id="qse_1-2-5-1-1">z</div></li><li data-component="feedback" id="csawesome2_2_qse_1_opt_e"><div class="para" id="qse_1-2-5-2-1">s1 was set to "xy" initially, so the final answer will be "xyxyz"</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.15.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcso2">
                <div class="ac_question" id="csawesome2_2_lcso2_question">
                  <div class="para" id="lcso2-1-1">What do you think the following will print? Guess before you hit run. If you want the addition to take place before the numbers are turned into a string what should you do? Try to modify the code  so that it adds 4 + 3 before appending the value to the string. Hint: you used this to do addition before multiplication in arithmetic expressions.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcso2_editor" data-question_label="" data-codelens="true">public class Test2
{
    public static void main(String[] args)
    {
        String message = "12" + 4 + 3;
        System.out.println(message);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "127";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testParen() throws IOException
    {
        String code = removeSpaces(getCodeWithoutComments());
        String expect = "(4+3)";
        boolean passed = code.contains(expect);

        passed = getResults("" + true, "" + passed, "Checking code for added parentheses");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.15.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcsm1">
                <div class="ac_question" id="csawesome2_2_lcsm1_question">
                  <div class="para" id="lcsm1-1-1">This code shows the output from String methods length, substring, and indexOf. How many letters does substring(0,3) return? What does indexOf return when its argument is not found?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcsm1_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String message1 = "This is a test";
        String message2 = "Hello Class";

        System.out.println(message1.length());
        System.out.println(message2.length());

        System.out.println(message1.substring(0, 3));
        System.out.println(message1.substring(2, 3));
        System.out.println(message1.substring(5));


        System.out.println(
                message1.indexOf("is")); // This will match the is in "This"!
        System.out.println(message1.indexOf("Hello"));
        System.out.println(message2.indexOf("Hello"));

        // lowercase and uppercase are not on the AP exam, but still useful
        System.out.println(message2.toLowerCase());
        System.out.println(message2.toUpperCase());
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main").trim();
        boolean passed = getResults(output, output, "Expected output from main", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.15.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_substring-preconditions">
                <div class="ac_question" id="csawesome2_2_substring-preconditions_question">
                  <div class="para" id="substring-preconditions-1-1">The following code breaks the preconditions of the substring method and throws an IndexOutOfBoundsException. Can you fix the code by changing the arguments for the substring method to print out the substring “o”?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_substring-preconditions_editor" data-question_label="" data-codelens="true">public class SubstringPreconditions
{
    public static void main(String[] args)
    {
        String str = "hello";
        System.out.println(str.substring(-1, 10));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("SubstringPreconditions");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "o";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.15.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsb_3" data-multipleanswers="false"><div class="para" id="qsb_3-1-1">1-14-9: What is the value of pos after the following code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String s1 = "abccba";
int pos = s1.indexOf("b");
</code></pre></div><li data-component="answer" id="csawesome2_2_qsb_3_opt_a"><div class="para" id="qsb_3-2-1-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_qsb_3_opt_a"><div class="para" id="qsb_3-2-1-2-1">The first character is at index 0 in a string.</div></li><li data-component="answer" id="csawesome2_2_qsb_3_opt_b" data-correct=""><div class="para" id="qsb_3-2-2-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qsb_3_opt_b"><div class="para" id="qsb_3-2-2-2-1">The method indexOf returns the first position of the passed str in the current string starting from the left (from 0).</div></li><li data-component="answer" id="csawesome2_2_qsb_3_opt_c"><div class="para" id="qsb_3-2-3-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_qsb_3_opt_c"><div class="para" id="qsb_3-2-3-2-1">Does indexOf start from the left or right?</div></li><li data-component="answer" id="csawesome2_2_qsb_3_opt_d"><div class="para" id="qsb_3-2-4-1-1">-1</div></li><li data-component="feedback" id="csawesome2_2_qsb_3_opt_d"><div class="para" id="qsb_3-2-4-2-1">Does the string contain a b?</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.15.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsb_3b" data-multipleanswers="false"><div class="para" id="qsb_3b-1-1">1-14-10: What is the value of len after the following code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String s1 = "baby";
int len = s1.length();
</code></pre></div><li data-component="answer" id="csawesome2_2_qsb_3b_opt_a"><div class="para" id="qsb_3b-2-1-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_qsb_3b_opt_a"><div class="para" id="qsb_3b-2-1-2-1">Length returns the number of characters in the string, not the number of characters in the name of the string.</div></li><li data-component="answer" id="csawesome2_2_qsb_3b_opt_b"><div class="para" id="qsb_3b-2-2-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_qsb_3b_opt_b"><div class="para" id="qsb_3b-2-2-2-1">The position of the last character is 3, but the length is 4.</div></li><li data-component="answer" id="csawesome2_2_qsb_3b_opt_c" data-correct=""><div class="para" id="qsb_3b-2-3-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_qsb_3b_opt_c"><div class="para" id="qsb_3b-2-3-2-1">Length returns the number of characters in the string.</div></li><li data-component="answer" id="csawesome2_2_qsb_3b_opt_d"><div class="para" id="qsb_3b-2-4-1-1">-1</div></li><li data-component="feedback" id="csawesome2_2_qsb_3b_opt_d"><div class="para" id="qsb_3b-2-4-2-1">Length is never negative.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.15.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsb_3c" data-multipleanswers="false"><div class="para" id="qsb_3c-1-1">1-14-11: What is the value of s2 after the following code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String s1 = "baby";
String s2 = s1.substring(0,3);
</code></pre></div><li data-component="answer" id="csawesome2_2_qsb_3c_opt_a"><div class="para" id="qsb_3c-2-1-1-1">baby</div></li><li data-component="feedback" id="csawesome2_2_qsb_3c_opt_a"><div class="para" id="qsb_3c-2-1-2-1">This would be true if substring returned all the characters from the first index to the last inclusive, but it does not include the character at the last index.</div></li><li data-component="answer" id="csawesome2_2_qsb_3c_opt_b"><div class="para" id="qsb_3c-2-2-1-1">b</div></li><li data-component="feedback" id="csawesome2_2_qsb_3c_opt_b"><div class="para" id="qsb_3c-2-2-2-1">This would be true if it was s1.substring(0,1)</div></li><li data-component="answer" id="csawesome2_2_qsb_3c_opt_c"><div class="para" id="qsb_3c-2-3-1-1">ba</div></li><li data-component="feedback" id="csawesome2_2_qsb_3c_opt_c"><div class="para" id="qsb_3c-2-3-2-1">This would be true if it was s1.substring(0,2)</div></li><li data-component="answer" id="csawesome2_2_qsb_3c_opt_d" data-correct=""><div class="para" id="qsb_3c-2-4-1-1">bab</div></li><li data-component="feedback" id="csawesome2_2_qsb_3c_opt_d"><div class="para" id="qsb_3c-2-4-2-1">Substring returns all the characters from the starting index to the last index -1.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.15.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsb_4b" data-multipleanswers="false"><div class="para" id="qsb_4b-1-1">1-14-12: What is the value of s2 after the following code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String s1 = "baby";
String s2 = s1.substring(2);
</code></pre></div><li data-component="answer" id="csawesome2_2_qsb_4b_opt_a" data-correct=""><div class="para" id="qsb_4b-2-1-1-1">by</div></li><li data-component="feedback" id="csawesome2_2_qsb_4b_opt_a"><div class="para" id="qsb_4b-2-1-2-1">The method substring(index) will return all characters starting the index to the end of the string.</div></li><li data-component="answer" id="csawesome2_2_qsb_4b_opt_b"><div class="para" id="qsb_4b-2-2-1-1">aby</div></li><li data-component="feedback" id="csawesome2_2_qsb_4b_opt_b"><div class="para" id="qsb_4b-2-2-2-1">This would be true if it was substring(1);</div></li><li data-component="answer" id="csawesome2_2_qsb_4b_opt_c"><div class="para" id="qsb_4b-2-3-1-1">a</div></li><li data-component="feedback" id="csawesome2_2_qsb_4b_opt_c"><div class="para" id="qsb_4b-2-3-2-1">This would be true if it was substring(1,2);</div></li><li data-component="answer" id="csawesome2_2_qsb_4b_opt_d"><div class="para" id="qsb_4b-2-4-1-1">b</div></li><li data-component="feedback" id="csawesome2_2_qsb_4b_opt_d"><div class="para" id="qsb_4b-2-4-2-1">This would be true if it was substring(2,3);</div></li><li data-component="answer" id="csawesome2_2_qsb_4b_opt_e"><div class="para" id="qsb_4b-2-5-1-1">ba</div></li><li data-component="feedback" id="csawesome2_2_qsb_4b_opt_e"><div class="para" id="qsb_4b-2-5-2-1">This would be ture if it was substring(0,2);</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.15.19 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcsm2">
                <div class="ac_question" id="csawesome2_2_lcsm2_question">
                  <div class="para" id="lcsm2-1-1">Run the code to see how the String methods equals and compareTo work. Is equals case-sensitive? When does compareTo return a negative number?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcsm2_editor" data-question_label="" data-codelens="true">public class Test2
{
    public static void main(String[] args)
    {
        String message = "Hello!";

        System.out.println(message.compareTo("Hello!"));
        System.out.println(message.compareTo("And"));
        System.out.println(message.compareTo("Zoo"));

        System.out.println(message.equals("Hello!"));
        System.out.println(message.equals("hello!"));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "0\n7\n-18\ntrue\nfalse";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.15.20 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_ch4_str1">
                <span data-subcomponent="question">
                  <div class="para" id="ch4_str1-1-1">Drag the definition from the left and drop it on the correct concept on the right.  Click the "Check Me" button to see if you are correct</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="ch4_str1-2-1">Review the vocabulary.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_ch4_str1_drag1">the position of a character in a string</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch4_str1_drag1">index</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch4_str1_drag2">a new string that is a part of another string with 0 to all characters copied from the original string</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch4_str1_drag2">substring</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch4_str1_drag3">doesn’t change</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch4_str1_drag3">immutable</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch4_str1_drag4">the number of characters in a string</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch4_str1_drag4">length</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.15.21 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_ch4_str2">
                <span data-subcomponent="question">
                  <div class="para" id="ch4_str2-1-1">Drag the definition from the left and drop it on the correct method on the right.  Click the "Check Me" button to see if you are correct.</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="ch4_str2-2-1">Review the vocabulary.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_ch4_str2_drag1">Returns true if the characters in two strings are the same</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch4_str2_drag1">equals</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch4_str2_drag2">Returns the position of one string in another or -1</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch4_str2_drag2">indexOf</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch4_str2_drag3">Returns a number to indicate if one string is less than, equal to, or greater than another</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch4_str2_drag3">compareTo</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch4_str2_drag4">Returns a string representing the object that is passed to this method</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch4_str2_drag4">toString</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.15.22 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsb_8-new" data-multipleanswers="false"><div class="para" id="qsb_8-new-1-1">1-14-16: What is the value of answer after the following code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String s1 = "Hi";
String s2 = "Bye";
int answer = s1.compareTo(s2);
</code></pre></div><li data-component="answer" id="csawesome2_2_qsb_8-new_opt_a" data-correct=""><div class="para" id="qsb_8-new-2-1-1-1">positive (&gt; 0)</div></li><li data-component="feedback" id="csawesome2_2_qsb_8-new_opt_a"><div class="para" id="qsb_8-new-2-1-2-1">H is after B in the alphabet so s1 is greater than s2.</div></li><li data-component="answer" id="csawesome2_2_qsb_8-new_opt_b"><div class="para" id="qsb_8-new-2-2-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_qsb_8-new_opt_b"><div class="para" id="qsb_8-new-2-2-2-1">The method compareTo will only return 0 if the strings have the same characters in the same order.</div></li><li data-component="answer" id="csawesome2_2_qsb_8-new_opt_c"><div class="para" id="qsb_8-new-2-3-1-1">negative (&lt; 0)</div></li><li data-component="feedback" id="csawesome2_2_qsb_8-new_opt_c"><div class="para" id="qsb_8-new-2-3-2-1">This would be true if it was s2.compareTo(s1)</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.15.23 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_stringMistakes">
                <div class="ac_question" id="csawesome2_2_stringMistakes_question">
                  <div class="para" id="stringMistakes-1-1">This code contains some common mistakes with strings. Fix the code to use the string methods correctly.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_stringMistakes_editor" data-question_label="" data-codelens="true">public class StringMistakes
{
    public static void main(String[] args)
    {
        String str1 = "Hello!";

        // Print out the first letter?
        System.out.println(
                "The first letter in " + str1 + ":" + str1.substring(1, 1));

        // Print out the last character?
        System.out.println(
                "The last char. in " + str1 + ":" + str1.substring(8));

        // Print str1 in lower case? Will str1 change?
        str1.toLowerCase();
        System.out.println("In lowercase: " + str1);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main").trim();
        String expect =
                "The first letter in Hello!:H\nThe last char. in Hello!:!\nIn lowercase: hello!";
        boolean passed = output.contains(expect);

        getResults(expect, output, "Expected output from main", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.15.24 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-PigLatin">
                <div class="ac_question" id="csawesome2_2_challenge-PigLatin_question">
                  <div class="para" id="challenge-PigLatin-1-1">Write code in the pigLatin method below to use the substring method to transform a word given as its argument into Pig Latin where the first letter is put at the end and “ay” is added. The word pig is igpay in Pig Latin. Change the input below to try it on other words.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-PigLatin_editor" data-question_label="" data-codelens="true">import java.util.Scanner;

public class PigLatin
{
   public static String pigLatin(String word)
   {
       // Change this to use word.substring to construct
       // the pig latin version of word
       String pigLatin = word;

       return pigLatin;
   }

   public static void main(String[] args)
   {
       // Do not change main!
       // Write your code in the pigLatin method above.
       Scanner scan = new Scanner(System.in);
       String word = scan.nextLine();
       System.out.println(word + " in Pig Latin is " + pigLatin(word) );
       scan.close();
   }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMethod() throws IOException
    {
        Object[] args = {"java"};
        String output = getMethodOutput("pigLatin", args);
        String expect = "avajay";
        boolean passed = getResults(expect, output,
                             "pigLatin(\"java\") should return \"avajay\"");
        assertTrue(passed);
    }
    @Test
    public void testMethod2() throws IOException
    {
        Object[] args = {"pig"};
        String output = getMethodOutput("pigLatin", args);
        String expect = "igpay";
        boolean passed = getResults(expect, output,
                             "pigLatin(\"pig\") should return \"igpay\"");
        assertTrue(passed);
    }
    @Test
    public void testContainsSubstring()
    {
        String target = "word.substring(";
        int count = countOccurences(getCode(), target);
        boolean passed = count &gt;= 2;
        passed =
                getResults(
                        "2 substring calls",
                        count + " substring call(s)",
                        "Code contains calls to substring method",
                        passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.15.25 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP-substring" data-multipleanswers="false"><div class="para" id="AP-substring-1-1">1-14-19: What is the value of s2 after the following code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String s1 = new String("hi there");
int pos = s1.indexOf("e");
String s2 = s1.substring(0,pos);
</code></pre></div><li data-component="answer" id="csawesome2_2_AP-substring_opt_a" data-correct=""><div class="para" id="AP-substring-2-1-1-1">hi th</div></li><li data-component="feedback" id="csawesome2_2_AP-substring_opt_a"><div class="para" id="AP-substring-2-1-2-1">The substring method returns the string starting at the first index and not including the last index.  The method indexOf returns the index of the first place the string occurs.</div></li><li data-component="answer" id="csawesome2_2_AP-substring_opt_b"><div class="para" id="AP-substring-2-2-1-1">hi the</div></li><li data-component="feedback" id="csawesome2_2_AP-substring_opt_b"><div class="para" id="AP-substring-2-2-2-1">This would be correct if substring returned all characters between the first index and last index, but does it?</div></li><li data-component="answer" id="csawesome2_2_AP-substring_opt_c"><div class="para" id="AP-substring-2-3-1-1">hi ther</div></li><li data-component="feedback" id="csawesome2_2_AP-substring_opt_c"><div class="para" id="AP-substring-2-3-2-1">This would be correct if indexOf returned the last position the string str was found in the current string, does it?</div></li><li data-component="answer" id="csawesome2_2_AP-substring_opt_d"><div class="para" id="AP-substring-2-4-1-1">hi there</div></li><li data-component="feedback" id="csawesome2_2_AP-substring_opt_d"><div class="para" id="AP-substring-2-4-2-1">This would be correct if indexOf returned the last position the string str was found in the current string and if substring included all characters between the start and end index.  Check both of these.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.15.26 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP-immutable" data-multipleanswers="false"><div class="para" id="AP-immutable-1-1">1-14-20: What is the value of s1 after the following code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String s1 = "Hi";
String s2 = s1.substring(0,1);
String s3 = s2.toLowerCase();
</code></pre></div><li data-component="answer" id="csawesome2_2_AP-immutable_opt_a" data-correct=""><div class="para" id="AP-immutable-2-1-1-1">Hi</div></li><li data-component="feedback" id="csawesome2_2_AP-immutable_opt_a"><div class="para" id="AP-immutable-2-1-2-1">Strings are immutable, meaning they don’t change.  Any method that changes a string returns a new string.  So s1 never changes.</div></li><li data-component="answer" id="csawesome2_2_AP-immutable_opt_b"><div class="para" id="AP-immutable-2-2-1-1">hi</div></li><li data-component="feedback" id="csawesome2_2_AP-immutable_opt_b"><div class="para" id="AP-immutable-2-2-2-1">This would be true if the question was what is the value of s2 and it was substring(0,2) not (0,1)</div></li><li data-component="answer" id="csawesome2_2_AP-immutable_opt_c"><div class="para" id="AP-immutable-2-3-1-1">H</div></li><li data-component="feedback" id="csawesome2_2_AP-immutable_opt_c"><div class="para" id="AP-immutable-2-3-2-1">This would be true if the question was what is the value of s2, not s1.</div></li><li data-component="answer" id="csawesome2_2_AP-immutable_opt_d"><div class="para" id="AP-immutable-2-4-1-1">h</div></li><li data-component="feedback" id="csawesome2_2_AP-immutable_opt_d"><div class="para" id="AP-immutable-2-4-2-1">This would be true if the question was what is the value of s3, not s1.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.15.11.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcsb1">
                <div class="ac_question" id="csawesome2_2_lcsb1_question">
                  <div class="para" id="lcsb1-1-1">Run the following code.  What does it print?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcsb1_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String greeting = null;
        System.out.println(greeting);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "null";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.15.11.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcsbnew">
                <div class="ac_question" id="csawesome2_2_lcsbnew_question">
                  <div class="para" id="lcsbnew-1-1">The code below creates two greeting strings: one using a string literal and the other using new and the String constructor. Change the code to add 2 new strings called firstName and lastName, one using a string literal and the other using new, and print them out with the greetings.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcsbnew_editor" data-question_label="" data-codelens="true">public class StringTest
{
    public static void main(String[] args)
    {
        String greeting1 = "Hello!";
        String greeting2 = new String("Welcome!");
        System.out.println(greeting1);
        System.out.println(greeting2);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class StringTest {      public static void main(String[] args)      {"
                        + " String greeting1 = \"Hello!\";        String greeting2 = new"
                        + " String(\"Welcome!\"); System.out.println(greeting1);"
                        + " System.out.println(greeting2); }    }";
        boolean changed = codeChanged(origCode);
        assertTrue(changed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.15.11.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcsb2">
                <div class="ac_question" id="csawesome2_2_lcsb2_question">
                  <div class="para" id="lcsb2-1-1">Now that greeting refers to an actual object we can ask the object what class created it. Try the following.  What does it print?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcsb2_editor" data-question_label="" data-codelens="true">public class Test2
{
    public static void main(String[] args)
    {
        String greeting = "Hello";
        Class currClass = greeting.getClass();
        System.out.println(currClass);
        Class parentClass = currClass.getSuperclass();
        System.out.println(parentClass);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "class java.lang.String\nclass java.lang.Object";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>unit-summary-1a-1-1-1-6</id>
      <title>Unit Summary 1a (1.1-1.6)</title>
      <question>
        <label>Exercise 1.16.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_ch3_var1">
                <span data-subcomponent="question">
                  <div class="para" id="ch3_var1-1-1">Drag the definition from the left and drop it on the correct concept on the right.  Click the "Check Me" button to see if you are correct</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="ch3_var1-2-1">Review the summaries above.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_ch3_var1_drag1">Specifying the type and name for a variable</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch3_var1_drag1">declaring a variable</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch3_var1_drag2">A whole number</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch3_var1_drag2">integer</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch3_var1_drag3">A name associated with a memory location.</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch3_var1_drag3">variable</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch3_var1_drag4">An expression that is either true or false</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch3_var1_drag4">Boolean</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.16.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_ch3_var2">
                <span data-subcomponent="question">
                  <div class="para" id="ch3_var2-1-1">Drag the definition from the left and drop it on the correct concept on the right.  Click the "Check Me" button to see if you are correct.</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="ch3_var2-2-1">Review the summaries above.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_ch3_var2_drag1">Setting the value of a variable the first time</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch3_var2_drag1">initialize</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch3_var2_drag2">An operator that returns the remainder</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch3_var2_drag2">mod</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch3_var2_drag3">a type used to represent decimal values</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch3_var2_drag3">double</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch3_var2_drag4">changing the type of a variable</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch3_var2_drag4">casting</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-5-18</id>
      <title>Mixed Up Code Practice 1.1-1.6</title>
      <question optional="yes">
        <label>Exercise 1.17.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch4ex1muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch4ex1muc-1-1">The following program segment should print Maria’s first name on one line and her last name on the next line.  But, the blocks have been mixed up and include an extra block that isn’t needed in the solution.  Drag the blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">String firstName = "Maria";
String lastName = "Hernandez";
---
System.out.println(firstName);
---
System.out.println(lastName);
---
System.out.printlln(firstname);  #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.17.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch4ex2muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch4ex2muc-1-1">The following program segment should print the words to a famous poem. But the blocks have been mixed up.  Drag the blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">System.out.println("Roses are red");
---
System.out.println("Violets are blue");
---
System.out.println("Sugar is sweet");
---
System.out.println("And so are you");</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.17.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch4ex3muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch4ex3muc-1-1">The main method in the following class should print Marcus’s name on one line and his favorite color on the next line. But, the blocks have been mixed up and include an extra block that isn’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Test1
{
---
    public static void main(String[] args)
    {
---
        String name = "Marcus";
        String color = "Blue";
---
        System.out.println(name);
---
        System.out.println(color);
---
    } // end main method
---
} // end of class
---
        System.out.println(Name);  #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.17.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch3ex1muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch3ex1muc-1-1">The following program segment should figure out the cost for each shirt if they are buy 2 and get the third free and they are originally $45 each.  But, the blocks have been mixed up.  Drag the blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">double price = 45;
---
double totalCost = price * 2;
---
double pricePerShirt = totalCost / 3;
---
System.out.println(pricePerShirt);</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.17.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch3ex2muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch3ex2muc-1-1">The following program segment should figure out the cost per person for a dinner including the tip. But the blocks have been mixed up and may include an extra block that isn’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">double bill = 89.23;
---
double tip = bill * 0.20;
---
double total = bill + tip;
---
int numPeople = 3;
double perPersonCost = total / numPeople;
---
System.out.println(perPersonCost);
---
System.out.println(perpersoncost);  #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.17.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch3ex4muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch3ex4muc-1-1">The main method in the following class should print the number of seconds in 5 days. But, the blocks have been mixed up and may include an extra block that isn’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Test1
{
---
    public static void main(String[] args)
    {
---
        int sInMin = 60;
        int mInHour = 60;
        int hInDay = 24;
---
        int sInDay = sInMin * mInHour * hInDay;
---
        int total = sInDay * 5;
---
        System.out.println(total);
---
    } // end main method
---
} // end class
---
public Class Test1
{  #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.17.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch3ex5muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch3ex5muc-1-1">The main method in the following class should calculate the number of months it would take you to save 500 if you make 50 a week. But, the blocks have been mixed up and may include an extra block that isn’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Test1
{
---
    public static void main(String[] args)
    {
---
        double weeklyRate = 50;
        double goal = 500;
---
        double numWeeks = goal / weeklyRate;
---
        double numMonths = numWeeks / 4;
---
        System.out.println(numMonths);
---
    } // end main method
} // end class
---
    public void main(String[] args)
    {  #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.17.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch4ex5muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch4ex5muc-1-1">The main method in the following class should print the name on one line followed by the age on the next line. But, the blocks have been mixed up and include an extra block that isn’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Test1
{
---
    public static void main(String[] args)
    {
---
        String name = "Layla";
        String age = "16";
---
        System.out.println("Your name is " + name);
---
        System.out.println("Your age is " + age);
---
    } // end main method
---
} // end class
---
        System.out.println("Your age is " age);  #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.17.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch4ex6muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch4ex6muc-1-1">The main method in the following class should print the name on one line and the favorite food on the next line. But, the blocks have been mixed up and include an extra block that isn’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Test1
{
---
    public static void main(String[] args)
---
    {
---
        String name = "Julian";
        String food = "chicken wings";
---
        System.out.println("Your name is " + name);
---
        System.out.println("Your favorite food is " + food);
---
    }
---
}
---
        System.println("Your name is " + name);  #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.17.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch3ex6muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch3ex6muc-1-1">The main method in the following class should calculate the cost of a trip that is 200 miles when the price of gas is 2.20 and the miles per gallon is 42. But, the blocks have been mixed up and may include an extra block that isn’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Test1
{
---
    public static void main(String[] args)
---
    {
---
        int miles = 200;
        double price = 2.20;
        int mpg = 42;
---
        double numGalls = (double) miles / mpg;
---
        double totalCost = numGalls * price;
---
        System.out.println(totalCost);
---
    }
---
}
---
        System.println(totalCost);  #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.17.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch3ex7muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch3ex7muc-1-1">The main method in the following class should calculate how many miles you can go on half a tank of gas if the miles per gallon is 26 and your tank holds 15 gallons. But, the blocks have been mixed up and may include an extra block that isn’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Test1
{
---
    public static void main(String[] args)
---
    {
---
        int mpg = 26;
        int tankHolds = 15;
---
        double numGalls = (double) tankHolds / 2;
---
        double miles = numGalls * mpg;
---
        System.out.println(miles);
---
    }
---
}
---
    public static main(String[] args)  #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.17.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch3ex8muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch3ex8muc-1-1">The main method in the following class should calculate how many chicken wings you can buy with $3.50 if the wings are $.60 each. But, the blocks have been mixed up and may include an extra block that isn’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Test1
{
---
    public static void main(String[] args)
---
    {
---
        double cost = 0.6;
        double money = 3.5;
---
        int numWings = (int) (money / cost);
---
        System.out.println(numWings);
---
    }
---
}
---
        int cost = 0.6;
        int money = 3.5;  #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.17.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch3ex9muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch3ex9muc-1-1">The main method in the following class should calculate how much you will have to pay for an item that is 60% off the original price of $52.99. But, the blocks have been mixed up and may include an extra block that isn’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Test1
{
---
    public static void main(String[] args)
---
    {
---
        double price = 52.99;
        double discount = 0.6;
---
        double savings = price * discount;
---
        double finalPrice = price - savings;
---
        System.out.println(finalPrice);
---
    }
---
}
---
        int price = 52.99;
        int discount = 0.6;  #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.17.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch3ex10muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch3ex10muc-1-1">The main method in the following class should calculate how much the per item costs is for shorts that are buy 2 and get the third free.  The shorts are $39.99 each. But, the blocks have been mixed up and may include an extra block that isn’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Test1
{
---
    public static void main(String[] args)
---
    {
---
        double price = 39.99;
---
        double priceForTwo = price * 2;
---
        double itemPrice = priceForTwo / 3;
---
        System.out.println(itemPrice);
---
    }
---
}
---
        double priceForTwo = price * 2  #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>toggle-mixed-up-or-write-code-practice-1-1-1-6</id>
      <title>Toggle Mixed Up or Write Code Practice 1.1-1.6</title>
    </subchapter>
    <subchapter>
      <id>csawesome2-5-20</id>
      <title>Coding Practice 1a (1.1-1.6)</title>
      <question optional="yes">
        <label>Exercise 1.19.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-5-20-2-1-1-1">The following code should print “Mary’s favorite color is blue”.  However, the code has errors.  Fix the code so that it compiles and runs correctly.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String name = Mary";
        String color = "blue"
        System.out.println(Name + "'s favorite color is " + color);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Mary's favorite color is blue";
        boolean passed =
                getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.19.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch4Ex2a">
                <div class="ac_question" id="csawesome2_2_ch4Ex2a_question">
                  <div class="para" id="ch4Ex2a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch4Ex2a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String name = "Mary";
        String color = "blue";
        System.out.println(name + "'s favorite color is " + color);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.19.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-5-20-2-2-1-1">The following code should print “Gabby’s favorite sport is soccer”.  However, the code has errors.  Fix the code so that it compiles and runs correctly.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String name "Gabby";
        String sport = "soccer;
        System.out.println(Name +
                   "'s favorite sport is " sport);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Gabby's favorite sport is soccer";
        boolean passed =
                getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.19.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-5-20-2-3-1-1">The following code should print <code class="code-inline tex2jax_ignore">Your name is Carly and your favorite color is red</code>.  Finish the code so that it prints the output correctly using the variables provided.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String name = "Carly";
        String color = "red";
        System.out.println();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Your name is Carly and your favorite color is red";
        boolean passed =
                getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.19.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch4Ex5a">
                <div class="ac_question" id="csawesome2_2_ch4Ex5a_question">
                  <div class="para" id="ch4Ex5a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch4Ex5a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String name = "Carly";
        String color = "red";
        System.out.println(
                "Your name is "
                        + name
                        + " and your favorite color is "
                        + color);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.19.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-5-20-2-5-1-1">Write the code to print <code class="code-inline tex2jax_ignore">Julian's favorite color is green.  His favorite food is pizza.</code> using the variables provided.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String name = "Julian";
        String color = "green";
        String food = "pizza";
        System.out.println();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "Julian's favorite color is green. His favorite food is"
                    + " pizza.";
        boolean passed =
                getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.19.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch4Ex7a">
                <div class="ac_question" id="csawesome2_2_ch4Ex7a_question">
                  <div class="para" id="ch4Ex7a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch4Ex7a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String name = "Julian";
        String color = "green";
        String food = "pizza";
        System.out.println(
                name
                        + "'s favorite color is "
                        + color
                        + ".  His favorite food is "
                        + food
                        + ".");
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.19.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-5-20-2-6-1-1">Finish the code below to print your favorite animal and food.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String animal =
        String food =
        System.out.println();

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testPrintStringsA() throws IOException
    {
        String target1 = "+animal";
        // boolean passed1 = checkCodeContains("print animal string",
        // target1);
        String code =
                getCodeWithoutComments()
                        .replaceAll(" ", "")
                        .replaceAll("\n", "");
        boolean passed1 = code.contains(target1);

        getResults("" + true, "" + passed1, "Code prints animal variable");

        assertTrue(passed1);
    }

    @Test
    public void testPrintStringsB() throws IOException
    {
        String target1 = "+food";
        // boolean passed1 = checkCodeContains("print food string", target1);
        String code =
                getCodeWithoutComments()
                        .replaceAll(" ", "")
                        .replaceAll("\n", "");
        boolean passed1 = code.contains(target1);

        getResults("" + true, "" + passed1, "Code prints food variable");
        assertTrue(passed1);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.19.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch4Ex8a">
                <div class="ac_question" id="csawesome2_2_ch4Ex8a_question">
                  <div class="para" id="ch4Ex8a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch4Ex8a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String animal = "horse";
        String food = "chicken";
        System.out.println(
                "My favorite animal is a "
                        + animal
                        + ".  "
                        + "My favorite food is "
                        + food
                        + ".");
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.19.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-5-20-2-8-1-1">The following code should calculate the cost of a trip that is 300 miles if gas is $2.50 a gallon and your car gets 30 miles per gallon.  However, the code has syntax errors, like missing semicolons, wrong case on names, or unmatched <code class="code-inline tex2jax_ignore">"</code> or <code class="code-inline tex2jax_ignore">(</code>.  Fix the code so that it compiles and runs correctly.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int tripMiles = 300
        Double price = 2.50;
        int milesPerGallon = 30;
        double numberOfGallons = tripmiles / milesPerGallon;
        double totalCost = numberOfGallons * price;
        System.out.println(totalCost);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "25.0";
        boolean passed =
                getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.19.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch3Ex1a">
                <div class="ac_question" id="csawesome2_2_ch3Ex1a_question">
                  <div class="para" id="ch3Ex1a-1-1">This is the answer for the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch3Ex1a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int tripMiles = 300;
        double price = 2.50;
        int milesPerGallon = 30;
        double numberOfGallons = tripMiles / milesPerGallon;
        double totalCost = numberOfGallons * price;
        System.out.println(totalCost);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.19.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-5-20-2-9-1-1">The following code should calculate the body mass index (BMI) for someone who is 5 feet tall and weighs 110 pounds.  However, the code has syntax errors, like missing semicolons, wrong case on names, or unmatched <code class="code-inline tex2jax_ignore">"</code> or <code class="code-inline tex2jax_ignore">(</code>. Fix the code so that it compiles and runs correctly.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        double Height = 60;    // in inches (60 inches is 5 feet)
        double weight  110;    // in pounds
        double heightSquared = height  height;
        double bodyMassIndex = weight / heightSquared
        double bodyMassIndexMetric = bodyMassIndex * 703;
        System.out.println(bodyMassIndexMetric);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "21.480555555555554\n";
        boolean passed =
                getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.19.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch3Ex2a">
                <div class="ac_question" id="csawesome2_2_ch3Ex2a_question">
                  <div class="para" id="ch3Ex2a-1-1">This is the answer for the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch3Ex2a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        double height = 60; // in inches (60 inches is 5 feet)
        double weight = 110; // in pounds
        double heightSquared = height * height;
        double bodyMassIndex = weight / heightSquared;
        double bodyMassIndexMetric = bodyMassIndex * 703;
        System.out.println(bodyMassIndexMetric);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.19.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-5-20-2-10-1-1">The following code should calculate the number of miles that you can drive when you have $8.00 and the price of gas is 2.35 and the car gets 40 miles per gallon.  However, the code has errors.  Fix the code so that it compiles and runs correctly.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        gallonPrice = 2.35;
        40 = double milesPerGallon;
        double totalFunds = 8.0;
        double numGallons = totalFunds gallonPrice;
        double numMiles = numGallons * milesPerGallon;
        System.out.println(numMiles;
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "136.17021276595744\n";
        boolean passed =
                getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.19.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch3Ex3a">
                <div class="ac_question" id="csawesome2_2_ch3Ex3a_question">
                  <div class="para" id="ch3Ex3a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch3Ex3a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        double gallonPrice = 2.35;
        double milesPerGallon = 40;
        double totalFunds = 8.0;
        double numGallons = totalFunds / gallonPrice;
        double distance = numGallons * milesPerGallon;
        System.out.println(distance);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.19.18 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-5-20-2-11-1-1">The following code should calculate the cost of an item that is on clearance (70% off) when you also have a coupon for an additional 20% off the clearance price.  However, the code has errors.  Fix the code so that it compiles and runs correctly.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int originalPrice = 68.00;
        int clearancePrice = originalPrice * 0.3;
        int finalPrice = clearancePrice * 0.8;
        System.out.println(finalPrice);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "16.32\n";
        boolean passed =
                getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.19.19 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch3Ex4a">
                <div class="ac_question" id="csawesome2_2_ch3Ex4a_question">
                  <div class="para" id="ch3Ex4a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch3Ex4a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        double originalPrice = 68.00;
        double clearancePrice = originalPrice * 0.3;
        double finalPrice = clearancePrice * 0.8;
        System.out.println(finalPrice);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.19.20 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-5-20-2-12-1-1">The following code should calculate the number of whole days in 320893 seconds. However, the code has errors.  Fix the code so that it compiles and runs correctly.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int numSecs = 320893;
        int numHours = numSecs   3600;
        int numDays = numHours   24;
        System.out.println numDays);

}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "3\n";
        boolean passed =
                getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.19.21 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch3Ex5a">
                <div class="ac_question" id="csawesome2_2_ch3Ex5a_question">
                  <div class="para" id="ch3Ex5a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch3Ex5a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int numSecs = 320893;
        int numHours = numSecs / 3600;
        int numDays = numHours / 24;
        System.out.println(numDays);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.19.22 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-5-20-2-13-1-1">Complete the code below to calculate and print how many months it will take to save $200 if you earn $20 a week.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
      double goal =
      double weeklyRate =
      double numWeeks =
      double numMonths =
      System.out.println(numMonths);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

// import java.util.regex.*;
/* Do NOT change Main or CodeTestHelper.java. */
public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "2.5\n";
        boolean passed =
                getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testFormulaNumMonths() throws IOException
    {
        String target = "double numMonths = numWeeks / 4;";
        boolean passed = checkCodeContains("formula for numMonths", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.19.23 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch3Ex6a">
                <div class="ac_question" id="csawesome2_2_ch3Ex6a_question">
                  <div class="para" id="ch3Ex6a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch3Ex6a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        double weeklyRate = 20;
        double goal = 200;
        double numWeeks = goal / weeklyRate;
        double numMonths = numWeeks / 4;
        System.out.println(numMonths);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.19.24 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-5-20-2-14-1-1">Write the code to calculate the number of miles you can drive if you have a 10 gallon gas tank and are down to a quarter of a tank of gas and your car gets 32 miles per gallon.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        // Your code should declare the variables
        //  numGallons, milesPerGallon, and miles, and
        // calculate numGallons (the number of gallons left in the tank given the values above),
        // initialize milesPerGallon (the miles per gallon given above for this car),
        // calculate miles (the number of miles you can drive calculated from the other variables)
        // and print out miles.

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "80.0\n";
        boolean passed =
                getResults(expect, output, "Expected output from main (use doubles!)");
        assertTrue(passed);
    }

    @Test
    public void testFormulaMiles() throws IOException
    {
        String target1 = removeSpaces("numGallons * milesPerGallon");
        String target2 = removeSpaces("milesPerGallon * numGallons");

        String code = removeSpaces(getCode());
        code = code.replaceAll("\\(", "").replaceAll("\\)", "");

        boolean passed = code.contains(target1) || code.contains(target2);
        getResults(
                "true",
                "" + passed,
                "Formula for miles using the variables numGallons and milesPerGallon",
                passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.19.25 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch3Ex7a">
                <div class="ac_question" id="csawesome2_2_ch3Ex7a_question">
                  <div class="para" id="ch3Ex7a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch3Ex7a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        double numGallons = 10.0 / 4;
        double milesPerGallon = 32;
        double miles = numGallons * milesPerGallon;
        System.out.println(miles);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.19.26 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-5-20-2-15-1-1">Write the code to calculate the number of seconds in 3 days.  Remember that there are 60 seconds in a minute and 60 minutes in an hour and 24 hours in a day.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        // Your code should declare the variables
        // secondsInDay and secondsInThreeDays and
        // initialize or calculate secondsInDay
        // and calculate secondsInThreeDays using secondsInDay
        // and print out secondsInThreeDays.

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "259200\n";
        boolean passed =
                getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testFormulaMiles() throws IOException
    {
        String target1 =
                removeSpaces("secondsInDay * 3;");
        String target2 =
                removeSpaces("3 * secondsInDay;");
        String code = removeSpaces(getCode());
        boolean passed1 = code.contains(target1);
        boolean passed2 = code.contains(target2);

        boolean passed = passed1 || passed2;
        getResults(
                "true",
                "" + passed,
                "formula for secondsInThreeDays using the variable secondsInDay",
                passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.19.27 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch3Ex8a">
                <div class="ac_question" id="csawesome2_2_ch3Ex8a_question">
                  <div class="para" id="ch3Ex8a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch3Ex8a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int secondsInMinute = 60;
        int minutesInHour = 60;
        int hoursInDay = 24;
        int secondsInDay = secondsInMinute * minutesInHour * hoursInDay;
        int secondsInThreeDays = secondsInDay * 3;
        System.out.println(secondsInThreeDays);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.19.28 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-5-20-2-16-1-1">Write the code to print the number of chicken wings you can buy if you have $4.50 and they cost $0.75 each.  Remember that you can’t buy part of a wing.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        // Your code should use the variables
        // money, pricePerWing, numWings, and
        // initialize money and pricePerWing using the values above,
        // and calculate numWings using money and pricePerWing and type casting to int
        // and print out numWings

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "6\n";
        boolean passed =
                getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testFormulaWings() throws IOException
    {
        // codeContains will remove spaces
        String target = "numWings = (int)(money / pricePerWing)";
        boolean passed =
                checkCodeContains(
                        "formula for numWings using money and pricePerWing,"
                            + " and type casting to int with correct parentheses",
                        target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.19.29 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch3Ex10a">
                <div class="ac_question" id="csawesome2_2_ch3Ex10a_question">
                  <div class="para" id="ch3Ex10a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch3Ex10a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        double money = 4.5;
        double pricePerWing = 0.75;
        int numWings = (int) (money / pricePerWing);
        System.out.println(numWings);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-5-21</id>
      <title>Multiple Choice Exercises for Unit 1a (1.1-1.6)</title>
      <question optional="yes">
        <label>Exercise 1.20.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qve_1" data-multipleanswers="false"><div class="para" id="qve_1-1-1">1-20-1: What does the following code print?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">System.out.println(2 % 3);
</code></pre></div><li data-component="answer" id="csawesome2_2_qve_1_opt_a" data-correct=""><div class="para" id="qve_1-2-1-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_qve_1_opt_a"><div class="para" id="qve_1-2-1-2-1">Whenever the first number is smaller than the second, the remainder is the first number.  Remember that % is the remainder and 3 goes into 2 0 times with a remainder of 2.</div></li><li data-component="answer" id="csawesome2_2_qve_1_opt_b"><div class="para" id="qve_1-2-2-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_qve_1_opt_b"><div class="para" id="qve_1-2-2-2-1">This is the number of times that 3 goes into 2 but the % operator gives you the remainder.</div></li><li data-component="answer" id="csawesome2_2_qve_1_opt_c"><div class="para" id="qve_1-2-3-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_qve_1_opt_c"><div class="para" id="qve_1-2-3-2-1">Try it.  Remember that % gives you the remainder after you divide the first number by the second one.</div></li><li data-component="answer" id="csawesome2_2_qve_1_opt_d"><div class="para" id="qve_1-2-4-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qve_1_opt_d"><div class="para" id="qve_1-2-4-2-1">This would be correct if it was 3 % 2 since 2 would go into 3 one time with a remainder of 1.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.20.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qve_2" data-multipleanswers="false"><div class="para" id="qve_2-1-1">1-20-2: What does the following code print?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">System.out.println(19 % 5);
</code></pre></div><li data-component="answer" id="csawesome2_2_qve_2_opt_a"><div class="para" id="qve_2-2-1-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_qve_2_opt_a"><div class="para" id="qve_2-2-1-2-1">This is the number of times that 5 goes into 19, but % is the remainder.</div></li><li data-component="answer" id="csawesome2_2_qve_2_opt_b"><div class="para" id="qve_2-2-2-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_qve_2_opt_b"><div class="para" id="qve_2-2-2-2-1">This would only be true if the first number was evenly divisible by the second number.</div></li><li data-component="answer" id="csawesome2_2_qve_2_opt_c" data-correct=""><div class="para" id="qve_2-2-3-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_qve_2_opt_c"><div class="para" id="qve_2-2-3-2-1">5 goes into 19 3 times (15) with a remainder of 4 (19-15=4)</div></li><li data-component="answer" id="csawesome2_2_qve_2_opt_d"><div class="para" id="qve_2-2-4-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qve_2_opt_d"><div class="para" id="qve_2-2-4-2-1">This would be correct if it was 19 % 2, but here we are dividing by 5.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.20.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qve_3" data-multipleanswers="false"><div class="para" id="qve_3-1-1">1-20-3: What does the following code print?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">System.out.println(1 / 3);
</code></pre></div><li data-component="answer" id="csawesome2_2_qve_3_opt_a"><div class="para" id="qve_3-2-1-1-1">0.3333333333333333</div></li><li data-component="feedback" id="csawesome2_2_qve_3_opt_a"><div class="para" id="qve_3-2-1-2-1">This would be correct if it was 1.0 / 3 or 1 / 3.0.</div></li><li data-component="answer" id="csawesome2_2_qve_3_opt_b" data-correct=""><div class="para" id="qve_3-2-2-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_qve_3_opt_b"><div class="para" id="qve_3-2-2-2-1">When two integers are divided the results will also be integer and the fractional part is thrown away.</div></li><li data-component="answer" id="csawesome2_2_qve_3_opt_c"><div class="para" id="qve_3-2-3-1-1">It will give a run-time error</div></li><li data-component="feedback" id="csawesome2_2_qve_3_opt_c"><div class="para" id="qve_3-2-3-2-1">You would get a run-time error if it was 1 / 0, because you can not divide by zero.</div></li><li data-component="answer" id="csawesome2_2_qve_3_opt_d"><div class="para" id="qve_3-2-4-1-1">0.3</div></li><li data-component="feedback" id="csawesome2_2_qve_3_opt_d"><div class="para" id="qve_3-2-4-2-1">Try it. Is this what you get?</div></li><li data-component="answer" id="csawesome2_2_qve_3_opt_e"><div class="para" id="qve_3-2-5-1-1">It will give a compile-time error</div></li><li data-component="feedback" id="csawesome2_2_qve_3_opt_e"><div class="para" id="qve_3-2-5-2-1">Integer division is allowed in Java.  It gives an integer result.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.20.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qve_4" data-multipleanswers="false"><div class="para" id="qve_4-1-1">1-20-4: What does the following code print?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">System.out.println(2 + 3 * 5 - 1);
</code></pre></div><li data-component="answer" id="csawesome2_2_qve_4_opt_a"><div class="para" id="qve_4-2-1-1-1">24</div></li><li data-component="feedback" id="csawesome2_2_qve_4_opt_a"><div class="para" id="qve_4-2-1-2-1">This would be true if it was System.out.println(((2 + 3) * 5) - 1), but without the parentheses the multiplication is done first.</div></li><li data-component="answer" id="csawesome2_2_qve_4_opt_b"><div class="para" id="qve_4-2-2-1-1">14</div></li><li data-component="feedback" id="csawesome2_2_qve_4_opt_b"><div class="para" id="qve_4-2-2-2-1">This would be true if it was System.out.println(2 + (3 * (5 - 1))), but without the parentheses the multiplication is done first and the addition and subtraction are handled from left to right.</div></li><li data-component="answer" id="csawesome2_2_qve_4_opt_c"><div class="para" id="qve_4-2-3-1-1">This will give a compile time error.</div></li><li data-component="feedback" id="csawesome2_2_qve_4_opt_c"><div class="para" id="qve_4-2-3-2-1">This will compile and run.  Try it in DrJava.  Look up operator precedence in Java.</div></li><li data-component="answer" id="csawesome2_2_qve_4_opt_d" data-correct=""><div class="para" id="qve_4-2-4-1-1">16</div></li><li data-component="feedback" id="csawesome2_2_qve_4_opt_d"><div class="para" id="qve_4-2-4-2-1">The multiplication is done first (3 * 5 = 15) and then the addition (2 + 15 = 17) and finally the subtraction (17 - 1 = 16).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.20.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qve_5" data-multipleanswers="false"><div class="para" id="qve_5-1-1">1-20-5: Given the following code segment, what is the value of b when it finishes executing?</div> <blockquote class="blockquote" id="qve_5-1-2"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">double a = 9.6982;
int b = 12;
b = (int) a;
</code></pre></div></blockquote><li data-component="answer" id="csawesome2_2_qve_5_opt_a"><div class="para" id="qve_5-2-1-1-1">9.6982</div></li><li data-component="feedback" id="csawesome2_2_qve_5_opt_a"><div class="para" id="qve_5-2-1-2-1">This would be true if it was b = a.  What does the (int) do?</div></li><li data-component="answer" id="csawesome2_2_qve_5_opt_b"><div class="para" id="qve_5-2-2-1-1">12</div></li><li data-component="feedback" id="csawesome2_2_qve_5_opt_b"><div class="para" id="qve_5-2-2-2-1">This is the initial value of b, but then b is assigned to be the result of casting the value in a to an integer. Casting to an integer from a double will truncate (throw away) the digits after the decimal.</div></li><li data-component="answer" id="csawesome2_2_qve_5_opt_c"><div class="para" id="qve_5-2-3-1-1">10</div></li><li data-component="feedback" id="csawesome2_2_qve_5_opt_c"><div class="para" id="qve_5-2-3-2-1">Java does not round when converting from a double to an integer.</div></li><li data-component="answer" id="csawesome2_2_qve_5_opt_d" data-correct=""><div class="para" id="qve_5-2-4-1-1">9</div></li><li data-component="feedback" id="csawesome2_2_qve_5_opt_d"><div class="para" id="qve_5-2-4-2-1">When a double is converted into an integer in Java, it truncates (throws away) the digits after the decimal.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.20.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qve_new7" data-multipleanswers="false"><div class="para" id="qve_new7-1-1">1-20-6: What does the following code do when it is executed?</div> <blockquote class="blockquote" id="qve_new7-1-2"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">System.out.println(5 / 0);
</code></pre></div></blockquote><li data-component="answer" id="csawesome2_2_qve_new7_opt_a"><div class="para" id="qve_new7-2-1-1-1">It will print 0</div></li><li data-component="feedback" id="csawesome2_2_qve_new7_opt_a"><div class="para" id="qve_new7-2-1-2-1">This would be true if it was System.out.println(0 / 5)</div></li><li data-component="answer" id="csawesome2_2_qve_new7_opt_b" data-correct=""><div class="para" id="qve_new7-2-2-1-1">It will give a run-time error</div></li><li data-component="feedback" id="csawesome2_2_qve_new7_opt_b"><div class="para" id="qve_new7-2-2-2-1">You can’t divide by 0 so this cause a run-time error.</div></li><li data-component="answer" id="csawesome2_2_qve_new7_opt_c"><div class="para" id="qve_new7-2-3-1-1">It will give a compile-time error (won’t compile)</div></li><li data-component="feedback" id="csawesome2_2_qve_new7_opt_c"><div class="para" id="qve_new7-2-3-2-1">You might think that this would be caught at compile time, but it isn’t.</div></li><li data-component="answer" id="csawesome2_2_qve_new7_opt_d"><div class="para" id="qve_new7-2-4-1-1">It will print 5</div></li><li data-component="feedback" id="csawesome2_2_qve_new7_opt_d"><div class="para" id="qve_new7-2-4-2-1">This would be true if it was System.out.println(5 / 1)</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.20.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qve_new9" data-multipleanswers="false"><div class="para" id="qve_new9-1-1">1-20-7: What will the following code print?</div> <blockquote class="blockquote" id="qve_new9-1-2"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">System.out.println(1.0 / 3);
</code></pre></div></blockquote><li data-component="answer" id="csawesome2_2_qve_new9_opt_a"><div class="para" id="qve_new9-2-1-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_qve_new9_opt_a"><div class="para" id="qve_new9-2-1-2-1">This would be true if it was (1 / 3).</div></li><li data-component="answer" id="csawesome2_2_qve_new9_opt_b"><div class="para" id="qve_new9-2-2-1-1">.3</div></li><li data-component="feedback" id="csawesome2_2_qve_new9_opt_b"><div class="para" id="qve_new9-2-2-2-1">It will give you more than just one digit after the decimal sign.</div></li><li data-component="answer" id="csawesome2_2_qve_new9_opt_c" data-correct=""><div class="para" id="qve_new9-2-3-1-1">0.3333333333333333</div></li><li data-component="feedback" id="csawesome2_2_qve_new9_opt_c"><div class="para" id="qve_new9-2-3-2-1">The computer can not represent an infinite number of 3’s after the decimal point so it only keeps 14 to 15 significant digits.</div></li><li data-component="answer" id="csawesome2_2_qve_new9_opt_d"><div class="para" id="qve_new9-2-4-1-1">0.3 with an infinite number of 3’s following the decimal point</div></li><li data-component="feedback" id="csawesome2_2_qve_new9_opt_d"><div class="para" id="qve_new9-2-4-2-1">The computer can not represent an infinite number of 3’s after the decimal point.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.20.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qve_new10" data-multipleanswers="false"><div class="para" id="qve_new10-1-1">1-20-8: What are the values of x, y, and z after the following code executes?</div> <blockquote class="blockquote" id="qve_new10-1-2"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int x = 3;
int y = x;
int z = x * y;
x++;
</code></pre></div></blockquote><li data-component="answer" id="csawesome2_2_qve_new10_opt_a"><div class="para" id="qve_new10-2-1-1-1">x = 3, y = 3, z = 9</div></li><li data-component="feedback" id="csawesome2_2_qve_new10_opt_a"><div class="para" id="qve_new10-2-1-2-1">This would be true if the x++ wasn’t there.</div></li><li data-component="answer" id="csawesome2_2_qve_new10_opt_b" data-correct=""><div class="para" id="qve_new10-2-2-1-1">x = 4, y = 3, z = 9</div></li><li data-component="feedback" id="csawesome2_2_qve_new10_opt_b"><div class="para" id="qve_new10-2-2-2-1">First x is set to 3, then y is also set to 3, and next z is set to 3 * 3 = 9.  Finally x is incremented to 4.</div></li><li data-component="answer" id="csawesome2_2_qve_new10_opt_c"><div class="para" id="qve_new10-2-3-1-1">x = 0, y = 3, z = 0</div></li><li data-component="feedback" id="csawesome2_2_qve_new10_opt_c"><div class="para" id="qve_new10-2-3-2-1">You might think that y = x means that y takes x’s value, but y is set to a copy of x’s value.</div></li><li data-component="answer" id="csawesome2_2_qve_new10_opt_d"><div class="para" id="qve_new10-2-4-1-1">x = 4, y = 4, z = 9</div></li><li data-component="feedback" id="csawesome2_2_qve_new10_opt_d"><div class="para" id="qve_new10-2-4-2-1">You might think that y = x means that if x is incremented that y will also be incremented, but y = x only sets y to a copy of x’s value and doesn’t keep them in sync.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>unit-summary-1b-1-7-1-15</id>
      <title>Unit Summary 1b (1.7-1.15)</title>
      <question>
        <label>Exercise 1.21.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_unit1b_vocab">
                <span data-subcomponent="question">
                  <div class="para" id="unit1b_vocab-1-1">Drag the definition from the left and drop it on the correct concept on the right.  Click the "Check Me" button to see if you are correct.</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="unit1b_vocab-2-1">Review the summaries above.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_unit1b_vocab_drag1">a specific instance of a class with defined attributes</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_unit1b_vocab_drag1">object</li>
                <li data-subcomponent="draggable" id="csawesome2_2_unit1b_vocab_drag2">defines a new data type with instance variables and methods</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_unit1b_vocab_drag2">class</li>
                <li data-subcomponent="draggable" id="csawesome2_2_unit1b_vocab_drag3">define the behaviors or functions for objects</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_unit1b_vocab_drag3">methods</li>
                <li data-subcomponent="draggable" id="csawesome2_2_unit1b_vocab_drag4">code that is used to create new objects and initialize the object’s attributes</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_unit1b_vocab_drag4">constructors</li>
                <li data-subcomponent="draggable" id="csawesome2_2_unit1b_vocab_drag5">the values or data passed to an object’s method</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_unit1b_vocab_drag5">parameters</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-5-23</id>
      <title>Mixed Up Code Practice 1b (1.7-1.15)</title>
      <question optional="yes">
        <label>Exercise 1.22.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch3ex3muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch3ex3muc-1-1">The main method in the following class should print a random number from 1 to 50. But, the blocks have been mixed up and may include an extra block that isn’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Test1
{
---
    public static void main(String[] args)
    {
---
        int num = (int)(Math.random() * 50) + 1;
---
        System.out.println(num);
---
    } // end main method
---
} // end of class
---
        int num = Math.random() * 50;  #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.22.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch4ex4muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch4ex4muc-1-1">The main method in the following class should print the first 2 characters of the message followed by the last 2 characters of the message. But, the blocks have been mixed up and include an extra block that isn’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Test1
{
---
    public static void main(String[] args)
    {
---
        String message = "I hope this works";
---
        String part1 = message.substring(0,2);
        String part2 = message.substring(message.length() - 2);
---
        System.out.println(part1 + part2);
---
    } // end main method
---
} // end class
---
        System.out.println(part1 * part2);  #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.22.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch4ex7muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch4ex7muc-1-1">The main method in the following class should print the initials in lowercase letters. But, the blocks have been mixed up and include an extra block that isn’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Test1
{
---
    public static void main(String[] args)
---
    {
---
        String first = "Gerald";
        String middle = "Foster";
        String last= "Jones";
---
        String initials = first.substring(0,1) +
                          middle.substring(0,1) +
                          last.substring(0,1);
---
        String lowerInitials = initials.toLowerCase();
---
        System.out.println(lowerInitials);
---
    }
---
}
---
        System.out.println(initials);  #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.22.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch4ex8muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch4ex8muc-1-1">The main method in the following class should print the message in all uppercase letters. But, the blocks have been mixed up and include an extra block that isn’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Test1
{
---
    public static void main(String[] args)
---
    {
---
        String message = "Don't Pokemon and drive!";
---
        String upperMessage = message.toUpperCase();
---
        System.out.println(upperMessage);
---
    }
---
}
---
       System.print(upperMessage);  #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.22.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch4ex9muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch4ex9muc-1-1">The main method in the following class should print the first 3 letters of message in uppercase letters. But, the blocks have been mixed up and include an extra block that isn’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Test1
{
---
    public static void main(String[] args)
---
    {
---
        String message = "Have a nice day!";
---
        String part = message.substring(0,3);
---
        String upper = part.toUpperCase();
---
        System.out.println(upper);
---
    }
---
}
---
        String part = message.substring(0,4);  #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.22.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch4ex10muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch4ex10muc-1-1">The main method in the following class should print the part of the message starting with the word “nice”.  But, the blocks have been mixed up and include an extra block that isn’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Test1
{
---
    public static void main(String[] args)
---
    {
---
        String message = "Have a nice day!";
---
        int pos = message.indexOf("nice");
---
        System.out.println(message.substring(pos));
---
    }
---
}
---
        int pos = message.indexof("nice");  #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>toggle-mixed-up-or-write-code-practice-1b-1-7-1-15</id>
      <title>Toggle Mixed Up or Write Code Practice 1b (1.7-1.15)</title>
    </subchapter>
    <subchapter>
      <id>csawesome2-5-25</id>
      <title>Coding Practice 1b (1.7-1.15)</title>
      <question optional="yes">
        <label>Exercise 1.24.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-5-25-5-1-1-1">Write the code to print a random number from 1 to 100.  You can use <code class="code-inline tex2jax_ignore">Math.random()</code> to get a value between 0 and not quite 1.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args) {}
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testCheckCodeContains1()
    {
        boolean passed = checkCodeContainsNoRegex("random number up to 100", "Math.random()*100");
        assertTrue(passed);
    }

    @Test
    public void testCheckCodeContains2()
    {
        boolean passed = checkCodeContainsNoRegex("random number starting at 1", "+1");
        assertTrue(passed);
    }

    @Test
    public void testCheckCodeContains3()
    {
        boolean passed = checkCodeContains("casting to int", "(int)");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.24.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch3Ex9a">
                <div class="ac_question" id="csawesome2_2_ch3Ex9a_question">
                  <div class="para" id="ch3Ex9a-1-1">Answer: This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch3Ex9a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        System.out.println(((int) (Math.random() * 100)) + 1);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.24.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-5-25-5-2-1-1">The following code should get the first letter of the first name, middle name, and last name and append (concatenate) them together and then return them all in lowercase.  However, the code has errors.  Fix the code so that it compiles and runs correctly.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String firstName = "Sofia';
        String middleName = "Maria";
        String lastName  "Hernandez";
        String initials = firstname.substring(0,1) +
                          middleName.subString(0,1) +
                          lastName.substring(0,1);
        System.out.println(initials.toLowerCase();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "smh";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testCodeContains()
    {
        String target = ".substring(0,1)";
        boolean passed = checkCodeContains("substring method", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.24.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch4Ex1a">
                <div class="ac_question" id="csawesome2_2_ch4Ex1a_question">
                  <div class="para" id="ch4Ex1a-1-1">Answer: This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch4Ex1a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String firstName = "Sofia";
        String middleName = "Maria";
        String lastName = "Hernandez";
        String initials =
                firstName.substring(0, 1)
                        + middleName.substring(0, 1)
                        + lastName.substring(0, 1);
        System.out.println(initials.toLowerCase());
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.24.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-5-25-5-3-1-1">The following code should print the first 3 letters of the string <code class="code-inline tex2jax_ignore">message</code> all in lowercase letters. However, the code has errors.  Fix the errors so that the code runs as intended.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String message = "Meet me by the bridge":
        String part = message.substring(1,3);
        String lower = message.toLowerCase();
        System.println(lower);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "mee";
        boolean passed = output.equals(expect);
        passed = getResults(expect, output, "Expected output from main", passed);
        assertTrue(passed);
    }

    @Test
    public void testCodeContains()
    {
        String target = ".substring(0,3)";
        boolean passed = checkCodeContains("substring method ", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.24.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch4Ex4a">
                <div class="ac_question" id="csawesome2_2_ch4Ex4a_question">
                  <div class="para" id="ch4Ex4a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch4Ex4a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String message = "Meet me by the bridge";
        String part = message.substring(0, 3);
        String lower = part.toLowerCase();
        System.out.println(lower);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.24.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-5-25-5-4-1-1">The following code starts with <code class="code-inline tex2jax_ignore">String name1 = ALEX;</code> and should print <code class="code-inline tex2jax_ignore">Alex</code>.  Use the <code class="code-inline tex2jax_ignore">toLowerCase</code> and <code class="code-inline tex2jax_ignore">substring</code> methods to do this task.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String name1 = "ALEX";

        System.out.println(name1);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Alex";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testCodeContains()
    {
        String target = ".substring(";
        boolean passed = checkCodeContains("substring method", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.24.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch4Ex10a">
                <div class="ac_question" id="csawesome2_2_ch4Ex10a_question">
                  <div class="para" id="ch4Ex10a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch4Ex10a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String name1 = "ALEX";
        String nameLower = name1.toLowerCase();
        String finalName = name1.substring(0, 1) + nameLower.substring(1);
        System.out.println(finalName);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.24.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-5-25-5-5-1-1">The following code should remove the word “very ” (and following space) from the message and print the new message.  You can use <code class="code-inline tex2jax_ignore">indexOf</code> to find the position of a substring in your string.  You can use <code class="code-inline tex2jax_ignore">substring</code> to create a new string removing the word.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String message = "I am very happy!";
        String target = "very ";
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "I am happy!";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testCodeContains()
    {
        String target = ".substring(";
        boolean passed = checkCodeContains("substring method", target);
        assertTrue(passed);
    }

    @Test
    public void testCodeContains2()
    {
        String target = ".indexOf(";
        boolean passed = checkCodeContains("indexOf method", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.24.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch4Ex11a">
                <div class="ac_question" id="csawesome2_2_ch4Ex11a_question">
                  <div class="para" id="ch4Ex11a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch4Ex11a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String message = "I am very happy!";
        String target = "very ";
        int pos = message.indexOf(target);
        String newMessage =
                message.substring(0, pos)
                        + message.substring(pos + target.length());
        System.out.println(newMessage);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.24.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-5-25-5-6-1-1">The following code should replace <code class="code-inline tex2jax_ignore">lol</code> in the message with <code class="code-inline tex2jax_ignore">laugh out loud</code> and print the new message using indexOf and substring.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String message = "That was great - lol.";
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "That was great - laugh out loud";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testCodeContains()
    {
        String target = ".substring(";
        boolean passed = checkCodeContains("substring method", target);
        assertTrue(passed);
    }

    @Test
    public void testCodeContains2()
    {
        String target = ".indexOf(";
        boolean passed = checkCodeContains("indexOf method", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.24.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch4Ex12a">
                <div class="ac_question" id="csawesome2_2_ch4Ex12a_question">
                  <div class="para" id="ch4Ex12a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch4Ex12a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String message = "That was great - lol.";
        String target = "lol";
        int pos = message.indexOf(target);
        String newMessage =
                message.substring(0, pos)
                        + "laugh out loud"
                        + message.substring(pos + target.length());
        System.out.println(newMessage);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.24.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_Turtle-eoc-triangle-ac">
                <div class="ac_question" id="csawesome2_2_Turtle-eoc-triangle-ac_question">
                  <div class="para" id="Turtle-eoc-triangle-ac-1-1">Finish the code below to have <code class="code-inline tex2jax_ignore">t1</code> draw a triangle where all of the sides are length 50.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_Turtle-eoc-triangle-ac_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.util.*;

public class TurtleTest
{
    public static void main(String[] args)
    {
        World habitat = new World(300, 300);
        Turtle t1 = new Turtle(habitat);

        habitat.show(true);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.24.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_Turtle-eoc-rect-ac">
                <div class="ac_question" id="csawesome2_2_Turtle-eoc-rect-ac_question">
                  <div class="para" id="Turtle-eoc-rect-ac-1-1">Finish the code below to have <code class="code-inline tex2jax_ignore">t1</code> draw a rectangle.  The vertical sides should be length 50 and the horizontal length 100.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_Turtle-eoc-rect-ac_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.util.*;

public class TurtleTest
{
    public static void main(String[] args)
    {
        World habitat = new World(300, 300);
        Turtle t1 = new Turtle(habitat);

        habitat.show(true);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.24.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_Turtle-eoc-draw-seven-ac">
                <div class="ac_question" id="csawesome2_2_Turtle-eoc-draw-seven-ac_question">
                  <div class="para" id="Turtle-eoc-draw-seven-ac-1-1">Finish the code below to have <code class="code-inline tex2jax_ignore">t1</code> draw the number seven.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_Turtle-eoc-draw-seven-ac_editor" data-question_label="" data-codelens="true">import java.util.*;
import java.awt.*;

public class TurtleTest
{
    public static void main(String[] args)
    {
        World habitat = new World(300,300);
        Turtle t1  = new Turtle(habitat);

        habitat.show(true);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.24.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_Turtle-eoc-draw-four-ac">
                <div class="ac_question" id="csawesome2_2_Turtle-eoc-draw-four-ac_question">
                  <div class="para" id="Turtle-eoc-draw-four-ac-1-1">Finish the code below to have <code class="code-inline tex2jax_ignore">t1</code> draw the number four.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_Turtle-eoc-draw-four-ac_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.util.*;

public class TurtleTest
{
    public static void main(String[] args)
    {
        World habitat = new World(300, 300);
        Turtle t1 = new Turtle(habitat);

        habitat.show(true);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.24.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_Turtle-eoc-draw-interesting-ac">
                <div class="ac_question" id="csawesome2_2_Turtle-eoc-draw-interesting-ac_question">
                  <div class="para" id="Turtle-eoc-draw-interesting-ac-1-1">Finish the code below to have <code class="code-inline tex2jax_ignore">t1</code> draw something interesting.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_Turtle-eoc-draw-interesting-ac_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.util.*;

public class TurtleTest
{
    public static void main(String[] args)
    {
        World habitat = new World(300, 300);
        Turtle t1 = new Turtle(habitat);

        habitat.show(true);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>multiple-choice-exercises-for-unit-1b-1-9-1-15</id>
      <title>Multiple Choice Exercises for Unit 1b (1.9-1.15)</title>
      <question>
        <label>Exercise 1.25.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP2-1-5" data-multipleanswers="false">
                <dl class="description-list">
                  <dt id="AP2-1-5-1-1-1">1-25-1:  A student has created a Cat class. The class contains variables to represent the following.</dt>
                  <dd>
                    <div class="para logical" id="AP2-1-5-1-1-1-2">
                      <ul class="disc" id="AP2-1-5-1-1-1-2-1">
                        <li id="AP2-1-5-1-1-1-2-1-1">
                          <div class="para" id="AP2-1-5-1-1-1-2-1-1-1">A String variable called color to represent the color of the cat</div>
                        </li>
                        <li id="AP2-1-5-1-1-1-2-1-2">
                          <div class="para" id="AP2-1-5-1-1-1-2-1-2-1">A String variable called breed to represent the breed of the cat</div>
                        </li>
                        <li id="AP2-1-5-1-1-1-2-1-3">
                          <div class="para" id="AP2-1-5-1-1-1-2-1-3-1">An int variable called age to represent the age of the cat</div>
                        </li>
                      </ul>
                    </div>
                    <div class="para" id="AP2-1-5-1-1-1-3">The object myCat will be declared as type Cat. Which of the following descriptions is accurate?</div>
                  </dd>
                </dl>
                <li data-component="answer" id="csawesome2_2_AP2-1-5_opt_a">
                  <div class="para" id="AP2-1-5-2-1-1-1">An attribute of breed is String.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP2-1-5_opt_a">
                  <div class="para" id="AP2-1-5-2-1-2-1">The data type of breed is String.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP2-1-5_opt_b">
                  <div class="para" id="AP2-1-5-2-2-1-1">color, breed, and age are instances of the Cat class.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP2-1-5_opt_b">
                  <div class="para" id="AP2-1-5-2-2-2-1">color, breed, and age are attributes of the Cat class.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP2-1-5_opt_c">
                  <div class="para" id="AP2-1-5-2-3-1-1">Cat is an instance of the myCat class.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP2-1-5_opt_c">
                  <div class="para" id="AP2-1-5-2-3-2-1">myCat is an instance of the Cat class.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP2-1-5_opt_d" data-correct="">
                  <div class="para" id="AP2-1-5-2-4-1-1">age is an attribute of the myCat object.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP2-1-5_opt_d">
                  <div class="para" id="AP2-1-5-2-4-2-1">Attributes of the Cat class and myCat object are color, breed, age.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP2-1-5_opt_e">
                  <div class="para" id="AP2-1-5-2-5-1-1">An attribute of Cat is myCat.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP2-1-5_opt_e">
                  <div class="para" id="AP2-1-5-2-5-2-1">Attributes of the Cat class are color, breed, age.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.25.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP2-1-6" data-multipleanswers="false">
                <dl class="description-list">
                  <dt id="AP2-1-6-1-1-1">1-25-2:  A student has created a Movie class. The class contains variables to represent the following.</dt>
                  <dd>
                    <div class="para logical" id="AP2-1-6-1-1-1-2">
                      <ul class="disc" id="AP2-1-6-1-1-1-2-1">
                        <li id="AP2-1-6-1-1-1-2-1-1">
                          <div class="para" id="AP2-1-6-1-1-1-2-1-1-1">A String variable called title to represent the title of the movie</div>
                        </li>
                        <li id="AP2-1-6-1-1-1-2-1-2">
                          <div class="para" id="AP2-1-6-1-1-1-2-1-2-1">A String variable called director to represent the director of the movie</div>
                        </li>
                        <li id="AP2-1-6-1-1-1-2-1-3">
                          <div class="para" id="AP2-1-6-1-1-1-2-1-3-1">A double variable called rating to represent the rating of the movie</div>
                        </li>
                      </ul>
                    </div>
                    <div class="para" id="AP2-1-6-1-1-1-3">The object scaryMovie will be declared as type Movie. Which of the following descriptions is accurate?</div>
                  </dd>
                </dl>
                <li data-component="answer" id="csawesome2_2_AP2-1-6_opt_a">
                  <div class="para" id="AP2-1-6-2-1-1-1">An attribute of the scaryMovie class is title.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP2-1-6_opt_a">
                  <div class="para" id="AP2-1-6-2-1-2-1">scaryMovie is an object, not a class.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP2-1-6_opt_b" data-correct="">
                  <div class="para" id="AP2-1-6-2-2-1-1">scaryMovie is an instance of the Movie class.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP2-1-6_opt_b">
                  <div class="para" id="AP2-1-6-2-2-2-1">scaryMovie is an object which is an instance of the Movie class.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP2-1-6_opt_c">
                  <div class="para" id="AP2-1-6-2-3-1-1">Title, director, and rating are instances of the scaryMovie object.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP2-1-6_opt_c">
                  <div class="para" id="AP2-1-6-2-3-2-1">These are attributes of the object or class.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP2-1-6_opt_d">
                  <div class="para" id="AP2-1-6-2-4-1-1">An attribute of the Movie instance is scaryMovie</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP2-1-6_opt_d">
                  <div class="para" id="AP2-1-6-2-4-2-1">scaryMovie is an instance of the Movie class.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP2-1-6_opt_e">
                  <div class="para" id="AP2-1-6-2-5-1-1">Movie is an instance of scaryMovie.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP2-1-6_opt_e">
                  <div class="para" id="AP2-1-6-2-5-2-1">scaryMovie is an instance of the Movie class.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.25.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qse_5" data-multipleanswers="false"><div class="para" id="qse_5-1-1">1-25-3: Which of the following code segments will correctly create an instance of a Person object?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Person
{
    private String name;
    private int age;

    public Person(String a, int b)
    {
        name = a;
        age = b;
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qse_5_opt_a"><div class="para" id="qse_5-2-1-1-1">new Person john = Person("John", 16);</div></li><li data-component="feedback" id="csawesome2_2_qse_5_opt_a"><div class="para" id="qse_5-2-1-2-1">The new keyword should be placed before the call to the Person constructor.</div></li><li data-component="answer" id="csawesome2_2_qse_5_opt_b"><div class="para" id="qse_5-2-2-1-1">Person john("John", 16);</div></li><li data-component="feedback" id="csawesome2_2_qse_5_opt_b"><div class="para" id="qse_5-2-2-2-1">The new keyword is needed to create an object in Java</div></li><li data-component="answer" id="csawesome2_2_qse_5_opt_c"><div class="para" id="qse_5-2-3-1-1">Person john = ("John", 16);</div></li><li data-component="feedback" id="csawesome2_2_qse_5_opt_c"><div class="para" id="qse_5-2-3-2-1">The new keyword is needed to create an object in Java</div></li><li data-component="answer" id="csawesome2_2_qse_5_opt_d" data-correct=""><div class="para" id="qse_5-2-4-1-1">Person john = new Person("John", 16);</div></li><li data-component="feedback" id="csawesome2_2_qse_5_opt_d"><div class="para" id="qse_5-2-4-2-1">Correct!</div></li><li data-component="answer" id="csawesome2_2_qse_5_opt_e"><div class="para" id="qse_5-2-5-1-1">Person john = new Person(16, "John");</div></li><li data-component="feedback" id="csawesome2_2_qse_5_opt_e"><div class="para" id="qse_5-2-5-2-1">The Person constructor expects a String and an int parameter in that order.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.25.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qse_2" data-multipleanswers="false"><div class="para" id="qse_2-1-1">1-25-4: What is the value of len after the following executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String s1 = "Hey, buddy!";
int len = s1.length();
</code></pre></div><li data-component="answer" id="csawesome2_2_qse_2_opt_a"><div class="para" id="qse_2-2-1-1-1">8</div></li><li data-component="feedback" id="csawesome2_2_qse_2_opt_a"><div class="para" id="qse_2-2-1-2-1">Be sure to count spaces and punctuation in the length (the number of characters in the string).</div></li><li data-component="answer" id="csawesome2_2_qse_2_opt_b"><div class="para" id="qse_2-2-2-1-1">10</div></li><li data-component="feedback" id="csawesome2_2_qse_2_opt_b"><div class="para" id="qse_2-2-2-2-1">Did you forget to count a space or punctuation?</div></li><li data-component="answer" id="csawesome2_2_qse_2_opt_c" data-correct=""><div class="para" id="qse_2-2-3-1-1">11</div></li><li data-component="feedback" id="csawesome2_2_qse_2_opt_c"><div class="para" id="qse_2-2-3-2-1">The length method returns the number of characters in the string, including spaces and punctuation.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.25.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qse_3" data-multipleanswers="false"><div class="para" id="qse_3-1-1">1-25-5: What is the value of pos after the following code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String s1 = "ac ded ca";
int pos = s1.indexOf("d");
</code></pre></div><li data-component="answer" id="csawesome2_2_qse_3_opt_a" data-correct=""><div class="para" id="qse_3-2-1-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_qse_3_opt_a"><div class="para" id="qse_3-2-1-2-1">The method indexOf returns the first position of the passed str in the current string starting from the left (from 0).</div></li><li data-component="answer" id="csawesome2_2_qse_3_opt_b"><div class="para" id="qse_3-2-2-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_qse_3_opt_b"><div class="para" id="qse_3-2-2-2-1">The first character is at index 0 in a string, not 1.</div></li><li data-component="answer" id="csawesome2_2_qse_3_opt_c"><div class="para" id="qse_3-2-3-1-1">5</div></li><li data-component="feedback" id="csawesome2_2_qse_3_opt_c"><div class="para" id="qse_3-2-3-2-1">Does the indexOf method find the first occurrence of the character, or the last?</div></li><li data-component="answer" id="csawesome2_2_qse_3_opt_d"><div class="para" id="qse_3-2-4-1-1">-1</div></li><li data-component="feedback" id="csawesome2_2_qse_3_opt_d"><div class="para" id="qse_3-2-4-2-1">Does the string contain a d?  The pos method will return the first index that the character is at in the string.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.25.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qse_4" data-multipleanswers="false"><div class="para" id="qse_4-1-1">1-25-6: What is the value of s1 after the following code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String s1 = "Hey";
String s2 = s1.substring(0,1);
String s3 = s2.toLowerCase();
</code></pre></div><li data-component="answer" id="csawesome2_2_qse_4_opt_a" data-correct=""><div class="para" id="qse_4-2-1-1-1">Hey</div></li><li data-component="feedback" id="csawesome2_2_qse_4_opt_a"><div class="para" id="qse_4-2-1-2-1">Strings are immutable, meaning they don’t change.  Any method that that changes a string returns a new string.  So s1 never changes unless you set it to a different string.</div></li><li data-component="answer" id="csawesome2_2_qse_4_opt_b"><div class="para" id="qse_4-2-2-1-1">he</div></li><li data-component="feedback" id="csawesome2_2_qse_4_opt_b"><div class="para" id="qse_4-2-2-2-1">The substring method returns a new string starting at the first index and ending before the second index.</div></li><li data-component="answer" id="csawesome2_2_qse_4_opt_c"><div class="para" id="qse_4-2-3-1-1">H</div></li><li data-component="feedback" id="csawesome2_2_qse_4_opt_c"><div class="para" id="qse_4-2-3-2-1">This would be true if we asked what the value of s2 was after the code executes.  What is the value of s1?</div></li><li data-component="answer" id="csawesome2_2_qse_4_opt_d"><div class="para" id="qse_4-2-4-1-1">h</div></li><li data-component="feedback" id="csawesome2_2_qse_4_opt_d"><div class="para" id="qse_4-2-4-2-1">This would be true if we asked what the value of s3 was after the code executes.  What is the value of s1?</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.25.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP2-2-5" data-multipleanswers="false"><div class="para" id="AP2-2-5-1-1">1-25-7:  Consider the following class.  Which of the following code segments would successfully create a new Movie object?</div> <blockquote class="blockquote" id="AP2-2-5-1-2"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Movie
{
    private String title;
    private String director;
    private double rating;
    private boolean inTheaters;

    public Movie(String t, String d, double r)
    {
        title = t;
        director = d;
        rating = r;
        inTheaters = false;
    }

    public Movie(String t)
    {
        title = t;
        director = "unknown";
        rating = 0.0;
        inTheaters = false;
    }
}
</code></pre></div></blockquote><li data-component="answer" id="csawesome2_2_AP2-2-5_opt_a"><div class="para" id="AP2-2-5-2-1-1-1">Movie one = new Movie("Harry Potter", "Bob");</div></li><li data-component="feedback" id="csawesome2_2_AP2-2-5_opt_a"><div class="para" id="AP2-2-5-2-1-2-1">There is no Movie constructor with 2 parameters.</div></li><li data-component="answer" id="csawesome2_2_AP2-2-5_opt_b" data-correct=""><div class="para" id="AP2-2-5-2-2-1-1">Movie two = new Movie("Sponge Bob");</div></li><li data-component="feedback" id="csawesome2_2_AP2-2-5_opt_b"><div class="para" id="AP2-2-5-2-2-2-1">This creates a Movie object with the title "Sponge Bob".</div></li><li data-component="answer" id="csawesome2_2_AP2-2-5_opt_c"><div class="para" id="AP2-2-5-2-3-1-1">Movie three = new Movie(title, rating, director);</div></li><li data-component="feedback" id="csawesome2_2_AP2-2-5_opt_c"><div class="para" id="AP2-2-5-2-3-2-1">It is not clear whether the variables title, rating, and director are the correct types or in the correct order.</div></li><li data-component="answer" id="csawesome2_2_AP2-2-5_opt_d"><div class="para" id="AP2-2-5-2-4-1-1">Movie four = new Movie("My Cool Movie", "Steven Spielburg", "4.4");</div></li><li data-component="feedback" id="csawesome2_2_AP2-2-5_opt_d"><div class="para" id="AP2-2-5-2-4-2-1">The third argument "4.4" is a String because it is in quotes, but the constructor expects a double.</div></li><li data-component="answer" id="csawesome2_2_AP2-2-5_opt_e"><div class="para" id="AP2-2-5-2-5-1-1">Movie five = new Movie(t);</div></li><li data-component="feedback" id="csawesome2_2_AP2-2-5_opt_e"><div class="para" id="AP2-2-5-2-5-2-1">It is not clear whether t is the correct type for this constructor.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.25.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qse_6" data-multipleanswers="false"><div class="para" id="qse_6-1-1">1-25-8: Given the BankAccount class definition below, what is the output of the code in the main method?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class BankAccount
{
    private int accountID;
    private double total;

    public BankAccount(int id, double initialDeposit)
    {
        accountID = id;
        total = initialDeposit;
    }

    public void deposit(double money)
    {
        total = total + money;
    }

    public void withdraw(double money)
    {
        total = total - money;
    }

    public void printCurrentTotal()
    {
        System.out.print(total);
    }

    public static void main(String[] args)
    {
        BankAccount newAccount = new BankAccount(12345, 100.00);
        newAccount.withdraw(30.00);
        newAccount.deposit(40.00);
        newAccount.printCurrentTotal();
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qse_6_opt_a"><div class="para" id="qse_6-2-1-1-1">100.00</div></li><li data-component="feedback" id="csawesome2_2_qse_6_opt_a"><div class="para" id="qse_6-2-1-2-1">Remember that we have added and withdrawn money</div></li><li data-component="answer" id="csawesome2_2_qse_6_opt_b" data-correct=""><div class="para" id="qse_6-2-2-1-1">110.00</div></li><li data-component="feedback" id="csawesome2_2_qse_6_opt_b"><div class="para" id="qse_6-2-2-2-1">The constructor sets the total to 100, the withdraw method subtracts 30, and then the deposit method adds 40.</div></li><li data-component="answer" id="csawesome2_2_qse_6_opt_c"><div class="para" id="qse_6-2-3-1-1">90.00</div></li><li data-component="feedback" id="csawesome2_2_qse_6_opt_c"><div class="para" id="qse_6-2-3-2-1">We added more money than we took out</div></li><li data-component="answer" id="csawesome2_2_qse_6_opt_d"><div class="para" id="qse_6-2-4-1-1">10.00</div></li><li data-component="feedback" id="csawesome2_2_qse_6_opt_d"><div class="para" id="qse_6-2-4-2-1">We set the value of total to be 100 first</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.25.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qve_new6" data-multipleanswers="false"><div class="para" id="qve_new6-1-1">1-25-9: Given the following code segment, what is the value of <code class="code-inline tex2jax_ignore">num</code> when it finishes executing? Math.random() returns a random decimal number between 0 and up to 1, for example 0.4.</div> <blockquote class="blockquote" id="qve_new6-1-2"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">double value = Math.random();
int num = (int) (value * 5) + 5;
</code></pre></div></blockquote><li data-component="answer" id="csawesome2_2_qve_new6_opt_a"><div class="para" id="qve_new6-2-1-1-1">a random number from 0 to 4</div></li><li data-component="feedback" id="csawesome2_2_qve_new6_opt_a"><div class="para" id="qve_new6-2-1-2-1">This would be true if it was (int) (Math.random * 5)</div></li><li data-component="answer" id="csawesome2_2_qve_new6_opt_b"><div class="para" id="qve_new6-2-2-1-1">a random number from 1 to 5</div></li><li data-component="feedback" id="csawesome2_2_qve_new6_opt_b"><div class="para" id="qve_new6-2-2-2-1">This would be true if it was ((int) (Math.random * 5)) + 1</div></li><li data-component="answer" id="csawesome2_2_qve_new6_opt_c" data-correct=""><div class="para" id="qve_new6-2-3-1-1">a random number from 5 to 9</div></li><li data-component="feedback" id="csawesome2_2_qve_new6_opt_c"><div class="para" id="qve_new6-2-3-2-1">Math.random returns a value from 0 to not quite 1.  When you multiply it by 5 you get a value from 0 to not quite 5.  When you cast to int you get a value from 0 to 4.  Adding 5 gives a value from 5 to 9.</div></li><li data-component="answer" id="csawesome2_2_qve_new6_opt_d"><div class="para" id="qve_new6-2-4-1-1">a random number from 5 to 10</div></li><li data-component="feedback" id="csawesome2_2_qve_new6_opt_d"><div class="para" id="qve_new6-2-4-2-1">This would be true if Math.random returned a value between 0 and 1, but it won’t ever return 1.  The cast to int results in a number from 0 to 4.  Adding 5 gives a value from 5 to 9.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.25.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qve_new8" data-multipleanswers="false"><div class="para" id="qve_new8-1-1">1-25-10: Given the following code segment, what is the value of <code class="code-inline tex2jax_ignore">num</code> when it finishes executing? Math.random() returns a random decimal number between 0 and up to 1, for example 0.4.</div> <blockquote class="blockquote" id="qve_new8-1-2"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">double value = Math.random();
int num = (int) (value * 11) - 5;
</code></pre></div></blockquote><li data-component="answer" id="csawesome2_2_qve_new8_opt_a"><div class="para" id="qve_new8-2-1-1-1">a random number from 0 to 10</div></li><li data-component="feedback" id="csawesome2_2_qve_new8_opt_a"><div class="para" id="qve_new8-2-1-2-1">This would be true if it was (int) (value * 11)</div></li><li data-component="answer" id="csawesome2_2_qve_new8_opt_b"><div class="para" id="qve_new8-2-2-1-1">a random number from 0 to 9</div></li><li data-component="feedback" id="csawesome2_2_qve_new8_opt_b"><div class="para" id="qve_new8-2-2-2-1">This would be true if it was (int) (value * 10)</div></li><li data-component="answer" id="csawesome2_2_qve_new8_opt_c"><div class="para" id="qve_new8-2-3-1-1">a random number from -5 to 4</div></li><li data-component="feedback" id="csawesome2_2_qve_new8_opt_c"><div class="para" id="qve_new8-2-3-2-1">This would be true if it was (int) (value * 10) - 5</div></li><li data-component="answer" id="csawesome2_2_qve_new8_opt_d" data-correct=""><div class="para" id="qve_new8-2-4-1-1">a random number from -5 to 5</div></li><li data-component="feedback" id="csawesome2_2_qve_new8_opt_d"><div class="para" id="qve_new8-2-4-2-1">Math.random returns a random value from 0 to not quite 1.  After it is multipied by 11 and cast to integer it will be a value from 0 to 10.  Subtracting 5 means it will range from -5 to 5.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.25.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsm_1" data-multipleanswers="false"><div class="para" id="qsm_1-1-1">1-25-11: After the following code is executed, which of I, II and/or III will evaluate to true?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String s1 = "xyz";
String s2 = s1;
String s3 = s2;

I.   s1.equals(s3)
II.  s1 == s2
III. s1 == s3
</code></pre></div><li data-component="answer" id="csawesome2_2_qsm_1_opt_a" data-correct=""><div class="para" id="qsm_1-2-1-1-1">I, II, III</div></li><li data-component="feedback" id="csawesome2_2_qsm_1_opt_a"><div class="para" id="qsm_1-2-1-2-1">The "equals" operation on strings returns true when the strings have the same characters.  The == operator returns true when they refer to the same object.  In this case all three references actually refer to the same object so both == and equals will be true.</div></li><li data-component="answer" id="csawesome2_2_qsm_1_opt_b"><div class="para" id="qsm_1-2-2-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qsm_1_opt_b"><div class="para" id="qsm_1-2-2-2-1">This is true, since s1 and s3 contain the same characters since s1 and s3 actually refer to the same string object. But, it isn’t the only thing that is true.</div></li><li data-component="answer" id="csawesome2_2_qsm_1_opt_c"><div class="para" id="qsm_1-2-3-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qsm_1_opt_c"><div class="para" id="qsm_1-2-3-2-1">This is true since s2 == s1.  But, it isn’t the only thing that is true.</div></li><li data-component="answer" id="csawesome2_2_qsm_1_opt_d"><div class="para" id="qsm_1-2-4-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_qsm_1_opt_d"><div class="para" id="qsm_1-2-4-2-1">This is true since s3 == s2, and s2 == s1 so it follows that s1 == s3.  But, it isn’t the only thing that is true.</div></li><li data-component="answer" id="csawesome2_2_qsm_1_opt_e"><div class="para" id="qsm_1-2-5-1-1">II and III only</div></li><li data-component="feedback" id="csawesome2_2_qsm_1_opt_e"><div class="para" id="qsm_1-2-5-2-1">This is true since they all refer to the same string object.  But, they also contain the same characters so equals is also true.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.25.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsm_2" data-multipleanswers="false"><div class="para" id="qsm_2-1-1">1-25-12: What is output from the following code?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String s = "Georgia Tech";
String s1 = s.substring(0,7);
String s2 = s1.substring(2);
String s3 = s2.substring(0,3);
System.out.println(s3);
</code></pre></div><li data-component="answer" id="csawesome2_2_qsm_2_opt_a" data-correct=""><div class="para" id="qsm_2-2-1-1-1">org</div></li><li data-component="feedback" id="csawesome2_2_qsm_2_opt_a"><div class="para" id="qsm_2-2-1-2-1">The method substring(a,b) means start at a and stop before b. The method substring(a) means start at a and go to the end of the string. The first character in a string is at index 0.</div></li><li data-component="answer" id="csawesome2_2_qsm_2_opt_b"><div class="para" id="qsm_2-2-2-1-1">eor</div></li><li data-component="feedback" id="csawesome2_2_qsm_2_opt_b"><div class="para" id="qsm_2-2-2-2-1">This can’t be true since the e is at index 1 and s2 = s1.substring(2) will start at index 2 and take all characters till the end of the string.</div></li><li data-component="answer" id="csawesome2_2_qsm_2_opt_c"><div class="para" id="qsm_2-2-3-1-1">eorg</div></li><li data-component="feedback" id="csawesome2_2_qsm_2_opt_c"><div class="para" id="qsm_2-2-3-2-1">This can’t be true since the e is at index 1 and s2 = s1.substring(2) will start at index 2 and take all characters till the end of the string.</div></li><li data-component="answer" id="csawesome2_2_qsm_2_opt_d"><div class="para" id="qsm_2-2-4-1-1">orgi</div></li><li data-component="feedback" id="csawesome2_2_qsm_2_opt_d"><div class="para" id="qsm_2-2-4-2-1">This would be true if substring(a,b) included the character at index b, but it doesn’t.</div></li><li data-component="answer" id="csawesome2_2_qsm_2_opt_e"><div class="para" id="qsm_2-2-5-1-1">You will get an index out of bounds exception</div></li><li data-component="feedback" id="csawesome2_2_qsm_2_opt_e"><div class="para" id="qsm_2-2-5-2-1">This would be true if the starting index was invalid or the ending index was past 2 past the last valid index.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.25.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsm_3" data-multipleanswers="false"><div class="para" id="qsm_3-1-1">1-25-13: Given the following code segment, what is the value of s1 after the code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String s1 = "Hi There";
String s2 = s1;
String s3 = s2;
String s4 = s1;
s2 = s2.toLowerCase();
s3 = s3.toUpperCase();
s4 = null;
</code></pre></div><li data-component="answer" id="csawesome2_2_qsm_3_opt_a"><div class="para" id="qsm_3-2-1-1-1">null</div></li><li data-component="feedback" id="csawesome2_2_qsm_3_opt_a"><div class="para" id="qsm_3-2-1-2-1">This would be true if we had s1 = s4 after s4 = null was executed. Strings are immutable and so any changes to a string returns a new string.</div></li><li data-component="answer" id="csawesome2_2_qsm_3_opt_b"><div class="para" id="qsm_3-2-2-1-1">hi there</div></li><li data-component="feedback" id="csawesome2_2_qsm_3_opt_b"><div class="para" id="qsm_3-2-2-2-1">This would only be correct if we had s1 = s2 after s2.toLowerCaase() was executed. Strings are immutable and so any change to a string returns a new string.</div></li><li data-component="answer" id="csawesome2_2_qsm_3_opt_c"><div class="para" id="qsm_3-2-3-1-1">HI THERE</div></li><li data-component="feedback" id="csawesome2_2_qsm_3_opt_c"><div class="para" id="qsm_3-2-3-2-1">This would be correct if we had s1 = s3 after s3.toUpperCase() was executed. String are immutable and so any change to a string returns a new string.</div></li><li data-component="answer" id="csawesome2_2_qsm_3_opt_d" data-correct=""><div class="para" id="qsm_3-2-4-1-1">Hi There</div></li><li data-component="feedback" id="csawesome2_2_qsm_3_opt_d"><div class="para" id="qsm_3-2-4-2-1">Strings are immutable meaning that any changes to a string creates and returns a new string, so the string referred to by s1 does not change.</div></li><li data-component="answer" id="csawesome2_2_qsm_3_opt_e"><div class="para" id="qsm_3-2-5-1-1">hI tHERE</div></li><li data-component="feedback" id="csawesome2_2_qsm_3_opt_e"><div class="para" id="qsm_3-2-5-2-1">Strings are immutable and so any changes to a string returns a new string.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.25.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsm_4" data-multipleanswers="false"><div class="para" id="qsm_4-1-1">1-25-14: There is a method called checkString that determines whether a string is the same forwards and backwards. The following data set inputs can be used for testing the method. What advantage does Data Set 2 have over Data Set 1?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">Data Set 1    Data Set 2
aba               bcb
abba              bcd
aBa
</code></pre></div><li data-component="answer" id="csawesome2_2_qsm_4_opt_a" data-correct=""><div class="para" id="qsm_4-2-1-1-1">Data Set 2 contains one string which should return true and one that should return false.</div></li><li data-component="feedback" id="csawesome2_2_qsm_4_opt_a"><div class="para" id="qsm_4-2-1-2-1">All of the strings in Data Set 1 should return true, so the false condition is never tested.</div></li><li data-component="answer" id="csawesome2_2_qsm_4_opt_b"><div class="para" id="qsm_4-2-2-1-1">All strings in Data Set 2 have the same number of characters.</div></li><li data-component="feedback" id="csawesome2_2_qsm_4_opt_b"><div class="para" id="qsm_4-2-2-2-1">Variety is always good in testing, so this is not an advantage.</div></li><li data-component="answer" id="csawesome2_2_qsm_4_opt_c"><div class="para" id="qsm_4-2-3-1-1">The strings in Data Set 2 are all lowercase</div></li><li data-component="feedback" id="csawesome2_2_qsm_4_opt_c"><div class="para" id="qsm_4-2-3-2-1">It would be better to include both upper and lower case for testing, so this is not an advantage.</div></li><li data-component="answer" id="csawesome2_2_qsm_4_opt_d"><div class="para" id="qsm_4-2-4-1-1">Data Set 2 contains fewer values than Data Set 1.</div></li><li data-component="feedback" id="csawesome2_2_qsm_4_opt_d"><div class="para" id="qsm_4-2-4-2-1">More test conditions is usually better, so this is not an advantage.</div></li><li data-component="answer" id="csawesome2_2_qsm_4_opt_e"><div class="para" id="qsm_4-2-5-1-1">There are no advantages.</div></li><li data-component="feedback" id="csawesome2_2_qsm_4_opt_e"><div class="para" id="qsm_4-2-5-2-1">All the values in Data Set 1 are true, so the false condition is not tested.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.25.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsm_5" data-multipleanswers="false">
                <div class="para" id="qsm_5-1-1">1-25-15: A car dealership needs a program to store information about the cars for sale.For each car, they want to keep track of the following information: the number of doors (2 or 4),its average number of miles per gallon, and whether the car has air conditioning. Which of the following is the best design?</div>
                <li data-component="answer" id="csawesome2_2_qsm_5_opt_a" data-correct="">
                  <div class="para" id="qsm_5-2-1-1-1">Use one class, Car, which has three attributes: int numDoors, double mpg, and boolean hasAir.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qsm_5_opt_a">
                  <div class="para" id="qsm_5-2-1-2-1">Having one class with all the attributes needed is the most efficient design in this case.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qsm_5_opt_b">
                  <div class="para" id="qsm_5-2-2-1-1">Use four unrelated classes: Car, Doors, MilesPerGallon, and AirConditioning</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qsm_5_opt_b">
                  <div class="para" id="qsm_5-2-2-2-1">The point of storing the car information is so we can easily access the attributes related to a car.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qsm_5_opt_c">
                  <div class="para" id="qsm_5-2-3-1-1">Use a class, Car, which has three subclasses: Doors, MilesPerGallon, and AirConditioning</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qsm_5_opt_c">
                  <div class="para" id="qsm_5-2-3-2-1">In this case, the information only refers to a couple of basic attributes so it is better to store that data as fields within a single class.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qsm_5_opt_d">
                  <div class="para" id="qsm_5-2-4-1-1">Use a class Car, which has a subclass Doors, with a subclass AC, with a subclass MPG.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qsm_5_opt_d">
                  <div class="para" id="qsm_5-2-4-2-1">It doesn’t really make sense for AC to be a subclass of MPG, and that being a subclass of Doors.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qsm_5_opt_e">
                  <div class="para" id="qsm_5-2-5-1-1">Use three classes: Doors, AirConditioning, and MilesPerGallon, each with a subclass Car.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qsm_5_opt_e">
                  <div class="para" id="qsm_5-2-5-2-1">A car doesn’t really make sense to be a subclass of AC, and so on. It would also be better to group a couple of pieces of data into a single class.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.25.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsm_6" data-multipleanswers="false"><div class="para" id="qsm_6-1-1">1-25-16: Assume that SomeClass and MainClass are properly defined in separate files. What is the output of the code in main()?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">class SomeClass
{
    public SomeClass()
    {
        System.out.print("Hello ");
    }

    void printSomething(String name)
    {
        System.out.print("Hello " + name + " ");
    }
}

public class MainClass
{
    public static void main(String[] args)
    {
        SomeClass someClass = new SomeClass();
        someClass.printSomething("Bob");
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qsm_6_opt_a"><div class="para" id="qsm_6-2-1-1-1">Hello Bob</div></li><li data-component="feedback" id="csawesome2_2_qsm_6_opt_a"><div class="para" id="qsm_6-2-1-2-1">The constructor is called first and prints out one "Hello ".</div></li><li data-component="answer" id="csawesome2_2_qsm_6_opt_b" data-correct=""><div class="para" id="qsm_6-2-2-1-1">Hello Hello Bob</div></li><li data-component="feedback" id="csawesome2_2_qsm_6_opt_b"><div class="para" id="qsm_6-2-2-2-1">The constructor is called first and prints out one "Hello " followed by the printSomething() method which prints out "Hello Bob ".</div></li><li data-component="answer" id="csawesome2_2_qsm_6_opt_c"><div class="para" id="qsm_6-2-3-1-1">Hello Bob Hello Bob</div></li><li data-component="feedback" id="csawesome2_2_qsm_6_opt_c"><div class="para" id="qsm_6-2-3-2-1">The constructor is called first and prints out one "Hello ".</div></li><li data-component="answer" id="csawesome2_2_qsm_6_opt_d"><div class="para" id="qsm_6-2-4-1-1">Hello Bob Hello</div></li><li data-component="feedback" id="csawesome2_2_qsm_6_opt_d"><div class="para" id="qsm_6-2-4-2-1">The constructor is called first and prints out one "Hello " followed by printSomething().</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.25.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsm_7" data-multipleanswers="false"><div class="para" id="qsm_7-1-1">1-25-17: What is the output of the following code?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Test
{
    String someFunc(String str)
    {
        return someOtherFunc(str + " Hoo");
    }

    String someOtherFunc(String str)
    {
        return "Hoo " + str;
    }

    public static void main(String[] args)
    {
        Test x = new Test();
        System.out.print("Woo " + x.someFunc("Woo"));
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qsm_7_opt_a"><div class="para" id="qsm_7-2-1-1-1">Woo Hoo Hoo Woo</div></li><li data-component="feedback" id="csawesome2_2_qsm_7_opt_a"><div class="para" id="qsm_7-2-1-2-1">’Woo Hoo’ is what gets passed to someOtherFunc()</div></li><li data-component="answer" id="csawesome2_2_qsm_7_opt_b"><div class="para" id="qsm_7-2-2-1-1">Hoo Woo Hoo</div></li><li data-component="feedback" id="csawesome2_2_qsm_7_opt_b"><div class="para" id="qsm_7-2-2-2-1">’Woo ’ gets printed first.</div></li><li data-component="answer" id="csawesome2_2_qsm_7_opt_c" data-correct=""><div class="para" id="qsm_7-2-3-1-1">Woo Hoo Woo Hoo</div></li><li data-component="feedback" id="csawesome2_2_qsm_7_opt_c"><div class="para" id="qsm_7-2-3-2-1">We first print ’Woo ’ then ’Hoo ’ then the appended "Woo Hoo"</div></li><li data-component="answer" id="csawesome2_2_qsm_7_opt_d"><div class="para" id="qsm_7-2-4-1-1">Woo Woo Hoo Hoo</div></li><li data-component="feedback" id="csawesome2_2_qsm_7_opt_d"><div class="para" id="qsm_7-2-4-2-1">’Woo ’ gets printed first, then the ’Hoo ’ from someOtherFunc().</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.25.18 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsh_1" data-multipleanswers="false"><div class="para" id="qsh_1-1-1">1-25-18: Given the following code segment, which of the following is true?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String s1 = new String("Hi There");
String s2 = new String("Hi There");
String s3 = s1;

I.   (s1 == s2)
II.  (s1.equals(s2))
III. (s1 == s3)
IV.  (s2.equals(s3))
</code></pre></div><li data-component="answer" id="csawesome2_2_qsh_1_opt_a"><div class="para" id="qsh_1-2-1-1-1">II and IV</div></li><li data-component="feedback" id="csawesome2_2_qsh_1_opt_a"><div class="para" id="qsh_1-2-1-2-1">III is also correct.</div></li><li data-component="answer" id="csawesome2_2_qsh_1_opt_b" data-correct=""><div class="para" id="qsh_1-2-2-1-1">II, III, and IV</div></li><li data-component="feedback" id="csawesome2_2_qsh_1_opt_b"><div class="para" id="qsh_1-2-2-2-1">String overrides equals to check if the two string objects have the same characters. The == operator checks if two object references refer to the same object. So II is correct since s1 and s2 have the same characters. Number II is correct since s3 and s1 are referencing the same string, so they will be ==. And s2 and s3 both refer to string that have the same characters so equals will be true in IV. The only one that will not be true is I, since s1 and s2 are two different objects (even though they have the same characters).</div></li><li data-component="answer" id="csawesome2_2_qsh_1_opt_c"><div class="para" id="qsh_1-2-3-1-1">I, II, III, IV</div></li><li data-component="feedback" id="csawesome2_2_qsh_1_opt_c"><div class="para" id="qsh_1-2-3-2-1">I is not correct since s1 and s2 are two different objects (even though they have the same characters). If s1 and s2 were both referring to literals, then I would be correct, but the new operator forces a new object to be created.</div></li><li data-component="answer" id="csawesome2_2_qsh_1_opt_d"><div class="para" id="qsh_1-2-4-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qsh_1_opt_d"><div class="para" id="qsh_1-2-4-2-1">III and IV are also correct.</div></li><li data-component="answer" id="csawesome2_2_qsh_1_opt_e"><div class="para" id="qsh_1-2-5-1-1">IV only</div></li><li data-component="feedback" id="csawesome2_2_qsh_1_opt_e"><div class="para" id="qsh_1-2-5-2-1">II and III are also correct.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.25.19 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsh_2" data-multipleanswers="false"><div class="para" id="qsh_2-1-1">1-25-19: What does the following code print?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">System.out.println("13" + 5 + 3);
</code></pre></div><li data-component="answer" id="csawesome2_2_qsh_2_opt_a"><div class="para" id="qsh_2-2-1-1-1">21</div></li><li data-component="feedback" id="csawesome2_2_qsh_2_opt_a"><div class="para" id="qsh_2-2-1-2-1">This would be correct if it was System.out.println(13 + 5 + 3), but the 13 is a string.</div></li><li data-component="answer" id="csawesome2_2_qsh_2_opt_b" data-correct=""><div class="para" id="qsh_2-2-2-1-1">1353</div></li><li data-component="feedback" id="csawesome2_2_qsh_2_opt_b"><div class="para" id="qsh_2-2-2-2-1">This is string concatenation.  When you append a number to a string it get turned into a string and processing is from left to right.</div></li><li data-component="answer" id="csawesome2_2_qsh_2_opt_c"><div class="para" id="qsh_2-2-3-1-1">It will give a run-time error</div></li><li data-component="feedback" id="csawesome2_2_qsh_2_opt_c"><div class="para" id="qsh_2-2-3-2-1">You can append a number to a string in Java. It turns the number into a string and then appends the second string to the first string.</div></li><li data-component="answer" id="csawesome2_2_qsh_2_opt_d"><div class="para" id="qsh_2-2-4-1-1">138</div></li><li data-component="feedback" id="csawesome2_2_qsh_2_opt_d"><div class="para" id="qsh_2-2-4-2-1">This would be correct if it was System.out.println("13" + (5 + 3)), but the 5 is turned into a string and appended to the 13 and then the same is done with the 3.</div></li><li data-component="answer" id="csawesome2_2_qsh_2_opt_e"><div class="para" id="qsh_2-2-5-1-1">It will give a compile-time error</div></li><li data-component="feedback" id="csawesome2_2_qsh_2_opt_e"><div class="para" id="qsh_2-2-5-2-1">You can append a number to a string in Java.  It will compile.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.25.20 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsh_4" data-multipleanswers="false"><div class="para" id="qsh_4-1-1">1-25-20: Assume that SomeClass and MainClass are properly defined in separate files. What is the output of main()?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">class SomeClass
{
    int someVar;
}

public class MainClass
{
    public static void main(String[] args)
    {
        SomeClass x;
        System.out.println(x.someVar);
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qsh_4_opt_a"><div class="para" id="qsh_4-2-1-1-1">unknown value</div></li><li data-component="feedback" id="csawesome2_2_qsh_4_opt_a"><div class="para" id="qsh_4-2-1-2-1">x needs to be initialized with a call to the SomeClass constructor.</div></li><li data-component="answer" id="csawesome2_2_qsh_4_opt_b"><div class="para" id="qsh_4-2-2-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_qsh_4_opt_b"><div class="para" id="qsh_4-2-2-2-1">x and someVar have not been initialized.</div></li><li data-component="answer" id="csawesome2_2_qsh_4_opt_c" data-correct=""><div class="para" id="qsh_4-2-3-1-1">compile error</div></li><li data-component="feedback" id="csawesome2_2_qsh_4_opt_c"><div class="para" id="qsh_4-2-3-2-1">This will give an error that x has not been initialized. It needs to be initialized with a call to the SomeClass constructor.</div></li><li data-component="answer" id="csawesome2_2_qsh_4_opt_d"><div class="para" id="qsh_4-2-4-1-1">runtime error</div></li><li data-component="feedback" id="csawesome2_2_qsh_4_opt_d"><div class="para" id="qsh_4-2-4-2-1">This code will not run.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 1.25.21 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsh_5" data-multipleanswers="false"><div class="para" id="qsh_5-1-1">1-25-21: Assume that SomeClass and MainClass are properly defined in separate files. What is the output of main()?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">class SomeClass
{
    int someVar;
}

public class MainClass
{
    public static void main(String[] args)
    {
        SomeClass x = new SomeClass();
        System.out.println(x.someVar);
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qsh_5_opt_a"><div class="para" id="qsh_5-2-1-1-1">unknown value</div></li><li data-component="feedback" id="csawesome2_2_qsh_5_opt_a"><div class="para" id="qsh_5-2-1-2-1">ints get initialized to 0 by default if not explicitly initialized.</div></li><li data-component="answer" id="csawesome2_2_qsh_5_opt_b" data-correct=""><div class="para" id="qsh_5-2-2-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_qsh_5_opt_b"><div class="para" id="qsh_5-2-2-2-1">ints get initialized to 0 by default if not explicitly initialized.</div></li><li data-component="answer" id="csawesome2_2_qsh_5_opt_c"><div class="para" id="qsh_5-2-3-1-1">compile error</div></li><li data-component="feedback" id="csawesome2_2_qsh_5_opt_c"><div class="para" id="qsh_5-2-3-2-1">This code will compile.</div></li><li data-component="answer" id="csawesome2_2_qsh_5_opt_d"><div class="para" id="qsh_5-2-4-1-1">runtime error</div></li><li data-component="feedback" id="csawesome2_2_qsh_5_opt_d"><div class="para" id="qsh_5-2-4-2-1">someVar has a value assigned by default.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>practice-test-for-objects-1-12-1-14</id>
      <title>Practice Test for Objects (1.12-1.14)</title>
      <question optional="yes">
        <label>Exercise 1.26.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP2-1-3" data-multipleanswers="false">
                <dl class="description-list">
                  <dt id="AP2-1-3-1-1-1">2-14-1:  A student has created a Liquid class. The class contains variables to represent the following.</dt>
                  <dd>
                    <div class="para logical" id="AP2-1-3-1-1-1-2">
                      <ul class="disc" id="AP2-1-3-1-1-1-2-1">
                        <li id="AP2-1-3-1-1-1-2-1-1">
                          <div class="para" id="AP2-1-3-1-1-1-2-1-1-1">A double variable called boilingPoint to represent the boiling point of the liquid.</div>
                        </li>
                        <li id="AP2-1-3-1-1-1-2-1-2">
                          <div class="para" id="AP2-1-3-1-1-1-2-1-2-1">A double variable called freezingPoint to represent at what temperature the liquid will freeze.</div>
                        </li>
                        <li id="AP2-1-3-1-1-1-2-1-3">
                          <div class="para" id="AP2-1-3-1-1-1-2-1-3-1">A boolean variable called hasFrozen to indicate whether the liquid is now frozen.</div>
                        </li>
                      </ul>
                    </div>
                    <div class="para" id="AP2-1-3-1-1-1-3">The object liquid1 will be declared as type Liquid. Which of the following statements is accurate?</div>
                  </dd>
                </dl>
                <li data-component="answer" id="csawesome2_2_AP2-1-3_opt_a">
                  <div class="para" id="AP2-1-3-2-1-1-1">An attribute of boilingPoint object is double.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP2-1-3_opt_a">
                  <div class="para" id="AP2-1-3-2-1-2-1">double is a data type, not an attribute.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP2-1-3_opt_b">
                  <div class="para" id="AP2-1-3-2-2-1-1">An instance of the liquid1 class is Liquid.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP2-1-3_opt_b">
                  <div class="para" id="AP2-1-3-2-2-2-1">The classname is Liquid and the object instance is liquid1.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP2-1-3_opt_c" data-correct="">
                  <div class="para" id="AP2-1-3-2-3-1-1">An attribute of the liquid1 object is freezingPoint.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP2-1-3_opt_c">
                  <div class="para" id="AP2-1-3-2-3-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP2-1-3_opt_d">
                  <div class="para" id="AP2-1-3-2-4-1-1">An instance of a Liquid object is hasFrozen.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP2-1-3_opt_d">
                  <div class="para" id="AP2-1-3-2-4-2-1">The classname is Liquid and the object instance is liquid1.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP2-1-3_opt_e">
                  <div class="para" id="AP2-1-3-2-5-1-1">An attribute of freezingPoint is liquid1.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP2-1-3_opt_e">
                  <div class="para" id="AP2-1-3-2-5-2-1">An attribute of liquid1 is freezingPoint.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.26.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP2-1-4" data-multipleanswers="false">
                <dl class="description-list">
                  <dt id="AP2-1-4-1-1-1">2-14-2:  A student has created an Artwork class. The class contains the following variables.</dt>
                  <dd>
                    <div class="para logical" id="AP2-1-4-1-1-1-2">
                      <ul class="disc" id="AP2-1-4-1-1-1-2-1">
                        <li id="AP2-1-4-1-1-1-2-1-1">
                          <div class="para" id="AP2-1-4-1-1-1-2-1-1-1">A String variable called artist to represent the artist’s name</div>
                        </li>
                        <li id="AP2-1-4-1-1-1-2-1-2">
                          <div class="para" id="AP2-1-4-1-1-1-2-1-2-1">A String variable called title to represent the artwork’s title</div>
                        </li>
                        <li id="AP2-1-4-1-1-1-2-1-3">
                          <div class="para" id="AP2-1-4-1-1-1-2-1-3-1">A String variable called gallery to represent the gallery title</div>
                        </li>
                      </ul>
                    </div>
                    <div class="para" id="AP2-1-4-1-1-1-3">The object painting1 will be declared as type Artwork. Which of the following statements is true?</div>
                  </dd>
                </dl>
                <li data-component="answer" id="csawesome2_2_AP2-1-4_opt_a">
                  <div class="para" id="AP2-1-4-2-1-1-1">painting1 is an instance of three String objects.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP2-1-4_opt_a">
                  <div class="para" id="AP2-1-4-2-1-2-1">The String variables are attributes of painting1.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP2-1-4_opt_b">
                  <div class="para" id="AP2-1-4-2-2-1-1">artist, title, and gallery are instances of the Artwork class.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP2-1-4_opt_b">
                  <div class="para" id="AP2-1-4-2-2-2-1">These are attributes.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP2-1-4_opt_c">
                  <div class="para" id="AP2-1-4-2-3-1-1">Artwork is an instance of the painting1 object.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP2-1-4_opt_c">
                  <div class="para" id="AP2-1-4-2-3-2-1">painting1 is an instance of Artwork.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP2-1-4_opt_d" data-correct="">
                  <div class="para" id="AP2-1-4-2-4-1-1">painting1 is an instance of the Artwork class.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP2-1-4_opt_d">
                  <div class="para" id="AP2-1-4-2-4-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_AP2-1-4_opt_e">
                  <div class="para" id="AP2-1-4-2-5-1-1">Artwork is an instance of three String objects.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_AP2-1-4_opt_e">
                  <div class="para" id="AP2-1-4-2-5-2-1">Artwork is the class name.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.26.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP2-2-3" data-multipleanswers="false"><div class="para" id="AP2-2-3-1-1">2-14-3:  Which of the following code segments correctly creates an instance of a new Party object?</div> <blockquote class="blockquote" id="AP2-2-3-1-2"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Party
{
    private int numInvited;
    private boolean partyCancelled;

    public Party()
    {
        numInvited = 1;
        partyCancelled = false;
    }

    public Party(int invites)
    {
        numInvited = invites;
        partyCancelled = false;
    }
}
I.   Party myParty;
II.  int classSize = 20;
     Party ourParty = new Party(classSize);
III. int numOfFriends = 6;
     Party yourParty = new Party(numOfFriends + 3.0);
</code></pre></div></blockquote><li data-component="answer" id="csawesome2_2_AP2-2-3_opt_a"><div class="para" id="AP2-2-3-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_AP2-2-3_opt_a"><div class="para" id="AP2-2-3-2-1-2-1">I needs to initialize the object variable with a call to new Party().</div></li><li data-component="answer" id="csawesome2_2_AP2-2-3_opt_b"><div class="para" id="AP2-2-3-2-2-1-1">I and II</div></li><li data-component="feedback" id="csawesome2_2_AP2-2-3_opt_b"><div class="para" id="AP2-2-3-2-2-2-1">I needs to initialize the object variable with a call to new Party().</div></li><li data-component="answer" id="csawesome2_2_AP2-2-3_opt_c" data-correct=""><div class="para" id="AP2-2-3-2-3-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_AP2-2-3_opt_c"><div class="para" id="AP2-2-3-2-3-2-1">Correct!</div></li><li data-component="answer" id="csawesome2_2_AP2-2-3_opt_d"><div class="para" id="AP2-2-3-2-4-1-1">II and III</div></li><li data-component="feedback" id="csawesome2_2_AP2-2-3_opt_d"><div class="para" id="AP2-2-3-2-4-2-1">III calls the Party constructor with a double parameter instead of an int.</div></li><li data-component="answer" id="csawesome2_2_AP2-2-3_opt_e"><div class="para" id="AP2-2-3-2-5-1-1">I, II, and III</div></li><li data-component="feedback" id="csawesome2_2_AP2-2-3_opt_e"><div class="para" id="AP2-2-3-2-5-2-1">I needs to initialize the object and III needs to use an int instead of a double as the parameter for the constructor.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.26.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP2-2-4" data-multipleanswers="false"><div class="para" id="AP2-2-4-1-1">2-14-4:  Consider the following class. Which of the following code segments, when placed in a method in a class other than Liquid, will construct a Liquid object l with a boilingPoint of 98.6 ?</div> <blockquote class="blockquote" id="AP2-2-4-1-2"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Liquid
{
    private double boilingPoint;
    private double freezingPoint;

    public Liquid()
    {
        boilingPoint = 0.0;
    }

    public Liquid(double b)
    {
        boilingPoint = b;
    }
}
</code></pre></div></blockquote><li data-component="answer" id="csawesome2_2_AP2-2-4_opt_a" data-correct=""><div class="para" id="AP2-2-4-2-1-1-1">Liquid l = new Liquid(98.6);</div></li><li data-component="feedback" id="csawesome2_2_AP2-2-4_opt_a"><div class="para" id="AP2-2-4-2-1-2-1">Correct</div></li><li data-component="answer" id="csawesome2_2_AP2-2-4_opt_b"><div class="para" id="AP2-2-4-2-2-1-1">new Liquid l = 98.6;</div></li><li data-component="feedback" id="csawesome2_2_AP2-2-4_opt_b"><div class="para" id="AP2-2-4-2-2-2-1">new is incorrectly placed.</div></li><li data-component="answer" id="csawesome2_2_AP2-2-4_opt_c"><div class="para" id="AP2-2-4-2-3-1-1">Liquid l = new Liquid();</div></li><li data-component="feedback" id="csawesome2_2_AP2-2-4_opt_c"><div class="para" id="AP2-2-4-2-3-2-1">This creates an object but it does not set its boiling point to 98.6.</div></li><li data-component="answer" id="csawesome2_2_AP2-2-4_opt_d"><div class="para" id="AP2-2-4-2-4-1-1">Liquid l = 98.6;</div></li><li data-component="feedback" id="csawesome2_2_AP2-2-4_opt_d"><div class="para" id="AP2-2-4-2-4-2-1">The call to the constructor is missing.</div></li><li data-component="answer" id="csawesome2_2_AP2-2-4_opt_e"><div class="para" id="AP2-2-4-2-5-1-1">Liquid l = Liquid(98.6);</div></li><li data-component="feedback" id="csawesome2_2_AP2-2-4_opt_e"><div class="para" id="AP2-2-4-2-5-2-1">The keyword new is missing.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.26.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP2-3-3" data-multipleanswers="false"><div class="para" id="AP2-3-3-1-1">2-14-5:  Consider the following class. Assume that the Liquid object liquid has been properly declared and initialized in a method in a class other than Liquid.  Which of the following statements are valid?</div> <blockquote class="blockquote" id="AP2-3-3-1-2"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Liquid
{
    private double boilingPoint;
    private double freezingPoint;
    private double currentTemp;

    public Liquid(double b)
    {
        boilingPoint = b;
    }

    void lowerTemp()
    {
        currentTemp -= 10;
    }

    void raiseTemp()
    {
        currentTemp += 10;
    }

    void freeze()
    {
        currentTemp = freezingPoint;
    }
}
</code></pre></div></blockquote><li data-component="answer" id="csawesome2_2_AP2-3-3_opt_a"><div class="para" id="AP2-3-3-2-1-1-1">liquid.freeze(80);</div></li><li data-component="feedback" id="csawesome2_2_AP2-3-3_opt_a"><div class="para" id="AP2-3-3-2-1-2-1">Method freeze() does not have parameters.</div></li><li data-component="answer" id="csawesome2_2_AP2-3-3_opt_b" data-correct=""><div class="para" id="AP2-3-3-2-2-1-1">liquid.freeze();</div></li><li data-component="feedback" id="csawesome2_2_AP2-3-3_opt_b"><div class="para" id="AP2-3-3-2-2-2-1">Correct</div></li><li data-component="answer" id="csawesome2_2_AP2-3-3_opt_c"><div class="para" id="AP2-3-3-2-3-1-1">liquid.increaseTemp();</div></li><li data-component="feedback" id="csawesome2_2_AP2-3-3_opt_c"><div class="para" id="AP2-3-3-2-3-2-1">There is no method increaseTemp() in the Liquid class definition.</div></li><li data-component="answer" id="csawesome2_2_AP2-3-3_opt_d"><div class="para" id="AP2-3-3-2-4-1-1">liquidfreeze();</div></li><li data-component="feedback" id="csawesome2_2_AP2-3-3_opt_d"><div class="para" id="AP2-3-3-2-4-2-1">The dot operator is required between the object name and the method name.</div></li><li data-component="answer" id="csawesome2_2_AP2-3-3_opt_e"><div class="para" id="AP2-3-3-2-5-1-1">liquid.freeze;</div></li><li data-component="feedback" id="csawesome2_2_AP2-3-3_opt_e"><div class="para" id="AP2-3-3-2-5-2-1">Parentheses are required after a method name.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.26.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP2-3-4" data-multipleanswers="false"><div class="para" id="AP2-3-4-1-1">2-14-6: Consider the following class definition.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Dog
{
    public void bark()
    {
        System.out.print("Woof ");
    }

    public void wag()
    {
        System.out.print("Wag Tail ");
    }

    public void happy()
    {
        wag();
        bark();
    }
    /* Constructors not shown */
}
</code></pre></div> <div class="para" id="AP2-3-4-1-3">Which of the following code segments, if located in a method in a class other than Dog, will cause the message “Wag Tail Wag Tail Woof ” to be printed?</div><li data-component="answer" id="csawesome2_2_AP2-3-4_opt_a"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">Dog a = new Dog();
a.bark();
a.wag();
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP2-3-4_opt_a"><div class="para" id="AP2-3-4-2-1-2-1">This would print “Woof Wag Tail “</div></li><li data-component="answer" id="csawesome2_2_AP2-3-4_opt_b"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">Dog a = new Dog();
Dog.happy();
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP2-3-4_opt_b"><div class="para" id="AP2-3-4-2-2-2-1">You must use the object a, not the class name Dog, to call its methods.</div></li><li data-component="answer" id="csawesome2_2_AP2-3-4_opt_c"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">Dog a = new Dog();
a.happy();
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP2-3-4_opt_c"><div class="para" id="AP2-3-4-2-3-2-1">This would print out “Wag Tail Woof “.</div></li><li data-component="answer" id="csawesome2_2_AP2-3-4_opt_d" data-correct=""><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">Dog a = new Dog();
a.wag();
a.happy();
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP2-3-4_opt_d"><div class="para" id="AP2-3-4-2-4-2-1">This would print out “Wag Tail Wag Tail Woof “;</div></li><li data-component="answer" id="csawesome2_2_AP2-3-4_opt_e"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">Dog a = new Dog();
a.wag();
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP2-3-4_opt_e"><div class="para" id="AP2-3-4-2-5-2-1">This would just print “Wag Tail “.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.26.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP2-4-3" data-multipleanswers="false"><div class="para" id="AP2-4-3-1-1">2-14-7: Consider the following methods, which appear in the same class.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public void celsiusToFahrenheit(double cTemp)
{
    double fTemp = (cTemp * 9)/5 + 32;
    printTemperature(cTemp, fTemp);
}

public void printTemperature(double celsius, double fahrenheit)
{
    System.out.print(celsius + "--&gt;" + fahrenheit);
}
</code></pre></div> <div class="para" id="AP2-4-3-1-3">Assume that the method call <code class="code-inline tex2jax_ignore">celsiusToFahrenheit(5)</code> appears in a method in the same class. What is printed as a result of the method call?</div><li data-component="answer" id="csawesome2_2_AP2-4-3_opt_a"><div class="para" id="AP2-4-3-2-1-1-1">5.0 –&gt; 77.0</div></li><li data-component="feedback" id="csawesome2_2_AP2-4-3_opt_a"><div class="para" id="AP2-4-3-2-1-2-1">(5 * 9)/5 + 32 = 41</div></li><li data-component="answer" id="csawesome2_2_AP2-4-3_opt_b"><div class="para" id="AP2-4-3-2-2-1-1">41 –&gt; 5</div></li><li data-component="feedback" id="csawesome2_2_AP2-4-3_opt_b"><div class="para" id="AP2-4-3-2-2-2-1">Notice the order of parameters in printTemperature.</div></li><li data-component="answer" id="csawesome2_2_AP2-4-3_opt_c"><div class="para" id="AP2-4-3-2-3-1-1">celsius –&gt; fahrenheit</div></li><li data-component="feedback" id="csawesome2_2_AP2-4-3_opt_c"><div class="para" id="AP2-4-3-2-3-2-1">These are variables and their values would be printed.</div></li><li data-component="answer" id="csawesome2_2_AP2-4-3_opt_d"><div class="para" id="AP2-4-3-2-4-1-1">5 –&gt; 33.8</div></li><li data-component="feedback" id="csawesome2_2_AP2-4-3_opt_d"><div class="para" id="AP2-4-3-2-4-2-1">(5 * 9)/5 + 32 = 41</div></li><li data-component="answer" id="csawesome2_2_AP2-4-3_opt_e" data-correct=""><div class="para" id="AP2-4-3-2-5-1-1">5.0 –&gt; 41.0</div></li><li data-component="feedback" id="csawesome2_2_AP2-4-3_opt_e"><div class="para" id="AP2-4-3-2-5-2-1">Correct! (5 * 9)/5 + 32 = 41 and doubles print out with .0 at the end.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.26.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP2-4-4" data-multipleanswers="false"><div class="para" id="AP2-4-4-1-1">2-14-8: Consider the following methods, which appear in the same class.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public void calculatePizzaOrder(int numOfPeople, int slicesPerPerson)
{
    int numOfPizzas = (numOfPeople * slicesPerPerson)/8;
    /* INSERT CODE HERE */
}

public void printOrder(int number)
{
    System.out.println("Order " + number + " pizzas ");
}
</code></pre></div> <div class="para" id="AP2-4-4-1-3">What of the following lines would go into <code class="code-inline tex2jax_ignore">/* INSERT CODE HERE */</code> in line 4 in order to call the <code class="code-inline tex2jax_ignore">printOrder</code> method to print the number of pizzas to order correctly?</div><li data-component="answer" id="csawesome2_2_AP2-4-4_opt_a" data-correct=""><div class="para" id="AP2-4-4-2-1-1-1">printOrder(numOfPizzas);</div></li><li data-component="feedback" id="csawesome2_2_AP2-4-4_opt_a"><div class="para" id="AP2-4-4-2-1-2-1">Correct! If you had 8 people who want to eat 2 pizza slices each, numOfPizzas would be 8*2/8 = 2 pizzas, and printOrder would print out “Order 2 pizzas”.</div></li><li data-component="answer" id="csawesome2_2_AP2-4-4_opt_b"><div class="para" id="AP2-4-4-2-2-1-1">printOrder(numOfPeople);</div></li><li data-component="feedback" id="csawesome2_2_AP2-4-4_opt_b"><div class="para" id="AP2-4-4-2-2-2-1">This would always print out an order of how many people you have instead of how many calculated pizzas.</div></li><li data-component="answer" id="csawesome2_2_AP2-4-4_opt_c"><div class="para" id="AP2-4-4-2-3-1-1">printOrder(2);</div></li><li data-component="feedback" id="csawesome2_2_AP2-4-4_opt_c"><div class="para" id="AP2-4-4-2-3-2-1">This would always print out “Order 2 pizzas” instead of the calculated number of pizzas.</div></li><li data-component="answer" id="csawesome2_2_AP2-4-4_opt_d"><div class="para" id="AP2-4-4-2-4-1-1">printOrder(slicesPerPerson);</div></li><li data-component="feedback" id="csawesome2_2_AP2-4-4_opt_d"><div class="para" id="AP2-4-4-2-4-2-1">This would always print out an order of how many slices per person instead of how many calculated pizzas.</div></li><li data-component="answer" id="csawesome2_2_AP2-4-4_opt_e"><div class="para" id="AP2-4-4-2-5-1-1">calculatePizzaOrder(numOfPizzas);</div></li><li data-component="feedback" id="csawesome2_2_AP2-4-4_opt_e"><div class="para" id="AP2-4-4-2-5-2-1">This would not call the printOrder method.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.26.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP2-5-3" data-multipleanswers="false"><div class="para" id="AP2-5-3-1-1">2-14-9: Consider the following method in the Movie class.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public double calculateMovieRating(int numOfPeople, double rating)
{ /*implementation not shown */}
</code></pre></div> <div class="para" id="AP2-5-3-1-3">Which of the following lines of code, if located in a method in the same class as calculateMovieRating, will compile without an error?</div><li data-component="answer" id="csawesome2_2_AP2-5-3_opt_a"><div class="para" id="AP2-5-3-2-1-1-1">int result = calculateMovieRating(234, null);</div></li><li data-component="feedback" id="csawesome2_2_AP2-5-3_opt_a"><div class="para" id="AP2-5-3-2-1-2-1">The method returns a double which cannot be saved in an int variable.</div></li><li data-component="answer" id="csawesome2_2_AP2-5-3_opt_b"><div class="para" id="AP2-5-3-2-2-1-1">double result = calculateMovieRating(100.0, 3.0);</div></li><li data-component="feedback" id="csawesome2_2_AP2-5-3_opt_b"><div class="para" id="AP2-5-3-2-2-2-1">The first parameter must be an int.</div></li><li data-component="answer" id="csawesome2_2_AP2-5-3_opt_c"><div class="para" id="AP2-5-3-2-3-1-1">int result = calculateMovieRating(455, false);</div></li><li data-component="feedback" id="csawesome2_2_AP2-5-3_opt_c"><div class="para" id="AP2-5-3-2-3-2-1">The method returns a double which cannot be saved in an int variable.</div></li><li data-component="answer" id="csawesome2_2_AP2-5-3_opt_d" data-correct=""><div class="para" id="AP2-5-3-2-4-1-1">double result = calculateMovieRating(10, 4.0);</div></li><li data-component="feedback" id="csawesome2_2_AP2-5-3_opt_d"><div class="para" id="AP2-5-3-2-4-2-1">Correct.</div></li><li data-component="answer" id="csawesome2_2_AP2-5-3_opt_e"><div class="para" id="AP2-5-3-2-5-1-1">double result = calculateMovieRating(10);</div></li><li data-component="feedback" id="csawesome2_2_AP2-5-3_opt_e"><div class="para" id="AP2-5-3-2-5-2-1">The method has 2 parameters.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1.26.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP2-5-4" data-multipleanswers="false"><div class="para" id="AP2-5-4-1-1">2-14-10: Consider the following methods, which appear in the same class.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public int oneThing(int i, int j)
{
    return i * j;
}

public int anotherThing(int i, int j)
{
    return i / j;
}
</code></pre></div> <div class="para" id="AP2-5-4-1-3">Which of the following statements, if located in a method in the same class, will initialize the variable x to 22?</div><li data-component="answer" id="csawesome2_2_AP2-5-4_opt_a" data-correct=""><div class="para" id="AP2-5-4-2-1-1-1">int x = oneThing(2, 10) + anotherThing(5, 2);</div></li><li data-component="feedback" id="csawesome2_2_AP2-5-4_opt_a"><div class="para" id="AP2-5-4-2-1-2-1">oneThing(2,10) returns 2*10 = 20 and anotherThing(5,2) returns 5/2 = 2.5 truncated to 2 with integer division, which adds up to 22.</div></li><li data-component="answer" id="csawesome2_2_AP2-5-4_opt_b"><div class="para" id="AP2-5-4-2-2-1-1">int x = oneThing(10, 2) + anotherThing(2, 5);</div></li><li data-component="feedback" id="csawesome2_2_AP2-5-4_opt_b"><div class="para" id="AP2-5-4-2-2-2-1">This would return 20 + 0 (which is 0.4 truncated) = 20.</div></li><li data-component="answer" id="csawesome2_2_AP2-5-4_opt_c"><div class="para" id="AP2-5-4-2-3-1-1">int x = oneThing(2, 10) + anotherThing(3, 2);</div></li><li data-component="feedback" id="csawesome2_2_AP2-5-4_opt_c"><div class="para" id="AP2-5-4-2-3-2-1">This would return 20 + 1 (which is 1.5 truncated) = 21.</div></li><li data-component="answer" id="csawesome2_2_AP2-5-4_opt_d"><div class="para" id="AP2-5-4-2-4-1-1">int x = oneThing(6, 3) + anotherThing(2, 10);</div></li><li data-component="feedback" id="csawesome2_2_AP2-5-4_opt_d"><div class="para" id="AP2-5-4-2-4-2-1">This would return 18 + 0 = 18.</div></li><li data-component="answer" id="csawesome2_2_AP2-5-4_opt_e"><div class="para" id="AP2-5-4-2-5-1-1">int x = oneThing(0, 2) + anotherThing(20, 1);</div></li><li data-component="feedback" id="csawesome2_2_AP2-5-4_opt_e"><div class="para" id="AP2-5-4-2-5-2-1">This would return (0 * 2 = 0) + (20/1 = 20) = 20.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>java-swing-guis-optional</id>
      <title>Java Swing GUIs (optional)</title>
    </subchapter>
    <subchapter>
      <id>unit-1-free-response-question-frq-practice</id>
      <title>Unit 1 Free Response Question (FRQ) Practice</title>
      <question>
        <label>Exercise 1.28.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_frq-simple-game-score">
                <div class="ac_question" id="csawesome2_2_frq-simple-game-score_question">
                  <div class="para" id="frq-simple-game-score-1-1">In the main method, declare 3 objects of the <code class="code-inline tex2jax_ignore">Level</code> class called <code class="code-inline tex2jax_ignore">level1</code>, <code class="code-inline tex2jax_ignore">level2</code>, and <code class="code-inline tex2jax_ignore">level3</code> with the following points and goals: 100 points and true, 100 points and true, and 200 points and true. Then, calculate the score for the game by adding the points from each level using their <code class="code-inline tex2jax_ignore">getPoints()</code> method, but double the level 2 points and triple the level 3 points.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_frq-simple-game-score_editor" data-question_label="" data-codelens="true">public class Game
{
    public static void main(String[] args)
    {
        // 1. Declare 3 objects of the Level class called level1, level2, and level3
        // with the following points and goals: 100 points and true,
        // 100 points and true,
        // and 200 points and true

        int score = 0;

        // 2. Calculate the score for the game by adding the points
        // from each level using their getPoints() method
        // but double the level 2 points and triple the level 3 points



        System.out.println("Score is " + score);
    }
}

/* The Level class: do not change */
class Level
{
    private int points;
    private boolean goal;

    /** Constructor for the Level class */
    public Level(int p, boolean g)
    {
        points = p;
        goal = g;
    }

    /** Returns true if the player reached the goal on this level and returns false otherwise */
    public boolean goalReached()
    { return goal; }

    /** Returns the number of points recorded for this level */
    public int getPoints()
    { return points; }
}
====
import static org.junit.Assert.*;
import org.junit.*;
import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
   public RunestoneTests()
   {
       super("Game");
   }
   @Test
   public void testMain() throws IOException
   {
       String output = getMethodOutput("main");
       String expect = "900";

       boolean passed = getResults(expect, output, "Output from main");
       assertTrue(passed);
   }
   @Test
   public void checkCodeContains0()
   {
       boolean passed = checkCodeContains(
        "call to constructor new Level(100,true)", "new Level(100,true)");
       assertTrue(passed);
   }
   @Test
   public void checkCodeContains1()
   {
       boolean passed = checkCodeContains(
        "call to level3.getPoints()", "level3.getPoints()");
       assertTrue(passed);
   }
    @Test
   public void checkCodeContains2()
   {
       boolean passed = checkCodeContains(
         "3* to triple the level 3 points", "3*");
       assertTrue(passed);
   }

   }
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
  </chapter>
  <chapter>
    <id>csawesome2-6</id>
    <title>Selection and Iteration</title>
    <subchapter>
      <id>algorithms-with-selection-and-repetition</id>
      <title>Algorithms with Selection and Repetition</title>
      <question>
        <label>Exercise 2.1.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_clickSelection">
                <span data-question="">
                  <div class="para" id="clickSelection-1-1">Click on all of the selection (decision or branching) phrases in the following algorithm.</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="clickSelection-2-1">Selections are made based on a true or false decision. Look for the word "if" to identify selections.</div>
                </span>
                <pre>Morning routine:
<span data-incorrect="">1. Wake up.</span>
<span data-incorrect="">2. Snooze for 5 more minutes.</span>
<span data-incorrect="">3. Check your phone and the weather</span>
<span data-correct="">4. If there is a text from your friend, answer it.</span>
<span data-incorrect="">5. Brush teeth and shower.</span>
<span data-correct="">6. If it’s cold, wear a sweater.</span>
<span data-correct="">7. Check if you have homework due. If so, pack it in your bag.</span>
<span data-correct="">8. Put on your sunglasses if it’s sunny.</span>
<span data-incorrect="">9. Leave for school or work.</span>
</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.1.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_clickRepetition">
                <span data-question="">
                  <div class="para" id="clickRepetition-1-1">Click on all of the repetition phrases in the following algorithm.</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="clickRepetition-2-1">Repetition is when a process repeats itself until a desired outcome is reached. Look for the word "repeat" or "all" or "keep" to identify repetition.</div>
                </span>
                <pre>Morning routine 2:
<span data-incorrect="">1. Wake up.</span>
<span data-correct="">2. Snooze for 5 more minutes. Keep waking up and snoozing for the next 15 minutes</span>
<span data-correct="">3. If there is a text from your friend, answer it. Do this for all of your texts.</span>
<span data-incorrect="">4. Brush teeth and shower.</span>
<span data-incorrect="">5. If it’s cold, wear a sweater.</span>
<span data-incorrect="">6. Check if you have homework due. If so, pack it in your bag.</span>
<span data-correct="">7. Repeat packing items until your bag is ready.</span>
<span data-incorrect="">8. Leave for school or work.</span>
</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.1.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_algorithm-gift">
                <div class="parsons_question parsons-text">
                  <div class="para" id="algorithm-gift-1-1">Put the following pseudocode algorithm steps for buying a birthday gift for your friend in order. Make sure some of the steps are indented to be inside the repetition and that you buy the more expensive gifts first. Click on Check Me to see if you are right.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">Initialize *total* amount of money.
---
Repeat while still money in *total*:
---
   If total more than $25, buy a gift card and subtract 25 from total.
---
   If total more than $10, buy a small cake and subtract 10 from total.
---
   If total more than $5, buy some candy and subtract 5 from total.
---
   If total more than $1, buy a card and subtract 1 from total.
---
   Otherwise, give them the change.</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.1.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_trace-algorithm-gift1" data-multipleanswers="false">
                <div class="para" id="trace-algorithm-gift1-1-1">2-1-4: Given the pseudocode for buying a gift above, assume you have $16 to spend. What will be the outcome of the algorithm?</div>
                <li data-component="answer" id="csawesome2_2_trace-algorithm-gift1_opt_a">
                  <div class="para" id="trace-algorithm-gift1-2-1-1-1">You will buy a gift card, a small cake, some candy, and a card.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_trace-algorithm-gift1_opt_a">
                  <div class="para" id="trace-algorithm-gift1-2-1-2-1">Incorrect. You will not have enough money to buy all of these items.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_trace-algorithm-gift1_opt_b">
                  <div class="para" id="trace-algorithm-gift1-2-2-1-1">You will buy a small cake and some candy.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_trace-algorithm-gift1_opt_b">
                  <div class="para" id="trace-algorithm-gift1-2-2-2-1">You still have a $1 left.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_trace-algorithm-gift1_opt_c" data-correct="">
                  <div class="para" id="trace-algorithm-gift1-2-3-1-1">You will buy a small cake, some candy, and a card.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_trace-algorithm-gift1_opt_c">
                  <div class="para" id="trace-algorithm-gift1-2-3-2-1">Yep!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_trace-algorithm-gift1_opt_d">
                  <div class="para" id="trace-algorithm-gift1-2-4-1-1">You will buy 2 cakes and some candy.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_trace-algorithm-gift1_opt_d">
                  <div class="para" id="trace-algorithm-gift1-2-4-2-1">Incorrect. You will not have enough money to buy all of these items.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.1.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_trace-algorithm-gift2" data-multipleanswers="false">
                <div class="para" id="trace-algorithm-gift2-1-1">2-1-5: Given the pseudocode for buying a gift above, assume you have $22 to spend. What will be the outcome of the algorithm?</div>
                <li data-component="answer" id="csawesome2_2_trace-algorithm-gift2_opt_a">
                  <div class="para" id="trace-algorithm-gift2-2-1-1-1">You will give them a gift card, a small cake, some candy, and a card.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_trace-algorithm-gift2_opt_a">
                  <div class="para" id="trace-algorithm-gift2-2-1-2-1">Incorrect. You will not have enough money to buy all of these items.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_trace-algorithm-gift2_opt_b">
                  <div class="para" id="trace-algorithm-gift2-2-2-1-1">You will give them a small cake and some candy.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_trace-algorithm-gift2_opt_b">
                  <div class="para" id="trace-algorithm-gift2-2-2-2-1">You still have money left.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_trace-algorithm-gift2_opt_c">
                  <div class="para" id="trace-algorithm-gift2-2-3-1-1">You will give them a small cake, some candy, and a card.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_trace-algorithm-gift2_opt_c">
                  <div class="para" id="trace-algorithm-gift2-2-3-2-1">You still have money left.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_trace-algorithm-gift2_opt_d" data-correct="">
                  <div class="para" id="trace-algorithm-gift2-2-4-1-1">You will give them 2 cakes, a card, and $1.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_trace-algorithm-gift2_opt_d">
                  <div class="para" id="trace-algorithm-gift2-2-4-2-1">Yep! That’s a lot of cake!</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>boolean-expressions</id>
      <title>Boolean Expressions</title>
      <question>
        <label>Video: bO9bejT0jwE</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="bO9bejT0jwE" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.2.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_bool1">
                <div class="ac_question" id="csawesome2_2_bool1_question">
                  <div class="para" id="bool1-1-1">What will the code below print out? Try to guess before you run it! Note that 1 equal sign (<code class="code-inline tex2jax_ignore">=</code>) is used for assigning a value and 2 equal signs (<code class="code-inline tex2jax_ignore">==</code>) for testing values. Then, add 3 more lines of code that sets year to 15 and prints out whether age is equal to year and whether age is not equal to year.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_bool1_editor" data-question_label="" data-codelens="true">public class BoolTest1
{
    public static void main(String[] args)
    {
        int age = 15;
        int year = 14;
        // Will this print true or false?
        System.out.println(age == year);
        // Will this print true or false?
        System.out.println(age != year);

        // 1. Add code that sets year to 15
        // 2. Print out whether age equals year
        // 3. Print out whether age does not equal year

    }
}
====
// should pass if/when they run code
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "false\ntrue\ntrue\nfalse\n";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.2.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_boolRef">
                <div class="ac_question" id="csawesome2_2_boolRef_question">
                  <div class="para" id="boolRef-1-1">What will the code below print out? Try to guess before you run it! Then, add another Turtle friend2 and set it to juan. Does friend2 == juan? Does friend2 == friend? Print out the Boolean expressions for these.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_boolRef_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.util.*;

public class BoolTestRef
{
    public static void main(String[] args)
    {
        World world = new World(300, 300);
        Turtle juan = new Turtle(world);
        Turtle mia = new Turtle(world);

        // Will these print true or false?
        System.out.println(juan == mia);
        Turtle friend = mia; // set friend to be an alias for mia
        System.out.println(friend == mia);
        // Create another Turtle friend2 and set it to juan
        // Does friend2 == juan?
        // Does friend2 == friend?

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
       String output = getMethodOutput("main");
       String expect = "false\ntrue\ntrue\nfalse\n";
       boolean passed = getResults(expect, output, "Expected output from main", true);
       assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.2.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_bool2">
                <div class="ac_question" id="csawesome2_2_bool2_question">
                  <div class="para" id="bool2-1-1">Try to guess what the code below will print out before you run it. Then, set year to 15 and print the boolean expression for whether age is less than or equal to year.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_bool2_editor" data-question_label="" data-codelens="true">public class BoolTest2
{
    public static void main(String[] args)
    {
        int age = 15;
        int year = 14;
        // Will these print true or false?
        System.out.println(age &lt; year);
        System.out.println(age &gt; year);
        // 1. Set year to 15
        // 2. Print whether age is less than or equal to year

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "false\ntrue\ntrue\n";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
     @Test
     public void test1()
     {
         String code = "&lt;=";
         boolean passed = checkCodeContains(code);
         assertTrue(passed);
     }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.2.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_BooleanExps">
                <span data-subcomponent="question">
                  <div class="para" id="BooleanExps-1-1">Drag the boolean expression from the left and drop it on what it is testing on the right.  Click the "Check Me" button to see if you are correct.</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="BooleanExps-2-1">Review the relational operators above.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_BooleanExps_drag1">x &gt; 0</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_BooleanExps_drag1">x is positive</li>
                <li data-subcomponent="draggable" id="csawesome2_2_BooleanExps_drag2">x == y</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_BooleanExps_drag2">x equals y</li>
                <li data-subcomponent="draggable" id="csawesome2_2_BooleanExps_drag3">x &lt; 0</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_BooleanExps_drag3">x is negative</li>
                <li data-subcomponent="draggable" id="csawesome2_2_BooleanExps_drag4">x != y</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_BooleanExps_drag4">x does not equal y</li>
                <li data-subcomponent="draggable" id="csawesome2_2_BooleanExps_drag5">x &lt; y</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_BooleanExps_drag5">x is less than y</li>
                <li data-subcomponent="draggable" id="csawesome2_2_BooleanExps_drag6">x &gt; y</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_BooleanExps_drag6">x is greater than y</li>
                <li data-subcomponent="draggable" id="csawesome2_2_BooleanExps_drag7">x &gt;= y</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_BooleanExps_drag7">x is greater than or equal to y</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.2.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_boolRem">
                <div class="ac_question" id="csawesome2_2_boolRem_question">
                  <div class="para" id="boolRem-1-1">Try the expressions containing the % operator below to see how they can be used to check for even or odd numbers. All even numbers are divisible (with no remainder) by 2. Then, add another expression that tests to see if age1 is divisible by 3.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_boolRem_editor" data-question_label="" data-codelens="true">public class BoolRem
{
    public static void main(String[] args)
    {
        int age1 = 15;
        int age2 = 16;

        System.out.println("Remainder of " + age1 + "/2 is " + (age1 % 2));
        System.out.println("Remainder of " + age2 + "/2 is " + (age2 % 2));
        System.out.println("Is " + age1 + " even? " + (age1 % 2 == 0));
        System.out.println("Is " + age2 + " even? " + (age2 % 2 == 0));

        // Add a line that prints out whether age1 is divisible by 3

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "Remainder of 15/2 is 1\n"
                    + "Remainder of 16/2 is 0\n"
                    + "Is 15 even? false \n"
                    + "Is 16 even? true\ntrue\n";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
    @Test
    public void testBool() throws IOException
    {
        String target = "age1 % 3 == 0";
        boolean passed = checkCodeContains("boolean check for divisibility by 3", target);
        assertTrue(passed);
    }

}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.2.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-primeNumbers">
                <div class="ac_question" id="csawesome2_2_challenge-primeNumbers_question">
                  <div class="para" id="challenge-primeNumbers-1-1">Complete the methods below to determine if a number is positive, negative, odd, even, or divisible by another number by returning boolean expressions testing the argument number. Then, experiment with these methods to determine if the numbers 5, 6, and 7 are prime.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-primeNumbers_editor" data-question_label="" data-codelens="true">public class PrimeNumbers
{
    // isPositive checks whether number is greater than 0
    public static boolean isPositive(int number)
    {
        return (number &gt; 0);
    }

    public static boolean isNegative(int number)
    {
        // 1. Replace true with an expression that checks
        //    whether number is negative
        return true;
    }

    // isOdd checks whether number divided by 2
    // has a remainder.
    public static boolean isOdd(int number)
    {
        return (number % 2 != 0);
    }

    public static boolean isEven(int number)
    {
        // 2. Replace true with an expression that checks
        //    whether number is divisible by 2
        return true;
    }

    public static boolean isDivisible(int number, int divisor)
    {
        // 3. Replace true with an expression that checks
        //    whether number is divisible by divisor
        return true;
    }

    public static void main(String[] args)
    {
        // 4. Change number to experiment
        int number = 5;
        System.out.println("A prime number is only divisible by 1 and itself.");
        System.out.println(number + " is negative? " + isNegative(number));
        System.out.println(number + " is even? " + isEven(number));

        System.out.println("Divisible by 1? " + isDivisible(number,1) );
        System.out.println("Divisible by 2? " + isDivisible(number,2) );
        System.out.println("Divisible by 3? " + isDivisible(number,3) );
        System.out.println("Divisible by 4? " + isDivisible(number,4) );
        System.out.println("Divisible by 5? " + isDivisible(number,5) );

        // 5. Add 2 print statements with calls to isDivisible to check
        //    whether number is divisible by 6 and 7.

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
     @Test
     public void testBool1() throws IOException
     {
          String target = "number &lt; 0";
          boolean passed = checkCodeContains("boolean expression for isNegative", target);
          assertTrue(passed);
     }
   @Test
   public void testBool2() throws IOException
   {
       String target = "number % 2 == 0";
       boolean passed = checkCodeContains("boolean expression for isEven", target);
       assertTrue(passed);
   }

   @Test
   public void testBool3() throws IOException
   {
       String target = "number % divisor == 0";
       boolean passed = checkCodeContains("boolean expression for isDivisible", target);
       assertTrue(passed);
   }
   @Test
   public void testCall() throws IOException
   {
       String target = "isDivisible(number,7)";
       boolean passed = checkCodeContains("method call in main to isDivisible to see whether number is divisible by 7", target);
       assertTrue(passed);
   }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.2.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_prime1" data-multipleanswers="false">
                <div class="para" id="prime1-1-1">2-2-8: Is 5 prime?</div>
                <li data-component="answer" id="csawesome2_2_prime1_opt_a" data-correct="">
                  <div class="para" id="prime1-2-1-1-1">Yes, 5 is prime.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_prime1_opt_a">
                  <div class="para" id="prime1-2-1-2-1">5 is only divisible by 1 and 5, so it is prime.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_prime1_opt_b">
                  <div class="para" id="prime1-2-2-1-1">No, 5 is not prime.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_prime1_opt_b">
                  <div class="para" id="prime1-2-2-2-1">5 is only divisible by 1 and 5.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.2.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_prime2" data-multipleanswers="false">
                <div class="para" id="prime2-1-1">2-2-9: Is 6 prime?</div>
                <li data-component="answer" id="csawesome2_2_prime2_opt_a">
                  <div class="para" id="prime2-2-1-1-1">Yes, 6 is prime.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_prime2_opt_a">
                  <div class="para" id="prime2-2-1-2-1">A prime number is only divisible by 1 and itself. 6 is divisible by 1, 2, 3, and 6.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_prime2_opt_b" data-correct="">
                  <div class="para" id="prime2-2-2-1-1">No, 6 is not prime.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_prime2_opt_b">
                  <div class="para" id="prime2-2-2-2-1">6 is divisible by 1, 2, 3, and 6, so it is not prime.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.2.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_prime3" data-multipleanswers="false">
                <div class="para" id="prime3-1-1">2-2-10: Is 7 prime?</div>
                <li data-component="answer" id="csawesome2_2_prime3_opt_a" data-correct="">
                  <div class="para" id="prime3-2-1-1-1">Yes, 7 is prime.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_prime3_opt_a">
                  <div class="para" id="prime3-2-1-2-1">7 is only divisible by 1 and 7, so it is prime.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_prime3_opt_b">
                  <div class="para" id="prime3-2-2-1-1">No, 7 is not prime.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_prime3_opt_b">
                  <div class="para" id="prime3-2-2-2-1">7 is only divisible by 1 and 7.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.2.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_prime4">
                <div class="para" id="prime4-1-1">2-2-11: Are all odd numbers prime? Can you find an odd number that is not prime by using your code above? What is the smallest odd number that is not prime and has divisors other than 1 and itself? <input type="text" placeholder="Text"/></div>
                <script type="application/json">[[{"regex": "^\\s*^\\s*^9$\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"prime4-2-1-1-1-1\"&gt;Yes, 9 is not prime because it is divisible by 3.&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"prime4-2-1-2-1-1\"&gt;Try numbers 3-10 in your code.&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.2.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_prime5">
                <div class="para" id="prime5-1-1">2-2-12:  Are all even numbers not prime? Can you find an even prime number using your code above? What is the smallest even number that is prime? <input type="text" placeholder="Text"/></div>
                <script type="application/json">[[{"regex": "^\\s*^\\s*^2$\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"prime5-2-1-1-1-1\"&gt;Yes, 2 is prime because it is only divisible by 1 and 2.&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"prime5-2-1-2-1-1\"&gt;Try numbers 2-10 in your code.&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.2.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP2-2-1" data-multipleanswers="false"><div class="para" id="AP2-2-1-1-1">2-2-13: Consider the following statement.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">boolean x = (5 % 3 == 0) == (3 &gt; 5);
</code></pre></div> <div class="para" id="AP2-2-1-1-3">What is the value of x after the statement has been executed?</div><li data-component="answer" id="csawesome2_2_AP2-2-1_opt_a"><div class="para" id="AP2-2-1-2-1-1-1">false</div></li><li data-component="feedback" id="csawesome2_2_AP2-2-1_opt_a"><div class="para" id="AP2-2-1-2-1-2-1">Although both sides of the middle == are false, false == false is true! Tricky!</div></li><li data-component="answer" id="csawesome2_2_AP2-2-1_opt_b" data-correct=""><div class="para" id="AP2-2-1-2-2-1-1">true</div></li><li data-component="feedback" id="csawesome2_2_AP2-2-1_opt_b"><div class="para" id="AP2-2-1-2-2-2-1">(5 % 3 == 0) is false and (3 &gt; 5) is false, and false == false is true! Tricky!</div></li><li data-component="answer" id="csawesome2_2_AP2-2-1_opt_c"><div class="para" id="AP2-2-1-2-3-1-1">(5 % 3 == 0)</div></li><li data-component="feedback" id="csawesome2_2_AP2-2-1_opt_c"><div class="para" id="AP2-2-1-2-3-2-1">The boolean x should hold true or false.</div></li><li data-component="answer" id="csawesome2_2_AP2-2-1_opt_d"><div class="para" id="AP2-2-1-2-4-1-1">(3 &gt; 5)</div></li><li data-component="feedback" id="csawesome2_2_AP2-2-1_opt_d"><div class="para" id="AP2-2-1-2-4-2-1">The boolean x should hold true or false.</div></li><li data-component="answer" id="csawesome2_2_AP2-2-1_opt_e"><div class="para" id="AP2-2-1-2-5-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_AP2-2-1_opt_e"><div class="para" id="AP2-2-1-2-5-2-1">The boolean x should hold true or false.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.2.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP2-2-2" data-multipleanswers="true"><div class="para" id="AP2-2-2-1-1">2-2-14: Consider the following Boolean expression in which the int variables x and y have been properly declared and initialized.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">(x &gt;= 10) == (y &lt; 12)
</code></pre></div> <div class="para" id="AP2-2-2-1-3">Which of the following values for x and y will result in the expression evaluating to true  ?</div><li data-component="answer" id="csawesome2_2_AP2-2-2_opt_a"><div class="para" id="AP2-2-2-2-1-1-1">x = 10 and y = 12</div></li><li data-component="feedback" id="csawesome2_2_AP2-2-2_opt_a"><div class="para" id="AP2-2-2-2-1-2-1">The left side is true, but y must be less than 12 to make the right side true.</div></li><li data-component="answer" id="csawesome2_2_AP2-2-2_opt_b"><div class="para" id="AP2-2-2-2-2-1-1">x = 9 and y = 9</div></li><li data-component="feedback" id="csawesome2_2_AP2-2-2_opt_b"><div class="para" id="AP2-2-2-2-2-2-1">The left side is false (x must be greater than or equal to 10), but the right side is true.</div></li><li data-component="answer" id="csawesome2_2_AP2-2-2_opt_c" data-correct=""><div class="para" id="AP2-2-2-2-3-1-1">x = 10 and y = 11</div></li><li data-component="feedback" id="csawesome2_2_AP2-2-2_opt_c"><div class="para" id="AP2-2-2-2-3-2-1">Correct! Both sides are true!</div></li><li data-component="answer" id="csawesome2_2_AP2-2-2_opt_d"><div class="para" id="AP2-2-2-2-4-1-1">x = 10 and y = 13</div></li><li data-component="feedback" id="csawesome2_2_AP2-2-2_opt_d"><div class="para" id="AP2-2-2-2-4-2-1">The left side is true, but y must be less than 12 to make the right side true.</div></li><li data-component="answer" id="csawesome2_2_AP2-2-2_opt_e" data-correct=""><div class="para" id="AP2-2-2-2-5-1-1">x = 9 and y = 12</div></li><li data-component="feedback" id="csawesome2_2_AP2-2-2_opt_e"><div class="para" id="AP2-2-2-2-5-2-1">Correct! Both sides are false! This is tricky!</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>if-statements</id>
      <title>if Statements</title>
      <question>
        <label>Exercise 2.3.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_if-raining">
                <div class="ac_question" id="csawesome2_2_if-raining_question">
                  <div class="para" id="if-raining-1-1">The variable <code class="code-inline tex2jax_ignore">isRaining</code> is a boolean variable that is either true or false. If it is true then the message <code class="code-inline tex2jax_ignore">Take an umbrella!</code> will be printed and then execution will continue with the next statement which will print <code class="code-inline tex2jax_ignore">Drive carefully</code>. Run the code below to see this.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_if-raining_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        boolean isRaining = true;
        if (isRaining)
        {
            System.out.println("Take an umbrella!");
        }
        System.out.println("Drive carefully");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Take an umbrella! \nDrive carefully";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.3.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_iffalseOutput">
                <div class="para" id="iffalseOutput-1-1">2-3-2: Try changing the code above to <code class="code-inline tex2jax_ignore">boolean isRaining = false;</code>.  What will it print? <input type="text" placeholder="Text"/></div>
                <script type="application/json">[[{"regex": "^\\s*^\\s*^Drive\\s+carefully$\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"iffalseOutput-2-1-1-1-1\"&gt;Correct.  If the boolean is false, it will skip executing the print statement after the if.&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"iffalseOutput-2-1-2-1-1\"&gt;Try it and see&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.3.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_if-relational">
                <div class="ac_question" id="csawesome2_2_if-relational_question">
                  <div class="para" id="if-relational-1-1">Run the following active code a couple times until you see all the possible outputs. It prints out whether a random number is positive or equal to 0. Add another if statement that tests if it is a negative number.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_if-relational_editor" data-question_label="" data-codelens="true">public class TestNumbers
{
    public static void main(String[] args)
    {
        // Get a random number from -10 up to 10.
        int number = (int) (Math.random() * 21) - 10;
        System.out.println("The number is " + number);

        // is it positive?
        if (number &gt; 0)
        {
            System.out.println(number + " is positive!");
        }
        // is it 0?
        if (number == 0)
        {
            System.out.println(number + " is zero!");
        }
        // is it negative?
        // Add another if statement

    }
}
====
import static org.junit.Assert.*;

import org.junit.Test;

import java.io.*;
import java.util.regex.MatchResult;
import java.util.regex.Pattern;

public class RunestoneTests extends CodeTestHelper
{

    @Test
    public void testPositive()
    {
        String output = "";
        int num = -999, count = 0;

        while (num &lt;= 0 &amp;&amp; count &lt; 50)
        {
            output = getMethodOutput("main");
            num = getNumber(output);
            count++;

            if (num == 9999999)
            {
                getResults(
                        "The number is ##\n## is positive!",
                        output,
                        "Did you forget to print the number?",
                        false);
                assertTrue(false);
                return;
            }
        }

        String expect = "The number is " + num + "\n" + num + " is positive!";

        boolean passed = output.contains("positive");
        getResults(expect, output, "Testing positive numbers", passed);
        assertTrue(passed);
    }

    @Test
    public void testZero()
    {
        String output = "";
        int num = -999, count = 0;

        while (num != 0 &amp;&amp; count &lt; 50)
        {
            output = getMethodOutput("main");
            num = getNumber(output);
            count++;

            if (num == 9999999)
            {
                getResults(
                        "The number is ##\n## is zero!",
                        output,
                        "Did you forget to print the number?",
                        false);
                assertTrue(false);
                return;
            }
        }

        String expect = "The number is " + num + "\n" + num + " is zero!";

        boolean passed = output.contains("zero");
        getResults(expect, output, "Testing zero", passed);
        assertTrue(passed);
    }

    @Test
    public void testNegative()
    {
        String output = "";
        int num = 999, count = 0;

        while (num &gt;= 0 &amp;&amp; count &lt; 50)
        {
            output = getMethodOutput("main");
            num = getNumber(output);
            count++;

            if (num == 9999999)
            {
                getResults(
                        "The number is ##\n## is negative!",
                        output,
                        "Did you forget to print the number?",
                        false);
                assertTrue(false);
                return;
            }
        }

        String expect = "The number is " + num + "\n" + num + " is negative!";

        boolean passed = output.contains("negative");
        getResults(expect, output, "Testing negative numbers", passed);
        assertTrue(passed);
    }

    private int getNumber(String output)
    {
        String regex = "[0-9]+";

        String[] matches =
                Pattern.compile(regex)
                        .matcher(output)
                        .results()
                        .map(MatchResult::group)
                        .toArray(String[]::new);

        int num = 9999999;

        if (matches.length &gt; 0)
        {
            num = Integer.parseInt(matches[0]);
        }

        if (output.contains("-"))
        {
            num *= -1;
        }

        return num;
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.3.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mcq-if-trace" data-multipleanswers="false"><div class="para" id="mcq-if-trace-1-1">2-3-4: Consider the following code segment. What is printed as a result of executing the code segment?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int x = 3;
if (x &gt; 2)
{
   x = x * 2;
}
if (x &gt; 4)
{
   x = 0;
}
System.out.print(x);
</code></pre></div><li data-component="answer" id="csawesome2_2_mcq-if-trace_opt_a"><div class="para" id="mcq-if-trace-2-1-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_mcq-if-trace_opt_a"><div class="para" id="mcq-if-trace-2-1-2-1">x is changed by the if statements.</div></li><li data-component="answer" id="csawesome2_2_mcq-if-trace_opt_b"><div class="para" id="mcq-if-trace-2-2-1-1">6</div></li><li data-component="feedback" id="csawesome2_2_mcq-if-trace_opt_b"><div class="para" id="mcq-if-trace-2-2-2-1">What happens when x is greater than 2 and then greater than 4? Do both if statements.</div></li><li data-component="answer" id="csawesome2_2_mcq-if-trace_opt_c" data-correct=""><div class="para" id="mcq-if-trace-2-3-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_mcq-if-trace_opt_c"><div class="para" id="mcq-if-trace-2-3-2-1">If x is greater than 2, it’s always doubled, and then that result is always greater than 4, so it’s set to 0 in the second if statement.</div></li><li data-component="answer" id="csawesome2_2_mcq-if-trace_opt_d"><div class="para" id="mcq-if-trace-2-4-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_mcq-if-trace_opt_d"><div class="para" id="mcq-if-trace-2-4-2-1">x is changed by the if statements.</div></li><li data-component="answer" id="csawesome2_2_mcq-if-trace_opt_e"><div class="para" id="mcq-if-trace-2-5-1-1">The code will not compile</div></li><li data-component="feedback" id="csawesome2_2_mcq-if-trace_opt_e"><div class="para" id="mcq-if-trace-2-5-2-1">This code will compile.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.3.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ifHeads">
                <div class="ac_question" id="csawesome2_2_ifHeads_question">
                  <div class="para" id="ifHeads-1-1">Try the following code. If <code class="code-inline tex2jax_ignore">isHeads</code> is true it will print <code class="code-inline tex2jax_ignore">Let's go to the game</code> and then <code class="code-inline tex2jax_ignore">after conditional</code>.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ifHeads_editor" data-question_label="" data-codelens="true">public class Test2
{
    public static void main(String[] args)
    {
        boolean isHeads = true;
        if (isHeads)
        {
            System.out.println("Let's go to the game");
        }
        else
        {
            System.out.println("Let's watch a movie");
        }
        System.out.println("after conditional");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Let's go to the game\nafter conditional";

        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.3.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_falseElse">
                <div class="para" id="falseElse-1-1">2-3-6: Try changing the code above to <code class="code-inline tex2jax_ignore">boolean isHeads = false;</code>.  What line will be printed before the <code class="code-inline tex2jax_ignore">after conditional</code>? <input type="text" placeholder="Text"/></div>
                <script type="application/json">[[{"regex": "^\\s*^\\s*^Let's\\s+watch\\s+a\\s+movie$\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"falseElse-2-1-1-1-1\"&gt;Correct.  If the boolean value is false, the statement following the else will execute&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"falseElse-2-1-2-1-1\"&gt;Try it and see&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.3.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mcq-rnd-ifs" data-multipleanswers="true">
                <div class="para" id="mcq-rnd-ifs-1-1">2-3-10: The weather report says there is approximately 25% chance of rain today. Which of the following if statements would print Rain or No Rain to simulate a day with the correct percentages following the weather report?</div>
                <li data-component="answer" id="csawesome2_2_mcq-rnd-ifs_opt_a" data-correct="">
                  <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;">
                    <pre class="program">
                      <code class="language-java">if (Math.random() &lt; 0.25) { System.out.println("Rain"); }
</code>
                    </pre>
                  </div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq-rnd-ifs_opt_a">
                  <div class="para" id="mcq-rnd-ifs-2-1-2-1">Correct! This code will print “Rain” 25% of the time.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mcq-rnd-ifs_opt_b" data-correct="">
                  <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;">
                    <pre class="program">
                      <code class="language-java">if (Math.random() &gt; 0.75) { System.out.println("Rain"); }
</code>
                    </pre>
                  </div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq-rnd-ifs_opt_b">
                  <div class="para" id="mcq-rnd-ifs-2-2-2-1">Correct. This code will print “Rain” 25% (1 - .75) of the time.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mcq-rnd-ifs_opt_c">
                  <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;">
                    <pre class="program">
                      <code class="language-java">if (Math.random() &gt; 0.25) { System.out.println("Rain"); }
</code>
                    </pre>
                  </div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq-rnd-ifs_opt_c">
                  <div class="para" id="mcq-rnd-ifs-2-3-2-1">Incorrect. This code will print “Rain” 75% of the time.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mcq-rnd-ifs_opt_d" data-correct="">
                  <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;">
                    <pre class="program">
                      <code class="language-java">if (Math.random() &lt; 0.75) { System.out.println("No Rain"); }
</code>
                    </pre>
                  </div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mcq-rnd-ifs_opt_d">
                  <div class="para" id="mcq-rnd-ifs-2-4-2-1">Correct! This code will print “No Rain” 75% of the time, so it will rain 25% of the time.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.3.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_randomShapes">
                <div class="ac_question" id="csawesome2_2_randomShapes_question">
                  <div class="para" id="randomShapes-1-1">Add an if/else statement that uses Math.random() to do a coin flip to decide whether to call yertle.turnRight() or yertle.turnLeft. Run the code to see the turtle draw a random shape.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_randomShapes_editor" data-question_label="" data-codelens="true">import java.util.*;
import java.awt.*;

public class RandomTurns
{
    public static void main(String[] args)
    {
        World world = new World(500,400);
        Turtle yertle = new Turtle(world);

        // This is a loop that runs 10 times (you will learn to write loops in later lessons).
        for(int i = 1; i &lt;= 10; i++)
        {
            yertle.forward(20);

            // Write an if/else statement that uses
            // Math.random() to do a coin flip (50%) to choose
            // between yertle.turnRight() or turnLeft()






        } // end of loop
        world.show(true);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("RandomTurns");
    }

   @Test
   public void testCodeContainsIf()
   {
       boolean ifCheck = checkCodeContains("if", "if");
       assertTrue(ifCheck);
   }
   @Test
   public void testCodeContainsElse()
   {
       boolean ifCheck2 = checkCodeContains("else", "else");
       assertTrue(ifCheck2);
   }
   @Test
   public void testCodeContainsRandom()
   {
       boolean ifCheck2 = checkCodeContains("Math.Random()", "Math.random()");
       assertTrue(ifCheck2);
   }
   @Test
   public void testCodeContains5()
   {
       boolean ifCheck2 = checkCodeContains(".5", ".5");
       assertTrue(ifCheck2);
   }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.3.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_if-missing-curlies">
                <div class="ac_question" id="csawesome2_2_if-missing-curlies_question">
                  <div class="para" id="if-missing-curlies-1-1">The code below doesn’t work as expected.  Fix it to only print <code class="code-inline tex2jax_ignore">Wear a coat</code> and <code class="code-inline tex2jax_ignore">Wear gloves</code> when isCold is true.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_if-missing-curlies_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        boolean isCold = false;
        if (isCold = true);
            System.out.println("Wear a coat");
            System.out.println("Wear gloves");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "";
        boolean passed = getResults(expect, output, "Expected output from main if isCold is false");
        assertTrue(passed);
    }

    @Test
    public void testCountCurlies()
    {
        String code = getCode();
        int num = countOccurences(code, "{");
        boolean passed = num &gt;= 3;

        getResults("3", "" + num, "Number of {", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.3.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-Magic8ball">
                <div class="ac_question" id="csawesome2_2_challenge-Magic8ball_question">
                  <div class="para" id="challenge-Magic8ball-1-1">Complete the <code class="code-inline tex2jax_ignore">printRandomResponse()</code> method to print out 1 of 8 random responses and the <code class="code-inline tex2jax_ignore">lucky()</code> method to toss a coin and print out “Lucky!” or “No Luck!” based on the result. Run the code multiple times to see the responses.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-Magic8ball_editor" data-question_label="" data-codelens="true">public class Magic8Ball
{
    public static void printRandomResponse()
    {
        // 1. Get a random number from 1 to 8

        // 2. Use if statements to test the random number
        //    and print out 1 of 8 random responses

     }

     public static void lucky()
     {
         // 3. Use Math.random() to toss a coin to choose between 2 choices
         // 4. Use an if/else statement to test the random number
         //    and print out "Lucky!" or else "No Luck!"

     }

     public static void main(String[] args)
     {
         String question = "Will it rain tomorrow?";
         System.out.println(question);
         printRandomResponse();
         lucky();
     }
 }
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.util.ArrayList;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Magic8Ball");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");

        boolean passed = output.length() &gt; 0;

        passed =
                getResults(
                        "Output length &gt; 0",
                        "Output length of " + output.length(),
                        "Prints a statement",
                        passed);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String[] output = new String[200];

        for (int i = 0; i &lt; output.length; i++)
        {
            output[i] = getMethodOutput("main");
        }

        ArrayList&lt;String&gt; lines = new ArrayList&lt;String&gt;();

        for (int i = 0; i &lt; output.length; i++)
        {
            if (!lines.contains(output[i]))
            {
                lines.add(output[i]);
            }
        }

        int responses = lines.size();
        boolean passed = lines.size() &gt;= 8;

        passed = getResults("8", "" + responses, "Unique responses", passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCodeWithoutComments();

        int numIfs = countOccurences(code, "if");

        boolean passed = numIfs &gt;= 8;

        passed = getResults("8 or more", "" + numIfs, "Code has at least 8 if statements", passed);
        assertTrue(passed);
    }
    @Test
    public void testElse()
    {
        String expect = "else";
        boolean passed = checkCodeContains("else statement in lucky() method", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.3.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP2-3-1" data-multipleanswers="false"><div class="para" id="AP2-3-1-1-1">2-3-14: Consider the following code segment.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int speed = 35;
boolean rain = false;

if (rain)
{
   speed -= 10;
}

if (rain == false)
{
  speed += 5;
}

if (speed &gt; 35)
{
   speed = speed - 2;
}

System.out.println(speed);
</code></pre></div> <div class="para" id="AP2-3-1-1-3">What is printed as a result of executing the code segment?</div><li data-component="answer" id="csawesome2_2_AP2-3-1_opt_a"><div class="para" id="AP2-3-1-2-1-1-1">28</div></li><li data-component="feedback" id="csawesome2_2_AP2-3-1_opt_a"><div class="para" id="AP2-3-1-2-1-2-1">Some of the if statement conditions are false so they will not run.</div></li><li data-component="answer" id="csawesome2_2_AP2-3-1_opt_b"><div class="para" id="AP2-3-1-2-2-1-1">35</div></li><li data-component="feedback" id="csawesome2_2_AP2-3-1_opt_b"><div class="para" id="AP2-3-1-2-2-2-1">Take a look at the changes to speed in the if statements.</div></li><li data-component="answer" id="csawesome2_2_AP2-3-1_opt_c" data-correct=""><div class="para" id="AP2-3-1-2-3-1-1">38</div></li><li data-component="feedback" id="csawesome2_2_AP2-3-1_opt_c"><div class="para" id="AP2-3-1-2-3-2-1">Correct! The first if statement condition is false, and the second and third if conditions are true.</div></li><li data-component="answer" id="csawesome2_2_AP2-3-1_opt_d"><div class="para" id="AP2-3-1-2-4-1-1">25</div></li><li data-component="feedback" id="csawesome2_2_AP2-3-1_opt_d"><div class="para" id="AP2-3-1-2-4-2-1">The first if statement would only run if rain is true.</div></li><li data-component="answer" id="csawesome2_2_AP2-3-1_opt_e"><div class="para" id="AP2-3-1-2-5-1-1">33</div></li><li data-component="feedback" id="csawesome2_2_AP2-3-1_opt_e"><div class="para" id="AP2-3-1-2-5-2-1">The second if statement would run since rain is false.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.3.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP2-3-2" data-multipleanswers="false"><div class="para" id="AP2-3-2-1-1">2-3-15: Consider the following code segment.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int x = 5;

if (x &lt; 5)
{
   x = 3 * x;
}

if (x % 2 == 1)
{
   x = x / 2;
}

System.out.print(2*x + 1);
</code></pre></div> <div class="para" id="AP2-3-2-1-3">What is printed as a result of executing the code segment?</div><li data-component="answer" id="csawesome2_2_AP2-3-2_opt_a"><div class="para" id="AP2-3-2-2-1-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_AP2-3-2_opt_a"><div class="para" id="AP2-3-2-2-1-2-1">Take a look at the second if statement again!</div></li><li data-component="answer" id="csawesome2_2_AP2-3-2_opt_b"><div class="para" id="AP2-3-2-2-2-1-1">11</div></li><li data-component="feedback" id="csawesome2_2_AP2-3-2_opt_b"><div class="para" id="AP2-3-2-2-2-2-1">Take a look at the second if statement again!</div></li><li data-component="answer" id="csawesome2_2_AP2-3-2_opt_c"><div class="para" id="AP2-3-2-2-3-1-1">31</div></li><li data-component="feedback" id="csawesome2_2_AP2-3-2_opt_c"><div class="para" id="AP2-3-2-2-3-2-1">The first if statement condition is false.</div></li><li data-component="answer" id="csawesome2_2_AP2-3-2_opt_d"><div class="para" id="AP2-3-2-2-4-1-1">15</div></li><li data-component="feedback" id="csawesome2_2_AP2-3-2_opt_d"><div class="para" id="AP2-3-2-2-4-2-1">The first if statement condition is false.</div></li><li data-component="answer" id="csawesome2_2_AP2-3-2_opt_e" data-correct=""><div class="para" id="AP2-3-2-2-5-1-1">5</div></li><li data-component="feedback" id="csawesome2_2_AP2-3-2_opt_e"><div class="para" id="AP2-3-2-2-5-2-1">Correct! The first if statement is not true. The second one is true since 5 is odd, and x becomes 2. And 2*2 + 1 = 5 is printed out.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.3.18 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP2-3-if-else" data-multipleanswers="false"><div class="para" id="AP2-3-if-else-1-1">2-3-16: Consider the following code segment where a range of “High”, “Middle”, or “Low” is being determined where x is an int and a “High” is 80 and above, a “Middle” is between 50 - 79, and “Low” is below 50.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">if (x &gt;= 80)
{
   System.out.println("High");
}

if (x &gt;= 50)
{
  System.out.println("Middle");
}
else
{
   System.out.println("Low");
}
</code></pre></div> <div class="para" id="AP2-3-if-else-1-3">Which of the following initializations for <em class="emphasis">x</em> will demonstrate that the code segment will not work as intended?</div><li data-component="answer" id="csawesome2_2_AP2-3-if-else_opt_a" data-correct=""><div class="para" id="AP2-3-if-else-2-1-1-1">80</div></li><li data-component="feedback" id="csawesome2_2_AP2-3-if-else_opt_a"><div class="para" id="AP2-3-if-else-2-1-2-1">This would print out both “High” and “Middle”, showing that there is an error in the code. As you will see in the next lesson, one way to fix the code is to add another else in front of the second if.</div></li><li data-component="answer" id="csawesome2_2_AP2-3-if-else_opt_b"><div class="para" id="AP2-3-if-else-2-2-1-1">60</div></li><li data-component="feedback" id="csawesome2_2_AP2-3-if-else_opt_b"><div class="para" id="AP2-3-if-else-2-2-2-1">This would correctly print out “Middle”.</div></li><li data-component="answer" id="csawesome2_2_AP2-3-if-else_opt_c"><div class="para" id="AP2-3-if-else-2-3-1-1">50</div></li><li data-component="feedback" id="csawesome2_2_AP2-3-if-else_opt_c"><div class="para" id="AP2-3-if-else-2-3-2-1">This would correctly print out “Middle”.</div></li><li data-component="answer" id="csawesome2_2_AP2-3-if-else_opt_d"><div class="para" id="AP2-3-if-else-2-4-1-1">30</div></li><li data-component="feedback" id="csawesome2_2_AP2-3-if-else_opt_d"><div class="para" id="AP2-3-if-else-2-4-2-1">This would print out “Low” which is correct according to this problem description.</div></li><li data-component="answer" id="csawesome2_2_AP2-3-if-else_opt_e"><div class="para" id="AP2-3-if-else-2-5-1-1">-10</div></li><li data-component="feedback" id="csawesome2_2_AP2-3-if-else_opt_e"><div class="para" id="AP2-3-if-else-2-5-2-1">This would print out “Low” which is correct according to this problem description.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-6-5</id>
      <title>Multi-Selection: else-if Statements</title>
      <question>
        <label>Exercise 2.4.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge3-4-ElseIf-Adventure-autograde">
                <div class="ac_question" id="csawesome2_2_challenge3-4-ElseIf-Adventure-autograde_question">
                  <div class="para" id="challenge3-4-ElseIf-Adventure-autograde-1-1">Copy and paste your all of your code from replit.com and run to see if it passes the autograder tests. Include the link to your replit.com code in comments. Note that this code will only run with the autograder’s input and will not ask the user for input.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge3-4-ElseIf-Adventure-autograde_editor" data-question_label="" data-codelens="true">// Copy in your link to your code on replit.com here:
// Copy in all of your code from replit.com below (include import and public class
// Main)
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Main", input1.replaceAll(" ", "\n")); // For Book
    }

    private static int goal = 5;
    private static String input1 = "n s e w y y y y y y y y y y y y y y";
    private static String input2 = "s e w y n y y y y y y y y y y y y y";
    private static String input3 = "e w y n s y y y y y y y y y y y y y";
    private static String input4 = "w y n s e y y y y y y y y y y y y y";
    private static String input5 = "y n s e w y y y y y y y y y y y y y";
    private String output1, output2, output3, output4, output5;

    @Test
    public void test1()
    {
        String input = input1.replaceAll(" ", "\n");
        String output = getMethodOutputWithInput("main", input);
        output1 = output;

        String[] lines = output.split("\n");

        boolean passed = lines.length &gt;= goal;

        passed =
                getResults(
                        goal + "+ lines",
                        "" + lines.length + " lines",
                        "Outputs at least " + goal + " lines",
                        passed);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String input = input2.replaceAll(" ", "\n");
        String output = getMethodOutputWithInput("main", input);
        output2 = output;

        input = input3.replaceAll(" ", "\n");
        output = getMethodOutputWithInput("main", input);
        output3 = output;

        input = input4.replaceAll(" ", "\n");
        output = getMethodOutputWithInput("main", input);
        output4 = output;

        input = input5.replaceAll(" ", "\n");
        output = getMethodOutputWithInput("main", input);
        output5 = output;

        if (output1 == null)
        {
            input = input1.replaceAll(" ", "\n");
            output1 = getMethodOutputWithInput("main", input);
        }

        boolean passed =
                !output1.equals(output2)
                        &amp;&amp; !output1.equals(output3)
                        &amp;&amp; !output1.equals(output4)
                        &amp;&amp; !output1.equals(output5);

        passed =
                getResults(
                        "true",
                        "" + passed,
                        "Outputs different results for different inputs",
                        passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCode();
        int num = countOccurences(code, "if");
        boolean passed = num &gt;= 4;

        getResults("4", "" + num, "Number of if statements", passed);
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String code = getCode();
        int elseif = countOccurences(code, "else if");
        boolean passed = elseif &gt;= 3;

        getResults("" + 3, "" + elseif, "Number of else if statements", passed);
        assertTrue(passed);
    }

    @Test
    public void test5()
    {
        String code = getCode();
        int num = countOccurences(code, "else {");
        boolean passed = num &gt;= 1;

        getResults("1", "" + num, "Number of else statements", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.4.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP3-4-1" data-multipleanswers="false"><div class="para" id="AP3-4-1-1-1">3-4-8: Assume an int variable x has been properly declared and initialized. Which of the following code segments will print out “High” if <em class="emphasis">x</em> is 66 and above, “Medium” is <em class="emphasis">x</em> is between 33-65, and “Low” if <em class="emphasis">x</em> is below 33.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">I.   if (x &gt; 66)
     {
       System.out.println("High");
     }
     else if (x &gt; 33)
     {
       System.out.println("Medium");
     }
     else {
       System.out.println("Low");
     }

II.  if (x &lt; 33)
     {
       System.out.println("Low");
     }
     else if (x &lt; 66)
     {
       System.out.println("Medium");
     }
     else {
       System.out.println("High");
     }

III. if (x &gt;= 66)
     {
       System.out.println("High");
     }
     if (x &gt;= 33)
     {
       System.out.println("Medium");
     }
     if (x &lt; 33)
     {
       System.out.println("Low");
     }
</code></pre></div><li data-component="answer" id="csawesome2_2_AP3-4-1_opt_a"><div class="para" id="AP3-4-1-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_AP3-4-1_opt_a"><div class="para" id="AP3-4-1-2-1-2-1">If x = 66, it should print out “High”.</div></li><li data-component="answer" id="csawesome2_2_AP3-4-1_opt_b" data-correct=""><div class="para" id="AP3-4-1-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_AP3-4-1_opt_b"><div class="para" id="AP3-4-1-2-2-2-1">Correct!</div></li><li data-component="answer" id="csawesome2_2_AP3-4-1_opt_c"><div class="para" id="AP3-4-1-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_AP3-4-1_opt_c"><div class="para" id="AP3-4-1-2-3-2-1">If x is 66, the code in III. will print out more than one thing.</div></li><li data-component="answer" id="csawesome2_2_AP3-4-1_opt_d"><div class="para" id="AP3-4-1-2-4-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_AP3-4-1_opt_d"><div class="para" id="AP3-4-1-2-4-2-1">If x = 66, it should print out “High”.</div></li><li data-component="answer" id="csawesome2_2_AP3-4-1_opt_e"><div class="para" id="AP3-4-1-2-5-1-1">II and III only</div></li><li data-component="feedback" id="csawesome2_2_AP3-4-1_opt_e"><div class="para" id="AP3-4-1-2-5-2-1">If x is 66, the code in III. will print out more than one thing.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.4.4.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lccbElseIf">
                <div class="ac_question" id="csawesome2_2_lccbElseIf_question">
                  <div class="para" id="lccbElseIf-1-1">Run the code below and try changing the value of x to get each of the three possible lines in the conditional to print.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lccbElseIf_editor" data-question_label="" data-codelens="true">public class TestElseIf
{
    public static void main(String[] args)
    {
        int x = 2;
        if (x &lt; 0)
        {
            System.out.println("x is negative");
        }
        else if (x == 0)
        {
            System.out.println("x is 0");
        }
        else
        {
            System.out.println("x is positive");
        }
        System.out.println("after conditional");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class TestElseIf { public static void main(String[] args) { int x = 2; if"
                    + " (x &lt; 0) { System.out.println(\"x is negative\");  } else if (x == 0) { "
                    + " System.out.println(\"x is 0\"); } else { System.out.println(\"x is"
                    + " positive\"); } System.out.println(\"after conditional\"); } }";
        boolean changed = codeChanged(origCode);
        assertTrue(changed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.4.4.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qcb3_4_1" data-multipleanswers="false"><div class="para" id="qcb3_4_1-1-1">3-4-2: What does the following code print when x has been set to -5?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">if (x &lt; 0)
{
   System.out.println("x is negative");
}
else if (x == 0)
{
   System.out.println("x is zero");
}
else
{
   System.out.println("x is positive");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qcb3_4_1_opt_a" data-correct=""><div class="para" id="qcb3_4_1-2-1-1-1">x is negative</div></li><li data-component="feedback" id="csawesome2_2_qcb3_4_1_opt_a"><div class="para" id="qcb3_4_1-2-1-2-1">When x is equal to -5 the condition of x &lt; 0 is true.</div></li><li data-component="answer" id="csawesome2_2_qcb3_4_1_opt_b"><div class="para" id="qcb3_4_1-2-2-1-1">x is zero</div></li><li data-component="feedback" id="csawesome2_2_qcb3_4_1_opt_b"><div class="para" id="qcb3_4_1-2-2-2-1">This will only print if x has been set to 0.  Has it?</div></li><li data-component="answer" id="csawesome2_2_qcb3_4_1_opt_c"><div class="para" id="qcb3_4_1-2-3-1-1">x is positive</div></li><li data-component="feedback" id="csawesome2_2_qcb3_4_1_opt_c"><div class="para" id="qcb3_4_1-2-3-2-1">This will only print if x is greater than zero.  Is it?</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.4.4.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qcb3_4_2" data-multipleanswers="false"><div class="para" id="qcb3_4_2-1-1">3-4-3: What does the following code print when x has been set to 2000?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">if (x &lt; 0)
{
   System.out.println("x is negative");
}
else if (x == 0)
{
   System.out.println("x is zero");
}
else
{
   System.out.println("x is positive");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qcb3_4_2_opt_a"><div class="para" id="qcb3_4_2-2-1-1-1">x is negative</div></li><li data-component="feedback" id="csawesome2_2_qcb3_4_2_opt_a"><div class="para" id="qcb3_4_2-2-1-2-1">This will only print if x has been set to a number less than zero. Has it?</div></li><li data-component="answer" id="csawesome2_2_qcb3_4_2_opt_b"><div class="para" id="qcb3_4_2-2-2-1-1">x is zero</div></li><li data-component="feedback" id="csawesome2_2_qcb3_4_2_opt_b"><div class="para" id="qcb3_4_2-2-2-2-1">This will only print if x has been set to 0.  Has it?</div></li><li data-component="answer" id="csawesome2_2_qcb3_4_2_opt_c" data-correct=""><div class="para" id="qcb3_4_2-2-3-1-1">x is positive</div></li><li data-component="feedback" id="csawesome2_2_qcb3_4_2_opt_c"><div class="para" id="qcb3_4_2-2-3-2-1">The first condition is false and x is not equal to zero so the else will execute.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.4.4.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qcb3_4_3" data-multipleanswers="false"><div class="para" id="qcb3_4_3-1-1">3-4-4: What does the following code print when x has been set to .8?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">if (x &lt; .25)
{
    System.out.println("first quartile");
}
else if (x &lt; .5)
{
    System.out.println("second quartile");
}
else if (x &lt; .75)
{
    System.out.println("third quartile");
}
else
{
    System.out.println("fourth quartile");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qcb3_4_3_opt_a"><div class="para" id="qcb3_4_3-2-1-1-1">first quartile</div></li><li data-component="feedback" id="csawesome2_2_qcb3_4_3_opt_a"><div class="para" id="qcb3_4_3-2-1-2-1">This will only print if x is less than 0.25.</div></li><li data-component="answer" id="csawesome2_2_qcb3_4_3_opt_b"><div class="para" id="qcb3_4_3-2-2-1-1">second quartile</div></li><li data-component="feedback" id="csawesome2_2_qcb3_4_3_opt_b"><div class="para" id="qcb3_4_3-2-2-2-1">This will only print if x is greater than or equal to 0.25 and less than 0.5.</div></li><li data-component="answer" id="csawesome2_2_qcb3_4_3_opt_c"><div class="para" id="qcb3_4_3-2-3-1-1">third quartile</div></li><li data-component="feedback" id="csawesome2_2_qcb3_4_3_opt_c"><div class="para" id="qcb3_4_3-2-3-2-1">The first only print if x is greater than or equal to 0.5 and less than 0.75.</div></li><li data-component="answer" id="csawesome2_2_qcb3_4_3_opt_d" data-correct=""><div class="para" id="qcb3_4_3-2-4-1-1">fourth quartile</div></li><li data-component="feedback" id="csawesome2_2_qcb3_4_3_opt_d"><div class="para" id="qcb3_4_3-2-4-2-1">This will print whenever x is greater than or equal to 0.75.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.4.4.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lccbIfDebug">
                <div class="ac_question" id="csawesome2_2_lccbIfDebug_question">
                  <div class="para" id="lccbIfDebug-1-1">The else-if connection is necessary if you want to hook up conditionals together. In the following code, there are 4 separate if statements instead of the if-else-if pattern. Will this code print out the correct grade? First, trace through the code to see why it prints out the incorrect grade. Use the Code Lens button. Then, fix the code by adding in 3 else’s to connect the if statements and see if it works.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lccbIfDebug_editor" data-question_label="" data-codelens="true">public class IfDebug
{
    public static void main(String[] args)
    {
        int score = 93;
        String grade = "";

        if (score &gt;= 90)
        {
            grade = "A";
        }
        if (score &gt;= 80)
        {
            grade = "B";
        }
        if (score &gt;= 70)
        {
            grade = "C";
        }
        if (score &gt;= 60)
        {
            grade = "D";
        }
        else
        {
            grade = "F";
        }

        System.out.println(grade);
    }
}
====
// Test Code for Lesson 3.4 - lccbIfDebug
import static org.junit.Assert.*;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.*;

public class RunestoneTests extends CodeTestHelper {
    public RunestoneTests() {
        super("IfDebug");
    }

    @Test
    public void testCodeContainsFourElses() {
        String code = getCode();
        int expectedElseCount = 4;
        int actualElseCount = countOccurences(code, "else");

        boolean passed = getResults("" + expectedElseCount, "" + actualElseCount, "Expected number of else's");
        assertTrue(passed);

    }

    private int[] grades = { 100, 95, 83, 79, 65, 50 };
    String[] outs = { "A", "A", "B", "C", "D", "F" };

    @Test
    public void testGrades0() throws Exception {
        changeAndTestCode(0);
    }

    @Test
    public void testGrades1() throws Exception {
        changeAndTestCode(1);
    }

    @Test
    public void testGrades2() throws Exception {
        changeAndTestCode(2);
    }

    @Test
    public void testGrades3() throws Exception {
        changeAndTestCode(3);
    }

    @Test
    public void testGrades4() throws Exception {
        changeAndTestCode(4);
    }

    @Test
    public void testGrades5() throws Exception {
        changeAndTestCode(5);
    }

    public void changeAndTestCode(int i) throws Exception {
        String output = getOutputChangedCode(grades[i]);

        String expected = outs[i];
        boolean passed = output.contains(expected);
        getResults(expected, output, "Checking output for grade = " + grades[i], passed);
        assertTrue(passed);
    }

    public String getOutputChangedCode(int newVal) throws Exception {
        String className = "Test" + newVal;

        String program = getCode();
        program = program.replace("IfDebug", className).replace("public class", "class");
        program = program.replaceAll("int score\\s*=\\s*\\d+", "int score = " + newVal);

        return getMethodOutputChangedCode(program, className, "main");
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.4.4.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ifelseifBattery">
                <div class="ac_question" id="csawesome2_2_ifelseifBattery_question">
                  <div class="para" id="ifelseifBattery-1-1">Finish the following code so that it prints “Plug in your phone!” if the battery is below 50, “Unplug your phone!” if it is above 100, and “All okay!” otherwise. Change the battery value to test all 3 conditions.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ifelseifBattery_editor" data-question_label="" data-codelens="true">public class BatteryTest
{
    public static void main(String[] args)
    {
        int battery = 60;

        System.out.println("All okay!");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class BatteryTest {  public static void main(String[] args)  {  int battery"
                    + " = 60;  System.out.println(\"All okay!\");  }  }";

        boolean changed = codeChanged(origCode);
        assertTrue(changed);
    }

    @Test
    public void testCodeContains3()
    {
        boolean ifCheck1 =
                checkCodeContains("if statement for battery above 100", "if (battery &gt; 100)");
        assertTrue(ifCheck1);
    }

    @Test
    public void testCodeContains5()
    {
        boolean ifCheck1 =
                checkCodeContains("if statement for battery less than 50", "if (battery &lt; 50)");
        assertTrue(ifCheck1);
    }

    @Test
    public void testCodeContains4()
    {
        boolean ifCheck2 = checkCodeContains("else", "else");
        assertTrue(ifCheck2);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>compound-boolean-expressions</id>
      <title>Compound Boolean Expressions</title>
      <question>
        <label>Exercise 2.5.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lccc1">
                <div class="ac_question" id="csawesome2_2_lccc1_question">
                  <div class="para" id="lccc1-1-1">What if you want to go out and your parents say you can go out if you clean your room and do your homework?  Run the code below and try different values for <code class="code-inline tex2jax_ignore">cleanedRoom</code> and <code class="code-inline tex2jax_ignore">didHomework</code> and see what they have to be for it to print <code class="code-inline tex2jax_ignore">You can go out</code>.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lccc1_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        boolean cleanedRoom = true;
        boolean didHomework = false;
        if (cleanedRoom &amp;&amp; didHomework)
        {
            System.out.println("You can go out");
        }
        else
        {
            System.out.println("No, you can't go out");
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class Test1 { public static void main(String[] args){ boolean cleanedRoom ="
                    + " true; boolean didHomework = false; if (cleanedRoom &amp;&amp; didHomework){"
                    + " System.out.println(\"You can go out\");} else { System.out.println(\"No,"
                    + " you can't go out\");}}}";

        boolean changed = codeChanged(origCode);
        assertTrue(changed);
    }

    @Test
    public void testMain()
    {
        String output = getMethodOutput("main");
        String expect = "You can go out";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.5.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lccc2">
                <div class="ac_question" id="csawesome2_2_lccc2_question">
                  <div class="para" id="lccc2-1-1">For example, your parents might say you can go out if you can walk or they don’t need the car.  Try different values for <code class="code-inline tex2jax_ignore">walking</code> and <code class="code-inline tex2jax_ignore">carIsAvailable</code> and see what the values have to be to print <code class="code-inline tex2jax_ignore">You can go out</code>.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lccc2_editor" data-question_label="" data-codelens="true">public class Test2
{
    public static void main(String[] args)
    {
        boolean walking = false;
        boolean carIsAvailable = false;
        if (walking || carIsAvailable)
        {
            System.out.println("You can go out");
        }
        else
        {
            System.out.println("No, you can't go out");
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class Test2 { public static void main(String[] args){ boolean walking ="
                    + " false; boolean carIsAvailable = false; if (walking || carIsAvailable) {"
                    + " System.out.println(\"You can go out\"); } else{System.out.println(\"No, you"
                    + " can't go out\"); }}}";

        boolean changed = codeChanged(origCode);
        assertTrue(changed);
    }

    @Test
    public void testMain()
    {
        String output = getMethodOutput("main");
        String expect = "You can go out";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.5.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcccnum">
                <div class="ac_question" id="csawesome2_2_lcccnum_question">
                  <div class="para" id="lcccnum-1-1">Explore how &amp;&amp; and || are used with numbers below. Try different values for score like -10 and 110 in the code below.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcccnum_editor" data-question_label="" data-codelens="true">public class TestNum
{
    public static void main(String[] args)
    {
        int score = 10; // Try -10 and 110
        if (score &lt; 0 || score &gt; 100)
        {
            System.out.println("Score has an illegal value.");
        }
        if (score &gt;= 0 &amp;&amp; score &lt;= 100)
        {
            System.out.println("Score is in the range 0-100");
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class TestNum{public static void main(String[] args){int score = 10;  if"
                    + " (score &lt; 0 || score &gt; 100){ System.out.println(\"Score has an illegal"
                    + " value.\");}if (score &gt;= 0 &amp;&amp; score &lt;= 100){ System.out.println(\"Score is"
                    + " in the range 0-100\");}}}";

        boolean changed = codeChanged(origCode);
        assertTrue(changed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.5.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcccnot">
                <div class="ac_question" id="csawesome2_2_lcccnot_question">
                  <div class="para" id="lcccnot-1-1">The code below says if homework is not done, you can’t go out. Try different values for <code class="code-inline tex2jax_ignore">homeworkDone</code>.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcccnot_editor" data-question_label="" data-codelens="true">public class TestNot
{
    public static void main(String[] args)
    {
        boolean homeworkDone = false;
        if (!homeworkDone)
        {
            System.out.println("Sorry, you can't go out!");
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class TestNot{public static void main(String[] args){ boolean homeworkDone"
                    + " = false; if (!homeworkDone) { System.out.println(\"Sorry, you can't go"
                    + " out!\"); } } }";

        boolean changed = codeChanged(origCode);
        assertTrue(changed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.5.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_3_5_1_trueAndFalse">
                <div class="para" id="3_5_1_trueAndFalse-1-1">3-5-5: The truth table above is missing one result.  What is the result of <code class="code-inline tex2jax_ignore">P &amp;&amp; Q</code> when <code class="code-inline tex2jax_ignore">P=true</code> and <code class="code-inline tex2jax_ignore">Q=false</code>? <input type="text" placeholder="Text"/></div>
                <script type="application/json">[[{"regex": "^\\s*^\\s*^false$\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"3_5_1_trueAndFalse-2-1-1-1-1\"&gt;Correct.  Both values must be true for &amp;&amp; to return true.&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"3_5_1_trueAndFalse-2-1-2-1-1\"&gt;Try it and see&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.5.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_3_5_2_falseOrTrue">
                <div class="para" id="3_5_2_falseOrTrue-1-1">3-5-6: The truth table above is missing one result.  What is the result of <code class="code-inline tex2jax_ignore">P || Q</code> when <code class="code-inline tex2jax_ignore">P=false</code> and <code class="code-inline tex2jax_ignore">Q=true</code>? <input type="text" placeholder="Text"/></div>
                <script type="application/json">[[{"regex": "^\\s*^\\s*^true$\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"3_5_2_falseOrTrue-2-1-1-1-1\"&gt;Correct.  Only one of the two has to be true with || so this will print true.&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"3_5_2_falseOrTrue-2-1-2-1-1\"&gt;Try it and see&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.5.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qcbc_7" data-multipleanswers="false"><div class="para" id="qcbc_7-1-1">3-5-7: What is printed when the following code executes and x has been set to 3 and y has been set to 9?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">if (x &gt; 0 &amp;&amp; (y / x) == 3)
{
   System.out.println("first case");
}
else
{
   System.out.println("second case");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qcbc_7_opt_a" data-correct=""><div class="para" id="qcbc_7-2-1-1-1">first case</div></li><li data-component="feedback" id="csawesome2_2_qcbc_7_opt_a"><div class="para" id="qcbc_7-2-1-2-1">first case will print if both of the conditions are true and they are.</div></li><li data-component="answer" id="csawesome2_2_qcbc_7_opt_b"><div class="para" id="qcbc_7-2-2-1-1">second case</div></li><li data-component="feedback" id="csawesome2_2_qcbc_7_opt_b"><div class="para" id="qcbc_7-2-2-2-1">second case will print either of the conditions are false.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.5.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qcbc_8" data-multipleanswers="false"><div class="para" id="qcbc_8-1-1">3-5-8: What is printed when the following code executes and x has been set to 3 and y has been set to 6?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">if (x &gt; 0 &amp;&amp; (y / x) == 3)
{
   System.out.println("first case");
}
else
{
   System.out.println("second case");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qcbc_8_opt_a"><div class="para" id="qcbc_8-2-1-1-1">first case</div></li><li data-component="feedback" id="csawesome2_2_qcbc_8_opt_a"><div class="para" id="qcbc_8-2-1-2-1">first case will print if both of the conditions are true, but the second is not.</div></li><li data-component="answer" id="csawesome2_2_qcbc_8_opt_b" data-correct=""><div class="para" id="qcbc_8-2-2-1-1">second case</div></li><li data-component="feedback" id="csawesome2_2_qcbc_8_opt_b"><div class="para" id="qcbc_8-2-2-2-1">second case will print if either of the conditions are false and the second one is (6 / 3 == 2).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.5.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qcbc_or" data-multipleanswers="false"><div class="para" id="qcbc_or-1-1">3-5-9: What is printed when the following code executes and x has been set to 3 and y has been set to 6?  Notice that it is now an <dfn class="terminology">or</dfn> (||) instead of <dfn class="terminology">and</dfn> (&amp;&amp;).</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">if (x &gt; 0 || (y / x) == 3)
{
   System.out.println("first case");
}
else
{
   System.out.println("second case");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qcbc_or_opt_a" data-correct=""><div class="para" id="qcbc_or-2-1-1-1">first case</div></li><li data-component="feedback" id="csawesome2_2_qcbc_or_opt_a"><div class="para" id="qcbc_or-2-1-2-1">first case will print if either of the two conditions are true.  The first condition is true, even though the second one isn’t.</div></li><li data-component="answer" id="csawesome2_2_qcbc_or_opt_b"><div class="para" id="qcbc_or-2-2-1-1">second case</div></li><li data-component="feedback" id="csawesome2_2_qcbc_or_opt_b"><div class="para" id="qcbc_or-2-2-2-1">second case will print if both of the conditions are false, but the first condition is true.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.5.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qcbc_5" data-multipleanswers="false"><div class="para" id="qcbc_5-1-1">3-5-10: What is printed when the following code executes and x has been set to 0 and y to 3?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">if (x &gt; 0 &amp;&amp; (y / x) == 3)
{
   System.out.println("first case");
}
else
{
   System.out.println("second case");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qcbc_5_opt_a"><div class="para" id="qcbc_5-2-1-1-1">first case</div></li><li data-component="feedback" id="csawesome2_2_qcbc_5_opt_a"><div class="para" id="qcbc_5-2-1-2-1">first case will only print if x is greater than 0 and it is not.</div></li><li data-component="answer" id="csawesome2_2_qcbc_5_opt_b" data-correct=""><div class="para" id="qcbc_5-2-2-1-1">second case</div></li><li data-component="feedback" id="csawesome2_2_qcbc_5_opt_b"><div class="para" id="qcbc_5-2-2-2-1">second case will print if x is less than or equal to zero or if y divided by x is not equal to 3.</div></li><li data-component="answer" id="csawesome2_2_qcbc_5_opt_c"><div class="para" id="qcbc_5-2-3-1-1">You will get a error because you can’t divide by zero.</div></li><li data-component="feedback" id="csawesome2_2_qcbc_5_opt_c"><div class="para" id="qcbc_5-2-3-2-1">Since the first condition is false when x is equal to zero the second condition won’t execute.  Execution moves to the else.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.5.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qcb_7sc" data-multipleanswers="false"><div class="para" id="qcb_7sc-1-1">3-5-11: What is printed when the following code executes and x has been set to zero and y is set to 3?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">if (x == 0 || (y / x) == 3)
{
   System.out.println("first case");
}
else
{
   System.out.println("second case");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qcb_7sc_opt_a" data-correct=""><div class="para" id="qcb_7sc-2-1-1-1">first case</div></li><li data-component="feedback" id="csawesome2_2_qcb_7sc_opt_a"><div class="para" id="qcb_7sc-2-1-2-1">Since x is equal to zero the first expression in the complex conditional will be true and the (y / x) == 3 won’t be evaluated, so it won’t cause a divide by zero error.  It will print "first case".</div></li><li data-component="answer" id="csawesome2_2_qcb_7sc_opt_b"><div class="para" id="qcb_7sc-2-2-1-1">second case</div></li><li data-component="feedback" id="csawesome2_2_qcb_7sc_opt_b"><div class="para" id="qcb_7sc-2-2-2-1">Since x is equal to zero the first part of the complex conditional is true so it will print first case.</div></li><li data-component="answer" id="csawesome2_2_qcb_7sc_opt_c"><div class="para" id="qcb_7sc-2-3-1-1">You will get a error because you can’t divide by zero.</div></li><li data-component="feedback" id="csawesome2_2_qcb_7sc_opt_c"><div class="para" id="qcb_7sc-2-3-2-1">You won’t get an error because of short circuit evaluation.  The (y / x) == 3 won’t be evaluated since the first expression is true and an or is used.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.5.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge3-5-truthtables">
                <div class="ac_question" id="csawesome2_2_challenge3-5-truthtables_question">
                  <div class="para" id="challenge3-5-truthtables-1-1">Challenge-3-5-truthtables: Test your boolean expression in an if statement below.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge3-5-truthtables_editor" data-question_label="" data-codelens="true">public class TruthTable
{
    public static void main(String[] args)
    {
        // Test multiple values for these variables
        boolean sunny = false;
        int temperature = 90;
        boolean raining = false;

        // Write an if statement for: If it's sunny,
        //  OR if the temperature is greater than 80
        //     and it's not raining, "Go to the beach!"

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String expect = "Go to the beach!";
        String output = getMethodOutput("main");
        String code = getCode();
        boolean passed;
        if (getCode().contains("boolean sunny = false"))
            passed =
                    getResults(
                            expect,
                            output,
                            "Prints Go to the beach! with initial input (sunny = false; temperature"
                                + " = 90; raining = false;)");
        else passed = getResults("sunny = false", "sunny = true", "Set sunny to false to test");

        assertTrue(passed);
    }

    @Test
    public void testCodeContains1()
    {
        boolean ifStatement = checkCodeContains("conditional: if", "if");
        assertTrue(ifStatement);
    }

    @Test
    public void testCodeContains2()
    {
        boolean ifStatement1 =
                checkCodeContains("conditional: temperature greater than 80", "temperature &gt; 80");

        assertTrue(ifStatement1);
    }

    @Test
    public void testCodeContains4()
    {
        boolean ifStatement3 = checkCodeContains("and", "&amp;&amp;");
        assertTrue(ifStatement3);
    }

    @Test
    public void testCodeContains5()
    {
        boolean ifStatement3 = checkCodeContains("or", "||");
        assertTrue(ifStatement3);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.5.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP3-5-1" data-multipleanswers="false"><div class="para" id="AP3-5-1-1-1">3-5-13: Consider the following code segment. What is printed as a result of executing the code segment?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int x = 10;
int y = 5;

if (x % 2 == 0 &amp;&amp; y % 2 == 0 || x &gt; y)
{
    System.out.print("First ");

    if (y * 2 == x || y &gt; 5 &amp;&amp; x &lt;= 10)
    {
       System.out.print("Second ");
    }
    else
    {
       System.out.print("Third ");
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_AP3-5-1_opt_a"><div class="para" id="AP3-5-1-2-1-1-1">Nothing is printed out.</div></li><li data-component="feedback" id="csawesome2_2_AP3-5-1_opt_a"><div class="para" id="AP3-5-1-2-1-2-1">Some of these conditions are true.</div></li><li data-component="answer" id="csawesome2_2_AP3-5-1_opt_b"><div class="para" id="AP3-5-1-2-2-1-1">First</div></li><li data-component="feedback" id="csawesome2_2_AP3-5-1_opt_b"><div class="para" id="AP3-5-1-2-2-2-1">This is partially correct.</div></li><li data-component="answer" id="csawesome2_2_AP3-5-1_opt_c"><div class="para" id="AP3-5-1-2-3-1-1">Third</div></li><li data-component="feedback" id="csawesome2_2_AP3-5-1_opt_c"><div class="para" id="AP3-5-1-2-3-2-1">Third cannot be printed out unless First is printed out first.</div></li><li data-component="answer" id="csawesome2_2_AP3-5-1_opt_d" data-correct=""><div class="para" id="AP3-5-1-2-4-1-1">FirstSecond</div></li><li data-component="feedback" id="csawesome2_2_AP3-5-1_opt_d"><div class="para" id="AP3-5-1-2-4-2-1">Good tracing!</div></li><li data-component="answer" id="csawesome2_2_AP3-5-1_opt_e"><div class="para" id="AP3-5-1-2-5-1-1">FirstThird</div></li><li data-component="feedback" id="csawesome2_2_AP3-5-1_opt_e"><div class="para" id="AP3-5-1-2-5-2-1">Take another look at the second condition.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>equivalent-boolean-expressions-de-morgan-s-laws</id>
      <title>Equivalent Boolean Expressions (De Morgan’s Laws)</title>
      <question>
        <label>Exercise 2.6.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcdmtest">
                <div class="ac_question" id="csawesome2_2_lcdmtest_question">
                  <div class="para" id="lcdmtest-1-1">For what values of x and y will the code below print true?  Try out different values of x and y to check your answer.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcdmtest_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int x = 2;
        int y = 3;
        System.out.println(!(x &lt; 3 &amp;&amp; y &gt; 2));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class Test1 {public static void main(String[] args) { int x = 2; int y = 3;"
                    + " System.out.println(!(x &lt; 3 &amp;&amp; y &gt; 2)); } }";

        boolean changed = codeChanged(origCode);
        assertTrue(changed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.6.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qcbdm1_8" data-multipleanswers="false"><div class="para" id="qcbdm1_8-1-1">3-6-2: What is printed when the following code executes and x equals 4 and y equals 3?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int x = 4, y = 3;
if (!(x &lt; 3 || y &gt; 2))
{
   System.out.println("first case");
}
else
{
   System.out.println("second case");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qcbdm1_8_opt_a"><div class="para" id="qcbdm1_8-2-1-1-1">first case</div></li><li data-component="feedback" id="csawesome2_2_qcbdm1_8_opt_a"><div class="para" id="qcbdm1_8-2-1-2-1">This will be printed if x is greater or equal to 3 and y is less than or equal to 2.  The first part is true but the second is false.  Since the statements are joined by an and the complex expression is false.</div></li><li data-component="answer" id="csawesome2_2_qcbdm1_8_opt_b" data-correct=""><div class="para" id="qcbdm1_8-2-2-1-1">second case</div></li><li data-component="feedback" id="csawesome2_2_qcbdm1_8_opt_b"><div class="para" id="qcbdm1_8-2-2-2-1">This will be printed if x is less than 3 or y is greater than 2.  In this case the first will be false, but the second true so since the statements are joined with an or the complex expression is true.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.6.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qcbdm2_9" data-multipleanswers="false"><div class="para" id="qcbdm2_9-1-1">3-6-3: What is printed when the following code executes and x equals 4 and y equals 3?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int x = 4, y = 3;
if (!(x &lt; 3 &amp;&amp; y &gt; 2))
{
   System.out.println("first case");
}
else
{
   System.out.println("second case");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qcbdm2_9_opt_a" data-correct=""><div class="para" id="qcbdm2_9-2-1-1-1">first case</div></li><li data-component="feedback" id="csawesome2_2_qcbdm2_9_opt_a"><div class="para" id="qcbdm2_9-2-1-2-1">This will be printed if x is greater than or equal to 3 or y is less than or equal to 2.  In this case x is greater than 3 so the first condition is true.</div></li><li data-component="answer" id="csawesome2_2_qcbdm2_9_opt_b"><div class="para" id="qcbdm2_9-2-2-1-1">second case</div></li><li data-component="feedback" id="csawesome2_2_qcbdm2_9_opt_b"><div class="para" id="qcbdm2_9-2-2-2-1">This will be printed if x is less than 3 and y is greater than 2.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.6.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge3-6-booleanExpr">
                <div class="ac_question" id="csawesome2_2_challenge3-6-booleanExpr_question">
                  <div class="para" id="challenge3-6-booleanExpr-1-1">Are these 3 boolean expressions equivalent? 1. <code class="code-inline tex2jax_ignore">!(x == 0 || x &gt;= 1)</code> , 2. <code class="code-inline tex2jax_ignore">!(x == 0) &amp;&amp; !(x &gt;= 1)</code> , 3. <code class="code-inline tex2jax_ignore">(x != 0) &amp;&amp; (x &lt; 1)</code></div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge3-6-booleanExpr_editor" data-question_label="" data-codelens="true">public class EquivalentExpressions
{
    public static void main(String[] args)
    {
        int x = -1; // try with x = -1, x = 0, and x = 1
        System.out.println(!(x == 0 || x &gt;= 1));
        // add print statements for expressions in #2 and #3
        // to see if they are equivalent when x = -1, 0, and 1.

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class EquivalentExpressions { public static void main(String[] args) { int"
                    + " x = -1;  System.out.println(!(x == 0 || x &gt;= 1));   } }";

        boolean changed = codeChanged(origCode);
        assertTrue(changed);
    }

    @Test
    public void testAddedCode()
    {
        boolean output2 = checkCodeContains("(x != 0) &amp;&amp; (x &lt; 1)");
        assertTrue(output2);
    }

    @Test
    public void testAddedCode2()
    {
        boolean output3 = checkCodeContains("!(x == 0) &amp;&amp; !(x &gt;= 1)");
        assertTrue(output3);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.6.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qcbdm3_1" data-multipleanswers="false"><div class="para" id="qcbdm3_1-1-1">3-6-5: Which of the following is the same as the code below?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">!(x &gt; 2 &amp;&amp; y &lt; 4)
</code></pre></div><li data-component="answer" id="csawesome2_2_qcbdm3_1_opt_a"><div class="para" id="qcbdm3_1-2-1-1-1">(x &lt; 2) || (y &gt; 4)</div></li><li data-component="feedback" id="csawesome2_2_qcbdm3_1_opt_a"><div class="para" id="qcbdm3_1-2-1-2-1">The negation of x &gt; 2 is x &lt;= 2</div></li><li data-component="answer" id="csawesome2_2_qcbdm3_1_opt_b"><div class="para" id="qcbdm3_1-2-2-1-1">(x &lt; 2) &amp;&amp; (y &gt; 4)</div></li><li data-component="feedback" id="csawesome2_2_qcbdm3_1_opt_b"><div class="para" id="qcbdm3_1-2-2-2-1">Don’t forget that the "and" is changed to an "or"</div></li><li data-component="answer" id="csawesome2_2_qcbdm3_1_opt_c" data-correct=""><div class="para" id="qcbdm3_1-2-3-1-1">(x &lt;= 2) || (y &gt;= 4)</div></li><li data-component="feedback" id="csawesome2_2_qcbdm3_1_opt_c"><div class="para" id="qcbdm3_1-2-3-2-1">The x &gt; 2 becomes x &lt;= 2, the y &lt; 4 becomes y &gt;= 4 and the and changes to or</div></li><li data-component="answer" id="csawesome2_2_qcbdm3_1_opt_d"><div class="para" id="qcbdm3_1-2-4-1-1">(x &lt;= 2) &amp;&amp; (y &gt;= 4)</div></li><li data-component="feedback" id="csawesome2_2_qcbdm3_1_opt_d"><div class="para" id="qcbdm3_1-2-4-2-1">Don’t forget that the "and" is changed to an "or"</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.6.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qcbdm4_2" data-multipleanswers="false"><div class="para" id="qcbdm4_2-1-1">3-6-6: Which of the following is the same as the code below?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">!(x == 2 &amp;&amp; y &gt; 4)
</code></pre></div><li data-component="answer" id="csawesome2_2_qcbdm4_2_opt_a"><div class="para" id="qcbdm4_2-2-1-1-1">(x != 2) || (y &lt; 4)</div></li><li data-component="feedback" id="csawesome2_2_qcbdm4_2_opt_a"><div class="para" id="qcbdm4_2-2-1-2-1">The negation of y &gt; 4 is y &lt;= 4</div></li><li data-component="answer" id="csawesome2_2_qcbdm4_2_opt_b"><div class="para" id="qcbdm4_2-2-2-1-1">(x != 2) &amp;&amp; (y &lt; 4)</div></li><li data-component="feedback" id="csawesome2_2_qcbdm4_2_opt_b"><div class="para" id="qcbdm4_2-2-2-2-1">Don’t forget that the and is changed to an or</div></li><li data-component="answer" id="csawesome2_2_qcbdm4_2_opt_c"><div class="para" id="qcbdm4_2-2-3-1-1">(x != 2) &amp;&amp; (y &lt;= 4)</div></li><li data-component="feedback" id="csawesome2_2_qcbdm4_2_opt_c"><div class="para" id="qcbdm4_2-2-3-2-1">Don’t forget that the and is changed to an or</div></li><li data-component="answer" id="csawesome2_2_qcbdm4_2_opt_d" data-correct=""><div class="para" id="qcbdm4_2-2-4-1-1">(x != 2) || (y &lt;= 4)</div></li><li data-component="feedback" id="csawesome2_2_qcbdm4_2_opt_d"><div class="para" id="qcbdm4_2-2-4-2-1">The and is changed to an or, the (x == 2) becomes (x != 2) and (y &gt; 4) becomes (y &lt;= 4)</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.6.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qcbdm5_3" data-multipleanswers="false"><div class="para" id="qcbdm5_3-1-1">3-6-7: Which of the following is the same as the code below?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">!(x!=5 &amp;&amp; y!=7)
</code></pre></div><li data-component="answer" id="csawesome2_2_qcbdm5_3_opt_a" data-correct=""><div class="para" id="qcbdm5_3-2-1-1-1">(x == 5) || (y == 7)</div></li><li data-component="feedback" id="csawesome2_2_qcbdm5_3_opt_a"><div class="para" id="qcbdm5_3-2-1-2-1">The negation of &amp;&amp; is || and the negation of != is ==</div></li><li data-component="answer" id="csawesome2_2_qcbdm5_3_opt_b"><div class="para" id="qcbdm5_3-2-2-1-1">(x == 5) &amp;&amp; (y == 7)</div></li><li data-component="feedback" id="csawesome2_2_qcbdm5_3_opt_b"><div class="para" id="qcbdm5_3-2-2-2-1">The negation of &amp;&amp; is ||</div></li><li data-component="answer" id="csawesome2_2_qcbdm5_3_opt_c"><div class="para" id="qcbdm5_3-2-3-1-1">(x != 5) || (y != 7)</div></li><li data-component="feedback" id="csawesome2_2_qcbdm5_3_opt_c"><div class="para" id="qcbdm5_3-2-3-2-1">The negation of x != 5 is x == 5.  The negation of y !=  7 is y == 7.</div></li><li data-component="answer" id="csawesome2_2_qcbdm5_3_opt_d"><div class="para" id="qcbdm5_3-2-4-1-1">(x &lt; 5) || (x &gt; 5) || (y &gt; 7) || (y &lt; 7)</div></li><li data-component="feedback" id="csawesome2_2_qcbdm5_3_opt_d"><div class="para" id="qcbdm5_3-2-4-2-1">The negation of == is != which is the same as &lt; or &gt;.  The negation of != is ==.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.6.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qcbdm6_4" data-multipleanswers="false"><div class="para" id="qcbdm6_4-1-1">3-6-8: Which of the following is the same as the code below?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">!(x&lt;= 5 &amp;&amp; y &gt; 7)
</code></pre></div><li data-component="answer" id="csawesome2_2_qcbdm6_4_opt_a"><div class="para" id="qcbdm6_4-2-1-1-1">(x &gt; 5) &amp;&amp; (y &lt; 7)</div></li><li data-component="feedback" id="csawesome2_2_qcbdm6_4_opt_a"><div class="para" id="qcbdm6_4-2-1-2-1">The negation of &amp;&amp; is || and the negation of y &gt; 7 is y &lt;= 7.</div></li><li data-component="answer" id="csawesome2_2_qcbdm6_4_opt_b"><div class="para" id="qcbdm6_4-2-2-1-1">(x &gt; 5) || (y &lt; 7)</div></li><li data-component="feedback" id="csawesome2_2_qcbdm6_4_opt_b"><div class="para" id="qcbdm6_4-2-2-2-1">The negation of y &gt; 7 is y &lt;= 7.</div></li><li data-component="answer" id="csawesome2_2_qcbdm6_4_opt_c"><div class="para" id="qcbdm6_4-2-3-1-1">(x &gt; 5) &amp;&amp; (y &lt;= 7)</div></li><li data-component="feedback" id="csawesome2_2_qcbdm6_4_opt_c"><div class="para" id="qcbdm6_4-2-3-2-1">The negation of &amp;&amp; is ||.</div></li><li data-component="answer" id="csawesome2_2_qcbdm6_4_opt_d" data-correct=""><div class="para" id="qcbdm6_4-2-4-1-1">(x &gt; 5) || (y &lt;= 7)</div></li><li data-component="feedback" id="csawesome2_2_qcbdm6_4_opt_d"><div class="para" id="qcbdm6_4-2-4-2-1">The negation of (x &lt;= 5) is (x &gt; 5).  The negation of &amp;&amp; is ||.  The negation of (y &gt; 7) is (y &lt;= 7).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.6.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_apcsa-sample5" data-multipleanswers="false">
                <div class="para" id="apcsa-sample5-1-1">3-6-9:  Which of the following best describes the value of the Boolean expression: a &amp;&amp; !(b || a)</div>
                <li data-component="answer" id="csawesome2_2_apcsa-sample5_opt_a">
                  <div class="para" id="apcsa-sample5-2-1-1-1">The value is always true.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_apcsa-sample5_opt_a">
                  <div class="para" id="apcsa-sample5-2-1-2-1">Try simplifying !(b ||a) or consider what happens if a and b are true.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_apcsa-sample5_opt_b" data-correct="">
                  <div class="para" id="apcsa-sample5-2-2-1-1">The value is always false.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_apcsa-sample5_opt_b">
                  <div class="para" id="apcsa-sample5-2-2-2-1">Yes, a &amp;&amp; !(b || a) = a &amp;&amp; !b &amp;&amp; !a. Since (a &amp;&amp; !a) can never be true, the result will always be false.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_apcsa-sample5_opt_c">
                  <div class="para" id="apcsa-sample5-2-3-1-1">The value is true when a has the value false, and is false otherwise.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_apcsa-sample5_opt_c">
                  <div class="para" id="apcsa-sample5-2-3-2-1">Try the expression with a = false. Is the result true?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_apcsa-sample5_opt_d">
                  <div class="para" id="apcsa-sample5-2-4-1-1">The value is true when b has the value false, and is false otherwise.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_apcsa-sample5_opt_d">
                  <div class="para" id="apcsa-sample5-2-4-2-1">Try the expression with b = false with a = true and then try it with a = false. Is the result ever true?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_apcsa-sample5_opt_e">
                  <div class="para" id="apcsa-sample5-2-5-1-1">The value is true when either a or b has the value true, and is false otherwise.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_apcsa-sample5_opt_e">
                  <div class="para" id="apcsa-sample5-2-5-2-1">Try the expression with a = true. Is the result true?</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>comparing-objects</id>
      <title>Comparing Objects</title>
      <question>
        <label>Exercise 2.7.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcse1">
                <div class="ac_question" id="csawesome2_2_lcse1_question">
                  <div class="para" id="lcse1-1-1">If you run the following, what will be printed?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcse1_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String s1 = new String("Hello");
        String s2 = new String("Bye");
        String s3 = s2; // s3 is now an alias for s2
        System.out.println(s3);
        System.out.println(s2 == s3);
        System.out.println(s2.equals(s3));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Bye\ntrue\ntrue\n";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: hhYBVgmC-vw</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="hhYBVgmC-vw" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.7.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcse2">
                <div class="ac_question" id="csawesome2_2_lcse2_question">
                  <div class="para" id="lcse2-1-1">What will the following print?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcse2_editor" data-question_label="" data-codelens="true">public class Test2
{
    public static void main(String[] args)
    {
        String s1 = new String("Hello");
        String s2 = new String("Hello");
        System.out.println(s1 == s2);
        System.out.println(s1.equals(s2));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "false\ntrue\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: xZroaSGhgxA</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="xZroaSGhgxA" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.7.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsbeq_1" data-multipleanswers="false"><div class="para" id="qsbeq_1-1-1">3-7-5: Which of the following is true after the code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String s1 = new String("hi");
String s2 = new String("bye");
String s3 = new String("hi");
s2 = s1;
</code></pre></div><li data-component="answer" id="csawesome2_2_qsbeq_1_opt_a"><div class="para" id="qsbeq_1-2-1-1-1">s1 == s2 &amp;&amp; s1 == s3</div></li><li data-component="feedback" id="csawesome2_2_qsbeq_1_opt_a"><div class="para" id="qsbeq_1-2-1-2-1">Do s1 and s3 refer to the same object?</div></li><li data-component="answer" id="csawesome2_2_qsbeq_1_opt_b" data-correct=""><div class="para" id="qsbeq_1-2-2-1-1">s1 == s2 &amp;&amp; s1.equals(s3)</div></li><li data-component="feedback" id="csawesome2_2_qsbeq_1_opt_b"><div class="para" id="qsbeq_1-2-2-2-1">Yes s2 was set to refer to the same object as s1 and s1 and s3 have the same characters.</div></li><li data-component="answer" id="csawesome2_2_qsbeq_1_opt_c"><div class="para" id="qsbeq_1-2-3-1-1">s1 != s2 &amp;&amp; s1.equals(s3)</div></li><li data-component="feedback" id="csawesome2_2_qsbeq_1_opt_c"><div class="para" id="qsbeq_1-2-3-2-1">Did you miss that s2 was set to refer to the same object as s1?</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.7.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsbeq_2" data-multipleanswers="false"><div class="para" id="qsbeq_2-1-1">3-7-6: Which of the following is true after the code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String s1 = new String("hi");
String s2 = new String("bye");
String s3 = new String("hi");
</code></pre></div><li data-component="answer" id="csawesome2_2_qsbeq_2_opt_a"><div class="para" id="qsbeq_2-2-1-1-1">s1 == s2 &amp;&amp; s1 == s3</div></li><li data-component="feedback" id="csawesome2_2_qsbeq_2_opt_a"><div class="para" id="qsbeq_2-2-1-2-1">Do s1 and s2 refer to the same object?</div></li><li data-component="answer" id="csawesome2_2_qsbeq_2_opt_b"><div class="para" id="qsbeq_2-2-2-1-1">s2.equals(s3) &amp;&amp; s1.equals(s3)</div></li><li data-component="feedback" id="csawesome2_2_qsbeq_2_opt_b"><div class="para" id="qsbeq_2-2-2-2-1">Does s2 have the same characters as s1 or s3?</div></li><li data-component="answer" id="csawesome2_2_qsbeq_2_opt_c" data-correct=""><div class="para" id="qsbeq_2-2-3-1-1">s1 != s3 &amp;&amp; s1.equals(s3)</div></li><li data-component="feedback" id="csawesome2_2_qsbeq_2_opt_c"><div class="para" id="qsbeq_2-2-3-2-1">s1 and s3 refer to different string objects but they  contain the same characters "hi" in the same order.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.7.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsbeq_3" data-multipleanswers="false"><div class="para" id="qsbeq_3-1-1">3-7-7: Which of the following is true after the code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String s1 = new String("hi");
String s2 = new String("bye");
String s3 = new String("hi");
</code></pre></div><li data-component="answer" id="csawesome2_2_qsbeq_3_opt_a"><div class="para" id="qsbeq_3-2-1-1-1">s1 == s3 &amp;&amp; s1.equals(s3)</div></li><li data-component="feedback" id="csawesome2_2_qsbeq_3_opt_a"><div class="para" id="qsbeq_3-2-1-2-1">Since s3 uses the new operator it will not refer to the same object as s1.</div></li><li data-component="answer" id="csawesome2_2_qsbeq_3_opt_b"><div class="para" id="qsbeq_3-2-2-1-1">s2.equals(s3) &amp;&amp; s1.equals(s3)</div></li><li data-component="feedback" id="csawesome2_2_qsbeq_3_opt_b"><div class="para" id="qsbeq_3-2-2-2-1">Do s2 and s3 have the same characters in the same order?</div></li><li data-component="answer" id="csawesome2_2_qsbeq_3_opt_c" data-correct=""><div class="para" id="qsbeq_3-2-3-1-1">!(s1 == s2) &amp;&amp; !(s1 == s3)</div></li><li data-component="feedback" id="csawesome2_2_qsbeq_3_opt_c"><div class="para" id="qsbeq_3-2-3-2-1">All of the variables refer to different objects.  But, s1.equals(s3) would be true since they have the same characters in the same order.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.7.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_nullTest">
                <div class="ac_question" id="csawesome2_2_nullTest_question">
                  <div class="para" id="nullTest-1-1">Try the following code to see a <code class="code-inline tex2jax_ignore">NullPointerException</code> (if you don’t see the exception because of the autograding, you can copy it into the pencil icon scratch area to run it without the grader). Since <code class="code-inline tex2jax_ignore">s</code> is <code class="code-inline tex2jax_ignore">null</code>, trying to access <code class="code-inline tex2jax_ignore">indexOf</code> on <code class="code-inline tex2jax_ignore">s</code> throws an <code class="code-inline tex2jax_ignore">NullPointerException</code>. Comment out the first <code class="code-inline tex2jax_ignore">if</code> statement and run the program again. The second <code class="code-inline tex2jax_ignore">if</code> statement avoids the error with shortcircuit evaluation. Because <code class="code-inline tex2jax_ignore">s != null</code> is <code class="code-inline tex2jax_ignore">false</code>, the rest of the Boolean expression is not evaluated. Now, change <code class="code-inline tex2jax_ignore">s</code> to set it to <code class="code-inline tex2jax_ignore">"apple"</code> instead of <code class="code-inline tex2jax_ignore">null</code> in the first line and run the code again to see that the <code class="code-inline tex2jax_ignore">if</code> statements can print out that “apple contains an a”.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_nullTest_editor" data-question_label="" data-codelens="true">public class NullTest
{
    public static void main(String[] args)
    {
        String s = null;
        if (s.indexOf("a") &gt;= 0)
        {
            System.out.println(s + " contains an a");
        }
        if (s != null &amp;&amp; s.indexOf("a") &gt;= 0)
        {
            System.out.println(s + " contains an a");
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("NullTest");
    }

    @Test
    public void testMain()
    {
        String output = getMethodOutput("main");
        String expect = "apple contains an a\napple contains an a";

        boolean passed = getResults(expect, output, "Checking main() gives correct results");
    }

    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class NullTest { public static void main(String[] args) { String s = null;"
                    + " if (s.indexOf(\"a\") &gt;= 0) {  System.out.println(s + \" contains an a\"); }"
                    + " if (s != null &amp;&amp; s.indexOf(\"a\") &gt;= 0) { System.out.println(s + \""
                    + " contains an a\"); } } }";

        boolean changed = codeChanged(origCode);

        assertTrue(changed);
    }

    @Test
    public void testCodeContains()
    {
        String code = getCode();
        String target1 = "String s = ";
        String target2 = "System.out.println(s + \" contains an a\");";

        boolean passed = code.contains(target1) &amp;&amp; code.contains(target2);
        getResults("true", "" + passed, "Checking that code has not been removed", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: GPdoHm1K8HA</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="GPdoHm1K8HA" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.7.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP3-7-1" data-multipleanswers="false"><div class="para" id="AP3-7-1-1-1">3-7-11: Consider the following code segment.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String message = new String("AP Practice");
String note = new String("AP Practice");
String memo = new String("memo");
int i = 5;

if (message.equals(note) &amp;&amp; !message.equals("memo"))
{
    message = note;

    if (message == note &amp;&amp; message.length() &gt; i)
    {
       i = 3;
       memo = message.substring(i);
    }
}
</code></pre></div> <div class="para" id="AP3-7-1-1-3">Which of the following expressions evaluate to <code class="code-inline tex2jax_ignore">true</code> after the code segment above executes?</div><li data-component="answer" id="csawesome2_2_AP3-7-1_opt_a"><div class="para" id="AP3-7-1-2-1-1-1">message == note &amp;&amp; message == memo</div></li><li data-component="feedback" id="csawesome2_2_AP3-7-1_opt_a"><div class="para" id="AP3-7-1-2-1-2-1">Message does not refer to the same object as memo.</div></li><li data-component="answer" id="csawesome2_2_AP3-7-1_opt_b"><div class="para" id="AP3-7-1-2-2-1-1">message.equals(note) &amp;&amp; message.equals(memo)</div></li><li data-component="feedback" id="csawesome2_2_AP3-7-1_opt_b"><div class="para" id="AP3-7-1-2-2-2-1">Message is not the same string as in memo.</div></li><li data-component="answer" id="csawesome2_2_AP3-7-1_opt_c" data-correct=""><div class="para" id="AP3-7-1-2-3-1-1">message == note &amp;&amp; memo.equals(“Practice”)</div></li><li data-component="feedback" id="csawesome2_2_AP3-7-1_opt_c"><div class="para" id="AP3-7-1-2-3-2-1">Yes, both if statements in the code above execute changing message to equal note and memo to equal “Practice”.</div></li><li data-component="answer" id="csawesome2_2_AP3-7-1_opt_d"><div class="para" id="AP3-7-1-2-4-1-1">message != note || message == memo</div></li><li data-component="feedback" id="csawesome2_2_AP3-7-1_opt_d"><div class="para" id="AP3-7-1-2-4-2-1">Both of these are false.</div></li><li data-component="answer" id="csawesome2_2_AP3-7-1_opt_e"><div class="para" id="AP3-7-1-2-5-1-1">message.equals(memo) || memo.equals(note)</div></li><li data-component="feedback" id="csawesome2_2_AP3-7-1_opt_e"><div class="para" id="AP3-7-1-2-5-2-1">Both of these are false.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>while-loops</id>
      <title>While Loops</title>
      <question>
        <label>Video: Uw9mv53Jnfs</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="Uw9mv53Jnfs" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.8.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_whileloop">
                <div class="ac_question" id="csawesome2_2_whileloop_question">
                  <div class="para" id="whileloop-1-1">Here is a while loop that counts from 1 to 5 that demonstrates the 3 steps of writing a loop. Can you change it to count from 2 to 10?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_whileloop_editor" data-question_label="" data-codelens="true">public class LoopTest1
{
    public static void main(String[] args)
    {
        // 1. initialize the loop variable
        int count = 1;

        // 2. test the loop variable
        while (count &lt;= 5)
        {
            System.out.println(count);
            // 3. change the loop variable
            count++;
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "2\n3\n4\n5\n6\n7\n8\n9\n10\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.8.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_while1" data-multipleanswers="false"><div class="para" id="while1-1-1">4-1-3: Consider the following code segment. Which of the following can be used as a replacement for the missing loop header so that the loop prints out “0 2 4 6 8 10”?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int count = 0;
/* missing loop header */
{
    System.out.print(count + " ");
    count += 2;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_while1_opt_a"><div class="para" id="while1-2-1-1-1">while (count == 10)</div></li><li data-component="feedback" id="csawesome2_2_while1_opt_a"><div class="para" id="while1-2-1-2-1">This would not print out anything because count = 0 at the start of the loop, so it never equals 10.</div></li><li data-component="answer" id="csawesome2_2_while1_opt_b"><div class="para" id="while1-2-2-1-1">while (count &lt; 10)</div></li><li data-component="feedback" id="csawesome2_2_while1_opt_b"><div class="para" id="while1-2-2-2-1">This would print out 0 2 4 6 8. Try it in the Active Code window above.</div></li><li data-component="answer" id="csawesome2_2_while1_opt_c" data-correct=""><div class="para" id="while1-2-3-1-1">while (count &lt;= 10)</div></li><li data-component="feedback" id="csawesome2_2_while1_opt_c"><div class="para" id="while1-2-3-2-1">Yes, try it in the Active Code window above.</div></li><li data-component="answer" id="csawesome2_2_while1_opt_d"><div class="para" id="while1-2-4-1-1">while (count &gt; 10)</div></li><li data-component="feedback" id="csawesome2_2_while1_opt_d"><div class="para" id="while1-2-4-2-1">This would not print out anything because count = 0 at the start of the loop, so it is not greater than 10.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: TZss5ukwN8s</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="TZss5ukwN8s" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.8.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_while2" data-multipleanswers="false"><div class="para" id="while2-1-1">4-1-5: Consider the following code segment. What is count’s value after running this code segment? (To trace through the code, keep track of the variable count and its value through each iteration of the loop.)</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int count = 1;
while (count &lt;= 10)
{
    count *= 2;
}
count = count - 10;
</code></pre></div><li data-component="answer" id="csawesome2_2_while2_opt_a"><div class="para" id="while2-2-1-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_while2_opt_a"><div class="para" id="while2-2-1-2-1">Count is changed inside the loop and after the loop.</div></li><li data-component="answer" id="csawesome2_2_while2_opt_b"><div class="para" id="while2-2-2-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_while2_opt_b"><div class="para" id="while2-2-2-2-1">Count is changed inside the loop and after the loop.</div></li><li data-component="answer" id="csawesome2_2_while2_opt_c"><div class="para" id="while2-2-3-1-1">16</div></li><li data-component="feedback" id="csawesome2_2_while2_opt_c"><div class="para" id="while2-2-3-2-1">Don’t forget to subtract 10 from count after the loop.</div></li><li data-component="answer" id="csawesome2_2_while2_opt_d" data-correct=""><div class="para" id="while2-2-4-1-1">6</div></li><li data-component="feedback" id="csawesome2_2_while2_opt_d"><div class="para" id="while2-2-4-2-1">Yes, the loop will keep multiplying count by 2 to get 2, 4, 8, 16 and then it subtracts 10 from 16 after the loop.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.8.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qlb_2_1" data-multipleanswers="false"><div class="para" id="qlb_2_1-1-1">4-1-6: What does the following code print? (To trace through the code, keep track of the variable x and its value, the iteration of the loop, and the output every time through the loop.)</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int x = -5;
while (x &lt; 0)
{
   x++;
   System.out.print(x + " ");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qlb_2_1_opt_a"><div class="para" id="qlb_2_1-2-1-1-1">5 4 3 2 1</div></li><li data-component="feedback" id="csawesome2_2_qlb_2_1_opt_a"><div class="para" id="qlb_2_1-2-1-2-1">x is initialized (set) to -5 to start.</div></li><li data-component="answer" id="csawesome2_2_qlb_2_1_opt_b"><div class="para" id="qlb_2_1-2-2-1-1">-5 -4 -3 -2 -1</div></li><li data-component="feedback" id="csawesome2_2_qlb_2_1_opt_b"><div class="para" id="qlb_2_1-2-2-2-1">x is incremented (x++) before the print statement executes.</div></li><li data-component="answer" id="csawesome2_2_qlb_2_1_opt_c" data-correct=""><div class="para" id="qlb_2_1-2-3-1-1">-4 -3 -2 -1 0</div></li><li data-component="feedback" id="csawesome2_2_qlb_2_1_opt_c"><div class="para" id="qlb_2_1-2-3-2-1">x is set to -5 to start but then incremented by 1 so it first prints -4.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.8.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_whileloopbugs">
                <div class="ac_question" id="csawesome2_2_whileloopbugs_question">
                  <div class="para" id="whileloopbugs-1-1">The while loop should print out the numbers 1 to 8, but it has 2 errors that cause an infinite loop and an off-by-one error. Can you fix the errors? If you run an infinite loop, you may need to refresh the page to stop it (so make sure all active code windows on the page have been saved and click on Load History after refreshing).</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_whileloopbugs_editor" data-question_label="" data-codelens="true">public class LoopTest2
{
    public static void main(String[] args)
    {
        int count = 1;
        while (count &lt; 8)
        {
            System.out.println(count);
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("LoopTest2");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "1\n2\n3\n4\n5\n6\n7\n8";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.8.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge4-1-loop-GuessingGame-autograde">
                <div class="ac_question" id="csawesome2_2_challenge4-1-loop-GuessingGame-autograde_question">
                  <div class="para" id="challenge4-1-loop-GuessingGame-autograde-1-1">Copy and paste all of your code from your replit.com and run to see if it passes the autograder tests. Include the link to your replit.com code in comments. Note that this code will only run with the autograder’s input and will not ask the user for input.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge4-1-loop-GuessingGame-autograde_editor" data-question_label="" data-codelens="true">// Copy in your link to your code on replit.com here:
// Copy in all of your code from replit.com below (include import and public class
// Main)
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Main", input1.replaceAll(" ", "\n")); // For Book
        // super("GuessingGame", input1.replaceAll(" ", "\n")); // For replit.com
    }

    private static int goal = 1;
    private static String input1 =
            "100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73"
                + " 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47"
                + " 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21"
                + " 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0";
    private static String input2 =
            "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"
                + " 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57"
                + " 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83"
                + " 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100";
    private String output1, output2;

    @Test
    public void test1()
    {
        String input = input1.replaceAll(" ", "\n");
        String output = getMethodOutputWithInput("main", input);
        output1 = output;

        String[] lines = output.split("\n");

        boolean passed = lines.length &gt;= goal;

        passed =
                getResults(
                        "&gt;" + goal + " lines",
                        "" + lines.length + " lines",
                        "Outputs at least " + goal + " lines",
                        passed);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String input = input2.replaceAll(" ", "\n");
        String output = getMethodOutputWithInput("main", input);
        output2 = output;

        if (output1 == null)
        {
            input = input1.replaceAll(" ", "\n");
            output1 = getMethodOutputWithInput("main", input);
        }

        boolean passed = !output1.equals(output2);

        passed =
                getResults(
                        "true",
                        "" + passed,
                        "Outputs different results for different inputs",
                        passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCode();
        int num = countOccurences(code, "if");
        boolean passed = num &gt;= 1;

        getResults("&gt;=1", "" + num, "Number of if statements", passed);
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        // boolean passed = checkCodeContainsRegex("while loop", "while(*)");
        boolean passed = checkCodeContains("while loop", "while");
        assertTrue(passed);
    }

    @Test
    public void test5()
    {
        String input = input1.replaceAll(" ", "\n");
        int[] values = new int[10];

        for (int i = 0; i &lt; values.length; i++)
        {
            String output = getMethodOutputWithInput("main", input);
            values[i] = output.split("\n").length;
        }

        boolean passed = false;
        for (int i = 0; i &lt; values.length - 1; i++)
        {
            if (values[i] != values[i + 1]) passed = true;
        }

        passed = getResults("true", "" + passed, "Guesses random numbers", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.8.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP4-1-1" data-multipleanswers="false"><div class="para" id="AP4-1-1-1-1">4-1-9: Consider the following code segment.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int n = 35;
int result = 1;
while (n &gt; 0)
{
    int d = n % 10;
    result *= d;
    n /= 10;
}
System.out.println(result);
</code></pre></div> <div class="para" id="AP4-1-1-1-3">What is the output after the code has been executed?</div><li data-component="answer" id="csawesome2_2_AP4-1-1_opt_a"><div class="para" id="AP4-1-1-2-1-1-1">35</div></li><li data-component="feedback" id="csawesome2_2_AP4-1-1_opt_a"><div class="para" id="AP4-1-1-2-1-2-1">Keep track of the variables n, d, and result. Watch the tracing video in lesson 4.1.</div></li><li data-component="answer" id="csawesome2_2_AP4-1-1_opt_b" data-correct=""><div class="para" id="AP4-1-1-2-2-1-1">15</div></li><li data-component="feedback" id="csawesome2_2_AP4-1-1_opt_b"><div class="para" id="AP4-1-1-2-2-2-1">Correct! The digits in n = 35 are 3 and 5 and 3*5 = 15.</div></li><li data-component="answer" id="csawesome2_2_AP4-1-1_opt_c"><div class="para" id="AP4-1-1-2-3-1-1">10</div></li><li data-component="feedback" id="csawesome2_2_AP4-1-1_opt_c"><div class="para" id="AP4-1-1-2-3-2-1">Keep track of the variables n, d, and result. Watch the tracing video in lesson 4.1.</div></li><li data-component="answer" id="csawesome2_2_AP4-1-1_opt_d"><div class="para" id="AP4-1-1-2-4-1-1">8</div></li><li data-component="feedback" id="csawesome2_2_AP4-1-1_opt_d"><div class="para" id="AP4-1-1-2-4-2-1">Although the sum of the digits in 35 are 8. This code uses multiplication.</div></li><li data-component="answer" id="csawesome2_2_AP4-1-1_opt_e"><div class="para" id="AP4-1-1-2-5-1-1">33</div></li><li data-component="feedback" id="csawesome2_2_AP4-1-1_opt_e"><div class="para" id="AP4-1-1-2-5-2-1">Keep track of the variables n, d, and result. Watch the tracing video in lesson 4.1.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.8.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP4-1-2" data-multipleanswers="false"><div class="para" id="AP4-1-2-1-1">4-1-10: Consider the following code segment which is intended to print out the even numbers from 0 to 8 (including 8).</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int count = 0;
/* missing loop header */
{
    if (count % 2 == 0)
    {
        System.out.println(count);
    }
    count++;
}
</code></pre></div> <div class="para" id="AP4-1-2-1-3">Which of the following could replace the missing loop header to ensure that the code segment will work as intended to print out the even numbers from 0 to 8?</div><li data-component="answer" id="csawesome2_2_AP4-1-2_opt_a"><div class="para" id="AP4-1-2-2-1-1-1">while (count &gt; 0)</div></li><li data-component="feedback" id="csawesome2_2_AP4-1-2_opt_a"><div class="para" id="AP4-1-2-2-1-2-1">This would cause an infinite loop.</div></li><li data-component="answer" id="csawesome2_2_AP4-1-2_opt_b"><div class="para" id="AP4-1-2-2-2-1-1">while (count &gt;= 8)</div></li><li data-component="feedback" id="csawesome2_2_AP4-1-2_opt_b"><div class="para" id="AP4-1-2-2-2-2-1">This would not print out anything since count is 0 before the loop and not greater than 8.</div></li><li data-component="answer" id="csawesome2_2_AP4-1-2_opt_c"><div class="para" id="AP4-1-2-2-3-1-1">while (count &lt; 8)</div></li><li data-component="feedback" id="csawesome2_2_AP4-1-2_opt_c"><div class="para" id="AP4-1-2-2-3-2-1">This would print out one too few numbers and would stop before it printed out 8.</div></li><li data-component="answer" id="csawesome2_2_AP4-1-2_opt_d" data-correct=""><div class="para" id="AP4-1-2-2-4-1-1">while (count &lt; 10)</div></li><li data-component="feedback" id="csawesome2_2_AP4-1-2_opt_d"><div class="para" id="AP4-1-2-2-4-2-1">Correct! This would stop the loop when count is 10.</div></li><li data-component="answer" id="csawesome2_2_AP4-1-2_opt_e"><div class="para" id="AP4-1-2-2-5-1-1">while (count &lt;= 10)</div></li><li data-component="feedback" id="csawesome2_2_AP4-1-2_opt_e"><div class="para" id="AP4-1-2-2-5-2-1">This would print out one too many numbers, 0, 2, 4, 6, 8, 10.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>for-loops</id>
      <title>For Loops</title>
      <question>
        <label>Video: SEDnzXeb2hU</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="SEDnzXeb2hU" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.9.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_forloop">
                <div class="ac_question" id="csawesome2_2_forloop_question">
                  <div class="para" id="forloop-1-1">Here is a for loop that counts from 1 to 5. Can you change it to count from 2 to 10?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_forloop_editor" data-question_label="" data-codelens="true">public class ForLoop
{
    public static void main(String[] args)
    {
        for (int count = 1; count &lt;= 5; count++)
        {
            System.out.println(count);
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "2\n3\n4\n5\n6\n7\n8\n9\n10\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.9.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_forloopfromwhile">
                <div class="ac_question" id="csawesome2_2_forloopfromwhile_question">
                  <div class="para" id="forloopfromwhile-1-1">Here is a while loop that counts from 5 to 10. Run it and see what it does. Can you change it to a for-loop? Run your for-loop. Does it do the same thing?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_forloopfromwhile_editor" data-question_label="" data-codelens="true">public class ForLoopFromWhile
{
    public static void main(String[] args)
    {
        int count = 5;
        while (count &lt;= 10)
        {
            System.out.println(count);
            count++;
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.Test;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ForLoopFromWhile");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "5\n6\n7\n8\n9\n10\n";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }

    @Test
    public void testWhile() throws IOException
    {
        String target = "while (*)";
        boolean passed = checkCodeNotContainsRegex("while loop", target);
        assertTrue(passed);
    }

    @Test
    public void testFor() throws IOException
    {
        String target = "for (int * = #; * ? #; *~)";
        boolean passed = checkCodeContainsRegex("for loop", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.9.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qlb_3_1" data-multipleanswers="false"><div class="para" id="qlb_3_1-1-1">4-2-4: What does the following code print?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int i = 3; i &lt; 8; i++)
{
   System.out.print(i + " ");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qlb_3_1_opt_a"><div class="para" id="qlb_3_1-2-1-1-1">3 4 5 6 7 8</div></li><li data-component="feedback" id="csawesome2_2_qlb_3_1_opt_a"><div class="para" id="qlb_3_1-2-1-2-1">This loop starts with i equal to 3 but ends when i is equal to 8.</div></li><li data-component="answer" id="csawesome2_2_qlb_3_1_opt_b"><div class="para" id="qlb_3_1-2-2-1-1">0 1 2 3 4 5 6 7 8</div></li><li data-component="feedback" id="csawesome2_2_qlb_3_1_opt_b"><div class="para" id="qlb_3_1-2-2-2-1">What is i set to in the initialization area?</div></li><li data-component="answer" id="csawesome2_2_qlb_3_1_opt_c"><div class="para" id="qlb_3_1-2-3-1-1">8 8 8 8 8</div></li><li data-component="feedback" id="csawesome2_2_qlb_3_1_opt_c"><div class="para" id="qlb_3_1-2-3-2-1">This would be true if the for loop was missing the change part (int i = 3; i &lt; 8; ) but it does increment i in the change part (int i = 3; i &lt; 8; i++).</div></li><li data-component="answer" id="csawesome2_2_qlb_3_1_opt_d" data-correct=""><div class="para" id="qlb_3_1-2-4-1-1">3 4 5 6 7</div></li><li data-component="feedback" id="csawesome2_2_qlb_3_1_opt_d"><div class="para" id="qlb_3_1-2-4-2-1">The value of i is set to 3 before the loop executes and the loop stops when i is equal to 8.  So the last time through the loop i is equal to 7.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.9.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qlb_3_2" data-multipleanswers="false"><div class="para" id="qlb_3_2-1-1">4-2-5: What does the following code print?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int i = 1; i &lt;= 10; i++)
{
   System.out.print(i + " ");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qlb_3_2_opt_a"><div class="para" id="qlb_3_2-2-1-1-1">3 4 5 6 7 8</div></li><li data-component="feedback" id="csawesome2_2_qlb_3_2_opt_a"><div class="para" id="qlb_3_2-2-1-2-1">What is i set to in the initialization area?</div></li><li data-component="answer" id="csawesome2_2_qlb_3_2_opt_b"><div class="para" id="qlb_3_2-2-2-1-1">0 1 2 3 4 5 6 7 8 9</div></li><li data-component="feedback" id="csawesome2_2_qlb_3_2_opt_b"><div class="para" id="qlb_3_2-2-2-2-1">What is i set to in the initialization area?</div></li><li data-component="answer" id="csawesome2_2_qlb_3_2_opt_c" data-correct=""><div class="para" id="qlb_3_2-2-3-1-1">1 2 3 4 5 6 7 8 9 10</div></li><li data-component="feedback" id="csawesome2_2_qlb_3_2_opt_c"><div class="para" id="qlb_3_2-2-3-2-1">The value of i starts at 1 and this loop will execute until i equals 11.  The last time through the loop the value of i is 10.</div></li><li data-component="answer" id="csawesome2_2_qlb_3_2_opt_d"><div class="para" id="qlb_3_2-2-4-1-1">1 3 5 7 9</div></li><li data-component="feedback" id="csawesome2_2_qlb_3_2_opt_d"><div class="para" id="qlb_3_2-2-4-2-1">This loop changes i by 1 each time in the change area.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.9.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qlb_3_3" data-multipleanswers="false"><div class="para" id="qlb_3_3-1-1">4-2-6: How many times does the following method print a <code class="code-inline tex2jax_ignore">*</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int i = 3; i &lt;= 9; i++)
{
   System.out.print("*");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qlb_3_3_opt_a"><div class="para" id="qlb_3_3-2-1-1-1">10</div></li><li data-component="feedback" id="csawesome2_2_qlb_3_3_opt_a"><div class="para" id="qlb_3_3-2-1-2-1">This would be true if i started at 0 and ended at 9.  Does it?</div></li><li data-component="answer" id="csawesome2_2_qlb_3_3_opt_b"><div class="para" id="qlb_3_3-2-2-1-1">6</div></li><li data-component="feedback" id="csawesome2_2_qlb_3_3_opt_b"><div class="para" id="qlb_3_3-2-2-2-1">Since i starts at 3 and the last time through the loop it is 9 the loop executes 7 times (9 - 3 + 1 = 7)</div></li><li data-component="answer" id="csawesome2_2_qlb_3_3_opt_c" data-correct=""><div class="para" id="qlb_3_3-2-3-1-1">7</div></li><li data-component="feedback" id="csawesome2_2_qlb_3_3_opt_c"><div class="para" id="qlb_3_3-2-3-2-1">How many numbers are between 3 and 9 (including 3 and 9)?</div></li><li data-component="answer" id="csawesome2_2_qlb_3_3_opt_d"><div class="para" id="qlb_3_3-2-4-1-1">9</div></li><li data-component="feedback" id="csawesome2_2_qlb_3_3_opt_d"><div class="para" id="qlb_3_3-2-4-2-1">This would be true if i started at 0 and the value of i the last time through the loop it was 8.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.9.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_print_evens">
                <div class="parsons_question parsons-text">
                  <div class="para" id="print_evens-1-1">The following method has the correct code to print out all the even values from 0 to the value of 10, but the code is mixed up.  Drag the blocks from the left into the correct order on the right and indent them correctly.  Even though Java doesn’t require indention it is a good habit to get into. You will be told if any of the blocks are in the wrong order or not indented correctly when you click the “Check Me” button.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public static void printEvens()
{
---
   for (int i = 0; i &lt;= 10; i+=2)
   {
---
      System.out.println(i);
---
   } // end for
---
} // end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.9.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcfcp1">
                <div class="ac_question" id="csawesome2_2_lcfcp1_question">
                  <div class="para" id="lcfcp1-1-1">What do you think will happen when you run the code below?  How would it change if you changed line 11 to initialize i’s value to 3? Try the Code Lens button to visualize and trace through this code.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcfcp1_editor" data-question_label="" data-codelens="true">public class SongTest
{

    public static void printPopSong()
    {
        String line1 = " bottles of pop on the wall";
        String line2 = " bottles of pop";
        String line3 = "Take one down and pass it around";

        // loop 5 times (5, 4, 3, 2, 1)
        for (int i = 5; i &gt; 0; i--)
        {
            System.out.println(i + line1);
            System.out.println(i + line2);
            System.out.println(line3);
            System.out.println((i - 1) + line1);
            System.out.println();
        }
    }

    public static void main(String[] args)
    {
        SongTest.printPopSong();
    }
}
====
// Test Code for Lesson 4.1 - popSong
import static org.junit.Assert.*;

import org.junit.Test;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("SongTest");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "3 bottles of pop on the wall";

        String expect1 = expect.split("\n")[0];
        String output1 = output.split("\n")[0];

        boolean passed = output.contains(expect);
        passed = getResults(expect1, output1, "Print the song from 3", passed);
        assertTrue(passed);
    }

    @Test
    public void testMain2() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "5 bottles of pop on the wall";

        boolean passed = !output.contains(expect);

        String expect1 = expect.split("\n")[0];
        String output1 = output.split("\n")[0];

        passed = getResults(expect1, output1, "Do not start loop from 5", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.9.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_forloop-backwards">
                <div class="ac_question" id="csawesome2_2_forloop-backwards_question">
                  <div class="para" id="forloop-backwards-1-1">Can you make the loop count by 2s backwards? It should print out 5 3 1? Remember to change all 3 parts of the for loop.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_forloop-backwards_editor" data-question_label="" data-codelens="true">public class ForLoop
{
    public static void main(String[] args)
    {
        for (int count = 1; count &lt;= 5; count++)
        {
            System.out.println(count);
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "5\n3\n1";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.9.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_TurtleSquare">
                <div class="ac_question" id="csawesome2_2_TurtleSquare_question">
                  <div class="para" id="TurtleSquare-1-1">Can you change the code below to remove the repeated lines of code and use a loop to draw 4 sides of the square?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_TurtleSquare_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.util.*;

public class TurtleDrawSquare
{
    public static void main(String[] args)
    {
        World world = new World(300, 300);
        Turtle yertle = new Turtle(world);

        // Change the following code to use a for loop to draw the square
        yertle.forward();
        yertle.turn(90);
        yertle.forward();
        yertle.turn(90);
        yertle.forward();
        yertle.turn(90);
        yertle.forward();
        yertle.turn(90);

        world.show(true);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleDrawSquare");
    }

    @Test
    public void test1()
    {
        String target = "for (int * = #; * ? #; *~)";
        boolean passed = checkCodeContainsRegex("for loop", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String code = getCode();
        String forwards = ".forward()";

        int count = countOccurences(code, forwards);

        boolean passed = count == 1;

        passed =
                getResults(
                        "1 forward()",
                        "" + count + " forward()",
                        "Should only need forward() once",
                        passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCode();
        String forwards = ".turn(90)";

        int count = countOccurences(code, forwards);

        boolean passed = count == 1;

        passed =
                getResults(
                        "1 turn(90)",
                        "" + count + " turn(90)",
                        "Should only need turn(90) once",
                        passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.9.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge4-2-TurtleLoopShapes">
                <div class="ac_question" id="csawesome2_2_challenge4-2-TurtleLoopShapes_question">
                  <div class="para" id="challenge4-2-TurtleLoopShapes-1-1">Use a for-loop to draw a triangle. Then, change it to a pentagon. Then change it to draw any polygon using a variable n that holds the number of sides. Note that the angles in the turns have to add up to 360. The autograder only checks one shape at a time, so comment out the code for one shape before starting on the next.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge4-2-TurtleLoopShapes_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.util.*;

public class TurtleDrawShapes
{
    public static void main(String[] args)
    {
        World world = new World(400, 400);
        Turtle yertle = new Turtle(world);
        yertle.penUp(); // move a little to the left
        yertle.moveTo(100, 200);
        yertle.penDown();
        yertle.setColor(Color.blue);

        // Add your loop here!
        yertle.forward(100);
        yertle.turn(90);

        world.show(true);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleDrawShapes");
    }

    @Test
    public void test1()
    {
        String target = "for (int * = *; * ? *; *~)";
        boolean passed = checkCodeContainsRegex("for loop", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String code = getCode();
        String forwards = ".forward(";

        int count = countOccurences(code, forwards);

        boolean passed = count == 1;

        passed =
                getResults(
                        "1 forward(...)",
                        "" + count + " forward(...)",
                        "Should only need forward() once",
                        passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCode();
        String forwards = ".turn(";

        int count = countOccurences(code, forwards);

        boolean passed = count == 1;

        passed =
                getResults(
                        "1 turn(...)",
                        "" + count + " turn(...)",
                        "Should only need turn(...) once",
                        passed);
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String code = getCode();
        String forwards = "int n";

        int count = countOccurences(code, forwards);

        boolean passed = count == 1;

        passed = getResults("true", "" + passed, "Declare int n", passed);
        assertTrue(passed);
    }

    @Test
    public void test5()
    {
        String code = getCode();
        String test = "360/n";

        int count = countOccurences(code.replaceAll(" ", ""), test);
        boolean passed = count == 1;

        passed = getResults("true", "" + passed, "Calculates angle correctly using n", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.9.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP4-2-1" data-multipleanswers="false"><div class="para" id="AP4-2-1-1-1">4-2-12: Consider the following code segment.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int count = 0, sum = 0;
while (count &lt;= 6)
{
    count++;
    if (count % 2 == 0)
    {
        sum += count;
    }
}
System.out.println(sum);
</code></pre></div> <div class="para" id="AP4-2-1-1-3">Which of the following code segments will produce the same output as the code segment above?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">I.  int sum = 0;
    for(int count = 0; count &lt;= 6; count++)
    {
        count++;
        if (count % 2 == 0)
        {
             sum += count;
        }
    }
    System.out.println(sum);

II. int sum = 0;
    for(int i = 0; i &lt;= 6; i += 2)
    {
       sum += i;
    }
    System.out.println(sum);

III. int sum = 0;
     for(int j = 7; j &gt; 1; j--)
     {
        if (j % 2 == 0)
        {
             sum += j;
        }
     }
     System.out.println(sum);
</code></pre></div><li data-component="answer" id="csawesome2_2_AP4-2-1_opt_a"><div class="para" id="AP4-2-1-2-1-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_AP4-2-1_opt_a"><div class="para" id="AP4-2-1-2-1-2-1">Note that I has an extra count++ at the beginning of the loop body that should be deleted.</div></li><li data-component="answer" id="csawesome2_2_AP4-2-1_opt_b" data-correct=""><div class="para" id="AP4-2-1-2-2-1-1">II and III only</div></li><li data-component="feedback" id="csawesome2_2_AP4-2-1_opt_b"><div class="para" id="AP4-2-1-2-2-2-1">Correct! In the II, the loop counter increments by 2’s making sure it visits only even numbers and III generates the same sum but backwards.</div></li><li data-component="answer" id="csawesome2_2_AP4-2-1_opt_c"><div class="para" id="AP4-2-1-2-3-1-1">I and III only</div></li><li data-component="feedback" id="csawesome2_2_AP4-2-1_opt_c"><div class="para" id="AP4-2-1-2-3-2-1">Note that I has an extra count++ at the beginning of the loop body that should be deleted.</div></li><li data-component="answer" id="csawesome2_2_AP4-2-1_opt_d"><div class="para" id="AP4-2-1-2-4-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_AP4-2-1_opt_d"><div class="para" id="AP4-2-1-2-4-2-1">This is partially correct.</div></li><li data-component="answer" id="csawesome2_2_AP4-2-1_opt_e"><div class="para" id="AP4-2-1-2-5-1-1">I, II, and III</div></li><li data-component="feedback" id="csawesome2_2_AP4-2-1_opt_e"><div class="para" id="AP4-2-1-2-5-2-1">Note that I has an extra count++ at the beginning of the loop body that should be deleted.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.9.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP4-2-2" data-multipleanswers="false"><div class="para" id="AP4-2-2-1-1">4-2-13: Consider the following code segment.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int result = 1;
for(int i = 3; i &lt; 6; i += 2)
{
  result *= i;
}
System.out.println(result);
</code></pre></div> <div class="para" id="AP4-2-2-1-3">Which of the following best explains how changing the for loop header to <code class="code-inline tex2jax_ignore">for (int i = 4; i &lt;= 6; i += 2)</code> affects the output of the code segment?</div><li data-component="answer" id="csawesome2_2_AP4-2-2_opt_a"><div class="para" id="AP4-2-2-2-1-1-1">The output of the code segment will be unchanged.</div></li><li data-component="feedback" id="csawesome2_2_AP4-2-2_opt_a"><div class="para" id="AP4-2-2-2-1-2-1">One will multiply odd numbers and the other even numbers.</div></li><li data-component="answer" id="csawesome2_2_AP4-2-2_opt_b"><div class="para" id="AP4-2-2-2-2-1-1">The output will be the same, but the new loop will iterate more times.</div></li><li data-component="feedback" id="csawesome2_2_AP4-2-2_opt_b"><div class="para" id="AP4-2-2-2-2-2-1">One will multiply odd numbers and the other even numbers.</div></li><li data-component="answer" id="csawesome2_2_AP4-2-2_opt_c" data-correct=""><div class="para" id="AP4-2-2-2-3-1-1">The output will be different, but both versions of the loop will iterate two times.</div></li><li data-component="feedback" id="csawesome2_2_AP4-2-2_opt_c"><div class="para" id="AP4-2-2-2-3-2-1">Correct! One will multiply 3*5 and the other 4*6.</div></li><li data-component="answer" id="csawesome2_2_AP4-2-2_opt_d"><div class="para" id="AP4-2-2-2-4-1-1">The output will be different, and the new loop will iterate more times.</div></li><li data-component="feedback" id="csawesome2_2_AP4-2-2_opt_d"><div class="para" id="AP4-2-2-2-4-2-1">The output is different but they both would iterate 2 times.</div></li><li data-component="answer" id="csawesome2_2_AP4-2-2_opt_e"><div class="para" id="AP4-2-2-2-5-1-1">This will cause an error.</div></li><li data-component="feedback" id="csawesome2_2_AP4-2-2_opt_e"><div class="para" id="AP4-2-2-2-5-2-1">It will not cause an error.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>implementing-selection-and-iteration-algorithms</id>
      <title>Implementing Selection and Iteration Algorithms</title>
    </subchapter>
    <subchapter>
      <id>loops-and-strings</id>
      <title>Loops and Strings</title>
      <question>
        <label>Exercise 2.11.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_removeA">
                <div class="parsons_question parsons-text">
                  <div class="para" id="removeA-1-1">The following program removes all the a’s from a string, but the code is mixed up.  Drag the blocks from the left area into the correct order in the right area.  Click on the “Check Me” button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static void main(String[] args)
{
---
   String s = "are apples tasty without an a?";
   int index = 0;
   System.out.println("Original string: " + s);
---
   // while there is an a in s
   while (s.indexOf("a") &gt;= 0)
   {
---
      // Find the next index for an a
      index = s.indexOf("a");
---
      // Remove the a at index by concatenating
      // substring up to index and then rest of the string.
      s = s.substring(0,index) +
          s.substring(index+1);
---
   } // end loop
---
   System.out.println("String with a's removed:" + s);
---
} // end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.11.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lclw1">
                <div class="ac_question" id="csawesome2_2_lclw1_question">
                  <div class="para" id="lclw1-1-1">Change the code to add code for a counter variable to count the number of 1’s replaced in the message and print it out. Change the message to have more mistakes with 1’s to test it.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lclw1_editor" data-question_label="" data-codelens="true">public class FindAndReplace
{
    public static void main(String[] args)
    {
        String message = "Have a 1ong and happy 1ife";
        int index = 0;

        // while more 1's in the message
        while (message.indexOf("1") &gt;= 0)
        {
            // Find the next index for 1
            index = message.indexOf("1");
            System.out.println("Found a 1 at index: " + index);
            // Replace the 1 with a l at index by concatenating substring up to
            // index and then the rest of the string.
            String firstpart = message.substring(0, index);
            String lastpart = message.substring(index + 1);
            message = firstpart + "l" + lastpart;
            System.out.println("Replaced 1 with l at index " + index);
            System.out.println(
                    "The message is currently "
                            + message
                            + " but we aren't done looping yet!");
        }
        System.out.println("Cleaned text: " + message);
    }
}
====
// Test for Lesson 4.3.1 - While Loop FindAndReplace lclw1
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("FindAndReplace");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main").trim();
        String expect =
                "Found a 1 at index: 7\n"
                    + "Replaced 1 with l at index 7\n"
                    + "The message is currently Have a long and happy 1ife but we aren't done"
                    + " looping yet!\n"
                    + "Found a 1 at index: 22\n"
                    + "Replaced 1 with l at index 22\n"
                    + "The message is currently Have a long and happy life but we aren't done"
                    + " looping yet!\n"
                    + "Cleaned text: Have a long and happy life\n";

        boolean pass = !output.equals(expect.trim());

        boolean passed = getResults(expect, output, "Output should be different", pass);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.11.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_countEs">
                <div class="parsons_question parsons-text">
                  <div class="para" id="countEs-1-1">The following main method has the correct code to count the number of e’s in a string, but the code is mixed up.  Drag the blocks from the left area into the correct order in the right area.  Click on the “Check Me” button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static void main(String[] args)
{
---
   String message = "e is the most frequent English letter.";
   int count = 0;
---
   for(int i=0; i &lt; message.length(); i++)
   {
---
      if (message.substring(i,i+1).equalsIgnoreCase("e"))
---
         count++;
---
   }
---
   System.out.println(count);
---
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.11.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_reverseString">
                <div class="ac_question" id="csawesome2_2_reverseString_question">
                  <div class="para" id="reverseString-1-1">What would happen if you started the loop at 1 instead? What would happen if you used &lt;= instead of &lt;? What would happen if you changed the order in which you added the ithLetter in line 12?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_reverseString_editor" data-question_label="" data-codelens="true">public class ReverseString
{
    public static void main(String[] args)
    {
        String s = "Hello";
        String sReversed = "";
        String ithLetter;

        for (int i = 0; i &lt; s.length(); i++)
        {
            ithLetter = s.substring(i, i + 1);
            // add the letter at index i to what's already reversed.
            sReversed = ithLetter + sReversed;
        }
        System.out.println(s + " reversed is " + sReversed);
    }
}
====
// Test for Lesson 4.3 - ReverseString
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ReverseString");
    }

    @Test
    public void testMain() throws IOException
    {
        String origCode =
                "public class ReverseString\n"
                    + "{\n"
                    + "   public static void main(String[] args)\n"
                    + "   {\n"
                    + "     String s = \"Hello\";\n"
                    + "     String sReversed = \"\";\n"
                    + "     String ithLetter;\n\n"
                    + "     for(int i=0; i &lt; s.length(); i++) {\n"
                    + "         ithLetter = s.substring(i,i+1);\n"
                    + "         // add the letter at index i to what's already reversed.\n"
                    + "         sReversed = ithLetter + sReversed;\n"
                    + "     }\n"
                    + "     System.out.println(s + \" reversed is \" + sReversed);\n"
                    + "   }\n"
                    + " }\n\n";

        boolean passed = codeChanged(origCode);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.11.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge4-3-string-replace">
                <div class="ac_question" id="csawesome2_2_challenge4-3-string-replace_question">
                  <div class="para" id="challenge4-3-string-replace-1-1">Write a while loop that replaces every occurrence of “cat” in the message with “dog” using the indexOf and substring methods.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge4-3-string-replace_editor" data-question_label="" data-codelens="true">public class ChallengeReplace
{
    public static void main(String[] args)
    {
        String message =
                "I love cats! I have a cat named Coco. My cat's very smart!";

        // Write a loop here that replaces every occurrence of "cat"
        // in the message with "dog", using indexOf and substring.

        System.out.println(message);
    }
}
====
// Test Code for Lesson 4.3.3 - String Replacement - ChallengeReplace

import static org.junit.Assert.*;

import org.junit.Test;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ChallengeReplace");
    }

    @Test
    public void test1() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "I love cats! I have a cat named Coco. My cat's very smart!"
                        .replaceAll("cat", "dog");

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }

    @Test
    public void testWhile() throws IOException
    {
        String target = "while(";
        boolean passed = checkCodeContains("while loop", target);
        assertTrue(passed);
    }

    @Test
    public void testSubString()
    {
        String target = "substring(";
        boolean passed = checkCodeContains("substring", target);
        assertTrue(passed);
    }

    @Test
    public void testReplace() throws IOException
    {
        String target = ".replace";
        boolean passed = checkCodeNotContains("shortcut replace", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-6-13</id>
      <title>Nested For Loops</title>
      <question>
        <label>Exercise 2.12.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_TurtleNestedLoop">
                <div class="ac_question" id="csawesome2_2_TurtleNestedLoop_question"><div class="para" id="TurtleNestedLoop-1-1">The turtle below is trying to draw a square many times to create a snowflake pattern. Can you change the outer loop so that the pattern completes all the way around? Try different ending values for the counter i to find the smallest number that works between 5 and 15.</div> <div class="para" id="TurtleNestedLoop-1-2">To make the drawing faster, you can call the World or Turtle object’s setSpeed method with a 0-100 delay value where 0 is the fastest. If the code below does not work in your browser, you can copy the code into  this <a class="external" href="https://replit.com/@BerylHoffman/Java-Swing-Turtle" target="_blank">replit link</a><details class="ptx-footnote" aria-live="polite" id="TurtleNestedLoop-1-2-2"><summary class="ptx-footnote__number" title="Footnote 2.12.2"><sup> 2 </sup></summary><div class="ptx-footnote__contents" id="TurtleNestedLoop-1-2-2"><code class="code-inline tex2jax_ignore">https://replit.com/@BerylHoffman/Java-Swing-Turtle</code></div></details> (refresh page after forking and if it gets stuck) or download the files <a class="external" href="https://github.com/bhoffman0/APCSA-2019/tree/master/_sources/Unit2-Using-Objects/TurtleJavaSwingCode.zip" target="_blank">here</a><details class="ptx-footnote" aria-live="polite" id="TurtleNestedLoop-1-2-4"><summary class="ptx-footnote__number" title="Footnote 2.12.3"><sup> 3 </sup></summary><div class="ptx-footnote__contents" id="TurtleNestedLoop-1-2-4"><code class="code-inline tex2jax_ignore">https://github.com/bhoffman0/APCSA-2019/tree/master/_sources/Unit2-Using-Objects/TurtleJavaSwingCode.zip</code></div></details> to use in your own IDE.</div></div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_TurtleNestedLoop_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.util.*;

public class TurtleDrawSnowflake
{
    public static void main(String[] args)
    {
        World world = new World(300, 300);
        Turtle yertle = new Turtle(world);
        yertle.setSpeed(25); // fast 0 - 100 slow
        yertle.setColor(Color.blue);

        // Outer loop will do inner loop to draw a square,
        // and then turn a little each time
        // How many times should the outer loop run to complete the pattern? Try
        // some numbers between 5 and 15.
        for (int i = 1; i &lt;= 5; i++)
        {

            // inner loop draws a square
            for (int sides = 1; sides &lt;= 4; sides++)
            {
                yertle.forward();
                yertle.turn(90);
            }
            // turn a little before drawing square again
            yertle.turn(30);
        }
        world.show(true);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleDrawSnowflake");
    }

    @Test
    public void test2()
    {
        boolean passed = false;
        String code = getCode();
        int find = code.indexOf("i &lt;=");
        if (find != -1)
        {
            int end = code.indexOf(";", find);
            String s = code.substring(find + 5, end);
            int max = 0;
            try
            {
                max = Integer.parseInt(s);
            }
            catch (NumberFormatException e)
            {
                System.out.println("Couldn't parse int");
            }
            passed = max &gt;= 12;
            getResults("i &lt;= ?;", "i &lt;= " + max + ";", "Iterations complete drawing", passed);
        } else
            getResults(
                    "i &lt;= ?;",
                    "i &lt;= ",
                    "Could not find number of iterations - check spacing",
                    passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.12.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge4-4-Turtle-Nested-Loop-Snowflakes">
                <div class="ac_question" id="csawesome2_2_challenge4-4-Turtle-Nested-Loop-Snowflakes_question"><div class="para" id="challenge4-4-Turtle-Nested-Loop-Snowflakes-1-1">Use nested for-loops to have the turtle draw a snowflake of polygons. Use the variable turnAmount to turn after each shape and the variable n for the sides of the polygon.</div> <div class="para" id="challenge4-4-Turtle-Nested-Loop-Snowflakes-1-2">To make the drawing faster, you can call the World or Turtle object’s setSpeed method with a 0-100 delay value where 0 is the fastest. If the code below does not work in your browser, you can copy the code into  this <a class="external" href="https://replit.com/@BerylHoffman/Java-Swing-Turtle" target="_blank">replit link</a><details class="ptx-footnote" aria-live="polite" id="challenge4-4-Turtle-Nested-Loop-Snowflakes-1-2-2"><summary class="ptx-footnote__number" title="Footnote 2.12.7"><sup> 7 </sup></summary><div class="ptx-footnote__contents" id="challenge4-4-Turtle-Nested-Loop-Snowflakes-1-2-2"><code class="code-inline tex2jax_ignore">https://replit.com/@BerylHoffman/Java-Swing-Turtle</code></div></details> (refresh page after forking and if it gets stuck) or download the files <a class="external" href="https://github.com/bhoffman0/APCSA-2019/tree/master/_sources/Unit2-Using-Objects/TurtleJavaSwingCode.zip" target="_blank">here</a><details class="ptx-footnote" aria-live="polite" id="challenge4-4-Turtle-Nested-Loop-Snowflakes-1-2-4"><summary class="ptx-footnote__number" title="Footnote 2.12.8"><sup> 8 </sup></summary><div class="ptx-footnote__contents" id="challenge4-4-Turtle-Nested-Loop-Snowflakes-1-2-4"><code class="code-inline tex2jax_ignore">https://github.com/bhoffman0/APCSA-2019/tree/master/_sources/Unit2-Using-Objects/TurtleJavaSwingCode.zip</code></div></details> to use in your own IDE.</div></div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge4-4-Turtle-Nested-Loop-Snowflakes_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.util.*;

public class TurtleSnowflakes
{
    public static void main(String[] args)
    {
        World world = new World(300, 300);
        Turtle yertle = new Turtle(world);
        yertle.setSpeed(25); // fast 0 - 100 slow
        yertle.setColor(Color.blue);

        // Use this variable in the loops
        int turnAmount = 30;

        // 1. Write a for loop that runs many times
        // 2. Change it to use turnAmount to figure out how many times to run

        // 1 &amp; 2. Write an inner loop that draws a triangle (3 sides, 120 degree
        // turns)
        // 3. Then change it to be any polygon with a variable n

        // turn turnAmount degrees before drawing the polygon again

        // 4. Add an if statement that changes the colors depending on the loop
        // variables

        world.show(true);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleSnowflakes");
    }

    @Test
    public void test2()
    {
        String code = getCode();
        String target = "for (int * = #; * ? *; *~)";

        int num = countOccurencesRegex(code, target);

        boolean passed = num == 2;

        getResults("2", "" + num, "2 For loops (nested)", passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        boolean passed = checkCodeContains("if statement to change colors", "if");
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String code = getCode();
        String forwards = ".forward(";

        int count = countOccurences(code, forwards);

        boolean passed = count == 1;

        passed =
                getResults(
                        "1 forward(...)",
                        "" + count + " forward(...)",
                        "Should only need forward() once",
                        passed);
        assertTrue(passed);
    }

    @Test
    public void test5()
    {
        String code = getCode();
        String forwards = ".turn(";

        int count = countOccurences(code, forwards);

        boolean passed = count == 2;

        passed =
                getResults(
                        "2 turn(...)",
                        "" + count + " turn(...)",
                        "Should only need turn(...) twice",
                        passed);
        assertTrue(passed);
    }

    @Test
    public void test6()
    {
        boolean passed =
                checkCodeContains(
                        "Calculates number of iterations using turnAmount", "360/turnAmount");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.12.4.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcfcnl1">
                <div class="ac_question" id="csawesome2_2_lcfcnl1_question">
                  <div class="para" id="lcfcnl1-1-1">Can you change the code to print a rectangle with 10 rows and 8 columns of stars? You can also try replacing line 10 with this print statement to see the rows and columns: <code class="code-inline tex2jax_ignore">System.out.print(row + "-" + col + " ");</code></div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcfcnl1_editor" data-question_label="" data-codelens="true">public class NestedLoops
{

    public static void main(String[] args)
    {
        for (int row = 1; row &lt;= 3; row++)
        {
            for (int col = 1; col &lt;= 5; col++)
            {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("NestedLoops");
    }

    @Test
    public void test2()
    {
        boolean passed =
                checkCodeContains("10 rows", "row &lt;= 10")
                        &amp;&amp; checkCodeContains("8 columns", "col &lt;= 8");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.12.4.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_nested1" data-multipleanswers="false"><div class="para" id="nested1-1-1">4-4-2: What does the following code print?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int i = 1; i &lt; 7; i++)
{
    for (int y = 1; y &lt;= 5; y++)
    {
        System.out.print("*");
    }
    System.out.println();
}
</code></pre></div><li data-component="answer" id="csawesome2_2_nested1_opt_a"><div class="para" id="nested1-2-1-1-1">A rectangle of 7 rows with 5 stars per row.</div></li><li data-component="feedback" id="csawesome2_2_nested1_opt_a"><div class="para" id="nested1-2-1-2-1">This would be true if i was initialized to 0.</div></li><li data-component="answer" id="csawesome2_2_nested1_opt_b"><div class="para" id="nested1-2-2-1-1">A rectangle of 7 rows with 4 stars per row.</div></li><li data-component="feedback" id="csawesome2_2_nested1_opt_b"><div class="para" id="nested1-2-2-2-1">This would be true if i was initialized to 0 and the inner loop continued while y &lt; 5.</div></li><li data-component="answer" id="csawesome2_2_nested1_opt_c" data-correct=""><div class="para" id="nested1-2-3-1-1">A rectangle of 6 rows with 5 stars per row.</div></li><li data-component="feedback" id="csawesome2_2_nested1_opt_c"><div class="para" id="nested1-2-3-2-1">The outer loop runs from 1 up to 7 but not including 7 so there are 6 rows and the inner loop runs 1 to 5 times including 5 so there are 5 columns.</div></li><li data-component="answer" id="csawesome2_2_nested1_opt_d"><div class="para" id="nested1-2-4-1-1">A rectangle of 6 rows with 4 stars per row.</div></li><li data-component="feedback" id="csawesome2_2_nested1_opt_d"><div class="para" id="nested1-2-4-2-1">This would be true if the inner loop continued while y &lt; 5.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.12.4.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_nested2" data-multipleanswers="false"><div class="para" id="nested2-1-1">4-4-3: What does the following code print?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int i = 0; i &lt; 5; i++)
{
    for (int j = 3; j &gt;= 1; j--)
    {
        System.out.print("*");
    }
    System.out.println();
}
</code></pre></div><li data-component="answer" id="csawesome2_2_nested2_opt_a"><div class="para" id="nested2-2-1-1-1">A rectangle of 4 rows with 3 star per row.</div></li><li data-component="feedback" id="csawesome2_2_nested2_opt_a"><div class="para" id="nested2-2-1-2-1">This would be true if i was initialized to 1 or ended at 4.</div></li><li data-component="answer" id="csawesome2_2_nested2_opt_b" data-correct=""><div class="para" id="nested2-2-2-1-1">A rectangle of 5 rows with 3 stars per row.</div></li><li data-component="feedback" id="csawesome2_2_nested2_opt_b"><div class="para" id="nested2-2-2-2-1">Yes, the outer loop runs from 0 up to 5 but not including 5 so there are 5 rows and the inner loop runs from 3 down to 1 so 3 times.</div></li><li data-component="answer" id="csawesome2_2_nested2_opt_c"><div class="para" id="nested2-2-3-1-1">A rectangle of 4 rows with 1 star per row.</div></li><li data-component="feedback" id="csawesome2_2_nested2_opt_c"><div class="para" id="nested2-2-3-2-1">The inner loop runs 3 times when j is 3, 2, and then 1, so there are 3 stars per row.</div></li><li data-component="answer" id="csawesome2_2_nested2_opt_d"><div class="para" id="nested2-2-4-1-1">The loops have errors.</div></li><li data-component="feedback" id="csawesome2_2_nested2_opt_d"><div class="para" id="nested2-2-4-2-1">Try the code in an Active Code window and you will see that it does run.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.12.4.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch6ex6muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch6ex6muc-1-1">The main method in the following class should print 10 rows with 5 *s in each row.   But, the blocks have been mixed up and include one extra block that isn’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Test1
{
    public static void main(String[] args)
    {
---
        for (int x = 0; x &lt; 10; x++)
        {
---
            for (int y = 0; y &lt; 5; y++)
            {
---
            for (int y = 0; y &lt;= 5; y++)
            {  #paired
---
                System.out.print("*");
---
            }
---
            System.out.println();
---
        }
---
    }
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>loop-analysis</id>
      <title>Loop Analysis</title>
      <question>
        <label>Exercise 2.13.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_example_trace_loop">
                <div class="ac_question" id="csawesome2_2_example_trace_loop_question">
                  <div class="para" id="example_trace_loop-1-1">Can you trace through this code? Add in output statements <code class="code-inline tex2jax_ignore">System.out.println("var1: " + var1 + " var2: " + var2);</code> before the loop and inside the loop at the end to keep track of the variables and run. Click on the Code Lens button to visualize the code step by step.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_example_trace_loop_editor" data-question_label="" data-codelens="true">public class Trace
{
    public static void main(String[] args)
    {
        int var1 = 3;
        int var2 = 2;

        while ((var2 != 0) &amp;&amp; ((var1 / var2) &gt;= 0))
        {
            var1 = var1 + 1;
            var2 = var2 - 1;
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "var1: 3 var2: 2\nvar1: 4 var2: 1\nvar1: 5 var2: 0\n";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.13.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qlb_2_2" data-multipleanswers="false"><div class="para" id="qlb_2_2-1-1">4-5-2: What are the values of var1 and var2 when the code finishes executing?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int var1 = 0;
int var2 = 2;

while ((var2 != 0) &amp;&amp; ((var1 / var2) &gt;= 0))
{
   var1 = var1 + 1;
   var2 = var2 -1;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qlb_2_2_opt_a"><div class="para" id="qlb_2_2-2-1-1-1">var1 = 1, var2 = 1</div></li><li data-component="feedback" id="csawesome2_2_qlb_2_2_opt_a"><div class="para" id="qlb_2_2-2-1-2-1">The loop stops one of two ways, when var2 = 0 or when var1 / var2 = 0 - neither is true in this case</div></li><li data-component="answer" id="csawesome2_2_qlb_2_2_opt_b" data-correct=""><div class="para" id="qlb_2_2-2-2-1-1">var1 = 2, var2 = 0</div></li><li data-component="feedback" id="csawesome2_2_qlb_2_2_opt_b"><div class="para" id="qlb_2_2-2-2-2-1">The loop stopped because var2 = 0.  After the first execution of the loop var1 = 1 and var2 = 1.  After the second execution of the loop var1 = 2 and var2 = 0.  This stops the loop and doesn’t execute the second part of the complex conditional.</div></li><li data-component="answer" id="csawesome2_2_qlb_2_2_opt_c"><div class="para" id="qlb_2_2-2-3-1-1">var1 = 3, var2 = -1</div></li><li data-component="feedback" id="csawesome2_2_qlb_2_2_opt_c"><div class="para" id="qlb_2_2-2-3-2-1">The loop stops one of two ways, when var2 = 0 or when var1 / var2 = 0 - neither is true in this case</div></li><li data-component="answer" id="csawesome2_2_qlb_2_2_opt_d"><div class="para" id="qlb_2_2-2-4-1-1">var1 = 0, var2 = 2</div></li><li data-component="feedback" id="csawesome2_2_qlb_2_2_opt_d"><div class="para" id="qlb_2_2-2-4-2-1">The loop stops one of two ways, when var2 = 0 or when var1 / var2 = 0 - neither is true in this case</div></li><li data-component="answer" id="csawesome2_2_qlb_2_2_opt_e"><div class="para" id="qlb_2_2-2-5-1-1">The loop will cause a run-time error with a division by zero</div></li><li data-component="feedback" id="csawesome2_2_qlb_2_2_opt_e"><div class="para" id="qlb_2_2-2-5-2-1">Even though var1 = 2 and var2 = 0 when the conditional is executed the first condition is true so the rest of the complex conditional won’t execute.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.13.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qlb_2_3" data-multipleanswers="false"><div class="para" id="qlb_2_3-1-1">4-5-3: What are the values of x and y when the code finishes executing?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int x = 2;
int y = 5;

while (y &gt; 2 &amp;&amp; x &lt; y)
{
   x = x + 1;
   y = y - 1;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qlb_2_3_opt_a"><div class="para" id="qlb_2_3-2-1-1-1">x = 5, y = 2</div></li><li data-component="feedback" id="csawesome2_2_qlb_2_3_opt_a"><div class="para" id="qlb_2_3-2-1-2-1">This would be true if the and (&amp;&amp;) was an or (||) instead.  But in a complex conditional joined with and (&amp;&amp;) both conditions must be true for the condition to be true.</div></li><li data-component="answer" id="csawesome2_2_qlb_2_3_opt_b"><div class="para" id="qlb_2_3-2-2-1-1">x = 2, y = 5</div></li><li data-component="feedback" id="csawesome2_2_qlb_2_3_opt_b"><div class="para" id="qlb_2_3-2-2-2-1">This would be true if the loop never executed, but both conditions are true so the loop will execute.</div></li><li data-component="answer" id="csawesome2_2_qlb_2_3_opt_c"><div class="para" id="qlb_2_3-2-3-1-1">x = 5, y = 2</div></li><li data-component="feedback" id="csawesome2_2_qlb_2_3_opt_c"><div class="para" id="qlb_2_3-2-3-2-1">This would be true if the values were swapped, but they are not.</div></li><li data-component="answer" id="csawesome2_2_qlb_2_3_opt_d"><div class="para" id="qlb_2_3-2-4-1-1">x = 3, y = 4</div></li><li data-component="feedback" id="csawesome2_2_qlb_2_3_opt_d"><div class="para" id="qlb_2_3-2-4-2-1">This would be true the loop only executed one time, but it will execute twice.</div></li><li data-component="answer" id="csawesome2_2_qlb_2_3_opt_e" data-correct=""><div class="para" id="qlb_2_3-2-5-1-1">x = 4, y = 3</div></li><li data-component="feedback" id="csawesome2_2_qlb_2_3_opt_e"><div class="para" id="qlb_2_3-2-5-2-1">The first time the loop changes to x = 3, y = 4, the second time x = 4, y = 3 then the loop will stop since x is not less than y anymore.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.13.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_countstars1">
                <div class="ac_question" id="csawesome2_2_countstars1_question">
                  <div class="para" id="countstars1-1-1">How many stars are printed out in this loop? How many times does the loop run? Figure it out on paper before you run the code.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_countstars1_editor" data-question_label="" data-codelens="true">public class CountLoop
{

    public static void main(String[] args)
    {
        for (int i = 3; i &lt; 7; i++)
        {
            System.out.print("*");
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "****\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.13.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_countstars">
                <div class="ac_question" id="csawesome2_2_countstars_question">
                  <div class="para" id="countstars-1-1">How many stars are printed out by the following loops? How many times do the loops run? Calculate on paper before you run the code.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_countstars_editor" data-question_label="" data-codelens="true">public class NestedLoops
{

    public static void main(String[] args)
    {
        for (int row = 0; row &lt; 5; row++)
        {
            for (int col = 0; col &lt; 10; col++)
            {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "**********\n**********\n**********\n**********\n**********\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.13.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qln_6_1" data-multipleanswers="false"><div class="para" id="qln_6_1-1-1">4-5-6: How many times does the following code print a <code class="code-inline tex2jax_ignore">*</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int i = 3; i &lt; 8; i++)
{
    for (int y = 1; y &lt; 5; y++)
    {
        System.out.print("*");
    }
    System.out.println();
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qln_6_1_opt_a"><div class="para" id="qln_6_1-2-1-1-1">40</div></li><li data-component="feedback" id="csawesome2_2_qln_6_1_opt_a"><div class="para" id="qln_6_1-2-1-2-1">This would be true if the outer loop executed 8 times and the inner 5 times, but what is the initial value of i?</div></li><li data-component="answer" id="csawesome2_2_qln_6_1_opt_b" data-correct=""><div class="para" id="qln_6_1-2-2-1-1">20</div></li><li data-component="feedback" id="csawesome2_2_qln_6_1_opt_b"><div class="para" id="qln_6_1-2-2-2-1">The outer loop executes 7-3+1=5 times and the inner 4-1+1=4 so this will print 5 * 4 = 20 stars.</div></li><li data-component="answer" id="csawesome2_2_qln_6_1_opt_c"><div class="para" id="qln_6_1-2-3-1-1">24</div></li><li data-component="feedback" id="csawesome2_2_qln_6_1_opt_c"><div class="para" id="qln_6_1-2-3-2-1">This would be true if the outer loop executed 6 times such as if it was i &lt;= 8.</div></li><li data-component="answer" id="csawesome2_2_qln_6_1_opt_d"><div class="para" id="qln_6_1-2-4-1-1">30</div></li><li data-component="feedback" id="csawesome2_2_qln_6_1_opt_d"><div class="para" id="qln_6_1-2-4-2-1">This would be true if the inner loop executed 5 times such as if it was y &lt;= 5.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.13.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qln_6_2" data-multipleanswers="false"><div class="para" id="qln_6_2-1-1">4-5-7: What does the following code print?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int i = 2; i &lt; 8; i++)
{
    for (int y = 1; y &lt;= 5; y++)
    {
        System.out.print("*");
    }
    System.out.println();
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qln_6_2_opt_a"><div class="para" id="qln_6_2-2-1-1-1">A rectangle of 8 rows with 5 stars per row.</div></li><li data-component="feedback" id="csawesome2_2_qln_6_2_opt_a"><div class="para" id="qln_6_2-2-1-2-1">This would be true if i was initialized to 0.</div></li><li data-component="answer" id="csawesome2_2_qln_6_2_opt_b"><div class="para" id="qln_6_2-2-2-1-1">A rectangle of 8 rows with 4 stars per row.</div></li><li data-component="feedback" id="csawesome2_2_qln_6_2_opt_b"><div class="para" id="qln_6_2-2-2-2-1">This would be true if i was initialized to 0 and the inner loop continued while y &lt; 5.</div></li><li data-component="answer" id="csawesome2_2_qln_6_2_opt_c" data-correct=""><div class="para" id="qln_6_2-2-3-1-1">A rectangle of 6 rows with 5 stars per row.</div></li><li data-component="feedback" id="csawesome2_2_qln_6_2_opt_c"><div class="para" id="qln_6_2-2-3-2-1">The outer loop executes 8-2+1=6 times so there are 6 rows and the inner loop executes 5-1+1=5 times so there are 5 columns.</div></li><li data-component="answer" id="csawesome2_2_qln_6_2_opt_d"><div class="para" id="qln_6_2-2-4-1-1">A rectangle of 6 rows with 4 stars per row.</div></li><li data-component="feedback" id="csawesome2_2_qln_6_2_opt_d"><div class="para" id="qln_6_2-2-4-2-1">This would be true if the inner loop continued while y &lt; 5.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.13.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qln_6_3" data-multipleanswers="false"><div class="para" id="qln_6_3-1-1">4-5-8: What does the following print?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int i = 3; i &lt;= 9; i++)
{
   for (int j = 6; j &gt; 0; j--)
   {
       System.out.print("*");
   }
   System.out.println();
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qln_6_3_opt_a"><div class="para" id="qln_6_3-2-1-1-1">A rectangle of 9 rows and 5 stars per row.</div></li><li data-component="feedback" id="csawesome2_2_qln_6_3_opt_a"><div class="para" id="qln_6_3-2-1-2-1">Did you notice what i was initialized to?</div></li><li data-component="answer" id="csawesome2_2_qln_6_3_opt_b"><div class="para" id="qln_6_3-2-2-1-1">A rectangle of 6 rows and 6 stars per row.</div></li><li data-component="feedback" id="csawesome2_2_qln_6_3_opt_b"><div class="para" id="qln_6_3-2-2-2-1">It would print 6 rows if it was i &lt; 9.</div></li><li data-component="answer" id="csawesome2_2_qln_6_3_opt_c"><div class="para" id="qln_6_3-2-3-1-1">A rectangle of 7 rows and 5 stars per row.</div></li><li data-component="feedback" id="csawesome2_2_qln_6_3_opt_c"><div class="para" id="qln_6_3-2-3-2-1">It would print 5 stars per row if it was j &gt; 1.</div></li><li data-component="answer" id="csawesome2_2_qln_6_3_opt_d" data-correct=""><div class="para" id="qln_6_3-2-4-1-1">A rectangle of 7 rows and 6 stars per row.</div></li><li data-component="feedback" id="csawesome2_2_qln_6_3_opt_d"><div class="para" id="qln_6_3-2-4-2-1">The outer loop executes 9 - 3 + 1 = 7 times and the inner 6 - 1 + 1 = 6 times.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.13.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qln4" data-multipleanswers="false"><div class="para" id="qln4-1-1">4-5-9: Consider the following code segment. How many times is the string “Hi!” printed as a result of executing the code segment?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int i = 0;
while (i &lt;= 4)
{
  for (int j = 0; j &lt; 3; j++)
  {
    System.out.println("Hi!");
  }
  i++;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qln4_opt_a" data-correct=""><div class="para" id="qln4-2-1-1-1">15</div></li><li data-component="feedback" id="csawesome2_2_qln4_opt_a"><div class="para" id="qln4-2-1-2-1">The outer loop executes 4-0+1=5 times and the inner loop 2-0+1=3, so hi is printed 5*3 = 15 times</div></li><li data-component="answer" id="csawesome2_2_qln4_opt_b"><div class="para" id="qln4-2-2-1-1">12</div></li><li data-component="feedback" id="csawesome2_2_qln4_opt_b"><div class="para" id="qln4-2-2-2-1">The outer loop runs 5 times for i = 0, 1, 2, 3, 4.</div></li><li data-component="answer" id="csawesome2_2_qln4_opt_c"><div class="para" id="qln4-2-3-1-1">10</div></li><li data-component="feedback" id="csawesome2_2_qln4_opt_c"><div class="para" id="qln4-2-3-2-1">The inner loop runs 3 times for j = 0, 1, 2.</div></li><li data-component="answer" id="csawesome2_2_qln4_opt_d"><div class="para" id="qln4-2-4-1-1">8</div></li><li data-component="feedback" id="csawesome2_2_qln4_opt_d"><div class="para" id="qln4-2-4-2-1">The outer loop runs 5 times for i = 0, 1, 2, 3, 4.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>unit-3-summary</id>
      <title>Unit 3 - Summary</title>
      <question>
        <label>Exercise 2.14.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_ch5_cond1">
                <span data-subcomponent="question">
                  <div class="para" id="ch5_cond1-1-1">Drag the definition from the left and drop it on the correct concept on the right.  Click the "Check Me" button to see if you are correct</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="ch5_cond1-2-1">Review the summaries above.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_ch5_cond1_drag1">joins two conditions and it will only be true if both of the conditions are true</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch5_cond1_drag1">logical and</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch5_cond1_drag2">used to execute code only when a Boolean condition is true</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch5_cond1_drag2">conditional</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch5_cond1_drag3">an expression that is either true or false</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch5_cond1_drag3">Boolean expression</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch5_cond1_drag4">an expression with two or more expressions joined together with logical ands or ors</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch5_cond1_drag4">compound boolean expression</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.14.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_ch5_cond2">
                <span data-subcomponent="question">
                  <div class="para" id="ch5_cond2-1-1">Drag the definition from the left and drop it on the correct method on the right.  Click the "Check Me" button to see if you are correct.</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="ch5_cond2-2-1">Review the summaries above.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_ch5_cond2_drag1">used to execute code when at least one of two conditions is true</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch5_cond2_drag1">logical or</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch5_cond2_drag2">one or more statements enclosed in a open curly brace and a close curly brace</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch5_cond2_drag2">block(s) of statements</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch5_cond2_drag3">used to start a conditional and execute code if a condition is true</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch5_cond2_drag3">if</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch5_cond2_drag4">used to distribute a negation on a compound boolean expression</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch5_cond2_drag4">DeMorgan’s Laws</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-6-16</id>
      <title>Mixed Up Code Practice</title>
      <question optional="yes">
        <label>Exercise 2.15.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch5ex1muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch5ex1muc-1-1">The following program segment should print if your guess is too low, correct, or too high  But, the blocks have been mixed up.  Drag the blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">int guess = 10;
int answer = 5;
---
if (guess &lt; answer)
---
{
    System.out.println("Your guess is too low");
}
---
else if (guess == answer)
---
{
    System.out.println("You are right!");
}
---
else
---
{
     System.out.println("Your guess is too high");
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.15.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch5ex2muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch5ex2muc-1-1">The following program segment should print either “You can go out” if you don’t have any homework and have cleaned and otherwise should print “You can not go out”. But the blocks have been mixed up and includes one extra block that is not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public class Test1
{
---
    public static void main(String[] args)
    {
---
        boolean homeworkLeft = false;
        boolean cleaned = true;
---
        if (!homeworkLeft &amp;&amp; cleaned)
---
        if (homeworkLeft &amp;&amp; cleaned)  #paired
---
        {
            System.out.println("You can go out");
        }
---
        else
---
        {
            System.out.println("You can not go out");
        }
---
    }
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.15.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch5ex3muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch5ex3muc-1-1">The main method in the following class should print if x is in the range of 1 to 10 (inclusive) or not. But, the blocks have been mixed up and includes an extra block that isn’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public class Test1
{
---
    public static void main(String[] args)
    {
---
        int x = 3;
---
        if (x &gt;= 1 &amp;&amp; x &lt;= 10)
---
        if (x &gt;= 1 || x &lt;= 10)  #paired
---
        {
            System.out.println("1 &lt;= x &lt;= 10");
        }
---
        else
---
        {
            System.out.println("x is not in range");
        }
---
    }
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.15.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch5ex4muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch5ex4muc-1-1">The main method in the following class should print out if a string has the word “ringing” in it or not. But, the blocks have been mixed up and includes an extra block that isn’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public class Test1
{
---
    public static void main(String[] args)
    {
---
       String message = "Is that the phone ringing?";
---
       if (message.indexOf("ringing") &gt;= 0)
---
       if (message.indexof("ringing") &gt;= 0)  #paired
---
       {
           System.out.println("Answer the phone!");
       }
---
       else
---
       {
           System.out.println("I don't hear anything.");
       }
---
    }
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.15.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch5ex5muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch5ex5muc-1-1">The main method in the following class should print if your favorite food is junk food (pizza or wings) or not. But, the blocks have been mixed up and includes an extra block that is not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public class Test1
{
    public static void main(String[] args)
    {
---
        String favFood = "kale";
        boolean favPizza = favFood.equals("pizza");
        boolean favWings = favFood.equals("wings");
---
        if (favPizza || favWings)
---
        if (favPizza &amp;&amp; favWings)  #paired
---
        {
            System.out.println("Your fav is junk food");
        }
---
        else
---
        {
            System.out.println("Your fav is not junk");
        }
---
    }
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.15.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch5ex6muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch5ex6muc-1-1">The main method in the following class should print your fine if you are speeding.  If you are going over 65 but less than 75 the fine is 50.  If you are going at least 75 and less than 85 the fine is 100.  Over that the fine is 200.  It does not print anything if you are not speeding. But, the blocks have been mixed up and includes two extra blocks that aren’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public class Test1
{
    public static void main(String[] args)
    {
---
        int speed = 90;
---
        if (speed &gt; 65 &amp;&amp; speed &lt; 75)
---
        if (speed &gt; 65 || speed &lt; 75)  #paired
---
        {
            System.out.println("50");
        }
---
        else if (speed &gt;= 75 &amp;&amp; speed &lt; 85)
---
        else if (speed &gt;= 75 || speed &lt; 85)  #paired
---
        {
            System.out.println("100");
        }
---
        else if (speed &gt;= 85)
        {
            System.out.println("200");
        }
---
    }
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.15.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch5ex7muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch5ex7muc-1-1">The main method in the following class should print the alarm time.  If it is a weekday you should get up at 7:00am and if not get up at 10:00am. But, the blocks have been mixed up.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public class Test1
{
---
    public static void main(String[] args)
    {
---
        boolean weekend = false;
---
        if (!weekend)
---
        {
            System.out.println("7:00am");
        }
---
        else
---
        {
            System.out.println("10:00am");
        }
---
    }
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.15.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch5ex8muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch5ex8muc-1-1">The main method in the following class should print if you can text now.  You can text if you are not driving and not eating. But, the blocks have been mixed up and includes an extra block that isn’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public class Test1
{
---
    public static void main(String[] args)
    {
---
        boolean driving = true;
        boolean eating = false;
---
        if (!driving &amp;&amp; !eating)
---
        if (!driving || !eating)  #paired
---
        {
            System.out.println("Can text now");
        }
---
        else
---
        {
            System.out.println("Can't text now");
        }
---
    }
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.15.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch5ex9muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch5ex9muc-1-1">The main method in the following class should print if your name starts with a vowel or not. But, the blocks have been mixed up.  Drag the blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public class Test1
{
---
    public static void main(String[] args)
    {
---
        String name = "Julian";
        String firstLetter = name.substring(0,1);
        String lowerFirst = firstLetter.toLowerCase();
---
        boolean aF = lowerFirst.equals("a");
        boolean eF = lowerFirst.equals("e");
        boolean iF = lowerFirst.equals("i");
        boolean oF = lowerFirst.equals("o");
        boolean uF = lowerFirst.equals("u");
---
        if (aF || eF || iF || oF || uF)
---
        {
            System.out.println("Starts with a vowel");
        }
---
        else
---
        {
            System.out.println("Starts with a consonant");
        }
---
    }
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.15.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch5ex10muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch5ex10muc-1-1">The main method in the following class should print your grade for score. But, the blocks have been mixed up.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public class Test1
{
    public static void main(String[] args)
    {
---
        int score = 73;
---
        if (score &gt;= 90)
---
        {
            System.out.println("A");
        }
---
        else if (score &gt;= 80)
---
        {
            System.out.println("B");
        }
---
        else if (score &gt;= 70)
        {
            System.out.println("C");
        }
---
        else if (score &gt;= 60)
        {
            System.out.println("D");
        }
---
        else
        {
            System.out.println("E");
        }
---
    }
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-000546</id>
      <title>Toggle Mixed Up or Write Code Practice</title>
    </subchapter>
    <subchapter>
      <id>csawesome2-6-18</id>
      <title>Coding Practice</title>
      <question optional="yes">
        <label>Exercise 2.17.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_UNIQUE-ID-000619">
                <div class="ac_question" id="csawesome2_2_UNIQUE-ID-000619_question">
                  <div class="para" id="UNIQUE-ID-000619-1-1">The following code should print <code class="code-inline tex2jax_ignore">x is greater than 0</code>.  However, the code has errors.  Fix the code so that it compiles and runs correctly.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_UNIQUE-ID-000619_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int x = 3;
        if (x &gt; 0
            System.out.println("x is greater than 0")
        else
            System.out.println(x is less than or equal 0");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "x is greater than 0\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.17.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch5Ex1a">
                <div class="ac_question" id="csawesome2_2_ch5Ex1a_question">
                  <div class="para" id="ch5Ex1a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch5Ex1a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int x = 3;
        if (x &gt; 0)
        {
            System.out.println("x is greater than 0");
        }
        else
        {
            System.out.println("x is less than or equal 0");
        }
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.17.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_UNIQUE-ID-000623">
                <div class="ac_question" id="csawesome2_2_UNIQUE-ID-000623_question">
                  <div class="para" id="UNIQUE-ID-000623-1-1">The following code should check your guess against the answer and print that it is too low, correct, or too high.  However, the code has errors.  Fix the code so that it compiles and runs correctly.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_UNIQUE-ID-000623_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int guess = 7;
        int answer = 9;
        if guess &lt; answer)
            System.out.println("Your guess is too low);
        else if (guess = answer)
            System.out.println("You are right!");
        else
            System.println("Your guess is too high");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Your guess is too low\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.17.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch5Ex2a">
                <div class="ac_question" id="csawesome2_2_ch5Ex2a_question">
                  <div class="para" id="ch5Ex2a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch5Ex2a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int guess = 7;
        int answer = 9;
        if (guess &lt; answer)
        {
            System.out.println("Your guess is too low");
        }
        else if (guess == answer)
        {
            System.out.println("You are right!");
        }
        else
        {
            System.out.println("Your guess is too high");
        }
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.17.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_UNIQUE-ID-000627">
                <div class="ac_question" id="csawesome2_2_UNIQUE-ID-000627_question">
                  <div class="para" id="UNIQUE-ID-000627-1-1">The following code should print “You can go out” if you have done your homework and cleaned your room. However, the code has errors.  Fix the code so that it compiles and runs correctly.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_UNIQUE-ID-000627_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        boolean doneHomework = True;
        boolean cleanedRoom = true;
        if (doneHomework &amp;&amp; cleanedRoom)
        {
            System.out.println("You cannot go out");
        }
        else
        {
            System.out.println("You can go out");
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "You can go out\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.17.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch5Ex3a">
                <div class="ac_question" id="csawesome2_2_ch5Ex3a_question">
                  <div class="para" id="ch5Ex3a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch5Ex3a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        boolean doneHomework = true;
        boolean cleanedRoom = true;
        if (doneHomework &amp;&amp; cleanedRoom)
        {
            System.out.println("You can go out");
        }
        else
        {
            System.out.println("You cannot go out");
        }
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.17.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_UNIQUE-ID-000631">
                <div class="ac_question" id="csawesome2_2_UNIQUE-ID-000631_question">
                  <div class="para" id="UNIQUE-ID-000631-1-1">The following code should print if x is in the range of 0 to 10 (including 0 and 10). However, the code has errors.  Fix the errors so that the code runs as intended.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_UNIQUE-ID-000631_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int x = 3
        if (x &gt; 0 &amp;&amp; x &lt;= 10)
            System.out.println("x is between 0 and 10 inclusive");
        otherwise
            System.out.println("x is either less than 0 or greater than 10");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "x is between 0 and 10 inclusive\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.17.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch5Ex4a">
                <div class="ac_question" id="csawesome2_2_ch5Ex4a_question">
                  <div class="para" id="ch5Ex4a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch5Ex4a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int x = 3;
        if (x &gt;= 0 &amp;&amp; x &lt;= 10)
            System.out.println("x is between 0 and 10 inclusive");
        else System.out.println("x is either less than 0 or greater than 10");
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.17.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_UNIQUE-ID-000635">
                <div class="ac_question" id="csawesome2_2_UNIQUE-ID-000635_question">
                  <div class="para" id="UNIQUE-ID-000635-1-1">The following code should print if x is less than 0, equal to 0, or greater than 0.  Finish it to work correctly.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_UNIQUE-ID-000635_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int x = -3;
        if (x &gt; 0)
        {
            System.out.println("x is less than 0");
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "x is less than 0";
        boolean passed = getResults(expect, output, "Expected output from main if x = -3");
        assertTrue(passed);
    }

    @Test
    public void testCountIfs()
    {
        String code = getCode();
        int num = countOccurences(code, "if");
        boolean passed = num &gt;= 2;

        getResults("2+", "" + num, "Number of if statements", passed);
        assertTrue(passed);
    }

    @Test
    public void testCheckCodeContains2()
    {
        boolean ifGreater = checkCodeContains("Test if x greater than 0", "if (x &gt; 0)");

        boolean ifEqual = checkCodeContains("Test if equal", "if (x == 0)");
        boolean passed =
                getResults(
                        "Test if x greater than 0 or test if x is equal to 0",
                        "Greater than: " + ifGreater + ", Equal to: " + ifEqual,
                        "Test if x greater than 0 or if x equal to 0",
                        ifGreater || ifEqual);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.17.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch5Ex5a">
                <div class="ac_question" id="csawesome2_2_ch5Ex5a_question">
                  <div class="para" id="ch5Ex5a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch5Ex5a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int x = -3;
        if (x &lt; 0)
        {
            System.out.println("x is less than 0");
        }
        else if (x == 0)
        {
            System.out.println("x is equal to 0");
        }
        else
        {
            System.out.println("x is greater than 0");
        }
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.17.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_UNIQUE-ID-000639">
                <div class="ac_question" id="csawesome2_2_UNIQUE-ID-000639_question">
                  <div class="para" id="UNIQUE-ID-000639-1-1">Finish the code below so that it prints <code class="code-inline tex2jax_ignore">You can go out</code> if you have a ride or if you can walk and otherwise prints <code class="code-inline tex2jax_ignore">You can't go out</code>.  Use a logical or to create a complex conditional.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_UNIQUE-ID-000639_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        boolean canWalk = true;
        boolean haveRide = false;
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testCheckCodeContains()
    {
        boolean output1 =
                checkCodeContains(
                        "print statement You can go out", "System.out.println(\"You can go out\")");
        assertTrue(output1);
    }

    @Test
    public void testCheckCodeContains2()
    {
        boolean output2 =
                checkCodeContains(
                        "print statement You can't go out",
                        "System.out.println(\"You can't go out\")");
        assertTrue(output2);
    }

    @Test
    public void testCheckCodeContains3()
    {
        boolean output3 = checkCodeContains("or", "||");
        assertTrue(output3);
    }

    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class Test1 { public static void main(String[] args) { boolean canWalk ="
                    + " true; boolean haveRide = false; } }";

        boolean changed = codeChanged(origCode);

        assertTrue(changed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.17.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch5Ex6a">
                <div class="ac_question" id="csawesome2_2_ch5Ex6a_question">
                  <div class="para" id="ch5Ex6a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch5Ex6a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        boolean canWalk = true;
        boolean haveRide = false;
        if (canWalk || haveRide)
        {
            System.out.println("You can go out");
        }
        else
        {
            System.out.println("You can't go out");
        }
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.17.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_UNIQUE-ID-000643">
                <div class="ac_question" id="csawesome2_2_UNIQUE-ID-000643_question">
                  <div class="para" id="UNIQUE-ID-000643-1-1">Finish the code below to print you can go out if you don’t have homework and you have done the dishes.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_UNIQUE-ID-000643_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        boolean haveHomework = false;
        boolean didDishes = true;
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testCheckCodeContains()
    {
        boolean output1 =
                checkCodeContains(
                        "print statement You can go out", "System.out.println(\"You can go out\")");
        assertTrue(output1);
    }

    @Test
    public void testCheckCodeContains2()
    {
        boolean output2 = checkCodeContains("and", "&amp;&amp;");
        assertTrue(output2);
    }

    @Test
    public void testCheckCodeContains3()
    {
        boolean output2 = checkCodeContains("not", "!");
        assertTrue(output2);
    }

    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class Test1 { public static void main(String[] args) { boolean haveHomework"
                    + " = false; boolean didDishes = true; } }";
        boolean changed = codeChanged(origCode);
        assertTrue(changed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.17.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch5Ex7a">
                <div class="ac_question" id="csawesome2_2_ch5Ex7a_question">
                  <div class="para" id="ch5Ex7a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch5Ex7a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        boolean haveHomework = false;
        boolean didDishes = true;
        if (!haveHomework &amp;&amp; didDishes)
        {
            System.out.println("You can go out");
        }
        else
        {
            System.out.println("You can't go out");
        }
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.17.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_UNIQUE-ID-000647">
                <div class="ac_question" id="csawesome2_2_UNIQUE-ID-000647_question">
                  <div class="para" id="UNIQUE-ID-000647-1-1">Finish the following code so that it prints <code class="code-inline tex2jax_ignore">You have a fever</code> if your temperature is above 100 and otherwise prints <code class="code-inline tex2jax_ignore">You don't have a fever</code>.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_UNIQUE-ID-000647_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        double temp = 103.5;
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testCheckCodeContains()
    {
        boolean output1 =
                checkCodeContains(
                        "print statement You have a fever",
                        "System.out.println(\"You have a fever\")");
        assertTrue(output1);
    }

    @Test
    public void testCheckCodeContains2()
    {
        boolean output2 =
                checkCodeContains(
                        "print statement You don't have a fever",
                        "System.out.println(\"You don't have a fever\")");
        assertTrue(output2);
    }

    @Test
    public void testCheckCodeContains3()
    {
        boolean output4 =
                checkCodeContains("if statement for temp greater than 100", "if (temp &gt; 100)");
        assertTrue(output4);
    }

    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class Test1 { public static void main(String[] args) { double temp = 103.5;"
                    + " } }";
        boolean changed = codeChanged(origCode);
        assertTrue(changed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.17.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch5Ex8a">
                <div class="ac_question" id="csawesome2_2_ch5Ex8a_question">
                  <div class="para" id="ch5Ex8a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch5Ex8a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        double temp = 103.5;
        if (temp &gt; 100)
        {
            System.out.println("You have a fever");
        }
        else
        {
            System.out.println("You don't have a fever");
        }
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.17.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_UNIQUE-ID-000651">
                <div class="ac_question" id="csawesome2_2_UNIQUE-ID-000651_question">
                  <div class="para" id="UNIQUE-ID-000651-1-1">Finish the code to print <code class="code-inline tex2jax_ignore">It is freezing</code> if the temperature is below 30, <code class="code-inline tex2jax_ignore">It is cold</code> if it is below 50, <code class="code-inline tex2jax_ignore">It is nice out</code> if it is below 90, or <code class="code-inline tex2jax_ignore">It is hot</code> using nested if else statements.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_UNIQUE-ID-000651_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int temp = 100;
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testCountIfs()
    {
        String code = getCode();
        int num = countOccurences(code, "if");
        boolean passed = num &gt;= 3;

        getResults("3+", "" + num, "Number of if statements", passed);
        assertTrue(passed);
    }

    @Test
    public void testCountElses()
    {
        String code = getCode();
        int num = countOccurences(code, "else");
        boolean passed = num &gt;= 3;

        getResults("3+", "" + num, "Number of else statements", passed);
        assertTrue(passed);
    }

    @Test
    public void testCountPrints()
    {
        String code = getCode();
        int num = countOccurences(code, "System.out.print");
        boolean passed = num &gt;= 4;

        getResults("4+", "" + num, "Number of print statements", passed);
        assertTrue(passed);
    }

    @Test
    public void testMain() throws IOException
    {
        String expect = "It is hot";
        String output = getMethodOutput("main");
        boolean passed = getResults(expect, output, "Prints It is hot if temp = 100");
        assertTrue(passed);
    }

    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class Test1 { public static void main(String[] args) {  int temp = 100; }"
                    + " }";
        boolean changed = codeChanged(origCode);
        assertTrue(changed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.17.18 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch5Ex9a">
                <div class="ac_question" id="csawesome2_2_ch5Ex9a_question">
                  <div class="para" id="ch5Ex9a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch5Ex9a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int temp = 100;
        if (temp &lt; 30)
        {
            System.out.println("It is freezing");
        }
        else if (temp &lt; 50)
        {
            System.out.println("It is cold");
        }
        else if (temp &lt; 90)
        {
            System.out.println("It is nice out");
        }
        else
        {
            System.out.println("It is hot");
        }
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.17.19 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_UNIQUE-ID-000655">
                <div class="ac_question" id="csawesome2_2_UNIQUE-ID-000655_question">
                  <div class="para" id="UNIQUE-ID-000655-1-1">Finish the code below to print your grade based on your score.  The score is an A if you scored 92 or higher, a B if you scored 82 to 91, a C if you scored 72 to 81, a D if you scored a 62 to 71, or an E.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_UNIQUE-ID-000655_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int score = 67;
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class Test1 { public static void main(String[] args) {        int score ="
                    + " 67; } }";

        boolean changed = codeChanged(origCode);

        assertTrue(changed);
    }

    @Test
    public void testCheckCodeContains()
    {

        boolean outputA = checkCodeContains("print statement - A", "System.out.println(\"A\")");
        assertTrue(outputA);
    }

    @Test
    public void testCheckCodeContains2()
    {
        boolean outputB = checkCodeContains("print statement - B", "System.out.println(\"B\")");
        assertTrue(outputB);
    }

    @Test
    public void testCheckCodeContains3()
    {
        boolean outputC = checkCodeContains("print statement - C", "System.out.println(\"C\")");
        assertTrue(outputC);
    }

    @Test
    public void testCheckCodeContains4()
    {
        boolean outputD = checkCodeContains("print statement - D", "System.out.println(\"D\")");
        assertTrue(outputD);
    }

    @Test
    public void testCheckCodeContains5()
    {
        boolean outputE = checkCodeContains("print statement - E", "System.out.println(\"E\")");
        assertTrue(outputE);
    }

    @Test
    public void testCheckCodeContains6()
    {
        boolean output = checkCodeContains("if you scored 92 or higher", "if (score &gt;= 92)");
        assertTrue(output);
    }

    @Test
    public void testCheckCodeContains7()
    {
        boolean output =
                checkCodeContains("else if you scored 82 or higher", "else if (score &gt;= 82)");
        assertTrue(output);
    }

    @Test
    public void testCheckCodeContains8()
    {
        boolean output =
                checkCodeContains("else if you scored 72 or higher", "else if (score &gt;= 72)");
        assertTrue(output);
    }

    @Test
    public void testCheckCodeContains9()
    {
        boolean output =
                checkCodeContains("else if you scored 62 or higher", "else if (score &gt;= 62)");
        assertTrue(output);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.17.20 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch5Ex10a">
                <div class="ac_question" id="csawesome2_2_ch5Ex10a_question">
                  <div class="para" id="ch5Ex10a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch5Ex10a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int score = 67;
        if (score &gt;= 92)
        {
            System.out.println("A");
        }
        else if (score &gt;= 82)
        {
            System.out.println("B");
        }
        else if (score &gt;= 72)
        {
            System.out.println("C");
        }
        else if (score &gt;= 62)
        {
            System.out.println("D");
        }
        else
        {
            System.out.println("E");
        }
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>multiple-choice-exercises-1</id>
      <title>Multiple Choice Exercises</title>
      <question>
        <label>Exercise 2.18.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qce_1" data-multipleanswers="false"><div class="para" id="qce_1-1-1">3-12-1: What does the following code print when x has been set to 187?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">if (x &lt; 0)
{
   System.out.println("x is negative");
}
else if (x == 0)
{
    System.out.println("x is zero");
}
else
{
    System.out.println("x is positive");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qce_1_opt_a"><div class="para" id="qce_1-2-1-1-1">x is negative</div></li><li data-component="feedback" id="csawesome2_2_qce_1_opt_a"><div class="para" id="qce_1-2-1-2-1">This will only print if x has been set to a number less than zero. Has it?</div></li><li data-component="answer" id="csawesome2_2_qce_1_opt_b"><div class="para" id="qce_1-2-2-1-1">x is zero</div></li><li data-component="feedback" id="csawesome2_2_qce_1_opt_b"><div class="para" id="qce_1-2-2-2-1">This will only print if x has been set to 0.  Has it?</div></li><li data-component="answer" id="csawesome2_2_qce_1_opt_c" data-correct=""><div class="para" id="qce_1-2-3-1-1">x is positive</div></li><li data-component="feedback" id="csawesome2_2_qce_1_opt_c"><div class="para" id="qce_1-2-3-2-1">The first condition is false and x is not equal to zero so the else will execute.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.18.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qce_2" data-multipleanswers="false"><div class="para" id="qce_2-1-1">3-12-2: What is printed when the following code executes and x equals 4 and y equals 3?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">if (!(x &lt; 3 || y &gt; 2))
   System.out.println("first case");
else
   System.out.println("second case");
</code></pre></div><li data-component="answer" id="csawesome2_2_qce_2_opt_a"><div class="para" id="qce_2-2-1-1-1">first case</div></li><li data-component="feedback" id="csawesome2_2_qce_2_opt_a"><div class="para" id="qce_2-2-1-2-1">This will print if x is greater than or equal 3 and y is less than or equal 2.  In this case x is greater than 3 so the first condition is true, but the second condition is false.</div></li><li data-component="answer" id="csawesome2_2_qce_2_opt_b" data-correct=""><div class="para" id="qce_2-2-2-1-1">second case</div></li><li data-component="feedback" id="csawesome2_2_qce_2_opt_b"><div class="para" id="qce_2-2-2-2-1">This will print if x is less than 3 or y is greater than 2.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.18.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qce_3" data-multipleanswers="false"><div class="para" id="qce_3-1-1">3-12-3: What is the value of grade when the following code executes and score is 80?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">if (score &gt;= 90)
{
    grade = "A";
}
if (score &gt;= 80)
{
    grade = "B";
}
if (score &gt;= 70)
{
    grade = "C";
}
if (score &gt;= 60)
{
    grade = "D";
}
else
{
    grade = "E";
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qce_3_opt_a"><div class="para" id="qce_3-2-1-1-1">A</div></li><li data-component="feedback" id="csawesome2_2_qce_3_opt_a"><div class="para" id="qce_3-2-1-2-1">Notice that each of the first 4 statements start with an if.  What will actually be printed?  Try it.</div></li><li data-component="answer" id="csawesome2_2_qce_3_opt_b"><div class="para" id="qce_3-2-2-1-1">B</div></li><li data-component="feedback" id="csawesome2_2_qce_3_opt_b"><div class="para" id="qce_3-2-2-2-1">Each of the first 4 if statements will execute.</div></li><li data-component="answer" id="csawesome2_2_qce_3_opt_c"><div class="para" id="qce_3-2-3-1-1">C</div></li><li data-component="feedback" id="csawesome2_2_qce_3_opt_c"><div class="para" id="qce_3-2-3-2-1">Check this in DrJava.</div></li><li data-component="answer" id="csawesome2_2_qce_3_opt_d" data-correct=""><div class="para" id="qce_3-2-4-1-1">D</div></li><li data-component="feedback" id="csawesome2_2_qce_3_opt_d"><div class="para" id="qce_3-2-4-2-1">Each of the if statements will be executed. So grade will be set to B then C and finally D.</div></li><li data-component="answer" id="csawesome2_2_qce_3_opt_e"><div class="para" id="qce_3-2-5-1-1">E</div></li><li data-component="feedback" id="csawesome2_2_qce_3_opt_e"><div class="para" id="qce_3-2-5-2-1">This will only be true when score is less than 60.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.18.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qce_4" data-multipleanswers="false"><div class="para" id="qce_4-1-1">3-12-4: What is printed when the following code executes and x has been set to zero and y is set to 3?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">if (x &gt; 0 || (y / x) == 3)
{
    System.out.println("first case");
}
else
{
    System.out.println("second case");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qce_4_opt_a"><div class="para" id="qce_4-2-1-1-1">first case</div></li><li data-component="feedback" id="csawesome2_2_qce_4_opt_a"><div class="para" id="qce_4-2-1-2-1">This will print if either of the two conditions are true.  The first isn’t true but the second will cause an error.</div></li><li data-component="answer" id="csawesome2_2_qce_4_opt_b"><div class="para" id="qce_4-2-2-1-1">second case</div></li><li data-component="feedback" id="csawesome2_2_qce_4_opt_b"><div class="para" id="qce_4-2-2-2-1">This will print if both of the conditions are false.  But, an error will occur when testing the second condition.</div></li><li data-component="answer" id="csawesome2_2_qce_4_opt_c" data-correct=""><div class="para" id="qce_4-2-3-1-1">You will get a error because you can’t divide by zero.</div></li><li data-component="feedback" id="csawesome2_2_qce_4_opt_c"><div class="para" id="qce_4-2-3-2-1">The first condition will be false so the second one will be executed and lead to an error since you can’t divide by zero.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.18.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qcm_1" data-multipleanswers="false">
                <div class="para" id="qcm_1-1-1">3-12-5: Which of the following expressions is equivalent to !(c || d) ?</div>
                <li data-component="answer" id="csawesome2_2_qcm_1_opt_a" data-correct="">
                  <div class="para" id="qcm_1-2-1-1-1">(!c) &amp;&amp; (!d)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qcm_1_opt_a">
                  <div class="para" id="qcm_1-2-1-2-1">NOTing (negating) an OR expression is the same as the AND of the individual values NOTed (negated). See DeMorgans laws.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qcm_1_opt_b">
                  <div class="para" id="qcm_1-2-2-1-1">(c || d)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qcm_1_opt_b">
                  <div class="para" id="qcm_1-2-2-2-1">NOTing an OR expression does not result in the same values ORed.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qcm_1_opt_c">
                  <div class="para" id="qcm_1-2-3-1-1">(c &amp;&amp; d)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qcm_1_opt_c">
                  <div class="para" id="qcm_1-2-3-2-1">You do negate the OR to AND, but you also need to negate the values of c and d.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qcm_1_opt_d">
                  <div class="para" id="qcm_1-2-4-1-1">!(c &amp;&amp; d)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qcm_1_opt_d">
                  <div class="para" id="qcm_1-2-4-2-1">This would be equivalent to (!c || !d)</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qcm_1_opt_e">
                  <div class="para" id="qcm_1-2-5-1-1">(!c) || (!d)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qcm_1_opt_e">
                  <div class="para" id="qcm_1-2-5-2-1">This would be equivalent to !(c &amp;&amp; d)</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.18.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qcm_2" data-multipleanswers="false"><div class="para" id="qcm_2-1-1">3-12-6: Which of the following is equivalent to the code segment below?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">if (x &gt; 2)
   x = x * 2;
if (x &gt; 4)
   x = 0;
</code></pre></div><li data-component="answer" id="csawesome2_2_qcm_2_opt_a"><div class="para" id="qcm_2-2-1-1-1">x = 0;</div></li><li data-component="feedback" id="csawesome2_2_qcm_2_opt_a"><div class="para" id="qcm_2-2-1-2-1">If x was set to 1 then it would still equal 1.</div></li><li data-component="answer" id="csawesome2_2_qcm_2_opt_b"><div class="para" id="qcm_2-2-2-1-1">if (x &gt; 2) { x *= 2; }</div></li><li data-component="feedback" id="csawesome2_2_qcm_2_opt_b"><div class="para" id="qcm_2-2-2-2-1">What happens in the original when x is greater than 2?</div></li><li data-component="answer" id="csawesome2_2_qcm_2_opt_c" data-correct=""><div class="para" id="qcm_2-2-3-1-1">if (x &gt; 2) { x = 0; }</div></li><li data-component="feedback" id="csawesome2_2_qcm_2_opt_c"><div class="para" id="qcm_2-2-3-2-1">If x is greater than 2 it will be set to 0.</div></li><li data-component="answer" id="csawesome2_2_qcm_2_opt_d"><div class="para" id="qcm_2-2-4-1-1">if (x &gt; 2) { x = 0; } else { x *= 2; }</div></li><li data-component="feedback" id="csawesome2_2_qcm_2_opt_d"><div class="para" id="qcm_2-2-4-2-1">In the original what happens if x is less than 2?  Does this give the same result?</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.18.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qcm_3" data-multipleanswers="false"><div class="para" id="qcm_3-1-1">3-12-7: Which of the following is equivalent to the code segment below?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">if (x &gt; 0)
   x = -x;
if (x &lt; 0)
   x = 0;
</code></pre></div><li data-component="answer" id="csawesome2_2_qcm_3_opt_a" data-correct=""><div class="para" id="qcm_3-2-1-1-1">x = 0;</div></li><li data-component="feedback" id="csawesome2_2_qcm_3_opt_a"><div class="para" id="qcm_3-2-1-2-1">No matter what x is set to originally, the code will reset it to 0.</div></li><li data-component="answer" id="csawesome2_2_qcm_3_opt_b"><div class="para" id="qcm_3-2-2-1-1">if (x &gt; 0) { x = 0; }</div></li><li data-component="feedback" id="csawesome2_2_qcm_3_opt_b"><div class="para" id="qcm_3-2-2-2-1">Even if x is &lt; 0, the above code will set it to 0.</div></li><li data-component="answer" id="csawesome2_2_qcm_3_opt_c"><div class="para" id="qcm_3-2-3-1-1">if (x &lt; 0) { x = 0; }</div></li><li data-component="feedback" id="csawesome2_2_qcm_3_opt_c"><div class="para" id="qcm_3-2-3-2-1">Even if x is &gt; than 0 originally, it will be set to 0 after the code executes.</div></li><li data-component="answer" id="csawesome2_2_qcm_3_opt_d"><div class="para" id="qcm_3-2-4-1-1">if (x &gt; 0) { x = -x; } else { x = 0; }</div></li><li data-component="feedback" id="csawesome2_2_qcm_3_opt_d"><div class="para" id="qcm_3-2-4-2-1">The first if statement will always cause the second to be executed unless x already equals 0, such that x will never equal -x.</div></li><li data-component="answer" id="csawesome2_2_qcm_3_opt_e"><div class="para" id="qcm_3-2-5-1-1">if (x &lt; 0) { x = 0; } else { x = -1; }</div></li><li data-component="feedback" id="csawesome2_2_qcm_3_opt_e"><div class="para" id="qcm_3-2-5-2-1">The first if statement will always cause the second to be executed unless x already equals 0, such that x will never equal -x.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.18.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qcm_4" data-multipleanswers="false"><div class="para" id="qcm_4-1-1">3-12-8: At a certain high school students receive letter grades based on the following scale: 93 or above is an A, 84 to 92 is a B, 75 to 83 is a C, and below 75 is an F. Which of the following code segments will assign the correct string to grade for a given integer score?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">I.   if (score &gt;= 93)
        grade = "A";
     if (score &gt;= 84 &amp;&amp; score &lt; 93)
        grade = "B";
     if (score &gt;=75 &amp;&amp; score &lt; 84)
        grade = "C";
     if (score &lt; 75)
        grade = "F";

II.  if (score &gt;= 93)
        grade = "A";
     if (score &gt;= 84)
        grade = "B";
     if (score &gt;=75)
        grade = "C";
     if (score &lt; 75)
        grade = "F";

III. if (score &gt;= 93)
        grade = "A";
     else if (score &gt;= 84)
        grade = "B";
     else if (score &gt;= 75)
        grade = "C";
     else
        grade = "F";
</code></pre></div><li data-component="answer" id="csawesome2_2_qcm_4_opt_a" data-correct=""><div class="para" id="qcm_4-2-1-1-1">I and III only</div></li><li data-component="feedback" id="csawesome2_2_qcm_4_opt_a"><div class="para" id="qcm_4-2-1-2-1">Choice I uses multiple if’s with logical ands in the conditions to check that the numbers are in range. Choice II won’t work since if you had a score of 94, it would first assign the grade to an "A" but then it would execute the next if and change the grade to a "B" and so on until the grade was set to a "C". Choice III uses ifs with else if to make sure that only one conditional is executed.</div></li><li data-component="answer" id="csawesome2_2_qcm_4_opt_b"><div class="para" id="qcm_4-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qcm_4_opt_b"><div class="para" id="qcm_4-2-2-2-1">Choice II won’t work since if you had a score of 94 it would first assign the grade to an "A" but then it would execute the next if and change the grade to a "B" and so on until the grade was set to a "C". This could have been fixed by using else if instead of just if.</div></li><li data-component="answer" id="csawesome2_2_qcm_4_opt_c"><div class="para" id="qcm_4-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_qcm_4_opt_c"><div class="para" id="qcm_4-2-3-2-1">III is one of the correct answers. However, choice I is also correct. Choice I uses multiple if’s with logical ands in the conditions to check that the numbers are in range. Choice III uses ifs with else if to make sure that the only one conditional is executed.</div></li><li data-component="answer" id="csawesome2_2_qcm_4_opt_d"><div class="para" id="qcm_4-2-4-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_qcm_4_opt_d"><div class="para" id="qcm_4-2-4-2-1">Choice II won’t work since if you had a score of 94 it would first assign the grade to an "A" but then it would execute the next if and change the grade to a "B" and so on until the grade was set to a "C". This could have been fixed by using else if instead of just if.</div></li><li data-component="answer" id="csawesome2_2_qcm_4_opt_e"><div class="para" id="qcm_4-2-5-1-1">I, II, and III</div></li><li data-component="feedback" id="csawesome2_2_qcm_4_opt_e"><div class="para" id="qcm_4-2-5-2-1">Choice II won’t work since if you had a score of 94 it would first assign the grade to an "A" but then it would execute the next if and change the grade to a "B" and so on until the grade was set to a "C". This could have been fixed by using else if instead of just if.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.18.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qch_3" data-multipleanswers="false"><div class="para" id="qch_3-1-1">3-12-9: Assuming that x and y have been declared as valid integer values, which of the following is equivalent to this statement?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">(x &gt; 15 &amp;&amp; x &lt; 18) || (x &gt; 10 || y &lt; 20)
</code></pre></div><li data-component="answer" id="csawesome2_2_qch_3_opt_a"><div class="para" id="qch_3-2-1-1-1">(x &gt; 15 &amp;&amp; x &lt; 18) &amp;&amp; (x &gt; 10)</div></li><li data-component="feedback" id="csawesome2_2_qch_3_opt_a"><div class="para" id="qch_3-2-1-2-1">This can’t be right as it’s only checking the x variable, however the original statement can solely depend on the y variable in some cases.</div></li><li data-component="answer" id="csawesome2_2_qch_3_opt_b"><div class="para" id="qch_3-2-2-1-1">(y &lt; 20) || (x &gt; 15 &amp;&amp; x &lt; 18)</div></li><li data-component="feedback" id="csawesome2_2_qch_3_opt_b"><div class="para" id="qch_3-2-2-2-1">There’s a third condition on x that can affect the output of the statement which is not considered in this solution.</div></li><li data-component="answer" id="csawesome2_2_qch_3_opt_c" data-correct=""><div class="para" id="qch_3-2-3-1-1">((x &gt; 10) || (x &gt; 15 &amp;&amp; x &lt; 18)) || (y &lt; 20)</div></li><li data-component="feedback" id="csawesome2_2_qch_3_opt_c"><div class="para" id="qch_3-2-3-2-1">The commutative property allows the terms to be switched around, while maintaining the value. In this case, the || symbol is used with the commutative property and the statement included the &amp;&amp; must stay together to follow the laws of logic.</div></li><li data-component="answer" id="csawesome2_2_qch_3_opt_d"><div class="para" id="qch_3-2-4-1-1">(x &lt; 10 &amp;&amp; y &gt; 20) &amp;&amp; (x &lt; 15 || x &gt; 18)</div></li><li data-component="feedback" id="csawesome2_2_qch_3_opt_d"><div class="para" id="qch_3-2-4-2-1">This is the negation of the original statement, thus returning incorrect values.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.18.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qch_4" data-multipleanswers="false"><div class="para" id="qch_4-1-1">3-12-10: What would the following print?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int x = 3;
int y = 2;
if (x &gt; 2)
   x++;
if (y &gt; 1)
   y++;
if (x &gt; 2)
   System.out.print("first ");
if (y &lt; 3)
   System.out.print("second ");
System.out.print("third");
</code></pre></div><li data-component="answer" id="csawesome2_2_qch_4_opt_a"><div class="para" id="qch_4-2-1-1-1">first</div></li><li data-component="feedback" id="csawesome2_2_qch_4_opt_a"><div class="para" id="qch_4-2-1-2-1">This will print, but so will something else.</div></li><li data-component="answer" id="csawesome2_2_qch_4_opt_b"><div class="para" id="qch_4-2-2-1-1">first second</div></li><li data-component="feedback" id="csawesome2_2_qch_4_opt_b"><div class="para" id="qch_4-2-2-2-1">Are you sure about the "second"?  This only prints if y is less than 3, and while it was originally, it changes.</div></li><li data-component="answer" id="csawesome2_2_qch_4_opt_c"><div class="para" id="qch_4-2-3-1-1">first second third</div></li><li data-component="feedback" id="csawesome2_2_qch_4_opt_c"><div class="para" id="qch_4-2-3-2-1">Are you sure about the "second"?  This only prints if y is less than 3, and while it was originally, it changes.</div></li><li data-component="answer" id="csawesome2_2_qch_4_opt_d" data-correct=""><div class="para" id="qch_4-2-4-1-1">first third</div></li><li data-component="feedback" id="csawesome2_2_qch_4_opt_d"><div class="para" id="qch_4-2-4-2-1">The first will print since x will be greater than 2 and the second won’t print since y is equal to 3 and not less than it.  The third will always print.</div></li><li data-component="answer" id="csawesome2_2_qch_4_opt_e"><div class="para" id="qch_4-2-5-1-1">third</div></li><li data-component="feedback" id="csawesome2_2_qch_4_opt_e"><div class="para" id="qch_4-2-5-2-1">This will print, but so will something else.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.18.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qch_5" data-multipleanswers="false"><div class="para" id="qch_5-1-1">3-12-11: What would the following print?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int x = 3;
int y = 2;
if (y / x &gt; 0)
   System.out.print("first ");
   System.out.print("second ");
</code></pre></div><li data-component="answer" id="csawesome2_2_qch_5_opt_a"><div class="para" id="qch_5-2-1-1-1">first</div></li><li data-component="feedback" id="csawesome2_2_qch_5_opt_a"><div class="para" id="qch_5-2-1-2-1">When you do integer division you get an integer result so y / x == 0 and is not greater than 0.</div></li><li data-component="answer" id="csawesome2_2_qch_5_opt_b" data-correct=""><div class="para" id="qch_5-2-2-1-1">second</div></li><li data-component="feedback" id="csawesome2_2_qch_5_opt_b"><div class="para" id="qch_5-2-2-2-1">The first will not print because integer division will mean that y / x is 0.  The second will print since it is not in the body of the if (it would be if there were curly braces around it).</div></li><li data-component="answer" id="csawesome2_2_qch_5_opt_c"><div class="para" id="qch_5-2-3-1-1">first second</div></li><li data-component="feedback" id="csawesome2_2_qch_5_opt_c"><div class="para" id="qch_5-2-3-2-1">Do you see any curly braces?  Indention does not matter in Java.</div></li><li data-component="answer" id="csawesome2_2_qch_5_opt_d"><div class="para" id="qch_5-2-4-1-1">Nothing will be printed</div></li><li data-component="feedback" id="csawesome2_2_qch_5_opt_d"><div class="para" id="qch_5-2-4-2-1">This would be true if there were curly braces around the two indented statements.  Indention does not matter in Java.  If you don’t have curly braces then only the first statement following an if is executed if the condition is true.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>unit-3-free-response-question-frq-game-practice</id>
      <title>Unit 3 Free Response Question (FRQ) Game Practice</title>
      <question>
        <label>Exercise 2.19.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_frq_which_method" data-multipleanswers="false">
                <div class="para" id="frq_which_method-1-1">4-12-1: Which method are you asked to write for part a?</div>
                <li data-component="answer" id="csawesome2_2_frq_which_method_opt_a">
                  <div class="para" id="frq_which_method-2-1-1-1">getPoints()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frq_which_method_opt_a">
                  <div class="para" id="frq_which_method-2-1-2-1">The ``getPoints()`` method is given to you to get the points for a level.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frq_which_method_opt_b">
                  <div class="para" id="frq_which_method-2-2-1-1">goalReached()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frq_which_method_opt_b">
                  <div class="para" id="frq_which_method-2-2-2-1">The ``goalReached()`` method is given to you to check if the goal is reached for a level.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frq_which_method_opt_c">
                  <div class="para" id="frq_which_method-2-3-1-1">play()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frq_which_method_opt_c">
                  <div class="para" id="frq_which_method-2-3-2-1">The ``play()`` method is given to you to simulate the play of the game.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frq_which_method_opt_d" data-correct="">
                  <div class="para" id="frq_which_method-2-4-1-1">getScore()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frq_which_method_opt_d">
                  <div class="para" id="frq_which_method-2-4-2-1">Correct, the ``getScore()`` method is the one you will write for part a.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.19.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_frqifs">
                <span data-question="">
                  <div class="para" id="frqifs-1-1">Select the phrases below which will probably correspond to an if clause of a conditional statement.</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="frqifs-2-1">Look for the word if</div>
                </span>
                <pre><span data-incorrect="">The score for the game is computed</span> according to the following rules.

- Level one points are earned only <span data-correct="">if the level one goal is reached.</span>
- Level two points are earned only <span data-correct="">if both the level one and level two goals are reached.</span>
- Level three points are earned only <span data-correct="">if the goals of all three levels are reached.</span>
- The score for the game is <span data-incorrect="">the sum of the points earned for levels one, two, and three.</span>
- <span data-correct="">If the game is a bonus game</span> , the score for the game is tripled.
</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.19.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_frq_which_methods_used" data-multipleanswers="true">
                <div class="para" id="frq_which_methods_used-1-1">4-12-3: What are some methods given to you that you will need to use for part a?</div>
                <li data-component="answer" id="csawesome2_2_frq_which_methods_used_opt_a" data-correct="">
                  <div class="para" id="frq_which_methods_used-2-1-1-1">getPoints()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frq_which_methods_used_opt_a">
                  <div class="para" id="frq_which_methods_used-2-1-2-1">The getPoints() method is given to you to get the points for a level.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frq_which_methods_used_opt_b" data-correct="">
                  <div class="para" id="frq_which_methods_used-2-2-1-1">goalReached()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frq_which_methods_used_opt_b">
                  <div class="para" id="frq_which_methods_used-2-2-2-1">The goalReached() method is given to you to check if the goal is reached for a level.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frq_which_methods_used_opt_c" data-correct="">
                  <div class="para" id="frq_which_methods_used-2-3-1-1">isBonus()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frq_which_methods_used_opt_c">
                  <div class="para" id="frq_which_methods_used-2-3-2-1">The isBonus() method is given to you to check if the game is a bonus game.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frq_which_methods_used_opt_d">
                  <div class="para" id="frq_which_methods_used-2-4-1-1">getScore()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frq_which_methods_used_opt_d">
                  <div class="para" id="frq_which_methods_used-2-4-2-1">The getScore() method is the one you will write for part a.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.19.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_frq_method_class_match">
                <span data-subcomponent="question">
                  <div class="para" id="frq_method_class_match-1-1">Drag the method from the left and drop it on the correct class that it belongs to on the right.  Click the "Check Me" button to see if you are correct.</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="frq_method_class_match-2-1">Review the FRQ description above.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_frq_method_class_match_drag1">getPoints()</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_frq_method_class_match_drag1">Level</li>
                <li data-subcomponent="draggable" id="csawesome2_2_frq_method_class_match_drag2">isBonus()</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_frq_method_class_match_drag2">Game</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.19.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_frq_call_method" data-multipleanswers="false">
                <div class="para" id="frq_call_method-1-1">4-12-5: How would you call the <code class="code-inline tex2jax_ignore">goalReached()</code> method of the <code class="code-inline tex2jax_ignore">levelOne</code> object?</div>
                <li data-component="answer" id="csawesome2_2_frq_call_method_opt_a">
                  <div class="para" id="frq_call_method-2-1-1-1">goalReached()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frq_call_method_opt_a">
                  <div class="para" id="frq_call_method-2-1-2-1">The goalReached() method is a non-static method of the Level class. You need to call it with an object of the class.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frq_call_method_opt_b" data-correct="">
                  <div class="para" id="frq_call_method-2-2-1-1">levelOne.goalReached()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frq_call_method_opt_b">
                  <div class="para" id="frq_call_method-2-2-2-1">Correct, this calls the levelOne object’s goalReached() method.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frq_call_method_opt_c">
                  <div class="para" id="frq_call_method-2-3-1-1">Level.goalReached()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frq_call_method_opt_c">
                  <div class="para" id="frq_call_method-2-3-2-1">The goalReached() method is a non-static method of the ``Level`` class. You need to call it with an object of the class, not the class name.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frq_call_method_opt_d">
                  <div class="para" id="frq_call_method-2-4-1-1">goalReached(levelOne)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frq_call_method_opt_d">
                  <div class="para" id="frq_call_method-2-4-2-1">The goalReached() method does not take an argument.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.19.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_frq_expression" data-multipleanswers="false">
                <div class="para" id="frq_expression-1-1">4-12-6: Which expression would add the points for <code class="code-inline tex2jax_ignore">levelOne</code> into a variable called <code class="code-inline tex2jax_ignore">score</code>?</div>
                <li data-component="answer" id="csawesome2_2_frq_expression_opt_a">
                  <div class="para" id="frq_expression-2-1-1-1">score += levelOnePoints</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frq_expression_opt_a">
                  <div class="para" id="frq_expression-2-1-2-1">There is no levelOnePoints variable.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frq_expression_opt_b" data-correct="">
                  <div class="para" id="frq_expression-2-2-1-1">score += levelOne.getPoints()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frq_expression_opt_b">
                  <div class="para" id="frq_expression-2-2-2-1">Correct, this adds levelOne’s getPoints() to score.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frq_expression_opt_c">
                  <div class="para" id="frq_expression-2-3-1-1">score = score + Level.getPoints()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frq_expression_opt_c">
                  <div class="para" id="frq_expression-2-3-2-1">The getPoints()`` method is a non-static method of the Level class. You need to call it with an object of the class, not the class name.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frq_expression_opt_d">
                  <div class="para" id="frq_expression-2-4-1-1">score = Level.points</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frq_expression_opt_d">
                  <div class="para" id="frq_expression-2-4-2-1">There is no points instance variable.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.19.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_frq-getScore">
                <div class="ac_question" id="csawesome2_2_frq-getScore_question">
                  <div class="para" id="frq-getScore-1-1">Write the code for the <code class="code-inline tex2jax_ignore">getScore()</code> method of the <code class="code-inline tex2jax_ignore">Game</code> class. The method should use the <code class="code-inline tex2jax_ignore">goalReached()</code> and <code class="code-inline tex2jax_ignore">getPoints()</code> methods of the <code class="code-inline tex2jax_ignore">levelOne</code>, <code class="code-inline tex2jax_ignore">levelTwo</code> and <code class="code-inline tex2jax_ignore">levelThree</code> objects to calculate the score for the game. If it is a <code class="code-inline tex2jax_ignore">isBonus()</code> game, the score should be tripled.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_frq-getScore_editor" data-question_label="" data-codelens="true">public class Game
{
    /* the Level objects */
    private Level levelOne;
    private Level levelTwo;
    private Level levelThree;
    private boolean bonus;

    /* Complete the getScore() method below */
    public int getScore()
    {
        int score = 0;
        // Write your code here



        return score;
    }


    public Game( int p1, boolean g1, int p2, boolean g2, int p3, boolean g3, boolean b )
    {
        levelOne = new Level( p1, g1 );
        levelTwo = new Level( p2, g2 );
        levelThree = new Level( p3, g3 );
        bonus = b;
    }

    public boolean isBonus()
    {
        return bonus;
    }

    public static void main(String[] args)
    {
        // These are the AP test cases given in the problem description
        Game g1 = new Game(200,true,100,true,500,true,true);
        // This should print out 2400
        System.out.println( g1.getScore() );

        Game g2 = new Game(200,true,100,true,500,false,false);
        // This should print out 300
        System.out.println( g2.getScore() );

        Game g3 = new Game(200,true,100,false,500,true,true);
        // This should print out 600
        System.out.println( g3.getScore() );

        Game g4 = new Game(200,false,100,true,500,true,false);
        // This should print out 0
        System.out.println( g4.getScore() );


    }

}
class Level
{
    private int points;
    private boolean goal;

    /** Constructor for the Level class */
    public Level(int p, boolean g)
    {
        points = p;
        goal = g;
    }

    /** Returns true if the player reached the goal on this level and returns false otherwise */
    public boolean goalReached()
    { return goal; }

    /** Returns the number of points recorded for this level */
    public int getPoints()
    { return points; }
}
====
import static org.junit.Assert.*;
import org.junit.*;
import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
   public RunestoneTests()
   {
       super("Game");
        // This sets default values for when objects are instantiated
       Object[] values = new Object[] {100, true, 100, true, 100, false, true};
       setDefaultValues(values);
   }
   @Test
   public void testMain() throws IOException
   {
       String output = getMethodOutput("main");
       String expect = "2400\n300\n600\n0\n";

       boolean passed = getResults(expect, output, "Output from main");
       assertTrue(passed);
   }
   @Test
   public void checkCodeContains1()
   {
       boolean passed = checkCodeContains(
        "call to levelThree.getPoints()", "levelThree.getPoints()");
       assertTrue(passed);
   }
    @Test
   public void checkCodeContains2()
   {
       boolean passed = checkCodeContains(
        "call to levelThree.goalReached()", "levelThree.goalReached()");
       assertTrue(passed);
   }
    @Test
   public void testCall() throws IOException
   {
       int output = Integer.parseInt(
         getMethodOutput("getScore"));
       int expect = 600;

       boolean passed = getResults(expect, output, "Checking another call to getScore()");
       assertTrue(passed);
   }
   }
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-6-21</id>
      <title>FRQ Style Coding Practice</title>
      <question optional="yes">
        <label>Exercise 2.20.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_front_back_written">
                <div class="ac_question" id="csawesome2_2_front_back_written_question"><div class="para" id="front_back_written-1-1">Create the method <code class="code-inline tex2jax_ignore">front_back(str, start, end)</code> that takes three strings and returns a string based on the following conditions.</div> <div class="para logical" id="front_back_written-1-2"><ul class="disc" id="front_back_written-1-2-1"><li id="front_back_written-1-2-1-1"><div class="para" id="front_back_written-1-2-1-1-1">If <code class="code-inline tex2jax_ignore">str</code> contains <code class="code-inline tex2jax_ignore">start</code> at the beginning and <code class="code-inline tex2jax_ignore">end</code> at the end then return  <code class="code-inline tex2jax_ignore">"s_e"</code>.</div></li><li id="front_back_written-1-2-1-2"><div class="para" id="front_back_written-1-2-1-2-1">If <code class="code-inline tex2jax_ignore">str</code> contains <code class="code-inline tex2jax_ignore">start</code> at the beginning of the string return <code class="code-inline tex2jax_ignore">"s"</code>.</div></li><li id="front_back_written-1-2-1-3"><div class="para" id="front_back_written-1-2-1-3-1">if <code class="code-inline tex2jax_ignore">str</code> contains <code class="code-inline tex2jax_ignore">end</code> at the end of the string return <code class="code-inline tex2jax_ignore">"e"</code>.</div></li><li id="front_back_written-1-2-1-4"><div class="para" id="front_back_written-1-2-1-4-1">Otherwise return <code class="code-inline tex2jax_ignore">"n"</code>.</div></li></ul></div> <figure class="table table-like" id="front_back_written-1-3"><figcaption><span class="type">Table</span><span class="space"> </span><span class="codenumber">2.20.1<span class="period">.</span></span><span class="space"> </span></figcaption><div class="tabular-box natural-width"><table class="tabular"><tr class="header-horizontal"><th scope="col" class="l m b0 r0 l0 t0 lines">Example Input</th><th scope="col" class="l m b0 r0 l0 t0 lines">Expected Output</th></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">front_back("Open at noon", "Open", "noon")</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">"s_e"</code></td></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">front_back("Opening time", "Open", "noon")</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">"s"</code></td></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">front_back("Afternoon", "Open", "noon")</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">"e"</code></td></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">front_back("Closed", "Open", "noon")</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">"n"</code></td></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">front_back("It is noon now", "open", "noon")</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">"n"</code></td></tr></table></div></figure></div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_front_back_written_editor" data-question_label="" data-codelens="true">public class FrontBack
{
   public static String front_back(String str, String start, String end)
   {
       // ADD CODE HERE //
   }

   public static void main(String[] args)
   {
      String str1 = "Opening time";
      String start1 = "Open";
      String end1 = "noon";
      System.out.println(front_back(str1, start1, end1));

      String str2 = "Afternoon";
      String start2 = "Open";
      String end2 = "noon";
      System.out.println(front_back(str2, start2, end2));

      String str3 = "Open at noon";
      String start3 = "Open";
      String end3 = "noon";
      System.out.println(front_back(str3, start3, end3));
  }
}
====
import static org.junit.Assert.*;
import org.junit.Test;
import java.io.IOException;
import java.util.Arrays;

public class RunestoneTests extends CodeTestHelper {
    public RunestoneTests() {
        super();
    }

    @Test
    public void testBoundarySum() throws IOException {
         String output = getMethodOutput("main");
         String expect = "s\ne\ns_e\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
   }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.20.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_squirrelPlay_written">
                <div class="ac_question" id="csawesome2_2_squirrelPlay_written_question"><div class="para" id="squirrelPlay_written-1-1">The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an <code class="code-inline tex2jax_ignore">int temperature</code> and a <code class="code-inline tex2jax_ignore">boolean isSummer</code>, return <code class="code-inline tex2jax_ignore">true</code> if the squirrels play and <code class="code-inline tex2jax_ignore">false</code> otherwise.</div> <figure class="table table-like" id="squirrelPlay_written-1-2"><figcaption><span class="type">Table</span><span class="space"> </span><span class="codenumber">2.20.2<span class="period">.</span></span><span class="space"> </span></figcaption><div class="tabular-box natural-width"><table class="tabular"><tr class="header-horizontal"><th scope="col" class="l m b0 r0 l0 t0 lines">Example Input</th><th scope="col" class="l m b0 r0 l0 t0 lines">Expected Output</th></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">squirrelPlay(70, false)</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">true</code></td></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">squirrelPlay(95, false)</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">false</code></td></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">squirrelPlay(95, true)</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">true</code></td></tr></table></div></figure></div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_squirrelPlay_written_editor" data-question_label="" data-codelens="true">public class SquirrelParty
{
   public static boolean squirrelPlay(int temp, boolean isSummer)
   {
       // ADD CODE HERE //
   }

   public static void main(String[] args)
   {
      System.out.println(squirrelPlay(70, false));
      System.out.println(squirrelPlay(95, false));
      System.out.println(squirrelPlay(95, true));
  }
}
====
import static org.junit.Assert.*;
import org.junit.Test;
import java.io.IOException;
import java.util.Arrays;

public class RunestoneTests extends CodeTestHelper {
    public RunestoneTests() {
        super();
    }

    @Test
    public void testBoundarySum() throws IOException {
         String output = getMethodOutput("main");
         String expect = "true, false, true";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);

    }


 }
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.20.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_alarmClock_written">
                <div class="ac_question" id="csawesome2_2_alarmClock_written_question"><div class="para" id="alarmClock_written-1-1">Given a <code class="code-inline tex2jax_ignore">day</code> of the week encoded as 0=Sun, 1=Mon, 2=Tue, …6=Sat, and a <code class="code-inline tex2jax_ignore">boolean</code> indicating if we are on <code class="code-inline tex2jax_ignore">vacation</code>, return a string of the form <code class="code-inline tex2jax_ignore">"7:00"</code> indicating when the alarm clock should ring. Weekdays, the alarm should be <code class="code-inline tex2jax_ignore">"7:00"</code> and on the weekend it should be <code class="code-inline tex2jax_ignore">"10:00"</code>. Unless we are on vacation – then on weekdays it should be <code class="code-inline tex2jax_ignore">"10:00"</code> and weekends it should be <code class="code-inline tex2jax_ignore">"off"</code>.</div> <figure class="table table-like" id="alarmClock_written-1-2"><figcaption><span class="type">Table</span><span class="space"> </span><span class="codenumber">2.20.3<span class="period">.</span></span><span class="space"> </span></figcaption><div class="tabular-box natural-width"><table class="tabular"><tr class="header-horizontal"><th scope="col" class="l m b0 r0 l0 t0 lines">Example Input</th><th scope="col" class="l m b0 r0 l0 t0 lines">Expected Output</th></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">alarmClock(1, false)</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">7:00</code></td></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">alarmClock(5, false)</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">7:00</code></td></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">alarmClock(0, false)</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">10:00</code></td></tr></table></div></figure></div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_alarmClock_written_editor" data-question_label="" data-codelens="true">public class VacayAlarmClock
{
   public static String alarmClock(int day, boolean vacation)
   {
           // ADD CODE HERE //
   }

   public static void main(String[] args)
   {
      System.out.println(alarmClock(1, false));
      System.out.println(alarmClock(5, false));
      System.out.println(alarmClock(0, false));
  }
}
====
import static org.junit.Assert.*;
import org.junit.Test;
import java.io.IOException;
import java.util.Arrays;

public class RunestoneTests extends CodeTestHelper {
    public RunestoneTests() {
        super();
    }

    @Test
    public void testBoundarySum() throws IOException {
         String output = getMethodOutput("main");
         String expect = "7:00, 7:00, 10:00";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);

    }


 }
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.20.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_dateFashion_written">
                <div class="ac_question" id="csawesome2_2_dateFashion_written_question"><div class="para" id="dateFashion_written-1-1">You and your date are trying to get a table at a restaurant. The parameter <code class="code-inline tex2jax_ignore">you</code> is the stylishness of your clothes, in the range 0..10, and <code class="code-inline tex2jax_ignore">date</code> is the stylishness of your date’s clothes. The result getting the table is encoded as an int value with 0=no, 1=maybe, 2=yes. If either of you is very stylish, 8 or more, then the result is <code class="code-inline tex2jax_ignore">2</code> (yes). With the exception that if either of you has style of 2 or less, then the result is <code class="code-inline tex2jax_ignore">0</code> (no). Otherwise the result is <code class="code-inline tex2jax_ignore">1</code> (maybe).</div> <figure class="table table-like" id="dateFashion_written-1-2"><figcaption><span class="type">Table</span><span class="space"> </span><span class="codenumber">2.20.4<span class="period">.</span></span><span class="space"> </span></figcaption><div class="tabular-box natural-width"><table class="tabular"><tr class="header-horizontal"><th scope="col" class="l m b0 r0 l0 t0 lines">Example Input</th><th scope="col" class="l m b0 r0 l0 t0 lines">Expected Output</th></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">dateFashion(5, 10)</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">2</code></td></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">dateFashion(8, 2)</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">0</code></td></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">dateFashion(5, 5)</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">1</code></td></tr></table></div></figure></div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_dateFashion_written_editor" data-question_label="" data-codelens="true">public class DateStylishness
{
   public static int dateFashion(int you, int date)
   {
       // ADD CODE HERE //
   }

   public static void main(String[] args)
   {
      System.out.println(dateFashion(5, 10));
      System.out.println(dateFashion(8, 2));
      System.out.println(dateFashion(5, 5));
  }
}
====
import static org.junit.Assert.*;
import org.junit.Test;
import java.io.IOException;
import java.util.Arrays;

public class RunestoneTests extends CodeTestHelper {
    public RunestoneTests() {
        super();
    }

    @Test
    public void testBoundarySum() throws IOException {
         String output = getMethodOutput("main");
         String expect = "2, 0, 1";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);

    }


 }
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-6-22</id>
      <title>Group Work - Remainder Operator (%)</title>
      <question>
        <label>Exercise 2.21.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_mod-return-zero-mod-five">
                <div class="para" id="mod-return-zero-mod-five-1-1">4-7-4: What is the first number from to 1 to 10 that is evenly divisible by five (<code class="code-inline tex2jax_ignore">n % 5</code> returns 0)? <input type="text" placeholder="Number"/></div>
                <script type="application/json">[[{"number": [[5, 5], [5, 5]], "feedback": "&lt;div class=\"para\" id=\"mod-return-zero-mod-five-2-1-1-1-1\"&gt;Five goes into five one time with a remainder of zero.&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"mod-return-zero-mod-five-2-1-2-1-1\"&gt;What is the first number from to 1 to 10 that is evenly divisible by five?&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.21.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_mod-return-zero-mod-five-last">
                <div class="para" id="mod-return-zero-mod-five-last-1-1">4-7-5: What is the last number from to 1 to 10 that is evenly divisible by five (<code class="code-inline tex2jax_ignore">n % 5</code> returns 0)? <input type="text" placeholder="Number"/></div>
                <script type="application/json">[[{"number": [[10, 10], [10, 10]], "feedback": "&lt;div class=\"para\" id=\"mod-return-zero-mod-five-last-2-1-1-1-1\"&gt;Five goes into ten two times with a remainer of 0.&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"mod-return-zero-mod-five-last-2-1-2-1-1\"&gt;What is the last number from to 1 to 10 that is evenly divisible by five?&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.21.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_mod-18-mod-4">
                <div class="para" id="mod-18-mod-4-1-1">4-7-7: What is the number returned from <code class="code-inline tex2jax_ignore">18 % 4</code>? <input type="text" placeholder="Number"/></div>
                <script type="application/json">[[{"number": [[2, 2], [2, 2]], "feedback": "&lt;div class=\"para\" id=\"mod-18-mod-4-2-1-1-1-1\"&gt;Four goes into 18 four times (16) with a remainder of 2.&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"mod-18-mod-4-2-1-2-1-1\"&gt;What is the remainder when you divide 18 by 4?&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.21.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_mod-19-mod-4">
                <div class="para" id="mod-19-mod-4-1-1">4-7-8: What is the number returned from <code class="code-inline tex2jax_ignore">19 % 4</code>? <input type="text" placeholder="Number"/></div>
                <script type="application/json">[[{"number": [[3, 3], [3, 3]], "feedback": "&lt;div class=\"para\" id=\"mod-19-mod-4-2-1-1-1-1\"&gt;Four goes into 19 four times (16) with a remainder of 3.&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"mod-19-mod-4-2-1-2-1-1\"&gt;What is the remainder when you divide 19 by 4?&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.21.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_mod-19-mod-5">
                <div class="para" id="mod-19-mod-5-1-1">4-7-9: What is the number returned from <code class="code-inline tex2jax_ignore">19 % 5</code>? <input type="text" placeholder="Number"/></div>
                <script type="application/json">[[{"number": [[4, 4], [4, 4]], "feedback": "&lt;div class=\"para\" id=\"mod-19-mod-5-2-1-1-1-1\"&gt;Five goes into 19 three times (15) with a remainder of 4.&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"mod-19-mod-5-2-1-2-1-1\"&gt;What is the remainder when you divide 19 by 5?&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.21.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_mod-19-mod-6">
                <div class="para" id="mod-19-mod-6-1-1">4-7-10: What is the number returned from <code class="code-inline tex2jax_ignore">19 % 6</code>? <input type="text" placeholder="Number"/></div>
                <script type="application/json">[[{"number": [[1, 1], [1, 1]], "feedback": "&lt;div class=\"para\" id=\"mod-19-mod-6-2-1-1-1-1\"&gt;Six goes into 19 three times (18) with a remainder of 1.&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"mod-19-mod-6-2-1-2-1-1\"&gt;What is the remainder when you divide 19 by 6?&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.21.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_mod-79-mod-5">
                <div class="para" id="mod-79-mod-5-1-1">4-7-11: What number is the remainder when you divide 79 by 5? <input type="text" placeholder="Number"/></div>
                <script type="application/json">[[{"number": [[4, 4], [4, 4]], "feedback": "&lt;div class=\"para\" id=\"mod-79-mod-5-2-1-1-1-1\"&gt;Five goes into 79 - 15 times (15 * 5 is 75) with a reminder of 4.&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"mod-79-mod-5-2-1-2-1-1\"&gt;What is the remainder when you divide 79 evenly by 5?&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.21.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_mod-11-mod-4">
                <div class="para" id="mod-11-mod-4-1-1">4-7-12: How many candies go back to the teacher when you are given 11 candies? <input type="text" placeholder="Number"/></div>
                <script type="application/json">[[{"number": [[3, 3], [3, 3]], "feedback": "&lt;div class=\"para\" id=\"mod-11-mod-4-2-1-1-1-1\"&gt;Four goes into 11 two times (4 * 2 = 8) with a remainder of 3.&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"mod-11-mod-4-2-1-2-1-1\"&gt;What is the remainder when you divide 11 by 8?&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.21.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_mod-2-mod-4">
                <div class="para" id="mod-2-mod-4-1-1">4-7-13: How many candies go back to the teacher when you are given 2 candies? <input type="text" placeholder="Number"/></div>
                <script type="application/json">[[{"number": [[2, 2], [2, 2]], "feedback": "&lt;div class=\"para\" id=\"mod-2-mod-4-2-1-1-1-1\"&gt;Four goes into two zero times with a remainder of 2.&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"mod-2-mod-4-2-1-2-1-1\"&gt;What is the remainder when you divide 2 by 4?&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.21.7.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_mod-model-1">
                <div class="ac_question" id="csawesome2_2_mod-model-1_question">
                  <div class="para" id="mod-model-1-1-1">Run the following code to see what it prints.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_mod-model-1_editor" data-question_label="" data-codelens="true">public class ModModl1
{
    public static void main(String[] args)
    {
        System.out.println(9 % 4);
        System.out.println(10 % 4);
        System.out.println(11 % 4);
        System.out.println(12 % 4);
        System.out.println(13 % 4);
        System.out.println(14 % 4);
        System.out.println(15 % 4);
        System.out.println(16 % 4);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.21.7.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_mod-which-returns-zero">
                <div class="para" id="mod-which-returns-zero-1-1">4-7-2: Review the code above.  What is the first number (n) above such that <code class="code-inline tex2jax_ignore">n % 4</code> returns zero? <input type="text" placeholder="Number"/></div>
                <script type="application/json">[[{"number": [[12, 12], [12, 12]], "feedback": "&lt;div class=\"para\" id=\"mod-which-returns-zero-2-1-1-1-1\"&gt;Four goes into twelve 3 times with 0 remainder&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"mod-which-returns-zero-2-1-2-1-1\"&gt;What is the first number above that is evenly divisible by 4 (num % 4 returns 0)?&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.21.7.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_mod-next-returns-zero">
                <div class="para" id="mod-next-returns-zero-1-1">4-7-3: Review the code above.  What is the next number (n) (greater than 16) such that <code class="code-inline tex2jax_ignore">n % 4</code> returns zero? <input type="text" placeholder="Number"/></div>
                <script type="application/json">[[{"number": [[20, 20], [20, 20]], "feedback": "&lt;div class=\"para\" id=\"mod-next-returns-zero-2-1-1-1-1\"&gt;Four goes into twenty 5 times with a remainder of 0.&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"mod-next-returns-zero-2-1-2-1-1\"&gt;Which next number larger than 16 is evenly divisible by 4 (num % 4 returns 0)?&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-000351</id>
      <title>Magpie Chatbot Lab</title>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="csawesome2_2_" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;java&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/UNIQUE-ID-000351-3-2-6.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.22.2.3.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lc-magpie2">
                <div class="ac_question" id="csawesome2_2_lc-magpie2_question">
                  <div class="para" id="lc-magpie2-1-1">Run to see the results. Try changing the input in main.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lc-magpie2_editor" data-question_label="" data-codelens="true">public class Magpie2
{
    public String getGreeting()
    {
        return "Hello, let's talk.";
    }

    public String getResponse(String statement)
    {
        String response = "";
        if (statement.indexOf("no") &gt;= 0)
        {
            response = "Why so negative?";
        } else if (statement.indexOf("mother") &gt;= 0
                || statement.indexOf("father") &gt;= 0
                || statement.indexOf("sister") &gt;= 0
                || statement.indexOf("brother") &gt;= 0)
        {
            response = "Tell me more about your family.";
        }
        else
        {
            response = getRandomResponse();
        }
        return response;
    }

    private String getRandomResponse()
    {
        final int NUMBER_OF_RESPONSES = 4;
        double r = Math.random();
        int whichResponse = (int) (r * NUMBER_OF_RESPONSES);
        String response = "";

        if (whichResponse == 0)
        {
            response = "Interesting, tell me more.";
        }
        else if (whichResponse == 1)
        {
            response = "Hmmm.";
        }
        else if (whichResponse == 2)
        {
            response = "Do you really think so?";
        }
        else if (whichResponse == 3)
        {
            response = "You don't say.";
        }
        return response;
    }

    public static void main(String[] args)
    {
        Magpie2 maggie = new Magpie2();

        System.out.println(maggie.getGreeting());
        System.out.println("&gt;My mother and I talked last night.");
        System.out.println(
                maggie.getResponse("My mother and I talked last night."));
        System.out.println("&gt;I said no.");
        System.out.println(maggie.getResponse("I said no!"));
        System.out.println("&gt;The weather is nice.");
        System.out.println(maggie.getResponse("The weather is nice."));
        System.out.println("&gt;Do you know my brother?");
        System.out.println(maggie.getResponse("Do you know my brother?"));
    }
}
====
// should pass if/when they run code
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Hello, let's talk....";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.22.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lc-strEx">
                <div class="ac_question" id="csawesome2_2_lc-strEx_question">
                  <div class="para" id="lc-strEx-1-1">Run the code below. Why do you think you might want to change the string to all lowercase characters? Why doesn’t the value of <code class="code-inline tex2jax_ignore">sample</code> change? Do string methods change the string? Try some other string methods.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lc-strEx_editor" data-question_label="" data-codelens="true">/**
 * A program to allow students to try out different String methods.
 *
 * @author Laurie White
 * @version April 2012
 */
public class StringExplorer
{

    public static void main(String[] args)
    {
        String sample = "The quick brown fox jumped over the lazy dog.";

        //  Demonstrate the indexOf method.
        int position = sample.indexOf("quick");
        System.out.println("sample.indexOf(\"quick\") = " + position);

        //  Demonstrate the toLowerCase method.
        String lowerCase = sample.toLowerCase();
        System.out.println("sample.toLowerCase() = " + lowerCase);
        System.out.println("After toLowerCase(), sample = " + sample);

        //  Try other methods here:

    }
}
====
// should pass if/when they run code
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "sample.indexOf(\"quick\") = 4\n...";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.22.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_fill-lab1b1">
                <div class="para" id="fill-lab1b1-1-1">lab-1c-2: What value is returned by <code class="code-inline tex2jax_ignore">indexOf</code> if the substring does not occur in the string? <input type="text" placeholder="Number"/></div>
                <script type="application/json">[[{"number": [[-1, -1], [-1, -1]], "feedback": "&lt;div class=\"para\" id=\"fill-lab1b1-2-1-1-1-1\"&gt;Correct.  If the substring isn’t found it returns -1&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"fill-lab1b1-2-1-2-1-1\"&gt;Check the documentation or try it out in the ActiveCode window&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.22.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lc-magpie3">
                <div class="ac_question" id="csawesome2_2_lc-magpie3_question">
                  <div class="para" id="lc-magpie3-1-1">Modify the code below to print the values of <code class="code-inline tex2jax_ignore">psn</code>, <code class="code-inline tex2jax_ignore">before</code>, and <code class="code-inline tex2jax_ignore">after</code> right after the comment on line 100 in the <code class="code-inline tex2jax_ignore">findKeyword</code> method below. Record each of the values in a table. The College Board student guide for the <a class="external" href="http://secure-media.collegeboard.org/digitalServices/pdf/ap/ap-compscia-magpie-lab-student-guide.pdf" target="_blank">Magpie Chatbot Lab</a><details class="ptx-footnote" aria-live="polite" id="lc-magpie3-1-1-6"><summary class="ptx-footnote__number" title="Footnote 2.22.4"><sup> 4 </sup></summary><div class="ptx-footnote__contents" id="lc-magpie3-1-1-6"><code class="code-inline tex2jax_ignore">http://secure-media.collegeboard.org/digitalServices/pdf/ap/ap-compscia-magpie-lab-student-guide.pdf</code></div></details> has a table on page 8 that can be printed. Use the CodeLens button to step through the code.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lc-magpie3_editor" data-question_label="" data-codelens="true">/**
 * A program to carry on conversations with a human user. This version:
 *
* &lt;ul&gt;
* &lt;li&gt;Uses advanced search for keywords
* &lt;/ul&gt;
 *
 * @author Laurie White
 * @version April 2012
 */
public class Magpie3
{
    /**
     * Get a default greeting
     *
     * @return a greeting
     */
    public String getGreeting()
    {
        return "Hello, let's talk.";
    }

    /**
     * Gives a response to a user statement
     *
     * @param statement the user statement
     * @return a response based on the rules given
     */
    public String getResponse(String statement)
    {
        String response = "";
        if (statement.length() == 0)
        {
            response = "Say something, please.";
        }
        else if (findKeyword(statement, "no") &gt;= 0)
        {
            response = "Why so negative?";
        } else if (findKeyword(statement, "mother") &gt;= 0
                || findKeyword(statement, "father") &gt;= 0
                || findKeyword(statement, "sister") &gt;= 0
                || findKeyword(statement, "brother") &gt;= 0)
        {
            response = "Tell me more about your family.";
        }
        else
        {
            response = getRandomResponse();
        }
        return response;
    }

    /**
     * Search for one word in phrase. The search is not case sensitive. This method
     * will check that the given goal is not a substring of a longer string (so,
     * for example, "I know" does not contain "no").
     *
     * @param statement the string to search
     * @param goal the string to search for
     * @param startPos the character of the string to begin the search at
     * @return the index of the first occurrence of goal in statement or -1 if it's
     *     not found
     */
    private int findKeyword(String statement, String goal, int startPos)
    {
        String phrase = statement.trim();
        // The only change to incorporate the startPos is in
        // the line below
        int psn = phrase.toLowerCase().indexOf(goal.toLowerCase(), startPos);

        // Refinement--make sure the goal isn't part of a
        // word
        while (psn &gt;= 0)
        {
            // Find the string of length 1 before and after
            // the word
            String before = " ", after = " ";
            if (psn &gt; 0)
            {
                before = phrase.substring(psn - 1, psn).toLowerCase();
            }
            if (psn + goal.length() &lt; phrase.length())
            {
                after =
                        phrase.substring(
                                        psn + goal.length(),
                                        psn + goal.length() + 1)
                                .toLowerCase();
            }

            /* determine the values of psn, before, and after at this point */

            // If before and after aren't letters, we've
            // found the word
            if (((before.compareTo("a") &lt; 0)
                            || (before.compareTo("z") &gt; 0)) // before is not a
                    // letter
                    &amp;&amp; ((after.compareTo("a") &lt; 0)
                            || (after.compareTo("z") &gt; 0)))
            {
                return psn;
            }

            // The last position didn't work, so let's find
            // the next, if there is one.
            psn = phrase.indexOf(goal.toLowerCase(), psn + 1);
        }

        return -1;
    }

    /**
     * Search for one word in phrase. The search is not case sensitive. This method
     * will check that the given goal is not a substring of a longer string (so,
     * for example, "I know" does not contain "no"). The search begins at the
     * beginning of the string.
     *
     * @param statement the string to search
     * @param goal the string to search for
     * @return the index of the first occurrence of goal in statement or -1 if it's
     *     not found
     */
    private int findKeyword(String statement, String goal)
    {
        return findKeyword(statement, goal, 0);
    }

    /**
     * Pick a default response to use if nothing else fits.
     *
     * @return a non-committal string
     */
    private String getRandomResponse()
    {
        final int NUMBER_OF_RESPONSES = 4;
        double r = Math.random();
        int whichResponse = (int) (r * NUMBER_OF_RESPONSES);
        String response = "";

        if (whichResponse == 0)
        {
            response = "Interesting, tell me more.";
        }
        else if (whichResponse == 1)
        {
            response = "Hmmm.";
        }
        else if (whichResponse == 2)
        {
            response = "Do you really think so?";
        }
        else if (whichResponse == 3)
        {
            response = "You don't say.";
        }

        return response;
    }

    public static void main(String[] args)
    {
        Magpie3 maggie = new Magpie3();

        maggie.findKeyword("yesterday is today's day before.", "day", 0);
    }
}
====
// should pass if/when they run code
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "6...";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">/**
 * A program to carry on conversations with a human user. This version:
 *
 * &lt;ul&gt;
 *   &lt;li&gt;Uses advanced search for keywords
 *   &lt;li&gt;Will transform statements as well as react to keywords
 * &lt;/ul&gt;
 *
 * @author Laurie White
 * @version April 2012
 */
public class Magpie4
{

    /**
     * Get a default greeting
     *
     * @return a greeting
     */
    public String getGreeting()
    {
        return "Hello, let's talk.";
    }

    /**
     * Gives a response to a user statement
     *
     * @param statement the user statement
     * @return a response based on the rules given
     */
    public String getResponse(String statement)
    {
        String response = "";
        if (statement.length() == 0)
        {
            response = "Say something, please.";
        }
        else if (findKeyword(statement, "no") &gt;= 0)
        {
            response = "Why so negative?";
        } else if (findKeyword(statement, "mother") &gt;= 0
                || findKeyword(statement, "father") &gt;= 0
                || findKeyword(statement, "sister") &gt;= 0
                || findKeyword(statement, "brother") &gt;= 0)
        {
            response = "Tell me more about your family.";
        }

        // Responses which require transformations
        else if (findKeyword(statement, "I want to", 0) &gt;= 0)
        {
            response = transformIWantToStatement(statement);
        }

        // ADD Responses which require transformations!

        else
        {
            // Look for a two word (you &lt;something&gt; me)
            // pattern
            int psn = findKeyword(statement, "you", 0);

            if (psn &gt;= 0 &amp;&amp; findKeyword(statement, "me", psn) &gt;= 0)
            {
                response = transformYouMeStatement(statement);
            }
            else
            {
                response = getRandomResponse();
            }
        }
        return response;
    }

    /**
     * Take a statement with "I want to &lt;something&gt;." and transform it into "What
     * would it mean to &lt;something&gt;?"
     *
     * @param statement the user statement, assumed to contain "I want to"
     * @return the transformed statement
     */
    private String transformIWantToStatement(String statement)
    {
        //  Remove the final period, if there is one
        statement = statement.trim();
        String lastChar = statement.substring(statement.length() - 1);
        if (lastChar.equals("."))
        {
            statement = statement.substring(0, statement.length() - 1);
        }
        int psn = findKeyword(statement, "I want to", 0);
        String restOfStatement = statement.substring(psn + 9).trim();
        return "What would it mean to " + restOfStatement + "?";
    }

    /**
     * ADD CODE HERE! Take a statement with "I want &lt;something&gt;." and transform it
     * into Would you really be happy if you had &lt;something&gt;?
     *
     * @param statement the user statement, assumed to contain "I want"
     * @return the transformed statement
     */
    private String transformIWantStatement(String statement)
    {
        // ADD CODE HERE

        return "Would you really be happy if you had ...";
    }

    /**
     * Take a statement with "you &lt;something&gt; me" and transform it into "What makes
     * you think that I &lt;something&gt; you?"
     *
     * @param statement the user statement, assumed to contain "you" followed by
     *     "me"
     * @return the transformed statement
     */
    private String transformYouMeStatement(String statement)
    {
        //  Remove the final period, if there is one
        statement = statement.trim();
        String lastChar = statement.substring(statement.length() - 1);
        if (lastChar.equals("."))
        {
            statement = statement.substring(0, statement.length() - 1);
        }

        int psnOfYou = findKeyword(statement, "you", 0);
        int psnOfMe = findKeyword(statement, "me", psnOfYou + 3);

        String restOfStatement = statement.substring(psnOfYou + 3, psnOfMe).trim();
        return "What makes you think that I " + restOfStatement + " you?";
    }

    /**
     * ADD THIS Take a statement with "I &lt;something&gt; you" and transform it into
     * "Why do you &lt;something&gt; me?"
     *
     * @param statement the user statement, assumed to contain "I" followed by
     *     something "you"
     * @return the transformed statement
     */
    private String transformIMeStatement(String statement)
    {
        // ADD CODE HERE
        return "Why do you...";
    }

    /**
     * Search for one word in phrase. The search is not case sensitive. This method
     * will check that the given goal is not a substring of a longer string (so,
     * for example, "I know" does not contain "no").
     *
     * @param statement the string to search
     * @param goal the string to search for
     * @param startPos the character of the string to begin the search at
     * @return the index of the first occurrence of goal in statement or -1 if it's
     *     not found
     */
    private int findKeyword(String statement, String goal, int startPos)
    {
        String phrase = statement.trim();
        //  The only change to incorporate the startPos is in the line below
        int psn = phrase.toLowerCase().indexOf(goal.toLowerCase(), startPos);

        //  Refinement--make sure the goal isn't part of a word
        while (psn &gt;= 0)
        {
            //  Find the string of length 1 before and after the word
            String before = " ", after = " ";
            if (psn &gt; 0)
            {
                before = phrase.substring(psn - 1, psn).toLowerCase();
            }
            if (psn + goal.length() &lt; phrase.length())
            {
                after =
                        phrase.substring(
                                        psn + goal.length(),
                                        psn + goal.length() + 1)
                                .toLowerCase();
            }

            //  If before and after aren't letters, we've found the word
            if (((before.compareTo("a") &lt; 0)
                            || (before.compareTo("z")
                                    &gt; 0)) //  before is not a letter
                    &amp;&amp; ((after.compareTo("a") &lt; 0)
                            || (after.compareTo("z") &gt; 0)))
                            {
                return psn;
            }

            //  The last position didn't work, so let's find the next, if there is
            // one.
            psn = phrase.indexOf(goal.toLowerCase(), psn + 1);
        }

        return -1;
    }

    /**
     * Search for one word in phrase. The search is not case sensitive. This method
     * will check that the given goal is not a substring of a longer string (so,
     * for example, "I know" does not contain "no"). The search begins at the
     * beginning of the string.
     *
     * @param statement the string to search
     * @param goal the string to search for
     * @return the index of the first occurrence of goal in statement or -1 if it's
     *     not found
     */
    private int findKeyword(String statement, String goal)
    {
        return findKeyword(statement, goal, 0);
    }

    /**
     * Pick a default response to use if nothing else fits.
     *
     * @return a non-committal string
     */
    private String getRandomResponse()
    {
        final int NUMBER_OF_RESPONSES = 4;
        double r = Math.random();
        int whichResponse = (int) (r * NUMBER_OF_RESPONSES);
        String response = "";

        if (whichResponse == 0)
        {
            response = "Interesting, tell me more.";
        }
        else if (whichResponse == 1)
        {
            response = "Hmmm.";
        }
        else if (whichResponse == 2)
        {
            response = "Do you really think so?";
        }
        else if (whichResponse == 3)
        {
            response = "You don't say.";
        }

        return response;
    }

    public static void main(String[] args)
    {
        Magpie4 maggie = new Magpie4();
        String statement = "I want to build a robot.";
        System.out.println("Statement: " + statement);
        System.out.println("Response: " + maggie.getResponse(statement));
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.22.5.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_chat-labp1">
                <div class="parsons_question parsons-text">
                  <div class="para" id="chat-labp1-1-1">The following program segment should print 4 random responses using if/else statements,  but the blocks have been mixed up.  Drag the blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">private String getRandomResponse()
{
---
    final int NUMBER_OF_RESPONSES = 4;
    double r = Math.random();
---
    int whichResponse = (int)(r * NUMBER_OF_RESPONSES);
    String response = "";
---
    if (whichResponse == 0)
    {
        response = "Interesting, tell me more.";
---
    }
    else if (whichResponse == 1)
    {
        response = "Hmmm.";
---
    }
    else if (whichResponse == 2)
    {
        response = "Do you really think so?";
---
    }
    else if (whichResponse == 3)
    {
        response = "You don't say.";
    }
---
    return response;
---
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>unit-4-summary</id>
      <title>Unit 4 Summary</title>
      <question>
        <label>Exercise 2.23.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_ch6_loops1">
                <span data-subcomponent="question">
                  <div class="para" id="ch6_loops1-1-1">Drag the definition from the left and drop it on the correct concept on the right.  Click the "Check Me" button to see if you are correct</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="ch6_loops1-2-1">Review the summaries above.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_ch6_loops1_drag1">a loop that repeats while a Boolean condition is true</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch6_loops1_drag1">while loop</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch6_loops1_drag2">a loop that has three parts: initialization, condition, and change</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch6_loops1_drag2">for loop</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch6_loops1_drag3">one loop inside of another</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch6_loops1_drag3">nested loop</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.23.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_ch6_loops2">
                <span data-subcomponent="question">
                  <div class="para" id="ch6_loops2-1-1">Drag the definition from the left and drop it on the correct method on the right.  Click the "Check Me" button to see if you are correct.</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="ch6_loops2-2-1">Review the summaries above.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_ch6_loops2_drag1">the statement or block of statements following a loop header that is repeated</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch6_loops2_drag1">body of a loop</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch6_loops2_drag2">a loop that never ends</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch6_loops2_drag2">infinite loop</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch6_loops2_drag3">writing down the values of variables for each execution of the loop body</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch6_loops2_drag3">trace code</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.23.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_while_loop_mistake1">
                <div class="ac_question" id="csawesome2_2_while_loop_mistake1_question">
                  <div class="para" id="while_loop_mistake1-1-1">Fix the infinite loop so that it counts from 3 down to 1.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_while_loop_mistake1_editor" data-question_label="" data-codelens="true">public class Loop1
{
    public static void main(String[] args)
    {
        int x = 3;
        while (x &gt; 0)
        {
            System.out.println(x);
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "3\n2\n1";

        boolean passed = getResults(expect, output, "Expected output");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.23.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_while_loop_oob">
                <div class="ac_question" id="csawesome2_2_while_loop_oob_question">
                  <div class="para" id="while_loop_oob-1-1">Fix the test condition in the loop below so that it doesn’t cause an out of bounds error.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_while_loop_oob_editor" data-question_label="" data-codelens="true">public class Loop2
{
    public static void main(String[] args)
    {
        String result = "";
        String message = "watch out";
        int pos = 0;
        while (pos &lt; message.length())
        {
            result = result + message.substring(pos, pos + 2);
            pos = pos + 1;
        }
        System.out.println(result);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "waattcchh  oouut";

        boolean passed = getResults(expect, output, "Expected output");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.23.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_while_loop_early_leave">
                <div class="ac_question" id="csawesome2_2_while_loop_early_leave_question">
                  <div class="para" id="while_loop_early_leave-1-1">Fix the code below so it does not leave the loop too early. Try the CodeLens button to see what is going on. When should you return true or false?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_while_loop_early_leave_editor" data-question_label="" data-codelens="true">public class Loop3
{
    public static boolean isInOrder(String check)
    {
        int pos = 0;
        while (pos &lt; check.length() - 1)
        {
            String letter1 = check.substring(pos, pos + 1);
            String letter2 = check.substring(pos + 1, pos + 2);
            if (letter1.compareTo(letter2) &lt; 0)
            {
                return true;
            }
            pos++;
        }
        return false;
    }

    public static void main(String[] args)
    {
        System.out.println(isInOrder("abca") + " should return false");
        System.out.println(isInOrder("abc") + " should return true");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "false should return false\ntrue should return true";

        boolean passed = getResults(expect, output, "Expected output");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        boolean output = Loop3.isInOrder("zxy");

        boolean passed = output == false;
        getResults("false", output + "", "isInOrder(\"zxy\")", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-6-25</id>
      <title>Mixed Up Code Practice</title>
      <question optional="yes">
        <label>Exercise 2.24.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch6ex1muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch6ex1muc-1-1">The following program segment should print out all the values from 20 to 30 (20, 21, 22, … 30). But, the blocks have been mixed up.  Drag the blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">int x = 20;
---
while (x &lt;= 30)
{
---
    System.out.println(x);
---
    x++;
---
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.24.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch6ex2muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch6ex2muc-1-1">The following program segment should print a countdown from 15 to 0 (15, 14, 13, … 0).  But the blocks have been mixed up and include one extra block that is not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Test1
{
---
    public static void main(String[] args)
    {
---
        for (int i = 15; i &gt;=0; i--)
---
        for (int i = 15; i &gt; 0; i--)  #paired
---
        {
            System.out.println(i);
        }
---
    }
---
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.24.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch6ex3muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch6ex3muc-1-1">The main method in the following class should print up from 0 to 50 by 5 (0, 5, 10, 15 … 50). But, the blocks have been mixed up and include an extra block that isn’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Test1
{
---
    public static void main(String[] args)
    {
---
        int x = 0;
---
        while (x &lt;= 50)
---
        while (x &lt; 50)   #paired
---
        {
            System.out.println(x);
---
            x = x + 5;
---
        }
---
    }
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.24.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch6ex4muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch6ex4muc-1-1">The main method in the following class should print out the values from 0 to 100 by 20’s (0, 20, 40, .. 100). But, the blocks have been mixed up and include an extra block that isn’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Test1
{
---
    public static void main(String[] args)
    {
---
       for (int i = 0; i &lt;= 100; i+=20)
---
       for (int i = 100; i &gt;= 0; i-=20)  #paired
---
       {
           System.out.println(i);
       }
---
    }
---
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.24.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch6ex5muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch6ex5muc-1-1">The main method in the following class should print out the values from 100 to 0 by 10’s (100, 90, 80, … 0). But, the blocks have been mixed up and include an extra block that is not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Test1
{
---
    public static void main(String[] args)
    {
---
        for (int i = 100; i &gt;= 0; i -= 10)
---
        for (int i = 0; i &lt;= 100; i += 10)  #paired
---
        {
            System.out.println(i);
        }
---
    }
---
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.24.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch6ex7muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch6ex7muc-1-1">The main method in the following class should print 3 rows with 6 *’s in each row.  But, the blocks have been mixed up and include two extra blocks that aren’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Test1
{
---
    public static void main(String[] args)
    {
---
        for (int x = 3; x &gt; 0; x--)
        {
---
        for (int x = 0; x &lt;= 3; x++)
        {  #paired
---
            for (int y = 6; y &gt; 0; y--)
            {
---
            for (int y = 0; y &lt;= 6; y++)
            {  #paired
---
                 System.out.print("*");
---
            }
---
            System.out.println();
---
        }
    }
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.24.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch6ex8muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch6ex8muc-1-1">The main method in the following class should print 1 (followed by a newline), then 22 (followed by a newline), and then 333 (followed by a newline).  But, the blocks have been mixed up and include an extra block that isn’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Test1
{
---
    public static void main(String[] args)
    {
---
        for (int x = 1; x &lt;= 3; x++)
        {
---
        for (int x = 0; x &lt; 3; x++)
        {  #paired
---
            for (int y = 0; y &lt; x; y++)
            {
---
                System.out.print(x);
---
            }
            System.out.println();
        }
---
    }
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.24.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch6ex9muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch6ex9muc-1-1">The main method in the following class should print 11111, 22222, 33333, 44444, and 55555. But, the blocks have been mixed up and contain two extra blocks that are not needed in a correct solution.  Drag the blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Test1
{
---
    public static void main(String[] args)
    {
---
        for (int x = 1; x &lt;= 5; x++)
        {
---
        for (int x = 1; x &lt; 5; x++)
        {  #paired
---
            for (int y = 0; y &lt; 5; y++)
            {
---
                System.out.print(x);
---
                System.out.print(y);  #paired
---
            } //end inner loop
            System.out.println();
---
        } //end outer loop
---
    }
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.24.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch6ex10muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch6ex10muc-1-1">The main method in the following class should print 11111, 2222, 333, 44, 5.  But, the blocks have been mixed up and include one extra block that isn’t needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Test1
{
---
    public static void main(String[] args)
    {
---
        for (int x = 0; x &lt; 5; x++)
        {
---
            for (int y = 5; y &gt; x; y--)
            {
---
                System.out.print(x+1);
---
                System.out.print(x);  #paired
---
            } //end inner loop
            System.out.println();
---
        } //end outer loop
---
    }
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.24.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch6ex11muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch6ex11muc-1-1">The <code class="code-inline tex2jax_ignore">get_mid(str)</code> method in the <code class="code-inline tex2jax_ignore">StringWorker</code> class should return the middle character if the string has an odd number of characters and the middle two characters if the string has an even number of characters.  For example, <code class="code-inline tex2jax_ignore">get_mid("way")</code> should return <code class="code-inline tex2jax_ignore">"a"</code> and <code class="code-inline tex2jax_ignore">get_mid("away")</code> should return <code class="code-inline tex2jax_ignore">"wa"</code>.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class StringWorker
{
---
    public static String get_mid(String str)
    {
---
        int str_len = str.length();
        int mid = str_len / 2;
---
        /* if odd number of chars */
        if (str_len % 2 == 1)
        {
---
            return str.substring(mid, mid+1);
---
        }
---
        else
        {
---
            return str.substring(mid-1, mid+1);
---
        }
---
    }
---
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.24.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch6ex12muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch6ex12muc-1-1">The <code class="code-inline tex2jax_ignore">ev_div(s, n)</code> method in the <code class="code-inline tex2jax_ignore">NumWorker</code> class should return the number of digits in <code class="code-inline tex2jax_ignore">s</code> (a string representation of a number) that are evenly divisible by <code class="code-inline tex2jax_ignore">n</code>.  For example, <code class="code-inline tex2jax_ignore">even_div('6892',3)</code> should return 2 since both 6 and 9 are evenly divisible by 3.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class NumWorker
{
---
    public static int ev_div(String s, int n)
    {
---
        int c_num = 0;
        String c_digit = "";
        int count = 0;
---
        for (int i = 0; i &lt; s.length(); i++)
        {
---
            c_digit = s.substring(i, i+1);
---
            c_num = Integer.parseInt(c_digit);
---
            /* if is evely divisible by n */
            if (c_num % n == 0)
            {
---
                count += 1;
---
            }
---
        }
---
        return count;
---
    }
---
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-000352</id>
      <title>Toggle Mixed Up or Write Code Practice</title>
    </subchapter>
    <subchapter>
      <id>csawesome2-6-27</id>
      <title>Coding Practice with Loops</title>
      <question optional="yes">
        <label>Exercise 2.26.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-6-27-2-1-1-1">Rewrite the following code so that it uses a <code class="code-inline tex2jax_ignore">for</code> loop instead of a <code class="code-inline tex2jax_ignore">while</code> loop to print out all the integers from 5 to 1 (inclusive).</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int x = 5;
        while (x &gt; 0)
        {
            System.out.println(x);
            x = x - 1;
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "5\n4\n3\n2\n1\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testForLoop() throws IOException
    {
        String target = "for(int * = 5;";
        boolean passed = checkCodeContains("for loop", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.26.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch6ex1a">
                <div class="ac_question" id="csawesome2_2_ch6ex1a_question">
                  <div class="para" id="ch6ex1a-1-1">Answer: In a <code class="code-inline tex2jax_ignore">for</code> loop you declare and initialize the variable(s), specify the condition, and specify how the loop variable(s) change in the header of the <code class="code-inline tex2jax_ignore">for</code> loop as shown below.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch6ex1a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        for (int x = 5; x &gt; 0; x = x - 1) System.out.println(x);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.26.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-6-27-2-2-1-1">Rewrite the following code to use a <code class="code-inline tex2jax_ignore">while</code> loop instead of a <code class="code-inline tex2jax_ignore">for</code> loop to print out the numbers from 1 to 10 (inclusive).</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        for (int x = 1; x &lt;= 10; x++) System.out.println(x);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

// import java.util.regex.*;
/* Do NOT change Main or CodeTestHelper.java. */
public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testForLoop() throws IOException
    {
        String target = "while (";
        boolean passed = checkCodeContains("while loop", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.26.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-6-27-2-3-1-1">Rewrite the following code so that it uses a <code class="code-inline tex2jax_ignore">for</code> loop instead of a <code class="code-inline tex2jax_ignore">while</code> loop to print out all the integers from 5 to 15 (inclusive).</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int x = 5;
        while (x &lt;= 15)
        {
            System.out.println(x);
            x = x + 1;
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testForLoop() throws IOException
    {
        String target = "for (int * = 5;";
        boolean passed = checkCodeContains("for loop", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.26.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-6-27-2-4-1-1">Rewrite the following code to use a <code class="code-inline tex2jax_ignore">while</code> loop instead of a <code class="code-inline tex2jax_ignore">for</code> loop to print out the numbers from 10 to 100 by 10’s (inclusive).</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        for (int x = 10; x &lt;= 100; x = x + 10) System.out.println(x);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "10\n20\n30\n40\n50\n60\n70\n80\n90\n100\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testForLoop() throws IOException
    {
        String target = "while (";
        boolean passed = checkCodeContains("while loop", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.26.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-6-27-2-5-1-1">The following code should print the values from 1 to 10 (inclusive) but has errors.  Fix the errors so that the code works as intended. If the code is in an infinite loop you can refresh the page in the browser to stop the loop and then click on Load History and move the bar above it to see your last changes.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int x = 1;
        while (x &lt; 10)
        {
            System.out.println(x);
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testWhileLoop() throws IOException
    {
        String target1 = "x=x+1;";
        String target2 = "x++;";
        String code = removeSpaces(getCode());
        boolean passed = code.contains(target1) || code.contains(target2);
        getResults("true", "" + passed, "changing the loop variable x");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.26.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-6-27-2-6-1-1">The following code should print the values from 10 to 5, but it has errors.  Fix the errors so that the code works as intended.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        for (int x = 10; x &gt;= 5; x--)
        {
            System.out.println(x);
            x--;
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "10\n9\n8\n7\n6\n5\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.26.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-6-27-2-7-1-1">The following code should print the values from 10 to 1, but it has errors.  Fix the errors so that the code works as intended.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int x = 10;
        while (x &gt;= 0)
        {
            x--;
            System.out.println(x);
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.26.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-6-27-2-8-1-1">Finish the code below to print a countdown from 100 to 0 by 10’s using a for or while loop.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args) {}
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "100\n90\n80\n70\n60\n50\n40\n30\n20\n10\n0\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testForLoop() throws IOException
    {
        String code = getCode();
        boolean passed = code.contains("for") || code.contains("while");
        getResults("Expected loop", "" + passed, "Checking for loop", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.26.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-6-27-2-9-1-1">Finish the code to print the value of <code class="code-inline tex2jax_ignore">x</code> and <code class="code-inline tex2jax_ignore">" is even"</code> if <code class="code-inline tex2jax_ignore">x</code> is even and <code class="code-inline tex2jax_ignore">" is odd"</code> if it is odd for all values from 10 to 1.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args) {}
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "10 is even\n"
                    + "9 is odd\n"
                    + "8 is even\n"
                    + "7 is odd\n"
                    + "6 is even\n"
                    + "5 is odd\n"
                    + "4 is even\n"
                    + "3 is odd\n"
                    + "2 is even\n"
                    + "1 is odd\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testIfLoop()
    {
        String code = getCode();
        boolean passed = code.contains("if") &amp;&amp; (code.contains("for") || code.contains("while"));
        getResults(
                "Expected loop and if", "" + passed, "Checking for loop and if statement", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.26.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-6-27-2-10-1-1">Finish the code below to print the values for <code class="code-inline tex2jax_ignore">10 * x</code> where <code class="code-inline tex2jax_ignore">x</code> changes from 0 to 10 using a loop.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args) {}
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "0\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testForLoop()
    {
        // String target = "for (";
        // boolean passed = checkCodeContains("for loop", target);
        String code = getCode();
        boolean passed = code.contains("for") || code.contains("while");
        getResults("Expected loop", "" + passed, "Checking for loop", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.26.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch6ex11na">
                <div class="ac_question" id="csawesome2_2_ch6ex11na_question">
                  <div class="para" id="ch6ex11na-1-1">Answer: Use a <code class="code-inline tex2jax_ignore">for</code> loop with <code class="code-inline tex2jax_ignore">x</code> changing from 0 to 10 and print the value of <code class="code-inline tex2jax_ignore">x</code> and <code class="code-inline tex2jax_ignore">10 * x</code>.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch6ex11na_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        for (int x = 0; x &lt;= 10; x++)
        {
            System.out.println(x * 10);
        }
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.26.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-6-27-2-11-1-1">Finish the following code so that it prints a string message minus the last character each time through the loop until there are no more characters in message.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String message = "help";
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "help\nhel\nhe\nh\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testForLoop()
    {
        String code = getCode();
        boolean passed = code.contains("for") || code.contains("while");
        getResults("Expected loop", "" + passed, "Checking for loop", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.26.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-6-27-2-12-1-1">Finish the code to loop printing the message each time through the loop and remove an <code class="code-inline tex2jax_ignore">x</code> from the message until all the <code class="code-inline tex2jax_ignore">x</code>’s are gone.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String message = "Ix lovex youxxx";
        System.out.println(message);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

// import java.util.regex.*;
/* Do NOT change Main or CodeTestHelper.java. */
public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "Ix lovex youxxx\n"
                    + "I lovex youxxx\n"
                    + "I love youxxx\n"
                    + "I love youxx\n"
                    + "I love youx\n"
                    + "I love you\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testForLoop()
    {
        String code = getCode();
        boolean passed = code.contains("for") || code.contains("while");
        getResults("Expected loop", "" + passed, "Checking for loop", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.26.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-6-27-2-13-1-1">Write a loop below to print the number of <code class="code-inline tex2jax_ignore">x</code>’s in the string message.  Use the <code class="code-inline tex2jax_ignore">indexOf</code> and <code class="code-inline tex2jax_ignore">substring</code> methods.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String message = "xyxxzax";
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "4";

        boolean passed = output.contains(expect);
        getResults(expect, output, "Expected output from main", passed);
        assertTrue(passed);
    }

    @Test
    public void testForLoop()
    {
        String code = getCode();
        boolean passed = code.contains("for") || code.contains("while");
        getResults("Expected loop", "" + passed, "Checking for loop", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.26.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-6-27-2-14-1-1">Write the code below to print a rectangle of stars (<code class="code-inline tex2jax_ignore">*</code>) with 5 rows of stars and 3 stars per row. Hint: use nested for loops.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args) {}
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "***\n***\n***\n***\n***\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String code = getCode();
        String target = "for (int * = #; * ? *; *~)";

        int num = countOccurencesRegex(code, target);

        boolean passed = num == 2;

        getResults("2", "" + num, "2 For loops (nested)", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.26.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-6-27-2-15-1-1">Write the code below to print a rectangle of stars (<code class="code-inline tex2jax_ignore">*</code>) with 3 rows of stars and 5 stars per row.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args) {}
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "*****\n*****\n*****\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String code = getCode();
        String target = "for (int * = #; * ? *; *~)";

        int num = countOccurencesRegex(code, target);

        boolean passed = num == 2;

        getResults("2", "" + num, "2 For loops (nested)", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.26.18 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-6-27-2-16-1-1">Write the code below to print 55555, 4444, 333, 22, 1 with each on a different line.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args) {}
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "55555\n4444\n333\n22\n1\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String code = getCode();
        String target = "for (int * = #; * ? *; *~)";

        int num = countOccurencesRegex(code, target);

        boolean passed = num == 2;

        getResults("2", "" + num, "2 For loops (nested)", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>multiple-choice-exercises</id>
      <title>Multiple Choice Exercises</title>
      <question>
        <label>Exercise 2.27.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qle_1" data-multipleanswers="false"><div class="para" id="qle_1-1-1">4-11-1: What does the following code print?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int i = 3; i &lt;= 12; i++)
{
   System.out.print(i + " ");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qle_1_opt_a"><div class="para" id="qle_1-2-1-1-1">5 6 7 8 9</div></li><li data-component="feedback" id="csawesome2_2_qle_1_opt_a"><div class="para" id="qle_1-2-1-2-1">What is i set to in the initialization area?</div></li><li data-component="answer" id="csawesome2_2_qle_1_opt_b"><div class="para" id="qle_1-2-2-1-1">4 5 6 7 8 9 10 11 12</div></li><li data-component="feedback" id="csawesome2_2_qle_1_opt_b"><div class="para" id="qle_1-2-2-2-1">What is i set to in the initialization area?</div></li><li data-component="answer" id="csawesome2_2_qle_1_opt_c"><div class="para" id="qle_1-2-3-1-1">3 5 7 9 11</div></li><li data-component="feedback" id="csawesome2_2_qle_1_opt_c"><div class="para" id="qle_1-2-3-2-1">This loop changes i by 1 each time in the change area.</div></li><li data-component="answer" id="csawesome2_2_qle_1_opt_d" data-correct=""><div class="para" id="qle_1-2-4-1-1">3 4 5 6 7 8 9 10 11 12</div></li><li data-component="feedback" id="csawesome2_2_qle_1_opt_d"><div class="para" id="qle_1-2-4-2-1">The value of i starts at 3 and this loop will execute until i equals 12.  The last time through the loop the value of i is 12 at the begininng and then it will be incremented to 13 which stops the loop since 13 is not less than or equal to 12.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.27.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qle_2" data-multipleanswers="false"><div class="para" id="qle_2-1-1">4-11-2: How many times does the following method print a <code class="code-inline tex2jax_ignore">*</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int i = 3; i &lt; 9; i++)
{
   System.out.print("*");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qle_2_opt_a"><div class="para" id="qle_2-2-1-1-1">9</div></li><li data-component="feedback" id="csawesome2_2_qle_2_opt_a"><div class="para" id="qle_2-2-1-2-1">This would be true if i started at 0.</div></li><li data-component="answer" id="csawesome2_2_qle_2_opt_b"><div class="para" id="qle_2-2-2-1-1">7</div></li><li data-component="feedback" id="csawesome2_2_qle_2_opt_b"><div class="para" id="qle_2-2-2-2-1">Note that it stops when i is 9.</div></li><li data-component="answer" id="csawesome2_2_qle_2_opt_c" data-correct=""><div class="para" id="qle_2-2-3-1-1">6</div></li><li data-component="feedback" id="csawesome2_2_qle_2_opt_c"><div class="para" id="qle_2-2-3-2-1">Since i starts at 3 and the last time through the loop it is 8 the loop executes 8 - 3 + 1 times = 6 times.</div></li><li data-component="answer" id="csawesome2_2_qle_2_opt_d"><div class="para" id="qle_2-2-4-1-1">10</div></li><li data-component="feedback" id="csawesome2_2_qle_2_opt_d"><div class="para" id="qle_2-2-4-2-1">This would be true if i started at 0 and ended when i was 10.  Does it?</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.27.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qle_3" data-multipleanswers="false"><div class="para" id="qle_3-1-1">4-11-3: What does the following code print?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int x = -5;
while (x &lt; 0)
{
   x++;
   System.out.print(x + " ");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qle_3_opt_a"><div class="para" id="qle_3-2-1-1-1">5 4 3 2 1</div></li><li data-component="feedback" id="csawesome2_2_qle_3_opt_a"><div class="para" id="qle_3-2-1-2-1">x is initialized (set) to -5 to start.</div></li><li data-component="answer" id="csawesome2_2_qle_3_opt_b"><div class="para" id="qle_3-2-2-1-1">-5 -4 -3 -2 -1</div></li><li data-component="feedback" id="csawesome2_2_qle_3_opt_b"><div class="para" id="qle_3-2-2-2-1">x is incremented (x++) before the print statement executes.</div></li><li data-component="answer" id="csawesome2_2_qle_3_opt_c" data-correct=""><div class="para" id="qle_3-2-3-1-1">-4 -3 -2 -1 0</div></li><li data-component="feedback" id="csawesome2_2_qle_3_opt_c"><div class="para" id="qle_3-2-3-2-1">x is set to -5 to start but then incremented by 1 so it first prints -4.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.27.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qle_4" data-multipleanswers="false"><div class="para" id="qle_4-1-1">4-11-4: How many times does the following method print a <code class="code-inline tex2jax_ignore">*</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int i = 5; i &lt;= 12; i++)
{
   System.out.print("*");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qle_4_opt_a"><div class="para" id="qle_4-2-1-1-1">7</div></li><li data-component="feedback" id="csawesome2_2_qle_4_opt_a"><div class="para" id="qle_4-2-1-2-1">This would be true if it stopped when i was 12, but it loops when i is 12.</div></li><li data-component="answer" id="csawesome2_2_qle_4_opt_b" data-correct=""><div class="para" id="qle_4-2-2-1-1">8</div></li><li data-component="feedback" id="csawesome2_2_qle_4_opt_b"><div class="para" id="qle_4-2-2-2-1">Note that it stops when i is 13 so 13 - 5 is 8.</div></li><li data-component="answer" id="csawesome2_2_qle_4_opt_c"><div class="para" id="qle_4-2-3-1-1">12</div></li><li data-component="feedback" id="csawesome2_2_qle_4_opt_c"><div class="para" id="qle_4-2-3-2-1">This would be true if i started at 1.</div></li><li data-component="answer" id="csawesome2_2_qle_4_opt_d"><div class="para" id="qle_4-2-4-1-1">13</div></li><li data-component="feedback" id="csawesome2_2_qle_4_opt_d"><div class="para" id="qle_4-2-4-2-1">This would be true if i started at 0.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.27.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qle_5" data-multipleanswers="false"><div class="para" id="qle_5-1-1">4-11-5: How many times does the following method print a <code class="code-inline tex2jax_ignore">*</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int i = 1; i &lt; 5; i++)
{
   System.out.print("*");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qle_5_opt_a" data-correct=""><div class="para" id="qle_5-2-1-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_qle_5_opt_a"><div class="para" id="qle_5-2-1-2-1">The loop starts with i = 1 and loops as long as it is less than 5 so i is 1, 2, 3, 4.</div></li><li data-component="answer" id="csawesome2_2_qle_5_opt_b"><div class="para" id="qle_5-2-2-1-1">5</div></li><li data-component="feedback" id="csawesome2_2_qle_5_opt_b"><div class="para" id="qle_5-2-2-2-1">This would be true if the condition was i &lt;= 5.</div></li><li data-component="answer" id="csawesome2_2_qle_5_opt_c"><div class="para" id="qle_5-2-3-1-1">6</div></li><li data-component="feedback" id="csawesome2_2_qle_5_opt_c"><div class="para" id="qle_5-2-3-2-1">This would be true if i started at 0 and ended when it reached 6 (i &lt;= 5).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.27.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qle_6" data-multipleanswers="false"><div class="para" id="qle_6-1-1">4-11-6: How many times does the following method print a <code class="code-inline tex2jax_ignore">*</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int i = 0; i &lt;= 8; i++)
{
   System.out.print("*");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qle_6_opt_a"><div class="para" id="qle_6-2-1-1-1">7</div></li><li data-component="feedback" id="csawesome2_2_qle_6_opt_a"><div class="para" id="qle_6-2-1-2-1">This would be true if i started at 1 and ended when it reached 8.</div></li><li data-component="answer" id="csawesome2_2_qle_6_opt_b"><div class="para" id="qle_6-2-2-1-1">8</div></li><li data-component="feedback" id="csawesome2_2_qle_6_opt_b"><div class="para" id="qle_6-2-2-2-1">This would be true if the loop ended when i reached 8.</div></li><li data-component="answer" id="csawesome2_2_qle_6_opt_c" data-correct=""><div class="para" id="qle_6-2-3-1-1">9</div></li><li data-component="feedback" id="csawesome2_2_qle_6_opt_c"><div class="para" id="qle_6-2-3-2-1">This loop starts with i = 0 and continues till it reaches 9 so (9 - 0 = 9).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.27.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qle_7" data-multipleanswers="false"><div class="para" id="qle_7-1-1">4-11-7: How many times does the following method print a <code class="code-inline tex2jax_ignore">*</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int x = 0; x &lt; 5; x++)
{
   System.out.print("*");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qle_7_opt_a"><div class="para" id="qle_7-2-1-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_qle_7_opt_a"><div class="para" id="qle_7-2-1-2-1">This would be true if x started at 1 instead of 0.</div></li><li data-component="answer" id="csawesome2_2_qle_7_opt_b" data-correct=""><div class="para" id="qle_7-2-2-1-1">5</div></li><li data-component="feedback" id="csawesome2_2_qle_7_opt_b"><div class="para" id="qle_7-2-2-2-1">The loop starts with x = 0 and ends when it reaches 5 so 5 - 0 = 5.</div></li><li data-component="answer" id="csawesome2_2_qle_7_opt_c"><div class="para" id="qle_7-2-3-1-1">6</div></li><li data-component="feedback" id="csawesome2_2_qle_7_opt_c"><div class="para" id="qle_7-2-3-2-1">This would be true if the condition was x &lt;= 5 instead of x = 5.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.27.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qle_8" data-multipleanswers="false"><div class="para" id="qle_8-1-1">4-11-8: How many times does the following method print a <code class="code-inline tex2jax_ignore">*</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int x = 2; x &lt; 8; x++)
{
   System.out.print("*");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qle_8_opt_a" data-correct=""><div class="para" id="qle_8-2-1-1-1">6</div></li><li data-component="feedback" id="csawesome2_2_qle_8_opt_a"><div class="para" id="qle_8-2-1-2-1">This loop starts with x = 2 and continues while it is less than 8 so 8 - 2 = 6.</div></li><li data-component="answer" id="csawesome2_2_qle_8_opt_b"><div class="para" id="qle_8-2-2-1-1">7</div></li><li data-component="feedback" id="csawesome2_2_qle_8_opt_b"><div class="para" id="qle_8-2-2-2-1">This would be true if the loop ended when x was 9 instead of 8 (x &lt;= 8).</div></li><li data-component="answer" id="csawesome2_2_qle_8_opt_c"><div class="para" id="qle_8-2-3-1-1">8</div></li><li data-component="feedback" id="csawesome2_2_qle_8_opt_c"><div class="para" id="qle_8-2-3-2-1">This would be true if the loop started with x = 0.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.27.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qle_9" data-multipleanswers="false"><div class="para" id="qle_9-1-1">4-11-9: What does the following code print?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int x = 0;
while (x &lt;= 5)
{
   System.out.print(x + " ");
   x++;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qle_9_opt_a"><div class="para" id="qle_9-2-1-1-1">1 2 3 4</div></li><li data-component="feedback" id="csawesome2_2_qle_9_opt_a"><div class="para" id="qle_9-2-1-2-1">This would be true if x started at 1 and ended when x was 5.</div></li><li data-component="answer" id="csawesome2_2_qle_9_opt_b"><div class="para" id="qle_9-2-2-1-1">1 2 3 4 5</div></li><li data-component="feedback" id="csawesome2_2_qle_9_opt_b"><div class="para" id="qle_9-2-2-2-1">This would be true if x started at 1.</div></li><li data-component="answer" id="csawesome2_2_qle_9_opt_c"><div class="para" id="qle_9-2-3-1-1">0 1 2 3 4</div></li><li data-component="feedback" id="csawesome2_2_qle_9_opt_c"><div class="para" id="qle_9-2-3-2-1">This would be true if the loop ended when x was 5.</div></li><li data-component="answer" id="csawesome2_2_qle_9_opt_d" data-correct=""><div class="para" id="qle_9-2-4-1-1">0 1 2 3 4 5</div></li><li data-component="feedback" id="csawesome2_2_qle_9_opt_d"><div class="para" id="qle_9-2-4-2-1">This loop starts with x = 0 and ends when it reaches 6.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.27.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qle_10" data-multipleanswers="false"><div class="para" id="qle_10-1-1">4-11-10: What does the following code print?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int x = 3;
while (x &lt; 9)
{
   System.out.print(x + " ");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qle_10_opt_a"><div class="para" id="qle_10-2-1-1-1">3 4 5 6 7 8</div></li><li data-component="feedback" id="csawesome2_2_qle_10_opt_a"><div class="para" id="qle_10-2-1-2-1">Notice that x isn’t changed in the loop.</div></li><li data-component="answer" id="csawesome2_2_qle_10_opt_b"><div class="para" id="qle_10-2-2-1-1">3 4 5 6 7 8 9</div></li><li data-component="feedback" id="csawesome2_2_qle_10_opt_b"><div class="para" id="qle_10-2-2-2-1">Notice that x isn’t changed in the loop.</div></li><li data-component="answer" id="csawesome2_2_qle_10_opt_c"><div class="para" id="qle_10-2-3-1-1">0 1 2 3 4 5 6 7 8</div></li><li data-component="feedback" id="csawesome2_2_qle_10_opt_c"><div class="para" id="qle_10-2-3-2-1">Notice that x isn’t changed in the loop.</div></li><li data-component="answer" id="csawesome2_2_qle_10_opt_d"><div class="para" id="qle_10-2-4-1-1">0 1 2 3 4 5 6 7 8 9</div></li><li data-component="feedback" id="csawesome2_2_qle_10_opt_d"><div class="para" id="qle_10-2-4-2-1">Notice that x isn’t changed in the loop.</div></li><li data-component="answer" id="csawesome2_2_qle_10_opt_e" data-correct=""><div class="para" id="qle_10-2-5-1-1">It is an infinite loop</div></li><li data-component="feedback" id="csawesome2_2_qle_10_opt_e"><div class="para" id="qle_10-2-5-2-1">Since x is never changed in the loop this is an infinite loop.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.27.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qlm_1" data-multipleanswers="false"><div class="para" id="qlm_1-1-1">4-11-11: How many stars are output when the following code is executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int i = 0; i &lt; 5; i++) {
   for (int j = 0; j &lt; 5; j++)
      System.out.println("*");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qlm_1_opt_a"><div class="para" id="qlm_1-2-1-1-1">10</div></li><li data-component="feedback" id="csawesome2_2_qlm_1_opt_a"><div class="para" id="qlm_1-2-1-2-1">The second loop executes 5 times for each of the 5 times the first loop executes, so the answer should be 5 * 5.</div></li><li data-component="answer" id="csawesome2_2_qlm_1_opt_b"><div class="para" id="qlm_1-2-2-1-1">5</div></li><li data-component="feedback" id="csawesome2_2_qlm_1_opt_b"><div class="para" id="qlm_1-2-2-2-1">The second loop executes 5 times for each of the 5 times the first loop executes, so the answer should be 5 * 5.</div></li><li data-component="answer" id="csawesome2_2_qlm_1_opt_c" data-correct=""><div class="para" id="qlm_1-2-3-1-1">25</div></li><li data-component="feedback" id="csawesome2_2_qlm_1_opt_c"><div class="para" id="qlm_1-2-3-2-1">The first loop will execute 5 times, and for each time through, the second loop will execute 5 times. So the answer is the number of times through the first loop times the number of times through the second.</div></li><li data-component="answer" id="csawesome2_2_qlm_1_opt_d"><div class="para" id="qlm_1-2-4-1-1">50</div></li><li data-component="feedback" id="csawesome2_2_qlm_1_opt_d"><div class="para" id="qlm_1-2-4-2-1">The second loop executes 5 times for each of the 5 times the first loop executes, so the answer should be 5 * 5.</div></li><li data-component="answer" id="csawesome2_2_qlm_1_opt_e"><div class="para" id="qlm_1-2-5-1-1">15</div></li><li data-component="feedback" id="csawesome2_2_qlm_1_opt_e"><div class="para" id="qlm_1-2-5-2-1">The second loop executes 5 times for each of the 5 times the first loop executes, so the answer should be 5 * 5.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.27.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qlm_2" data-multipleanswers="false"><div class="para" id="qlm_2-1-1">4-11-12: Which of the following code segments will produce the displayed output?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">1
22
333
4444
55555


I.   for (int i = 1; i &lt;= 5; i++) {
        for (int j = i; j &gt; 0; j--) {
           System.out.print(i);
        }
        System.out.println();
     }

II.  for (int i = 0; i &lt; 5; i++) {
        for (int j = 0; j &lt; i; j++) {
           System.out.print(i);
        }
        System.out.println();
     }

III. for (int i = 1; i &lt; 5; i++) {
        for (int j = i; j &gt; 0; j--) {
           System.out.print(i);
        }
        System.out.println();
     }

IV.  for (int i = 1; i &lt; 6; i++) {
        for (int j = 0; j &lt; i; j++) {
           System.out.println(i);
        }
     }

V.   for (int i = 0; i &lt; 5; i++) {
        for (int j = 0; j &lt; i; j++) {
           System.out.print(i+1);
        }
        System.out.println();
     }
</code></pre></div><li data-component="answer" id="csawesome2_2_qlm_2_opt_a" data-correct=""><div class="para" id="qlm_2-2-1-1-1">I</div></li><li data-component="feedback" id="csawesome2_2_qlm_2_opt_a"><div class="para" id="qlm_2-2-1-2-1">This will loop with i changing from 1 to 5 and then for each i, j will loop from i to 0 printing the value of i and then a new line.</div></li><li data-component="answer" id="csawesome2_2_qlm_2_opt_b"><div class="para" id="qlm_2-2-2-1-1">II</div></li><li data-component="feedback" id="csawesome2_2_qlm_2_opt_b"><div class="para" id="qlm_2-2-2-2-1">This will loop i from 0 to 4 and j from 0 to i, neglecting to ouput 5.</div></li><li data-component="answer" id="csawesome2_2_qlm_2_opt_c"><div class="para" id="qlm_2-2-3-1-1">III</div></li><li data-component="feedback" id="csawesome2_2_qlm_2_opt_c"><div class="para" id="qlm_2-2-3-2-1">This will loop with i changing from 1 to 4 and j from i to 0.</div></li><li data-component="answer" id="csawesome2_2_qlm_2_opt_d"><div class="para" id="qlm_2-2-4-1-1">IV</div></li><li data-component="feedback" id="csawesome2_2_qlm_2_opt_d"><div class="para" id="qlm_2-2-4-2-1">This will loop with i changing from 1 to 5 and j from 0 to i but it will print each value on a different line.</div></li><li data-component="answer" id="csawesome2_2_qlm_2_opt_e"><div class="para" id="qlm_2-2-5-1-1">V</div></li><li data-component="feedback" id="csawesome2_2_qlm_2_opt_e"><div class="para" id="qlm_2-2-5-2-1">This will loop with i changing from 0 to 4 and j from 0 to i.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.27.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qlm_3" data-multipleanswers="false"><div class="para" id="qlm_3-1-1">4-11-13: What is printed as a result of the following code segment?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int k = 0; k &lt; 20; k+=2) {
   if (k % 3 == 1)
      System.out.print(k + " ");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qlm_3_opt_a"><div class="para" id="qlm_3-2-1-1-1">0 2 4 6 8 10 12 14 16 18</div></li><li data-component="feedback" id="csawesome2_2_qlm_3_opt_a"><div class="para" id="qlm_3-2-1-2-1">This would be correct if we were printing out all of the values of k, not just the ones that have a remainder of 1 when divided by 3.</div></li><li data-component="answer" id="csawesome2_2_qlm_3_opt_b"><div class="para" id="qlm_3-2-2-1-1">4 16</div></li><li data-component="feedback" id="csawesome2_2_qlm_3_opt_b"><div class="para" id="qlm_3-2-2-2-1">This is missing the value 10 (10 divided by 3 does have a remainder of 1).</div></li><li data-component="answer" id="csawesome2_2_qlm_3_opt_c"><div class="para" id="qlm_3-2-3-1-1">0 6 12 18</div></li><li data-component="feedback" id="csawesome2_2_qlm_3_opt_c"><div class="para" id="qlm_3-2-3-2-1">None of these answers have a remainder of 1 when divided by 3.</div></li><li data-component="answer" id="csawesome2_2_qlm_3_opt_d"><div class="para" id="qlm_3-2-4-1-1">1 4 7 10 13 16 19</div></li><li data-component="feedback" id="csawesome2_2_qlm_3_opt_d"><div class="para" id="qlm_3-2-4-2-1">This answer would be correct if k was incremented by 1 instead of 2. K will be 0, 2, 4, 6, 8, 10, 12, 14, 16, 18 in this loop.</div></li><li data-component="answer" id="csawesome2_2_qlm_3_opt_e" data-correct=""><div class="para" id="qlm_3-2-5-1-1">4 10 16</div></li><li data-component="feedback" id="csawesome2_2_qlm_3_opt_e"><div class="para" id="qlm_3-2-5-2-1">This will loop with k having a value of 0 to 18 (it will stop when k = 20). It will print out the value of k followed by a space when the remainder of dividing k by 3 is 1.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.27.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qlm_4" data-multipleanswers="false"><div class="para" id="qlm_4-1-1">4-11-14: Which of the following code segments will produce the displayed output?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">11111
2222
333
44
5


I.   for (int j = 1; j &lt;= 5; j++) {
        for (int k = 5; k &gt;= j; k--) {
           System.out.print(j);
        }
        System.out.println();
     }

II.  for (int j = 1; j &lt;= 5; j++) {
        for (int k = 5; k &gt;= 1; k--) {
           System.out.print(j);
        }
        System.out.println();
     }

III. for (int j = 1; j &lt;= 5; j++) {
        for (int k = 1; k &lt;= j; k++) {
           System.out.print(j);
        }
        System.out.println();
     }

IV.  for (int j = 1; j &lt;= 5; j++) {
        for (int k = 1; k &lt;= 5; k++) {
           System.out.println(j);
        }
     }

V.   for (int j = 1; j &lt;= 5; j++) {
        for (int k = j; k &lt;= 5; k++) {
           System.out.print(k);
        }
        System.out.println();
     }
</code></pre></div><li data-component="answer" id="csawesome2_2_qlm_4_opt_a" data-correct=""><div class="para" id="qlm_4-2-1-1-1">I</div></li><li data-component="feedback" id="csawesome2_2_qlm_4_opt_a"><div class="para" id="qlm_4-2-1-2-1">This will loop with j from 1 to 5 and k from 5 to j and print out the value of j and a space. So the first time through the loop it will print 1 five times and the next time it will print out 2 four times and so on.</div></li><li data-component="answer" id="csawesome2_2_qlm_4_opt_b"><div class="para" id="qlm_4-2-2-1-1">II</div></li><li data-component="feedback" id="csawesome2_2_qlm_4_opt_b"><div class="para" id="qlm_4-2-2-2-1">This will print out each value from 1 to 5 five times.</div></li><li data-component="answer" id="csawesome2_2_qlm_4_opt_c"><div class="para" id="qlm_4-2-3-1-1">III</div></li><li data-component="feedback" id="csawesome2_2_qlm_4_opt_c"><div class="para" id="qlm_4-2-3-2-1">This will loop with j from 1 to 5 and k from 1 times.</div></li><li data-component="answer" id="csawesome2_2_qlm_4_opt_d"><div class="para" id="qlm_4-2-4-1-1">IV</div></li><li data-component="feedback" id="csawesome2_2_qlm_4_opt_d"><div class="para" id="qlm_4-2-4-2-1">This will loop j from 1 to 5 and k from 1 to 5, printing each number 5 times.</div></li><li data-component="answer" id="csawesome2_2_qlm_4_opt_e"><div class="para" id="qlm_4-2-5-1-1">V</div></li><li data-component="feedback" id="csawesome2_2_qlm_4_opt_e"><div class="para" id="qlm_4-2-5-2-1">This loops with j from 1 to 5 and k from j to 5 and prints out the value of k, printing 1 through 5 on the first line, 2 through 5 on the next, and so on.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.27.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qlm_5n" data-multipleanswers="false"><div class="para" id="qlm_5n-1-1">4-11-15: What are the values of var1 and var2 after the following code segment is executed and the while loop finishes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int var1 = 0;
int var2 = 2;

while ((var2 != 0) &amp;&amp; ((var1 / var2) &gt;= 0)) {
   var1 = var1 + 1;
   var2 = var2 - 1;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qlm_5n_opt_a"><div class="para" id="qlm_5n-2-1-1-1">var1 = 0, var2 = 2</div></li><li data-component="feedback" id="csawesome2_2_qlm_5n_opt_a"><div class="para" id="qlm_5n-2-1-2-1">This would be true if the body of the while loop never executed. This would have happened if the while check was if var1 != 0 instead of var2 != 0</div></li><li data-component="answer" id="csawesome2_2_qlm_5n_opt_b"><div class="para" id="qlm_5n-2-2-1-1">var1 = 1, var2 = 1</div></li><li data-component="feedback" id="csawesome2_2_qlm_5n_opt_b"><div class="para" id="qlm_5n-2-2-2-1">This would be true if the body of the while loop only execued one time, but it executes twice.</div></li><li data-component="answer" id="csawesome2_2_qlm_5n_opt_c"><div class="para" id="qlm_5n-2-3-1-1">var1 = 3, var2 = -1</div></li><li data-component="feedback" id="csawesome2_2_qlm_5n_opt_c"><div class="para" id="qlm_5n-2-3-2-1">This would be true if the body of the while loop executed 3 times, but it executes twice.</div></li><li data-component="answer" id="csawesome2_2_qlm_5n_opt_d" data-correct=""><div class="para" id="qlm_5n-2-4-1-1">var1 = 2, var2 = 0</div></li><li data-component="feedback" id="csawesome2_2_qlm_5n_opt_d"><div class="para" id="qlm_5n-2-4-2-1">The loop starts with var1=0 and var2=2. The while checks that var2 isn’t 0 and that var1/var2 is greater than or equal to zero (0/2=0) so this is equal to zero and the body of the while loop will execute. The variable var1 has 1 added to it for a new value of 1. The variable var2 has 1 subtracted from it for a value of 1. At this point var1=1 and var2=1. The while condition is checked again. Since var2 isn’t 0 and var1/var2 (1/1=1) is &gt;=0 so the body of the loop will execute a second time. The variable var1 has 1 added to it for a new value of 2. The variable var2 has 1 subtracted from it for a value of 0. At this point var1=2 and var2=0. The while condition is checked again. Since var2 is zero the while loop stops and the value of var1 is 2 and var2 is 0.</div></li><li data-component="answer" id="csawesome2_2_qlm_5n_opt_e"><div class="para" id="qlm_5n-2-5-1-1">The loop won’t finish executing because of a division by zero.</div></li><li data-component="feedback" id="csawesome2_2_qlm_5n_opt_e"><div class="para" id="qlm_5n-2-5-2-1">0/2 won’t cause a division by zero. The result is just zero.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>free-response-questions-frqs-for-control-structures</id>
      <title>Free Response Questions (FRQs) for Control Structures</title>
      <question optional="yes">
        <label>Exercise 2.28.3.1.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_callooptype" data-multipleanswers="false">
                <div class="para" id="callooptype-1-1">4-11-1: Which loop should you use to count the number of leap years between year1 and year2?</div>
                <li data-component="answer" id="csawesome2_2_callooptype_opt_a" data-correct="">
                  <div class="para" id="callooptype-2-1-1-1">for loop</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_callooptype_opt_a">
                  <div class="para" id="callooptype-2-1-2-1">Use a for loop when you know how many times a loop needs to execute.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_callooptype_opt_b">
                  <div class="para" id="callooptype-2-2-1-1">while loop</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_callooptype_opt_b">
                  <div class="para" id="callooptype-2-2-2-1">Although you could use a while loop. It is  easier to use a for loop in this case. Use a while loop when you don’t know how many times a loop needs to execute.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.28.3.1.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_calloop2" data-multipleanswers="false">
                <div class="para" id="calloop2-1-1">4-11-2: What is the starting and ending values for the loop to count the leap years between year 1 and year 2?</div>
                <li data-component="answer" id="csawesome2_2_calloop2_opt_a">
                  <div class="para" id="calloop2-2-1-1-1">Loop from 0 to year1</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_calloop2_opt_a">
                  <div class="para" id="calloop2-2-1-2-1">You need to count the leap years between year1 and year2. The problem does not mention starting at year 0.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_calloop2_opt_b">
                  <div class="para" id="calloop2-2-2-1-1">Loop from 0 to year2</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_calloop2_opt_b">
                  <div class="para" id="calloop2-2-2-2-1">You need to count the leap years between year1 and year2. The problem does not mention starting at year 0.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_calloop2_opt_c">
                  <div class="para" id="calloop2-2-3-1-1">Loop from 2020 to 2030</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_calloop2_opt_c">
                  <div class="para" id="calloop2-2-3-2-1">You need to count the leap years between year1 and year2. The problem does not mention starting at year 2020.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_calloop2_opt_d" data-correct="">
                  <div class="para" id="calloop2-2-4-1-1">Loop from year1 to year2</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_calloop2_opt_d">
                  <div class="para" id="calloop2-2-4-2-1">You need to count the leap years between year1 and year2.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.28.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_APCalendarFRQPartA">
                <div class="ac_question" id="csawesome2_2_APCalendarFRQPartA_question">
                  <div class="para" id="APCalendarFRQPartA-1-1">Write the code for the method numberOfLeapYears below and run to test it.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_APCalendarFRQPartA_editor" data-question_label="" data-codelens="true">import java.util.GregorianCalendar;

public class APCalendar
{

    /**
     * Returns the number of leap years between year1 and year2, inclusive.
     * Precondition: 0 &lt;= year1 &lt;= year2
     */
    public static int numberOfLeapYears(int year1, int year2)
    {
        // WRITE YOUR CODE HERE

    }

    /** Returns true if year is a leap year and false otherwise. */
    private static boolean isLeapYear(int year)
    {
        return new GregorianCalendar().isLeapYear(year);
    }

    public static void main(String[] args)
    {
        int answer = APCalendar.numberOfLeapYears(2000, 2050);
        System.out.println("Your answer should be 13: " + answer);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("APCalendar");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "Your answer should be 13: 13";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        int answer = APCalendar.numberOfLeapYears(1990, 2100);
        int expect = 27;

        boolean passed = getResults("" + expect, "" + answer, "numberOfLeapYears(1990, 2100)");
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        int answer = APCalendar.numberOfLeapYears(2001, 2002);
        int expect = 0;

        boolean passed = getResults("" + expect, "" + answer, "numberOfLeapYears(2001, 2002)");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.28.4.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_dow1" data-multipleanswers="false">
                <div class="para" id="dow1-1-1">4-11-4: If firstDayOfYear(2019) returns 2 for a Tuesday for 1/1/2019, what day of the week is Jan. 4th 2019?</div>
                <li data-component="answer" id="csawesome2_2_dow1_opt_a">
                  <div class="para" id="dow1-2-1-1-1">Wednesday (3)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_dow1_opt_a">
                  <div class="para" id="dow1-2-1-2-1">Since 1/1/19 is a Tuesday, Jan. 4th 2019 is 3 days later.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_dow1_opt_b">
                  <div class="para" id="dow1-2-2-1-1">Thursday (4)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_dow1_opt_b">
                  <div class="para" id="dow1-2-2-2-1">Since 1/1/19 is a Tuesday, Jan. 4th 2019 is 3 days later.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_dow1_opt_c" data-correct="">
                  <div class="para" id="dow1-2-3-1-1">Friday (5)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_dow1_opt_c">
                  <div class="para" id="dow1-2-3-2-1">Since 1/1/19 is a Tuesday, Jan. 4th 2019 is 3 days later on a Friday.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_dow1_opt_d">
                  <div class="para" id="dow1-2-4-1-1">Saturday (6)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_dow1_opt_d">
                  <div class="para" id="dow1-2-4-2-1">Since 1/1/19 is a Tuesday, Jan. 4th 2019 is 3 days later.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.28.4.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_dow2" data-multipleanswers="false">
                <div class="para" id="dow2-1-1">4-11-5: Which of the following expressions return the right value for the day of the week (5) for Jan. 4th 2019 given that firstDayOfYear(2019) returns 2 and dayOfYear(1,4,2019) returns 4?</div>
                <li data-component="answer" id="csawesome2_2_dow2_opt_a">
                  <div class="para" id="dow2-2-1-1-1">firstDayOfYear(2019) + dayOfYear(1,4,2019)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_dow2_opt_a">
                  <div class="para" id="dow2-2-1-2-1">You must start at the firstDayOfYear and add on the days following up until that date - 1 since you start counting at 1.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_dow2_opt_b" data-correct="">
                  <div class="para" id="dow2-2-2-1-1">firstDayOfYear(2019) + dayOfYear(1,4,2019) - 1</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_dow2_opt_b">
                  <div class="para" id="dow2-2-2-2-1">You must start at the firstDayOfYear and add on the days following up until that date - 1 since you start counting at 1.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_dow2_opt_c">
                  <div class="para" id="dow2-2-3-1-1">firstDayOfYear(2019) - dayOfYear(1,4,2019)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_dow2_opt_c">
                  <div class="para" id="dow2-2-3-2-1">You must start at the firstDayOfYear and add on the days following up until that date.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_dow2_opt_d">
                  <div class="para" id="dow2-2-4-1-1">firstDayOfYear(2019) * dayOfYear(1,4,2019)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_dow2_opt_d">
                  <div class="para" id="dow2-2-4-2-1">You must start at the firstDayOfYear and add on the days following up until that date.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.28.4.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_dow3" data-multipleanswers="false">
                <div class="para" id="dow3-1-1">4-11-6: If firstDayOfYear(2019) returns 2 for a Tuesday for 1/1/2019, what day of the week from (0-6 where 0 is Sunday) is Jan. 8th 2019?</div>
                <li data-component="answer" id="csawesome2_2_dow3_opt_a">
                  <div class="para" id="dow3-2-1-1-1">1</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_dow3_opt_a">
                  <div class="para" id="dow3-2-1-2-1">Since 1/1/19 is a Tuesday (2), Jan. 8th 2019, the 8th day of the year, is 7 days later, but since there are only 7 days of the week, so we need to start over at 0 on each Sunday.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_dow3_opt_b" data-correct="">
                  <div class="para" id="dow3-2-2-1-1">2</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_dow3_opt_b">
                  <div class="para" id="dow3-2-2-2-1">Since 1/1/19 is a Tuesday, Jan. 8th 2019 is 7 days later so would fall on the same day of the week.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_dow3_opt_c">
                  <div class="para" id="dow3-2-3-1-1">3</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_dow3_opt_c">
                  <div class="para" id="dow3-2-3-2-1">Since 1/1/19 is a Tuesday, Jan. 8th 2019 is 7 days later.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_dow3_opt_d">
                  <div class="para" id="dow3-2-4-1-1">9</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_dow3_opt_d">
                  <div class="para" id="dow3-2-4-2-1">Since 1/1/19 is a Tuesday (2), Jan. 8th 2019, the 8th day of the year, is 7 days later, but since there are only 7 days of the week, so we need to start over at 0 on each Sunday.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.28.4.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_mod">
                <div class="ac_question" id="csawesome2_2_mod_question">
                  <div class="para" id="mod-1-1">Complete the program below to figure out a day of the week from 0-6 where 0 is Sunday and 6 is Saturday for 7 days of the week. What value would you use for the divisor?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_mod_editor" data-question_label="" data-codelens="true">public class Mod
{
   public static void main(String[] args)
   {
     int day1 = 7;
     int day2 = 8;
     int day3 = 9;
     // fill in the divisor value below
     int divisor =   ;
     System.out.println("Remainder of " + day1 + "/" + divisor + " is " + (day1 % divisor) );
     System.out.println("Remainder of " + day2 + "/" + divisor + " is " + (day2 % divisor) );
     System.out.println("Remainder of " + day3 + "/" + divisor + " is " + (day3 % divisor) );
   }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Mod");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "Remainder of 7/7 is 0\nRemainder of 8/7 is 1\nRemainder of 9/7 is 2";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.28.4.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_dow4" data-multipleanswers="false">
                <div class="para" id="dow4-1-1">4-11-8: Which of the following expressions return the right value for the day of the week (2) for Jan. 8th 2019 given that firstDayOfYear(2019) returns 2 and dayOfYear(1,8,2019) returns 8?</div>
                <li data-component="answer" id="csawesome2_2_dow4_opt_a">
                  <div class="para" id="dow4-2-1-1-1">firstDayOfYear(2019) + dayOfYear(1,8,2019)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_dow4_opt_a">
                  <div class="para" id="dow4-2-1-2-1">This would return 10 but there are only 7 days of the week.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_dow4_opt_b">
                  <div class="para" id="dow4-2-2-1-1">firstDayOfYear(2019) + dayOfYear(1,8,2019) - 1</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_dow4_opt_b">
                  <div class="para" id="dow4-2-2-2-1">This would return 9 but there are only 7 days of the week.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_dow4_opt_c">
                  <div class="para" id="dow4-2-3-1-1">firstDayOfYear(2019) + dayOfYear(1,8,2019) % 7</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_dow4_opt_c">
                  <div class="para" id="dow4-2-3-2-1">Remember that % has precedence so this would return 2 + (8 % 7) = 2 + 1 = 3</div>
                </li>
                <li data-component="answer" id="csawesome2_2_dow4_opt_d">
                  <div class="para" id="dow4-2-4-1-1">firstDayOfYear(2019) + dayOfYear(1,8,2019) - 1 % 4</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_dow4_opt_d">
                  <div class="para" id="dow4-2-4-2-1">Remainder 4 does not make sense because there are 7 days of the week.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_dow4_opt_e" data-correct="">
                  <div class="para" id="dow4-2-5-1-1">(firstDayOfYear(2019) + dayOfYear(1,8,2019) - 1) % 7</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_dow4_opt_e">
                  <div class="para" id="dow4-2-5-2-1">This would return (2 + 8 - 1) % 7 = 2.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.28.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_APCalendarFRQPartB">
                <div class="ac_question" id="csawesome2_2_APCalendarFRQPartB_question">
                  <div class="para" id="APCalendarFRQPartB-1-1">Write the code for the method dayOfWeek below and run to test it. Then, try it with today’s date and see if it returns the right value.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_APCalendarFRQPartB_editor" data-question_label="" data-codelens="true">import java.util.Calendar;
import java.util.GregorianCalendar;

public class APCalendar
{

    /**
     * Returns the value representing the day of the week for the given date
     * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6
     * denotes Saturday. Precondition: The date represented by month, day, year is
     * a valid date.
     */
    public static int dayOfWeek(int month, int day, int year)
    {
        // WRITE YOUR CODE HERE using methods firstDayOfYear and dayOfYear

    }

    public static void main(String[] args)
    {
        int answer = APCalendar.dayOfWeek(1, 8, 2019);
        System.out.println("Your answer should be 2: " + answer);
    }

    /**
     * Returns the value representing the day of the week for the first day of
     * year, where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday.
     */
    private static int firstDayOfYear(int year)
    {
        GregorianCalendar gc = new GregorianCalendar(year, Calendar.JANUARY, 1);
        return gc.get(Calendar.DAY_OF_WEEK) - 1;
    }

    /**
     * Returns n, where month, day, and year specify the nth day of the year.
     * Returns 1 for January 1 (month = 1, day = 1) of any year. Precondition: The
     * date represented by month, day, year is a valid date.
     */
    private static int dayOfYear(int month, int day, int year)
    {
        GregorianCalendar gc = new GregorianCalendar(year, month - 1, day);
        return gc.get(Calendar.DAY_OF_YEAR);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("APCalendar");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "Your answer should be 2: 2";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        int answer = APCalendar.dayOfWeek(7, 2, 2020);
        int expect = 4;

        boolean passed = getResults("" + expect, "" + answer, "dayOfWeek(7, 2, 2020)");
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        int answer = APCalendar.dayOfWeek(2, 29, 2022);
        int expect = 2;

        boolean passed = getResults("" + expect, "" + answer, "dayOfWeek(2, 29, 2022)");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>free-response-self-divisor-a</id>
      <title>Free Response - Self Divisor A</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class TestMod
{
    public static void main(String[] args)
    {
        System.out.println(128 % 8);
        System.out.println(128 % 2);
        System.out.println(128 % 1);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

// import java.util.regex.*;
/* Do NOT change Main or CodeTestHelper.java. */
public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "0\n0\n0\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class TestSelfDivisor
{
    public static void main(String[] args)
    {
        System.out.println(26 % 6);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

// import java.util.regex.*;
/* Do NOT change Main or CodeTestHelper.java. */
public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "2\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class TestDigits
{
    public static void main(String[] args)
    {
        System.out.println(128 % 10);
        System.out.println(128 / 10);
        System.out.println(12 % 10);
        System.out.println(12 / 10);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

// import java.util.regex.*;
/* Do NOT change Main or CodeTestHelper.java. */
public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "8\n12\n2\n1\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.29.1.3.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_frsda_1" data-multipleanswers="false">
                <div class="para" id="frsda_1-1-1">4-11-4: Which loop should you use to loop through all the digits of the number?</div>
                <li data-component="answer" id="csawesome2_2_frsda_1_opt_a">
                  <div class="para" id="frsda_1-2-1-1-1">for</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frsda_1_opt_a">
                  <div class="para" id="frsda_1-2-1-2-1">Use a for loop when you know how many times a loop needs to execute.  Do you know that here?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frsda_1_opt_b">
                  <div class="para" id="frsda_1-2-2-1-1">for each</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frsda_1_opt_b">
                  <div class="para" id="frsda_1-2-2-2-1">Use a for each loop when you want to loop through all values in a collection.  Do we have a collection here?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frsda_1_opt_c" data-correct="">
                  <div class="para" id="frsda_1-2-3-1-1">while</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frsda_1_opt_c">
                  <div class="para" id="frsda_1-2-3-2-1">Use a while loop when you don’t know how many times a loop needs to execute.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2.29.1.3.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_frsda_2" data-multipleanswers="false">
                <div class="para" id="frsda_2-1-1">4-11-5: What should you use as the test in the while loop?</div>
                <li data-component="answer" id="csawesome2_2_frsda_2_opt_a">
                  <div class="para" id="frsda_2-2-1-1-1">Loop while the current number is greater than 10.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frsda_2_opt_a">
                  <div class="para" id="frsda_2-2-1-2-1">What happens if the number is 10 in this case?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frsda_2_opt_b">
                  <div class="para" id="frsda_2-2-2-1-1">Loop while the current number is greater than 9.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frsda_2_opt_b">
                  <div class="para" id="frsda_2-2-2-2-1">Does this actually test the first digit in a number?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frsda_2_opt_c" data-correct="">
                  <div class="para" id="frsda_2-2-3-1-1">Loop while the current number is greater than 0.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frsda_2_opt_c">
                  <div class="para" id="frsda_2-2-3-2-1">We will know that we are out of digits when x / 10 is 0. This wouldn’t work if the number passed to the method was 0 originally, but were told in the precondition that number is greater than 0 to start.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.29.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcfrsda5">
                <div class="ac_question" id="csawesome2_2_lcfrsda5_question">
                  <div class="para" id="lcfrsda5-1-1">FRQ SelfDivisor: Write the method isSelfDivisor.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcfrsda5_editor" data-question_label="" data-codelens="true">public class SelfDivisor
{

    /**
     * @param number the number to be tested Precondition: number &gt; 0
     * @return true if every decimal digit of number is a divisor of number; false
     *     otherwise
     */
    public static boolean isSelfDivisor(int number)
    {
        // part A
    }

    /****************/

    public static void main(String[] args)
    {
        System.out.println("128: " + isSelfDivisor(128));
        System.out.println("26: " + isSelfDivisor(26));
        System.out.println("120: " + isSelfDivisor(120));
        System.out.println("102: " + isSelfDivisor(102));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

// import java.util.regex.*;
/* Do NOT change Main or CodeTestHelper.java. */
public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "128: true\n26: false\n120: false\n102: false\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testIfLoop()
    {
        String code = getCode();
        boolean passed = code.contains("if") &amp;&amp; (code.contains("for") || code.contains("while"));
        getResults(
                "Expected loop, if, %", "" + passed, "Checking for loop and if statement", passed);
        assertTrue(passed);
    }

    @Test
    public void testModDiv()
    {
        String code = getCode();
        boolean passed = code.contains("%") &amp;&amp; code.contains("/");
        getResults("Expected % and /", "" + passed, "Checking for use of % and /", passed);
        assertTrue(passed);
    }

    @Test
    public void testFunction1()
    {
        Object[] args = {128};
        String output = getMethodOutput("isSelfDivisor", args);
        String expect = "true";
        boolean passed = getResults(expect, output, "isSelfDivisor(128)");
        assertTrue(passed);
    }

    @Test
    public void testFunction2()
    {
        Object[] args = {26};
        String output = getMethodOutput("isSelfDivisor", args);
        String expect = "false";
        boolean passed = getResults(expect, output, "isSelfDivisor(26)");
        assertTrue(passed);
    }

    @Test
    public void testFunction3()
    {
        Object[] args = {120};
        String output = getMethodOutput("isSelfDivisor", args);
        String expect = "false";
        boolean passed = getResults(expect, output, "isSelfDivisor(120)");
        assertTrue(passed);
    }

    @Test
    public void testFunction4()
    {
        Object[] args = {102};
        String output = getMethodOutput("isSelfDivisor", args);
        String expect = "false";

        boolean passed = getResults(expect, output, "isSelfDivisor(102)");
        assertTrue(passed);
    }

    @Test
    public void testFunction5()
    {
        Object[] args = {124};
        String output = getMethodOutput("isSelfDivisor", args);
        String expect = "true";

        boolean passed = getResults(expect, output, "isSelfDivisor(124)");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>free-response-string-scramble-a</id>
      <title>Free Response - String Scramble A</title>
      <question>
        <label>Exercise 2.30.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcfrssa3">
                <div class="ac_question" id="csawesome2_2_lcfrssa3_question">
                  <div class="para" id="lcfrssa3-1-1">The following shows what to do to solve the example with “ABRACADABRA”.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcfrssa3_editor" data-question_label="" data-codelens="true">public class TestABRACADABRA
{
    public static void main(String[] args)
    {
        System.out.println("ABRACADABRA".substring(0, 1)); // get the A
        System.out.println("ABRACADABRA".substring(1, 2)); // get the B
        // compare the A and B and swap them which results in BARACADABRA
        System.out.println("ABRACADABRA".substring(2, 3)); // get the R
        System.out.println("ABRACADABRA".substring(3, 4)); // get the A
        // compare the R and A and do nothing
        System.out.println("ABRACADABRA".substring(3, 4)); // get the A
        System.out.println("ABRACADABRA".substring(4, 5)); // get the C
        // compare the A and C and swap them which results in BARCAADABRA
        System.out.println("ABRACADABRA".substring(5, 6)); // get the A
        System.out.println("ABRACADABRA".substring(6, 7)); // get the D
        // compare the A and D and swap them which results in BARCADAABRA
        System.out.println("ABRACADABRA".substring(7, 8)); // get the A
        System.out.println("ABRACADABRA".substring(8, 9)); // get the B
        // compare the A and B and swap them which results in BARCADABARA
        System.out.println("ABRACADABRA".substring(9, 10)); // get the R
        System.out.println("ABRACADABRA".substring(10, 11)); // get the A
        // compare R and A and do nothing
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "A\nB\nR\nA\nA\nC\nA\nD\nA\nB\nR\nA\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.30.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcfrssa4">
                <div class="ac_question" id="csawesome2_2_lcfrssa4_question">
                  <div class="para" id="lcfrssa4-1-1">The following shows what to do to solve the example with “WHOA”.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcfrssa4_editor" data-question_label="" data-codelens="true">public class TestWHOA
{
    public static void main(String[] args)
    {
        System.out.println("WHOA".substring(0, 1)); // get the W
        System.out.println(
                "WHOA"
                        .substring(
                                1,
                                2)); // get the H - compare the W and H and do
                                     // nothing
        System.out.println("WHOA".substring(1, 2)); // get the H
        System.out.println(
                "WHOA"
                        .substring(
                                2,
                                3)); // get the O - compare the H and O and do
                                     // nothing
        System.out.println("WHOA".substring(2, 3)); // get the O
        System.out.println(
                "WHOA"
                        .substring(
                                3,
                                4)); // get the A - compare the O and A and do
                                     // nothing
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "W\nH\nH\nO\nO\nA\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 2.30.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcfrssa5">
                <div class="ac_question" id="csawesome2_2_lcfrssa5_question">
                  <div class="para" id="lcfrssa5-1-1">FRQ StringScramble A: Write the method scrambleWord.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcfrssa5_editor" data-question_label="" data-codelens="true">public class ScrambledStrings
{
    /********************** Part (a) *********************/

    /**
     * Scrambles a given word.
     *
     * @param word the word to be scrambled
     * @return the scrambled word (possibly equal to word) Precondition: word is
     *     either an empty string or contains only uppercase letters.
     *     Postcondition: the string returned was created from word as follows: -
     *     the word was scrambled, beginning at the first letter and continuing
     *     from left to right - two consecutive letters consisting of "A" followed
     *     by a letter that was not "A" were swapped - letters were swapped at most
     *     once
     */
    public static String scrambleWord(String word)
    {
        /* to be implemented in part a */
    }

    /********************** Test *********************/
    public static void main(String[] args)
    {
        System.out.println("\nTesting Part (a):\n");

        String[] words =
        {
            "TAN", "ABRACADABRA", "WHOA", "AARDVARK", "EGGS", "A", ""
        };

        for (String word : words)
        {
            System.out.println(word + " becomes " + scrambleWord(word));
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "Testing Part (a):\n"
                    + "TAN becomes TNA\n"
                    + "ABRACADABRA becomes BARCADABARA\n"
                    + "WHOA becomes WHOA\n"
                    + "AARDVARK becomes ARADVRAK\n"
                    + "EGGS becomes EGGS\n"
                    + "A becomes A\n"
                    + " becomes \n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testIfLoop()
    {
        String code = getCode();
        boolean passed = code.contains("if") &amp;&amp; (code.contains("for") || code.contains("while"));
        getResults(
                "Expected loop and if", "" + passed, "Checking for loop and if statement", passed);
        assertTrue(passed);
    }

    @Test
    public void testCodeContains()
    {
        String target = ".substring(";
        boolean passed = checkCodeContains("substring method", target);
        assertTrue(passed);
    }

    @Test
    public void testFunction1()
    {
        Object[] args = {"TAN"};
        String output = getMethodOutput("scrambleWord", args);
        String expect = "TNA";

        boolean passed = getResults(expect, output, "scrambleWord(\"TAN\")");
        assertTrue(passed);
    }

    @Test
    public void testFunction2()
    {
        Object[] args = {"WHOA"};
        String output = getMethodOutput("scrambleWord", args);
        String expect = "WHOA";

        boolean passed = getResults(expect, output, "scrambleWord(\"WHOA\")");
        assertTrue(passed);
    }

    @Test
    public void testFunction3()
    {
        Object[] args = {"AARDVARK"};
        String output = getMethodOutput("scrambleWord", args);
        String expect = "ARADVRAK";

        boolean passed = getResults(expect, output, "scrambleWord(\"AARDVARK\")");
        assertTrue(passed);
    }

    @Test
    public void testFunction4()
    {
        Object[] args = {"AMAZING"};
        String output = getMethodOutput("scrambleWord", args);
        String expect = "MAZAING";

        boolean passed = getResults(expect, output, "scrambleWord(\"AMAZING\")");
        assertTrue(passed);
    }

    @Test
    public void testFunction5()
    {
        Object[] args = {"ABRACADABRA"};
        String output = getMethodOutput("scrambleWord", args);
        String expect = "BARCADABARA";

        boolean passed = getResults(expect, output, "scrambleWord(\"ABRACADABRA\")");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: HlVdo9Nij44</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="HlVdo9Nij44" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>consumer-review-lab</id>
      <title>Consumer Review Lab</title>
      <question>
        <label>Exercise 2.31.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_staticMethodCall" data-multipleanswers="false">
                <div class="para" id="staticMethodCall-1-1">4-13-1: Which of the following correctly calls the method sentimentVal?</div>
                <li data-component="answer" id="csawesome2_2_staticMethodCall_opt_a">
                  <div class="para" id="staticMethodCall-2-1-1-1">double value = sentimentVal();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_staticMethodCall_opt_a">
                  <div class="para" id="staticMethodCall-2-1-2-1">sentimentVal takes a String argument and is in the class Review.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_staticMethodCall_opt_b">
                  <div class="para" id="staticMethodCall-2-2-1-1">sentimentVal("terrible");</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_staticMethodCall_opt_b">
                  <div class="para" id="staticMethodCall-2-2-2-1">sentimentVal returns a value and is in the class Review.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_staticMethodCall_opt_c">
                  <div class="para" id="staticMethodCall-2-3-1-1">word.sentimentVal("terrible");</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_staticMethodCall_opt_c">
                  <div class="para" id="staticMethodCall-2-3-2-1">sentimentVal returns a value and is a static method in the class Review.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_staticMethodCall_opt_d" data-correct="">
                  <div class="para" id="staticMethodCall-2-4-1-1">double value = Review.sentimentVal("terrible");</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_staticMethodCall_opt_d">
                  <div class="para" id="staticMethodCall-2-4-2-1">That’s right1 sentimentVal takes a String argument and returns a double value and is a static method that can be called with the class name Review.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_staticMethodCall_opt_e">
                  <div class="para" id="staticMethodCall-2-5-1-1">int value = sentimentVal("terrible");</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_staticMethodCall_opt_e">
                  <div class="para" id="staticMethodCall-2-5-2-1">sentimentVal returns a double value, not int, and it’s a static method in the class Review.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
  </chapter>
  <chapter>
    <id>csawesome2-7</id>
    <title>Class Creation</title>
    <subchapter>
      <id>abstraction-and-program-design</id>
      <title>Abstraction and Program Design</title>
    </subchapter>
    <subchapter>
      <id>social-impacts-of-cs</id>
      <title>Social Impacts of CS</title>
      <question>
        <label>Video: TWWsW1w-BVo</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="TWWsW1w-BVo" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>anatomy-of-a-java-class</id>
      <title>Anatomy of a Java Class</title>
      <question>
        <label>Video: LfSaSANJPLg</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="LfSaSANJPLg" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.3.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_PersonClass">
                <div class="ac_question" id="csawesome2_2_PersonClass_question">
                  <div class="para" id="PersonClass-1-1">Run the following class. Try changing the Person p2 object in main to your name. Click on the Show CodeLens button and then Next to step through the code.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_PersonClass_editor" data-question_label="" data-codelens="true">public class Person
{
    // instance variables
    private String name;
    private String email;
    private String phoneNumber;

    // constructor: construct a Person copying in the data into the instance
    // variables
    public Person(String initName, String initEmail, String initPhone)
    {
        name = initName;
        email = initEmail;
        phoneNumber = initPhone;
    }

    // Print all the data for a person
    public void print()
    {
        System.out.println("Name: " + name);
        System.out.println("Email: " + email);
        System.out.println("Phone Number: " + phoneNumber);
    }

    // main method for testing
    public static void main(String[] args)
    {
        // call the constructor to create a new person
        Person p1 = new Person("Sana", "sana@gmail.com", "123-456-7890");
        // call p1's print method
        p1.print();
        Person p2 = new Person("Jean", "jean@gmail.com", "404 899-9955");
        p2.print();
    }
}
====
// Test for Lesson 5.1.0 - Person class - should pass if/when they run code
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "Name: Sana\n"
                    + "Email: sana@gmail.com\n"
                    + "Phone Number: 123-456-7890\n"
                    + "Name: Jean\n"
                    + "Email: jean@gmail.com\n"
                    + "Phone Number: 404 899-9955";

        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.3.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_name_instance_variables">
                <span data-question="">
                  <div class="para" id="name_instance_variables-1-1">Click on all the instance  variable declarations in the following class</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="name_instance_variables-2-1">Remember, instance  variables are private and are declared after the class declaration.</div>
                </span>
                <pre><span data-incorrect="">public class Name</span>
<span data-incorrect="">{</span>
    <span data-correct="">private String first;</span>
    <span data-correct="">private String last;</span>

    <span data-incorrect="">public Name(String theFirst, String theLast)</span>
    <span data-incorrect="">{</span>
        <span data-incorrect="">first = theFirst;</span>
        <span data-incorrect="">last = theLast;</span>
     <span data-incorrect="">}</span>

     <span data-incorrect="">public void setFirst(String theFirst)</span>
     <span data-incorrect="">{</span>
        <span data-incorrect="">first = theFirst;</span>
     <span data-incorrect="">}</span>

     <span data-incorrect="">public void setLast(String theLast)</span>
     <span data-incorrect="">{</span>
        <span data-incorrect="">last = theLast;</span>
     <span data-incorrect="">}</span>

<span data-incorrect="">}</span>
</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.3.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_name_methods">
                <span data-question="">
                  <div class="para" id="name_methods-1-1">Click on all the lines of code that are part of a method in the following class.</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="name_methods-2-1">Methods follow the constructor.  They include a return type in case they returns something from the method.</div>
                </span>
                <pre><span data-incorrect="">public class Name</span>
<span data-incorrect="">{</span>
    <span data-incorrect="">private String first;</span>
    <span data-incorrect="">private String last;</span>

    <span data-incorrect="">public Name(String theFirst, String theLast)</span>
    <span data-incorrect="">{</span>
        <span data-incorrect="">first = theFirst;</span>
        <span data-incorrect="">last = theLast;</span>
    <span data-incorrect="">}</span>

    <span data-correct="">public void setFirst(String theFirst)</span>
    <span data-correct="">{</span>
        <span data-correct="">first = theFirst;</span>
    <span data-correct="">}</span>

    <span data-correct="">public void setLast(String theLast)</span>
    <span data-correct="">{</span>
        <span data-correct="">last = theLast;</span>
    <span data-correct="">}</span>

<span data-incorrect="">}</span>
</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.3.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-5-1-Riddle-Class">
                <div class="ac_question" id="csawesome2_2_challenge-5-1-Riddle-Class_question">
                  <div class="para" id="challenge-5-1-Riddle-Class-1-1">Complete the Riddle class below and complete the main method to construct 2 Riddle objects and call their printQuestion() and printAnswer() methods.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-5-1-Riddle-Class_editor" data-question_label="" data-codelens="true">public class Riddle
{
    // write 2 instance variables for Riddle's question and answer: private type
    // variableName;

    // constructor
    public Riddle(String initQuestion, String initAnswer)
    {
        // set the instance variables to the init parameter variables

    }

    // Print riddle question
    public void printQuestion()
    {
        // print out the riddle question with System.out.println

    }

    // Print riddle answer
    public void printAnswer()
    {
        // print out the riddle answer with System.out.println

    }

    // main method for testing
    public static void main(String[] args)
    {
        // call the Riddle constructor to create 2 new Riddle objects
        // with the arguments for the riddle question and answer.

        // call the riddle objects' printQuestion() and printAnswer methods

    }
}
====
// Test Code for Lesson 5.1.5 - Riddle
// @author Kate McDonnell
// Test Code for Lesson 5.1.5 - Riddle
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Riddle"); // class name / location of main

        Object[] values = new Object[] {"Question", "Answer"};
        setDefaultValues(values);
    }

    @Test
    public void testPrintQuestion()
    {
        String output = getMethodOutput("printQuestion");
        String expect = "Question";

        boolean passed = getResults(expect, output, "Checking method printQuestion()");
        assertTrue(passed);
    }

    @Test
    public void testPrintAnswer()
    {
        String output = getMethodOutput("printAnswer");
        String expect = "Answer";

        boolean passed = getResults(expect, output, "Checking method printAnswer()");
        assertTrue(passed);
    }

    @Test
    public void testCallConstructors()
    {
        String code = getCodeWithoutComments();
        String search = "= new Riddle(";

        int num = countOccurences(code, search);

        String expect = search + "...) x 2";
        String actual = search + "...) x " + num;

        boolean passed = getResults(expect, actual, "Checking that you made 2 Riddle objects");
        assertTrue(passed);
    }

    @Test
    public void testVariableTypes()
    {
        String varTypes = "String String";
        String output = testInstanceVariableTypes(varTypes.split(" "));

        boolean passed = getResults(varTypes, output, "Checking Instance Variable Type(s)");
        assertTrue(passed);
    }

    @Test
    public void testPrivateVariables()
    {
        String expect = "2 Private";
        String output = testPrivateInstanceVariables();

        boolean passed = getResults(expect, output, "Checking Private Instance Variable(s)");
        assertTrue(passed);
    }

    @Test
    public void testMain()
    {
        String output = getMethodOutput("main");

        String expect = "2+ line(s) of text";
        String actual = " line(s) of text";

        int len = output.split("\n").length;

        if (output.length() &gt; 0)
        {
            actual = len + actual;
        }
        else
        {
            actual = output.length() + actual;
        }
        boolean passed = len &gt;= 2;

        getResults(expect, actual, "Checking main method", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.3.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_community-challenge-5-1">
                <div class="ac_question" id="csawesome2_2_community-challenge-5-1_question">
                  <div class="para" id="community-challenge-5-1-1-1">Come up with the class name for your community data-tracking class (it should be a category of people or things, not a specific person or thing) and at least 3 instance variables that are attributes of things in that class.  Your class will not print out anything yet, but it should run without errors.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_community-challenge-5-1_editor" data-question_label="" data-codelens="true">public class          // Add your class name here!
{
    // write 3 instance variables for class: private type variableName;



    public static void main(String[] args)
    {
      // Run your code to check for errors.
      // It will not print anything yet.
      // You will add more in the next lesson.
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testPrivateVariables()
    {
        String expect = "3 Private";
        String output = testPrivateInstanceVariables();
        boolean passed = false;
        if (Integer.parseInt(expect.substring(0, 1)) &lt;= Integer.parseInt(output.substring(0, 1)))
            passed = true;
        passed = getResults(expect, output, "Checking private instance variable(s)", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.3.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-1-1" data-multipleanswers="false"><div class="para" id="AP5-1-1-1-1">5-1-9: Consider the Cat class which will contain a String and an int attribute for a cat’s name and age and a constructor.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Cat
{
    /* missing code */
}
</code></pre></div> <div class="para" id="AP5-1-1-1-3">Which of the following replacements for /* missing code */ is the most appropriate implementation of the class?</div><li data-component="answer" id="csawesome2_2_AP5-1-1_opt_a"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public String name;
public int age;
private Cat(String name, int age)
{ /* implementation not shown */ }
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-1-1_opt_a"><div class="para" id="AP5-1-1-2-1-2-1">Instance variables should be private.</div></li><li data-component="answer" id="csawesome2_2_AP5-1-1_opt_b"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public String name;
private int age;
private Cat(String name, int age)
{ /* implementation not shown */ }
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-1-1_opt_b"><div class="para" id="AP5-1-1-2-2-2-1">Instance variables should be private.</div></li><li data-component="answer" id="csawesome2_2_AP5-1-1_opt_c" data-correct=""><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private String name;
private int age;
public Cat(String name, int age)
{ /* implementation not shown */ }
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-1-1_opt_c"><div class="para" id="AP5-1-1-2-3-2-1">Correct! The instance variables are private and the constructor is public.</div></li><li data-component="answer" id="csawesome2_2_AP5-1-1_opt_d"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public String name;
public int age;
public Cat(String name, int age)
{ /* implementation not shown */ }
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-1-1_opt_d"><div class="para" id="AP5-1-1-2-4-2-1">Instance variables should be private.</div></li><li data-component="answer" id="csawesome2_2_AP5-1-1_opt_e"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private String name;
private int age;
private Cat(String name, int age)
{ /* implementation not shown */ }
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-1-1_opt_e"><div class="para" id="AP5-1-1-2-5-2-1">Constructor should be public.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.3.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-1-2" data-multipleanswers="false"><div class="para" id="AP5-1-2-1-1">5-1-10: Consider the Party class below which will contain three int attributes for numOfPeople, volumeOfMusic, and numOfBoxesOfPizza, a constructor, and a startParty method. The startParty method is intended to be accessed outside the class.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Party
{
    /* missing code */
}
</code></pre></div> <div class="para" id="AP5-1-2-1-3">Which of the following replacements for /* missing code */ is the most appropriate implementation of the class?</div><li data-component="answer" id="csawesome2_2_AP5-1-2_opt_a"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private int numOfPeople;
private int volumeOfMusic;
private int numOfBoxesOfPizza;
public Party()
{ /* implementation not shown */ }
private void startParty()
{ /* implementation not shown */ }
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-1-2_opt_a"><div class="para" id="AP5-1-2-2-1-2-1">Method startParty() should be public.</div></li><li data-component="answer" id="csawesome2_2_AP5-1-2_opt_b" data-correct=""><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private int numOfPeople;
private int volumeOfMusic;
private int numOfBoxesOfPizza;
public Party()
{ /* implementation not shown */ }
public void startParty()
{ /* implementation not shown */ }
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-1-2_opt_b"><div class="para" id="AP5-1-2-2-2-2-1">Correct, instance variables should be private and the methods should be public.</div></li><li data-component="answer" id="csawesome2_2_AP5-1-2_opt_c"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public int numOfPeople;
public int volumeOfMusic;
public int numOfBoxesOfPizza;
public Party()
{ /* implementation not shown */ }
public void startParty()
{ /* implementation not shown */ }
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-1-2_opt_c"><div class="para" id="AP5-1-2-2-3-2-1">Instance variables should be private.</div></li><li data-component="answer" id="csawesome2_2_AP5-1-2_opt_d"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private int numOfPeople;
private int volumeOfMusic;
private int numOfBoxesOfPizza;
private Party()
{ /* implementation not shown */ }
private void startParty()
{ /* implementation not shown */ }
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-1-2_opt_d"><div class="para" id="AP5-1-2-2-4-2-1">Methods should be public.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>writing-constructors</id>
      <title>Writing Constructors</title>
      <question>
        <label>Exercise 3.4.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_name_constructor">
                <span data-question="">
                  <div class="para" id="name_constructor-1-1">Click on all the lines of code that are part of constructors in the following class.</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="name_constructor-2-1">Constructors are public and have the same name as the class.</div>
                </span>
                <pre><span data-incorrect="">public class Name</span>
<span data-incorrect="">{</span>
    <span data-incorrect="">private String first;</span>
    <span data-incorrect="">private String last;</span>

    <span data-correct="">public Name(String theFirst, String theLast)</span>
    <span data-correct="">{</span>
        <span data-correct="">first = theFirst;</span>
        <span data-correct="">last = theLast;</span>
    <span data-correct="">}</span>

    <span data-incorrect="">public void setFirst(String theFirst)</span>
    <span data-incorrect="">{</span>
        <span data-incorrect="">first = theFirst;</span>
    <span data-incorrect="">}</span>

    <span data-incorrect="">public void setLast(String theLast)</span>
    <span data-incorrect="">{</span>
        <span data-incorrect="">last = theLast;</span>
    <span data-incorrect="">}</span>

<span data-incorrect="">}</span>
</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.4.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsse_5" data-multipleanswers="false">
                <div class="para" id="qsse_5-1-1">5-2-2: What best describes the purpose of a class’s constructor?</div>
                <li data-component="answer" id="csawesome2_2_qsse_5_opt_a">
                  <div class="para" id="qsse_5-2-1-1-1">Determines the amount of space needed for an object and creates the object</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qsse_5_opt_a">
                  <div class="para" id="qsse_5-2-1-2-1">The object is already created before the constructor is called but the constructor initializes the instance variables.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qsse_5_opt_b">
                  <div class="para" id="qsse_5-2-2-1-1">Names the new object</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qsse_5_opt_b">
                  <div class="para" id="qsse_5-2-2-2-1">Constructors do not name the object.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qsse_5_opt_c">
                  <div class="para" id="qsse_5-2-3-1-1">Return to free storage all the memory used by this instance of the class.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qsse_5_opt_c">
                  <div class="para" id="qsse_5-2-3-2-1">Constructors do not free any memory. In Java the freeing of memory is done when the object is no longer referenced.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qsse_5_opt_d" data-correct="">
                  <div class="para" id="qsse_5-2-4-1-1">Initialize the instance variables in the object</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qsse_5_opt_d">
                  <div class="para" id="qsse_5-2-4-2-1">A constructor  initializes the instance variables to their default values or in the case of a parameterized constructor, to the values passed in to the constructor.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.4.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_class-Fraction">
                <div class="ac_question" id="csawesome2_2_class-Fraction_question">
                  <div class="para" id="class-Fraction-1-1">The following class defines a <code class="code-inline tex2jax_ignore">Fraction</code> with the instance variables <code class="code-inline tex2jax_ignore">numerator</code> and <code class="code-inline tex2jax_ignore">denominator</code>. It uses 2 constructors. Note that the no-argument constructor sets the default instance variable values to 1 rather than 0 since a fraction with 0 in the denominator is not valid. Try to guess what it will print before you run it. Hint! Remember to start with the <code class="code-inline tex2jax_ignore">main</code> method! You can also view it in the Java visualizer by clicking on the Show CodeLens button below.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_class-Fraction_editor" data-question_label="" data-codelens="true">public class Fraction
{
    //  instance variables
    private int numerator;
    private int denominator;

    // constructor: set instance variables to default values
    public Fraction()
    {
        numerator = 1;
        denominator = 1;
    }

    // constructor: set instance variables to init parameters
    public Fraction(int initNumerator, int initDenominator)
    {
        numerator = initNumerator;
        denominator = initDenominator;
    }

    // Print fraction
    public void print()
    {
        System.out.println(numerator + "/" + denominator);
    }

    // main method for testing
    public static void main(String[] args)
    {
        Fraction f1 = new Fraction();
        Fraction f2 = new Fraction(1, 2);
        // What will these print out?
        f1.print();
        f2.print();
    }
}
====
// Test Code for Lesson 5.2.0.1 - Fraction
import static org.junit.Assert.*;

import org.junit.Test;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "1/1\n1/2";

        boolean passed = getResults(expect, output, "Running main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.4.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_class-Car">
                <div class="ac_question" id="csawesome2_2_class-Car_question">
                  <div class="para" id="class-Car-1-1">The following class defines a Car with the instance variables model and year, for example a Honda 2010 car. However, some of the code is missing. First, fill in the code to create a <code class="code-inline tex2jax_ignore">Car</code> constructor. Then, fill in the code to call the constructor in the main method to create 2 <code class="code-inline tex2jax_ignore">Car</code> objects. The first car should be a 2023 Ford and the second car should be a 2010 Honda. Run your program and make sure it works and prints out the information for both cars.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_class-Car_editor" data-question_label="" data-codelens="true">public class Car
{
   //  instance variables
   private String model;
   private int year;

   // constructor: set instance variables to init parameters
   public Car(String initModel, int initYear)
   {
       // 1. set the instance variables to the init parameter variables


   }

   // Print Car info
   public void print()
   {
     System.out.println("Car model: " + model);
     System.out.println("Car year: " + year);
   }

   // main method for testing
   public static void main(String[] args)
   {
       // 2. Call the constructor to create 2 new Car objects with different
       // values The first car should be a 2023 Ford and the second car
       // should be a 2010 Honda.

       Car car1 =
       Car car2 =

       car1.print();
       car2.print();
   }
}
====
// Test Code for Lesson 5.2.0 - Car
import static org.junit.Assert.*;

import org.junit.Test;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Car model: Ford\nCar year: 2023\nCar model: Honda\nCar year: 2010";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.4.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-5-2-Student-class">
                <div class="ac_question" id="csawesome2_2_challenge-5-2-Student-class_question">
                  <div class="para" id="challenge-5-2-Student-class-1-1">Create a class Student with 4 instance variables, a constructor, and a print method. Write a main method that creates 2 Student objects with the constructor and calls their print() method.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-5-2-Student-class_editor" data-question_label="" data-codelens="true">/**
 * class Student with 4 instance variables, a constructor, a print method, and a
 * main method to test them.
 */
public class Student
{
    // Write 4 instance variables

    // Write a constructor with 4 parameters to initialize all of the instance
    // variables

    // Write a print method that prints all the instance variables
    public void print() {}

    // main method
    public static void main(String[] args)
    {
        // Construct 2 Student objects using the constructor with different values

        // call their print() methods

    }
}
====
// Test Code for Lesson 5.2.1 - Challenge - Student
import static org.junit.Assert.*;

import org.junit.Test;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Student");

        Object[] values = new Object[] {"Name", 0};
        setDefaultValues(values);
    }

    @Test
    public void testCallConstructors()
    {
        String code = getCodeWithoutComments();
        String search = "= new Student(";

        int num = countOccurences(code, search);

        String expect = search + "...) x 2";
        String actual = search + "...) x " + num;

        boolean passed = getResults(expect, actual, "Checking that you made 2 Student objects");
        assertTrue(passed);
    }

    @Test
    public void testConstructors()
    {
        String code = getCodeWithoutComments();
        String search = "public Student(";

        int num = countOccurences(code, search);

        String expect = search + "...) x 1";
        String actual = search + "...) x " + num;

        boolean passed = getResults(expect, actual, "Checking that you made a constructor");
        assertTrue(passed);
    }

    @Test
    public void testPrint()
    {
        String code = getCodeWithoutComments();
        String search = ".print()";

        int num = countOccurences(code, search);

        String expect = search + " x 2";
        String actual = search + " x " + num;

        boolean passed = getResults(expect, actual, "Checking that you called print 2 times");
        assertTrue(passed);
    }

    @Test
    public void testPrivateVariables()
    {
        String expect = "4 Private";
        String output = testPrivateInstanceVariables();

        boolean passed = getResults(expect, output, "Checking for 4 Private Instance Variable(s)");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.4.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_community-challenge-5-2">
                <div class="ac_question" id="csawesome2_2_community-challenge-5-2_question">
                  <div class="para" id="community-challenge-5-2-1-1">Copy your class with its 3 instance variables from <a class="external" href="https://runestone.academy/ns/books/published/csawesome/Unit5-Writing-Classes/topic-5-1-parts-of-class.html#groupwork-design-a-class-for-your-community" target="_blank">Lesson 5.1 Community Challenge</a><details class="ptx-footnote" aria-live="polite" id="community-challenge-5-2-1-1-2"><summary class="ptx-footnote__number" title="Footnote 3.4.2"><sup> 2 </sup></summary><div class="ptx-footnote__contents" id="community-challenge-5-2-1-1-2"><code class="code-inline tex2jax_ignore">https://runestone.academy/ns/books/published/csawesome/Unit5-Writing-Classes/topic-5-1-parts-of-class.html#groupwork-design-a-class-for-your-community</code></div></details>. Add a constructor with 3 parameters to set all of the instance variables to the given parameters. Write a print() method that uses System.out.println to print out all the instance variables. Write a main method that constructs at least 2 objects of your class using the constructors and then calls their print() methods.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_community-challenge-5-2_editor" data-question_label="" data-codelens="true">public class          // Add your class name here!
{
    // 1. copy in your instance variables for class from the last lesson

    // 2. Add a constructor with 3 parameters to set all of the instance variables to the given parameters.


    // 3. Write a print() method that uses System.out.println to print out all the instance variables.

    // 4. Write a main method that constructs at least 2 objects of your class
    // using the constructor and then calls their print() methods.
    public static void main(String[] args)
    {
       // Construct 2 objects of your class to test the constructors


       // call the objects print() methods

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testPrivateVariables()
    {
        String expect = "3 Private";
        String output = testPrivateInstanceVariables();
        boolean passed = false;
        if (Integer.parseInt(expect.substring(0, 1)) &lt;= Integer.parseInt(output.substring(0, 1)))
            passed = true;
        passed = getResults(expect, output, "Checking private instance variable(s)", passed);
        assertTrue(passed);
    }

    /* No longer required
    @Test
    public void testDefaultConstructor()
    {
        String output = checkDefaultConstructor();
        String expect = "pass";

        boolean passed = getResults(expect, output, "Checking default constructor");
        assertTrue(passed);
    }
    */

    @Test
    public void testConstructor3()
    {
        String output = checkConstructor(3);
        String expect = "pass";

        boolean passed = getResults(expect, output, "Checking constructor with 3 parameters");
        assertTrue(passed);
    }

    @Test
    public void testPrint()
    {
        String output = getMethodOutput("print");
        String expect = "More than 15 characters";
        String actual = " than 15 characters";

        if (output.length() &lt; 15)
        {
            actual = "Less" + actual;
        }
        else
        {
            actual = "More" + actual;
        }
        boolean passed = getResults(expect, actual, "Checking print method");
        assertTrue(passed);
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main"); // .split("\n");
        String expect = "3+ line(s) of text";
        String actual = " line(s) of text";
        int len = output.split("\n").length;

        if (output.length() &gt; 0)
        {
            actual = len + actual;
        }
        else
        {
            actual = output.length() + actual;
        }
        boolean passed = len &gt;= 3;

        getResults(expect, actual, "Checking output", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.4.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-2-1" data-multipleanswers="false"><div class="para" id="AP5-2-1-1-1">5-2-7: Consider the definition of the Cat class below. The class uses the instance variable isSenior to indicate whether a cat is old enough to be considered a senior cat or not.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Cat
{
    private String name;
    private int age;
    private boolean isSenior;

    public Cat(String n, int a)
    {
        name = n;
        age = a;
        if (age &gt;= 10)
        {
            isSenior = true;
        }
        else
        {
            isSenior = false;
        }
    }
}
</code></pre></div> <div class="para" id="AP5-2-1-1-3">Which of the following statements will create a Cat object that represents a cat that is considered a senior cat?</div><li data-component="answer" id="csawesome2_2_AP5-2-1_opt_a"><div class="para" id="AP5-2-1-2-1-1-1">Cat c = new Cat (“Oliver”, 7);</div></li><li data-component="feedback" id="csawesome2_2_AP5-2-1_opt_a"><div class="para" id="AP5-2-1-2-1-2-1">The age 7 is less than 10, so this cat would not be considered a senior cat.</div></li><li data-component="answer" id="csawesome2_2_AP5-2-1_opt_b"><div class="para" id="AP5-2-1-2-2-1-1">Cat c = new Cat (“Max”, “15”);</div></li><li data-component="feedback" id="csawesome2_2_AP5-2-1_opt_b"><div class="para" id="AP5-2-1-2-2-2-1">An integer should be passed in as the second parameter, not a string.</div></li><li data-component="answer" id="csawesome2_2_AP5-2-1_opt_c"><div class="para" id="AP5-2-1-2-3-1-1">Cat c = new Cat (“Spots”, true);</div></li><li data-component="feedback" id="csawesome2_2_AP5-2-1_opt_c"><div class="para" id="AP5-2-1-2-3-2-1">An integer should be passed in as the second parameter, not a boolean.</div></li><li data-component="answer" id="csawesome2_2_AP5-2-1_opt_d" data-correct=""><div class="para" id="AP5-2-1-2-4-1-1">Cat c = new Cat (“Whiskers”, 10);</div></li><li data-component="feedback" id="csawesome2_2_AP5-2-1_opt_d"><div class="para" id="AP5-2-1-2-4-2-1">Correct!</div></li><li data-component="answer" id="csawesome2_2_AP5-2-1_opt_e"><div class="para" id="AP5-2-1-2-5-1-1">Cat c = new Cat (“Bella”, isSenior);</div></li><li data-component="feedback" id="csawesome2_2_AP5-2-1_opt_e"><div class="para" id="AP5-2-1-2-5-2-1">An integer should be passed in as the second parameter and isSenior would be undefined outside of the class.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.4.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-2-2" data-multipleanswers="false"><div class="para" id="AP5-2-2-1-1">5-2-8: Consider the following class definition. Each object of the class Cat will store the cat’s name as name, the cat’s age as age, and the number of kittens the cat has as kittens. Which of the following code segments, found in a class other than Cat, can be used to create a cat that is 5 years old with no kittens?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Cat
{
    private String name;
    private int age;
    private int kittens;

    public Cat(String n, int a, int k)
    {
        name = n;
        age = a;
        kittens = k;
    }
    public Cat(String n, int a)
    {
        name = n;
        age = a;
        kittens = 0;
    }
    /* Other methods not shown */
}

I.   Cat c = new Cat("Sprinkles", 5, 0);
II.  Cat c = new Cat("Lucy", 0, 5);
III. Cat c = new Cat("Luna", 5);
</code></pre></div><li data-component="answer" id="csawesome2_2_AP5-2-2_opt_a"><div class="para" id="AP5-2-2-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_AP5-2-2_opt_a"><div class="para" id="AP5-2-2-2-1-2-1">Option III can also create a correct Cat instance.</div></li><li data-component="answer" id="csawesome2_2_AP5-2-2_opt_b"><div class="para" id="AP5-2-2-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_AP5-2-2_opt_b"><div class="para" id="AP5-2-2-2-2-2-1">Option II will create a cat that is 0 years old with 5 kittens.</div></li><li data-component="answer" id="csawesome2_2_AP5-2-2_opt_c"><div class="para" id="AP5-2-2-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_AP5-2-2_opt_c"><div class="para" id="AP5-2-2-2-3-2-1">Option I can also create a correct Cat instance.</div></li><li data-component="answer" id="csawesome2_2_AP5-2-2_opt_d" data-correct=""><div class="para" id="AP5-2-2-2-4-1-1">I and III only</div></li><li data-component="feedback" id="csawesome2_2_AP5-2-2_opt_d"><div class="para" id="AP5-2-2-2-4-2-1">Good job!</div></li><li data-component="answer" id="csawesome2_2_AP5-2-2_opt_e"><div class="para" id="AP5-2-2-2-5-1-1">I, II and III</div></li><li data-component="feedback" id="csawesome2_2_AP5-2-2_opt_e"><div class="para" id="AP5-2-2-2-5-2-1">Option II will create a cat that is 0 years old with 5 kittens.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.4.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-2-3" data-multipleanswers="false"><div class="para" id="AP5-2-3-1-1">5-2-9: Consider the following class definition.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Cat
{
    private String color;
    private boolean isHungry;
    /* missing constructor */
}
</code></pre></div> <div class="para" id="AP5-2-3-1-3">The following statement appears in a method in a class other than Cat. It is intended to create a new Cat object c with its attributes set to “black” and true. Which of the following can be used to replace  <dfn class="terminology">missing constructor code</dfn> in the class definition so that the object c below is correctly created?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">Cat c = new Cat("black", true);
</code></pre></div><li data-component="answer" id="csawesome2_2_AP5-2-3_opt_a"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public Cat(String c, boolean h)
{
    c = "black";
    h = true;
}
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-2-3_opt_a"><div class="para" id="AP5-2-3-2-1-2-1">The constructor should be changing the instance variables, not the local variables.</div></li><li data-component="answer" id="csawesome2_2_AP5-2-3_opt_b"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public Cat(String c, boolean h)
{
    c = "black";
    h = "true";
}
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-2-3_opt_b"><div class="para" id="AP5-2-3-2-2-2-1">The constructor should be changing the instance variables, not the local variables.</div></li><li data-component="answer" id="csawesome2_2_AP5-2-3_opt_c"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public Cat(String c, boolean h)
{
    c = color;
    h = isHungry;
}
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-2-3_opt_c"><div class="para" id="AP5-2-3-2-3-2-1">The constructor should be changing the instance variables, not the local variables.</div></li><li data-component="answer" id="csawesome2_2_AP5-2-3_opt_d"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public Cat(String c, boolean h)
{
    color = black;
    isHungry = true;
}
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-2-3_opt_d"><div class="para" id="AP5-2-3-2-4-2-1">The constructor should be using  the local variables to set the instance variables.</div></li><li data-component="answer" id="csawesome2_2_AP5-2-3_opt_e" data-correct=""><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public Cat(String c, boolean h)
{
    color = c;
    isHungry = h;
}
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-2-3_opt_e"><div class="para" id="AP5-2-3-2-5-2-1">Correct!</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-7-6</id>
      <title>Accessors / Getters</title>
      <question>
        <label>Exercise 3.5.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_StudentToString">
                <div class="ac_question" id="csawesome2_2_StudentToString_question">
                  <div class="para" id="StudentToString-1-1">See the toString() method in action.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_StudentToString_editor" data-question_label="" data-codelens="true">public class TesterClass
{
    // main method for testing
    public static void main(String[] args)
    {
        Student s1 = new Student("Skyler", "skyler@sky.com", 123456);
        System.out.println(s1);
    }
}

class Student
{
    private String name;
    private String email;
    private int id;

    public Student(String initName, String initEmail, int initId)
    {
        name = initName;
        email = initEmail;
        id = initId;
    }

    // toString() method
    public String toString()
    {
        return id + ": " + name + ", " + email;
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "123456: Skyler, skyler@sky.com";
        boolean passed = getResults(expect, output, "Checking for expected output", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.5.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-5-4-Pet-Class">
                <div class="ac_question" id="csawesome2_2_challenge-5-4-Pet-Class_question">
                  <div class="para" id="challenge-5-4-Pet-Class-1-1">Create a Pet class that keeps track of the name, age, weight, type of animal, and breed for records at an animal clinic.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-5-4-Pet-Class_editor" data-question_label="" data-codelens="true">/**
 * Pet class (complete comments)
 *
 * @author
 * @since
 */
class Pet
{
    // keep track of the name, age, weight, type of animal, and breed of the pet

    // Write a constructor, accessor (get) methods, and a toString method. Use good
    // commenting.

    // Don't forget to complete the main method in the TesterClass below!
}

public class TesterClass
{
    // main method for testing
    public static void main(String[] args)
    {
        // Create 2 Pet objects and test all your methods

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TesterClass");
    }

    @Test
    public void testConstructors()
    {
        changeClass("Pet");
        int count = 0;

        for (int i = 0; i &lt; 6; i++)
        {
            if (checkConstructor(i).equals("pass")) count++;
        }

        boolean passed = count &gt;= 1;

        getResults("2+", "" + count, "Checking for constructor", passed);
        assertTrue(passed);
    }

    @Test
    public void testPrivateVariables()
    {
        changeClass("Pet");
        String expect = "5 Private";
        String output = testPrivateInstanceVariables();

        boolean passed = getResults(expect, output, "Checking Private Instance Variables");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        String code = getCode();
        String target = "public * get*()";

        int num = countOccurencesRegex(code, target);

        boolean passed = num &gt;= 5;

        getResults("5", "" + num, "Checking accessor (get) methods for each variable", passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "public String toString()";
        boolean passed = checkCodeContains("toString() method", target);
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String code = getCode();
        String target = "Pet * = new Pet(";

        int num = countOccurencesRegex(code, target);

        boolean passed = num &gt;= 2;

        getResults("2", "" + num, "Checking main method creates 2 Pet objects", passed);
        assertTrue(passed);
    }

    @Test
    public void testMain()
    {
        String output = getMethodOutput("main");

        String expect = "3+ line(s) of text";
        String actual = " line(s) of text";

        int len = output.split("\n").length;

        if (output.length() &gt; 0)
        {
            actual = len + actual;
        }
        else
        {
            actual = output.length() + actual;
        }
        boolean passed = len &gt;= 3;

        getResults(expect, actual, "Checking main method prints info for 3 Pet objects", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.5.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-4-1" data-multipleanswers="false"><div class="para" id="AP5-4-1-1-1">5-4-4:  Consider the following Party class. The getNumOfPeople method is intended to allow methods in other classes to access a Party object’s numOfPeople instance variable value; however, it does not work as intended. Which of the following best explains why the getNumOfPeople method does NOT work as intended?</div> <blockquote class="blockquote" id="AP5-4-1-1-2"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Party
{
    private int numOfPeople;

    public Party(int num)
    {
        numOfPeople = num;
    }

    private int getNumOfPeople()
    {
        return numOfPeople;
    }
}
</code></pre></div></blockquote><li data-component="answer" id="csawesome2_2_AP5-4-1_opt_a" data-correct=""><div class="para" id="AP5-4-1-2-1-1-1">The getNumOfPeople method should be declared as public.</div></li><li data-component="feedback" id="csawesome2_2_AP5-4-1_opt_a"><div class="para" id="AP5-4-1-2-1-2-1">Correct, accessor methods should be public so they can be accessed from outside the class.</div></li><li data-component="answer" id="csawesome2_2_AP5-4-1_opt_b"><div class="para" id="AP5-4-1-2-2-1-1">The return type of the getNumOfPeople method should be void.</div></li><li data-component="feedback" id="csawesome2_2_AP5-4-1_opt_b"><div class="para" id="AP5-4-1-2-2-2-1">The method return type should stay as int.</div></li><li data-component="answer" id="csawesome2_2_AP5-4-1_opt_c"><div class="para" id="AP5-4-1-2-3-1-1">The getNumOfPeople method should have at least one parameter.</div></li><li data-component="feedback" id="csawesome2_2_AP5-4-1_opt_c"><div class="para" id="AP5-4-1-2-3-2-1">This method should not have any parameters</div></li><li data-component="answer" id="csawesome2_2_AP5-4-1_opt_d"><div class="para" id="AP5-4-1-2-4-1-1">The variable numOfPeople is not declared inside the getNumOfPeople method.</div></li><li data-component="feedback" id="csawesome2_2_AP5-4-1_opt_d"><div class="para" id="AP5-4-1-2-4-2-1">This is an instance variable and should be declared outside.</div></li><li data-component="answer" id="csawesome2_2_AP5-4-1_opt_e"><div class="para" id="AP5-4-1-2-5-1-1">The instance variable num should be returned instead of numOfPeople,  which is local to the constructor.</div></li><li data-component="feedback" id="csawesome2_2_AP5-4-1_opt_e"><div class="para" id="AP5-4-1-2-5-2-1">The numOfPeople variable is correctly returned.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.5.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-4-2" data-multipleanswers="false"><div class="para" id="AP5-4-2-1-1">5-4-5: Consider the following class definition. The class does not compile.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Student
{
    private int id;

    public getId()
    {
        return id;
    }
    // Constructor not shown
}
</code></pre></div> <div class="para" id="AP5-4-2-1-3">The accessor method getId is intended to return the id of a Student object. Which of the following best explains why the class does not compile?</div><li data-component="answer" id="csawesome2_2_AP5-4-2_opt_a"><div class="para" id="AP5-4-2-2-1-1-1">The id instance variable should be public.</div></li><li data-component="feedback" id="csawesome2_2_AP5-4-2_opt_a"><div class="para" id="AP5-4-2-2-1-2-1">Instance variables should be private.</div></li><li data-component="answer" id="csawesome2_2_AP5-4-2_opt_b"><div class="para" id="AP5-4-2-2-2-1-1">The getId method should be declared as private.</div></li><li data-component="feedback" id="csawesome2_2_AP5-4-2_opt_b"><div class="para" id="AP5-4-2-2-2-2-1">Accessor methods should be public methods.</div></li><li data-component="answer" id="csawesome2_2_AP5-4-2_opt_c"><div class="para" id="AP5-4-2-2-3-1-1">The getId method requires a parameter.</div></li><li data-component="feedback" id="csawesome2_2_AP5-4-2_opt_c"><div class="para" id="AP5-4-2-2-3-2-1">Accessor methods usually do not require parameters.</div></li><li data-component="answer" id="csawesome2_2_AP5-4-2_opt_d"><div class="para" id="AP5-4-2-2-4-1-1">The return type of the getId method needs to be defined as void.</div></li><li data-component="feedback" id="csawesome2_2_AP5-4-2_opt_d"><div class="para" id="AP5-4-2-2-4-2-1">void is not the correct return type.</div></li><li data-component="answer" id="csawesome2_2_AP5-4-2_opt_e" data-correct=""><div class="para" id="AP5-4-2-2-5-1-1">The return type of the getId method needs to be defined as int.</div></li><li data-component="feedback" id="csawesome2_2_AP5-4-2_opt_e"><div class="para" id="AP5-4-2-2-5-2-1">Correct! Accessor methods have a return type of the instance variable they are returning.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.5.5.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_StudentObjExample">
                <div class="ac_question" id="csawesome2_2_StudentObjExample_question">
                  <div class="para" id="StudentObjExample-1-1">Try the following code. Note that it has a bug! It tries to access the private instance variable email from outside the class Student.  Change the main method in Tester class so that it uses the appropriate public accessor method (get method) to access the email value instead.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_StudentObjExample_editor" data-question_label="" data-codelens="true">public class TesterClass
{
    // main method for testing
    public static void main(String[] args)
    {
        Student s1 = new Student("Skyler", "skyler@sky.com", 123456);
        System.out.println("Name:" + s1.getName());
        // Fix the bug here!
        System.out.println("Email:" + s1.email);
        System.out.println("ID: " + s1.getId());
    }
}

/** Class Student keeps track of name, email, and id of a Student. */
class Student
{
    private String name;
    private String email;
    private int id;

    public Student(String initName, String initEmail, int initId)
    {
        name = initName;
        email = initEmail;
        id = initId;
    }

    // accessor methods - getters
    /** getName() @return name */
    public String getName()
    {
        return name;
    }

    /** getEmail() @return email */
    public String getEmail()
    {
        return email;
    }

    /** getName() @return id */
    public int getId()
    {
        return id;
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Name:Skyler\nEmail:skyler@sky.com\nID: 123456";
        boolean passed = getResults(expect, output, "Checking for expected output");
        assertTrue(passed);
    }

    @Test
    public void testMethodCall() throws IOException
    {
        String target = "s1.getEmail()";
        boolean passed = checkCodeContains("call to accessor method for email", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-7-7</id>
      <title>Writing Methods</title>
      <question>
        <label>Exercise 3.6.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_Song2">
                <div class="ac_question" id="csawesome2_2_Song2_question">
                  <div class="para" id="Song2-1-1">Run the following code to see the song This Old Man print out using the verse and chorus methods.  You can also see this code run in the <a class="external" href="http://www.pythontutor.com/visualize.html#code=public%20class%20Song%20%0A%20%20%7B%20%0A%20%20%20%20%0A%20%20%20%20/**%20Verse%0A%20%20%20%20%20*%20%40param%20number%20-%20a%20String%20like%20%22one%22,%20%22two%22,%20etc.%0A%20%20%20%20%20*%20%40param%20rhyme%20-%20a%20String%20like%20%22thumb%22,%20%22shoe%22,%20etc.%0A%20%20%20%20%20*/%0A%20%20%20%20%20public%20void%20verse%28String%20number,%20String%20rhyme%29%0A%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20System.out.println%28%22This%20old%20man,%20he%20played%20%22%20%2B%20number%29%3B%0A%20%20%20%20%20%20%20System.out.println%28%22He%20played%20knick%20knack%20on%20my%20%22%20%2B%20rhyme%29%3B%0A%20%20%20%20%20%7D%0A%20%20%20%20%20%0A%20%20%20%20//%20The%20chorus%20method%0A%20%20%20%20public%20void%20chorus%28%29%20%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20System.out.println%28%22With%20a%20knick%20knack%20paddy%20whack,%20give%20a%20dog%20a%20bone.%22%29%3B%0A%20%20%20%20%20%20%20System.out.println%28%22This%20old%20man%20came%20rolling%20home.%22%29%3B%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%0A%20%20%20%20public%20static%20void%20main%28String%20args%5B%5D%29%20%0A%20%20%20%20%7B%0A%20%20%20%20%20%20Song%20mySong%20%3D%20new%20Song%28%29%3B%0A%20%20%20%20%20%20mySong.verse%28%22one%22,%20%22thumb%22%29%3B%0A%20%20%20%20%20%20mySong.chorus%28%29%3B%0A%20%20%20%20%20%20mySong.verse%28%22two%22,%20%22shoe%22%29%3B%0A%20%20%20%20%20%20mySong.chorus%28%29%3B%0A%20%20%20%20%7D%0A%20%20%7D&amp;cumulative=false&amp;curInstr=24&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false&amp;curInstr=0" target="_blank">Java visualizer</a><details class="ptx-footnote" aria-live="polite" id="Song2-1-1-2"><summary class="ptx-footnote__number" title="Footnote 3.6.3"><sup> 3 </sup></summary><div class="ptx-footnote__contents" id="Song2-1-1-2"><code class="code-inline tex2jax_ignore">http://www.pythontutor.com/visualize.html#code=public%20class%20Song%20%0A%20%20%7B%20%0A%20%20%20%20%0A%20%20%20%20/**%20Verse%0A%20%20%20%20%20*%20%40param%20number%20-%20a%20String%20like%20%22one%22,%20%22two%22,%20etc.%0A%20%20%20%20%20*%20%40param%20rhyme%20-%20a%20String%20like%20%22thumb%22,%20%22shoe%22,%20etc.%0A%20%20%20%20%20*/%0A%20%20%20%20%20public%20void%20verse%28String%20number,%20String%20rhyme%29%0A%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20System.out.println%28%22This%20old%20man,%20he%20played%20%22%20%2B%20number%29%3B%0A%20%20%20%20%20%20%20System.out.println%28%22He%20played%20knick%20knack%20on%20my%20%22%20%2B%20rhyme%29%3B%0A%20%20%20%20%20%7D%0A%20%20%20%20%20%0A%20%20%20%20//%20The%20chorus%20method%0A%20%20%20%20public%20void%20chorus%28%29%20%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20System.out.println%28%22With%20a%20knick%20knack%20paddy%20whack,%20give%20a%20dog%20a%20bone.%22%29%3B%0A%20%20%20%20%20%20%20System.out.println%28%22This%20old%20man%20came%20rolling%20home.%22%29%3B%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%0A%20%20%20%20public%20static%20void%20main%28String%20args%5B%5D%29%20%0A%20%20%20%20%7B%0A%20%20%20%20%20%20Song%20mySong%20%3D%20new%20Song%28%29%3B%0A%20%20%20%20%20%20mySong.verse%28%22one%22,%20%22thumb%22%29%3B%0A%20%20%20%20%20%20mySong.chorus%28%29%3B%0A%20%20%20%20%20%20mySong.verse%28%22two%22,%20%22shoe%22%29%3B%0A%20%20%20%20%20%20mySong.chorus%28%29%3B%0A%20%20%20%20%7D%0A%20%20%7D&amp;cumulative=false&amp;curInstr=24&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false&amp;curInstr=0</code></div></details> by clicking on the Show Code Lens button below. Can you add verse three with the rhyme “knee”? Can you add verse four with the rhyme “door”? How many verses do you know?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_Song2_editor" data-question_label="" data-codelens="true">public class Song
{

    /**
     * Verse - prints out a verse of the song
     *
     * @param number - a String like "one", "two", etc.
     * @param rhyme - a String like "thumb", "shoe", etc.
     */
    public void verse(String number, String rhyme)
    {
        System.out.println("This old man, he played " + number);
        System.out.println("He played knick knack on my " + rhyme);
    }

    // The chorus method
    public void chorus()
    {
        System.out.println("With a knick knack paddy whack, give a dog a bone.");
        System.out.println("This old man came rolling home.");
    }

    public static void main(String args[])
    {
        Song mySong = new Song();
        mySong.verse("one", "thumb");
        mySong.chorus();
        mySong.verse("two", "shoe");
        mySong.chorus();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testThree()
    {
        boolean passed = checkCodeContains("verse three", "mySong.verse(\"three\", \"knee\");");
        assertTrue(passed);
    }

    @Test
    public void testFour()
    {
        boolean passed = checkCodeContains("verse four", "mySong.verse(\"four\", \"door\");");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.6.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_StringFind">
                <div class="ac_question" id="csawesome2_2_StringFind_question">
                  <div class="para" id="StringFind-1-1">Run the following program which contains a method called findLetter that takes a letter and a text as parameters and uses a loop to see if that letter is in the text and returns true if it is, false otherwise. Set the variables <code class="code-inline tex2jax_ignore">letter</code> and <code class="code-inline tex2jax_ignore">message</code> to new values in the main method and run it again to try finding a different letter. Then, change the code of the findLetter method to return how many times it finds letter in text, using a new variable called <code class="code-inline tex2jax_ignore">count</code>. How would the return type change?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_StringFind_editor" data-question_label="" data-codelens="true">public class StringFind
{
    /**
     * findLetter looks for a letter in a String
     *
     * @param String letter to look for
     * @param String text to look in
     * @return boolean true if letter is in text After running the code, change
     *     this method to return an int count of how many times letter is in the
     *     text.
     */
    public boolean findLetter(String letter, String text)
    {
        boolean flag = false;
        for (int i = 0; i &lt; text.length(); i++)
        {
            if (text.substring(i, i + 1).equalsIgnoreCase(letter))
            {
                flag = true;
            }
        }
        return flag;
    }

    public static void main(String args[])
    {
        StringFind test = new StringFind();
        String message = "Apples and Oranges";
        String letter = "p";
        System.out.println("Does " + message + " contain a " + letter + "?");
        System.out.println(test.findLetter(letter, message));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void tryfindLetter() throws IOException
    {
        String message = "Apples and Oranges";
        String letter = "p";
        Object[] args = {letter, message};
        String output = getMethodOutput("findLetter", args);
        String expect = "2";

        boolean passed = getResults(expect, output, "findLetter(\"p\",\"Apples and Oranges\")");
        assertTrue(passed);
    }

    @Test
    public void tryfindLetter2() throws IOException
    {
        String message = "Test strings";
        String letter = "s";
        Object[] args = {letter, message};
        String output = getMethodOutput("findLetter", args);
        String expect = "3";

        boolean passed = getResults(expect, output, "findLetter(\"s\",\"Test strings\")");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        boolean passed =
                checkCodeContains(
                        "changed return type of findLetter",
                        "public int findLetter(String letter, String text)");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        boolean passed = checkCodeContains("variable count set to 0", "int count = 0;");
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = removeSpaces(getCode());
        boolean passed =
                code.contains("count++;")
                        || code.contains("count=count+1;")
                        || code.contains("count=1+count;")
                        || code.contains("count+=1;")
                        || code.contains("++count;");
        passed =
                getResults(
                        "count incremented",
                        Boolean.toString(passed),
                        "Count incremented?",
                        passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.6.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_differentAntsWords">
                <span data-question="">
                  <div class="para" id="differentAntsWords-1-1">Click on the phrases that are different in each verse.</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="differentAntsWords-2-1">Look for words that are different in verse 1, 2, and 3.</div>
                </span>
                <pre><span data-incorrect="">The ants go marching</span><span data-correct="">one by one</span><span data-incorrect="">, hurrah, hurrah</span>
<span data-incorrect="">The ants go marching</span><span data-correct="">one by one</span><span data-incorrect="">, hurrah, hurrah</span>
<span data-incorrect="">The ants go marching</span><span data-correct="">one by one</span>
<span data-incorrect="">The little one stops to</span><span data-correct="">suck a thumb</span>
<span data-incorrect="">And they all go marching down to the ground</span>
<span data-incorrect="">To get out of the rain, BOOM! BOOM! BOOM! BOOM!</span>

<span data-incorrect="">The ants go marching</span><span data-correct="">two by two</span><span data-incorrect="">, hurrah, hurrah</span>
<span data-incorrect="">The ants go marching</span><span data-correct="">two by two</span><span data-incorrect="">, hurrah, hurrah</span>
<span data-incorrect="">The ants go marching</span><span data-correct="">two by two</span>
<span data-incorrect="">The little one stops to</span><span data-correct="">tie a shoe</span>
<span data-incorrect="">And they all go marching down to the ground</span>
<span data-incorrect="">To get out of the rain, BOOM! BOOM! BOOM! BOOM!</span>

<span data-incorrect="">The ants go marching</span><span data-correct="">three by three</span><span data-incorrect="">, hurrah, hurrah</span>
<span data-incorrect="">The ants go marching</span><span data-correct="">three by three</span><span data-incorrect="">, hurrah, hurrah</span>
<span data-incorrect="">The ants go marching</span><span data-correct="">three by three</span>
<span data-incorrect="">The little one stops to</span><span data-correct="">climb a tree</span>
<span data-incorrect="">And they all go marching down to the ground</span>
<span data-incorrect="">To get out of the rain, BOOM! BOOM! BOOM! BOOM!</span>
</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.6.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-5-6-song">
                <div class="ac_question" id="csawesome2_2_challenge-5-6-song_question">
                  <div class="para" id="challenge-5-6-song-1-1">Create method(s) with parameters to print out verses of the song The Ants Go Marching. <a class="external" href="https://youtu.be/QPwEZ8Vv2YQ/The+Ants+Go+Marching" target="_blank">https://youtu.be/QPwEZ8Vv2YQ/The+Ants+Go+Marching</a><details class="ptx-footnote" aria-live="polite" id="challenge-5-6-song-1-1-2"><summary class="ptx-footnote__number" title="Footnote 3.6.5"><sup> 5 </sup></summary><div class="ptx-footnote__contents" id="challenge-5-6-song-1-1-2"><code class="code-inline tex2jax_ignore">https://youtu.be/QPwEZ8Vv2YQ/The+Ants+Go+Marching</code></div></details></div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-5-6-song_editor" data-question_label="" data-codelens="true">public class Song
{
    // Create at least 1 method called verse that takes 2 parameters
    // that can be used to print out the verses of the song The Ants Go Marching

    public static void main(String args[])
    {
        // Create a Song object and call its method(s) to print out
        // the verses of The Ants Go Marching
        // There should be atleast 1 method called verse that takes 2 arguments.

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

/* Do NOT change Main or CodeTestHelper.java.
Put the active code exercise in a file like ForLoop.java.
Put your Junit test in the file RunestoneTests.java.
Run. Test by changing ForLoop.java (student code).
*/
public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void checkCodeContains1()
    {
        // check verse 1
        boolean passed =
                checkCodeContains(
                        "verse(...) method header with two String parameters",
                        "public void verse(String *, String *)");

        assertTrue(passed);
    }

    @Test
    public void checkCodeContains2()
    {
        boolean passed = checkCodeContains("a new Song object", "= new Song()");

        assertTrue(passed);
    }

    @Test
    public void checkCodeContains3()
    {
        // check static
        String code = getCode();
        int actual = countOccurences(code, ".verse(");
        String expected = "3";

        boolean passed = actual &gt;= 3;
        getResults(
                expected,
                "" + actual,
                "Checking that code contains three calls to verse(...) method using"
                    + " object.method(...) syntax",
                passed);
        assertTrue(passed);
    }

    @Test
    public void testVerses() throws IOException
    {
        String output = getMethodOutput("main").replaceAll(" his ", " a ").replaceAll("\n\n", "\n");
        String[] actualArray = output.split("\n");

        boolean passed = true;
        String error = "";
        String expect = "No errors";
        String actual = "No errors";

        int j = 0;

        for (int i = 0; i &lt; actualArray.length; i++)
        {
            while (j &lt; expectedArray.length &amp;&amp; expectedArray[j].length() &lt; 2) j++;
            while (i &lt; expectedArray.length &amp;&amp; actualArray[i].length() &lt; 2) i++;

            if (j &lt; expectedArray.length &amp;&amp; actualArray[i].length() &gt; 1)
            {
                /*
                 * System.out.println(expectedArray[j]);
                 * System.out.println(actualArray[i]);
                 * System.out.println();
                 */
                if (actualArray[i].matches("[\\s\\S]*[0-9]+[\\s\\S]*"))
                {
                    continue;
                }

                String compAct = removeSpaces(actualArray[i].toLowerCase());
                String compExp = removeSpaces(expectedArray[j].toLowerCase());

                if (!compAct.equals(compExp))
                {
                    expect = expectedArray[j].trim();
                    actual = actualArray[i].trim() + "\n(Error on line " + (i + 1) + " of output)";
                    passed = false;
                    error =
                            "\n"
                                + "There may be more than one error! Did you forget a line?\n"
                                + "(check spelling, new lines, and punctuation carefully)";
                    break;
                }
            }

            j++;
        }

        getResults(expect, actual, "Checking output from main" + error, passed);
        assertTrue(passed);
    }

    private static String expectedOutput =
            "The ants go marching one by one, hurrah, hurrah\n"
                    + "The ants go marching one by one, hurrah, hurrah\n"
                    + "The ants go marching one by one\n"
                    + "The little one stops to suck a thumb\n"
                    + "And they all go marching down to the ground\n"
                    + "To get out of the rain, BOOM! BOOM! BOOM! BOOM!\n"
                    + "\n"
                    + "The ants go marching two by two, hurrah, hurrah\n"
                    + "The ants go marching two by two, hurrah, hurrah\n"
                    + "The ants go marching two by two\n"
                    + "The little one stops to tie a shoe\n"
                    + "And they all go marching down to the ground\n"
                    + "To get out of the rain, BOOM! BOOM! BOOM! BOOM!\n"
                    + "\n"
                    + "The ants go marching three by three, hurrah, hurrah\n"
                    + "The ants go marching three by three, hurrah, hurrah\n"
                    + "The ants go marching three by three\n"
                    + "The little one stops to climb a tree\n"
                    + "And they all go marching down to the ground\n"
                    + "To get out of the rain, BOOM! BOOM! BOOM! BOOM!";
    private static String[] expectedArray = expectedOutput.replaceAll("\n\n", "\n").split("\n");
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.6.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_community-challenge-5-6">
                <div class="ac_question" id="csawesome2_2_community-challenge-5-6_question">
                  <div class="para" id="community-challenge-5-6-1-1">Copy your class from <a class="external" href="https://runestone.academy/ns/books/published/csawesome/Unit5-Writing-Classes/topic-5-2-writing-constructors.html#groupwork-design-a-class-for-your-community" target="_blank">lesson 5.2</a><details class="ptx-footnote" aria-live="polite" id="community-challenge-5-6-1-1-2"><summary class="ptx-footnote__number" title="Footnote 3.6.7"><sup> 7 </sup></summary><div class="ptx-footnote__contents" id="community-challenge-5-6-1-1-2"><code class="code-inline tex2jax_ignore">https://runestone.academy/ns/books/published/csawesome/Unit5-Writing-Classes/topic-5-2-writing-constructors.html#groupwork-design-a-class-for-your-community</code></div></details>. Add get, set, toString, and a method that takes a parameter. For example, there could be a print method with arguments that indicate how you want to print out the information, print(format) where format is “plain” or “table”.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_community-challenge-5-6_editor" data-question_label="" data-codelens="true">public class          // Add your class name here!
{
    // 1. Copy your class instance variables, constructor, and print() from 5.2.

    // 2. Create accessor (get) and mutator (set) methods for each of the instance variables.

    // 3. Create a toString() method that returns all the information in the instance variables.
    // 4.  Add a method for your class that takes a parameter.
    // For example, there could be a print method with arguments that indicate
    // how you want to print out the information, print(format) where format is "plain" or "table".

    // 5. Test all the methods in the main method.
    public static void main(String[] args)
    {
       // Construct an object of your class


       // call the object's methods

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testPrivateVariables()
    {
        String expect = "3 Private";
        String output = testPrivateInstanceVariables();
        boolean passed = false;
        if (Integer.parseInt(expect.substring(0, 1)) &lt;= Integer.parseInt(output.substring(0, 1)))
            passed = true;
        passed = getResults(expect, output, "Checking private instance variable(s)", passed);
        assertTrue(passed);
    }

    /* @Test
    public void testDefaultConstructor()
    {
        String output = checkDefaultConstructor();
        String expect = "pass";

        boolean passed = getResults(expect, output, "Checking default constructor");
        assertTrue(passed);
    } */

    @Test
    public void testConstructor3()
    {
        String output = checkConstructor(3);
        String expect = "pass";

        boolean passed = getResults(expect, output, "Checking constructor with 3 parameters");
        assertTrue(passed);
    }

    @Test
    public void testPrint()
    {
        String output = getMethodOutput("print");
        String expect = "More than 15 characters";
        String actual = " than 15 characters";

        if (output.length() &lt; 15)
        {
            actual = "Less" + actual;
        }
        else
        {
            actual = "More" + actual;
        }
        boolean passed = getResults(expect, actual, "Checking print method");
        assertTrue(passed);
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main"); // .split("\n");
        String expect = "3+ line(s) of text";
        String actual = " line(s) of text";
        int len = output.split("\n").length;

        if (output.length() &gt; 0)
        {
            actual = len + actual;
        }
        else
        {
            actual = output.length() + actual;
        }
        boolean passed = len &gt;= 3;

        getResults(expect, actual, "Checking output", passed);
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        String code = getCode();
        String target = "public * get*()";

        int num = countOccurencesRegex(code, target);

        boolean passed = num &gt;= 3;

        getResults("3", "" + num, "Checking accessor (get) methods for each variable", passed);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String code = getCode();
        String target = "public void set*(*)";

        int num = countOccurencesRegex(code, target);

        boolean passed = num &gt;= 3;

        getResults("3", "" + num, "Checking mutator (set) methods for each variable", passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "public String toString()";
        boolean passed = checkCodeContains("toString() method", target);
        assertTrue(passed);
    }

    @Test
    public void testPrintFormat()
    {
        String target = "public void print(String";
        boolean passed = checkCodeContains("print method with String argument", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.6.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-6-1" data-multipleanswers="false"><div class="para" id="AP5-6-1-1-1">5-6-8: Consider the following class, which uses the instance variable dollars to represent the money in a wallet in dollars.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Wallet
{
    private double dollars;

    public double putMoneyInWallet(int amount)
    {
        /* missing code */
    }
}
</code></pre></div> <div class="para" id="AP5-6-1-1-3">The putMoneyInWallet method is intended to increase the dollars in the wallet by the parameter amount and then return the updated dollars in the wallet. Which of the following code segments should replace  <em class="emphasis">missing code</em> so that the putMoneyInWallet method will work as intended?</div><li data-component="answer" id="csawesome2_2_AP5-6-1_opt_a"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">amount += dollars;
return dollars;
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-6-1_opt_a"><div class="para" id="AP5-6-1-2-1-2-1">dollars should be incremented by amount.</div></li><li data-component="answer" id="csawesome2_2_AP5-6-1_opt_b"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">dollars = amount;
return amount;
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-6-1_opt_b"><div class="para" id="AP5-6-1-2-2-2-1">dollars should be incremented by amount.</div></li><li data-component="answer" id="csawesome2_2_AP5-6-1_opt_c" data-correct=""><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">dollars += amount;
return dollars;
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-6-1_opt_c"><div class="para" id="AP5-6-1-2-3-2-1">Correct.</div></li><li data-component="answer" id="csawesome2_2_AP5-6-1_opt_d"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">dollars = dollars + amount;
return amount;
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-6-1_opt_d"><div class="para" id="AP5-6-1-2-4-2-1">amount is returned instead of dollars.</div></li><li data-component="answer" id="csawesome2_2_AP5-6-1_opt_e"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">amount = dollars + amount;
return dollars;
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-6-1_opt_e"><div class="para" id="AP5-6-1-2-5-2-1">dollars should be incremented by amount.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.6.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-6-2" data-multipleanswers="false"><div class="para" id="AP5-6-2-1-1">5-6-9: Consider the Liquid class below.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Liquid
{
    private int currentTemp;
    private int boilingPoint;

    public Liquid(int ct, int bp)
    {
        currentTemp = ct;
        boilingPoint = bp;
    }

    public boolean isBoiling(int amount)
    {
        /* missing code */
    }
}
</code></pre></div> <div class="para" id="AP5-6-2-1-3">The isBoiling method is intended to return true if increasing the currentTemp by the parameter amount is greater than or equal to the boilingPoint, or otherwise return false. Which of the following code segments can replace <em class="emphasis">missing code</em> to ensure that the isBoiling method works as intended?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">I.   if (currentTemp + amount &lt; boilingPoint)
     {
         return false;
     }
     else
     {
         return true;
     }
II.  if (amount &gt; currentTemp)
     {
         return false;
     }
     else
     {
         return currentTemp;
     }
III. if (amount + currentTemp &gt;= boilingPoint)
     {
         return true;
     }
     else
     {
         return false;
     }
</code></pre></div><li data-component="answer" id="csawesome2_2_AP5-6-2_opt_a"><div class="para" id="AP5-6-2-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_AP5-6-2_opt_a"><div class="para" id="AP5-6-2-2-1-2-1">I would work but it is not the only code that would work.</div></li><li data-component="answer" id="csawesome2_2_AP5-6-2_opt_b"><div class="para" id="AP5-6-2-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_AP5-6-2_opt_b"><div class="para" id="AP5-6-2-2-2-2-1">II does not check against the boilingPoint and does not return only boolean values.</div></li><li data-component="answer" id="csawesome2_2_AP5-6-2_opt_c"><div class="para" id="AP5-6-2-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_AP5-6-2_opt_c"><div class="para" id="AP5-6-2-2-3-2-1">III would work but it is not the only code that would work.</div></li><li data-component="answer" id="csawesome2_2_AP5-6-2_opt_d" data-correct=""><div class="para" id="AP5-6-2-2-4-1-1">I and III only.</div></li><li data-component="feedback" id="csawesome2_2_AP5-6-2_opt_d"><div class="para" id="AP5-6-2-2-4-2-1">Correct!</div></li><li data-component="answer" id="csawesome2_2_AP5-6-2_opt_e"><div class="para" id="AP5-6-2-2-5-1-1">I, II, III</div></li><li data-component="feedback" id="csawesome2_2_AP5-6-2_opt_e"><div class="para" id="AP5-6-2-2-5-2-1">II does not check against the boilingPoint and does not return only boolean values.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.6.6.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_repeatedcode">
                <span data-question="">
                  <div class="para" id="repeatedcode-1-1">Click on all the lines that are completely identical and repeated.</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="repeatedcode-2-1">Look for lines that are completely identical.</div>
                </span>
                <pre><span data-incorrect="">public static void main(String args[]) {</span>
    <span data-incorrect="">System.out.println("This old man, he played one.");</span>
    <span data-incorrect="">System.out.println("He played knick knack on my thumb. ");</span>
    <span data-correct="">System.out.println("With a knick knack paddy whack, give a dog a bone.");</span>
    <span data-correct="">System.out.println("This old man came rolling home.");</span>
    <span data-incorrect="">System.out.println("This old man, he played two.");</span>
    <span data-incorrect="">System.out.println("He played knick knack on my shoe. ");</span>
    <span data-correct="">System.out.println("With a knick knack paddy whack, give a dog a bone.");</span>
    <span data-correct="">System.out.println("This old man came rolling home.");</span>
<span data-incorrect="">}</span>
</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.6.6.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_Song1">
                <div class="ac_question" id="csawesome2_2_Song1_question">
                  <div class="para" id="Song1-1-1">Run the following code to see the song This Old Man print out. Can you replace the last two lines in the second verse in the main method with a call the chorus() method instead? You can also see this code run in the <a class="external" href="http://www.pythontutor.com/visualize.html#code=public%20class%20Song%20%0A%20%20%7B%20%0A%20%20%20%20//%20The%20chorus%20method%0A%20%20%20%20public%20void%20chorus%28%29%20%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20System.out.println%28%22With%20a%20knick%20knack%20paddy%20whack,%20give%20a%20dog%20a%20bone.%22%29%3B%0A%20%20%20%20%20%20%20System.out.println%28%22This%20old%20man%20came%20rolling%20home.%22%29%3B%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20public%20static%20void%20main%28String%20args%5B%5D%29%20%0A%20%20%20%20%7B%0A%20%20%20%20%20%20Song%20mySong%20%3D%20new%20Song%28%29%3B%0A%20%20%20%20%20%20System.out.println%28%22This%20old%20man,%20he%20played%20one.%22%29%3B%0A%20%20%20%20%20%20System.out.println%28%22He%20played%20knick%20knack%20on%20my%20thumb.%20%22%29%3B%0A%20%20%20%20%20%20mySong.chorus%28%29%3B%0A%0A%20%20%20%20%20%20System.out.println%28%22This%20old%20man,%20he%20played%20two.%22%29%3B%0A%20%20%20%20%20%20System.out.println%28%22He%20played%20knick%20knack%20on%20my%20shoe.%20%22%29%3B%0A%20%20%20%20%20%20mySong.chorus%28%29%3B%0A%20%20%20%20%7D%0A%20%20%7D&amp;cumulative=false&amp;curInstr=22&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false&amp;curInstr=0" target="_blank">Java visualizer</a><details class="ptx-footnote" aria-live="polite" id="Song1-1-1-2"><summary class="ptx-footnote__number" title="Footnote 3.6.8"><sup> 8 </sup></summary><div class="ptx-footnote__contents" id="Song1-1-1-2"><code class="code-inline tex2jax_ignore">http://www.pythontutor.com/visualize.html#code=public%20class%20Song%20%0A%20%20%7B%20%0A%20%20%20%20//%20The%20chorus%20method%0A%20%20%20%20public%20void%20chorus%28%29%20%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20System.out.println%28%22With%20a%20knick%20knack%20paddy%20whack,%20give%20a%20dog%20a%20bone.%22%29%3B%0A%20%20%20%20%20%20%20System.out.println%28%22This%20old%20man%20came%20rolling%20home.%22%29%3B%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20public%20static%20void%20main%28String%20args%5B%5D%29%20%0A%20%20%20%20%7B%0A%20%20%20%20%20%20Song%20mySong%20%3D%20new%20Song%28%29%3B%0A%20%20%20%20%20%20System.out.println%28%22This%20old%20man,%20he%20played%20one.%22%29%3B%0A%20%20%20%20%20%20System.out.println%28%22He%20played%20knick%20knack%20on%20my%20thumb.%20%22%29%3B%0A%20%20%20%20%20%20mySong.chorus%28%29%3B%0A%0A%20%20%20%20%20%20System.out.println%28%22This%20old%20man,%20he%20played%20two.%22%29%3B%0A%20%20%20%20%20%20System.out.println%28%22He%20played%20knick%20knack%20on%20my%20shoe.%20%22%29%3B%0A%20%20%20%20%20%20mySong.chorus%28%29%3B%0A%20%20%20%20%7D%0A%20%20%7D&amp;cumulative=false&amp;curInstr=22&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false&amp;curInstr=0</code></div></details> by clicking on the Code Lens button.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_Song1_editor" data-question_label="" data-codelens="true">public class Song
{
    // The chorus method
    public void chorus()
    {
        System.out.println("With a knick knack paddy whack, give a dog a bone.");
        System.out.println("This old man came rolling home.");
    }

    public static void main(String args[])
    {
        Song mySong = new Song();
        System.out.println("This old man, he played one.");
        System.out.println("He played knick knack on my thumb. ");
        mySong.chorus();

        System.out.println("This old man, he played two.");
        System.out.println("He played knick knack on my shoe. ");
        // Can you replace these 2 lines with a method call to chorus()?
        System.out.println("With a knick knack paddy whack, give a dog a bone.");
        System.out.println("This old man came rolling home.");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "This old man, he played one.\n"
                    + "He played knick knack on my thumb.  \n"
                    + "With a knick knack paddy whack, give a dog a bone.\n"
                    + "This old man came rolling home.\n"
                    + "This old man, he played two.\n"
                    + "He played knick knack on my shoe. \n"
                    + "With a knick knack paddy whack, give a dog a bone.\n"
                    + "This old man came rolling home.";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class Song\n"
                    + "{\n"
                    + "  // The chorus method\n"
                    + "  public void chorus()\n"
                    + "  {\n"
                    + "     System.out.println(\"With a knick knack paddy whack, give a dog a"
                    + " bone.\");\n"
                    + "     System.out.println(\"This old man came rolling home.\");\n"
                    + "  }\n\n"
                    + "  public static void main(String args[])\n"
                    + "  {\n"
                    + "    Song mySong = new Song();\n"
                    + "    System.out.println(\"This old man, he played one.\");\n"
                    + "    System.out.println(\"He played knick knack on my thumb. \");\n"
                    + "    mySong.chorus();\n\n"
                    + "    System.out.println(\"This old man, he played two.\");\n"
                    + "    System.out.println(\"He played knick knack on my shoe. \");\n"
                    + "    // Can you replace these 2 lines with a method call to chorus()?\n"
                    + "    System.out.println(\"With a knick knack paddy whack, give a dog a"
                    + " bone.\");\n"
                    + "    System.out.println(\"This old man came rolling home.\");\n"
                    + "  }\n"
                    + "}\n";

        boolean changed = codeChanged(origCode);

        assertTrue(changed);
    }

    @Test
    public void testcodeContains()
    {
        int count = countOccurences(getCode(), "mySong.chorus();");
        boolean passed = count &gt; 1;
        passed =
                getResults(
                        "&gt; 1 chorus call",
                        count + " chorus call(s)",
                        "Added a call to chorus?",
                        passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-7-8</id>
      <title>Static Variables and Methods</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Song
{
    // Add a public static variable called numVerses

    // Change the method(s) to be static

    public static void main(String args[])
    {
        // Call the static method(s) to print out the Song
        // Print out the static variable numVerses

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

/* Do NOT change Main or CodeTestHelper.java.
Put the active code exercise in a file like ForLoop.java.
Put your Junit test in the file RunestoneTests.java.
Run. Test by changing ForLoop.java (student code).
*/
public class RunestoneTests extends CodeTestHelper
{
    @After
    public void tearDown()
    {
        super.tearDown();
        // Song.numVerses = 0;

    }

    @Test
    public void checkCodeContains1()
    {
        // check verse 1
        boolean passed =
                checkCodeContains(
                        "verse(...) method header with two String parameters",
                        "public static void verse(String *, String *)");

        assertTrue(passed);
    }

    @Test
    public void checkCodeContains2()
    {
        // check static
        String code = getCode();
        int actual = countOccurences(code, "Song.verse(");
        String expected = "3";

        boolean passed = actual &gt;= 3;
        getResults(
                expected,
                "" + actual,
                "Checking that code contains three calls to verse(...) method using"
                    + " ClassName.staticMethod(...) syntax",
                passed);
        assertTrue(passed);
    }

    @Test
    public void checkCodeContains3()
    {
        // check static
        String code = getCode();
        int actual = countOccurences(code, "public static int numVerses = 0");
        String expected = "1";

        boolean passed = actual &gt;= 1;
        getResults(
                expected,
                "" + actual,
                "Checking that code declares variable numVerses according to instructions and sets"
                    + " it to zero",
                passed);

        assertTrue(passed);
    }

    @Test
    public void checkCodeContains4()
    {
        // check static
        String code = getCode();
        boolean increment = code.contains("numVerses++");
        String expected = "increments: true\n";
        String actual = "increments: " + increment + "\n";

        String anytext = "[\\s\\S]*";
        String regex = "System.out.print[ln]*\\([\"a-zA-Z0-9 +]*numVerses[\"a-zA-Z0-9 +]*\\);";
        boolean printed = code.matches(anytext + regex + anytext);
        expected += "prints: true";
        actual += "prints: " + printed;

        boolean passed = increment &amp;&amp; printed;
        getResults(expected, actual, "Checking that code increments and prints numVerses", passed);

        assertTrue(passed);
    }

    @Test
    public void testVerses() throws IOException
    {
        String output = getMethodOutput("main").replaceAll(" his ", " a ").replaceAll("\n\n", "\n");
        String[] actualArray = output.split("\n");

        boolean passed = true;
        String error = "";
        String expect = "No errors";
        String actual = "No errors";

        int j = 0;

        for (int i = 0; i &lt; actualArray.length; i++)
        {
            while (j &lt; expectedArray.length &amp;&amp; expectedArray[j].length() &lt; 2) j++;
            while (i &lt; expectedArray.length &amp;&amp; actualArray[i].length() &lt; 2) i++;

            if (j &lt; expectedArray.length &amp;&amp; actualArray[i].length() &gt; 1)
            {
                /*
                 * System.out.println(expectedArray[j]);
                 * System.out.println(actualArray[i]);
                 * System.out.println();
                 */
                if (actualArray[i].matches("[\\s\\S]*[0-9]+[\\s\\S]*"))
                {
                    continue;
                }

                String compAct = removeSpaces(actualArray[i].toLowerCase());
                String compExp = removeSpaces(expectedArray[j].toLowerCase());

                if (!compAct.equals(compExp))
                {
                    expect = expectedArray[j].trim();
                    actual = actualArray[i].trim() + "\n(Error on line " + (i + 1) + " of output)";
                    passed = false;
                    error =
                            "\n"
                                + "There may be more than one error! Did you forget a line?\n"
                                + "(check spelling, new lines, and punctuation carefully)";
                    break;
                }
            }

            j++;
        }

        getResults(expect, actual, "Checking output from main" + error, passed);
        assertTrue(passed);
    }

    private static String expectedOutput =
            "The ants go marching one by one, hurrah, hurrah\n"
                    + "The ants go marching one by one, hurrah, hurrah\n"
                    + "The ants go marching one by one\n"
                    + "The little one stops to suck a thumb\n"
                    + "And they all go marching down to the ground\n"
                    + "To get out of the rain, BOOM! BOOM! BOOM! BOOM!\n"
                    + "\n"
                    + "The ants go marching two by two, hurrah, hurrah\n"
                    + "The ants go marching two by two, hurrah, hurrah\n"
                    + "The ants go marching two by two\n"
                    + "The little one stops to tie a shoe\n"
                    + "And they all go marching down to the ground\n"
                    + "To get out of the rain, BOOM! BOOM! BOOM! BOOM!\n"
                    + "\n"
                    + "The ants go marching three by three, hurrah, hurrah\n"
                    + "The ants go marching three by three, hurrah, hurrah\n"
                    + "The ants go marching three by three\n"
                    + "The little one stops to climb a tree\n"
                    + "And they all go marching down to the ground\n"
                    + "To get out of the rain, BOOM! BOOM! BOOM! BOOM!";
    private static String[] expectedArray = expectedOutput.replaceAll("\n\n", "\n").split("\n");
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.7.3.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_PersonClassStaticCounter">
                <div class="ac_question" id="csawesome2_2_PersonClassStaticCounter_question">
                  <div class="para" id="PersonClassStaticCounter-1-1">What will the following code print out? Try adding another Person object and see what happens. Try the CodeLens button to run the code step by step.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_PersonClassStaticCounter_editor" data-question_label="" data-codelens="true">public class Person
{
    // instance variables
    private String name;
    private String email;
    private String phoneNumber;

    // Static counter variable
    public static int personCounter = 0;

    // static method to print out counter
    public static void printPersonCounter()
    {
        System.out.println("Person counter: " + personCounter);
    }

    // constructor: construct a Person copying in the data into the instance
    // variables
    public Person(String initName, String initEmail, String initPhone)
    {
        name = initName;
        email = initEmail;
        phoneNumber = initPhone;
        personCounter++;
    }

    // toString() method
    public String toString()
    {
        return name + ": " + email + " " + phoneNumber;
    }

    // main method for testing
    public static void main(String[] args)
    {
        // call the constructor to create a new person
        Person p1 = new Person("Sana", "sana@gmail.com", "123-456-7890");
        Person p2 = new Person("Jean", "jean@gmail.com", "404 899-9955");

        Person.printPersonCounter();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Person counter: 2";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.7.3.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_staticTrace" data-multipleanswers="false"><div class="para" id="staticTrace-1-1">5-7-2: Consider the class Temperature below which has a static variable. What is the output of the main method below?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Temperature
{
    private double temperature;
    public static double maxTemp = 0;

    public Temperature(double t)
    {
        temperature = t;
        if (t &gt; maxTemp)
        {
             maxTemp = t;
        }
    }

    public static void main(String[] args)
    {
        Temperature t1 = new Temperature(75);
        Temperature t2 = new Temperature(100);
        Temperature t3 = new Temperature(65);
        System.out.println("Max Temp: " + Temperature.maxTemp);
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_staticTrace_opt_a"><div class="para" id="staticTrace-2-1-1-1">Max Temp: 0</div></li><li data-component="feedback" id="csawesome2_2_staticTrace_opt_a"><div class="para" id="staticTrace-2-1-2-1">maxTemp is changed in each call to the Temperature() constructor.</div></li><li data-component="answer" id="csawesome2_2_staticTrace_opt_b"><div class="para" id="staticTrace-2-2-1-1">There is a compiler error because the static variable maxTemp cannot be used inside a non-static constructor.</div></li><li data-component="feedback" id="csawesome2_2_staticTrace_opt_b"><div class="para" id="staticTrace-2-2-2-1">Non-static methods and constructors can use any instance or static variables in the class.</div></li><li data-component="answer" id="csawesome2_2_staticTrace_opt_c" data-correct=""><div class="para" id="staticTrace-2-3-1-1">Max Temp: 100</div></li><li data-component="feedback" id="csawesome2_2_staticTrace_opt_c"><div class="para" id="staticTrace-2-3-2-1">Yes, maxTemp is initialized to 0 and then changed to 75 and then 100 by the constructor calls.</div></li><li data-component="answer" id="csawesome2_2_staticTrace_opt_d"><div class="para" id="staticTrace-2-4-1-1">Max Temp: 75</div></li><li data-component="feedback" id="csawesome2_2_staticTrace_opt_d"><div class="para" id="staticTrace-2-4-2-1">maxTemp will be changed to 100 by the second constructor call since 100 &gt; 75.</div></li><li data-component="answer" id="csawesome2_2_staticTrace_opt_e"><div class="para" id="staticTrace-2-5-1-1">Max Temp: 65</div></li><li data-component="feedback" id="csawesome2_2_staticTrace_opt_e"><div class="para" id="staticTrace-2-5-2-1">maxTemp will not be changed to 65 by the third constructor call because 67 is not &gt; 100.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.7.3.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_TemperatureBugs">
                <div class="ac_question" id="csawesome2_2_TemperatureBugs_question">
                  <div class="para" id="TemperatureBugs-1-1">Fix the bugs in the following code.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_TemperatureBugs_editor" data-question_label="" data-codelens="true">public class Temperature
{
    private double temperature;
    public static double maxTemp = 0;

    public Temperature(double t)
    {
        temperature = t;
        if (t &gt; maxTemp)
        {
             maxTemp = t;
        }
    }

    public static printMax()
    {
        System.out.println(temperature);
    }

    public static void main(String[] args)
    {
        Temperature t1 = new Temperature(75);
        Temperature t2 = new Temperature(100);
        Temperature.printMax();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testCodeContains1()
    {

        boolean passed =
                checkCodeContains("static printMax() header", "public static void printMax()");
        assertTrue(passed);
    }

    @Test
    public void testCodeContains2()
    {
        String code = getCode();
        boolean passed =
                code.contains("System.out.println(maxTemp);")
                        || code.contains("System.out.println(Temperature.maxTemp);");
        getResults("true", "" + passed, "printMax method returns the right value", passed);
        assertTrue(passed);
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "100.0";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.7.3.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_finalPi">
                <div class="ac_question" id="csawesome2_2_finalPi_question">
                  <div class="para" id="finalPi-1-1">Try the following code and notice the syntax error when we try to change the constant PI. Put the comment symbols // in front of that line to remove the error and run it again.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_finalPi_editor" data-question_label="" data-codelens="true">public class TestFinal
{
    public static void main(String[] args)
    {
        final double PI = 3.14;
        System.out.println(PI);
        PI = 4.2; // This will cause a syntax error
    }
}
====
// should pass if/when they run code
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "3.14";
        boolean passed =
                getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-7-9</id>
      <title>Scope and Access</title>
      <question>
        <label>Exercise 3.8.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-5-8-Debug">
                <div class="ac_question" id="csawesome2_2_challenge-5-8-Debug_question">
                  <div class="para" id="challenge-5-8-Debug-1-1">Debug the following program that has scope violations. You may need to add methods or use methods that are in the class Fraction appropriately. Then, add comments that label the variable declarations as class, method, or block scope.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-5-8-Debug_editor" data-question_label="" data-codelens="true">public class TesterClass
{
    public static void main(String[] args)
    {
        Fraction f1 = new Fraction();
        Fraction f2 = new Fraction(1, 2);
        System.out.println(f1);
        System.out.println(f2.numerator / f2.denominator);
    }
}

/** Class Fraction */
class Fraction
{
    //  instance variables
    private int numerator;
    private int denominator;

    // constructor: set instance variables to default values
    public Fraction()
    {
        int d = 1;
        numerator = d;
        denominator = d;
    }

    // constructor: set instance variables to init parameters
    public Fraction(int initNumerator, int initDenominator)
    {
        numerator = initNumerator;
        denominator = initDenominator;
    }

    public String toString()
    {
        // if the denominator is 1, then just return the numerator
        if (denominator == d)
        {
            int newNumerator = 1;
        }
        return newNumerator + "/" + denominator;
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TesterClass");
    }

    @Test
    public void test1()
    {
        String orig =
                "public class TesterClass\n"
                    + "{\n"
                    + "   public static void main(String[] args)\n"
                    + "   {\n"
                    + "      Fraction f1 = new Fraction();\n"
                    + "      Fraction f2 = new Fraction(1,2);\n"
                    + "      System.out.println(f1);\n"
                    + "      System.out.println(f2.numerator / f2.denominator);\n"
                    + "   }\n"
                    + " }\n\n"
                    + "/** Class Fraction */\n"
                    + "class Fraction\n"
                    + "{\n"
                    + "   //  instance variables\n"
                    + "   private int numerator;\n"
                    + "   private int denominator;\n\n"
                    + "   // constructor: set instance variables to default values\n"
                    + "   public Fraction()\n"
                    + "   {\n"
                    + "      int d = 1;\n"
                    + "      numerator = d;\n"
                    + "      denominator = d;\n"
                    + "   }\n\n"
                    + "   // constructor: set instance variables to init parameters\n"
                    + "   public Fraction(int initNumerator, int initDenominator)\n"
                    + "   {\n"
                    + "      numerator = initNumerator;\n"
                    + "      denominator = initDenominator;\n"
                    + "   }\n\n"
                    + "   public String toString()\n"
                    + "   {\n"
                    + "     // if the denominator is 1, then just return the numerator\n"
                    + "     if (denominator == d) {\n"
                    + "        int newNumerator = 1;\n"
                    + "     }\n"
                    + "     return newNumerator + \"/\" + denominator;\n"
                    + "   }\n"
                    + "}\n";

        boolean passed = codeChanged(orig);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String expect = "1\n1/2";
        String actual = getMethodOutput("main");

        boolean passed = getResults(expect, actual, "Testing main()");
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCodeWithoutComments();
        int count = countOccurences(code, "private");
        boolean passed = (count &gt;= 2);
        getResults(
                "2 private vars",
                count + " private vars",
                "Keep the instance variables private! Use other Fraction methods.",
                passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.8.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-8-1" data-multipleanswers="false"><div class="para" id="AP5-8-1-1-1">5-8-6: Consider the following class definitions. Which of the following best explains why the class will not compile?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Party
{
    private int boxesOfFood;
    private int numOfPeople;

    public Party(int people, int foodBoxes)
    {
        numOfPeople = people;
        boxesOfFood = foodBoxes;
    }

    public void orderMoreFood(int additionalFoodBoxes)
    {
        int updatedAmountOfFood = boxesOfFood + additionalFoodBoxes;
        boxesOfFood = updatedAmountOfFood;
    }

    public void eatFoodBoxes(int eatenBoxes)
    {
        boxesOfFood = updatedAmountOfFood - eatenBoxes;
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_AP5-8-1_opt_a"><div class="para" id="AP5-8-1-2-1-1-1">The class is missing an accessor method.</div></li><li data-component="feedback" id="csawesome2_2_AP5-8-1_opt_a"><div class="para" id="AP5-8-1-2-1-2-1">There is a scope violation.</div></li><li data-component="answer" id="csawesome2_2_AP5-8-1_opt_b"><div class="para" id="AP5-8-1-2-2-1-1">The instance variables boxesOfFood and numOfPeople should be designated public instead of private.</div></li><li data-component="feedback" id="csawesome2_2_AP5-8-1_opt_b"><div class="para" id="AP5-8-1-2-2-2-1">There is a scope violation. Instance variables are usually private.</div></li><li data-component="answer" id="csawesome2_2_AP5-8-1_opt_c"><div class="para" id="AP5-8-1-2-3-1-1">The return type for the Party constructor is missing.</div></li><li data-component="feedback" id="csawesome2_2_AP5-8-1_opt_c"><div class="para" id="AP5-8-1-2-3-2-1">There is a scope violation. Constructors do not have return types.</div></li><li data-component="answer" id="csawesome2_2_AP5-8-1_opt_d" data-correct=""><div class="para" id="AP5-8-1-2-4-1-1">The variable updatedAmountOfFood is not defined in eatFoodBoxes method.</div></li><li data-component="feedback" id="csawesome2_2_AP5-8-1_opt_d"><div class="para" id="AP5-8-1-2-4-2-1">There is a scope violation. The updatedAmountOfFood variable is a local variable in another method.</div></li><li data-component="answer" id="csawesome2_2_AP5-8-1_opt_e"><div class="para" id="AP5-8-1-2-5-1-1">The Party class is missing a constructor</div></li><li data-component="feedback" id="csawesome2_2_AP5-8-1_opt_e"><div class="para" id="AP5-8-1-2-5-2-1">There is a scope violation.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.8.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-8-2" data-multipleanswers="false"><div class="para" id="AP5-8-2-1-1">5-8-7: Consider the following class definition.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Movie
{
    private int currentPrice;
    private int movieRating;

    public Movie(int p, int r)
    {
        currentPrice = p;
        movieRating = r;
    }

    public int getCurrentPrice()
    {
        int currentPrice = 16;
        return currentPrice;
    }

    public void printPrice()
    {
        System.out.println(getCurrentPrice());
    }
}
</code></pre></div> <div class="para" id="AP5-8-2-1-3">Which of the following reasons explains why the printPrice method is “broken” and only ever prints out a value of 16?</div><li data-component="answer" id="csawesome2_2_AP5-8-2_opt_a"><div class="para" id="AP5-8-2-2-1-1-1">The private variables currentPrice and movieRating are not properly initialized.</div></li><li data-component="feedback" id="csawesome2_2_AP5-8-2_opt_a"><div class="para" id="AP5-8-2-2-1-2-1">The constructor will initialize them.</div></li><li data-component="answer" id="csawesome2_2_AP5-8-2_opt_b"><div class="para" id="AP5-8-2-2-2-1-1">The private variables currentPrice and movieRating should have been declared public.</div></li><li data-component="feedback" id="csawesome2_2_AP5-8-2_opt_b"><div class="para" id="AP5-8-2-2-2-2-1">Instance variables should be private.</div></li><li data-component="answer" id="csawesome2_2_AP5-8-2_opt_c"><div class="para" id="AP5-8-2-2-3-1-1">The printPrice method should have been declared as private.</div></li><li data-component="feedback" id="csawesome2_2_AP5-8-2_opt_c"><div class="para" id="AP5-8-2-2-3-2-1">Methods are usually public.</div></li><li data-component="answer" id="csawesome2_2_AP5-8-2_opt_d" data-correct=""><div class="para" id="AP5-8-2-2-4-1-1">currentPrice is declared as a local variable in the getCurrentPrice method and set to 16, and will be used instead of the instance variable currentPrice.</div></li><li data-component="feedback" id="csawesome2_2_AP5-8-2_opt_d"><div class="para" id="AP5-8-2-2-4-2-1">Correct!</div></li><li data-component="answer" id="csawesome2_2_AP5-8-2_opt_e"><div class="para" id="AP5-8-2-2-5-1-1">The currentPrice instance variable does not have a value.</div></li><li data-component="feedback" id="csawesome2_2_AP5-8-2_opt_e"><div class="para" id="AP5-8-2-2-5-2-1">Accessor methods are usually public.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.8.4.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_name_class_scope">
                <span data-question="">
                  <div class="para" id="name_class_scope-1-1">Click on all the variable declarations that are at Class Level Scope.</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="name_class_scope-2-1">Remember that the instance variables declared at the top of the class have Class Scope.</div>
                </span>
                <pre><span data-incorrect="">public class Name</span>
<span data-incorrect="">{</span>
    <span data-correct="">private String first;</span>
    <span data-correct="">public String last;</span>

    <span data-incorrect="">public Name(String theFirst, String theLast)</span>
    <span data-incorrect="">{</span>
        <span data-incorrect="">String firstName = theFirst;</span>
        <span data-incorrect="">first = firstName;</span>
        <span data-incorrect="">last = theLast;</span>
    <span data-incorrect="">}</span>
<span data-incorrect="">}</span>
</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.8.4.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_name_method_scope">
                <span data-question="">
                  <div class="para" id="name_method_scope-1-1">Click on all the variable declarations that are at Method Level Scope.</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="name_method_scope-2-1">Remember that the parameter variables and the local variables declared inside a method have Method Level Scope.</div>
                </span>
                <pre><span data-incorrect="">public class Name</span>
<span data-incorrect="">{</span>
    <span data-incorrect="">private String first;</span>
    <span data-incorrect="">public String last;</span>

    public Name(<span data-correct="">String theFirst</span>, <span data-correct="">String theLast</span>)
    <span data-incorrect="">{</span>
        <span data-correct="">String firstName = theFirst;</span>
        <span data-incorrect="">first = firstName;</span>
        <span data-incorrect="">last = theLast;</span>
    <span data-incorrect="">}</span>
<span data-incorrect="">}</span>
</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.8.4.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_PersonScope">
                <div class="ac_question" id="csawesome2_2_PersonScope_question">
                  <div class="para" id="PersonScope-1-1">Try the following code to see that you cannot access the variables outside of their scope levels in the toString() method. Explain to someone sitting next to you why you can’t access these. Try to fix the errors by either using variables that are in scope or moving the variable declarations so that the variables have larger scope.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_PersonScope_editor" data-question_label="" data-codelens="true">public class Person
{
    private String name;
    private String email;

    public Person(String initName, String initEmail)
    {
        name = initName;
        email = initEmail;
    }

    public String toString()
    {
        for (int i = 0; i &lt; 5; i++)
        {
            int id = i;
        }
        // Can you access the blockScope variables i or id?
        System.out.println("i at the end of the loop is " + i);
        System.out.println("The last id is " + id);

        // Can toString() access parameter variables in Person()?
        return initName + ": " + initEmail;
    }

    // main method for testing
    public static void main(String[] args)
    {
        // call the constructor to create a new person
        Person p1 = new Person("Sana", "sana@gmail.com");
        System.out.println(p1);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testCodeContains()
    {
        boolean passed =
                checkCodeContains("returning instance variables", "return  name + \": \" + email;");
        assertTrue(passed);
    }

    @Test
    public void testCodeContains2()
    {
        boolean passed =
                checkCodeContains("declaration and initialization of id to 0", "int id = 0;");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.8.4.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_PersonLocalVar">
                <div class="ac_question" id="csawesome2_2_PersonLocalVar_question">
                  <div class="para" id="PersonLocalVar-1-1">In this example, the local variable is used instead of the instance variable of the same name. What will the code print out? Try it with the CodeLens button.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_PersonLocalVar_editor" data-question_label="" data-codelens="true">public class Person
{
    private String name;
    private String email;

    public Person(String initName, String initEmail)
    {
        name = initName;
        email = initEmail;
    }

    public String toString()
    {
        String name = "unknown";
        // The local variable name here will be used,
        //  not the instance variable name.
        return name + ": " + email;
    }

    // main method for testing
    public static void main(String[] args)
    {
        // call the constructor to create a new person
        Person p1 = new Person("Sana", "sana@gmail.com");
        System.out.println(p1);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "unknown: sana@gmail.com";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-7-10</id>
      <title>this Keyword</title>
      <question>
        <label>Exercise 3.9.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-5-9-BankAccount">
                <div class="ac_question" id="csawesome2_2_challenge-5-9-BankAccount_question">
                  <div class="para" id="challenge-5-9-BankAccount-1-1">Create a class called BankAccount that keeps track of the account holder’s name, the account number, and the balance in the account. Create 2 constructors, a toString() method, and withdraw(amount) and deposit(amount) methods. Use the this keyword in the constructor and methods. Test your class in a main method.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-5-9-BankAccount_editor" data-question_label="" data-codelens="true">public class BankAccount {}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("BankAccount");
    }

    @Test
    public void test0()
    {
        String output = getMethodOutput("main");
        String expect = "Something like:\nName 101 100.0\nName 101 200.0\nName 101 100.0";

        boolean passed = !output.contains("Method main does not exist");

        getResults(expect, output, "Expected output from main", passed);
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        String output = checkConstructor(2);
        String expect = "pass";

        boolean passed = getResults(expect, output, "Checking 2-parameter constructor");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String output = checkConstructor(3);
        String expect = "pass";

        boolean passed = getResults(expect, output, "Checking 3-parameter constructor");
        assertTrue(passed);
    }

    @Test
    public void test01()
    {
        String expect = "3 Private";
        String output = testPrivateInstanceVariables();

        boolean passed = getResults(expect, output, "Checking Private Instance Variable(s)");
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "public String toString()";

        boolean passed = checkCodeContainsRegex("toString method", target);
        assertTrue(passed);
    }

    @Test
    public void test41()
    {
        String target = "public void withdraw(*)";

        boolean passed = checkCodeContainsRegex("withdraw method", target);
        assertTrue(passed);
    }

    @Test
    public void test42()
    {
        String target = "public void deposit(*)";

        boolean passed = checkCodeContainsRegex("deposit method", target);
        assertTrue(passed);
    }

    @Test
    public void test5()
    {
        String target = "this.";
        String code = getCode();

        int num = countOccurences(code, target);

        boolean passed = num &gt;= 6;

        getResults("6+", "" + num, "use of this.*", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.9.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-9-2" data-multipleanswers="false"><div class="para" id="AP5-9-2-1-1">5-9-5: Consider the following class definitions.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Liquid
{
    private int currentTemp;

    public Liquid(int ct)
    {
        currentTemp = ct;
    }

    public int getCurrentTemp()
    {
        return currentTemp;
    }

    public void addToJar(LiquidJar j)
    {
        j.addLiquid(this);
    }
}

public class LiquidJar
{
    private int totalTemp;

    public LiquidJar()
    {
        totalTemp = 0;
    }

    public void addLiquid(Liquid l)
    {
        totalTemp += l.getCurrentTemp();
    }

    public int getTotalTemp()
    {
        return totalTemp;
    }
    // Constructor not shown.
}
</code></pre></div> <div class="para" id="AP5-9-2-1-3">Consider the following code segment, which appears in a class other than Liquid or LiquidJar.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">Liquid water = new Liquid(50);
Liquid milk = new Liquid(15);

LiquidJar j = new LiquidJar();
water.addToJar(j);
milk.addToJar(j);
System.out.println(j.getTotalTemp());
</code></pre></div> <div class="para" id="AP5-9-2-1-5">What, if anything, is printed out after the execution of the code segment?</div><li data-component="answer" id="csawesome2_2_AP5-9-2_opt_a"><div class="para" id="AP5-9-2-2-1-1-1">50</div></li><li data-component="feedback" id="csawesome2_2_AP5-9-2_opt_a"><div class="para" id="AP5-9-2-2-1-2-1">The liquid water has a temperature of 50 but more is added to the jar.</div></li><li data-component="answer" id="csawesome2_2_AP5-9-2_opt_b"><div class="para" id="AP5-9-2-2-2-1-1">15</div></li><li data-component="feedback" id="csawesome2_2_AP5-9-2_opt_b"><div class="para" id="AP5-9-2-2-2-2-1">The liquid milk has a temperature of 15 but more is added to the jar.</div></li><li data-component="answer" id="csawesome2_2_AP5-9-2_opt_c" data-correct=""><div class="para" id="AP5-9-2-2-3-1-1">65</div></li><li data-component="feedback" id="csawesome2_2_AP5-9-2_opt_c"><div class="para" id="AP5-9-2-2-3-2-1">Correct! The liquid water with a temperature of 50 and then the liquid milk with a temperature of 15 are added to the jar.</div></li><li data-component="answer" id="csawesome2_2_AP5-9-2_opt_d"><div class="para" id="AP5-9-2-2-4-1-1">Nothing, the code segment attempts to access the private variable currentTemp outside of its scope.</div></li><li data-component="feedback" id="csawesome2_2_AP5-9-2_opt_d"><div class="para" id="AP5-9-2-2-4-2-1">Incorrect. The currentTemp is never used outside its scope.</div></li><li data-component="answer" id="csawesome2_2_AP5-9-2_opt_e"><div class="para" id="AP5-9-2-2-5-1-1">Nothing, the code segment attempts to access the private variable totalTemp outside of its scope.</div></li><li data-component="feedback" id="csawesome2_2_AP5-9-2_opt_e"><div class="para" id="AP5-9-2-2-5-2-1">Incorrect. The totalTemp is never used outside its scope.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.9.4.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_PersonClassThis">
                <div class="ac_question" id="csawesome2_2_PersonClassThis_question">
                  <div class="para" id="PersonClassThis-1-1">Observe the use of the keyword this in the code below. Click on the CodeLens button and then forward to see the memory in action.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_PersonClassThis_editor" data-question_label="" data-codelens="true">public class Person
{
    // instance variables
    private String name;
    private String email;
    private String phoneNumber;

    // constructor
    public Person(String theName)
    {
        this.name = theName;
    }

    // accessor methods - getters
    public String getName()
    {
        return this.name;
    }

    public String getEmail()
    {
        return this.email;
    }

    public String getPhoneNumber()
    {
        return this.phoneNumber;
    }

    // mutator methods - setters
    public void setName(String theName)
    {
        this.name = theName;
    }

    public void setEmail(String theEmail)
    {
        this.email = theEmail;
    }

    public void setPhoneNumber(String thePhoneNumber)
    {
        this.phoneNumber = thePhoneNumber;
    }

    public String toString()
    {
        return this.name + " " + this.email + " " + this.phoneNumber;
    }

    // main method for testing
    public static void main(String[] args)
    {
        Person p1 = new Person("Sana");
        System.out.println(p1);
        Person p2 = new Person("Jean");
        p2.setEmail("jean@gmail.com");
        p2.setPhoneNumber("404 899-9955");
        System.out.println(p2);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Person");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Sana null null\nJean jean@gmail.com 404 899-9955";

        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.9.4.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_PayClassThis">
                <div class="ac_question" id="csawesome2_2_PayClassThis_question">
                  <div class="para" id="PayClassThis-1-1">What does this code print out? Trace through the code with the Show CodeLens button. Notice how the this Pay object is passed to the Overtime constructor.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_PayClassThis_editor" data-question_label="" data-codelens="true">public class Pay
{
    private double pay;

    public Pay(double p)
    {
        pay = p;
    }

    public double getPay()
    {
        return pay;
    }

    public void calculatePayWithOvertime()
    {
        // this Pay object is passed to the Overtime constructor
        Overtime ot = new Overtime(this);
        pay = ot.getOvertimePay();
    }

    public static void main(String[] args)
    {
        Pay myPay = new Pay(100.0);
        myPay.calculatePayWithOvertime();
        System.out.println(myPay.getPay());
    }
}

class Overtime
{
    private double payWithOvertime;

    public Overtime(Pay p)
    {
        payWithOvertime = p.getPay() * 1.5;
    }

    public double getOvertimePay()
    {
        return payWithOvertime;
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "150.0";

        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.9.4.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-9-1" data-multipleanswers="false"><div class="para" id="AP5-9-1-1-1">5-9-3: Consider the following class definitions.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Pay
{
    private double pay;

    public Pay(double p)
    {
        pay = p;
    }

    public double getPay()
    {
        return pay;
    }

    public void calculatePayWithOvertime()
    {
        // this Pay object is passed to the Overtime constructor
        Overtime ot = new Overtime(this);
        pay = ot.getOvertimePay();
    }
}

public class Overtime
{
    private double payWithOvertime;

    public Overtime(Pay p)
    {
        payWithOvertime = p.getPay() * 1.5;
    }

    public double getOvertimePay()
    {
        return payWithOvertime;
    }
}
</code></pre></div> <div class="para" id="AP5-9-1-1-3">The following code segment appears in a class other than Pay or Overtime.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">Pay one = new Pay(20.0);
one.calculatePayWithOvertime();
System.out.println(one.getPay());
</code></pre></div> <div class="para" id="AP5-9-1-1-5">What, if anything, is printed as a result of executing the code segment?</div><li data-component="answer" id="csawesome2_2_AP5-9-1_opt_a"><div class="para" id="AP5-9-1-2-1-1-1">10.0</div></li><li data-component="feedback" id="csawesome2_2_AP5-9-1_opt_a"><div class="para" id="AP5-9-1-2-1-2-1">The pay starts at 20 and then increases with overtime.</div></li><li data-component="answer" id="csawesome2_2_AP5-9-1_opt_b"><div class="para" id="AP5-9-1-2-2-1-1">15.0</div></li><li data-component="feedback" id="csawesome2_2_AP5-9-1_opt_b"><div class="para" id="AP5-9-1-2-2-2-1">If the pay started at 10, this would be the result.</div></li><li data-component="answer" id="csawesome2_2_AP5-9-1_opt_c"><div class="para" id="AP5-9-1-2-3-1-1">20.0</div></li><li data-component="feedback" id="csawesome2_2_AP5-9-1_opt_c"><div class="para" id="AP5-9-1-2-3-2-1">The pay starts at 20 and then increases with overtime.</div></li><li data-component="answer" id="csawesome2_2_AP5-9-1_opt_d" data-correct=""><div class="para" id="AP5-9-1-2-4-1-1">30.0</div></li><li data-component="feedback" id="csawesome2_2_AP5-9-1_opt_d"><div class="para" id="AP5-9-1-2-4-2-1">Correct! The pay starts at 20 and then increases with overtime by multiplying by 1.5.</div></li><li data-component="answer" id="csawesome2_2_AP5-9-1_opt_e"><div class="para" id="AP5-9-1-2-5-1-1">Nothing is printed because the code will not compile.</div></li><li data-component="feedback" id="csawesome2_2_AP5-9-1_opt_e"><div class="para" id="AP5-9-1-2-5-2-1">Incorrect. The code will compile.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>unit-3-summary-1</id>
      <title>Unit 3 Summary</title>
      <question>
        <label>Exercise 3.10.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_ch2_vocab1">
                <span data-subcomponent="question">
                  <div class="para" id="ch2_vocab1-1-1">Drag the definition from the left and drop it on the correct concept on the right.  Click the "Check Me" button to see if you are correct</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="ch2_vocab1-2-1">Review the summaries above.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_ch2_vocab1_drag1">does the actual work in an object-oriented program.</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch2_vocab1_drag1">object</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch2_vocab1_drag2">defines a type</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch2_vocab1_drag2">class</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch2_vocab1_drag3">A programming language that you can use to tell a computer what to do.</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch2_vocab1_drag3">Java</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch2_vocab1_drag4">Translates a Java source file (ends in .java) into a Java class file (ends in .class)</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch2_vocab1_drag4">compiler</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.10.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_ch2_vocab2">
                <span data-subcomponent="question">
                  <div class="para" id="ch2_vocab2-1-1">Drag the definition from the left and drop it on the correct concept on the right.  Click the "Check Me" button to see if you are correct.</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="ch2_vocab2-2-1">Review the summaries above.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_ch2_vocab2_drag1">initializes the fields of an object after it has been created</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch2_vocab2_drag1">constructor</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch2_vocab2_drag2">defines behavior</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch2_vocab2_drag2">method</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch2_vocab2_drag3">holds data or a property</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch2_vocab2_drag3">field</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch2_vocab2_drag4">where execution starts</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch2_vocab2_drag4">main method</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-7-12</id>
      <title>Mixed Up Code Practice</title>
      <question optional="yes">
        <label>Exercise 3.11.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch7ex1muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch7ex1muc-1-1">The following program segment should define a <code class="code-inline tex2jax_ignore">Dog</code> class with a constructor that takes one parameter, <code class="code-inline tex2jax_ignore">name</code>, and sets the value of the Dog’s private <code class="code-inline tex2jax_ignore">name</code> attribute to that. There should also be a <code class="code-inline tex2jax_ignore">getName</code> method which returns the <code class="code-inline tex2jax_ignore">name</code> attribute of the <code class="code-inline tex2jax_ignore">Dog</code> object. But the blocks have been mixed up and include pairs of lines where one is unneeded. Drag the necessary code from the left to the right and put them in order so that the code would work correctly. Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public class Dog
{
---
  private String name;
---
  public String name; : Instance variables should be encapsulated #paired
---
  public Dog(String name)
  {
---
  public Dog Dog(String name)
  { : Constructors never have a return type #paired
---
    this.name = name;
---
  } // end constructor
  public String getName()
  {
---
    return this.name;
---
  } // end getName
} //end class</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.11.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch7ex2muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch7ex2muc-1-1">The following program segment should define a <code class="code-inline tex2jax_ignore">Dog</code> class with a constructor that takes two parameters: <code class="code-inline tex2jax_ignore">name</code> (a String) and <code class="code-inline tex2jax_ignore">age</code> (an integer). These parameters should be saved in correspondingly-named private instance variables. But the blocks have been mixed up and include pairs of lines where one is unneeded. Drag the necessary code from the left to the right and put them in order so that the code would work correctly. Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public class Dog
{
---
public class Dog : Curly braces are required when declaring a class #paired
---
  private String name;
  private int age;
---
  public Dog(String name, int age)
  {
---
  public Dog(name, age)
  { : Methods need to specify the types for arguments #paired
---
    this.name = name;
    this.age = age;
---
    name = name;
    age = age; : When the parameter name is the same as an attribute, you MUST use "this" to refer to the attribute #paired
---
  } // end constructor
} // end class</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.11.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch7ex3muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch7ex3muc-1-1">The following program segment should define a <code class="code-inline tex2jax_ignore">Cat</code> class with a constructor that takes two parameters: <code class="code-inline tex2jax_ignore">name</code> (a String) and <code class="code-inline tex2jax_ignore">age</code> (an integer). These parameters should be saved in correspondingly-named private attributes of <code class="code-inline tex2jax_ignore">Cat</code> objects. Next, there should be a <code class="code-inline tex2jax_ignore">makeSound</code> method that prints <code class="code-inline tex2jax_ignore">"meow"</code>. Finally, there should be a <code class="code-inline tex2jax_ignore">toString</code> method that returns “Name: name, Age: age” (such that <code class="code-inline tex2jax_ignore">Cat("Lucky", 10)</code>’s <code class="code-inline tex2jax_ignore">toString</code> method would return “Name: Lucky, Age: 10”). But the blocks have been mixed up and include pairs of lines where one is unneeded. Drag the necessary code from the left to the right and put them in order so that the code would work correctly. Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public class Cat
{
---
  private String name;
  private int age;
  public Cat(String name, int age)
  {
---
    this.name = name;
    this.age = age;
---
  } // end constructor
  public void makeSound()
  {
---
  } // end constructor
  public String makeSound()
  { : When a method returns nothing, its return type should be "void" #paired
---
     System.out.println("meow");
---
  } // end makeSound
  public String toString()
  {
---
    return "Name: " + this.name + ", Age: " + this.age;
---
  } // end toString
} //end class</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.11.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch7ex4muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch7ex4muc-1-1">The following program segment should define a <code class="code-inline tex2jax_ignore">Square</code> class with a constructor that takes one parameter: <code class="code-inline tex2jax_ignore">length</code> (an integer). This parameter should be saved in a correspondingly-named private attribute of <code class="code-inline tex2jax_ignore">Square</code> objects. The <code class="code-inline tex2jax_ignore">Square</code> class should also have a variable <code class="code-inline tex2jax_ignore">numberOfSquares</code> that tracks how many squares have been created. Finally, there should be a <code class="code-inline tex2jax_ignore">toString</code> method which returns <code class="code-inline tex2jax_ignore">"Length: length"</code> (such that <code class="code-inline tex2jax_ignore">Square(10)</code>’s toString method would return <code class="code-inline tex2jax_ignore">"Length: 10"</code>. But the blocks have been mixed up and include pairs of lines where one is unneeded. Drag the necessary code from the left to the right and put them in order so that the code would work correctly. Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public class Square
{
---
  public static int numberOfSquares = 0;
  private int length;
---
  private int numberOfSquares = 0;
  private int length; : When you need a variable to be accessible for every object of a class, it should be static #paired
---
  public Square(int length)
  {
---
    this.length = length;
    numberOfSquares++;
---
  } // end constructor
---
  public String toString()
  {
---
    return "Length: " + this.length;
---
  } // end toString
} //end class</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.11.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch7ex5muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch7ex5muc-1-1">The following program segment should define a <code class="code-inline tex2jax_ignore">Rectangle</code> class with a constructor that can take zero or two integer parameters. With zero arguments passed, the <code class="code-inline tex2jax_ignore">Rectangle</code> should be initialized with a <code class="code-inline tex2jax_ignore">length</code> of 10 and a <code class="code-inline tex2jax_ignore">width</code> of 10. With two integers passed, the <code class="code-inline tex2jax_ignore">Rectangle</code> should have a <code class="code-inline tex2jax_ignore">length</code> equal to argument1 and a <code class="code-inline tex2jax_ignore">width</code> equal to argument2. There should also be an <code class="code-inline tex2jax_ignore">getArea</code> method that returns the area <code class="code-inline tex2jax_ignore">length</code> times <code class="code-inline tex2jax_ignore">width</code>. But the blocks have been mixed up and include pairs of lines where one is unneeded. Drag the necessary code from the left to the right and put them in order so that the code would work correctly. Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public class Rectangle
{
---
  private int length;
  private int width;
  public Rectangle()
  {
---
    this.length = 10;
    this.width = 10;
---
  } // end zero-argument constructor
  public Rectangle(int length, int width)
  {
---
    this.length = length;
    this.width = width;
---
  } // end two-argument constructor
  public int getArea()
  {
---
    return this.length * this.width;
---
  } // end getArea
} // end class</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.11.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch7ex6muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch7ex6muc-1-1">The following program should define a <code class="code-inline tex2jax_ignore">CelestialBody</code> class. The class should have two instance variables: <code class="code-inline tex2jax_ignore">orbitLength</code> and <code class="code-inline tex2jax_ignore">daysSinceDiscovered</code>. The <code class="code-inline tex2jax_ignore">orbitLength</code> variable should be initialized through the constructor, while <code class="code-inline tex2jax_ignore">daysSinceDiscovered</code> should be derived from <code class="code-inline tex2jax_ignore">orbitLength</code> and the <code class="code-inline tex2jax_ignore">orbit</code> method. The <code class="code-inline tex2jax_ignore">orbit(int numberOfTimes)</code> should add <code class="code-inline tex2jax_ignore">orbitLength * numberOfTimes</code> to <code class="code-inline tex2jax_ignore">daysSinceDiscovered</code> (e.g., if Planet X has done two orbits with an orbit length of 12 days, it was discovered 24 days ago. If it then orbits another three times, it was discovered 60 days ago). But the blocks have been mixed up and include pairs of lines where one is unneeded. Drag the necessary code from the left to the right and put them in order so that the code would work correctly. Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public class CelestialBody
{
---
  private int orbitLength;
  private int daysSinceDiscovered;
---
  public CelestialBody(int orbitLength)
  {
---
    this.daysSinceDiscovered = 0;
    this.orbitLength = orbitLength;
---
    this.orbitLength = orbitLength; : daysSinceDiscovered needs to be initialized #paired
---
  } // end constructor
  public void orbit(int numberOfTimes)
  {
---
  } // end constructor
  public int orbit(int numberOfTimes)
  { : A method who returns nothing should have a void return type #paired
---
    this.daysSinceDiscovered += this.orbitLength * numberOfTimes;
---
  } // end orbit
} // end class</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.11.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch7ex7muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch7ex7muc-1-1">The following program should define a <code class="code-inline tex2jax_ignore">Person</code> class. Each <code class="code-inline tex2jax_ignore">Person</code> instance should have a String <code class="code-inline tex2jax_ignore">name</code> attribute and a integer <code class="code-inline tex2jax_ignore">age</code> attribute. There should also be <code class="code-inline tex2jax_ignore">getName</code> and <code class="code-inline tex2jax_ignore">setName</code> functions. But the blocks have been mixed up and include pairs of lines where one is unneeded. Drag the necessary code from the left to the right and put them in order so that the code would work correctly. Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public class Person
{
---
  private String name;
  private int age;
  public Person(String name, int age)
  {
---
    this.name = name;
    this.age = age;
---
  } // end constructor
  public String getName()
  {
---
    return this.name;
---
  } // end getName
  public void setName(String newName)
  {
---
    this.name = newName;
---
  } // end setName
} // end class</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.11.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch7ex8muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch7ex8muc-1-1">The following program should define a <code class="code-inline tex2jax_ignore">Point</code> class. Each <code class="code-inline tex2jax_ignore">Point</code> instance should have integer <code class="code-inline tex2jax_ignore">x</code> and <code class="code-inline tex2jax_ignore">y</code> attributes (there are associated <code class="code-inline tex2jax_ignore">getX</code> and <code class="code-inline tex2jax_ignore">getY</code> methods whose implementations aren’t shown). There should be a <code class="code-inline tex2jax_ignore">getDistance</code> method that takes in another <code class="code-inline tex2jax_ignore">Point</code> object as an argument and calculates the distance from this object to that one (which would be sqrt((this.x - other.x) ^ 2 + (this.y - other.y) ^ 2)). But the blocks have been mixed up and include pairs of lines where one is unneeded. Drag the necessary code from the left to the right and put them in order so that the code would work correctly. Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public class Point
{
---
  private int x;
  private int y;
  public Point(int x, int y)
  {
---
    this.x = x;
    this.y = y;
---
  } // end constructor
  public double getDistance(Point other)
  {
---
    return Math.sqrt(Math.pow(this.x - other.getX(), 2) + Math.pow(this.y - other.getY(), 2));
---
    return Math.sqrt((this.x - other.getX()) ** 2 + (this.y - other.getY()) ** 2); : Exponents in java should use Math.pow #paired
---
  } // end getDistance
} // end class</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.11.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch7ex9muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch7ex9muc-1-1">The following program should define an <code class="code-inline tex2jax_ignore">Account</code> class. Each <code class="code-inline tex2jax_ignore">Account</code> instance should have integer <code class="code-inline tex2jax_ignore">balance</code> and String <code class="code-inline tex2jax_ignore">owner</code> attributes (and the constructor should take those in that order). To decrease <code class="code-inline tex2jax_ignore">balance</code>, there should be a <code class="code-inline tex2jax_ignore">withdraw</code> method that takes in an integer argument and subtracts that from <code class="code-inline tex2jax_ignore">balance</code>. However, if <code class="code-inline tex2jax_ignore">balance</code> would end as a negative number, it should just be set to zero. But the blocks have been mixed up and include pairs of lines where one is unneeded. Drag the necessary code from the left to the right and put them in order so that the code would work correctly. Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public class Account
{
---
  private int balance;
  private String owner;
  public Account(int balance, String owner)
  {
---
    this.balance = balance;
    this.owner = owner;
---
  } // end constructor
  public void withdraw(int amount)
  {
---
    if (amount &gt; this.balance)
    {
---
      this.balance = 0;
---
    } // end if
    else {
---
      this.balance -= amount;
---
    } // end else
---
  } // end withdraw
} // end class</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.11.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch7ex10muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch7ex10muc-1-1">The following program should define a <code class="code-inline tex2jax_ignore">Character</code> class. Each <code class="code-inline tex2jax_ignore">Character</code> instance should have a integer <code class="code-inline tex2jax_ignore">healthPoints</code> attribute and a String <code class="code-inline tex2jax_ignore">name</code> attribute. There is a constructor and <code class="code-inline tex2jax_ignore">getHP</code>, <code class="code-inline tex2jax_ignore">setHP</code>, and <code class="code-inline tex2jax_ignore">getName</code> methods that are not shown. Finally, there needs to be a <code class="code-inline tex2jax_ignore">fight(Character other)</code> method that lets a character fight another. If the character’s <code class="code-inline tex2jax_ignore">healthPoints</code> are the same or more than <code class="code-inline tex2jax_ignore">other</code>’s, <code class="code-inline tex2jax_ignore">other</code>’s HP should be set to zero, the current character’s HP should be set to the difference, and the program should print “{the character’s name} wins”. If <code class="code-inline tex2jax_ignore">other</code>’s HP is greater, the current character’s HP should be set to zero, <code class="code-inline tex2jax_ignore">other</code>’s HP should be set to the difference, and the program should print “{other’s name} wins”. But the blocks have been mixed up and include pairs of lines where one is unneeded. Drag the necessary code from the left to the right and put them in order so that the code would work correctly. Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public class Character
{
---
  // instance variables, constructor, &amp; getter/setters not shown
---
  public void fight(Character other)
  {
---
    if (this.getHP() &gt;= other.getHP())
    {
---
    this.setHP(this.getHP() - other.getHP());
    other.setHP(0);
    System.out.println(this.getName() + " wins");
---
    } // end if
---
    else
    {
---
      other.setHP(other.getHP() - this.getHP());
      this.setHP(0);
      System.out.println(other.getName() + " wins");
---
    } // end else
---
  } // end fight
} // end class</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-001709</id>
      <title>Toggle Mixed Up or Write Code Practice</title>
    </subchapter>
    <subchapter>
      <id>csawesome2-7-14</id>
      <title>Multiple-Choice Exercises</title>
      <question optional="yes">
        <label>Exercise 3.13.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-1-3" data-multipleanswers="false"><div class="para" id="AP5-1-3-1-1">5-14-1: The Liquid class will contain two double attributes for a liquid’s boiling point temperature and freezing point temperature. The class will also contain a constructor.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Liquid
{
   /* missing code */
}
Which of the following replacements for /* missing code */ is the most appropriate
implementation of the class?
</code></pre></div><li data-component="answer" id="csawesome2_2_AP5-1-3_opt_a" data-correct=""><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private double boilingPoint;
private double freezingPoint;
public Liquid(double boilingPoint, double freezingPoint)
{ /* implementation not shown */ }
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-1-3_opt_a"><div class="para" id="AP5-1-3-2-1-2-1">Correct! The instance variables should be private and the constructor and methods should be public.</div></li><li data-component="answer" id="csawesome2_2_AP5-1-3_opt_b"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private double boilingPoint;
private double freezingPoint;
private Liquid(double boilingPoint, double freezingPoint)
{ /* implementation not shown */ }
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-1-3_opt_b"><div class="para" id="AP5-1-3-2-2-2-1">Constructors should be public.</div></li><li data-component="answer" id="csawesome2_2_AP5-1-3_opt_c"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private double boilingPoint;
public double freezingPoint;
private Liquid(double freezingPoint, double boilingPoint)
{ /* implementation not shown */ }
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-1-3_opt_c"><div class="para" id="AP5-1-3-2-3-2-1">The instance variables should be private and the constructor and methods should be public.</div></li><li data-component="answer" id="csawesome2_2_AP5-1-3_opt_d"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public double boilingPoint;
public double freezingPoint;
private Liquid(double boilingPoint, double freezingPoint)
{ /* implementation not shown */ }
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-1-3_opt_d"><div class="para" id="AP5-1-3-2-4-2-1">The instance variables should be private and the constructor and methods should be public.</div></li><li data-component="answer" id="csawesome2_2_AP5-1-3_opt_e"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public double freezingPoint;
public double boilingPoint;
public Liquid(double freezingPoint, double boilingPoint)
{ /* implementation not shown */ }
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-1-3_opt_e"><div class="para" id="AP5-1-3-2-5-2-1">The instance variables should be private.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.13.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-1-4" data-multipleanswers="false"><div class="para" id="AP5-1-4-1-1">5-14-2: The Cat class below will contain two String attributes and one int attribute for name, color, and age; a constructor; and an adoptCat method. The adoptCat method is intended to be accessed outside the class.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Cat
{
  /* missing code */
}
Which of the following replacements for /* missing code */ is the most appropriate
implementation of the class?
</code></pre></div><li data-component="answer" id="csawesome2_2_AP5-1-4_opt_a"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private String name;
private String color;
private int age;
public Cat()
{ /* implementation not shown */ }
private void adoptCat(String n, String c, int a)
{ /* implementation not shown */ }
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-1-4_opt_a"><div class="para" id="AP5-1-4-2-1-2-1">Method adoptCat() should be public.</div></li><li data-component="answer" id="csawesome2_2_AP5-1-4_opt_b"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public String name;
public String color;
public int age;
private Cat()
{ /* implementation not shown */ }
private void adoptCat(String n, String c, int a)
{ /* implementation not shown */ }
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-1-4_opt_b"><div class="para" id="AP5-1-4-2-2-2-1">Method and constructor should be public, and instance variables should be private.</div></li><li data-component="answer" id="csawesome2_2_AP5-1-4_opt_c" data-correct=""><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private String name;
private String color;
private int age;
public Cat()
{ /* implementation not shown */ }
public void adoptCat(String n, String c, int a)
{ /* implementation not shown */ }
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-1-4_opt_c"><div class="para" id="AP5-1-4-2-3-2-1">Correct! Method and constructor should be public, and instance variables should be private.</div></li><li data-component="answer" id="csawesome2_2_AP5-1-4_opt_d"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public String name;
public String color;
public int age;
public Cat()
{ /* implementation not shown */ }
public void adoptCat(String n, String c, int a)
{ /* implementation not shown */ }
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-1-4_opt_d"><div class="para" id="AP5-1-4-2-4-2-1">Instance variables should be private.</div></li><li data-component="answer" id="csawesome2_2_AP5-1-4_opt_e"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public String name;
public String color;
public int age;
private Cat()
{ /* implementation not shown */ }
public void adoptCat(String n, String c, int a)
{ /* implementation not shown */ }
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-1-4_opt_e"><div class="para" id="AP5-1-4-2-5-2-1">Instance variables should be private, and the constructor should be public.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.13.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-2-4" data-multipleanswers="false"><div class="para" id="AP5-2-4-1-1">5-14-3: Consider the definition of the Party class below. The class uses the instance variable numOfPeople to indicate how many people are at the party.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Party
{
    private int numOfPeople;
    private String partyHost;

    public Party (String name, int people)
    {
        partyHost = name;
        numOfPeople = people;
    }
}

Which of the following statements will create a Party object
that represents a party that has three people at it?
</code></pre></div><li data-component="answer" id="csawesome2_2_AP5-2-4_opt_a"><div class="para" id="AP5-2-4-2-1-1-1">Party p = new Party (“Natasha”, “3”);</div></li><li data-component="feedback" id="csawesome2_2_AP5-2-4_opt_a"><div class="para" id="AP5-2-4-2-1-2-1">An int should be passed in as the second parameter, not a String.</div></li><li data-component="answer" id="csawesome2_2_AP5-2-4_opt_b" data-correct=""><div class="para" id="AP5-2-4-2-2-1-1">Party p = new Party (“Eduardo”, 3);</div></li><li data-component="feedback" id="csawesome2_2_AP5-2-4_opt_b"><div class="para" id="AP5-2-4-2-2-2-1">Correct</div></li><li data-component="answer" id="csawesome2_2_AP5-2-4_opt_c"><div class="para" id="AP5-2-4-2-3-1-1">Party p = new Party (“Emillio”, “three”);</div></li><li data-component="feedback" id="csawesome2_2_AP5-2-4_opt_c"><div class="para" id="AP5-2-4-2-3-2-1">An int should be passed in as the second parameter, not a string.</div></li><li data-component="answer" id="csawesome2_2_AP5-2-4_opt_d"><div class="para" id="AP5-2-4-2-4-1-1">Party p = new Party (“Bob”, three);</div></li><li data-component="feedback" id="csawesome2_2_AP5-2-4_opt_d"><div class="para" id="AP5-2-4-2-4-2-1">The word three would be treated as an undeclared variable here.</div></li><li data-component="answer" id="csawesome2_2_AP5-2-4_opt_e"><div class="para" id="AP5-2-4-2-5-1-1">Party p = new Party (“Billie”, “2+1”);</div></li><li data-component="feedback" id="csawesome2_2_AP5-2-4_opt_e"><div class="para" id="AP5-2-4-2-5-2-1">Strings cannot perform addition.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.13.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-2-5" data-multipleanswers="false"><div class="para" id="AP5-2-5-1-1">5-14-4: Consider the following class definition. Each object of the class Party will store the party host’s name as partyHost, the number of people as numOfPeople, and the capacity that the event can hold as capacity. Which of the following code segments, found in a class other than Party, can be used to create a party hosted by Charlie without anyone there initially, but the place can hold 78 people ?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Party
{
    private String partyHost;
    private int numOfPeople;
    private int capacity;

    public Party(String name, int num, int cap)
    {
        partyHost = name;
        numOfPeople = num;
        capacity = cap;
    }
    public Party (String name, int cap)
    {
        partyHost = name;
        numOfPeople = 0;
        capacity = cap;
    }
    /* Other methods not shown */
}

I.   Party b = new Party("Charlie", 78);
II.  Party b = new Party("Charlie", 0, 70+8);
III. Party b = new Party("Charlie", 0, 78);
</code></pre></div><li data-component="answer" id="csawesome2_2_AP5-2-5_opt_a"><div class="para" id="AP5-2-5-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_AP5-2-5_opt_a"><div class="para" id="AP5-2-5-2-1-2-1">II and III can also create a correct Party instance</div></li><li data-component="answer" id="csawesome2_2_AP5-2-5_opt_b"><div class="para" id="AP5-2-5-2-2-1-1">I and II</div></li><li data-component="feedback" id="csawesome2_2_AP5-2-5_opt_b"><div class="para" id="AP5-2-5-2-2-2-1">III can also create a correct Party instance</div></li><li data-component="answer" id="csawesome2_2_AP5-2-5_opt_c"><div class="para" id="AP5-2-5-2-3-1-1">I and III</div></li><li data-component="feedback" id="csawesome2_2_AP5-2-5_opt_c"><div class="para" id="AP5-2-5-2-3-2-1">II can also create a correct Party instance</div></li><li data-component="answer" id="csawesome2_2_AP5-2-5_opt_d" data-correct=""><div class="para" id="AP5-2-5-2-4-1-1">I, II, and III</div></li><li data-component="feedback" id="csawesome2_2_AP5-2-5_opt_d"><div class="para" id="AP5-2-5-2-4-2-1">I, II, and III can successfully create the Party instance.</div></li><li data-component="answer" id="csawesome2_2_AP5-2-5_opt_e"><div class="para" id="AP5-2-5-2-5-1-1">II and III</div></li><li data-component="feedback" id="csawesome2_2_AP5-2-5_opt_e"><div class="para" id="AP5-2-5-2-5-2-1">I can also create a correct Party instance</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.13.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-2-6" data-multipleanswers="false"><div class="para" id="AP5-2-6-1-1">5-14-5: Consider the following class definition.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Party
{
    private int numOfPeople;
    private double volumeOfMusic;
    /* missing constructor */
}
</code></pre></div> <div class="para" id="AP5-2-6-1-3">The following statement appears in a method in a class other than Party. It is intended to create a new Party object p with its attributes set to 10 and 5.0.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">Party p = new Party(10, 5.0);

Which of the following can be used to replace /* missing constructor */
so that the object p is correctly created?
</code></pre></div><li data-component="answer" id="csawesome2_2_AP5-2-6_opt_a"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public Party(int first, double second)
{
    numOfPeople = 10;
    volumeOfMusic = 5.0;
}
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-2-6_opt_a"><div class="para" id="AP5-2-6-2-1-2-1">The constructor should be using the local variables to set the instance variables.</div></li><li data-component="answer" id="csawesome2_2_AP5-2-6_opt_b" data-correct=""><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public Party(int first, double second)
{
    numOfPeople = first;
    volumeOfMusic = second;
}
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-2-6_opt_b"><div class="para" id="AP5-2-6-2-2-2-1">Correct</div></li><li data-component="answer" id="csawesome2_2_AP5-2-6_opt_c"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public Party(int first, double second)
{
    first = 10;
    second = 5.0;
}
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-2-6_opt_c"><div class="para" id="AP5-2-6-2-3-2-1">The constructor should be using the parameters to set the instance variables.</div></li><li data-component="answer" id="csawesome2_2_AP5-2-6_opt_d"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public Party(int first, double second)
{
    first = numOfPeople;
    second = volumeOfMusic;
}
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP5-2-6_opt_d"><div class="para" id="AP5-2-6-2-4-2-1">The constructor should be changing the instance variables, not the local variables.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.13.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-3-3" data-multipleanswers="false"><div class="para" id="AP5-3-3-1-1">5-14-6: Consider the following class definition that defines a Liquid class with a boilingPoint, a currentTemperature, and a freezingPoint. For example, Liquid water = new Liquid(100, 50, 0); defines a water object with a boiling point of 100, a current temperature of 50, and a freezing temperature of 0.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Liquid
{
    private int boilingPoint;
    private int currentTemp;
    private int freezingPoint;

    public Liquid(int bp, int ct, int fp)
    {
        boilingPoint = bp;
        currentTemp = ct;
        freezingPoint = fp;
    }
    /* Other methods not shown */
}
</code></pre></div> <div class="para" id="AP5-3-3-1-3">Which of the following preconditions is reasonable for the Liquid constructor?</div><li data-component="answer" id="csawesome2_2_AP5-3-3_opt_a"><div class="para" id="AP5-3-3-2-1-1-1">Precondition: fp &gt; 0</div></li><li data-component="feedback" id="csawesome2_2_AP5-3-3_opt_a"><div class="para" id="AP5-3-3-2-1-2-1">Incorrect. The freezing point could be negative.</div></li><li data-component="answer" id="csawesome2_2_AP5-3-3_opt_b"><div class="para" id="AP5-3-3-2-2-1-1">Precondition: currentTemp &gt; 0</div></li><li data-component="feedback" id="csawesome2_2_AP5-3-3_opt_b"><div class="para" id="AP5-3-3-2-2-2-1">Incorrect. Unable to make this assumption for all liquids.</div></li><li data-component="answer" id="csawesome2_2_AP5-3-3_opt_c" data-correct=""><div class="para" id="AP5-3-3-2-3-1-1">Precondition: fp &lt; ct &lt; bp</div></li><li data-component="feedback" id="csawesome2_2_AP5-3-3_opt_c"><div class="para" id="AP5-3-3-2-3-2-1">Correct!</div></li><li data-component="answer" id="csawesome2_2_AP5-3-3_opt_d"><div class="para" id="AP5-3-3-2-4-1-1">Precondition: fp &gt; ct &gt; bp</div></li><li data-component="feedback" id="csawesome2_2_AP5-3-3_opt_d"><div class="para" id="AP5-3-3-2-4-2-1">Incorrect. This would again result in freezing point being &gt; boiling point which is impossible.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.13.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-4-4" data-multipleanswers="false"><div class="para" id="AP5-4-4-1-1">5-14-7:  Consider the following Cat class, with the cat’s age stored in the method’s int attribute. The getAge method is intended to allow methods in other classes to access a Cat object’s age value; however, it does not work as intended. Which of the following best explains why the getAge method does NOT work as intended?</div> <blockquote class="blockquote" id="AP5-4-4-1-2"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Cat
{
    private int age;

    public Cat(int a)
    {
        age = a;
    }

    public int getAge()
    {
        return a;
    }
}
</code></pre></div></blockquote><li data-component="answer" id="csawesome2_2_AP5-4-4_opt_a"><div class="para" id="AP5-4-4-2-1-1-1">The getAge method should be declared as private.</div></li><li data-component="feedback" id="csawesome2_2_AP5-4-4_opt_a"><div class="para" id="AP5-4-4-2-1-2-1">The method should be public so it can be accessed outside of the class.</div></li><li data-component="answer" id="csawesome2_2_AP5-4-4_opt_b"><div class="para" id="AP5-4-4-2-2-1-1">The return type of the getAge method should be void.</div></li><li data-component="feedback" id="csawesome2_2_AP5-4-4_opt_b"><div class="para" id="AP5-4-4-2-2-2-1">The method return type should stay as int.</div></li><li data-component="answer" id="csawesome2_2_AP5-4-4_opt_c"><div class="para" id="AP5-4-4-2-3-1-1">The getAge method should have at least one parameter.</div></li><li data-component="feedback" id="csawesome2_2_AP5-4-4_opt_c"><div class="para" id="AP5-4-4-2-3-2-1">The getAge should not take any parameters.</div></li><li data-component="answer" id="csawesome2_2_AP5-4-4_opt_d"><div class="para" id="AP5-4-4-2-4-1-1">The variable age is not declared inside the getAge method.</div></li><li data-component="feedback" id="csawesome2_2_AP5-4-4_opt_d"><div class="para" id="AP5-4-4-2-4-2-1">This is an instance variable and should be declared outside.</div></li><li data-component="answer" id="csawesome2_2_AP5-4-4_opt_e" data-correct=""><div class="para" id="AP5-4-4-2-5-1-1">The instance variable age should be returned instead of a, which is local to the constructor.</div></li><li data-component="feedback" id="csawesome2_2_AP5-4-4_opt_e"><div class="para" id="AP5-4-4-2-5-2-1">The accessor method getAge should return the instance variable age.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.13.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-4-3" data-multipleanswers="false"><div class="para" id="AP5-4-3-1-1">5-14-8: Consider the following Liquid class. The currentTemperature is stored in the method’s int attribute. The getCurrentTemp method is intended to allow methods in other classes to access a Liquid object’s currentTemperature value; however, it does not work as intended. Which of the following best explains why the getCurrentTemperature method does NOT work as intended?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Liquid
{
    private int currentTemperature;

    public Liquid(int ct)
    {
        currentTemperature = ct;
    }

    public void getCurrentTemperature()
    {
        return currentTemperature;
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_AP5-4-3_opt_a"><div class="para" id="AP5-4-3-2-1-1-1">The getCurrentTemperature method should be declared as private.</div></li><li data-component="feedback" id="csawesome2_2_AP5-4-3_opt_a"><div class="para" id="AP5-4-3-2-1-2-1">Accessor methods should be public methods.</div></li><li data-component="answer" id="csawesome2_2_AP5-4-3_opt_b" data-correct=""><div class="para" id="AP5-4-3-2-2-1-1">The return type of the getCurrentTemperature method should be int.</div></li><li data-component="feedback" id="csawesome2_2_AP5-4-3_opt_b"><div class="para" id="AP5-4-3-2-2-2-1">Correct! The return type should match the type of the variable being returned.</div></li><li data-component="answer" id="csawesome2_2_AP5-4-3_opt_c"><div class="para" id="AP5-4-3-2-3-1-1">The getCurrentTemperature method should have at least one parameter.</div></li><li data-component="feedback" id="csawesome2_2_AP5-4-3_opt_c"><div class="para" id="AP5-4-3-2-3-2-1">Get methods do not need parameters.</div></li><li data-component="answer" id="csawesome2_2_AP5-4-3_opt_d"><div class="para" id="AP5-4-3-2-4-1-1">The variable currentTemperature is not declared inside of the getCurrentTemperature method.</div></li><li data-component="feedback" id="csawesome2_2_AP5-4-3_opt_d"><div class="para" id="AP5-4-3-2-4-2-1">currentTemperature is an instance variable that is shared by all the methods in the class.</div></li><li data-component="answer" id="csawesome2_2_AP5-4-3_opt_e"><div class="para" id="AP5-4-3-2-5-1-1">The instance variable ct should be returned instead of currentTemperature.</div></li><li data-component="feedback" id="csawesome2_2_AP5-4-3_opt_e"><div class="para" id="AP5-4-3-2-5-2-1">The getCurrentTemperature method does not have access to the ct variable which is the parameter for the constructor.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.13.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-5-3" data-multipleanswers="false"><div class="para" id="AP5-5-3-1-1">5-14-9: Consider the following class definition.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Liquid
{
    private int currentTemp;

    public Liquid(int temp)
    {
        currentTemp = temp;
    }

    public int getTemp()
    {
        return currentTemp;
    }

    public void resetTemp(int new_temp)
    {
        currentTemp = new_temp;
    }
}
</code></pre></div> <div class="para" id="AP5-5-3-1-3">Consider the following code segment, which appears in a method in a class other than Liquid. The code segment does not compile.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">Liquid liq = new Liquid(50);
System.out.println("The temperature of the liquid is " + liq.currentTemp);
</code></pre></div> <div class="para" id="AP5-5-3-1-5">Which of the following best identifies the reason the code segment does not compile?</div><li data-component="answer" id="csawesome2_2_AP5-5-3_opt_a"><div class="para" id="AP5-5-3-2-1-1-1">The Liquid class constructor should not have a parameter.</div></li><li data-component="feedback" id="csawesome2_2_AP5-5-3_opt_a"><div class="para" id="AP5-5-3-2-1-2-1">The constructor does have a parameter.</div></li><li data-component="answer" id="csawesome2_2_AP5-5-3_opt_b"><div class="para" id="AP5-5-3-2-2-1-1">The resetTemperature method does not return a value that can be printed.</div></li><li data-component="feedback" id="csawesome2_2_AP5-5-3_opt_b"><div class="para" id="AP5-5-3-2-2-2-1">This is a void mutator method.</div></li><li data-component="answer" id="csawesome2_2_AP5-5-3_opt_c" data-correct=""><div class="para" id="AP5-5-3-2-3-1-1">The private instance variable cannot be accessed from outside the class unless the accessor method is used.</div></li><li data-component="feedback" id="csawesome2_2_AP5-5-3_opt_c"><div class="para" id="AP5-5-3-2-3-2-1">Correct! The currentTemp instance variable is private and cannot be accessed outside of the class but the public accessor method getTemp() can be used instead.</div></li><li data-component="answer" id="csawesome2_2_AP5-5-3_opt_d"><div class="para" id="AP5-5-3-2-4-1-1">The getTemp method cannot be called from outside the Liquid class.</div></li><li data-component="feedback" id="csawesome2_2_AP5-5-3_opt_d"><div class="para" id="AP5-5-3-2-4-2-1">The getTemp accessor method should be used from outside the class.</div></li><li data-component="answer" id="csawesome2_2_AP5-5-3_opt_e"><div class="para" id="AP5-5-3-2-5-1-1">currentTemp does not have a value.</div></li><li data-component="feedback" id="csawesome2_2_AP5-5-3_opt_e"><div class="para" id="AP5-5-3-2-5-2-1">currentTemp is initialized to a value by the constructor but it is private and cannot be accessed outside the class.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.13.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-5-4" data-multipleanswers="false"><div class="para" id="AP5-5-4-1-1">5-14-10: In the Liquid class below, the raiseTemperature method is intended to increase the value of the instance variable currentTemp by the value of the parameter increase. The method does not work as intended.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Liquid
{
    private int currentTemp;

    public Liquid(int ct)
    {
        currentTemp = ct;
    }

    public void raiseTemperature(int increase) // Line 10
            {
        return currentTemp + increase; // Line 12
    }
}
</code></pre></div> <div class="para" id="AP5-5-4-1-3">Which of the following changes should be made so that the class definition compiles without error and the method raiseTemperature works as intended?</div><li data-component="answer" id="csawesome2_2_AP5-5-4_opt_a" data-correct=""><div class="para" id="AP5-5-4-2-1-1-1">Replace line 12 with <code class="code-inline tex2jax_ignore">currentTemp += increase;</code></div></li><li data-component="feedback" id="csawesome2_2_AP5-5-4_opt_a"><div class="para" id="AP5-5-4-2-1-2-1">Correct! This void mutator method should just change the value of currentTemp and not return a value.</div></li><li data-component="answer" id="csawesome2_2_AP5-5-4_opt_b"><div class="para" id="AP5-5-4-2-2-1-1">Replace line 12 with <code class="code-inline tex2jax_ignore">return currentTemp += increase;</code></div></li><li data-component="feedback" id="csawesome2_2_AP5-5-4_opt_b"><div class="para" id="AP5-5-4-2-2-2-1">This void mutator method should just change the value of currentTemp and not return a value.</div></li><li data-component="answer" id="csawesome2_2_AP5-5-4_opt_c"><div class="para" id="AP5-5-4-2-3-1-1">Replace line 12 with  <code class="code-inline tex2jax_ignore">increase += currentTemp;</code></div></li><li data-component="feedback" id="csawesome2_2_AP5-5-4_opt_c"><div class="para" id="AP5-5-4-2-3-2-1">This method should  change the value of currentTemp, not increase.</div></li><li data-component="answer" id="csawesome2_2_AP5-5-4_opt_d"><div class="para" id="AP5-5-4-2-4-1-1">Replace line 10 with  <code class="code-inline tex2jax_ignore">public raiseTemperature(int increase)</code></div></li><li data-component="feedback" id="csawesome2_2_AP5-5-4_opt_d"><div class="para" id="AP5-5-4-2-4-2-1">This mutator method needs a return type of void.</div></li><li data-component="answer" id="csawesome2_2_AP5-5-4_opt_e"><div class="para" id="AP5-5-4-2-5-1-1">Replace line 10 with  <code class="code-inline tex2jax_ignore">public int raiseTemperature(int increase)</code></div></li><li data-component="feedback" id="csawesome2_2_AP5-5-4_opt_e"><div class="para" id="AP5-5-4-2-5-2-1">This mutator method should have a void return value and just change the value of currentTemp without returning a value.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.13.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-6-3" data-multipleanswers="false"><div class="para" id="AP5-6-3-1-1">5-14-11: Consider the following class definition. The calculatePizzaCostPerPerson method is intended to calculate the amount each person at the party must pay for pizza. The amount is equal to the total price of all the pizza boxes divided by the number of people at the party. Which of the following code segments should replace <em class="emphasis">missing code</em> so that the calculatePizzaCostPerPerson method will work as intended?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Party
{
    private int numOfPeople; // number of people at the party

    public Party(int people)
    {
        numOfPeople = people;
    }

    public double calculatePizzaCostPerPerson(
            int numOfBoxes, double priceOfOnePizzaBox)
            {
        /* missing code */
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_AP5-6-3_opt_a"><div class="para" id="AP5-6-3-2-1-1-1">return (numOfBoxes + priceOfOnePizzaBox) / numOfPeople;</div></li><li data-component="feedback" id="csawesome2_2_AP5-6-3_opt_a"><div class="para" id="AP5-6-3-2-1-2-1">Assume you have 5 boxes at $10 each. You would need to multiply them to get a total cost of $50. If you had 10 people at the party, you would need to divide $50 by 10 to get $5 per person.</div></li><li data-component="answer" id="csawesome2_2_AP5-6-3_opt_b"><div class="para" id="AP5-6-3-2-2-1-1">return numOfPeople * numOfBoxes * priceOfOnePizzaBox;.</div></li><li data-component="feedback" id="csawesome2_2_AP5-6-3_opt_b"><div class="para" id="AP5-6-3-2-2-2-1">Assume you have 5 boxes at $10 each for a total cost of $50. If you had 10 people at the party, you would need to divide $50 by 10 to get $5 per person.</div></li><li data-component="answer" id="csawesome2_2_AP5-6-3_opt_c"><div class="para" id="AP5-6-3-2-3-1-1">return numOfBoxes / priceOfOnePizzaBox / numOfPeople;</div></li><li data-component="feedback" id="csawesome2_2_AP5-6-3_opt_c"><div class="para" id="AP5-6-3-2-3-2-1">Assume you have 5 boxes at $10 each. You would need to multiply them to get a total cost of $50. If you had 10 people at the party, you would need to divide $50 by 10 to get $5 per person.</div></li><li data-component="answer" id="csawesome2_2_AP5-6-3_opt_d"><div class="para" id="AP5-6-3-2-4-1-1">return numOfPeople / (numOfBoxes * priceOfOnePizzaBox);</div></li><li data-component="feedback" id="csawesome2_2_AP5-6-3_opt_d"><div class="para" id="AP5-6-3-2-4-2-1">Assume you have 5 boxes at $10 each for a total cost of $50. If you had 10 people at the party, you would need to divide $50 by 10 to get $5 per person.</div></li><li data-component="answer" id="csawesome2_2_AP5-6-3_opt_e" data-correct=""><div class="para" id="AP5-6-3-2-5-1-1">return (numOfBoxes * priceOfOnePizzaBox) / numOfPeople;</div></li><li data-component="feedback" id="csawesome2_2_AP5-6-3_opt_e"><div class="para" id="AP5-6-3-2-5-2-1">Assume you have 5 boxes at $10 each for a total cost of $50. If you had 10 people at the party, you would need to divide $50 by 10 to get $5 per person.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.13.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-6-4" data-multipleanswers="false"><div class="para" id="AP5-6-4-1-1">5-14-12: Consider the Party class below.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Party
{
    private int numOfPeople; // number of people at the party
    private int capacity; // total capacity of people at party

    public Party(int people, int cap)
    {
        numOfPeople = people;
        capacity = cap;
    }

    public boolean updateNumOfPeople(int additionalPeople)
    {
        /* missing code */
    }
}
</code></pre></div> <div class="para" id="AP5-6-4-1-3">The class contains the updateNumOfPeople method, which is intended to update the instance variable numOfPeople under certain conditions and return a value indicating whether the  update was successful. If adding additionalPeople to the current number of people would lead to the number going over the capacity, then the update would be unsuccessful. Otherwise, if adding the number of additional people is still below or at the capacity, the update is successful. Which of the following code segments can replace <em class="emphasis">missing code</em> to ensure that the updateNumOfPeople method works as intended?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">I.  if (numOfPeople + additionalPeople &gt; capacity)
    {
        return false;
    }
    else
    {
        numOfPeople += additionalPeople;
        return true;
    }
II. if (numOfPeople + additionalPeople &lt;= capacity)
    {
        numOfPeople += additionalPeople;
        return true;
    }
    else
    {
        return false;
    }
III. if (numOfPeople += additionalPeople &lt;= capacity)
     {
        return true;
     }
     else
     {
        return false;
     }
</code></pre></div><li data-component="answer" id="csawesome2_2_AP5-6-4_opt_a"><div class="para" id="AP5-6-4-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_AP5-6-4_opt_a"><div class="para" id="AP5-6-4-2-1-2-1">I would work but this is not the only code that would work.</div></li><li data-component="answer" id="csawesome2_2_AP5-6-4_opt_b"><div class="para" id="AP5-6-4-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_AP5-6-4_opt_b"><div class="para" id="AP5-6-4-2-2-2-1">II would work but this is not the only code that would work.</div></li><li data-component="answer" id="csawesome2_2_AP5-6-4_opt_c"><div class="para" id="AP5-6-4-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_AP5-6-4_opt_c"><div class="para" id="AP5-6-4-2-3-2-1">You cannot put a shortcut assignment operator in the conditional test of an if statement.</div></li><li data-component="answer" id="csawesome2_2_AP5-6-4_opt_d" data-correct=""><div class="para" id="AP5-6-4-2-4-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_AP5-6-4_opt_d"><div class="para" id="AP5-6-4-2-4-2-1">Correct!</div></li><li data-component="answer" id="csawesome2_2_AP5-6-4_opt_e"><div class="para" id="AP5-6-4-2-5-1-1">I, II, and III</div></li><li data-component="feedback" id="csawesome2_2_AP5-6-4_opt_e"><div class="para" id="AP5-6-4-2-5-2-1">III would not work because you cannot put a shortcut assignment operator in the conditional test of an if statement.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.13.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-8-3" data-multipleanswers="false"><div class="para" id="AP5-8-3-1-1">5-14-13: Consider the following class definition.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Liquid
{
    private int currentTemp;
    private int boilingPoint;

    public Liquid(int ct, int bp)
    {
        currentTemp = ct;
        boilingPoint = bp;
    }

    public void changeTemp(int newTemp)
    {
        currentTemp = newTemp;
    }

    public void increaseTemp(int howMuch)
    {
        currentTemp = newTemp + howMuch;
    }
}
</code></pre></div> <div class="para" id="AP5-8-3-1-3">Which of the following best explains why the class will not compile?</div><li data-component="answer" id="csawesome2_2_AP5-8-3_opt_a"><div class="para" id="AP5-8-3-2-1-1-1">The class is missing an accessor method.</div></li><li data-component="feedback" id="csawesome2_2_AP5-8-3_opt_a"><div class="para" id="AP5-8-3-2-1-2-1">The class does not necessarily need an accessor method.</div></li><li data-component="answer" id="csawesome2_2_AP5-8-3_opt_b"><div class="para" id="AP5-8-3-2-2-1-1">The instance variables currentTemp and boilingPoint should be  public instead of private.</div></li><li data-component="feedback" id="csawesome2_2_AP5-8-3_opt_b"><div class="para" id="AP5-8-3-2-2-2-1">Instance variables are usually private.</div></li><li data-component="answer" id="csawesome2_2_AP5-8-3_opt_c"><div class="para" id="AP5-8-3-2-3-1-1">The Liquid constructor needs a return type.</div></li><li data-component="feedback" id="csawesome2_2_AP5-8-3_opt_c"><div class="para" id="AP5-8-3-2-3-2-1">Constructors do not have return types.</div></li><li data-component="answer" id="csawesome2_2_AP5-8-3_opt_d"><div class="para" id="AP5-8-3-2-4-1-1">The Liquid class is missing a constructor.</div></li><li data-component="feedback" id="csawesome2_2_AP5-8-3_opt_d"><div class="para" id="AP5-8-3-2-4-2-1">The class includes a constructor.</div></li><li data-component="answer" id="csawesome2_2_AP5-8-3_opt_e" data-correct=""><div class="para" id="AP5-8-3-2-5-1-1">The variable newTemp is not defined in the increaseTemp method.</div></li><li data-component="feedback" id="csawesome2_2_AP5-8-3_opt_e"><div class="para" id="AP5-8-3-2-5-2-1">Correct! newTemp is defined in a different method. The instance variable currentTemp should be used instead.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.13.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-8-4" data-multipleanswers="false"><div class="para" id="AP5-8-4-1-1">5-14-14: Consider the following class definition for Party.  The following code segment appears in a method in a class other than Party. The code segment is intended to print the value 30, but does not print the correct value because of an error in the Party class. Which of the following best explains why the correct value isn’t printed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">Party p = new Party(20, 15);
p.orderMoreFood(20);
p.eatFood(5);
System.out.println(p.getBoxesOfFood());

public class Party
{
 private int boxesOfFood;
 private int numOfPeople;

 public Party(int people, int foodBoxes)
 {
     numOfPeople = people;
     boxesOfFood = foodBoxes;
 }

 public void orderMoreFood(int additionalFoodBoxes)
 {
     int updatedAmountOfFood = boxesOfFood + additionalFoodBoxes;
     boxesOfFood = updatedAmountOfFood;
 }

 public int getNumOfPeople() {
     return numOfPeople;
 }

 public int getBoxesOfFood() {
     return boxesOfFood;
 }

 public void eatFood(int eatenBoxes)
 {
     boxesOfFood = updatedAmountOfFood - eatenBoxes;
 }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_AP5-8-4_opt_a"><div class="para" id="AP5-8-4-2-1-1-1">The private variables boxesOfFood and numOfPeople are not properly initialized.</div></li><li data-component="feedback" id="csawesome2_2_AP5-8-4_opt_a"><div class="para" id="AP5-8-4-2-1-2-1">The private variables boxesOfFood and numOfPeople are initialized by the constructor.</div></li><li data-component="answer" id="csawesome2_2_AP5-8-4_opt_b"><div class="para" id="AP5-8-4-2-2-1-1">The private variables boxesOfFood and numOfPeople should have been declared public.</div></li><li data-component="feedback" id="csawesome2_2_AP5-8-4_opt_b"><div class="para" id="AP5-8-4-2-2-2-1">Instance variables are usually private.</div></li><li data-component="answer" id="csawesome2_2_AP5-8-4_opt_c"><div class="para" id="AP5-8-4-2-3-1-1">The public method getBoxesOfFood should have been declared private.</div></li><li data-component="feedback" id="csawesome2_2_AP5-8-4_opt_c"><div class="para" id="AP5-8-4-2-3-2-1">Methods are usually public.</div></li><li data-component="answer" id="csawesome2_2_AP5-8-4_opt_d" data-correct=""><div class="para" id="AP5-8-4-2-4-1-1">The variable updatedAmountOfFood in the eatFood method is not declared in this method.</div></li><li data-component="feedback" id="csawesome2_2_AP5-8-4_opt_d"><div class="para" id="AP5-8-4-2-4-2-1">The variable updatedAmountOfFood in the eatFood method is not declared in this method. It could be replaced by the boxesOfFood instance variable.</div></li><li data-component="answer" id="csawesome2_2_AP5-8-4_opt_e"><div class="para" id="AP5-8-4-2-5-1-1">The variables boxesOfFood and numOfPeople in the updatedAmountOfFood method are local variables.</div></li><li data-component="feedback" id="csawesome2_2_AP5-8-4_opt_e"><div class="para" id="AP5-8-4-2-5-2-1">The variables boxesOfFood and numOfPeople are instance variables.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.13.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP5-9-3" data-multipleanswers="false"><div class="para" id="AP5-9-3-1-1">5-14-15: Consider the following class definitions.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Party
{
    private String partyHost;
    private int monthOfParty;
    private int partyStartTime;

    public Party(String h, int month, int startTime)
    {
        partyHost = h;
        monthOfParty = month;
        partyStartTime = startTime;
    }

    public int getMonth()
    {
        return monthOfParty;
    }

    public int getStartTime()
    {
        return partyStartTime;
    }

    public String getHost()
    {
        return partyHost;
    }

    public void addToOptions(PartyOptions o)
    {
        o.addParty(this);
    }
}

public class PartyOptions
{
    private int onlyThisMonth;

    public PartyOptions(int month)
    {
        onlyThisMonth = month;
    }

    /* A Party should only be added to this PartyOption if the party’s month matches onlyThisMonth */
    public void addParty(Party p)
    {
        if (p.getMonth() == onlyThisMonth)
        {
            System.out.print("Party by " + p.getHost() + " accepted; ");
        }
        else
        {
            System.out.print("Party by " + p.getHost() + " rejected; ");
        }
    }
}
</code></pre></div> <div class="para" id="AP5-9-3-1-3">Consider the following code segment, which appears in a class other than Party or PartyOptions.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">Party p1 = new Party("Kerry", 10, 7);
Party p2 = new Party("Jules", 9, 6);

PartyOptions options = new PartyOptions(10);
p1.addToOptions(options);
p2.addToOptions(options);
</code></pre></div><li data-component="answer" id="csawesome2_2_AP5-9-3_opt_a"><div class="para" id="AP5-9-3-2-1-1-1">Party by Kerry rejected; Party by Jules rejected;</div></li><li data-component="feedback" id="csawesome2_2_AP5-9-3_opt_a"><div class="para" id="AP5-9-3-2-1-2-1">Kerry’s party should be accepted because it is in the 10th month.</div></li><li data-component="answer" id="csawesome2_2_AP5-9-3_opt_b"><div class="para" id="AP5-9-3-2-2-1-1">Party by Kerry rejected; Party by Jules accepted;</div></li><li data-component="feedback" id="csawesome2_2_AP5-9-3_opt_b"><div class="para" id="AP5-9-3-2-2-2-1">Kerry’s party should be accepted because it is in the 10th month. Jules’ party should be rejected because it is not in the 10th month.</div></li><li data-component="answer" id="csawesome2_2_AP5-9-3_opt_c" data-correct=""><div class="para" id="AP5-9-3-2-3-1-1">Party by Kerry accepted; Party by Jules rejected;</div></li><li data-component="feedback" id="csawesome2_2_AP5-9-3_opt_c"><div class="para" id="AP5-9-3-2-3-2-1">Kerry’s party is accepted because it is in the 10th month, and Jules’ party is not.</div></li><li data-component="answer" id="csawesome2_2_AP5-9-3_opt_d"><div class="para" id="AP5-9-3-2-4-1-1">Party by Kerry accepted; Party by Jules accepted;</div></li><li data-component="feedback" id="csawesome2_2_AP5-9-3_opt_d"><div class="para" id="AP5-9-3-2-4-2-1">Jules’ party should be rejected because it is not in the 10th month.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>midterm-test</id>
      <title>Midterm Test</title>
      <question optional="yes">
        <label>Exercise 3.14.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mid_1_1" data-multipleanswers="false"><div class="para" id="mid_1_1-1-1">5-15-1: Which of the following code segments will produce the displayed output?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">/* Output:
1
22
333
4444
55555
*/

//Loop I
for (int i = 1; i &lt;= 5; i++)
{
   for (int j = i; j &gt; 0; j--)
   {
      System.out.print(i);
   }
   System.out.println();
}

//Loop II
for (int i = 0; i &lt; 5; i++)
{
   for (int j = 0; j &lt; i; j++)
   {
      System.out.print(i);
   }
   System.out.println();
}

//Loop III
for (int i = 1; i &lt; 5; i++)
{
   for (int j = i; j &gt; 0; j--)
   {
      System.out.print(i);
   }
   System.out.println();
}

//Loop IV
for (int i = 1; i &lt; 6; i++)
{
   for (int j = 0; j &lt; i; j++)
   {
      System.out.println(i);
   }
}

//Loop V
for (int i = 0; i &lt; 5; i++) {
   for (int j = 0; j &lt; i; j++) {
      System.out.print(i+1);
   }
   System.out.println();
}
</code></pre></div><li data-component="answer" id="csawesome2_2_mid_1_1_opt_a" data-correct=""><div class="para" id="mid_1_1-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_mid_1_1_opt_a"><div class="para" id="mid_1_1-2-1-2-1">Correct! This will loop with i changing from 1 to 5 and then for each i, j will loop from i to 0 printing the value of i and then a new line.</div></li><li data-component="answer" id="csawesome2_2_mid_1_1_opt_b"><div class="para" id="mid_1_1-2-2-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_mid_1_1_opt_b"><div class="para" id="mid_1_1-2-2-2-1">II will loop i from 0 to 4 and j from 0 to i, neglecting to ouput 5.</div></li><li data-component="answer" id="csawesome2_2_mid_1_1_opt_c"><div class="para" id="mid_1_1-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_mid_1_1_opt_c"><div class="para" id="mid_1_1-2-3-2-1">III will loop with i changing from 1 to 4 and j from i to 0.</div></li><li data-component="answer" id="csawesome2_2_mid_1_1_opt_d"><div class="para" id="mid_1_1-2-4-1-1">IV and V only</div></li><li data-component="feedback" id="csawesome2_2_mid_1_1_opt_d"><div class="para" id="mid_1_1-2-4-2-1">IV will loop with i changing from 1 to 5 and j from 0 to i but it will print each value on a different line.</div></li><li data-component="answer" id="csawesome2_2_mid_1_1_opt_e"><div class="para" id="mid_1_1-2-5-1-1">V only</div></li><li data-component="feedback" id="csawesome2_2_mid_1_1_opt_e"><div class="para" id="mid_1_1-2-5-2-1">V will loop with i changing from 0 to 4 and j from 0 to i.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.14.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mid_1_2" data-multipleanswers="false"><div class="para" id="mid_1_2-1-1">5-15-2: Consider the following method.  What is the output from <code class="code-inline tex2jax_ignore">conditionTest(3,-2);</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static void conditionTest(int num1, int num2)
{
   if ((num1 &gt; 0) &amp;&amp; (num2 &gt; 0))
   {
      if (num1 &gt; num2)
         System.out.println("A");
      else
         System.out.println("B");
   }
   else if ((num2 &lt; 0) || (num1 &lt; 0))
   {
      System.out.println("C");
   }
   else if (num2 &lt; 0)
   {
      System.out.println("D");
   }
   else
   {
      System.out.println("E");
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_mid_1_2_opt_a"><div class="para" id="mid_1_2-2-1-1-1">A</div></li><li data-component="feedback" id="csawesome2_2_mid_1_2_opt_a"><div class="para" id="mid_1_2-2-1-2-1">num2 is negative</div></li><li data-component="answer" id="csawesome2_2_mid_1_2_opt_b"><div class="para" id="mid_1_2-2-2-1-1">AC</div></li><li data-component="feedback" id="csawesome2_2_mid_1_2_opt_b"><div class="para" id="mid_1_2-2-2-2-1">Only one letter will be printed.</div></li><li data-component="answer" id="csawesome2_2_mid_1_2_opt_c" data-correct=""><div class="para" id="mid_1_2-2-3-1-1">C</div></li><li data-component="feedback" id="csawesome2_2_mid_1_2_opt_c"><div class="para" id="mid_1_2-2-3-2-1">Correct because num2 is negative and an or is used.</div></li><li data-component="answer" id="csawesome2_2_mid_1_2_opt_d"><div class="para" id="mid_1_2-2-4-1-1">BD</div></li><li data-component="feedback" id="csawesome2_2_mid_1_2_opt_d"><div class="para" id="mid_1_2-2-4-2-1">Only one letter will be printed.</div></li><li data-component="answer" id="csawesome2_2_mid_1_2_opt_e"><div class="para" id="mid_1_2-2-5-1-1">E</div></li><li data-component="feedback" id="csawesome2_2_mid_1_2_opt_e"><div class="para" id="mid_1_2-2-5-2-1">One of the other conditions is true.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.14.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mid_1_3" data-multipleanswers="false"><div class="para" id="mid_1_3-1-1">5-15-3: Which of these loops will output <code class="code-inline tex2jax_ignore">01234</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int max = 5;

//Loop I
for (int i = 0; i &lt; max; i++)
{
   System.out.print(i);
}

//Loop II
int j = 0;
while (j &lt; max)
{
   System.out.print(j);
   j++;
}

//Loop III
int k = 0;
for (int i = max; i &gt; 0; i--)
{
   System.out.print(i);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_mid_1_3_opt_a"><div class="para" id="mid_1_3-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_mid_1_3_opt_a"><div class="para" id="mid_1_3-2-1-2-1">Loop I will produce this output, but it is not the only loop that will output these values.</div></li><li data-component="answer" id="csawesome2_2_mid_1_3_opt_b"><div class="para" id="mid_1_3-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_mid_1_3_opt_b"><div class="para" id="mid_1_3-2-2-2-1">Loop II will produce this output, but it is not the only loop that will output these values.</div></li><li data-component="answer" id="csawesome2_2_mid_1_3_opt_c"><div class="para" id="mid_1_3-2-3-1-1">II and III only</div></li><li data-component="feedback" id="csawesome2_2_mid_1_3_opt_c"><div class="para" id="mid_1_3-2-3-2-1">Loop II is correct, but loop III will produce the reverse output, 43210.</div></li><li data-component="answer" id="csawesome2_2_mid_1_3_opt_d" data-correct=""><div class="para" id="mid_1_3-2-4-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_mid_1_3_opt_d"><div class="para" id="mid_1_3-2-4-2-1">Correct! Both of these loops will produce the correct output.</div></li><li data-component="answer" id="csawesome2_2_mid_1_3_opt_e"><div class="para" id="mid_1_3-2-5-1-1">I, II, and III</div></li><li data-component="feedback" id="csawesome2_2_mid_1_3_opt_e"><div class="para" id="mid_1_3-2-5-2-1">While loop I and II will produce the correct output, loop III will actually produce the reverse of the correct output.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.14.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mid_1_4" data-multipleanswers="false"><div class="para" id="mid_1_4-1-1">5-15-4: Consider the following block of code. What value is returned from <code class="code-inline tex2jax_ignore">solution(5)</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public int solution(int limit)
{
   int s = 0;
   for (int outside = 1; outside &lt;= limit; outside++)
   {
      for (int middle = 1; middle &lt;= limit; middle++)
      {
         for (int inside = 1; inside &lt;= limit; inside++)
         {
            s++;
         }
      }
   }
  return s;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_mid_1_4_opt_a"><div class="para" id="mid_1_4-2-1-1-1">25</div></li><li data-component="feedback" id="csawesome2_2_mid_1_4_opt_a"><div class="para" id="mid_1_4-2-1-2-1">This would be the correct answer if there were only two loops nested, but there are three. Try again!</div></li><li data-component="answer" id="csawesome2_2_mid_1_4_opt_b"><div class="para" id="mid_1_4-2-2-1-1">15</div></li><li data-component="feedback" id="csawesome2_2_mid_1_4_opt_b"><div class="para" id="mid_1_4-2-2-2-1">Take a look at how many times each inner loop will execute every time the outer loop runs.</div></li><li data-component="answer" id="csawesome2_2_mid_1_4_opt_c" data-correct=""><div class="para" id="mid_1_4-2-3-1-1">125</div></li><li data-component="feedback" id="csawesome2_2_mid_1_4_opt_c"><div class="para" id="mid_1_4-2-3-2-1">Correct!</div></li><li data-component="answer" id="csawesome2_2_mid_1_4_opt_d"><div class="para" id="mid_1_4-2-4-1-1">64</div></li><li data-component="feedback" id="csawesome2_2_mid_1_4_opt_d"><div class="para" id="mid_1_4-2-4-2-1">Try again - check the difference between &lt;= and &lt; in each loop.</div></li><li data-component="answer" id="csawesome2_2_mid_1_4_opt_e"><div class="para" id="mid_1_4-2-5-1-1">625</div></li><li data-component="feedback" id="csawesome2_2_mid_1_4_opt_e"><div class="para" id="mid_1_4-2-5-2-1">If you got this value you probably made one extra call to the each of the loops, notice that the loops start at 1 and not 0.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.14.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mid_1_5" data-multipleanswers="false">
                <div class="para" id="mid_1_5-1-1">5-15-5: Which of the following is equivalent to !((x &gt; 10) &amp;&amp; (x &lt;= 5)) ?</div>
                <li data-component="answer" id="csawesome2_2_mid_1_5_opt_a">
                  <div class="para" id="mid_1_5-2-1-1-1">(x &lt; 10) &amp;&amp; (x &gt; 5)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mid_1_5_opt_a">
                  <div class="para" id="mid_1_5-2-1-2-1">Use A and B to represent the expressions -- A becomes (x &gt; 10), B becomes (x &lt;= 5). ! (A &amp;&amp; B) is NOT equivalent to (!A &amp;&amp; !B).</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mid_1_5_opt_b">
                  <div class="para" id="mid_1_5-2-2-1-1">(x &gt; 10) &amp;&amp; (x &lt;=5)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mid_1_5_opt_b">
                  <div class="para" id="mid_1_5-2-2-2-1">Use A and B to represent the expressions -- A becomes (x &gt; 10), B becomes (x &lt;= 5). ! (A &amp;&amp; B) is NOT equivalent to (A &amp;&amp; B).</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mid_1_5_opt_c">
                  <div class="para" id="mid_1_5-2-3-1-1">(x &lt;= 10) &amp;&amp; (x &gt; 5)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mid_1_5_opt_c">
                  <div class="para" id="mid_1_5-2-3-2-1">Use A and B to represent the expressions -- A becomes (x &gt; 10), B becomes (x &lt;= 5). ! (A &amp;&amp; B) is NOT equivalent to (!A &amp;&amp; !B). The AND should be changed to an OR.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mid_1_5_opt_d" data-correct="">
                  <div class="para" id="mid_1_5-2-4-1-1">(x &lt;= 10) || (x &gt; 5)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mid_1_5_opt_d">
                  <div class="para" id="mid_1_5-2-4-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mid_1_5_opt_e">
                  <div class="para" id="mid_1_5-2-5-1-1">(x &gt; 10) || (x &lt;= 5)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mid_1_5_opt_e">
                  <div class="para" id="mid_1_5-2-5-2-1">Use A and B to represent the expressions -- A becomes (x &gt; 10), B becomes (x &lt;= 5). ! (A &amp;&amp; B) is NOT equivalent to (A || B). Both A and B should also be negated.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.14.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mid_1_6" data-multipleanswers="false"><div class="para" id="mid_1_6-1-1">5-15-6: Consider the following class with the method <code class="code-inline tex2jax_ignore">test</code>. What is the output after the main method is executed calling <code class="code-inline tex2jax_ignore">test(s,b)</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Test1
{
    public static void test(String str, int y)
    {
        str = str + "bow";
        y = y * 2;
    }

    public static void main(String[] args)
    {
        String s = "rain";
        int b = 4;
        test(s, b);
        System.out.println("s=" + s + "; b=" + b);
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_mid_1_6_opt_a"><div class="para" id="mid_1_6-2-1-1-1">s="rainbow"; b=8;</div></li><li data-component="feedback" id="csawesome2_2_mid_1_6_opt_a"><div class="para" id="mid_1_6-2-1-2-1">Strings are immutable so changing str doesn’t affect the string that s refers to.</div></li><li data-component="answer" id="csawesome2_2_mid_1_6_opt_b"><div class="para" id="mid_1_6-2-2-1-1">s="rain";  b=8;</div></li><li data-component="feedback" id="csawesome2_2_mid_1_6_opt_b"><div class="para" id="mid_1_6-2-2-2-1">Nothing done in the method test affects the value of b.</div></li><li data-component="answer" id="csawesome2_2_mid_1_6_opt_c"><div class="para" id="mid_1_6-2-3-1-1">s="rainbow"; b=4;</div></li><li data-component="feedback" id="csawesome2_2_mid_1_6_opt_c"><div class="para" id="mid_1_6-2-3-2-1">Strings are immutable so changing str doesn’t affect the string that s refers to.</div></li><li data-component="answer" id="csawesome2_2_mid_1_6_opt_d" data-correct=""><div class="para" id="mid_1_6-2-4-1-1">s="rain"; b=4;</div></li><li data-component="feedback" id="csawesome2_2_mid_1_6_opt_d"><div class="para" id="mid_1_6-2-4-2-1">Correct!</div></li><li data-component="answer" id="csawesome2_2_mid_1_6_opt_e"><div class="para" id="mid_1_6-2-5-1-1">s="bow";  b=4;</div></li><li data-component="feedback" id="csawesome2_2_mid_1_6_opt_e"><div class="para" id="mid_1_6-2-5-2-1">All changes to string s result in a new string object.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.14.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mid_1_7" data-multipleanswers="false"><div class="para" id="mid_1_7-1-1">5-15-7: Consider the following <code class="code-inline tex2jax_ignore">Cat</code> class that has an <code class="code-inline tex2jax_ignore">age</code> attribute of type int. The <code class="code-inline tex2jax_ignore">getAge</code> method is intended to allow methods in other classes to access a Cat object’s age value; however, it does not work as intended. Which of the following best explains why the <code class="code-inline tex2jax_ignore">getAge</code> method does NOT work as intended?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Cat
{
    private int age;

    public Cat(int a)
    {
        age = a;
    }

    public int getAge()
    {
        return a;
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_mid_1_7_opt_a"><div class="para" id="mid_1_7-2-1-1-1">The ``getAge()`` method should be declared as private.</div></li><li data-component="feedback" id="csawesome2_2_mid_1_7_opt_a"><div class="para" id="mid_1_7-2-1-2-1">The method should be public so it can be accessed outside of the class.</div></li><li data-component="answer" id="csawesome2_2_mid_1_7_opt_b"><div class="para" id="mid_1_7-2-2-1-1">The return type of the ``getAge()`` method should be void.</div></li><li data-component="feedback" id="csawesome2_2_mid_1_7_opt_b"><div class="para" id="mid_1_7-2-2-2-1">The method’s return type should be int.</div></li><li data-component="answer" id="csawesome2_2_mid_1_7_opt_c"><div class="para" id="mid_1_7-2-3-1-1">The ``getAge()`` method should have at least one parameter.</div></li><li data-component="feedback" id="csawesome2_2_mid_1_7_opt_c"><div class="para" id="mid_1_7-2-3-2-1">The getAge method should not take any parameters.</div></li><li data-component="answer" id="csawesome2_2_mid_1_7_opt_d"><div class="para" id="mid_1_7-2-4-1-1">The variable ``age`` is not declared inside the ``getAge()`` method.</div></li><li data-component="feedback" id="csawesome2_2_mid_1_7_opt_d"><div class="para" id="mid_1_7-2-4-2-1">This is an instance variable and should be declared outside of the method.</div></li><li data-component="answer" id="csawesome2_2_mid_1_7_opt_e" data-correct=""><div class="para" id="mid_1_7-2-5-1-1">The instance variable ``age`` should be returned instead of a, which is local to the constructor.</div></li><li data-component="feedback" id="csawesome2_2_mid_1_7_opt_e"><div class="para" id="mid_1_7-2-5-2-1">Correct! The accessor method getAge should return the instance variable age.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.14.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mid_1_8" data-multipleanswers="false"><div class="para" id="mid_1_8-1-1">5-15-8: Which of the following statements are TRUE about local variables?</div> <div class="para logical" id="mid_1_8-1-2"><ol class="upper-roman" id="mid_1_8-1-2-1"><li id="mid_1_8-1-2-1-1"><div class="para" id="mid_1_8-1-2-1-1-1">Local variables can be declared in the body of constructors and methods.</div></li><li id="mid_1_8-1-2-1-2"><div class="para" id="mid_1_8-1-2-1-2-1">Local variables may only be used within the constructor or method and cannot be declared to be public or private.</div></li><li id="mid_1_8-1-2-1-3"><div class="para" id="mid_1_8-1-2-1-3-1">When there is a local variable with the same name as an instance variable, the variable name will refer to the local variable instead of the instance variable.</div></li></ol></div><li data-component="answer" id="csawesome2_2_mid_1_8_opt_a"><div class="para" id="mid_1_8-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_mid_1_8_opt_a"><div class="para" id="mid_1_8-2-1-2-1">It’s true that the local variables can be declared in the body of constructors and methods, but there are other options that are also true about local variables.</div></li><li data-component="answer" id="csawesome2_2_mid_1_8_opt_b"><div class="para" id="mid_1_8-2-2-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_mid_1_8_opt_b"><div class="para" id="mid_1_8-2-2-2-1">Both I and II are true but III is also true regarding local variables.</div></li><li data-component="answer" id="csawesome2_2_mid_1_8_opt_c"><div class="para" id="mid_1_8-2-3-1-1">I and III only</div></li><li data-component="feedback" id="csawesome2_2_mid_1_8_opt_c"><div class="para" id="mid_1_8-2-3-2-1">Both I and III are true but II is also true regarding local variables.</div></li><li data-component="answer" id="csawesome2_2_mid_1_8_opt_d" data-correct=""><div class="para" id="mid_1_8-2-4-1-1">I, II, and III</div></li><li data-component="feedback" id="csawesome2_2_mid_1_8_opt_d"><div class="para" id="mid_1_8-2-4-2-1">Correct! All of the above are true.</div></li><li data-component="answer" id="csawesome2_2_mid_1_8_opt_e"><div class="para" id="mid_1_8-2-5-1-1">II and III only</div></li><li data-component="feedback" id="csawesome2_2_mid_1_8_opt_e"><div class="para" id="mid_1_8-2-5-2-1">Both of these are true but I is also true.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.14.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mid_1_9" data-multipleanswers="false"><div class="para" id="mid_1_9-1-1">5-15-9: Which of the following statements are TRUE about <dfn class="terminology">static</dfn> methods?</div> <div class="para logical" id="mid_1_9-1-2"><ol class="upper-roman" id="mid_1_9-1-2-1"><li id="mid_1_9-1-2-1-1"><div class="para" id="mid_1_9-1-2-1-1-1">Static methods and variables include the keyword static before their name in the header or declaration and can be public or private.</div></li><li id="mid_1_9-1-2-1-2"><div class="para" id="mid_1_9-1-2-1-2-1">Static methods can access or change the values of instance variables.</div></li><li id="mid_1_9-1-2-1-3"><div class="para" id="mid_1_9-1-2-1-3-1">Static methods are associated with the class, not objects of the class.</div></li></ol></div><li data-component="answer" id="csawesome2_2_mid_1_9_opt_a"><div class="para" id="mid_1_9-2-1-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_mid_1_9_opt_a"><div class="para" id="mid_1_9-2-1-2-1">Static methods cannot acccess instance variables. They can only access static variables.</div></li><li data-component="answer" id="csawesome2_2_mid_1_9_opt_b"><div class="para" id="mid_1_9-2-2-1-1">I, II, and III</div></li><li data-component="feedback" id="csawesome2_2_mid_1_9_opt_b"><div class="para" id="mid_1_9-2-2-2-1">Static methods cannot acccess instance variables. They can only access static variables.</div></li><li data-component="answer" id="csawesome2_2_mid_1_9_opt_c" data-correct=""><div class="para" id="mid_1_9-2-3-1-1">I and III only</div></li><li data-component="feedback" id="csawesome2_2_mid_1_9_opt_c"><div class="para" id="mid_1_9-2-3-2-1">Correct! I and III are true, but static methods cannot acccess instance variables. They can only access static variables.</div></li><li data-component="answer" id="csawesome2_2_mid_1_9_opt_d"><div class="para" id="mid_1_9-2-4-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_mid_1_9_opt_d"><div class="para" id="mid_1_9-2-4-2-1">I is true, but there is another option that is true too.</div></li><li data-component="answer" id="csawesome2_2_mid_1_9_opt_e"><div class="para" id="mid_1_9-2-5-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_mid_1_9_opt_e"><div class="para" id="mid_1_9-2-5-2-1">III is true, but there is another option that is true too.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.14.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mid_1_10" data-multipleanswers="false"><div class="para" id="mid_1_10-1-1">5-15-10: What are the values of <code class="code-inline tex2jax_ignore">var1</code> and <code class="code-inline tex2jax_ignore">var2</code> after the following code segment is executed and the while loop finishes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int var1 = 0;
int var2 = 2;
while ((var2 != 0) &amp;&amp; ((var1 / var2) &gt;= 0))
{
   var1 = var1 + 1;
   var2 = var2 - 1;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_mid_1_10_opt_a"><div class="para" id="mid_1_10-2-1-1-1">var1 = 0, var2 = 2</div></li><li data-component="feedback" id="csawesome2_2_mid_1_10_opt_a"><div class="para" id="mid_1_10-2-1-2-1">This would be true if the body of the while loop never executed. This would have happened if the while check was if var1 != 0 instead of var2 != 0</div></li><li data-component="answer" id="csawesome2_2_mid_1_10_opt_b"><div class="para" id="mid_1_10-2-2-1-1">var1 = 1, var2 = 1</div></li><li data-component="feedback" id="csawesome2_2_mid_1_10_opt_b"><div class="para" id="mid_1_10-2-2-2-1">This would be true if the body of the while loop only execued one time, but it executes twice.</div></li><li data-component="answer" id="csawesome2_2_mid_1_10_opt_c"><div class="para" id="mid_1_10-2-3-1-1">var1 = 3, var2 = -1</div></li><li data-component="feedback" id="csawesome2_2_mid_1_10_opt_c"><div class="para" id="mid_1_10-2-3-2-1">This would be true if the body of the while loop executed three times, but it executes twice.</div></li><li data-component="answer" id="csawesome2_2_mid_1_10_opt_d" data-correct=""><div class="para" id="mid_1_10-2-4-1-1">var1 = 2, var2 = 0</div></li><li data-component="feedback" id="csawesome2_2_mid_1_10_opt_d"><div class="para" id="mid_1_10-2-4-2-1">Correct!</div></li><li data-component="answer" id="csawesome2_2_mid_1_10_opt_e"><div class="para" id="mid_1_10-2-5-1-1">The loop won’t finish executing because of a division by zero.</div></li><li data-component="feedback" id="csawesome2_2_mid_1_10_opt_e"><div class="para" id="mid_1_10-2-5-2-1">0/2 won’t cause a division by zero. The result is just zero.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.14.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mid_1_11" data-multipleanswers="false"><div class="para" id="mid_1_11-1-1">5-15-11: What does the following code print?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int x = -5;
while (x &lt; 0)
{
   x++;
   System.out.print(x + " ");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_mid_1_11_opt_a"><div class="para" id="mid_1_11-2-1-1-1">5 4 3 2 1</div></li><li data-component="feedback" id="csawesome2_2_mid_1_11_opt_a"><div class="para" id="mid_1_11-2-1-2-1">x is initialized (set) to -5 to start and incremented (x++) before the print statement executes.</div></li><li data-component="answer" id="csawesome2_2_mid_1_11_opt_b"><div class="para" id="mid_1_11-2-2-1-1">-5 -4 -3 -2 -1</div></li><li data-component="feedback" id="csawesome2_2_mid_1_11_opt_b"><div class="para" id="mid_1_11-2-2-2-1">x is incremented (x++) from -5 before the print statement executes.</div></li><li data-component="answer" id="csawesome2_2_mid_1_11_opt_c" data-correct=""><div class="para" id="mid_1_11-2-3-1-1">-4 -3 -2 -1 0</div></li><li data-component="feedback" id="csawesome2_2_mid_1_11_opt_c"><div class="para" id="mid_1_11-2-3-2-1">Correct!</div></li><li data-component="answer" id="csawesome2_2_mid_1_11_opt_d"><div class="para" id="mid_1_11-2-4-1-1">-5 -4 -3 -2 -1 0</div></li><li data-component="feedback" id="csawesome2_2_mid_1_11_opt_d"><div class="para" id="mid_1_11-2-4-2-1">x is incremented (x++) from -5 before the print statement executes.</div></li><li data-component="answer" id="csawesome2_2_mid_1_11_opt_e"><div class="para" id="mid_1_11-2-5-1-1">-4 -3 -2 -1</div></li><li data-component="feedback" id="csawesome2_2_mid_1_11_opt_e"><div class="para" id="mid_1_11-2-5-2-1">0 is printed out the last time through the loop when x is -1 and is incremented.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.14.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mid_1_12" data-multipleanswers="false"><div class="para" id="mid_1_12-1-1">5-15-12: What will be printed after this code is executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int i = 0; i &lt;= 15; i++)
{
   if (i % 3 == 0)
   {
      System.out.print(i + " ");
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_mid_1_12_opt_a"><div class="para" id="mid_1_12-2-1-1-1">0 3 6 9 12</div></li><li data-component="feedback" id="csawesome2_2_mid_1_12_opt_a"><div class="para" id="mid_1_12-2-1-2-1">It would also print 15.</div></li><li data-component="answer" id="csawesome2_2_mid_1_12_opt_b"><div class="para" id="mid_1_12-2-2-1-1">0 1 2 3 4 5</div></li><li data-component="feedback" id="csawesome2_2_mid_1_12_opt_b"><div class="para" id="mid_1_12-2-2-2-1">The conditional would only match multiples of three.</div></li><li data-component="answer" id="csawesome2_2_mid_1_12_opt_c"><div class="para" id="mid_1_12-2-3-1-1">1 4 7 10 13</div></li><li data-component="feedback" id="csawesome2_2_mid_1_12_opt_c"><div class="para" id="mid_1_12-2-3-2-1">The conditional would only match multiples of three.</div></li><li data-component="answer" id="csawesome2_2_mid_1_12_opt_d" data-correct=""><div class="para" id="mid_1_12-2-4-1-1">0 3 6 9 12 15</div></li><li data-component="feedback" id="csawesome2_2_mid_1_12_opt_d"><div class="para" id="mid_1_12-2-4-2-1">Yes, the multiples of 3 from 0 to 15.</div></li><li data-component="answer" id="csawesome2_2_mid_1_12_opt_e"><div class="para" id="mid_1_12-2-5-1-1">This code will not print anything.</div></li><li data-component="feedback" id="csawesome2_2_mid_1_12_opt_e"><div class="para" id="mid_1_12-2-5-2-1">This code would print the multiples of 3.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.14.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mid_1_13" data-multipleanswers="false"><div class="para" id="mid_1_13-1-1">5-15-13: Consider the following declaration for a class that will be used to represent points in time.  Which of these options correctly implement <code class="code-inline tex2jax_ignore">addMinutes()</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Timer
{
   private int hours; // number of hours
   private int minutes; // 0 &lt;= minutes &lt; 60

   void addHours(int addition)
   {
      hours = hours + addition;
   }

   /** addMinutes adds the given argument to the time stored in hours and minutes.
   The argument additionMinutes is between 0 and 119.  **/
   void addMinutes(int additionMinutes)
   {
      // implementation not shown
   }

   // ... other methods not shown
}


//Proposed Implementations:
I.   public void addMinutes(int additionMinutes)
     {
         minutes = minutes + additionMinutes;
     }
II.  public void addMinutes(int additionMinutes)
     {
         minutes += additionMinutes;
         if (minutes &gt;= 60)
         {
            hours += minutes / 60;
            minutes = minutes % 60;
         }
     }
III. public void addMinutes(int additionMinutes)
     {
         minutes += additionMinutes;
         while (minutes &gt;= 60)
         {
            hours++;
            minutes -= 60;
         }
     }
IV.  public void addMinutes(int additionMinutes)
     {
         if (additionMinutes + minutes &gt;= 60)
         {
            minutes = additionMinutes + minutes - 60;
            hours += 1;
         }
     }
</code></pre></div><li data-component="answer" id="csawesome2_2_mid_1_13_opt_a"><div class="para" id="mid_1_13-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_mid_1_13_opt_a"><div class="para" id="mid_1_13-2-1-2-1">This implementation of ``addMinutes`` does not account for values of additionMinutes that push the minute count above 60.</div></li><li data-component="answer" id="csawesome2_2_mid_1_13_opt_b"><div class="para" id="mid_1_13-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_mid_1_13_opt_b"><div class="para" id="mid_1_13-2-2-2-1">Implementation II works, but implementation III also works.</div></li><li data-component="answer" id="csawesome2_2_mid_1_13_opt_c"><div class="para" id="mid_1_13-2-3-1-1">IV only</div></li><li data-component="feedback" id="csawesome2_2_mid_1_13_opt_c"><div class="para" id="mid_1_13-2-3-2-1">Implementation IV does not work for situations where additionMinutes + minutes does not go above 60.</div></li><li data-component="answer" id="csawesome2_2_mid_1_13_opt_d" data-correct=""><div class="para" id="mid_1_13-2-4-1-1">II and III</div></li><li data-component="feedback" id="csawesome2_2_mid_1_13_opt_d"><div class="para" id="mid_1_13-2-4-2-1">Correct!</div></li><li data-component="answer" id="csawesome2_2_mid_1_13_opt_e"><div class="para" id="mid_1_13-2-5-1-1">I, II, and III</div></li><li data-component="feedback" id="csawesome2_2_mid_1_13_opt_e"><div class="para" id="mid_1_13-2-5-2-1">Implementations II and III are correct, but implementation I is not. Implementation I does not account for values of additionMinutes that push the minute account above 60.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.14.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mid_1_14" data-multipleanswers="false">
                <div class="para" id="mid_1_14-1-1">5-15-14: Which option will evaluate to true, if and only if both a and b are false?</div>
                <li data-component="answer" id="csawesome2_2_mid_1_14_opt_a">
                  <div class="para" id="mid_1_14-2-1-1-1">!(a &amp;&amp; b)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mid_1_14_opt_a">
                  <div class="para" id="mid_1_14-2-1-2-1">This would be true in any case where a and b weren’t both true</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mid_1_14_opt_b">
                  <div class="para" id="mid_1_14-2-2-1-1">!a &amp;&amp; b</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mid_1_14_opt_b">
                  <div class="para" id="mid_1_14-2-2-2-1">If b was false, this option would be false.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mid_1_14_opt_c" data-correct="">
                  <div class="para" id="mid_1_14-2-3-1-1">!a &amp;&amp; !b</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mid_1_14_opt_c">
                  <div class="para" id="mid_1_14-2-3-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mid_1_14_opt_d">
                  <div class="para" id="mid_1_14-2-4-1-1">a &amp;&amp; b</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mid_1_14_opt_d">
                  <div class="para" id="mid_1_14-2-4-2-1">This will only be true only when both a and b are true.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mid_1_14_opt_e">
                  <div class="para" id="mid_1_14-2-5-1-1">a || !b</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mid_1_14_opt_e">
                  <div class="para" id="mid_1_14-2-5-2-1">This will only be true if a is true, or b is false.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.14.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mid_1_15" data-multipleanswers="false"><div class="para" id="mid_1_15-1-1">5-15-15: What does the method <code class="code-inline tex2jax_ignore">mystery</code> do?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public void mystery(String tester)
{
   for (int i = tester.length() - 1; i &gt;= 0; i--)
   {
      System.out.print(tester.substring(i,i+1));
   }
   System.out.println("");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_mid_1_15_opt_a" data-correct=""><div class="para" id="mid_1_15-2-1-1-1">Prints the string in reverse order</div></li><li data-component="feedback" id="csawesome2_2_mid_1_15_opt_a"><div class="para" id="mid_1_15-2-1-2-1">Correct! This method prints the reversed string.</div></li><li data-component="answer" id="csawesome2_2_mid_1_15_opt_b"><div class="para" id="mid_1_15-2-2-1-1">Deletes the second half of the string</div></li><li data-component="feedback" id="csawesome2_2_mid_1_15_opt_b"><div class="para" id="mid_1_15-2-2-2-1">Incorrect, this method prints the parameter reversed.</div></li><li data-component="answer" id="csawesome2_2_mid_1_15_opt_c"><div class="para" id="mid_1_15-2-3-1-1">Prints string normally</div></li><li data-component="feedback" id="csawesome2_2_mid_1_15_opt_c"><div class="para" id="mid_1_15-2-3-2-1">Incorrect, this method prints the parameter reversed.</div></li><li data-component="answer" id="csawesome2_2_mid_1_15_opt_d"><div class="para" id="mid_1_15-2-4-1-1">Compile-time error occurs</div></li><li data-component="feedback" id="csawesome2_2_mid_1_15_opt_d"><div class="para" id="mid_1_15-2-4-2-1">Incorrect, this method prints the parameter reversed.</div></li><li data-component="answer" id="csawesome2_2_mid_1_15_opt_e"><div class="para" id="mid_1_15-2-5-1-1">Prints alternating characters from beginning and end of the string.</div></li><li data-component="feedback" id="csawesome2_2_mid_1_15_opt_e"><div class="para" id="mid_1_15-2-5-2-1">Incorrect, this method prints the parameter reversed.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.14.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mid_1_16" data-multipleanswers="false"><div class="para" id="mid_1_16-1-1">5-15-16: After the following code is executed, what does the variable <code class="code-inline tex2jax_ignore">mystery</code> hold?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Mysterious
{
    public static void main(String[] args)
    {
        String mystery = "";
        String starter = "Hello World!";
        for (int i = 0; i &lt; starter.length(); i++)
        {
            if (i % 2 == 0)
            {
                mystery += starter.substring(i, i + 1);
            }
        }
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_mid_1_16_opt_a"><div class="para" id="mid_1_16-2-1-1-1">"Hello World!"</div></li><li data-component="feedback" id="csawesome2_2_mid_1_16_opt_a"><div class="para" id="mid_1_16-2-1-2-1">The variable holds all characters that were stored at even indices for the original phrase.</div></li><li data-component="answer" id="csawesome2_2_mid_1_16_opt_b"><div class="para" id="mid_1_16-2-2-1-1">"Hello "</div></li><li data-component="feedback" id="csawesome2_2_mid_1_16_opt_b"><div class="para" id="mid_1_16-2-2-2-1">The variable holds all characters that were stored at even indices for the original phrase.</div></li><li data-component="answer" id="csawesome2_2_mid_1_16_opt_c"><div class="para" id="mid_1_16-2-3-1-1">"He"</div></li><li data-component="feedback" id="csawesome2_2_mid_1_16_opt_c"><div class="para" id="mid_1_16-2-3-2-1">The variable holds all characters that were stored at even indices for the original phrase.</div></li><li data-component="answer" id="csawesome2_2_mid_1_16_opt_d" data-correct=""><div class="para" id="mid_1_16-2-4-1-1">"HloWrd"</div></li><li data-component="feedback" id="csawesome2_2_mid_1_16_opt_d"><div class="para" id="mid_1_16-2-4-2-1">Correct! The variable holds all characters that were stored at even indices for the original phrase.</div></li><li data-component="answer" id="csawesome2_2_mid_1_16_opt_e"><div class="para" id="mid_1_16-2-5-1-1">"el ol!"</div></li><li data-component="feedback" id="csawesome2_2_mid_1_16_opt_e"><div class="para" id="mid_1_16-2-5-2-1">The variable holds all characters that were stored at even indices for the original phrase.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.14.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mid_1_17" data-multipleanswers="false"><div class="para" id="mid_1_17-1-1">5-15-17: Which of the following code segments correctly creates an instance of a new <code class="code-inline tex2jax_ignore">Party</code> object?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Party
{

   private int numInvited;
   private boolean partyCancelled;

   public Party()
   {
      numInvited = 1;
      partyCancelled = false;
   }

   public Party(int invites)
   {
      numInvited = invites;
      partyCancelled = false;
   }
}

I.   Party myParty;
II.  int classSize = 20;
     Party ourParty = new Party(classSize);
III. int numOfFriends = 6;
     Party yourParty = new Party(numOfFriends + 3.0);
</code></pre></div><li data-component="answer" id="csawesome2_2_mid_1_17_opt_a"><div class="para" id="mid_1_17-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_mid_1_17_opt_a"><div class="para" id="mid_1_17-2-1-2-1">I contains incorrect syntax. Try again!</div></li><li data-component="answer" id="csawesome2_2_mid_1_17_opt_b"><div class="para" id="mid_1_17-2-2-1-1">I and II</div></li><li data-component="feedback" id="csawesome2_2_mid_1_17_opt_b"><div class="para" id="mid_1_17-2-2-2-1">I contains incorrect syntax. Try again!</div></li><li data-component="answer" id="csawesome2_2_mid_1_17_opt_c" data-correct=""><div class="para" id="mid_1_17-2-3-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_mid_1_17_opt_c"><div class="para" id="mid_1_17-2-3-2-1">Correct! II is the only correct option.</div></li><li data-component="answer" id="csawesome2_2_mid_1_17_opt_d"><div class="para" id="mid_1_17-2-4-1-1">II and III</div></li><li data-component="feedback" id="csawesome2_2_mid_1_17_opt_d"><div class="para" id="mid_1_17-2-4-2-1">III is incorrect due to a problem with the constructor argument. Try again!</div></li><li data-component="answer" id="csawesome2_2_mid_1_17_opt_e"><div class="para" id="mid_1_17-2-5-1-1">I, II, and III</div></li><li data-component="feedback" id="csawesome2_2_mid_1_17_opt_e"><div class="para" id="mid_1_17-2-5-2-1">Two of these options are incorrect. Take a closer look at the syntax of I and parameters of III.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.14.18 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mid_1_18" data-multipleanswers="false"><div class="para" id="mid_1_18-1-1">5-15-18: What are the values of <code class="code-inline tex2jax_ignore">a</code> and <code class="code-inline tex2jax_ignore">b</code> after the <code class="code-inline tex2jax_ignore">for</code> loop finishes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int a = 10, b = 3, t = 0;
for (int i = 1; i &lt;= 6; i++)
{
   t = a;
   a = i + b;
   b = t - i;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_mid_1_18_opt_a"><div class="para" id="mid_1_18-2-1-1-1">a = 6 and b = 7</div></li><li data-component="feedback" id="csawesome2_2_mid_1_18_opt_a"><div class="para" id="mid_1_18-2-1-2-1">This would be true if the loop stopped when i was equal to 6. Try again!</div></li><li data-component="answer" id="csawesome2_2_mid_1_18_opt_b"><div class="para" id="mid_1_18-2-2-1-1">a = 6 and b = 13</div></li><li data-component="feedback" id="csawesome2_2_mid_1_18_opt_b"><div class="para" id="mid_1_18-2-2-2-1">Take another look at how a and b change in each iteration of the loop.</div></li><li data-component="answer" id="csawesome2_2_mid_1_18_opt_c" data-correct=""><div class="para" id="mid_1_18-2-3-1-1">a = 13 and b = 0</div></li><li data-component="feedback" id="csawesome2_2_mid_1_18_opt_c"><div class="para" id="mid_1_18-2-3-2-1">Correct!</div></li><li data-component="answer" id="csawesome2_2_mid_1_18_opt_d"><div class="para" id="mid_1_18-2-4-1-1">a = 6 and b = 0</div></li><li data-component="feedback" id="csawesome2_2_mid_1_18_opt_d"><div class="para" id="mid_1_18-2-4-2-1">Almost there! b = 0, but take another look at how a changes in each iteration of the loop.</div></li><li data-component="answer" id="csawesome2_2_mid_1_18_opt_e"><div class="para" id="mid_1_18-2-5-1-1">a = 0 and b = 13</div></li><li data-component="feedback" id="csawesome2_2_mid_1_18_opt_e"><div class="para" id="mid_1_18-2-5-2-1">Take another look at how a and b change within each iteration of the loop. You are close!</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.14.19 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mid_1_19" data-multipleanswers="false"><div class="para" id="mid_1_19-1-1">5-15-19: Consider the following code.  What string is referenced by <code class="code-inline tex2jax_ignore">s1</code> after the code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String s1 = "Hi There";
String s2 = s1;
String s3 = s2;
String s4 = s1;
s2 = s2.toLowerCase();
s3 = s3.toUpperCase();
s4 = null;
</code></pre></div><li data-component="answer" id="csawesome2_2_mid_1_19_opt_a"><div class="para" id="mid_1_19-2-1-1-1">hi there</div></li><li data-component="feedback" id="csawesome2_2_mid_1_19_opt_a"><div class="para" id="mid_1_19-2-1-2-1">Strings are immutable and so any change to a string returns a new string.</div></li><li data-component="answer" id="csawesome2_2_mid_1_19_opt_b"><div class="para" id="mid_1_19-2-2-1-1">HI THERE</div></li><li data-component="feedback" id="csawesome2_2_mid_1_19_opt_b"><div class="para" id="mid_1_19-2-2-2-1">Strings are immutable and so any change to a string returns a new string.</div></li><li data-component="answer" id="csawesome2_2_mid_1_19_opt_c" data-correct=""><div class="para" id="mid_1_19-2-3-1-1">Hi There</div></li><li data-component="feedback" id="csawesome2_2_mid_1_19_opt_c"><div class="para" id="mid_1_19-2-3-2-1">Correct!</div></li><li data-component="answer" id="csawesome2_2_mid_1_19_opt_d"><div class="para" id="mid_1_19-2-4-1-1">null</div></li><li data-component="feedback" id="csawesome2_2_mid_1_19_opt_d"><div class="para" id="mid_1_19-2-4-2-1">Strings are immutable and so any changes to a string returns a new string.</div></li><li data-component="answer" id="csawesome2_2_mid_1_19_opt_e"><div class="para" id="mid_1_19-2-5-1-1">hI tHERE</div></li><li data-component="feedback" id="csawesome2_2_mid_1_19_opt_e"><div class="para" id="mid_1_19-2-5-2-1">Strings are immutable and so any changes to a string returns a new string.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.14.20 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mid_1_20" data-multipleanswers="false"><div class="para" id="mid_1_20-1-1">5-15-20: Given following code, which of the following statements is a valid assignment statement using these variables?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int a = 5;
int b = 3;
int c = 4;
</code></pre></div><li data-component="answer" id="csawesome2_2_mid_1_20_opt_a"><div class="para" id="mid_1_20-2-1-1-1">a = 6.7</div></li><li data-component="feedback" id="csawesome2_2_mid_1_20_opt_a"><div class="para" id="mid_1_20-2-1-2-1">Check the data type of a.</div></li><li data-component="answer" id="csawesome2_2_mid_1_20_opt_b"><div class="para" id="mid_1_20-2-2-1-1">b = 87.7</div></li><li data-component="feedback" id="csawesome2_2_mid_1_20_opt_b"><div class="para" id="mid_1_20-2-2-2-1">Check the data type of b.</div></li><li data-component="answer" id="csawesome2_2_mid_1_20_opt_c"><div class="para" id="mid_1_20-2-3-1-1">12 = c * b</div></li><li data-component="feedback" id="csawesome2_2_mid_1_20_opt_c"><div class="para" id="mid_1_20-2-3-2-1">Assignment statements must have a variable on the left.</div></li><li data-component="answer" id="csawesome2_2_mid_1_20_opt_d" data-correct=""><div class="para" id="mid_1_20-2-4-1-1">c = a - b</div></li><li data-component="feedback" id="csawesome2_2_mid_1_20_opt_d"><div class="para" id="mid_1_20-2-4-2-1">Correct!</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>free-response-question-frq-for-classes</id>
      <title>Free Response Question (FRQ) for Classes</title>
      <question>
        <label>Exercise 3.15.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_steptracker_instance_variables">
                <span data-question="">
                  <div class="para" id="steptracker_instance_variables-1-1">Select the phrases below which probably mention an instance variable. Note that some of these may be referring to the same variable or to local variables.</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="steptracker_instance_variables-2-1">Think about phrases that indicate a value that is being stored or changed or returned.</div>
                </span>
                <pre>This question involves the implementation of <span data-incorrect="">a fitness tracking system</span>
that is represented by the <span data-incorrect="">**StepTracker** class.</span>

<span data-incorrect="">A StepTracker object</span> is created with a parameter that defines
<span data-correct="">the minimum number of steps that must be taken for a day to be active.</span>

<span data-incorrect="">The StepTracker class</span> provides a constructor and the following methods.

     - addDailySteps, which accumulates <span data-correct="">information about steps</span> in readings
       taken once per day.

     - activeDays, which returns <span data-correct="">the number of active days.</span>

     - averageSteps, which returns <span data-correct="">the average number of steps per day</span>
       calculated by dividing <span data-correct="">the total number of steps taken</span>
       by <span data-correct="">the number of days tracked.</span>
</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.15.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_steptracker-constructor" data-multipleanswers="false">
                <div class="para" id="steptracker-constructor-1-1">5-16-2: Given the StepTracker class description above, which of these statements describes an instance variable that the StepTracker constructor should set using a parameter?</div>
                <li data-component="answer" id="csawesome2_2_steptracker-constructor_opt_a" data-correct="">
                  <div class="para" id="steptracker-constructor-2-1-1-1">the minimum number of steps that must be taken for a day to be considered active</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-constructor_opt_a">
                  <div class="para" id="steptracker-constructor-2-1-2-1">Yes, the problem definition describes this as a parameter to create a StepTracker object.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_steptracker-constructor_opt_b">
                  <div class="para" id="steptracker-constructor-2-2-1-1">the number of active days</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-constructor_opt_b">
                  <div class="para" id="steptracker-constructor-2-2-2-1">This is not described as a parameter to create an StepTracker object.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_steptracker-constructor_opt_c">
                  <div class="para" id="steptracker-constructor-2-3-1-1">the average number of steps per day</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-constructor_opt_c">
                  <div class="para" id="steptracker-constructor-2-3-2-1">This is not described as a parameter to create an StepTracker object.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_steptracker-constructor_opt_d">
                  <div class="para" id="steptracker-constructor-2-4-1-1">the total number of steps taken</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-constructor_opt_d">
                  <div class="para" id="steptracker-constructor-2-4-2-1">This is not described as a parameter to create an StepTracker object.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_steptracker-constructor_opt_e">
                  <div class="para" id="steptracker-constructor-2-5-1-1">number of days tracked</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-constructor_opt_e">
                  <div class="para" id="steptracker-constructor-2-5-2-1">This is not described as a parameter to create an StepTracker object.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.15.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_steptracker-accessor" data-multipleanswers="false">
                <div class="para" id="steptracker-accessor-1-1">5-16-3: Which of the following methods is an accessor method that returns the value of an instance variable?</div>
                <li data-component="answer" id="csawesome2_2_steptracker-accessor_opt_a">
                  <div class="para" id="steptracker-accessor-2-1-1-1">StepTracker tr = new StepTracker(1000)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-accessor_opt_a">
                  <div class="para" id="steptracker-accessor-2-1-2-1">This is a call to the constructor.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_steptracker-accessor_opt_b">
                  <div class="para" id="steptracker-accessor-2-2-1-1">tr.addDailysteps(1000);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-accessor_opt_b">
                  <div class="para" id="steptracker-accessor-2-2-2-1">No, addDailySteps(1000) probably adds the given steps to an instance variable as a mutator method.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_steptracker-accessor_opt_c" data-correct="">
                  <div class="para" id="steptracker-accessor-2-3-1-1">tr.activeDays();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-accessor_opt_c">
                  <div class="para" id="steptracker-accessor-2-3-2-1">Yes, activeDays() is an accessor method that returns the number of active days (a great instance variable!).</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.15.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_steptracker-mutator" data-multipleanswers="false">
                <div class="para" id="steptracker-mutator-1-1">5-16-4: Which of the following methods is a mutator method that changes the value of an instance variable?</div>
                <li data-component="answer" id="csawesome2_2_steptracker-mutator_opt_a">
                  <div class="para" id="steptracker-mutator-2-1-1-1">StepTracker tr = new StepTracker(1000)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-mutator_opt_a">
                  <div class="para" id="steptracker-mutator-2-1-2-1">No, this is a call to the constructor.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_steptracker-mutator_opt_b" data-correct="">
                  <div class="para" id="steptracker-mutator-2-2-1-1">tr.addDailysteps(1000);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-mutator_opt_b">
                  <div class="para" id="steptracker-mutator-2-2-2-1">Yes, addDailySteps(1000) is a mutator method that adds the steps given as a parameter to an instance variable that keeps track of the steps taken so far.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_steptracker-mutator_opt_c">
                  <div class="para" id="steptracker-mutator-2-3-1-1">tr.activeDays();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-mutator_opt_c">
                  <div class="para" id="steptracker-mutator-2-3-2-1">No, activeDays() is an accessor method that returns the number of active days.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_steptracker-mutator_opt_d">
                  <div class="para" id="steptracker-mutator-2-4-1-1">tr.averageSteps();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-mutator_opt_d">
                  <div class="para" id="steptracker-mutator-2-4-2-1">No, averageSteps() is a complex accessor method that calculates and returns the average number of steps from the instance variable.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.15.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_stepTrackerCode1">
                <div class="ac_question" id="csawesome2_2_stepTrackerCode1_question">
                  <div class="para" id="stepTrackerCode1-1-1">Write the first draft of the class StepTracker below with the class name, the instance variables, and the constructor with a parameter for the minimum number of steps threshold for active days. Make sure it compiles.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_stepTrackerCode1_editor" data-question_label="" data-codelens="true">                    // Write public class your classname here and delete comment
{
   // write instance variable declarations here


   // write the constructor with a parameter here


   public static void main(String[] args)
   {
      StepTracker tr = new StepTracker(10000);
   }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

// Tests for ActiveCode StepTrackerCode1
public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        // check class name
        boolean passed = checkCodeContains("correct class heading", "public class StepTracker");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        // constructor with 1 parameter for threshold minSteps
        String args = "int";
        String results = checkConstructor(args);

        boolean passed = getResults("pass", results, "Checking constructor with one int argument");
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        // check int - declaration of instance variables and parameter in constructor
        String actual = testPrivateInstanceVariables();
        String expected = "4 Private";

        boolean passed = getResults(expected, actual, "Checking declaration of instance variables");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.15.4.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_steptracker-accessor-header" data-multipleanswers="false">
                <div class="para" id="steptracker-accessor-header-1-1">5-16-7: Which of the following is a good method header for the accessor method activeDays()?</div>
                <li data-component="answer" id="csawesome2_2_steptracker-accessor-header_opt_a">
                  <div class="para" id="steptracker-accessor-header-2-1-1-1">public void activeDays()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-accessor-header_opt_a">
                  <div class="para" id="steptracker-accessor-header-2-1-2-1">Accessor methods need a return type since they return the value of an instance variable or a value calculated from instance variables.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_steptracker-accessor-header_opt_b">
                  <div class="para" id="steptracker-accessor-header-2-2-1-1">private void activeDays()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-accessor-header_opt_b">
                  <div class="para" id="steptracker-accessor-header-2-2-2-1">Accessor methods should not be private.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_steptracker-accessor-header_opt_c">
                  <div class="para" id="steptracker-accessor-header-2-3-1-1">public int activeDays(int numSteps)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-accessor-header_opt_c">
                  <div class="para" id="steptracker-accessor-header-2-3-2-1">Accessor methods do not usually take parameters.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_steptracker-accessor-header_opt_d">
                  <div class="para" id="steptracker-accessor-header-2-4-1-1">public void activeDays(int numSteps)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-accessor-header_opt_d">
                  <div class="para" id="steptracker-accessor-header-2-4-2-1">Accessor methods need a return type since they return the value of an instance variable or a value calculated from instance variables, and  they do not usually have a parameter.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_steptracker-accessor-header_opt_e" data-correct="">
                  <div class="para" id="steptracker-accessor-header-2-5-1-1">public int activeDays()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-accessor-header_opt_e">
                  <div class="para" id="steptracker-accessor-header-2-5-2-1">Correct, accessor methods are public, have a return type, and no parameter.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.15.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_stepTrackerCode2">
                <div class="ac_question" id="csawesome2_2_stepTrackerCode2_question">
                  <div class="para" id="stepTrackerCode2-1-1">Copy the code from your first draft of the class StepTracker above  with the instance variables and constructor. Write the accessor methods <dfn class="terminology">activeDays</dfn> which returns the number of active days.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_stepTrackerCode2_editor" data-question_label="" data-codelens="true">public class StepTracker
{
    // copy the instance variable declarations here

    // copy the constructor with a parameter here

    // Write the accessor method activeDays() here
    // @return activeDays

    public static void main(String[] args)
    {
        StepTracker tr = new StepTracker(10000);
        System.out.println(
                tr.activeDays()); // returns 0. No data have been recorded yet.
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "0\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void checkCodeContains1()
    {
        // check accessor method activeDays()
        boolean passed = checkCodeContains("activeDays() method", "public int activeDays()");
        assertTrue(passed);
    }

    @Test
    public void checkCodeContains2()
    {
        // check that activeDays() returns a value
        boolean passed = checkCodeContains("return");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.15.5.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_steptracker-mutator-header" data-multipleanswers="false">
                <div class="para" id="steptracker-mutator-header-1-1">5-16-9: Which of the following is a good method header for the mutator method addDailySteps?</div>
                <li data-component="answer" id="csawesome2_2_steptracker-mutator-header_opt_a">
                  <div class="para" id="steptracker-mutator-header-2-1-1-1">public void addDailySteps()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-mutator-header_opt_a">
                  <div class="para" id="steptracker-mutator-header-2-1-2-1">Mutator methods take a parameter to change the value of an instance variable.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_steptracker-mutator-header_opt_b">
                  <div class="para" id="steptracker-mutator-header-2-2-1-1">private void addDailySteps()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-mutator-header_opt_b">
                  <div class="para" id="steptracker-mutator-header-2-2-2-1">Mutator methods should not be private.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_steptracker-mutator-header_opt_c">
                  <div class="para" id="steptracker-mutator-header-2-3-1-1">public int addDailySteps(int numSteps)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-mutator-header_opt_c">
                  <div class="para" id="steptracker-mutator-header-2-3-2-1">Mutator methods do not usually return a value.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_steptracker-mutator-header_opt_d" data-correct="">
                  <div class="para" id="steptracker-mutator-header-2-4-1-1">public void addDailySteps(int numSteps)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-mutator-header_opt_d">
                  <div class="para" id="steptracker-mutator-header-2-4-2-1">Correct, mutator methods are public with a void return type and take a parameter to change the value of an instance variable.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_steptracker-mutator-header_opt_e">
                  <div class="para" id="steptracker-mutator-header-2-5-1-1">private int addDailySteps()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-mutator-header_opt_e">
                  <div class="para" id="steptracker-mutator-header-2-5-2-1">Mutator methods should not be private and should take a parameter to change the value of an instance variable.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.15.5.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_steptracker-mutator-changes" data-multipleanswers="true">
                <div class="para" id="steptracker-mutator-changes-1-1">5-16-10: Which of the following values does the mutator method addDailySteps need to change? (check all that apply)</div>
                <li data-component="answer" id="csawesome2_2_steptracker-mutator-changes_opt_a">
                  <div class="para" id="steptracker-mutator-changes-2-1-1-1">the minimum number of steps that must be taken for a day to be considered active</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-mutator-changes_opt_a">
                  <div class="para" id="steptracker-mutator-changes-2-1-2-1">The minimum is set by the constructor.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_steptracker-mutator-changes_opt_b" data-correct="">
                  <div class="para" id="steptracker-mutator-changes-2-2-1-1">the number of active days</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-mutator-changes_opt_b">
                  <div class="para" id="steptracker-mutator-changes-2-2-2-1">Yes, addDailySteps should determine whether the number of steps given in its parameter is an active day and if so, change this variable.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_steptracker-mutator-changes_opt_c">
                  <div class="para" id="steptracker-mutator-changes-2-3-1-1">the average number of steps per day</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-mutator-changes_opt_c">
                  <div class="para" id="steptracker-mutator-changes-2-3-2-1">This method does not have to calculate the average.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_steptracker-mutator-changes_opt_d" data-correct="">
                  <div class="para" id="steptracker-mutator-changes-2-4-1-1">the total number of steps taken</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-mutator-changes_opt_d">
                  <div class="para" id="steptracker-mutator-changes-2-4-2-1">Yes, addDailySteps should add the number of steps taken that day in its parameter to the total.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_steptracker-mutator-changes_opt_e" data-correct="">
                  <div class="para" id="steptracker-mutator-changes-2-5-1-1">number of days tracked</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-mutator-changes_opt_e">
                  <div class="para" id="steptracker-mutator-changes-2-5-2-1">Yes, addDailySteps is called each day and can change the variable for the number of days being tracked.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.15.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_stepTrackerCode3">
                <div class="ac_question" id="csawesome2_2_stepTrackerCode3_question">
                  <div class="para" id="stepTrackerCode3-1-1">Copy the code from your draft of the class StepTracker above  with the class name, the instance variables, constructor, and accessory method. Write the mutator method <dfn class="terminology">addDailySteps</dfn> which takes a parameter and adds it to the appropriate instance variable and changes other instance variables appropriately.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_stepTrackerCode3_editor" data-question_label="" data-codelens="true">public class StepTracker
{
    // copy the instance variable declarations here

    // copy the constructor with a parameter here

    // copy the accessor method activeDays() here.

    // Write the mutator method addDailySteps here.
    // @param number of steps taken that day

    public static void main(String[] args)
    {
        StepTracker tr = new StepTracker(10000);

        // returns 0. No data have been recorded yet.
        System.out.println(tr.activeDays());

        // This is too few steps for the day to be considered active.
        tr.addDailySteps(9000);

        // This is too few steps for the day to be considered active.
        tr.addDailySteps(5000);

        // returns 0.  No day had at least 10,000 steps.
        System.out.println(tr.activeDays());

        // This represents an active day.
        tr.addDailySteps(13000);

        // returns 1. Of the three days for which step data were entered, one day
        // had at least 10,000 steps.
        System.out.println(tr.activeDays());
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "0\n0\n1\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void checkCodeContains1()
    {
        // check mutator method addDailySteps()
        boolean passed =
                checkCodeContains(
                        "addDailySteps method with parameter", "public void addDailySteps(int");
        assertTrue(passed);
    }

    @Test
    public void checkCodeContains2()
    {
        // check mutator method addDailySteps() contains "if"
        boolean passed = checkCodeContains("if statement", "if (");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3.15.6.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_steptracker-accessor-header2" data-multipleanswers="false">
                <div class="para" id="steptracker-accessor-header2-1-1">5-16-12: Which of the following is a good method header for the accessor method averageSteps() which returns the average number of steps per day?</div>
                <li data-component="answer" id="csawesome2_2_steptracker-accessor-header2_opt_a">
                  <div class="para" id="steptracker-accessor-header2-2-1-1-1">public void averageSteps()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-accessor-header2_opt_a">
                  <div class="para" id="steptracker-accessor-header2-2-1-2-1">Accessor methods need a return type since they return the value of an instance variable or a value calculated from instance variables.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_steptracker-accessor-header2_opt_b">
                  <div class="para" id="steptracker-accessor-header2-2-2-1-1">public int averageSteps()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-accessor-header2_opt_b">
                  <div class="para" id="steptracker-accessor-header2-2-2-2-1">When you compute an average using division, you usually end up with a double value, not int.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_steptracker-accessor-header2_opt_c" data-correct="">
                  <div class="para" id="steptracker-accessor-header2-2-3-1-1">public double averageSteps()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-accessor-header2_opt_c">
                  <div class="para" id="steptracker-accessor-header2-2-3-2-1">Correct, accessor methods are public, have a return type, and no parameter. In this case, returning an average requires a double return type.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_steptracker-accessor-header2_opt_d">
                  <div class="para" id="steptracker-accessor-header2-2-4-1-1">public void averageSteps(int numSteps)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-accessor-header2_opt_d">
                  <div class="para" id="steptracker-accessor-header2-2-4-2-1">Accessor methods need a return type since they return the value of an instance variable or a value calculated from instance variables, and  they do not usually have a parameter.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_steptracker-accessor-header2_opt_e">
                  <div class="para" id="steptracker-accessor-header2-2-5-1-1">public int averageSteps(int numSteps)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_steptracker-accessor-header2_opt_e">
                  <div class="para" id="steptracker-accessor-header2-2-5-2-1">Accessor methods do not usually take parameters.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 3.15.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_stepTrackerCode4">
                <div class="ac_question" id="csawesome2_2_stepTrackerCode4_question">
                  <div class="para" id="stepTrackerCode4-1-1">Copy the code from your draft of the class StepTracker above  with the instance variables, constructor, accessor and mutator methods. Write the accessor method <dfn class="terminology">averageSteps</dfn> which returns the average number of steps per day, calculated by dividing the total number of steps taken by the number of days tracked.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_stepTrackerCode4_editor" data-question_label="" data-codelens="true">public class StepTracker
{
    // copy the instance variable declarations here

    // copy the constructor with a parameter here

    // copy the accessor method activeDays() here.

    // Write the mutator method addDailySteps here.
    // @param number of steps taken that day

    public static void main(String[] args)
    {
        StepTracker tr = new StepTracker(10000);
        // returns 0. No data has been recorded yet.
        System.out.println(tr.activeDays());
        // returns 0.0. When no step data have been recorded,
        //  the averageSteps method returns 0.0
        System.out.println(tr.averageSteps());

        // This is too few steps for the day to be considered active.
        tr.addDailySteps(9000);

        // This is too few steps for the day to be considered active.
        tr.addDailySteps(5000);

        // returns 0.  No day had at least 10,000 steps.
        System.out.println(tr.activeDays());
        // returns 7000.0 The average number of steps per day is (14000/2).
        System.out.println(tr.averageSteps());

        // This represents an active day.
        tr.addDailySteps(13000);
        // returns 1. Of the three days for which step data were entered,
        // one day had at least 10,000 steps.
        System.out.println(tr.activeDays());
        // returns 9000.0. The average number of steps per day is (27000/3).
        System.out.println(tr.averageSteps());

        tr.addDailySteps(23000); // This represents an active day.
        tr.addDailySteps(1111); // This is too few steps for the day to be active.
        // returns 2. Of the five days for which step data were entered,
        //    two days had at least 10,000 steps.
        System.out.println(tr.activeDays());
        // returns 10222.2. The average number of steps per day is (51111/5).
        System.out.println(tr.averageSteps());
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "0\n0.0\n0\n7000.0\n1\n9000.0\n2\n10222.2\n";
        boolean passed =
                getResults(
                        expect,
                        output,
                        "Expected output from main. Make sure you used casting to double for the"
                                + " last result!");
        assertTrue(passed);
    }

    @Test
    public void checkCodeContains1()
    {
        // check mutator method averageSteps()
        boolean passed = checkCodeContains("averageSteps() method", "public double averageSteps()");
        assertTrue(passed);
    }

    @Test
    public void checkCodeZero()
    {
        StepTracker tr = new StepTracker(10000);
        double average = tr.averageSteps();

        boolean passed =
                getResults(0.0, average, "averageSteps() returns 0.0 when no days recorded");
        assertTrue(passed);
    }

    @Test
    public void checkCodeDoubleResult()
    {
        StepTracker tr = new StepTracker(10000);
        tr.addDailySteps(9000); // This is too few steps for the day to be considered active.
        tr.addDailySteps(5000);
        tr.addDailySteps(13000);
        tr.addDailySteps(23000);
        tr.addDailySteps(1111);
        double average = tr.averageSteps();

        boolean passed =
                getResults(
                        10222.2, average, "averageSteps() returns 10222.2 (no integer division)");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>free-response-question-time</id>
      <title>Free Response Question - Time</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">/**
 * Objects of the Time class hold a time value for a European-style 24 hour clock.
 * The value consists of hours, minutes and seconds. The range of the value is
 * 00:00:00 (midnight) to 23:59:59 (one second before midnight).
 */
public class Time
{
    // The values of the three parts of the time
    private int hours;
    private int minutes;
    private int seconds;

    /**
     * Creates a new Time object set to 00:00:00. Do not change this constructor.
     */
    public Time()
    {
        this.hours = 0;
        this.minutes = 0;
        this.seconds = 0;
    }

    /**
     * Constructor for objects of class Time. Creates a new Time object set to
     * h:m:s. Assumes, without checking, that the parameter values are within
     * bounds. For this task, you don't need to worry about invalid parameter
     * values. Do not change this constructor.
     */
    public Time(int h, int m, int s)
    {
        this.hours = h;
        this.minutes = m;
        this.seconds = s;
    }

    /**
     * Add one second to the current time. When the seconds value reaches 60, it
     * rolls over to zero. When the seconds roll over to zero, the minutes advance.
     * So 00:00:59 rolls over to 00:01:00. When the minutes reach 60, they roll
     * over and the hours advance. So 00:59:59 rolls over to 01:00:00. When the
     * hours reach 24, they roll over to zero. So 23:59:59 rolls over to 00:00:00.
     */
    public void tick()
    {
        // Part a: complete the tick() method
    }

    public String toString()
    {
        return pad(hours) + ":" + pad(minutes) + ":" + pad(seconds);
    }

    /**
     * Returns a string representing the argument value, adding a leading "0" if
     * needed to make it at least two digits long. Do not change this.
     */
    private String pad(int value)
    {
        String sign = "";
        if (value &lt; 0)
        {
            sign = "-";
            value = -1 * value;
        }
        if (value &lt; 10)
        {
            return sign + "0" + value;
        }
        else
        {
            return sign + value;
        }
    }

    public static void main(String[] args)
    {
        Time time = new Time(0, 0, 0);
        time.tick();
        System.out.println(
                "For (0,0,0) and tick() you got "
                        + time
                        + " which should be 00:00:01");

        time = new Time(0, 0, 58);
        time.tick();
        System.out.println(
                "For (0,0,58) and tick() you got "
                        + time
                        + " which should be 00:00:59");

        time = new Time(0, 0, 59);
        time.tick();
        System.out.println(
                "For (0,0,59) and tick() you got "
                        + time
                        + " which should be 00:01:00");

        time = new Time(0, 58, 59);
        time.tick();
        System.out.println(
                "For (0,58,59) and tick() you got "
                        + time
                        + " which should be 00:59:00");

        time = new Time(0, 59, 59);
        time.tick();
        System.out.println(
                "For (0,59,59) and tick() you got "
                        + time
                        + " which should be 01:00:00");

        time = new Time(23, 59, 59);
        time.tick();
        System.out.println(
                "For (23,59,59) and tick() you got "
                        + time
                        + " which should be 00:00:00");
    }
}
====
// Test Code for Lesson 5.14 - FRQ - Time - Part A

import static org.junit.Assert.*;

import org.junit.Test;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    private Time[] time =
    {
        new Time(0, 0, 0),
        new Time(0, 0, 58),
        new Time(0, 0, 59),
        new Time(0, 58, 59),
        new Time(0, 59, 59),
        new Time(23, 59, 59)
    };
    private String[] expected =
    {
        "00:00:01", "00:00:59", "00:01:00", "00:59:00", "01:00:00", "00:00:00"
    };

    @Test
    public void test0() throws IOException
    {
        Time time = new Time(0, 0, 0);
        String label = time.toString() + ".tick()";
        time.tick();
        String actual = time.toString();
        String expected = "00:00:01";

        boolean passed = getResults(expected, actual, label);
        assertTrue(passed);
    }

    @Test
    public void test1() throws IOException
    {
        int i = 1;
        String label = time[i].toString() + ".tick()";
        time[i].tick();
        String actual = time[i].toString();
        boolean passed = getResults(expected[i], actual, label);
        assertTrue(passed);
    }

    @Test
    public void test2() throws IOException
    {
        int i = 2;
        String label = time[i].toString() + ".tick()";
        time[i].tick();
        String actual = time[i].toString();
        boolean passed = getResults(expected[i], actual, label);
        assertTrue(passed);
    }

    @Test
    public void test3() throws IOException
    {
        int i = 3;
        String label = time[i].toString() + ".tick()";
        time[i].tick();
        String actual = time[i].toString();
        boolean passed = getResults(expected[i], actual, label);
        assertTrue(passed);
    }

    @Test
    public void test4() throws IOException
    {
        int i = 4;
        String label = time[i].toString() + ".tick()";
        time[i].tick();
        String actual = time[i].toString();
        boolean passed = getResults(expected[i], actual, label);
        assertTrue(passed);
    }

    @Test
    public void test5() throws IOException
    {
        int i = 5;
        String label = time[i].toString() + ".tick()";
        time[i].tick();
        String actual = time[i].toString();
        boolean passed = getResults(expected[i], actual, label);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">/**
 * Objects of the Time class hold a time value for a European-style 24 hour clock.
 * The value consists of hours, minutes and seconds. The range of the value is
 * 00:00:00 (midnight) to 23:59:59 (one * second before midnight).
 */
public class Time
{
    // The values of the three parts of the time
    private int hours;
    private int minutes;
    private int seconds;

    /**
     * Creates a new Time object set to 00:00:00. Do not change this constructor.
     */
    public Time()
    {
        this.hours = 0;
        this.minutes = 0;
        this.seconds = 0;
    }

    /**
     * Constructor for objects of class Time. Creates a new Time object set to
     * h:m:s. Assumes, without checking, that the parameter values are within
     * bounds. For this task, you don't need to worry about invalid parameter
     * values. Do not change this constructor.
     */
    public Time(int h, int m, int s)
    {
        this.hours = h;
        this.minutes = m;
        this.seconds = s;
    }

    /**
     * Add an offset to this Time. Rolls over the hours, minutes and seconds fields
     * when needed.
     */
    public void add(Time offset)
    {
        // Part b: complete the add method
    }

    public String toString()
    {
        return pad(hours) + ":" + pad(minutes) + ":" + pad(seconds);
    }

    /**
     * Returns a string representing the argument value, adding a leading "0" if
     * needed to make it at least two digits long. Do not change this.
     */
    private String pad(int value)
    {
        String sign = "";
        if (value &lt; 0)
        {
            sign = "-";
            value = -1 * value;
        }
        if (value &lt; 10)
        {
            return sign + "0" + value;
        }
        else
        {
            return sign + value;
        }
    }

    public static void main(String[] args)
    {
        Time time1 = new Time(1, 1, 1);
        Time time2 = new Time(2, 2, 2);
        time1.add(time2);
        System.out.println(
                "The result of (1,1,1).add(2,2,2) is "
                        + time1
                        + " and should be (03:03:03)");

        time1 = new Time(0, 0, 59);
        time2 = new Time(0, 0, 1);
        time1.add(time2);
        System.out.println(
                "The result of (0,0,59).add(0,0,1) is "
                        + time1
                        + " and should be (00:01:00)");

        time1 = new Time(0, 59, 0);
        time2 = new Time(0, 0, 1);
        time1.add(time2);
        System.out.println(
                "The result of (0,59,0).add(0,0,1) is "
                        + time1
                        + " and should be (00:59:01)");

        time1 = new Time(0, 59, 59);
        time2 = new Time(0, 0, 1);
        time1.add(time2);
        System.out.println(
                "The result of (0,59,59).add(0,0,1) is "
                        + time1
                        + " and should be (01:00:00)");

        time1 = new Time(23, 0, 0);
        time2 = new Time(1, 0, 0);
        time1.add(time2);
        System.out.println(
                "The result of (23,0,0).add(1,0,0) is "
                        + time1
                        + " and should be (00:00:00)");

        time1 = new Time(23, 59, 59);
        time2 = new Time(23, 59, 59);
        time1.add(time2);
        System.out.println(
                "The result of (23,59,59).add(23,59,59) is "
                        + time1
                        + " and should be (23:59:58)");
    }
}
====
// Test Code for Lesson 5.14 - FRQ - Time - Part B
import static org.junit.Assert.*;

import org.junit.Test;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1() throws IOException
    {
        Time time1 = new Time(1, 1, 1);
        Time time2 = new Time(2, 2, 2);
        time1.add(time2);

        String expected = "03:03:03";
        String actual = time1.toString();

        String msg = time1.toString() + ".add(" + time2.toString() + ")";

        boolean passed = getResults(expected, actual, msg);
        assertTrue(passed);
    }

    @Test
    public void test2() throws IOException
    {
        Time time1 = new Time(0, 0, 59);
        Time time2 = new Time(0, 0, 1);
        time1.add(time2);

        String expected = "00:01:00";
        String actual = time1.toString();

        boolean passed =
                getResults(expected, actual, time1.toString() + ".add(" + time2.toString() + ")");
        assertTrue(passed);
    }

    @Test
    public void test3() throws IOException
    {
        Time time1 = new Time(0, 59, 0);
        Time time2 = new Time(0, 0, 1);
        time1.add(time2);

        String expected = "00:59:01";
        String actual = time1.toString();

        boolean passed =
                getResults(expected, actual, time1.toString() + ".add(" + time2.toString() + ")");
        assertTrue(passed);
    }

    @Test
    public void test4() throws IOException
    {
        Time time1 = new Time(0, 59, 59);
        Time time2 = new Time(0, 0, 1);
        time1.add(time2);

        String expected = "01:00:00";
        String actual = time1.toString();

        boolean passed =
                getResults(expected, actual, time1.toString() + ".add(" + time2.toString() + ")");
        assertTrue(passed);
    }

    @Test
    public void test5() throws IOException
    {
        Time time1 = new Time(23, 0, 0);
        Time time2 = new Time(1, 0, 0);
        time1.add(time2);

        String expected = "00:00:00";
        String actual = time1.toString();

        boolean passed =
                getResults(expected, actual, time1.toString() + ".add(" + time2.toString() + ")");
        assertTrue(passed);
    }

    @Test
    public void test6() throws IOException
    {
        Time time1 = new Time(23, 59, 59);
        Time time2 = new Time(23, 59, 59);
        time1.add(time2);

        String expected = "23:59:58";
        String actual = time1.toString();

        boolean passed =
                getResults(expected, actual, time1.toString() + ".add(" + time2.toString() + ")");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-001710</id>
      <title>Free Response Question - APLine</title>
      <question>
        <label>Exercise 3.17.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_APLineFRQ">
                <div class="ac_question" id="csawesome2_2_APLineFRQ_question">
                  <div class="para" id="APLineFRQ-1-1">Write a class APLine with instance variables, a constructor with 3 paramaters for a, b, c, and the methods getSlope() and isOnLine(x,y).</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_APLineFRQ_editor" data-question_label="" data-codelens="true">// Declare the APLine class

{
 /** Declare instance variables */

 /** Constructor with 3 int parameters. */

 /** method getSlope(): Determine the slope of this APLine. */

 /** method isOnLine(x,y): Determine if coordinates (x,y) represent a point on this APLine. */

 /** Test with this main method */
 public static void main(String[] args)
 {
     APLine line1 = new APLine(5, 4, -17);
     double slope1 = line1.getSlope(); // slope1 is assigned -1.25
     boolean onLine1 = line1.isOnLine(5, -2); // true because 5(5) + 4(-2) + (-17) = 0

     APLine line2 = new APLine(-25, 40, 30);
     double slope2 = line2.getSlope(); // slope2 is assigned 0.625
     boolean onLine2 = line2.isOnLine(5, -2); // false because -25(5) + 40(-2) + 30 != 0
     // Should print out true and false
     System.out.println(onLine1 + " " + onLine2);
  }
}
====
// Test Code for Lesson 5.15 - FRQ - APLine
import static org.junit.Assert.*;

import org.junit.Test;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("APLine");
        // This sets default values for when objects are instantiated
        Object[] values = new Object[] {3, 2, -6};
        setDefaultValues(values);
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = " true false";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }

    @Test
    public void testConstructor()
    {
        String output = checkConstructor(3);
        String expect = "pass";

        boolean passed = getResults(expect, output, "Checking constructor with 3 parameters");
        assertTrue(passed);
    }

    @Test
    public void testGetSlope() throws IOException
    {
        double output = Double.parseDouble(getMethodOutput("getSlope"));
        double expect = -1.5;

        boolean passed = getResults(expect, output, "Checking method getSlope()");
        assertTrue(passed);
    }

    @Test
    public void testIsOnLine1() throws IOException
    {
        Object[] args = {2, 0};
        String output = getMethodOutput("isOnLine", args);
        String expect = "true";

        boolean passed = getResults(expect, output, "Checking method isOnLine(5, -2)");
        assertTrue(passed);
    }

    @Test
    public void testIsOnLine2() throws IOException
    {
        Object[] args = {5, -2};
        String output = getMethodOutput("isOnLine", args);
        String expect = "false";

        boolean passed = getResults(expect, output, "Checking method isOnLine(5, -2)");
        assertTrue(passed);
    }

    @Test
    public void testPrivateVariables()
    {
        String expect = "3 Private";
        // Will produce a printout with number of private and public variables
        String output = testPrivateInstanceVariables();

        boolean passed = getResults("3 Private", output, "Checking Instance Variable(s)");

        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>college-board-celebrity-and-data-labs</id>
      <title>College Board Celebrity and Data Labs</title>
    </subchapter>
    <subchapter>
      <id>groupwork-design-a-class-for-your-community-project</id>
      <title>|Groupwork| Design a Class for your Community Project</title>
      <question>
        <label>Exercise 3.19.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_community-challenge-complete-project">
                <div class="ac_question" id="csawesome2_2_community-challenge-complete-project_question">
                  <div class="para" id="community-challenge-complete-project-1-1">Design your class for your community below.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_community-challenge-complete-project_editor" data-question_label="" data-codelens="true">public class          // Add your class name here!
{
    // 1. write 3 instance variables for class: private type variableName;

    // 2. Add a constructor with 3 parameters to set all of the instance variables to the given parameters.

    // 3. Write a print() method that uses System.out.println to print out all the instance variables.

    // 4. Create accessor (get) methods for each of the instance variables.

    // 5. Create mutator (set) methods for each of the instance variables.

    // 6. Create a toString() method that returns all the information in the instance variables.

    // 7. Write an additional method for your class that takes a parameter.
    // For example, there could be a print method with arguments that indicate how you want to print out
    // the information, e.g. print(format) could print the data according to an argument that is "plain"
    // or "table" where the data is printed in a table drawn with dashes and lines (|).

    // 8. Write a main method that constructs at least 2 objects of your class
    // using the constructor and then calls all of the methods that you created above to test them.
    public static void main(String[] args)
    {
       // Construct 2 objects of your class using the constructor with different values


       // call all of the objects methods to test them

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testPrivateVariables()
    {
        String expect = "3 Private";
        String output = testPrivateInstanceVariables();
        boolean passed = false;
        if (Integer.parseInt(expect.substring(0, 1)) &lt;= Integer.parseInt(output.substring(0, 1)))
            passed = true;
        passed = getResults(expect, output, "Checking private instance variable(s)", passed);
        assertTrue(passed);
    }

    /* No longer required
    @Test
    public void testDefaultConstructor()
    {
        String output = checkDefaultConstructor();
        String expect = "pass";

        boolean passed = getResults(expect, output, "Checking default constructor");
        assertTrue(passed);
    } */

    @Test
    public void testConstructor3()
    {
        String output = checkConstructor(3);
        String expect = "pass";

        boolean passed = getResults(expect, output, "Checking constructor with 3 parameters");
        assertTrue(passed);
    }

    @Test
    public void testPrint()
    {
        String output = getMethodOutput("print");
        String expect = "More than 15 characters";
        String actual = " than 15 characters";

        if (output.length() &lt; 15)
        {
            actual = "Less" + actual;
        }
        else
        {
            actual = "More" + actual;
        }
        boolean passed = getResults(expect, actual, "Checking print method");
        assertTrue(passed);
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main"); // .split("\n");
        String expect = "3+ line(s) of text";
        String actual = " line(s) of text";
        int len = output.split("\n").length;

        if (output.length() &gt; 0)
        {
            actual = len + actual;
        }
        else
        {
            actual = output.length() + actual;
        }
        boolean passed = len &gt;= 3;

        getResults(expect, actual, "Checking output", passed);
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        String code = getCode();
        String target = "public * get*()";

        int num = countOccurencesRegex(code, target);

        boolean passed = num &gt;= 3;

        getResults("3", "" + num, "Checking accessor (get) methods for each variable", passed);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String code = getCode();
        String target = "public void set*(*)";

        int num = countOccurencesRegex(code, target);

        boolean passed = num &gt;= 3;

        getResults("3", "" + num, "Checking mutator (set) methods for each variable", passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "public String toString()";
        boolean passed = checkCodeContains("toString() method", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
  </chapter>
  <chapter>
    <id>csawesome2-8</id>
    <title>Data Collections</title>
    <subchapter>
      <id>ethics-of-data-collection-and-data-privacy</id>
      <title>Ethics of Data Collection and Data Privacy</title>
      <question>
        <label>Video: bqWuioPHhz0</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="bqWuioPHhz0" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>data-sets</id>
      <title>Data Sets</title>
    </subchapter>
    <subchapter>
      <id>csawesome2-8-4</id>
      <title>Array Creation and Access</title>
      <question>
        <label>Video: G7aF-OuLfl4</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="G7aF-OuLfl4" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: IbPFjw1FNkE</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="IbPFjw1FNkE" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.3.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_createarray" data-multipleanswers="false">
                <div class="para" id="createarray-1-1">6-1-4: Which of the following creates an array of 10 doubles called prices?</div>
                <li data-component="answer" id="csawesome2_2_createarray_opt_a">
                  <div class="para" id="createarray-2-1-1-1">int[] prices = new int[10];</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_createarray_opt_a">
                  <div class="para" id="createarray-2-1-2-1">We need double for money amounts in prices.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_createarray_opt_b" data-correct="">
                  <div class="para" id="createarray-2-2-1-1">double[] prices = new double[10];</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_createarray_opt_b">
                  <div class="para" id="createarray-2-2-2-1">Yes correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_createarray_opt_c">
                  <div class="para" id="createarray-2-3-1-1">double[] prices;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_createarray_opt_c">
                  <div class="para" id="createarray-2-3-2-1">This declares the array but does not create it with new.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_createarray_opt_d">
                  <div class="para" id="createarray-2-4-1-1">double[10] prices = new double[];</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_createarray_opt_d">
                  <div class="para" id="createarray-2-4-2-1">This is not the correct syntax.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.3.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcab1">
                <div class="ac_question" id="csawesome2_2_lcab1_question">
                  <div class="para" id="lcab1-1-1">In the following code, add another two more array declarations, one that creates an array of 5 doubles called prices and another of 5 Strings called names. Then add <code class="code-inline tex2jax_ignore">System.out.println</code> calls to print their lengths.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcab1_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        // Array example
        int[] highScores = new int[10];
        // Add an array of 5 doubles called prices.

        // Add an array of 5 Strings called names.

        System.out.println(
                "Array highScores declared with size " + highScores.length);
        // Print out the length of the new arrays
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Test1");
    }

    @Test
    public void testDouble() throws IOException
    {
        String target = "new double[5];";
        boolean passed = checkCodeContains(target);
        assertTrue(passed);
    }

    @Test
    public void testString() throws IOException
    {
        String target = "new String[5];";
        boolean passed = checkCodeContains(target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: T-YZvVvPOac</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="T-YZvVvPOac" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.3.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcab2">
                <div class="ac_question" id="csawesome2_2_lcab2_question">
                  <div class="para" id="lcab2-1-1">Try running the code below to see the length. Try adding another value to the highScores initializer list and run again to see the length value change.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcab2_editor" data-question_label="" data-codelens="true">public class Test2
{
    public static void main(String[] args)
    {
        int[] highScores = {99, 98, 98, 88, 68};
        System.out.println(highScores.length);
    }
}
====
// Test for Lesson 6.1.2 - While Loop FindAndReplace lclw1
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Test2");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main").trim();
        String expect = "6";

        // boolean pass = !output.equals(expect.trim());

        boolean passed = getResults(expect, output, "Did you add another value?");
        assertTrue(passed);
    }

    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class Test2 { public static void main (String [] args) { int [] highScores"
                    + " = {99,98,98,88,68}; System.out.println(highScores.length); } }";

        boolean changed = codeChanged(origCode);

        assertTrue(changed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.3.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qab_2" data-multipleanswers="false">
                <div class="para" id="qab_2-1-1">6-1-8: Which index is for the last element of an array called <code class="code-inline tex2jax_ignore">highScores</code>?</div>
                <li data-component="answer" id="csawesome2_2_qab_2_opt_a">
                  <div class="para" id="qab_2-2-1-1-1">highScores.length</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qab_2_opt_a">
                  <div class="para" id="qab_2-2-1-2-1">Remember that the first element in an array starts at index 0. If the length (the number of elements) of the array is 5, at what index would you find the last element?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qab_2_opt_b" data-correct="">
                  <div class="para" id="qab_2-2-2-1-1">highScores.length - 1</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qab_2_opt_b">
                  <div class="para" id="qab_2-2-2-2-1">Since the first element in an array is at index 0 the last element is the length minus 1.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: uagEJw6bTM4</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="uagEJw6bTM4" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.3.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_array-access1">
                <div class="para" id="array-access1-1-1">6-1-10:  Fill in the blank with code to access the cars array. NOTE: The semicolon is provided for you after the box. <input type="text" placeholder=""/></div>
                <script type="application/json">[[]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.3.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_array-access2">
                <div class="para" id="array-access2-1-1">6-1-11:  Fill in the blank with code to access the cars array. <input type="text" placeholder=""/></div>
                <script type="application/json">[[]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.3.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_array-set">
                <div class="ac_question" id="csawesome2_2_array-set_question">
                  <div class="para" id="array-set-1-1">Try out the following code which has two parallel arrays, highScores and names. Can you print out Mateo’s score? Can you change Sofia’s score to 97 using an assignment statement in the code? Can you change the arrays so that they have 6 elements and add your name and score and print them out?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_array-set_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        // declare, create, initialize arrays
        int[] highScores = {99, 98, 98, 88, 68};
        String[] names = {"Jamal", "Emily", "Destiny", "Mateo", "Sofia"};

        // Print corresponding names and scores
        System.out.println(names[0] + " has a score of " + highScores[0]);
        System.out.println(names[1] + " has a score of " + highScores[1]);
    }
}
====
// Test for Lesson 6.1.2 - While Loop FindAndReplace lclw1

import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Test1");
    }

    @Test
    public void test1() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Jamal has a score of 99\nEmily has a score of 98";

        boolean passed = !output.equals(expect);

        passed = getResults(expect, output, "Did you change the main?", passed);
        assertTrue(passed);
    }

    @Test
    public void test2() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Mateo has a score of 88";

        boolean passed = output.contains("Mateo");

        passed = getResults(expect, output, "Did you print out Mateo?", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.3.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_imageArray">
                <div class="ac_question" id="csawesome2_2_imageArray_question">
                  <div class="para" id="imageArray-1-1">Can you change the index variable’s value so that it prints out the puppy image? Can you print out the reindeer? Try all of them! What indices did you need to use? Then try using a random number for the index instead. Remember that (int)(Math.random()*max) will return a number from 0 up to max. What’s the maximum number it can be for this array?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_imageArray_editor" data-question_label="" data-codelens="true">public class ImageEx
{
    public static void main(String[] args)
    {
        String[] images =
        {
            "cow.jpg", "kitten.jpg", "puppy.jpg", "pig.jpg", "reindeer.jpg"
        };

        ImageEx obj = new ImageEx();
        // Change index to see different images in the array!
        // Can you have it pick out a random image?
        int index = 0;
        obj.printHTMLimage(images[index]);
    }

    // This method will just work in Active Code which interprets html
    public void printHTMLimage(String filename)
    {
        String baseURL =
                "https://raw.githubusercontent.com/bhoffman0/CSAwesome/master/_sources/Unit6-Arrays/6-1-images/";
        System.out.print("&lt;img src=" + baseURL + filename + " width=500px /&gt;");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

// ActiveCode imageArray
public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testCode()
    {
        String code = getCode();
        String expect = "int index = 0;";

        boolean passed = !code.contains(expect);

        getResults("index not 0", passed + "", "Changed index to another value", passed);
        assertTrue(passed);
    }

    @Test
    public void testRandomAdded()
    {
        boolean passed = checkCodeContains("Math.random to set index", "Math.random");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Countries
{
    public static void main(String[] args)
    {
        // 1. Declare 4 arrays and initialize them to the given values.
        // Countries: China, Egypt, France, Germany, India, Japan, Kenya, Mexico,
        // United Kingdom, United States
        // Capitals: Beijing, Cairo, Paris, Berlin, New Delhi, Tokyo, Nairobi,
        // Mexico City, London, Washington D.C.
        // Languages: Chinese, Arabic, French, German, Hindi, Japanese, Swahili,
        // Spanish, English, English
        // Filenames for map images: China.jpg, Egypt.jpg, France.jpg, Germany.jpg,
        // India.jpg, Japan.jpg, Kenya.jpg, Mexico.jpg, UK.jpg, US.jpg

        // 2. Pick a random number up to the length of one of the arrays and save
        // in the variable index

        // 3. Print out the info in each array using the random index

        // Example of showing image files using an array called images (your array
        // name above may be different)
        // (this will only work in Active Code)
        // Countries obj = new Countries();
        // obj.printHTMLimage( images[index] );

    }

    // This method will just work in Active Code which interprets html
    public void printHTMLimage(String filename)
    {
        String baseURL =
                "https://raw.githubusercontent.com/bhoffman0/CSAwesome/master/_sources/Unit6-Arrays/6-1-images/";
        System.out.print("&lt;img src=" + baseURL + filename + " width=500px /&gt;");
    }
}
====
// Test for Lesson 6.1 - challenge
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Countries");
    }

    @Test
    public void test1() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Country Capital Language Image";

        int len = expect.split(" ").length;

        boolean passed = len == 4 &amp;&amp; output.contains(".jpg");

        passed = getResults(expect, expect, "Did you print all the info?", passed);
        assertTrue(passed);
    }

    @Test
    public void test2() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "&lt;img src";

        boolean passed = output.contains(expect);

        // passed = getResults(expect + "...", output, "Did you uncomment the image code?", passed);
        passed = getResults("image", "image", "Did you uncomment the image code?", passed);
        assertTrue(passed);
    }

    @Test
    public void test3() throws IOException
    {
        String[] lines = new String[10];

        for (int i = 0; i &lt; lines.length; i++)
        {
            lines[i] = getMethodOutput("main");
        }

        int difft = 10;

        for (int i = 0; i &lt; lines.length - 1; i++)
        {
            if (lines[i].equals(lines[i + 1]))
            {
                difft--;
            }
        }

        boolean passed = difft &gt; 3;

        passed =
                getResults(
                        "&gt; 3 Countries",
                        difft + " countries",
                        "Can pick a random different country &gt; 3 times?",
                        passed);
        assertTrue(passed);
    }

    @Test
    public void testArrays() throws IOException
    {
        // System.out.println(program);
        String code = getCode();

        int arrays = countOccurences(code, "String[]");

        boolean passed =
                getResults(
                        "5 x String[]", arrays + " x String[]", "Did you declare 4 String arrays? (the 5th one is main's arg)");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.3.18 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_TurtleArray">
                <div class="ac_question" id="csawesome2_2_TurtleArray_question">
                  <div class="para" id="TurtleArray-1-1">Run the code below to see the 2 turtles in the array. Can you change the array size to 3 and create and add 1 more Turtle object to the array? Make this new turtle turnRight and go forward using its indexed array variable.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_TurtleArray_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.util.*;

public class TurtleArray
{
    public static void main(String[] args)
    {
        World world = new World(300, 300);
        // Declare an array for 2 Turtle objects
        Turtle[] turtarray = new Turtle[2];
        // Initialize the array elements by constructing each turtle object
        turtarray[0] = new Turtle(world);
        turtarray[1] = new Turtle(world);
        // Call each turtle's methods
        turtarray[0].forward();
        turtarray[1].turnLeft();
        turtarray[1].forward();

        world.show(true);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testArrayDeclaration() throws IOException
    {
        boolean passed = checkCodeContains("an array declaration of size 3", "Turtle[3]");
        assertTrue(passed);
    }

    @Test
    public void testInit()
    {
        boolean passed =
                checkCodeContains("initialization for array element 2", "[2] = new Turtle");
        assertTrue(passed);
    }

    @Test
    public void testprint()
    {
        boolean passed = checkCodeContains("call forward() of array element 2", "[2].forward();");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.3.19 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_community-challenge-6-1">
                <div class="ac_question" id="csawesome2_2_community-challenge-6-1_question">
                  <div class="para" id="community-challenge-6-1-1-1">Community Challenge: Copy your class from <a class="external" href="https://runestone.academy/ns/books/published/csawesome/Unit5-Writing-Classes/topic-5-6-writing-methods.html#groupwork-design-a-class-for-your-community" target="_blank">lesson 5.6</a><details class="ptx-footnote" aria-live="polite" id="community-challenge-6-1-1-1-2"><summary class="ptx-footnote__number" title="Footnote 4.3.6"><sup> 6 </sup></summary><div class="ptx-footnote__contents" id="community-challenge-6-1-1-1-2"><code class="code-inline tex2jax_ignore">https://runestone.academy/ns/books/published/csawesome/Unit5-Writing-Classes/topic-5-6-writing-methods.html#groupwork-design-a-class-for-your-community</code></div></details> below. Create an array of 3 objects of your class, initialize them to new objects and call their print methods.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_community-challenge-6-1_editor" data-question_label="" data-codelens="true">public class          // Add your class name here!
{
    // 1. Copy your class from lesson 5.6 below.



    public static void main(String[] args)
    {
       // 2. Create an array of 3 objects of your class.

       // 3. Initialize array elements 0-2 to new objects of your class.


       // 4. Call the print method of each object in the array using the array index.


    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testArrayDeclaration() throws IOException
    {
        boolean passed = checkCodeContains("an array declaration of size 3", "[3]");
        assertTrue(passed);
    }

    @Test
    public void testObjs() throws IOException
    {
        String code = getCode();
        String target = "new";
        int count = countOccurences(code, target);
        boolean passed = (count &gt;= 4);
        getResults(
                "4+ " + target,
                count + "+ " + target,
                "Did you declare 3 objects of your class using new and your constructor?",
                passed);
        assertTrue(passed);
    }

    @Test
    public void testInit()
    {
        boolean passed = checkCodeContains("initialization for array element 0", "[0]=");
        assertTrue(passed);
    }

    @Test
    public void testprint()
    {
        boolean passed = checkCodeContains("call to print() of array element 0", "[0].print");
        assertTrue(passed);
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main"); // .split("\n");
        String expect = "3+ line(s) of text";
        String actual = " line(s) of text";
        int len = output.split("\n").length;

        if (output.length() &gt; 0)
        {
            actual = len + actual;
        }
        else
        {
            actual = output.length() + actual;
        }
        boolean passed = len &gt;= 3;

        getResults(expect, actual, "Checking output", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.3.20 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP6-1-1" data-multipleanswers="false"><div class="para" id="AP6-1-1-1-1">6-1-17: Consider the following method. Given an <code class="code-inline tex2jax_ignore">array</code> initialized to <code class="code-inline tex2jax_ignore">{4, 10, 15}</code>, which of the following represents the contents of the array after a call to <code class="code-inline tex2jax_ignore">mystery(array, 2)</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public void mystery(int[] a, int i)
{
   a[i] = a[i-1] * 2;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_AP6-1-1_opt_a"><div class="para" id="AP6-1-1-2-1-1-1">[8, 20, 30]</div></li><li data-component="feedback" id="csawesome2_2_AP6-1-1_opt_a"><div class="para" id="AP6-1-1-2-1-2-1">This would only be true if all elements were doubled by the method.</div></li><li data-component="answer" id="csawesome2_2_AP6-1-1_opt_b"><div class="para" id="AP6-1-1-2-2-1-1">[4, 8, 15]</div></li><li data-component="feedback" id="csawesome2_2_AP6-1-1_opt_b"><div class="para" id="AP6-1-1-2-2-2-1">This would only be true if the call was ``mystery(array, 1)``. Remember that array indexing starts at 0.</div></li><li data-component="answer" id="csawesome2_2_AP6-1-1_opt_c"><div class="para" id="AP6-1-1-2-3-1-1">[8, 10, 15]</div></li><li data-component="feedback" id="csawesome2_2_AP6-1-1_opt_c"><div class="para" id="AP6-1-1-2-3-2-1">This would only be true if the method body had ``a[i-1] = a[i-1] * 2;``</div></li><li data-component="answer" id="csawesome2_2_AP6-1-1_opt_d" data-correct=""><div class="para" id="AP6-1-1-2-4-1-1">[4, 10, 20]</div></li><li data-component="feedback" id="csawesome2_2_AP6-1-1_opt_d"><div class="para" id="AP6-1-1-2-4-2-1">Correct. array[2] = array[1] * 2 = 10 * 2 = 20.</div></li><li data-component="answer" id="csawesome2_2_AP6-1-1_opt_e"><div class="para" id="AP6-1-1-2-5-1-1">[4, 8, 30]</div></li><li data-component="feedback" id="csawesome2_2_AP6-1-1_opt_e"><div class="para" id="AP6-1-1-2-5-2-1">Note that only 1 array element is changed.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.3.21 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP6-1-2" data-multipleanswers="false"><div class="para" id="AP6-1-2-1-1">6-1-18: Consider the following method. Which of the following code segments, appearing in the same class as the <code class="code-inline tex2jax_ignore">mystery</code> method, will result in <code class="code-inline tex2jax_ignore">array2</code> having the contents <code class="code-inline tex2jax_ignore">{5, 10, 20}</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public int[] mystery(int[] a, int i, int value)
{
   a[i + 1] = a[i] + value;
   return a;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_AP6-1-2_opt_a"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int[] array1 = {5, 10, 15};
int[] array2 = mystery(array1, 0, 10);
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP6-1-2_opt_a"><div class="para" id="AP6-1-2-2-1-2-1">This would result in <code class="code-inline tex2jax_ignore">{5, 15, 15}</code>.</div></li><li data-component="answer" id="csawesome2_2_AP6-1-2_opt_b"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int[] array1 = {5, 15, 20};
int[] array2 = mystery(array1, 0, 0);
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP6-1-2_opt_b"><div class="para" id="AP6-1-2-2-2-2-1">This would result in <code class="code-inline tex2jax_ignore">{5, 5, 20}</code>.</div></li><li data-component="answer" id="csawesome2_2_AP6-1-2_opt_c" data-correct=""><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int[] array1 = {5, 10, 15};
int[] array2 = mystery(array1, 1, 10);
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP6-1-2_opt_c"><div class="para" id="AP6-1-2-2-3-2-1">Correct! a[i+1] = a[2] = a[i] + value = a[1] + 10 = 10 + 10 = 20.</div></li><li data-component="answer" id="csawesome2_2_AP6-1-2_opt_d"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int[] array1 = {5, 15, 20};
int[] array2 = mystery(array1, 2, 0);
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP6-1-2_opt_d"><div class="para" id="AP6-1-2-2-4-2-1">This would result in an <code class="code-inline tex2jax_ignore">ArrayIndexOutOfBoundsException</code>.</div></li><li data-component="answer" id="csawesome2_2_AP6-1-2_opt_e"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int[] array1 = {5, 10, 15};
int[] array2 = mystery(array1, 1, 20);
</code></pre></div></li><li data-component="feedback" id="csawesome2_2_AP6-1-2_opt_e"><div class="para" id="AP6-1-2-2-5-2-1">This would result in <code class="code-inline tex2jax_ignore">{5, 10, 30}</code>.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>traversing-arrays-with-for-loops</id>
      <title>Traversing Arrays with For Loops</title>
      <question>
        <label>Exercise 4.4.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_arraytrace1">
                <div class="ac_question" id="csawesome2_2_arraytrace1_question">
                  <div class="para" id="arraytrace1-1-1">What do you think the following code will print out? First trace through it on paper keeping track of the array and the index variable. Then, run it to see if you were right. You can also follow it in the <a class="external" href="http://www.pythontutor.com/visualize.html#code=%20public%20class%20Test1%0A%20%20%20%7B%0A%20%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20String%5B%20%5D%20names%20%3D%20%7B%22Jamal%22,%20%22Emily%22,%20%22Destiny%22,%20%22Mateo%22,%20%22Sofia%22%7D%3B%20%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20int%20index%20%3D%201%3B%0A%20%20%20%20%20%20%20%20System.out.println%28names%5Bindex%20-%201%5D%29%3B%0A%20%20%20%20%20%20%20%20index%2B%2B%3B%0A%20%20%20%20%20%20%20%20System.out.println%28names%5Bindex%5D%29%3B%0A%20%20%20%20%20%20%20%20System.out.println%28names%5Bindex/2%5D%29%3B%0A%20%20%20%20%20%20%20%20names%5Bindex%5D%20%3D%20%22Rafi%22%3B%0A%20%20%20%20%20%20%20%20index--%3B%0A%20%20%20%20%20%20%20%20System.out.println%28names%5Bindex%2B1%5D%29%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%7D%0A%20%20%20&amp;cumulative=false&amp;curInstr=0&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" target="_blank">visualizer</a><details class="ptx-footnote" aria-live="polite" id="arraytrace1-1-1-2"><summary class="ptx-footnote__number" title="Footnote 4.4.2"><sup> 2 </sup></summary><div class="ptx-footnote__contents" id="arraytrace1-1-1-2"><code class="code-inline tex2jax_ignore">http://www.pythontutor.com/visualize.html#code=%20public%20class%20Test1%0A%20%20%20%7B%0A%20%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20String%5B%20%5D%20names%20%3D%20%7B%22Jamal%22,%20%22Emily%22,%20%22Destiny%22,%20%22Mateo%22,%20%22Sofia%22%7D%3B%20%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20int%20index%20%3D%201%3B%0A%20%20%20%20%20%20%20%20System.out.println%28names%5Bindex%20-%201%5D%29%3B%0A%20%20%20%20%20%20%20%20index%2B%2B%3B%0A%20%20%20%20%20%20%20%20System.out.println%28names%5Bindex%5D%29%3B%0A%20%20%20%20%20%20%20%20System.out.println%28names%5Bindex/2%5D%29%3B%0A%20%20%20%20%20%20%20%20names%5Bindex%5D%20%3D%20%22Rafi%22%3B%0A%20%20%20%20%20%20%20%20index--%3B%0A%20%20%20%20%20%20%20%20System.out.println%28names%5Bindex%2B1%5D%29%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%7D%0A%20%20%20&amp;cumulative=false&amp;curInstr=0&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false</code></div></details> by clicking on the Show Code Lens button.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_arraytrace1_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String[] names = {"Jamal", "Emily", "Destiny", "Mateo", "Sofia"};

        int index = 1;
        System.out.println(names[index - 1]);
        index++;
        System.out.println(names[index]);
        System.out.println(names[index / 2]);
        names[index] = "Rafi";
        index--;
        System.out.println(names[index + 1]);
    }
}
====
// Test for Lesson 6.2

import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Test1");
    }

    @Test
    public void test1() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Jamal\nDestiny\nEmily\nRafi";

        boolean passed = getResults(expect, output, "Did you run the code?", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.4.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_arraytrace2">
                <div class="ac_question" id="csawesome2_2_arraytrace2_question">
                  <div class="para" id="arraytrace2-1-1">What do you think the following code will print out? First trace through it on paper keeping track of the array and the index variable. Then, run it to see if you were right. Try the Code Lens button. Then, try adding your name and a friend’s name to the array names and run the code again. Did the code work without changing the loop?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_arraytrace2_editor" data-question_label="" data-codelens="true">public class Test2
{
    public static void main(String[] args)
    {
        String[] names = {"Jamal", "Emily", "Destiny", "Mateo", "Sofia"};

        for (int i = 0; i &lt; names.length; i++)
        {
            System.out.println(names[i]);
        }
    }
}
====
// Test for Lesson 6.2

import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Test2");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "Jamal\nEmily\nDestiny\nMateo\nSofia";

        boolean passed = output.contains(expect);
        passed = getResults(expect, output, "Did you run the code?", passed);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String output = getMethodOutput("main");
        String expect = "Jamal\nEmily\nDestiny\nMateo\nSofia\nYour name\nFriend's name";

        int len = output.split("\n").length;

        boolean passed = len &gt;= 6;

        passed = getResults(expect, output, "Did you add two more names?", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.4.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcal1">
                <div class="ac_question" id="csawesome2_2_lcal1_question">
                  <div class="para" id="lcal1-1-1">What does the following code print out? Trace through it keeping track of the array values and the output. Then run it to see if you’re right. Notice that in this code, the array is passed as an argument to the methods. You can also try the code in the <a class="external" href="http://www.pythontutor.com/visualize.html#code=public%20class%20ArrayLoop%0A%20%20%20%7B%0A%0A%20%20%20%20%20//%20What%20does%20this%20method%20do%3F%0A%20%20%20%20%20%20public%20static%20void%20multAll%28int%5B%5D%20values,%20int%20amt%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20for%20%28int%20i%20%3D%200%3B%20i%20%3C%20values.length%3B%20i%2B%2B%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20values%5Bi%5D%20%3D%20values%5Bi%5D%20*%20amt%3B%0A%20%20%20%20%20%20%20%20%7D%20%0A%20%20%20%20%20%20%7D%20%0A%20%20%20%20%20%20%0A%20%20%20%20%20%20//%20What%20does%20this%20method%20do%3F%0A%20%20%20%20%20%20public%20static%20void%20printValues%28int%5B%5D%20values%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20for%20%28int%20i%20%3D%200%3B%20i%20%3C%20values.length%3B%20i%2B%2B%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20System.out.println%28%20%20values%5Bi%5D%20%29%3B%0A%20%20%20%20%20%20%20%20%7D%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%0A%20%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20int%5B%5D%20numArray%20%3D%20%20%7B2,%206,%207,%2012,%205%7D%3B%0A%20%20%20%20%20%20%20%20multAll%28numArray,%202%29%3B%0A%20%20%20%20%20%20%20%20printValues%28numArray%29%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%7D%0A%20%20%20%20%20%20&amp;cumulative=false&amp;curInstr=0&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" target="_blank">Java visualizer</a><details class="ptx-footnote" aria-live="polite" id="lcal1-1-1-2"><summary class="ptx-footnote__number" title="Footnote 4.4.5"><sup> 5 </sup></summary><div class="ptx-footnote__contents" id="lcal1-1-1-2"><code class="code-inline tex2jax_ignore">http://www.pythontutor.com/visualize.html#code=public%20class%20ArrayLoop%0A%20%20%20%7B%0A%0A%20%20%20%20%20//%20What%20does%20this%20method%20do%3F%0A%20%20%20%20%20%20public%20static%20void%20multAll%28int%5B%5D%20values,%20int%20amt%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20for%20%28int%20i%20%3D%200%3B%20i%20%3C%20values.length%3B%20i%2B%2B%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20values%5Bi%5D%20%3D%20values%5Bi%5D%20*%20amt%3B%0A%20%20%20%20%20%20%20%20%7D%20%0A%20%20%20%20%20%20%7D%20%0A%20%20%20%20%20%20%0A%20%20%20%20%20%20//%20What%20does%20this%20method%20do%3F%0A%20%20%20%20%20%20public%20static%20void%20printValues%28int%5B%5D%20values%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20for%20%28int%20i%20%3D%200%3B%20i%20%3C%20values.length%3B%20i%2B%2B%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20System.out.println%28%20%20values%5Bi%5D%20%29%3B%0A%20%20%20%20%20%20%20%20%7D%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%0A%20%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20int%5B%5D%20numArray%20%3D%20%20%7B2,%206,%207,%2012,%205%7D%3B%0A%20%20%20%20%20%20%20%20multAll%28numArray,%202%29%3B%0A%20%20%20%20%20%20%20%20printValues%28numArray%29%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%7D%0A%20%20%20%20%20%20&amp;cumulative=false&amp;curInstr=0&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false</code></div></details> with the Code Lens button.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcal1_editor" data-question_label="" data-codelens="true">public class ArrayLoop
{

    // What does this method do?
    public static void multAll(int[] values, int amt)
    {
        for (int i = 0; i &lt; values.length; i++)
        {
            values[i] = values[i] * amt;
        }
    }

    // What does this method do?
    public static void printValues(int[] values)
    {
        for (int i = 0; i &lt; values.length; i++)
        {
            System.out.println(values[i]);
        }
    }

    public static void main(String[] args)
    {
        int[] numArray = {2, 6, 7, 12, 5};
        multAll(numArray, 2);
        printValues(numArray);
    }
}
====
// Test for Lesson 6.2

import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ArrayLoop");
    }

    @Test
    public void test1() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "4 12 14 24 10";

        boolean passed = getResults(expect, output, "Did you run the code?", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.4.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_pab_1r">
                <div class="parsons_question parsons-text">
                  <div class="para" id="pab_1r-1-1">The following method has the correct code to subtract amt from all the values in the array values, but the code is mixed up.  Drag the blocks from the left into the correct order on the right. You will be told if any of the blocks are in the wrong order.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public void subAll(int[] values, int amt)
{
---
     for (int i = 0;
---
        i &lt; values.length;
---
        i++)
---
     {
---
        values[i] = values[i] - amt;
---
     } // end for loop
---
} // end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.4.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcbf1">
                <div class="ac_question" id="csawesome2_2_lcbf1_question">
                  <div class="para" id="lcbf1-1-1">What does the following code print out? Notice that the array and the target are passed in as arguments to the getIndexOfLastElementSmallerThanTarget method. Trace through it keeping track of the array values and the output. Then run it to see if you’re right.  You can also try the code in the <a class="external" href="http://www.pythontutor.com/java.html#code=%20%20%20public%20class%20ArrayFindSmallest%0A%20%20%20%7B%0A%0A%20%20%20%20%20%20/**%20%40return%20index%20of%20the%20last%20number%20smaller%20than%20target%20*/%20%20%20%20%20%0A%20%20%20%20%20%20public%20static%20int%20getIndexOfLastElementSmallerThanTarget%28int%5B%20%5D%20values,%20int%20target%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20for%20%28int%20index%20%3D%20values.length%20-%201%3B%20index%20%3E%3D%200%3B%20index--%29%0A%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20%28values%5Bindex%5D%20%3C%20target%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20index%3B%0A%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20return%20-1%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%0A%20%20%20%20%20%20public%20static%20void%20main%20%28String%5B%5D%20args%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20int%5B%5D%20theArray%20%3D%20%7B-30,%20-5,%208,%2023,%2046%7D%3B%0A%20%20%20%20%20%20%20%20%20System.out.println%28%22Last%20index%20of%20element%20smaller%20than%2050%3A%20%22%20%2B%20getIndexOfLastElementSmallerThanTarget%28theArray,%2050%29%29%3B%0A%20%20%20%20%20%20%20%20%20System.out.println%28%22Last%20index%20of%20element%20smaller%20than%2030%3A%20%22%20%2B%20getIndexOfLastElementSmallerThanTarget%28theArray,%2030%29%29%3B%0A%20%20%20%20%20%20%20%20%20System.out.println%28%22Last%20index%20of%20element%20smaller%20than%2010%3A%20%22%20%2B%20getIndexOfLastElementSmallerThanTarget%28theArray,%2010%29%29%3B%0A%20%20%20%20%20%20%20%20%20System.out.println%28%22Last%20index%20of%20element%20smaller%20than%200%3A%20%22%20%2BgetIndexOfLastElementSmallerThanTarget%28theArray,0%29%29%3B%0A%20%20%20%20%20%20%20%20%20System.out.println%28%22Last%20index%20of%20element%20smaller%20than%20-20%3A%20%22%20%2BgetIndexOfLastElementSmallerThanTarget%28theArray,-20%29%29%3B%0A%20%20%20%20%20%20%20%20%20System.out.println%28%22Last%20index%20of%20element%20smaller%20than%20-30%3A%20%22%20%2BgetIndexOfLastElementSmallerThanTarget%28theArray,-30%29%29%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%7D%0A%20%20%20&amp;cumulative=false&amp;curInstr=0&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" target="_blank">Java visualizer</a><details class="ptx-footnote" aria-live="polite" id="lcbf1-1-1-2"><summary class="ptx-footnote__number" title="Footnote 4.4.6"><sup> 6 </sup></summary><div class="ptx-footnote__contents" id="lcbf1-1-1-2"><code class="code-inline tex2jax_ignore">http://www.pythontutor.com/java.html#code=%20%20%20public%20class%20ArrayFindSmallest%0A%20%20%20%7B%0A%0A%20%20%20%20%20%20/**%20%40return%20index%20of%20the%20last%20number%20smaller%20than%20target%20*/%20%20%20%20%20%0A%20%20%20%20%20%20public%20static%20int%20getIndexOfLastElementSmallerThanTarget%28int%5B%20%5D%20values,%20int%20target%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20for%20%28int%20index%20%3D%20values.length%20-%201%3B%20index%20%3E%3D%200%3B%20index--%29%0A%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20%28values%5Bindex%5D%20%3C%20target%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20index%3B%0A%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20return%20-1%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%0A%20%20%20%20%20%20public%20static%20void%20main%20%28String%5B%5D%20args%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20int%5B%5D%20theArray%20%3D%20%7B-30,%20-5,%208,%2023,%2046%7D%3B%0A%20%20%20%20%20%20%20%20%20System.out.println%28%22Last%20index%20of%20element%20smaller%20than%2050%3A%20%22%20%2B%20getIndexOfLastElementSmallerThanTarget%28theArray,%2050%29%29%3B%0A%20%20%20%20%20%20%20%20%20System.out.println%28%22Last%20index%20of%20element%20smaller%20than%2030%3A%20%22%20%2B%20getIndexOfLastElementSmallerThanTarget%28theArray,%2030%29%29%3B%0A%20%20%20%20%20%20%20%20%20System.out.println%28%22Last%20index%20of%20element%20smaller%20than%2010%3A%20%22%20%2B%20getIndexOfLastElementSmallerThanTarget%28theArray,%2010%29%29%3B%0A%20%20%20%20%20%20%20%20%20System.out.println%28%22Last%20index%20of%20element%20smaller%20than%200%3A%20%22%20%2BgetIndexOfLastElementSmallerThanTarget%28theArray,0%29%29%3B%0A%20%20%20%20%20%20%20%20%20System.out.println%28%22Last%20index%20of%20element%20smaller%20than%20-20%3A%20%22%20%2BgetIndexOfLastElementSmallerThanTarget%28theArray,-20%29%29%3B%0A%20%20%20%20%20%20%20%20%20System.out.println%28%22Last%20index%20of%20element%20smaller%20than%20-30%3A%20%22%20%2BgetIndexOfLastElementSmallerThanTarget%28theArray,-30%29%29%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%7D%0A%20%20%20&amp;cumulative=false&amp;curInstr=0&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false</code></div></details> with the Code Lens button. Can you add another method that finds the index of the last element greater than the target instead of smaller than the target and have main print out a test of it? Call this method getIndexOfLastElementGreaterThanTarget and give it 2 arguments and a return value like the method below.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcbf1_editor" data-question_label="" data-codelens="true">public class ArrayFindSmallest
{

    /**
     * @return index of the last number smaller than target
     */
    public static int getIndexOfLastElementSmallerThanTarget(int[] values, int target)
    {
        for (int index = values.length - 1; index &gt;= 0; index--)
        {
            if (values[index] &lt; target)
            {
               return index;
            }
        }
        return -1;
    }

    /**
     * Add a method called getIndexOfLastElementGreaterThanTarget
     *
     * @param int array
     * @param int target
     * @return index of the last number greater than target
     */
    public static void main(String[] args)
    {
        int[] theArray = {-30, -5, 8, 23, 46};
        System.out.println(
                "Last index of element smaller than 50: "
                        + getIndexOfLastElementSmallerThanTarget(theArray, 50));
        System.out.println(
                "Last index of element smaller than 30: "
                        + getIndexOfLastElementSmallerThanTarget(theArray, 30));
        System.out.println(
                "Last index of element smaller than 10: "
                        + getIndexOfLastElementSmallerThanTarget(theArray, 10));
        System.out.println(
                "Last index of element smaller than 0: "
                        + getIndexOfLastElementSmallerThanTarget(theArray, 0));
        System.out.println(
                "Last index of element smaller than -20: "
                        + getIndexOfLastElementSmallerThanTarget(theArray, -20));
        System.out.println(
                "Last index of element smaller than -30: "
                        + getIndexOfLastElementSmallerThanTarget(theArray, -30));
    }
}
====
// Test for Lesson 6.2.3 - ArrayFindSmallest

import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ArrayFindSmallest");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "Last index of element smaller than ";

        boolean passed = output.contains(expect);
        output = output.substring(0, output.indexOf("\n"));
        passed =
                getResults(
                        "Last index of element smaller than 50: 4",
                        output,
                        "Ran getIndexOfLastElementSmallerThanTarget",
                        passed);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        int[] nums = {10, 50, 20, 30, 40, 20};
        Object[] args = {nums, 30};

        String output = getMethodOutput("getIndexOfLastElementGreaterThanTarget", args);
        String expect = "4";

        boolean passed =
                getResults(
                        expect,
                        output,
                        "getIndexOfLastElementGreaterThanTarget({10, 50, 20, 30, 40, 20}, 30)");
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        int[] nums = {10, 50, 20, 30, 40, 20};
        Object[] args = {nums, 100};

        String output = getMethodOutput("getIndexOfLastElementGreaterThanTarget", args);
        String expect = "-1";

        boolean passed =
                getResults(
                        expect,
                        output,
                        "getIndexOfLastElementGreaterThanTarget({10, 50, 20, 30, 40, 20}, 100)");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.4.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qab_6" data-multipleanswers="false"><div class="para" id="qab_6-1-1">6-2-6: Given the following code segment (which is identical to the method above) what will be returned when you execute: <code class="code-inline tex2jax_ignore">getIndexOfLastElementSmallerThanTarget(values,-13)</code>;</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private int[ ] values = {-20, -15, 2, 8, 16, 33};

public static int getIndexOfLastElementSmallerThanTarget(int[ ] values, int compare)
{
   for (int i = values.length - 1; i &gt;=0; i--)
   {
      if (values[i] &lt; compare)
         return i;
   }
   return -1; // to show none found
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qab_6_opt_a"><div class="para" id="qab_6-2-1-1-1">-1</div></li><li data-component="feedback" id="csawesome2_2_qab_6_opt_a"><div class="para" id="qab_6-2-1-2-1">The method will only return -1 if no value in the array is less than the passed value.</div></li><li data-component="answer" id="csawesome2_2_qab_6_opt_b"><div class="para" id="qab_6-2-2-1-1">-15</div></li><li data-component="feedback" id="csawesome2_2_qab_6_opt_b"><div class="para" id="qab_6-2-2-2-1">The method returns the index of the first item in the array that is less than the value, not the value.</div></li><li data-component="answer" id="csawesome2_2_qab_6_opt_c" data-correct=""><div class="para" id="qab_6-2-3-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qab_6_opt_c"><div class="para" id="qab_6-2-3-2-1">Since the method loops from the back towards the front -15 is the last value in the array that is less than -13 and it is at index 1.</div></li><li data-component="answer" id="csawesome2_2_qab_6_opt_d"><div class="para" id="qab_6-2-4-1-1">You will get an out of bounds error.</div></li><li data-component="feedback" id="csawesome2_2_qab_6_opt_d"><div class="para" id="qab_6-2-4-2-1">No, the method correctly starts the index at values.length - 1 and continues as long as i is greater than or equal to 0.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.4.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qab_7" data-multipleanswers="false"><div class="para" id="qab_7-1-1">6-2-7: Given the following code segment (which is not quite identical to the method above) what will be returned when you execute: <code class="code-inline tex2jax_ignore">getIndexOfLastElementSmallerThanTarget(values, 7)</code>;</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int[ ] values = {-20, -15, 2, 8, 16, 33};

public static int getIndexOfLastElementSmallerThanTarget(int[] values, int compare)
{
   for (int i = values.length; i &gt;=0; i--)
   {
      if (values[i] &lt; compare)
         return i;
   }
   return -1; // to show none found
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qab_7_opt_a"><div class="para" id="qab_7-2-1-1-1">-1</div></li><li data-component="feedback" id="csawesome2_2_qab_7_opt_a"><div class="para" id="qab_7-2-1-2-1">The method will only return -1 if no value in the array is less than the passed value.</div></li><li data-component="answer" id="csawesome2_2_qab_7_opt_b"><div class="para" id="qab_7-2-2-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qab_7_opt_b"><div class="para" id="qab_7-2-2-2-1">Check the starting index.   Is it correct?</div></li><li data-component="answer" id="csawesome2_2_qab_7_opt_c"><div class="para" id="qab_7-2-3-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_qab_7_opt_c"><div class="para" id="qab_7-2-3-2-1">Check the starting index.   Is it correct?</div></li><li data-component="answer" id="csawesome2_2_qab_7_opt_d" data-correct=""><div class="para" id="qab_7-2-4-1-1">You will get an out of bounds error.</div></li><li data-component="feedback" id="csawesome2_2_qab_7_opt_d"><div class="para" id="qab_7-2-4-2-1">You can not start the index at the length of the array.  You must start at the length of the array minus one.  This is a common mistake.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.4.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lclp1">
                <div class="ac_question" id="csawesome2_2_lclp1_question">
                  <div class="para" id="lclp1-1-1">What will the following code print out? Can you write a similar method called tripleFirstFour() that triples the first 4 elements of the array? Make sure you test it in main.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lclp1_editor" data-question_label="" data-codelens="true">public class ArrayWorker
{
    private int[] values;

    public ArrayWorker(int[] theValues)
    {
        values = theValues;
    }

    /** Doubles the first 5 elements of the array */
    public void doubleFirstFive()
    {
        // Notice: &amp;&amp; i &lt; 5
        for (int i = 0; i &lt; values.length &amp;&amp; i &lt; 5; i++)
        {
            values[i] = values[i] * 2;
        }
    }

    /**
     * Write a method called tripleFirstFour() that triples the first 4 elements of
     * the array *
     */
    public void printArray()
    {
        for (int i = 0; i &lt; values.length; i++)
        {
            System.out.println(values[i]);
        }
    }

    public static void main(String[] args)
    {
        int[] numArray = {3, 8, -3, 2, 20, 5, 33, 1};
        ArrayWorker worker = new ArrayWorker(numArray);
        worker.doubleFirstFive();
        worker.printArray();
    }
}
====
// Test for Lesson 6.2.4 - ArrayWorker

import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ArrayWorker");

        int[] numArray = {0, 1, 2, 3, 4, 5};
        setDefaultValues(new Object[] {numArray});
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "6 16 -6 4 40 5 33 1".replaceAll(" ", "\n");

        boolean passed = output.contains(expect);

        passed = getResults(expect, output, "Did you run the doubleFirstFiveMethod?", passed);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String output = getMethodOutput("tripleFirstFour");
        output = getMethodOutput("printArray");
        String expect = "0 3 6 9 4 5".replaceAll(" ", "\n");

        boolean passed = output.contains(expect);

        passed =
                getResults(
                        expect,
                        output,
                        "Testing tripleFirstFour() method on array [0, 1, 2, 3, 4, 5]",
                        passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.4.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lclp2">
                <div class="ac_question" id="csawesome2_2_lclp2_question">
                  <div class="para" id="lclp2-1-1">Does this work for arrays that have an even number of elements?  Does it work for arrays that have an odd number of elements?  Modify the main code below to test with both arrays with an even number of items and an odd number.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lclp2_editor" data-question_label="" data-codelens="true">public class ArrayWorker
{
    private int[] values;

    public ArrayWorker(int[] theValues)
    {
        values = theValues;
    }

    public void doubleLastHalf()
    {
        for (int i = values.length / 2; i &lt; values.length; i++)
        {
            values[i] = values[i] * 2;
        }
    }

    public void printArray()
    {
        for (int i = 0; i &lt; values.length; i++)
        {
            System.out.println(values[i]);
        }
    }

    public static void main(String[] args)
    {
        int[] numArray = {3, 8, -3, 2};
        ArrayWorker worker = new ArrayWorker(numArray);
        worker.doubleLastHalf();
        worker.printArray();
    }
}
====
// Test for Lesson 6.2.4 - ArrayWorker
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ArrayWorker");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "3\n8\n-6\n4".replaceAll(" ", "\n");

        boolean passed = getResults(expect, output, "Testing main()", true);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String orig =
                "public class ArrayWorker\n"
                    + "{\n"
                    + "   private int[ ] values;\n\n"
                    + "   public ArrayWorker(int[] theValues)\n"
                    + "   {\n"
                    + "      values = theValues;\n"
                    + "   }\n\n"
                    + "   public void doubleLastHalf()\n"
                    + "   {\n"
                    + "     for (int i = values.length / 2; i &lt; values.length; i++)\n"
                    + "     {\n"
                    + "       values[i] = values[i] * 2;\n"
                    + "     }\n"
                    + "   }\n\n"
                    + "   public void printArray()\n"
                    + "   {\n"
                    + "      for (int i = 0; i &lt; values.length; i++)\n"
                    + "      {\n"
                    + "        System.out.println(  values[i] );\n"
                    + "      }\n"
                    + "   }\n\n"
                    + "   public static void main(String[] args)\n"
                    + "   {\n"
                    + "     int[] numArray = {3,8,-3, 2};\n"
                    + "     ArrayWorker worker = new ArrayWorker(numArray);\n"
                    + "     worker.doubleLastHalf();\n"
                    + "     worker.printArray();\n"
                    + "   }\n"
                    + "}\n";

        boolean passed = codeChanged(orig);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.4.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qab_8" data-multipleanswers="false"><div class="para" id="qab_8-1-1">6-2-10: Given the following values of a and the method doubleLast what will the values of a be after you execute: doubleLast()?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private int[ ] a = {-20, -15, 2, 8, 16, 33};

public void doubleLast()
{

   for (int i = a.length / 2; i &lt; a.length; i++)
   {
      a[i] = a[i] * 2;
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qab_8_opt_a"><div class="para" id="qab_8-2-1-1-1">{-40, -30, 4, 16, 32, 66}</div></li><li data-component="feedback" id="csawesome2_2_qab_8_opt_a"><div class="para" id="qab_8-2-1-2-1">This would true if it looped through the whole array.  Does it?</div></li><li data-component="answer" id="csawesome2_2_qab_8_opt_b"><div class="para" id="qab_8-2-2-1-1">{-40, -30, 4, 8, 16, 32}</div></li><li data-component="feedback" id="csawesome2_2_qab_8_opt_b"><div class="para" id="qab_8-2-2-2-1">This would be true if it looped from the beginning to the middle.  Does it?</div></li><li data-component="answer" id="csawesome2_2_qab_8_opt_c" data-correct=""><div class="para" id="qab_8-2-3-1-1">{-20, -15, 2, 16, 32, 66}</div></li><li data-component="feedback" id="csawesome2_2_qab_8_opt_c"><div class="para" id="qab_8-2-3-2-1">It loops from the middle to the end doubling each value. Since there are 6 elements it will start at index 3.</div></li><li data-component="answer" id="csawesome2_2_qab_8_opt_d"><div class="para" id="qab_8-2-4-1-1">{-20, -15, 2, 8, 16, 33}</div></li><li data-component="feedback" id="csawesome2_2_qab_8_opt_d"><div class="para" id="qab_8-2-4-2-1">This would be true if array elements didn’t change, but they do.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.4.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qab_9" data-multipleanswers="false"><div class="para" id="qab_9-1-1">6-2-11: Given the following values of a and the method mystery what will the values of a be after you execute: mystery()?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private int[ ] a = {-20, -15, 2, 8, 16, 33};

public void mystery()
{

   for (int i = 0; i &lt; a.length/2; i+=2)
   {
      a[i] = a[i] * 2;
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qab_9_opt_a"><div class="para" id="qab_9-2-1-1-1">{-40, -30, 4, 16, 32, 66}</div></li><li data-component="feedback" id="csawesome2_2_qab_9_opt_a"><div class="para" id="qab_9-2-1-2-1">This would true if it looped through the whole array and doubled each.  Does it?</div></li><li data-component="answer" id="csawesome2_2_qab_9_opt_b"><div class="para" id="qab_9-2-2-1-1">{-40, -30, 4, 8, 16, 33}</div></li><li data-component="feedback" id="csawesome2_2_qab_9_opt_b"><div class="para" id="qab_9-2-2-2-1">This would be true if it looped from the beginning to the middle and doubled each.  Does it?</div></li><li data-component="answer" id="csawesome2_2_qab_9_opt_c"><div class="para" id="qab_9-2-3-1-1">{-20, -15, 2, 16, 32, 66}</div></li><li data-component="feedback" id="csawesome2_2_qab_9_opt_c"><div class="para" id="qab_9-2-3-2-1">This would be true if it looped from the middle to the end and doubled each.  Does it?</div></li><li data-component="answer" id="csawesome2_2_qab_9_opt_d" data-correct=""><div class="para" id="qab_9-2-4-1-1">{-40, -15, 4, 8, 16, 33}</div></li><li data-component="feedback" id="csawesome2_2_qab_9_opt_d"><div class="para" id="qab_9-2-4-2-1">This loops from the beginning to the middle and doubles every other element (i+=2 is the same as i = i + 2).</div></li><li data-component="answer" id="csawesome2_2_qab_9_opt_e"><div class="para" id="qab_9-2-5-1-1">{-40, -15, 4, 8, 32, 33}</div></li><li data-component="feedback" id="csawesome2_2_qab_9_opt_e"><div class="para" id="qab_9-2-5-2-1">This would be true if it looped through the whole array and doubled every other element.  Does it?</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.4.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_pab_3">
                <div class="parsons_question parsons-text">
                  <div class="para" id="pab_3-1-1">The following program has the correct code to reverse the elements in an array, a,  but the code is mixed up.  Drag the blocks from the left into the correct order on the right. You will be told if any of the blocks are in the wrong order.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static void reverse(int[] a)
{
---
  int temp = 0;
  int half = a.length / 2;
  int max = a.length - 1;
---
  for (int i = 0; i &lt; half; i++)
  {
---
     temp = a[i];
---
     a[i] = a[max - i];
---
     a[max - i] = temp;
---
  } // end for
---
} // end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.4.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_pab_4">
                <div class="parsons_question parsons-text">
                  <div class="para" id="pab_4-1-1">The following program has the correct code to return the average of the first 3 items in the array a, but the code is mixed up.  Drag the blocks from the left into the correct order on the right. You will be told if any of the blocks are in the wrong order or are indented incorrectly.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public static double avg3(int[] a)
{
---
  double total = 0;
---
  for (int i = 0; i &lt; a.length &amp;&amp; i &lt; 3; i++)
  {
---
    total = total + a[i];
---
  } // end for
  return total / 3;
---
} // end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.4.18 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qIndexOutOfBounds" data-multipleanswers="true">
                <div class="para" id="qIndexOutOfBounds-1-1">6-2-14: Which of the following loop headers will cause an ArrayIndexOutOfBounds error while traversing the array scores?</div>
                <li data-component="answer" id="csawesome2_2_qIndexOutOfBounds_opt_a">
                  <div class="para" id="qIndexOutOfBounds-2-1-1-1">for (int i = 0; i &lt; scores.length; i++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qIndexOutOfBounds_opt_a">
                  <div class="para" id="qIndexOutOfBounds-2-1-2-1">This loop will traverse the complete array.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qIndexOutOfBounds_opt_b">
                  <div class="para" id="qIndexOutOfBounds-2-2-1-1">for (int i = 1; i &lt; scores.length; i++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qIndexOutOfBounds_opt_b">
                  <div class="para" id="qIndexOutOfBounds-2-2-2-1">This loop will not cause an error even though it will not visit the element at index 0.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qIndexOutOfBounds_opt_c" data-correct="">
                  <div class="para" id="qIndexOutOfBounds-2-3-1-1">for (int i = 0; i &lt;= scores.length; i++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qIndexOutOfBounds_opt_c">
                  <div class="para" id="qIndexOutOfBounds-2-3-2-1">The index cannot be equal to scores.length, since (scores.length - 1) is the index of the last element.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qIndexOutOfBounds_opt_d">
                  <div class="para" id="qIndexOutOfBounds-2-4-1-1">for (int i = 0; scores.length &gt; i; i++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qIndexOutOfBounds_opt_d">
                  <div class="para" id="qIndexOutOfBounds-2-4-2-1">Although the ending condition looks strange, (scores.length &gt; i) is equivalent to (i &lt; scores.length).</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qIndexOutOfBounds_opt_e" data-correct="">
                  <div class="para" id="qIndexOutOfBounds-2-5-1-1">for (int i = scores.length - 1; i &gt;= 0; i++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qIndexOutOfBounds_opt_e">
                  <div class="para" id="qIndexOutOfBounds-2-5-2-1">This will cause an error because i++ will continue to increment the index past the end of the array. It should be replaced with i– to avoid this error.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.4.19 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_offbyone">
                <div class="ac_question" id="csawesome2_2_offbyone_question">
                  <div class="para" id="offbyone-1-1">The following code has an ArrayIndexOutOfBoundsException. It has 2 common off-by-one errors in the loop. Can you fix it and make the loop print out all the scores?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_offbyone_editor" data-question_label="" data-codelens="true">public class OffByone
{
    public static void main(String[] args)
    {
        int[] scores = {10, 9, 8, 7};
        // Make this loop print out all the scores!
        for (int i = 1; i &lt;= scores.length; i++)
        {
            System.out.println(scores[i]);
        }
    }
}
====
// Test for Lesson 6.2 OffByOne
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("OffByone");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "9\n8\n7".replaceAll(" ", "\n");

        boolean passed = output.contains(expect);
        getResults(expect, output, "Testing right off-by-one error", passed);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String output = getMethodOutput("main");
        String expect = "10\n9\n8".replaceAll(" ", "\n");

        boolean passed = output.contains(expect);
        getResults(expect, output, "Testing left off-by-one error", passed);
        assertTrue(passed);
    }

    @Test
    public void checkCodeContains1()
    {
        boolean passed = checkCodeContains("fixes to for loop", "for (int i = 0; i &lt;");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.4.20 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcap1">
                <div class="ac_question" id="csawesome2_2_lcap1_question">
                  <div class="para" id="lcap1-1-1">What is wrong with the code below?  The first time through the loop it will start with the element at index 0 and check if the item at the array index equals the passed target string.  If they have the same characters in the same order it will return 0, otherwise it will return -1.  But, it has only processed one element of the array.  How would you fix the code to work correctly (process all array elements before returning)?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcap1_editor" data-question_label="" data-codelens="true">public class StringWorker
{
    private String[] arr = {"Hello", "Hey", "Good morning!"};

    public int findString(String target)
    {
        String word = null;
        for (int index = 0; index &lt; arr.length; index++)
        {
            word = arr[index];

            if (word.equals(target))
            {
                return index;
            }
            else
            {
                return -1;
            }
        }
        return -1;
    }

    public static void main(String[] args)
    {
        StringWorker sWorker = new StringWorker();
        System.out.println(sWorker.findString("Hey"));
    }
}
====
// Test for Lesson 6.2.4 - ArrayWorker

import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("StringWorker");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "1".replaceAll(" ", "\n");

        boolean passed = (output.equals(expect));
        getResults(expect, output, "Testing main() output", passed);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        StringWorker sWorker = new StringWorker();
        String output = "" + sWorker.findString("Good morning!");
        String expect = "2";

        boolean passed = getResults(expect, output, "Testing findString(\"Good morning!\")");
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        StringWorker sWorker = new StringWorker();
        String output = "" + sWorker.findString("Hello!");
        String expect = "-1";

        boolean passed = getResults(expect, output, "Testing findString(\"Hello!\")");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.4.21 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qab_5" data-multipleanswers="false"><div class="para" id="qab_5-1-1">6-2-17: Given the following code segment, which of the following will cause an infinite loop?  Assume that <code class="code-inline tex2jax_ignore">temp</code> is an int variable initialized to be greater than zero and that <code class="code-inline tex2jax_ignore">a</code> is an array of integers.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for ( int k = 0; k &lt; a.length; k++ )
{
   while ( a[ k ] &lt; temp )
   {
      a[ k ] *= 2;
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qab_5_opt_a"><div class="para" id="qab_5-2-1-1-1">The values don’t matter this will always cause an infinite loop.</div></li><li data-component="feedback" id="csawesome2_2_qab_5_opt_a"><div class="para" id="qab_5-2-1-2-1">An infinite loop will not always occur in this code segment.</div></li><li data-component="answer" id="csawesome2_2_qab_5_opt_b" data-correct=""><div class="para" id="qab_5-2-2-1-1">Whenever a includes a value that is less than or equal to zero.</div></li><li data-component="feedback" id="csawesome2_2_qab_5_opt_b"><div class="para" id="qab_5-2-2-2-1">When a contains a value that is less than or equal to zero then multiplying that value by 2 will never make the result larger than the temp value (which was set to some value &gt; 0), so an infinite loop will occur.</div></li><li data-component="answer" id="csawesome2_2_qab_5_opt_c"><div class="para" id="qab_5-2-3-1-1">Whenever a has values larger then temp.</div></li><li data-component="feedback" id="csawesome2_2_qab_5_opt_c"><div class="para" id="qab_5-2-3-2-1">Values larger then temp will not cause an infinite loop.</div></li><li data-component="answer" id="csawesome2_2_qab_5_opt_d"><div class="para" id="qab_5-2-4-1-1">When all values in a are larger than temp.</div></li><li data-component="feedback" id="csawesome2_2_qab_5_opt_d"><div class="para" id="qab_5-2-4-2-1">Values larger then temp will not cause an infinite loop.</div></li><li data-component="answer" id="csawesome2_2_qab_5_opt_e"><div class="para" id="qab_5-2-5-1-1">Whenever a includes a value equal to temp.</div></li><li data-component="feedback" id="csawesome2_2_qab_5_opt_e"><div class="para" id="qab_5-2-5-2-1">Values equal to temp will not cause the infinite loop.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.4.22 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-6-2-spellchecker">
                <div class="ac_question" id="csawesome2_2_challenge-6-2-spellchecker_question">
                  <div class="para" id="challenge-6-2-spellchecker-1-1">Write print10 and spellcheck methods using for loops. Spellchek should take a word as a parameter and return true if it is in the dictionary array. Return false if it is not found.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-6-2-spellchecker_editor" data-question_label="" data-codelens="true">import java.io.*;
import java.nio.file.*;
import java.util.*;

public class SpellChecker
{
    // This dictionary has 10,000 English words read in from a dictionary file in
    // the constructor
    private String[] dictionary = new String[10000];

    /* 1. Write a print10() method that prints out the first
     * 10 words of the dictionary array. Do not print out the whole array!
     */

    /* 2. Write a spellcheck() method that takes a word as a
     * parameter and returns true if it is in the dictionary array.
     * Return false if it is not found.
     */

    // Do not change "throws IOException" which is needed for reading in the input
    // file
    public static void main(String[] args) throws IOException
    {
        SpellChecker checker = new SpellChecker();
        // Uncomment to test Part 1
        // checker.print10();

        /* // Uncomment to test Part 2
        String word = "catz";


        if (checker.spellcheck(word) == true)
        {
            System.out.println(word + " is spelled correctly!");
        }
        else
        {
            System.out.println(word + " is misspelled!");
        }

        word = "cat";
        System.out.println(word + " is spelled correctly? " + checker.spellcheck(word));
        */

        // 3. optional and not autograded
        // checker.printStartsWith("b");
    }

    // The constructor reads in the dictionary from a file
    public SpellChecker() throws IOException
    {
        // Let's use java.nio method readAllLines and convert to an array!
        List&lt;String&gt; lines = Files.readAllLines(Paths.get("dictionary.txt"));
        dictionary = lines.toArray(dictionary);

        /* The old java.io.* Scan/File method of reading in files, replaced by java.nio above
        // create File object
        File dictionaryFile = new File("dictionary.txt");

        //Create Scanner object to read File
        Scanner scan = new Scanner(dictionaryFile);

        // Reading each line of the file
        // and saving it in the array
        int i = 0;
        while(scan.hasNextLine())
        {
            String line = scan.nextLine();
            dictionary[i] = line;
            i++;
        }
        scan.close();
        */
    }
}
====
// Test for Lesson 6.2.5 - challenge-6-2-spell-checker
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("SpellChecker");
    }

    @Test
    public void testMain()
    {
        boolean passed =
                checkCodeContains(
                        "checker.print10() - Did you uncomment the main method?",
                        "checker.print10();");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String output = getMethodOutput("print10");
        String expect =
                "a aa aaa aaron ab abandoned abc aberdeen abilities ability".replaceAll(" ", "\n");
        boolean passed = getResults(expect, output, "print10()");
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        Object[] args = {"dogz"};
        String output = getMethodOutput("spellcheck", args);
        String expect = "false";

        boolean passed = getResults(expect, output, "spellcheck(\"dogz\")");
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        Object[] args = {"dog"};
        String output = getMethodOutput("spellcheck", args);
        String expect = "true";

        boolean passed =
                getResults(
                        expect,
                        output,
                        "spellcheck(\"dog\") (If false, spellcheck may be returning false too"
                            + " soon!)");
        assertTrue(passed);
    }

    @Test
    public void testEquals()
    {
        boolean passed = checkCodeContains("use of equals method", ".equals(");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.4.23 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_community-challenge-6-2">
                <div class="ac_question" id="csawesome2_2_community-challenge-6-2_question">
                  <div class="para" id="community-challenge-6-2-1-1">Copy your class from the <a class="external" href="https://runestone.academy/ns/books/published/csawesome/Unit6-Arrays/topic-6-1-array-basics.html#groupwork-design-an-array-of-objects-for-your-community" target="_blank">last lesson 6.1</a><details class="ptx-footnote" aria-live="polite" id="community-challenge-6-2-1-1-2"><summary class="ptx-footnote__number" title="Footnote 4.4.11"><sup> 11 </sup></summary><div class="ptx-footnote__contents" id="community-challenge-6-2-1-1-2"><code class="code-inline tex2jax_ignore">https://runestone.academy/ns/books/published/csawesome/Unit6-Arrays/topic-6-1-array-basics.html#groupwork-design-an-array-of-objects-for-your-community</code></div></details> below. It should create an array of 3 objects of your class and initialize them to new objects. Instead of calling their print() methods individually, write a loop that traverses your array to print out each object using the index i.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_community-challenge-6-2_editor" data-question_label="" data-codelens="true">public class          // Add your class name here!
{
    // Copy your class from lesson 6.1 below.



    public static void main(String[] args)
    {
       // Create an array of 3 objects of your class.

       // Initialize array elements 0-2 to new objects of your class.


       // Write a for loop that traverses the array and calls
       // the print method of each object in the array using the array index i.


    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testArrayDeclaration() throws IOException
    {
        boolean passed = checkCodeContains("an array declaration of size 3", "[3]");
        assertTrue(passed);
    }

    @Test
    public void testLoop()
    {
        // String target = "for(int * = *; * ? *; *~)";
        // boolean passed = checkCodeContainsRegex("for loop", target);
        String target = "for";
        boolean passed = checkCodeContains("for loop", target);
        assertTrue(passed);
    }

    @Test
    public void testprint()
    {
        boolean passed =
                checkCodeContains("call to print() using index [i] in the loop", "[i].print();");
        assertTrue(passed);
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main"); // .split("\n");
        String expect = "3+ line(s) of text";
        String actual = " line(s) of text";
        int len = output.split("\n").length;

        if (output.length() &gt; 0)
        {
            actual = len + actual;
        }
        else
        {
            actual = output.length() + actual;
        }
        boolean passed = len &gt;= 3;

        getResults(expect, actual, "Checking output", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-8-6</id>
      <title>Array Algorithms (FRQs)</title>
      <question optional="yes">
        <label>Exercise 4.5.1.1.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_frhba_1" data-multipleanswers="false">
                <div class="para" id="frhba_1-1-1">6-4-1-1: Which of the following correctly retrieves the name of a “Horse” object from the “spaces” array?</div>
                <li data-component="answer" id="csawesome2_2_frhba_1_opt_a">
                  <div class="para" id="frhba_1-2-1-1-1">spaces[index].name;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frhba_1_opt_a">
                  <div class="para" id="frhba_1-2-1-2-1">Getter methods are needed to access private class variables.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frhba_1_opt_b" data-correct="">
                  <div class="para" id="frhba_1-2-2-1-1">spaces[index].getName();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frhba_1_opt_b">
                  <div class="para" id="frhba_1-2-2-2-1">This is the syntax for getting the value of an element in an array.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frhba_1_opt_c">
                  <div class="para" id="frhba_1-2-3-1-1">spaces.get(index).getName();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frhba_1_opt_c">
                  <div class="para" id="frhba_1-2-3-2-1">This is the syntax for getting the value of an element in an arrayList.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.5.1.1.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_frhba_2" data-multipleanswers="false">
                <div class="para" id="frhba_2-1-1">6-4-1-2: What is the best way to compare two strings for equality?</div>
                <li data-component="answer" id="csawesome2_2_frhba_2_opt_a">
                  <div class="para" id="frhba_2-2-1-1-1">str.compareTo(anotherString);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frhba_2_opt_a">
                  <div class="para" id="frhba_2-2-1-2-1">This String method is used for comparing two strings alphabetically. It returns 0 if they are equal so you would need to check the return value.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frhba_2_opt_b">
                  <div class="para" id="frhba_2-2-2-1-1">str == anotherString;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frhba_2_opt_b">
                  <div class="para" id="frhba_2-2-2-2-1">This would only return true if the two variables refer to the same object.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frhba_2_opt_c" data-correct="">
                  <div class="para" id="frhba_2-2-3-1-1">str.equals(anotherString);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frhba_2_opt_c">
                  <div class="para" id="frhba_2-2-3-2-1">This String method will compare the characters in both strings and return true if they are the same.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.5.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcfrhba1">
                <div class="ac_question" id="csawesome2_2_lcfrhba1_question">
                  <div class="para" id="lcfrhba1-1-1">FRQ HorseBarn A: Write the method findHorseSpace.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcfrhba1_editor" data-question_label="" data-codelens="true">class Horse
{
    private String name;
    private int weight;

    public Horse(String theName, int theWeight)
    {
        this.name = theName;
        this.weight = theWeight;
    }

    public String getName()
    {
        return this.name;
    }

    public int getWeight()
    {
        return this.weight;
    }

    public String toString()
    {
        return "name: " + this.name + " weight: " + this.weight;
    }
}

public class HorseBarn
{
    private Horse[] spaces;

    /**
     * Constructor that takes the number of stalls
     *
     * @param numStalls - the number of stalls in the barn
     */
    public HorseBarn(int numStalls)
    {
        spaces = new Horse[numStalls];
    }

    /**
     * Returns the index of the space that contains the horse with the specified
     * name. * Precondition: No two horses in the barn have the same name.
     *
     * @param name the name of the horse to find
     * @return the index of the space containing the horse with the specified name;
     *     -1 if no horse with the specified name is in the barn.
     */
    public int findHorseSpace(String name) {}

    public String toString()
    {
        String result = "";
        Horse h = null;
        for (int i = 0; i &lt; spaces.length; i++)
        {
            h = spaces[i];
            result = result + "space " + i + " has ";
            if (h == null)
            {
                 result = result + " null \n";
            }
            else
            {
                result = result + h.toString() + "\n";
            }
        }
        return result;
    }

    public static void main(String[] args)
    {
        HorseBarn barn = new HorseBarn(7);
        barn.spaces[0] = new Horse("Trigger", 1340);
        barn.spaces[2] = new Horse("Silver", 1210);
        barn.spaces[3] = new Horse("Lady", 1575);
        barn.spaces[5] = new Horse("Patches", 1350);
        barn.spaces[6] = new Horse("Duke", 1410);

        // print out what is in the barn
        System.out.println(barn);

        // test
        System.out.println(
                "Index of Trigger should be 0 and is "
                        + barn.findHorseSpace("Trigger"));
        System.out.println(
                "Index of Silver should be 2 and is "
                        + barn.findHorseSpace("Silver"));
        System.out.println(
                "Index of Coco should be -1 and is "
                        + barn.findHorseSpace("Coco"));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.lang.reflect.Field;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "Index of Trigger should be 0 and is 0\n"
                    + "Index of Silver should be 2 and is 2\n"
                    + "Index of Coco should be -1 and is -1";

        boolean passed = removeSpaces(output).contains(removeSpaces(expect));

        getResults(expect, output, "Expected output from main", passed);
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        HorseBarn barn = new HorseBarn(7);

        try
        {
            Field barnField = HorseBarn.class.getDeclaredField("spaces");
            barnField.setAccessible(true);

            Horse[] spaces = (Horse[]) barnField.get(barn);

            spaces[1] = new Horse("Trigger", 1340);
            spaces[3] = new Horse("Silver", 1210);
            spaces[4] = new Horse("Lady", 1575);
            spaces[6] = new Horse("Patches", 1350);
            spaces[0] = new Horse("Duke", 1410);

            String expected = "3";
            String actual = "" + barn.findHorseSpace("Silver");

            String msg =
                    "Checking findHorseSpace(\"Silver\") with [\"Duke\", \"Trigger\", null,"
                        + " \"Silver\", \"Lady\", null, \"Patches\"]";
            boolean passed = getResults(expected, actual, msg);
            assertTrue(passed);

        }
        catch (Exception e)
        {
            getResults("", "", "There was a error with the testing code.", false);
            fail();
        }
    }

    @Test
    public void test2()
    {
        HorseBarn barn = new HorseBarn(7);

        try
        {
            Field barnField = HorseBarn.class.getDeclaredField("spaces");
            barnField.setAccessible(true);

            Horse[] spaces = (Horse[]) barnField.get(barn);

            spaces[1] = new Horse("Trigger", 1340);
            spaces[3] = new Horse("Silver", 1210);
            // spaces[4] = new Horse("Lady", 1575);
            spaces[6] = new Horse("Patches", 1350);
            spaces[0] = new Horse("Duke", 1410);

            String expected = "-1";
            String actual = "" + barn.findHorseSpace("Lady");

            String msg =
                    "Checking findHorseSpace(\"Lady\") with [\"Duke\", \"Trigger\", null,"
                        + " \"Silver\", null, null, \"Patches\"]";
            boolean passed = getResults(expected, actual, msg);
            assertTrue(passed);

        }
        catch (Exception e)
        {
            getResults("", "", "There was a error with the testing code.", false);
            fail();
        }
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: sk9i_mhrc5M</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="sk9i_mhrc5M" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.5.2.1.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_frhbb_2" data-multipleanswers="false">
                <div class="para" id="frhbb_2-1-1">6-4-2-1: How do we check if the space at the current index isn’t null?</div>
                <li data-component="answer" id="csawesome2_2_frhbb_2_opt_a">
                  <div class="para" id="frhbb_2-2-1-1-1">if (spaces.get(index) != null)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frhbb_2_opt_a">
                  <div class="para" id="frhbb_2-2-1-2-1">This is the syntax for checking an element within an ArrayList.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frhbb_2_opt_b">
                  <div class="para" id="frhbb_2-2-2-1-1">if (!spaces[index].null())</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frhbb_2_opt_b">
                  <div class="para" id="frhbb_2-2-2-2-1">Is null() a standard Java method? Comparing an object with a null value is simpler.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frhbb_2_opt_c" data-correct="">
                  <div class="para" id="frhbb_2-2-3-1-1">if (spaces[index] != null)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frhbb_2_opt_c">
                  <div class="para" id="frhbb_2-2-3-2-1">"!=" is the best way to compare an element with a null value.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.5.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcfrhbb1">
                <div class="ac_question" id="csawesome2_2_lcfrhbb1_question">
                  <div class="para" id="lcfrhbb1-1-1">Try to write the code for the method <code class="code-inline tex2jax_ignore">consolidate</code> in the <code class="code-inline tex2jax_ignore">HorseBarn</code> class. When you are ready click “Run” to test your solution.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcfrhbb1_editor" data-question_label="" data-codelens="true">class Horse
{
    private String name;
    private int weight;

    public Horse(String theName, int theWeight)
    {
        this.name = theName;
        this.weight = theWeight;
    }

    public String getName()
    {
        return this.name;
    }

    public int getWeight()
    {
        return this.weight;
    }

    public String toString()
    {
        return "name: " + this.name + " weight: " + this.weight;
    }
}

public class HorseBarn
{
    private Horse[] spaces;

    /**
     * Constructor that takes the number of stalls
     *
     * @param numStalls - the number of stalls in the barn
     */
    public HorseBarn(int numStalls)
    {
        spaces = new Horse[numStalls];
    }

    /**
     * Consolidates the barn by moving horses so that the horses are in adjacent
     * spaces, starting at index 0, with no empty space between any two horses.
     * Postcondition: The order of the horses is the same as before the
     * consolidation.
     */
    public void consolidate() {}

    public String toString()
    {
        String result = "";
        Horse h = null;
        for (int i = 0; i &lt; spaces.length; i++)
        {
            h = spaces[i];
            result = result + "space " + i + " has ";
            if (h == null)
            {
                result = result + " null \n";
            }
            else
            {
                result = result + h.toString() + "\n";
            }
        }
        return result;
    }

    public static void main(String[] args)
    {
        HorseBarn barn = new HorseBarn(7);
        barn.spaces[0] = new Horse("Trigger", 1340);
        barn.spaces[2] = new Horse("Silver", 1210);
        barn.spaces[5] = new Horse("Patches", 1350);
        barn.spaces[6] = new Horse("Duke", 1410);
        System.out.println("before consolidate");
        System.out.println(barn);
        barn.consolidate();
        System.out.println("after consolidate");
        System.out.println(barn);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.lang.reflect.Field;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "space 0 has name: Trigger weight: 1340\n"
                    + "space 1 has name: Silver weight: 1210\n"
                    + "space 2 has name: Patches weight: 1350\n"
                    + "space 3 has name: Duke weight: 1410\n"
                    + "space 4 has  null \n"
                    + "space 5 has  null \n"
                    + "space 6 has  null";

        boolean passed = removeSpaces(output).contains(removeSpaces(expect));
        getResults(expect, output, "Expected output from main", passed);
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        HorseBarn barn = new HorseBarn(7);

        try
        {
            Field barnField = HorseBarn.class.getDeclaredField("spaces");
            barnField.setAccessible(true);

            Horse[] spaces = (Horse[]) barnField.get(barn);

            spaces[1] = new Horse("Trigger", 1340);
            spaces[3] = new Horse("Silver", 1210);
            spaces[5] = new Horse("Lady", 1575);

            String expect =
                    "space 0 has name: Trigger weight: 1340\n"
                        + "space 1 has name: Silver weight: 1210\n"
                        + "space 2 has name: Lady weight: 1575\n"
                        + "space 3 has  null \n"
                        + "space 4 has  null \n"
                        + "space 5 has  null \n"
                        + "space 6 has  null";
            barn.consolidate();
            String actual = barn.toString();

            boolean passed = removeSpaces(actual).contains(removeSpaces(expect));

            String msg =
                    "Checking consolidate() with [null, \"Trigger\", null, \"Silver\", null,"
                        + " \"Lady\", null, null]";

            getResults(expect, actual, msg, passed);
            assertTrue(passed);

        }
        catch (Exception e)
        {
            getResults("", "", "There was a error with the testing code.", false);
            fail();
        }
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: 3HytvgdLCNI</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="3HytvgdLCNI" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_frsdb_1" data-multipleanswers="false">
                <div class="para" id="frsdb_1-1-1">6-4-3-1: Which loop should you use to solve this problem?</div>
                <li data-component="answer" id="csawesome2_2_frsdb_1_opt_a">
                  <div class="para" id="frsdb_1-2-1-1-1">for</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frsdb_1_opt_a">
                  <div class="para" id="frsdb_1-2-1-2-1">Use a for loop when you know how many times a loop needs to execute.  Do you know that here?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frsdb_1_opt_b">
                  <div class="para" id="frsdb_1-2-2-1-1">for each</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frsdb_1_opt_b">
                  <div class="para" id="frsdb_1-2-2-2-1">Use a for each loop when you want to loop through all values in a collection.  Do we have a collection here?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frsdb_1_opt_c" data-correct="">
                  <div class="para" id="frsdb_1-2-3-1-1">while</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frsdb_1_opt_c">
                  <div class="para" id="frsdb_1-2-3-2-1">Use a while loop when you don’t know how many times a loop needs to execute.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_frsdb_2" data-multipleanswers="false">
                <div class="para" id="frsdb_2-1-1">6-4-3-2: Which of the following correctly declares and creates the array to return?</div>
                <li data-component="answer" id="csawesome2_2_frsdb_2_opt_a">
                  <div class="para" id="frsdb_2-2-1-1-1">int[] retArray = new int[3];</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frsdb_2_opt_a">
                  <div class="para" id="frsdb_2-2-1-2-1">Don’t just use the size for the array from the example.  The question says to return an array of size num and num could be anything.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frsdb_2_opt_b">
                  <div class="para" id="frsdb_2-2-2-1-1">retArray = new int[num];</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frsdb_2_opt_b">
                  <div class="para" id="frsdb_2-2-2-2-1">Don’t forget to declare your variables.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frsdb_2_opt_c">
                  <div class="para" id="frsdb_2-2-3-1-1">int retArray = new int[num];</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frsdb_2_opt_c">
                  <div class="para" id="frsdb_2-2-3-2-1">Don’t forget that it is an array.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frsdb_2_opt_d" data-correct="">
                  <div class="para" id="frsdb_2-2-4-1-1">int[] retArray = new int[num];</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frsdb_2_opt_d">
                  <div class="para" id="frsdb_2-2-4-2-1">This declares an array of ints called retArray and creates it with a size of num.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frsdb_2_opt_e">
                  <div class="para" id="frsdb_2-2-5-1-1">int[] retArray;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frsdb_2_opt_e">
                  <div class="para" id="frsdb_2-2-5-2-1">This declares the array, but doesn’t create it.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.5.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcfrsdb">
                <div class="ac_question" id="csawesome2_2_lcfrsdb_question">
                  <div class="para" id="lcfrsdb-1-1">FRQ SelfDivisor B: write the method firstNumSelfDivisors below.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcfrsdb_editor" data-question_label="" data-codelens="true">public class SelfDivisor
{

    /**
     * @param number the number to be tested Precondition: number &gt; 0
     * @return true if every decimal digit of number is a divisor of number; false
     *     otherwise
     */
    public static boolean isSelfDivisor(int number)
    {
        int currNumber = number;
        int digit = 0;
        while (currNumber &gt; 0)
        {
            digit = currNumber % 10;
            if (digit == 0)
            {
                return false;
            }
            if (number % digit != 0)
            {
                return false;
            }
            currNumber = currNumber / 10;
        }
        return true;
    }

    /**
     * @param start starting point for values to be checked Precondition: start &gt; 0
     * @param num the size of the array to be returned Precondition: num &gt; 0
     * @return an array containing the first num integers &gt;= start that are
     *     self-divisors
     */
    public static int[] firstNumSelfDivisors(int start, int num)
    {
        /* to be implemented in part (b) */
    }

    public static void main(String[] args)
    {
        System.out.println("Self divisors for firstNumSelfDivisors(10, 3):");
        for (int n : firstNumSelfDivisors(10, 3))
        {
            System.out.print(n + " ");
        }
        System.out.println();

        System.out.println("Self divisors for firstNumSelfDivisors(22, 5):");
        for (int n : firstNumSelfDivisors(22, 5))
        {
            System.out.print(n + " ");
        }
        System.out.println();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.util.Arrays;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain()
    {
        String output = getMethodOutput("main");
        String expect =
                "Self divisors for firstNumSelfDivisors(10, 3):\n"
                    + "11 12 15\n"
                    + "Self divisors for firstNumSelfDivisors(22, 5):\n"
                    + "22 24 33 36 44";
        boolean passed = getResults(expect, output, "Checking output from main");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String msg = "Checking firstNumSelfDivisors(5, 10)";
        String output = Arrays.toString(SelfDivisor.firstNumSelfDivisors(5, 10));
        String expect = "[5, 6, 7, 8, 9, 11, 12, 15, 22, 24]";

        boolean passed = getResults(expect, output, msg);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: 2VBz-pX1Xos</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="2VBz-pX1Xos" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_fr_sounda_1" data-multipleanswers="false">
                <div class="para" id="fr_sounda_1-1-1">6-4-4-1: Which loop would be best for this problem?</div>
                <li data-component="answer" id="csawesome2_2_fr_sounda_1_opt_a">
                  <div class="para" id="fr_sounda_1-2-1-1-1">while</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_sounda_1_opt_a">
                  <div class="para" id="fr_sounda_1-2-1-2-1">You could use a while loop, but if you are looping through all values in an array it is better to use a for loop.  It is easier to make mistakes with a while loop and forget to increment a value in the body of the loop so that the loop eventually stops.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_sounda_1_opt_b" data-correct="">
                  <div class="para" id="fr_sounda_1-2-2-1-1">for</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_sounda_1_opt_b">
                  <div class="para" id="fr_sounda_1-2-2-2-1">Use a for loop when you want to loop through all or part of an array and need to change some of the values in the array.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_sounda_1_opt_c">
                  <div class="para" id="fr_sounda_1-2-3-1-1">for-each</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_sounda_1_opt_c">
                  <div class="para" id="fr_sounda_1-2-3-2-1">You could use a for-each loop to loop through all of the values in the array, but you wouldn’t be able to change the values.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_fr_sounda_2" data-multipleanswers="false">
                <div class="para" id="fr_sounda_2-1-1">6-4-4-2: Which is the correct code for changing the current value to the negative of the limit?</div>
                <li data-component="answer" id="csawesome2_2_fr_sounda_2_opt_a">
                  <div class="para" id="fr_sounda_2-2-1-1-1">samples[i].set(-limit);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_sounda_2_opt_a">
                  <div class="para" id="fr_sounda_2-2-1-2-1">There is no set method on arrays.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_sounda_2_opt_b">
                  <div class="para" id="fr_sounda_2-2-2-1-1">samples[i] = limit;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_sounda_2_opt_b">
                  <div class="para" id="fr_sounda_2-2-2-2-1">This would set the value at index i to limit rather than the negative of the limit.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_sounda_2_opt_c" data-correct="">
                  <div class="para" id="fr_sounda_2-2-3-1-1">samples[i] = -limit;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_sounda_2_opt_c">
                  <div class="para" id="fr_sounda_2-2-3-2-1">This will set the value at index i to the negative of the limit.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.5.4.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_SoundA">
                <div class="parsons_question parsons-text">
                  <div class="para" id="SoundA-1-1">The method <code class="code-inline tex2jax_ignore">limitAmplitude</code> below contains the correct code for a solution to this problem, but the code blocks are mixed up.  Drag the blocks from the left to the right and put them in order with the correct indentation so that the code would work correctly.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public int limitAmplitude(int limit)
{
---
  int numChanged = 0;
  for (int i = 0; i &lt; samples.length; i++)
  {
---
     if (samples[i] &gt; limit)
     {
---
        samples[i] = limit;
        numChanged++;
---
     } // end first if
     if (samples[i] &lt; -limit)
     {
---
        samples[i] = -limit;
        numChanged++;
---
      } // end second if
---
  } // end for
---
  return numChanged;
---
} // end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.5.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_FRQSoundA">
                <div class="ac_question" id="csawesome2_2_FRQSoundA_question">
                  <div class="para" id="FRQSoundA-1-1">FRQ Sound A: Write the method <code class="code-inline tex2jax_ignore">limitAmplitude</code> that will change any value that has an amplitude greater than the given limit. Values that are greater than <code class="code-inline tex2jax_ignore">limit</code> are replaced with <code class="code-inline tex2jax_ignore">limit</code>, and values that are less than <code class="code-inline tex2jax_ignore">-limit</code> are replaced with <code class="code-inline tex2jax_ignore">–limit</code>. The method returns the total number of values that were changed in the array.  The <code class="code-inline tex2jax_ignore">main</code> method has code to test your solution.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_FRQSoundA_editor" data-question_label="" data-codelens="true">import java.util.Arrays;

public class Sound
{
    // the array of values in this sound; guaranteed not to be null
    private int[] samples =
    {
        40, 2532, 17, -2300, -17, -4000, 2000, 1048, -420, 33, 15, -32, 2030, 3223
    };

    /**
     * Changes those values in this sound that have an amplitude greater than limit
     * Values greater than limit are changed to limit.
     *
     * @param limit the amplitude limit Precondition: limit &gt;= 0
     * @return the number of values in this sound that this method changed
     */
    public int limitAmplitude(int limit)
    {
        // Complete this method
    }

    public static void main(String[] args)
    {

        Sound s = new Sound();
        System.out.println("The original array is: " + Arrays.toString(s.samples));
        System.out.println(
                "limitAmplitude(2000) should return 5 "
                        + "and returned "
                        + s.limitAmplitude(2000));
        System.out.println("The changed array is: " + Arrays.toString(s.samples));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.lang.reflect.Field;
import java.util.Arrays;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain()
    {
        String output = getMethodOutput("main");
        String expect =
                "40, 2000, 17, -2000, -17, -2000, 2000, 1048, -420, 33, 15, -32, 2000, 2000";
        boolean passed = output.contains(expect);

        expect =
                "The original array is: [40, 2532, 17, -2300, -17, -4000, 2000, 1048, -420, 33, 1\n"
                    + "5, -32, 2030, 3223]\n"
                    + "limitAmplitude(2000) should return 5 and returned 5\n"
                    + "The changed array is: [40, 2000, 17, -2000, -17, -2000, 2000, 1048, -420,"
                    + " 33, 15, -32, 2000, 2000]";

        getResults(expect, output, "Checking output from main()", passed);
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        Sound s = new Sound();

        String expected = "8";
        String actual = "" + s.limitAmplitude(75);

        String msg = "Checking limitAmplitude(75) return value";
        boolean passed = getResults(expected, actual, msg);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        Sound s = new Sound();
        s.limitAmplitude(75);

        try
        {
            Field sampleField = Sound.class.getDeclaredField("samples");
            sampleField.setAccessible(true);

            int[] samples = (int[]) sampleField.get(s);

            String expected = "[40, 75, 17, -75, -17, -75, 75, 75, -75, 33, 15, -32, 75, 75]";
            String actual = Arrays.toString(samples);

            String msg = "Checking limitAmplitude(75) array results";
            boolean passed = getResults(expected, actual, msg);
            assertTrue(passed);

        }
        catch (Exception e)
        {
            getResults("", "", "There was a error with the testing code.", false);
            fail();
        }
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_fr_soundb_1" data-multipleanswers="false">
                <div class="para" id="fr_soundb_1-1-1">6-4-5-1: Which loop would be best for this problem?</div>
                <li data-component="answer" id="csawesome2_2_fr_soundb_1_opt_a" data-correct="">
                  <div class="para" id="fr_soundb_1-2-1-1-1">while</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_soundb_1_opt_a">
                  <div class="para" id="fr_soundb_1-2-1-2-1">A while loop is the best choice when you don’t know the number of times you need to loop.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_soundb_1_opt_b">
                  <div class="para" id="fr_soundb_1-2-2-1-1">for</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_soundb_1_opt_b">
                  <div class="para" id="fr_soundb_1-2-2-2-1">You could use a for loop, but typically a while loop is used when you want to loop while a condition is true.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_soundb_1_opt_c">
                  <div class="para" id="fr_soundb_1-2-3-1-1">for-each</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_soundb_1_opt_c">
                  <div class="para" id="fr_soundb_1-2-3-2-1">A for-each loop would only allow you to loop through all the values, but you first want to loop while there are leading zeros.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_fr_soundb_2" data-multipleanswers="false">
                <div class="para" id="fr_soundb_2-1-1">6-4-5-2: Which is the correct code for creating an integer array variable named <code class="code-inline tex2jax_ignore">samples2</code> and setting it to refer to an array of integers of size <code class="code-inline tex2jax_ignore">count</code>?</div>
                <li data-component="answer" id="csawesome2_2_fr_soundb_2_opt_a">
                  <div class="para" id="fr_soundb_2-2-1-1-1">int[] samples2;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_soundb_2_opt_a">
                  <div class="para" id="fr_soundb_2-2-1-2-1">This only declares the variable samples2 which will refer to an array of integers, it doesn’t create the array object.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_soundb_2_opt_b">
                  <div class="para" id="fr_soundb_2-2-2-1-1">int[] samples2 = new Array(count);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_soundb_2_opt_b">
                  <div class="para" id="fr_soundb_2-2-2-2-1">The new keyword is not used to create an array.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_soundb_2_opt_c" data-correct="">
                  <div class="para" id="fr_soundb_2-2-3-1-1">int[] samples2 = new int[count];</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_soundb_2_opt_c">
                  <div class="para" id="fr_soundb_2-2-3-2-1">This will create an array of integers of size count and a variable named samples2 which will refer to that array.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.5.5.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_SoundB">
                <div class="parsons_question parsons-text">
                  <div class="para" id="SoundB-1-1">The method <code class="code-inline tex2jax_ignore">trimSilenceFromBeginning</code> below contains correct code for one solution to this problem, but it is mixed up.  Drag the code blocks from the left to the right and put them in order with the correct indention so that the code would work correctly.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public void trimSilenceFromBeginning()
{
  int i = 0;
---
  while (this.samples[i] == 0)
  {
---
     i++;
---
  } // end while
---
  int samplesLen = this.samples.length;
  int[] newSamples = new int[samplesLen - i];
---
  for (int j = 0; j &lt; newSamples.length; j++)
  {
---
     newSamples[j] = this.samples[j+i];
---
  } // end for
---
  this.samples = newSamples;
---
} // end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.5.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_FRQSoundB">
                <div class="ac_question" id="csawesome2_2_FRQSoundB_question">
                  <div class="para" id="FRQSoundB-1-1">FRQ Sound B: Finish writing the method <code class="code-inline tex2jax_ignore">trimSilenceFromBeginning</code> below that removes the silence from the beginning of a sound. To remove starting silence, a new array of values is created that contains the same values as the original <code class="code-inline tex2jax_ignore">samples</code> array in the same order but without the leading zeros. The instance variable <code class="code-inline tex2jax_ignore">samples</code> is updated to refer to the new array.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_FRQSoundB_editor" data-question_label="" data-codelens="true">import java.util.Arrays;

public class Sound
{
    /** the array of values in this sound; guaranteed not to be null */
    private int[] samples =
    {
        0, 0, 0, 0, -14, 0, -35, -39, 0, -7, 16, 32, 37, 29, 0, 0
    };

    /**
     * Removes all silence from the beginning of this sound. Silence is represented
     * by a value of 0. Precondition: samples contains at least one nonzero value
     * Postcondition: the length of samples reflects the removal of starting
     * silence
     */
    public void trimSilenceFromBeginning()
    {
        // Complete this method
    }

    public static void main(String[] args)
    {

        Sound s = new Sound();

        System.out.println(
                "The original array of samples is " + Arrays.toString(s.samples));
        s.trimSilenceFromBeginning();
        System.out.println(
                "The new array of samples is " + Arrays.toString(s.samples));
        System.out.println(
                "The length of the new array should be 12 and is "
                        + s.samples.length);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.lang.reflect.Field;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain()
    {
        String output = getMethodOutput("main");
        String expect = "-14, 0, -35, -39, 0, -7, 16, 32, 37, 29, 0, 0";

        boolean passed = output.contains(expect);

        expect =
                "The original array of samples is [0, 0, 0, 0, -14, 0, -35, -39, 0, -7, 16, 32, 37,"
                    + " 29, 0, 0]\n"
                    + "The new array of samples is [-14, 0, -35, -39, 0, -7, 16, 32, 37, 29, 0, 0]";

        getResults(expect, output, "Checking output from main()", passed);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        Sound s = new Sound();
        s.trimSilenceFromBeginning();

        try
        {
            Field sampleField = Sound.class.getDeclaredField("samples");
            sampleField.setAccessible(true);

            int[] samples = (int[]) sampleField.get(s);

            String expected = "12";
            String actual = "" + samples.length;

            String msg = "Checking samples array length after trimSilenceFromBeginning()";
            boolean passed = getResults(expected, actual, msg);
            assertTrue(passed);

        }
        catch (Exception e)
        {
            getResults("", "", "There was a error with the testing code.", false);
            fail();
        }
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_numbercubea_1" data-multipleanswers="false">
                <div class="para" id="numbercubea_1-1-1">6-4-6-1: Which Java expression correctly generates a random number between 1 and 6?</div>
                <li data-component="answer" id="csawesome2_2_numbercubea_1_opt_a" data-correct="">
                  <div class="para" id="numbercubea_1-2-1-1-1">(int) (Math.random() * 6) + 1)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_numbercubea_1_opt_a">
                  <div class="para" id="numbercubea_1-2-1-2-1">This expression correctly generates a random number between 1 and 6.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_numbercubea_1_opt_b">
                  <div class="para" id="numbercubea_1-2-2-1-1">(int) (Math.random() * 6)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_numbercubea_1_opt_b">
                  <div class="para" id="numbercubea_1-2-2-2-1">This expression generates a random number from 0 to 5.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_numbercubea_1_opt_c">
                  <div class="para" id="numbercubea_1-2-3-1-1">Math.random(6);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_numbercubea_1_opt_c">
                  <div class="para" id="numbercubea_1-2-3-2-1">This isn’t valid</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_numbercubea_2" data-multipleanswers="false">
                <div class="para" id="numbercubea_2-1-1">6-4-6-2: Which of the following correctly creates an array of size numTosses?</div>
                <li data-component="answer" id="csawesome2_2_numbercubea_2_opt_a">
                  <div class="para" id="numbercubea_2-2-1-1-1">int[] tossArray = new int[];</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_numbercubea_2_opt_a">
                  <div class="para" id="numbercubea_2-2-1-2-1">You need to specify the size of the array when you create it.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_numbercubea_2_opt_b">
                  <div class="para" id="numbercubea_2-2-2-1-1">int[] tossArray = new int(numTosses);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_numbercubea_2_opt_b">
                  <div class="para" id="numbercubea_2-2-2-2-1">It should be new int[numTosses].</div>
                </li>
                <li data-component="answer" id="csawesome2_2_numbercubea_2_opt_c" data-correct="">
                  <div class="para" id="numbercubea_2-2-3-1-1">int[] tossArray = new int[numTosses];</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_numbercubea_2_opt_c">
                  <div class="para" id="numbercubea_2-2-3-2-1">This will create an array of size numTosses.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_numbercubea_3" data-multipleanswers="false">
                <div class="para" id="numbercubea_3-1-1">6-4-6-3: Which of the following correctly loops numTosses number of times?</div>
                <li data-component="answer" id="csawesome2_2_numbercubea_3_opt_a">
                  <div class="para" id="numbercubea_3-2-1-1-1">for (int i = 0; i &lt;= numTosses; i++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_numbercubea_3_opt_a">
                  <div class="para" id="numbercubea_3-2-1-2-1">This will execute numTosses + 1 times.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_numbercubea_3_opt_b">
                  <div class="para" id="numbercubea_3-2-2-1-1">for (int i = 1; i &lt; numTosses; i++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_numbercubea_3_opt_b">
                  <div class="para" id="numbercubea_3-2-2-2-1">This will execute numTosses - 1 times.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_numbercubea_3_opt_c" data-correct="">
                  <div class="para" id="numbercubea_3-2-3-1-1">for (int i = 0; i &lt; numTosses; i++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_numbercubea_3_opt_c">
                  <div class="para" id="numbercubea_3-2-3-2-1">This will execute numTosses times.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.5.6.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_numcubeA">
                <div class="parsons_question parsons-text">
                  <div class="para" id="numcubeA-1-1">The method <code class="code-inline tex2jax_ignore">getCubeTosses</code> below contains the correct code for one solution to this problem, but it is mixed up.  Drag the needed code from the left to the right and put them in order with the correct indention so that the code would work correctly.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public static int[] getCubeTosses(
                          NumberCube cube,
                          int numTosses)
{
---
  int[] cubeTosses = new int[numTosses];
---
  for (int i = 0; i &lt; numTosses; i++)
  {
---
     cubeTosses[i] = cube.toss();
---
  } // end for
---
  return cubeTosses;
---
} // end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.5.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_FRQNumberCubeA">
                <div class="ac_question" id="csawesome2_2_FRQNumberCubeA_question">
                  <div class="para" id="FRQNumberCubeA-1-1">FRQ Number Cube A: Write the method <code class="code-inline tex2jax_ignore">getCubeTosses</code> that takes a number cube and a number of tosses as parameters. The method should return an array of the values produced by tossing the number cube the given number of times.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_FRQNumberCubeA_editor" data-question_label="" data-codelens="true">import java.util.Arrays;

public class NumberCube
{

    public int toss()
    {
        return (int) ((Math.random() * 6) + 1);
    }

    public static int[] getCubeTosses(NumberCube cube, int numTosses)
    {
        // Complete this method
    }

    public static void main(String[] args)
    {
        NumberCube cube = new NumberCube();
        int numTosses = 9;
        int[] tosses = getCubeTosses(cube, numTosses);

        if (tosses.length &lt; numTosses)
        {
            System.out.println(
                    "It looks like you are not returning an array of the correct"
                        + " size:");
            System.out.println(Arrays.toString(tosses));
        }
        else
        {
            System.out.println("You returned an array of the correct size:");
            System.out.println(Arrays.toString(tosses));
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testleng() throws IOException
    {
        String expect = "You returned an array of the correct size";
        String actual = getMethodOutput("main");

        boolean passed = getResults(expect, actual, "Checking output from main()");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        NumberCube c = new NumberCube();
        int[] results = NumberCube.getCubeTosses(c, 20);

        String expect = "20";
        String actual = "" + results.length;

        boolean passed =
                getResults(
                        expect,
                        actual,
                        "Checking getNumTosses() returns an array of the correct size");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        NumberCube c = new NumberCube();
        int[] results = NumberCube.getCubeTosses(c, 100);

        boolean passed = true;
        int same = 0;

        for (int i = 0; i &lt; results.length; i++)
        {
            if (i &lt; results.length - 1 &amp;&amp; results[i] == results[i + 1]) same++;

            if (results[i] &lt; 1 || results[i] &gt; 6) passed = false;
        }

        if (same &gt; 25) passed = false;

        String expect = "true";
        String actual = "" + passed;

        passed =
                getResults(
                        expect,
                        actual,
                        "Checking that tosses are within proper range (1-6, no 0)",
                        passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "cube.toss()";
        boolean passed = checkCodeContains("call to cube.toss()", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.5.7.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_numcubeB">
                <div class="parsons_question parsons-text">
                  <div class="para" id="numcubeB-1-1">The method <code class="code-inline tex2jax_ignore">getLongestRun</code> below contains the correct code for one solution to this problem, but it is mixed up.  Drag the needed code from the left to the right and put them in order with the correct indention so that the code would work correctly.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public static int getLongestRun(int[] values)
{
   int currentLen = 0;
   int maxLen = 0;
   int maxStart = -1;
---
   for (int i = 0; i &lt; values.length-1; i++)
   {
---
      if (values[i] == values[i+1])
      {
---
         currentLen++;
         if (currentLen &gt; maxLen)
         {
             maxLen = currentLen;
             maxStart = i - currentLen + 1;
         }
---
      } else
      {
         currentLen = 0;
      }
---
   } // end for
   return maxStart;
---
} // end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.5.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_FRQNumberCubeB">
                <div class="ac_question" id="csawesome2_2_FRQNumberCubeB_question">
                  <div class="para" id="FRQNumberCubeB-1-1">FRQ Number Cube B: Write the method <code class="code-inline tex2jax_ignore">getLongestRun</code> that takes as its parameter an array of integer values representing a series of number cube tosses. The method returns the starting index in the array of a run of maximum size. A run is defined as the repeated occurrence of the same value in two or more consecutive positions in the array.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_FRQNumberCubeB_editor" data-question_label="" data-codelens="true">public class NumberCube
{

    public static int getLongestRun(int[] values)
    {
        // Complete this method
    }

    public static void main(String[] args)
    {
        int[] values = {3, 5, 6, 6, 3, 6, 4, 4, 4, 2, 6, 4, 1, 1, 1, 1};
        int longestRunIdx = getLongestRun(values);

        if (longestRunIdx != 12)
        {
            System.out.println("Your code does not return the correct index.");

            if (longestRunIdx == 2 || longestRunIdx == 6)
                System.out.println(
                        "It is returning the start index of a run, but that run is"
                            + " not the longest.");

            System.out.println(
                    "Remember that your code must return the start index of the"
                        + " longest run of tosses.");
        }
        else
        {
            System.out.println("Looks like your code works well!");
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.util.Arrays;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String expect = "Looks like your code works well!";
        String actual = getMethodOutput("main");

        boolean passed = getResults(expect, actual, "Checking output of main()");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        int[] values = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

        String actual = "" + NumberCube.getLongestRun(values);
        String expect = "-1";

        boolean passed =
                getResults(expect, actual, "Checking output with " + Arrays.toString(values));
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        int[] values = {1, 1, 1, 1, 1, 1, 1, 1, 1};

        String actual = "" + NumberCube.getLongestRun(values);
        String expect = "0";

        boolean passed =
                getResults(expect, actual, "Checking output with " + Arrays.toString(values));
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        int[] values = {1, 1, 1, 1, 2, 2, 2, 2, 2};

        String actual = "" + NumberCube.getLongestRun(values);
        String expect = "4";

        boolean passed =
                getResults(expect, actual, "Checking output with " + Arrays.toString(values));
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.5.8.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_minmax">
                <div class="ac_question" id="csawesome2_2_minmax_question">
                  <div class="para" id="minmax-1-1">The code below finds the minimum (smallest element) in an array. Try it in the <a class="external" href="http://www.pythontutor.com/visualize.html#code=%20%20public%20class%20MinMax%0A%20%20%20%7B%20%20%20%20%20%20%0A%20%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20int%5B%20%5D%20values%20%3D%20%7B6,%202,%201,%207,%2012,%205%7D%3B%0A%20%20%20%20%20%20%20%20int%20min%20%3D%20values%5B0%5D%3B%20//%20initialize%20min%20to%20the%20first%20element%0A%20%20%20%20%20%20%20%20for%20%28int%20val%20%3A%20values%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20if%20%28val%20%3C%20min%29%20//%20found%20a%20new%20min!%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20min%20%3D%20val%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20System.out.println%28%22Min%20is%20%22%20%2B%20min%20%29%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%7D&amp;cumulative=false&amp;curInstr=20&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false&amp;curInstr=0" target="_blank">Java visualizer</a><details class="ptx-footnote" aria-live="polite" id="minmax-1-1-2"><summary class="ptx-footnote__number" title="Footnote 4.5.2"><sup> 2 </sup></summary><div class="ptx-footnote__contents" id="minmax-1-1-2"><code class="code-inline tex2jax_ignore">http://www.pythontutor.com/visualize.html#code=%20%20public%20class%20MinMax%0A%20%20%20%7B%20%20%20%20%20%20%0A%20%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20int%5B%20%5D%20values%20%3D%20%7B6,%202,%201,%207,%2012,%205%7D%3B%0A%20%20%20%20%20%20%20%20int%20min%20%3D%20values%5B0%5D%3B%20//%20initialize%20min%20to%20the%20first%20element%0A%20%20%20%20%20%20%20%20for%20%28int%20val%20%3A%20values%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20if%20%28val%20%3C%20min%29%20//%20found%20a%20new%20min!%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20min%20%3D%20val%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20System.out.println%28%22Min%20is%20%22%20%2B%20min%20%29%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%7D&amp;cumulative=false&amp;curInstr=20&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false&amp;curInstr=0</code></div></details> with the CodeLens button. Can you change it to find the maximum element instead? Can you also compute the average of the elements?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_minmax_editor" data-question_label="" data-codelens="true">public class MinMax
{
    public static void main(String[] args)
    {
        int[] values = {6, 2, 1, 7, 12, 5};
        int min = values[0]; // initialize min to the first element
        for (int val : values)
        {
            if (val &lt; min) // found a new min!
            {
                min = val;
            }
        }
        System.out.println("Min is " + min);
    }
}
====
// Test for Lesson MinMax
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("MinMax");

        int[] numArray = {2, 6, 7, 12, 5};
        setDefaultValues(new Object[] {numArray});
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "Max is 12";

        boolean passed = output.contains(expect);

        passed = getResults(expect, output, "Max element", passed);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String output = getMethodOutput("main");
        String expect = "Average is 5.5";

        boolean passed = output.contains(expect);

        passed = getResults(expect, output, "Average", passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        boolean passed = checkCodeContains("if statement using val &gt;", "if (val &gt;");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.5.8.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_rotate">
                <div class="ac_question" id="csawesome2_2_rotate_question">
                  <div class="para" id="rotate-1-1">The code below rotates array elements to the left. Note that you need to use an indexed loop for this because you need to change the array and access two elements at different indices. Try it in the <a class="external" href="http://www.pythontutor.com/visualize.html#code=public%20class%20Rotate%0A%20%20%20%7B%20%20%20%20%20%20%0A%20%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20int%5B%20%5D%20values%20%3D%20%7B6,%202,%201,%207,%2012,%205%7D%3B%0A%20%20%20%20%20%20%20%20int%20first%20%3D%20values%5B0%5D%3B%0A%20%20%20%20%20%20%20%20for%20%28int%20i%3D0%3B%20i%20%3C%20values.length%3B%20i%2B%2B%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20//%20if%20it's%20not%20the%20last%20element,%20copy%20the%20next%20one%20over%0A%20%20%20%20%20%20%20%20%20%20if%20%28i%20%3C%20values.length%20-%201%29%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20values%5Bi%5D%20%3D%20values%5Bi%2B1%5D%3B%0A%20%20%20%20%20%20%20%20%20%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20//%20last%20element%20gets%20first%0A%20%20%20%20%20%20%20%20%20%20%20%20%20values%5Bi%5D%20%3D%20first%3B%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20//%20print%20them%20out%20to%20see%20the%20results%0A%20%20%20%20%20%20%20%20for%20%28int%20val%20%3A%20values%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20System.out.print%28val%20%2B%20%22%20%22%29%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%7D%0A%20%20&amp;cumulative=false&amp;curInstr=47&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false&amp;curInstr=0" target="_blank">Java visualizer</a><details class="ptx-footnote" aria-live="polite" id="rotate-1-1-2"><summary class="ptx-footnote__number" title="Footnote 4.5.3"><sup> 3 </sup></summary><div class="ptx-footnote__contents" id="rotate-1-1-2"><code class="code-inline tex2jax_ignore">http://www.pythontutor.com/visualize.html#code=public%20class%20Rotate%0A%20%20%20%7B%20%20%20%20%20%20%0A%20%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20int%5B%20%5D%20values%20%3D%20%7B6,%202,%201,%207,%2012,%205%7D%3B%0A%20%20%20%20%20%20%20%20int%20first%20%3D%20values%5B0%5D%3B%0A%20%20%20%20%20%20%20%20for%20%28int%20i%3D0%3B%20i%20%3C%20values.length%3B%20i%2B%2B%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20//%20if%20it's%20not%20the%20last%20element,%20copy%20the%20next%20one%20over%0A%20%20%20%20%20%20%20%20%20%20if%20%28i%20%3C%20values.length%20-%201%29%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20values%5Bi%5D%20%3D%20values%5Bi%2B1%5D%3B%0A%20%20%20%20%20%20%20%20%20%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20//%20last%20element%20gets%20first%0A%20%20%20%20%20%20%20%20%20%20%20%20%20values%5Bi%5D%20%3D%20first%3B%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20//%20print%20them%20out%20to%20see%20the%20results%0A%20%20%20%20%20%20%20%20for%20%28int%20val%20%3A%20values%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20System.out.print%28val%20%2B%20%22%20%22%29%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%7D%0A%20%20&amp;cumulative=false&amp;curInstr=47&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false&amp;curInstr=0</code></div></details> with the CodeLens button. Can you change it to rotate the elements to the right instead? Hint: use a backwards loop.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_rotate_editor" data-question_label="" data-codelens="true">public class Rotate
{
    public static void main(String[] args)
    {
        int[] values = {6, 2, 1, 7, 12, 5};
        int first = values[0];
        for (int i = 0; i &lt; values.length; i++)
        {
            // if it's not the last element, copy the next one over
            if (i &lt; values.length - 1)
            {
                values[i] = values[i + 1];
            }
            else
            {
                // last element gets first
                values[i] = first;
            }
        }
        // print them out to see the results
        for (int val : values)
        {
            System.out.print(val + " ");
        }
    }
}
====
// Test for Lesson 6.4.2 - Rotate
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Rotate");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "5 6 2 1 7 12";

        boolean passed = output.contains(expect);

        passed = getResults(expect, output, "Rotate numbers to the right", passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        boolean passed =
                checkCodeContains("copying values[i-1] into values[i]", "values[i] = values[i-1]");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>input-files-optional</id>
      <title>Input Files (Optional)</title>
      <question>
        <label>Exercise 4.6.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_throws-exception-exercise">
                <div class="ac_question" id="csawesome2_2_throws-exception-exercise_question">
                  <div class="para" id="throws-exception-exercise-1-1">Run the code below to see the error message. Add <dfn class="terminology">throws</dfn> and the correct exception to the end of the main method header to fix the error.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_throws-exception-exercise_editor" data-question_label="" data-codelens="true">import java.io.*;
import java.util.*;

public class FileIO
{
    public static void main(String[] args)
    {
        File myFile = new File("dictionary.txt");
        Scanner scan = new Scanner(myFile);
        System.out.println(
                "The first word in the dictionary file is: " + scan.nextLine());
        scan.close();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("FileIO");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "The first word in the dictionary file is: a";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void fixedCode()
    {
        boolean passed = checkCodeContains("throws IOException", "throws IOException");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.6.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_read-pokemon-file">
                <div class="ac_question" id="csawesome2_2_read-pokemon-file_question">
                  <div class="para" id="read-pokemon-file-1-1">Complete the code in the main method below to read in the first 10 lines of the pokemon file using the Scanner class, save each line into the pokemonLines array, and print it out.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_read-pokemon-file_editor" data-question_label="" data-codelens="true">import java.io.*;
import java.util.*;

public class ReadData
{
    public static void main(String[] args) throws IOException
    {
        File myFile = new File("pokemon.csv");
        Scanner scan = new Scanner(myFile);
        String[] pokemonLines = new String[10];

        int i = 0;
        // 1. Add in the loop condition that checks if scan has another line of input
        //    and that i is less than 10.
        while (         )
        {
            // 2. Read in the next line of the file

            // 3. Assign the line to the ith element of the pokemonLines array

            // 4. Print out the line

            i++; // line count
         }
         scan.close();
   }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ReadData");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String[] lines = output.split("\\s+");
        boolean passed = lines.length &gt;= 10;

        passed =
                getResults(
                        "10+ lines of output",
                        lines.length + " lines of output",
                        "Expected output",
                        passed);
        assertTrue(passed);
    }

    @Test
    public void arrayCode()
    {
        boolean passed = checkCodeContains("assignment to pokemonLines[i]", "pokemonLines[i]");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.6.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_read-pokemon-file-nio">
                <div class="ac_question" id="csawesome2_2_read-pokemon-file-nio_question">
                  <div class="para" id="read-pokemon-file-nio-1-1">Complete the code in the main method below to reads all lines of the file using <code class="code-inline tex2jax_ignore">Files.readAllLines</code> into a <code class="code-inline tex2jax_ignore">List&lt;String&gt;</code> named <code class="code-inline tex2jax_ignore">lines</code>. Add a loop that prints out the first 10 pokemon.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_read-pokemon-file-nio_editor" data-question_label="" data-codelens="true">import java.io.*;
import java.nio.file.*;
import java.util.*;

public class ReadData
{
    public static void main(String[] args) throws IOException
    {
        List&lt;String&gt; lines = Files.readAllLines(Paths.get("pokemon.csv"));
        // Add a loop that prints out the first 10 elements of the List lines
        // You can use the get method with Lists just like ArrayLists

    }
}
====
import static org.junit.Assert.*;
import org.junit.*;
import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ReadData");
    }

    @Test
    public void testMain() throws IOException
    {
         String output = getMethodOutput("main");
         String[] lines = output.split("\\s+");
         boolean passed = lines.length &gt;= 10;

         passed = getResults("10+ lines of output", lines.length + " lines of output", "Expected output", passed);
         assertTrue(passed);
    }
    @Test
    public void getMethodTest()
    {
       boolean passed = checkCodeContains("call to get method with lines", "lines.get");
       assertTrue(passed);
    }
 }
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.6.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_pokeImages">
                <div class="ac_question" id="csawesome2_2_pokeImages_question">
                  <div class="para" id="pokeImages-1-1"><dfn class="terminology">PokeImages:</dfn> This program reads in some of the data from the pokemon file into a List of lines. Complete the main method to print out a random pokemon name and its image using the split method.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_pokeImages_editor" data-question_label="" data-codelens="true">import java.io.*;
import java.nio.file.*;
import java.util.*;

public class PokeImages
{
    public static void main(String[] args) throws IOException
    {
        List&lt;String&gt; lines = Files.readAllLines(Paths.get("pokemon.csv"));
        // 1. pick a random number from 1 to the size of the List
        //    (don't use the 0th row which is the headers)

        // 2. get the line of data at that random index from the List lines

        // 3. Use the split method to split the line into a String array

        // 4. Print out the name. What is the index for the name in the split
        // array?

        // 5. Call the PokeImages.printHTMLimage method below
        //    with an element of the array to print out the image.
        //    What is the index for the image url in the array?

    }

    // This method will just work on Runestone to print out images
    public static void printHTMLimage(String url)
    {
        System.out.print("&lt;img src=" + url + " width=300px /&gt;");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("PokeImages");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String[] lines = output.split("\\s+");
        boolean passed = lines.length &gt;= 1;

        passed =
                getResults(
                        "1+ lines of output",
                        lines.length + " lines of output",
                        "Expected output",
                        passed);
        assertTrue(passed);
    }

    @Test
    public void getMethodTest()
    {
        boolean passed = checkCodeContains("call to get method with lines", "lines.get");
        assertTrue(passed);
    }

    @Test
    public void splitCode()
    {
        boolean passed = checkCodeContains("call to split method", ".split");
        assertTrue(passed);
    }

    @Test
    public void imageCode()
    {
        boolean passed =
                checkCodeContains("call to PokeImages.printHTMLimage", "PokeImages.printHTMLimage");
        assertTrue(passed);
    }

    @Test
    public void nameIndexCode()
    {
        boolean passed = checkCodeContains("the correct index for the name (1)", "[1]");
        assertTrue(passed);
    }

    @Test
    public void imageIndexCode()
    {
        boolean passed = checkCodeContains("the correct index for the image url (8)", "[8]");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.6.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-pokemon-file">
                <div class="ac_question" id="csawesome2_2_challenge-pokemon-file_question">
                  <div class="para" id="challenge-pokemon-file-1-1"><dfn class="terminology">Pokemon ArrayList:</dfn> Design the class Pokemon that has at least 3 attributes that can be found in the Pokemon file, including its name, type1, and imagefile, and any other attributes from the file that you would like. Write a constructor and getters for these attributes. Then, read in the data from the pokemon file, split each line, and save the data in an <code class="code-inline tex2jax_ignore">ArrayList</code> of Pokemon objects. Write a <code class="code-inline tex2jax_ignore">findType</code> method that loops through the ArrayList to find the Pokemon of a type given as the argument and prints out their names and images.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-pokemon-file_editor" data-question_label="" data-codelens="true">import java.io.*;
import java.nio.file.*;
import java.util.*;

class Pokemon
{
    // Add at least 3 attributes of a Pokemon including name, type1, and imagefile

    // Add a constructor that initializes the attributes of a Pokemon
    //  to the values given as arguments

    // Add getters for the attributes
}

public class PokemonArrayList
{
    private ArrayList&lt;Pokemon&gt; pokemonList = new ArrayList&lt;Pokemon&gt;();

    // Write a method to read in the data (it may throw an exception).
    // Loop through each row to split it into attributes.
    //     Create a new Pokemon object from the attributes.
    //     and save it into the pokemonList

    // Write a findType method that print out all the
    // Pokemon of a certain type given as an argument.
    // This method can call printHTMLimage(url) defined below.

    // This method will just work on Runestone to print out images
    public static void printHTMLimage(String url)
    {
        System.out.print("&lt;img src=" + url + " width=300px /&gt;");
    }

    public static void main(String[] args) throws IOException
    {
        PokemonArrayList obj = new PokemonArrayList();
        // Call your method to read in the data

        // Call your method to find all the Pokemon of a certain type
        // obj.findType("Grass");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("PokemonArrayList");
    }

    @Test
    public void testPrivateVariables()
    {
        String code = getCode();
        int count = countOccurences(code, "private");
        boolean passed = count &gt;= 3;
        getResults("3", count + "", "Number of private instance variables", passed);
        assertTrue(passed);
    }

    @Test
    public void testConstructor()
    {
        boolean passed = checkCodeContains("Pokemon constructor", "public Pokemon(");
        assertTrue(passed);
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String[] lines = output.split("\\s+");
        boolean passed = lines.length &gt;= 2;

        passed =
                getResults(
                        "2+ lines of output",
                        lines.length + " lines of output",
                        "Expected output",
                        passed);
        assertTrue(passed);
    }

    @Test
    public void splitCode()
    {
        boolean passed = checkCodeContains("call to split method", ".split");
        assertTrue(passed);
    }

    @Test
    public void addCode()
    {
        boolean passed = checkCodeContains("call to pokemonList.add", ".add");
        assertTrue(passed);
    }

    @Test
    public void countForLoops()
    {
        String code = removeSpaces(getCode());
        int count = countOccurences(code, "for");
        boolean passed = count &gt;= 2;
        getResults("2", count + "", "For loops used in 2 methods", passed);
        assertTrue(passed);
    }

    @Test
    public void testFindTypeHeader()
    {
        boolean passed =
                checkCodeContains(
                        "public void findType method with a String argument",
                        "public void findType(String");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.6.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-file">
                <div class="ac_question" id="csawesome2_2_challenge-file_question">
                  <div class="para" id="challenge-file-1-1"><dfn class="terminology">Input File Challenge:</dfn> Design the class for your input file that has at least 3 attributes that can be found in the file. Then, read in the data from the file, split each line, and save the data in an <code class="code-inline tex2jax_ignore">ArrayList</code> of objects. Finally, do something interesting with the data using a loop, for example you could find the object with the max or min attribute value or print out all the objects of a certain attribute value.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-file_editor" data-question_label="" data-codelens="true">import java.io.*;
import java.nio.file.*;
import java.util.*;

/* Change this class name to a meaningful name for one record from the dataset. */
class OneItem
{
    // Add at least 3 attributes found in the data file

    // Add a constructor that initializes the attributes

    // Add any getters and toString methods that you need

}

/* Change this class name to a meaningful name for the whole dataset. */
public class Data
{
    // Declare an ArrayList of your class type

    // Write a method to read in the data (it may throw an exception).
    // Loop through each row to split it into attributes.
    //     Create a new  object from the attributes.
    //     and save it into the ArrayList.

    // Write a method that does something with the data
    // for example find the object with a min or max attribute value
    // or print out all the objects of a certain attribute value.

    public static void main(String[] args) throws IOException
    {
        Data obj = new Data(); // change to your class name
        // Call your method to read in the data

        // Call your method to do something with the data

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testPrivateVariables()
    {
        String code = getCode();
        int count = countOccurences(code, "private");
        boolean passed = count &gt;= 3;
        getResults("3", count + "", "Number of private instance variables", passed);
        assertTrue(passed);
    }

    @Test
    public void testConstructor3()
    {
        String output = checkConstructor(3);
        String expect = "pass";

        boolean passed = getResults(expect, output, "Checking constructor with 3 parameters");
        assertTrue(passed);
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String[] lines = output.split("\\s+");
        boolean passed = lines.length &gt;= 2;

        passed =
                getResults(
                        "2+ lines of output",
                        lines.length + " lines of output",
                        "Expected output",
                        passed);
        assertTrue(passed);
    }

    @Test
    public void splitCode()
    {
        boolean passed = checkCodeContains("call to split method", ".split");
        assertTrue(passed);
    }

    @Test
    public void addCode()
    {
        boolean passed = checkCodeContains("call to add to ArrayList", ".add");
        assertTrue(passed);
    }

    @Test
    public void countForLoops()
    {
        String code = removeSpaces(getCode());
        int count = countOccurences(code, "for(");
        boolean passed = count &gt;= 2;
        getResults("2", count + "", "For loops used in 2 methods", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-8-8</id>
      <title>Wrapper Classes - Integer and Double</title>
      <question>
        <label>Exercise 4.7.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge2-8-wrapperDebug">
                <div class="ac_question" id="csawesome2_2_challenge2-8-wrapperDebug_question">
                  <div class="para" id="challenge2-8-wrapperDebug-1-1">Find and fix the bugs below to use the correct Integer and Double methods and variables.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge2-8-wrapperDebug_editor" data-question_label="" data-codelens="true">public class Debug
{
    public static void main(String[] args)
    {
        integer i = 2.3;
        Double d = 5;
        System.out.println( i.intValue );
        System.out.println( doubleValue() );
        // Print out the min and max values possible for integers
        System.out.println(Integer.min_value);
        System.out.println( int.MAX_VALUE() );
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "2\n5.0\n-2147483648\n2147483647";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testCode() throws IOException
    {
        String target = "Integer.MAX_VALUE";
        boolean passed = checkCodeContains("MAX_VALUE", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.7.3.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcmm1">
                <div class="ac_question" id="csawesome2_2_lcmm1_question">
                  <div class="para" id="lcmm1-1-1">What’s the minimum and maximum numbers for an int? What happens if you go beyond these limits with - 1 or + 1?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcmm1_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        System.out.println(Integer.MIN_VALUE);
        System.out.println(Integer.MAX_VALUE);
        System.out.println(Integer.MIN_VALUE - 1);
        System.out.println(Integer.MAX_VALUE + 1);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "-2147483648\n2147483647\n2147483647\n-2147483648";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.7.3.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_WrapperClasses">
                <span data-subcomponent="question">
                  <div class="para" id="WrapperClasses-1-1">Drag the definition from the left and drop it on the correct word on the right.  Click the "Check Me" button to see if you are correct.</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="WrapperClasses-2-1">Review the vocabulary.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_WrapperClasses_drag1">automatic conversion from the primitive type to the wrapper object</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_WrapperClasses_drag1">autoboxing</li>
                <li data-subcomponent="draggable" id="csawesome2_2_WrapperClasses_drag2">automatic conversion from the wrapper object to the primitive type</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_WrapperClasses_drag2">unboxing</li>
                <li data-subcomponent="draggable" id="csawesome2_2_WrapperClasses_drag3">Integer</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_WrapperClasses_drag3">wrapper class</li>
                <li data-subcomponent="draggable" id="csawesome2_2_WrapperClasses_drag4">int</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_WrapperClasses_drag4">primitive type</li>
                <li data-subcomponent="draggable" id="csawesome2_2_WrapperClasses_drag5">Integer.MAX_VALUE + 1</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_WrapperClasses_drag5">overflow</li>
                <li data-subcomponent="draggable" id="csawesome2_2_WrapperClasses_drag6">Integer.MIN_VALUE - 1</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_WrapperClasses_drag6">underflow</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.7.3.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_integerMethods">
                <div class="ac_question" id="csawesome2_2_integerMethods_question">
                  <div class="para" id="integerMethods-1-1">Run the code below to see useful methods in the Integer and Double wrapper classes.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_integerMethods_editor" data-question_label="" data-codelens="true">public class Test2
{
    public static void main(String[] args)
    {
        Integer i = 2;
        Double d = 3.5;
        System.out.println(
                i.intValue()); // intValue() returns the primitive value
        System.out.println(d.doubleValue());

        String ageStr = "16";
        // Integer.parseInt and Double.parseDouble are often used to
        // convert an input string to a number so you can do math on it.
        // They are not on the AP exam
        System.out.println(
                "Age "
                        + ageStr
                        + " in 10 years is "
                        + (Integer.parseInt(ageStr) + 10));
        System.out.println(
                "Note that + with strings does concatenation, not addition: "
                        + (ageStr + 10));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "2\n"
                        + "3.5\n"
                        + "Age 16 in 10 years is 26\n"
                        + "Note that + with strings does concatenation, not addition: 1610";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-8-9</id>
      <title>Intro to ArrayLists</title>
      <question>
        <label>Exercise 4.8.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qlib_1" data-multipleanswers="false">
                <div class="para" id="qlib_1-1-1">7-1-2: Which of the following is true about import statements?</div>
                <li data-component="answer" id="csawesome2_2_qlib_1_opt_a">
                  <div class="para" id="qlib_1-2-1-1-1">You can only have one import statement in a source file.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qlib_1_opt_a">
                  <div class="para" id="qlib_1-2-1-2-1">You can have an many import statements as you need.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qlib_1_opt_b">
                  <div class="para" id="qlib_1-2-2-1-1">You must specify the class to import.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qlib_1_opt_b">
                  <div class="para" id="qlib_1-2-2-2-1">You can use * to import all classes at the specified level.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qlib_1_opt_c" data-correct="">
                  <div class="para" id="qlib_1-2-3-1-1">Import statements must be before other code in a Java source file.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qlib_1_opt_c">
                  <div class="para" id="qlib_1-2-3-2-1">Import statements have to be the first Java statements in a source file.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qlib_1_opt_d">
                  <div class="para" id="qlib_1-2-4-1-1">You must import java.lang.String to use the short name of String.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qlib_1_opt_d">
                  <div class="para" id="qlib_1-2-4-2-1">You do not have to import any classes that are in the java.lang package.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.8.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ArrayListDeclare">
                <div class="ac_question" id="csawesome2_2_ArrayListDeclare_question">
                  <div class="para" id="ArrayListDeclare-1-1">In the code below we are declaring a variable called <code class="code-inline tex2jax_ignore">nameList</code> that can refer to a <code class="code-inline tex2jax_ignore">ArrayList</code> of strings, but currently doesn’t refer to any <code class="code-inline tex2jax_ignore">ArrayList</code> yet as it’s set to <code class="code-inline tex2jax_ignore">null</code>.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ArrayListDeclare_editor" data-question_label="" data-codelens="true">import java.util.*; // import for ArrayList

public class ArrayListDeclare
{
    public static void main(String[] args)
    {
        ArrayList&lt;String&gt; nameList = null;
        System.out.println(nameList);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ArrayListDeclare");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "null";

        boolean passed = getResults(expect, output, "main()", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.8.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ArrayListCreateStr">
                <div class="ac_question" id="csawesome2_2_ArrayListCreateStr_question">
                  <div class="para" id="ArrayListCreateStr-1-1">The following code demonstrates a NullPointerException. Change the list2 declaration so that it creates a new ArrayList to remove the NullPointerException.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ArrayListCreateStr_editor" data-question_label="" data-codelens="true">import java.util.*; // import needed for ArrayList

public class ArrayListCreateStr
{
    public static void main(String[] args)
    {
        ArrayList&lt;String&gt; nameList = new ArrayList&lt;String&gt;();
        System.out.println("The size of nameList is: " + nameList.size());
        ArrayList&lt;String&gt; list2 = null;
        System.out.println("The size of list2 is: " + list2.size());
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ArrayListCreateStr");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "The size of nameList is: 0\nThe size of list2 is: 0";

        boolean passed = getResults(expect, output, "main()", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.8.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ArrayListCreateInt">
                <div class="ac_question" id="csawesome2_2_ArrayListCreateInt_question">
                  <div class="para" id="ArrayListCreateInt-1-1">Here’s an example of a Integer ArrayList.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ArrayListCreateInt_editor" data-question_label="" data-codelens="true">import java.util.*;

public class ArrayListCreateInt
{
    public static void main(String[] args)
    {
        ArrayList&lt;Integer&gt; numList = new ArrayList&lt;Integer&gt;();
        System.out.println(numList.size());
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ArrayListCreateInt");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "0";

        boolean passed = getResults(expect, output, "main()", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.8.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qArrayListInteger" data-multipleanswers="false">
                <div class="para" id="qArrayListInteger-1-1">7-1-6: Which of the following is the correct way to create an ArrayList of integers?</div>
                <li data-component="answer" id="csawesome2_2_qArrayListInteger_opt_a">
                  <div class="para" id="qArrayListInteger-2-1-1-1">ArrayList[int] numbers = new ArrayList();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qArrayListInteger_opt_a">
                  <div class="para" id="qArrayListInteger-2-1-2-1">The square brackets [] are only used with arrays, not ArrayLists.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qArrayListInteger_opt_b">
                  <div class="para" id="qArrayListInteger-2-2-1-1">ArrayList&lt;String&amp;gt; numbers = new ArrayList();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qArrayListInteger_opt_b">
                  <div class="para" id="qArrayListInteger-2-2-2-1">String is not the correct type since this is for an array of integers, and the type should be next to ArrayList on both sides.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qArrayListInteger_opt_c">
                  <div class="para" id="qArrayListInteger-2-3-1-1">ArrayList&lt;int&amp;gt; numbers = new ArrayList&lt;int&amp;gt;();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qArrayListInteger_opt_c">
                  <div class="para" id="qArrayListInteger-2-3-2-1">ArrayLists cannot hold primitive types like int. You must use the wrapper class Integer.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qArrayListInteger_opt_d" data-correct="">
                  <div class="para" id="qArrayListInteger-2-4-1-1">ArrayList&lt;Integer&amp;gt; numbers = new ArrayList&lt;Integer&amp;gt;();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qArrayListInteger_opt_d">
                  <div class="para" id="qArrayListInteger-2-4-2-1">The wrapper class Integer is used to hold integers in an ArrayList.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.8.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ArrayListFromArray">
                <div class="ac_question" id="csawesome2_2_ArrayListFromArray_question">
                  <div class="para" id="ArrayListFromArray-1-1">Example code creating an ArrayList from an array.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ArrayListFromArray_editor" data-question_label="" data-codelens="true">import java.util.*;

public class ArrayListFromArray
{
    public static void main(String[] args)
    {
        String[] names = {"Dakota", "Madison", "Brooklyn"};
        ArrayList&lt;String&gt; namesList = new ArrayList&lt;String&gt;(Arrays.asList(names));
        System.out.println(namesList);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ArrayListFromArray");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "[Dakota, Madison, Brooklyn]";

        boolean passed = getResults(expect, output, "main()", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.8.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_listAdd">
                <div class="ac_question" id="csawesome2_2_listAdd_question">
                  <div class="para" id="listAdd-1-1">Can you add another item to the shopping list?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_listAdd_editor" data-question_label="" data-codelens="true">import java.util.*;

public class Shopping
{
    public static void main(String[] args)
    {
        ArrayList&lt;String&gt; shoppingList = new ArrayList&lt;String&gt;();
        System.out.println("Size: " + shoppingList.size());
        shoppingList.add("carrots");
        System.out.println(shoppingList);
        shoppingList.add("bread");
        System.out.println(shoppingList);
        shoppingList.add("chocolate");
        System.out.println(shoppingList);
        System.out.println("Size: " + shoppingList.size());
        ArrayList&lt;Integer&gt; quantities = new ArrayList&lt;Integer&gt;();
        quantities.add(2);
        quantities.add(4);
        System.out.println(quantities);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Shopping");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect =
                "Size: 0\n"
                    + "[carrots]\n"
                    + "[carrots, bread]\n"
                    + "[carrots, bread, chocolate]\n"
                    + "Size: 3\n"
                    + "[2, 4]";

        boolean passed = !output.equals(expect);

        passed = getResults(expect, output, "Changed code", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.8.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_divideby10">
                <div class="ac_question" id="csawesome2_2_divideby10_question">
                  <div class="para" id="divideby10-1-1">Set number to a different number and guess what number / and % will return. Which operator gives you a digit in number?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_divideby10_editor" data-question_label="" data-codelens="true">public class DivideBy10
{
    public static void main(String[] args)
    {
        int number = 154;
        System.out.println(number / 10);
        System.out.println(number % 10);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("DivideBy10");
    }

    @Test
    public void test1()
    {
        String origCode =
                "public class DivideBy10{public static void main(String[] args){int number ="
                    + " 154;System.out.println(number / 10);System.out.println(number % 10);}}";

        boolean changed = codeChanged(origCode);

        assertTrue(changed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.8.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-7-1-digits">
                <div class="ac_question" id="csawesome2_2_challenge-7-1-digits_question">
                  <div class="para" id="challenge-7-1-digits-1-1">Complete the challenge below to put the digits of a number in an ArrayList.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-7-1-digits_editor" data-question_label="" data-codelens="true">import java.util.*;

public class Digits
{
    /** A list of digits */
    private ArrayList&lt;Integer&gt; digitList;

    /** Constructs a list of digits from the given number */
    public Digits(int number)
    {
        // initialize digitList to an empty ArrayList of Integers

        // Use a while loop to add each digit in number to digitList

        // Use Collections.reverse(digitList); to reverse the digits

    }

    /** returns the string representation of the digits list */
    public String toString()
    {
        return digitList.toString();
    }

    public static void main(String[] args)
    {
        Digits d1 = new Digits(154);
        System.out.println(d1);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Digits");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "[1, 5, 4]";

        boolean passed = getResults(expect, output, "Digits(154)");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        Digits test = new Digits(123456);
        String output = test.toString();
        String expect = "[1, 2, 3, 4, 5, 6]";

        boolean passed = getResults(expect, output, "Digits(123456)");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.8.5.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qloopList" data-multipleanswers="false">
                <div class="para" id="qloopList-1-1">7-1-1: Which of the following is a reason to use an ArrayList instead of an array?</div>
                <li data-component="answer" id="csawesome2_2_qloopList_opt_a">
                  <div class="para" id="qloopList-2-1-1-1">An ArrayList will always use less memory than an array.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qloopList_opt_a">
                  <div class="para" id="qloopList-2-1-2-1">No, An ArrayList grows as needed and is typically bigger than the data put into it. If the underlying array in an ArrayList is full when adding in new data, it usually doubles in size.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qloopList_opt_b">
                  <div class="para" id="qloopList-2-2-1-1">An ArrayList can store objects, but arrays can only store primitive types.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qloopList_opt_b">
                  <div class="para" id="qloopList-2-2-2-1">No, you can have an array of objects.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qloopList_opt_c">
                  <div class="para" id="qloopList-2-3-1-1">An ArrayList has faster access to the last element than an array.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qloopList_opt_c">
                  <div class="para" id="qloopList-2-3-2-1">No, an ArrayList is implemented using an array so it has the same access time to any index as an array does.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qloopList_opt_d" data-correct="">
                  <div class="para" id="qloopList-2-4-1-1">An ArrayList resizes itself as necessary as items are added, but an array does not.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qloopList_opt_d">
                  <div class="para" id="qloopList-2-4-2-1">An ArrayList is really a dynamic array (one that can grow or shrink as needed).</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>traversing-arraylists-with-loops</id>
      <title>Traversing <code class="code-inline tex2jax_ignore">ArrayList</code>s with Loops</title>
      <question>
        <label>Exercise 4.9.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_listForEachLoop">
                <div class="ac_question" id="csawesome2_2_listForEachLoop_question">
                  <div class="para" id="listForEachLoop-1-1">What does the following code do? Guess before you run it. Then, add another enhanced for each loop that computes the product of all the elements in myList by multiplying them. Print out the product after the new loop.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_listForEachLoop_editor" data-question_label="" data-codelens="true">import java.util.*; // import all classes in this package.

public class Test1
{
    public static void main(String[] args)
    {
        ArrayList&lt;Integer&gt; myList = new ArrayList&lt;Integer&gt;();
        myList.add(50);
        myList.add(30);
        myList.add(20);
        int total = 0;
        for (Integer value : myList)
        {
            total += value;
        }
        System.out.println("Sum of all elements: " + total);

        // Write a for-each loop that computes the product
        // of all the elements in myList and print out the product.

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testExpected() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "100";
        boolean passed = output.contains(expect);
        getResults(expect, output, "Prints out sum", passed);
        assertTrue(passed);
    }

    @Test
    public void testProduct() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "30000";
        boolean passed = output.contains(expect);
        getResults(expect, output, "Prints out product", passed);
        assertTrue(passed);
    }

    @Test
    public void countForLoops()
    {
        String code = removeSpaces(getCode());
        int count = countOccurences(code, "for(Integer");
        boolean passed = count &gt;= 2;
        getResults("2", count + "", "Number of for each loops", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.9.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_listForLoop">
                <div class="ac_question" id="csawesome2_2_listForLoop_question">
                  <div class="para" id="listForLoop-1-1">The following code will throw an <code class="code-inline tex2jax_ignore">IndexOutOfBoundsException</code>. Can you fix it?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_listForLoop_editor" data-question_label="" data-codelens="true">import java.util.*;

public class TestForLoop
{
    public static void main(String[] args)
    {
        ArrayList&lt;Integer&gt; myList = new ArrayList&lt;Integer&gt;();
        myList.add(50);
        myList.add(30);
        myList.add(20);
        int total = 0;
        for (int i = 0; i &lt;= myList.size(); i++)
        {
            total = total + myList.get(i);
        }
        System.out.println(total);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "100";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void fixedCode()
    {
        boolean passed = checkCodeContains("fixed test in loop", "i &lt; myList.size()");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.9.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_listForEachLoopObj">
                <div class="ac_question" id="csawesome2_2_listForEachLoopObj_question">
                  <div class="para" id="listForEachLoopObj-1-1">The following code removes a name from a list. Set the found variable to the appropriate true or false values at line 13 and line 20 to make the code work.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_listForEachLoopObj_editor" data-question_label="" data-codelens="true">import java.util.*;
public class ListWorker
{
   private ArrayList&lt;String&gt; nameList;

   public ListWorker(ArrayList&lt;String&gt; nameList)
   {
       this.nameList = nameList;
   }

   public boolean removeName(String name)
   {
       boolean found =   // true or false?
       int index = 0;
       while (index &lt; nameList.size())
       {
           if (name.equals(nameList.get(index)))
           {
               nameList.remove(index);
               found =    // true or false?
           }
           else
           {
               index++;
           }
       }
       return found;
    }

    public static void main(String[] args)
    {
        ArrayList&lt;String&gt; myList = new ArrayList&lt;String&gt;();
        myList.add("Amun");
        myList.add("Ethan");
        myList.add("Donnie");
        myList.add("Ethan");
        ListWorker listWorker = new ListWorker(myList);
        System.out.println(listWorker.nameList);
        listWorker.removeName("Ethan");
        System.out.println("After removing Ethan: "
                  + listWorker.nameList);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "[Amun, Ethan, Donnie, Ethan]\nAfter removing Ethan: [Amun, Donnie]";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.9.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qloopList_1" data-multipleanswers="false"><div class="para" id="qloopList_1-1-1">7-3-4: Assume that <code class="code-inline tex2jax_ignore">nums</code> has been created as an <code class="code-inline tex2jax_ignore">ArrayList</code> object and it initially contains the following <code class="code-inline tex2jax_ignore">Integer</code> values [0, 0, 4, 2, 5, 0, 3, 0]. What will <code class="code-inline tex2jax_ignore">nums</code> contain as a result of executing <code class="code-inline tex2jax_ignore">numQuest</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">ArrayList&lt;Integer&gt; list1 = new ArrayList&lt;Integer&gt;();
private ArrayList&lt;Integer&gt; nums;

// precondition: nums.size() &gt; 0;
// nums contains Integer objects
public void numQuest()
{
   int k = 0;
   Integer zero = new Integer(0);
   while (k &lt; nums.size())
   {
      if (nums.get(k).equals(zero))
         nums.remove(k);
      k++;
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qloopList_1_opt_a" data-correct=""><div class="para" id="qloopList_1-2-1-1-1">[0, 4, 2, 5, 3]</div></li><li data-component="feedback" id="csawesome2_2_qloopList_1_opt_a"><div class="para" id="qloopList_1-2-1-2-1">Incrementing the index each time through the loop will miss when there are two zeros in a row.</div></li><li data-component="answer" id="csawesome2_2_qloopList_1_opt_b"><div class="para" id="qloopList_1-2-2-1-1">[3, 5, 2, 4, 0, 0, 0, 0]</div></li><li data-component="feedback" id="csawesome2_2_qloopList_1_opt_b"><div class="para" id="qloopList_1-2-2-2-1">This would be true if the code moved the zeros to the end, but that is not what it does.</div></li><li data-component="answer" id="csawesome2_2_qloopList_1_opt_c"><div class="para" id="qloopList_1-2-3-1-1">[0, 0, 0, 0, 4, 2, 5, 3]</div></li><li data-component="feedback" id="csawesome2_2_qloopList_1_opt_c"><div class="para" id="qloopList_1-2-3-2-1">This would be true if the code moved the zeros to the font, but that is not what it does.</div></li><li data-component="answer" id="csawesome2_2_qloopList_1_opt_d"><div class="para" id="qloopList_1-2-4-1-1">[4, 2, 5, 3]</div></li><li data-component="feedback" id="csawesome2_2_qloopList_1_opt_d"><div class="para" id="qloopList_1-2-4-2-1">This would be correct if k was only incremented when an item was not removed from the list.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.9.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_list_1">
                <div class="parsons_question parsons-text">
                  <div class="para" id="list_1-1-1">The following has the correct code for the method getScore plus at least one extra unneeded code statement.  This method will calculate and return the score for a word game.  The code should loop through all of the elements in wordList and if the length of the current word is 3 it should add one to the score, if the length of the word is 4 it should add 2 to the score, and if the length is greater than 4 it should add 3 to the score.  The method should return the score.  Drag the needed blocks from the left into the correct order on the right. Check your solution by clicking on the Check button.  You will be told if any of the blocks are in the wrong order or if you need to remove one or more blocks.  There is one extra block that is not needed in a correct solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public static int getScore(ArrayList&lt;String&gt; wordList)
{
---
  int score = 0;
  for (String word : wordList)
  {
---
    if (word.length() == 3)
---
    {
      score++;
    }
---
    else if (word.length() == 4)
    {
      score = score + 2;
    }
---
    else if (word.length() &gt; 4)
    {
      score = score + 3;
    }
---
  } // end for
---
  return score;
} // end method
---
if (word.length == 3)  #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.9.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_list_2">
                <div class="parsons_question parsons-text">
                  <div class="para" id="list_2-1-1">The following has the correct code for a method called insertInOrder plus at least one extra unneeded code statement. This method should add the passed name in alphabetic order to a private list field called nameList.  Drag the needed blocks from the left into the correct order on the right. Check your solution by clicking on the Check button.  You will be told if any of the blocks are in the wrong order or if you need to remove one or more blocks.  There is one extra block that is not needed in a correct solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public void insertInOrder(String name)
{
---
  int index = 0;
---
  while (index &lt; nameList.size() &amp;&amp;
         nameList.get(index).compareTo(name) &lt; 0)
  {
---
    index++;
---
  } // end while
---
  nameList.add(index,name);
---
} // end method
---
nameList.add(name);  #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.9.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_StudentList">
                <div class="ac_question" id="csawesome2_2_StudentList_question">
                  <div class="para" id="StudentList-1-1">Add a for each loop that prints out each student and then a new line.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_StudentList_editor" data-question_label="" data-codelens="true">import java.util.*;

public class StudentList
{
    // main method for testing
    public static void main(String[] args)
    {
        ArrayList&lt;Student&gt; roster = new ArrayList&lt;Student&gt;();
        roster.add(new Student("Skyler", "skyler@sky.com", 123456));
        roster.add(new Student("Ayanna", "ayanna@gmail.com", 789012));
        // Replace this with a for each loop that prints out each student on a
        // separate line
        System.out.println(roster);
    }
}

class Student
{
    private String name;
    private String email;
    private int id;

    public Student(String name, String email, int id)
    {
        this.name = name;
        this.email = email;
        this.id = id;
    }

    // toString() method
    public String toString()
    {
        return id + ": " + name + ", " + email;
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "123456: Skyler, skyler@sky.com\n789012: Ayanna, ayanna@gmail.com";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void loopCode()
    {
        boolean passed = checkCodeContains("for loop", "for");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.9.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ArrayListWordPair1">
                <div class="ac_question" id="csawesome2_2_ArrayListWordPair1_question">
                  <div class="para" id="ArrayListWordPair1-1-1">Create an Arraylist of WordPair objects.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ArrayListWordPair1_editor" data-question_label="" data-codelens="true">import java.util.*;

public class WordPairTest
{
    public static void main(String[] args)
    {
        // Create an ArrayList of WordPair objects called pairs

        pairs.add(new WordPair("hi", "there"));
        pairs.add(new WordPair("hi", "bye"));
        System.out.println(pairs);
    }
}

class WordPair
{
    private String word1;
    private String word2;

    public WordPair(String word1, String word2)
    {
        this.word1 = word1;
        this.word2 = word2;
    }

    public String getFirst()
    {
        return word1;
    }

    public String getSecond()
    {
        return word2;
    }

    public String toString()
    {
        return "(" + word1 + ", " + word2 + ")";
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("WordPairTest");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "[(hi, there), (hi, bye)]";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void hasArrayList()
    {
        boolean passed = checkCodeContains("ArrayList declaration", "ArrayList&lt;WordPair&gt;");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.9.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-7-3-WordPairs">
                <div class="ac_question" id="csawesome2_2_challenge-7-3-WordPairs_question">
                  <div class="para" id="challenge-7-3-WordPairs-1-1">FRQ WordPairs Challenge: Complete the constructor for <code class="code-inline tex2jax_ignore">WordPairsList</code> below which will add pairs of words from a given array to the <code class="code-inline tex2jax_ignore">ArrayList</code>. Then, complete the method <code class="code-inline tex2jax_ignore">numMatches()</code> as described below this exercise.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-7-3-WordPairs_editor" data-question_label="" data-codelens="true">import java.util.*;

public class WordPairsList
{
    private ArrayList&lt;WordPair&gt; allPairs;

    public WordPairsList(String[] words)
    {
        // WRITE YOUR CODE HERE
        // initialize allPairs to an empty ArrayList of WordPair objects

        // nested loops through the words array to add each pair to allPairs

    }

    public int numMatches()
    {
        // Write the code for the second part described below
        return 0;
    }

    public String toString()
    {
        return allPairs.toString();
    }

    public static void main(String[] args)
    {
        String[] words = {"Hi", "there", "Tyler", "Sam"};
        WordPairsList list = new WordPairsList(words);
        System.out.println(list);
        // For second part below, uncomment this test:
        // System.out.println("The number of matched pairs is: " +
        // list.numMatches());
    }
}

class WordPair
{
    private String word1;
    private String word2;

    public WordPair(String word1, String word2)
    {
        this.word1 = word1;
        this.word2 = word2;
    }

    public String getFirst()
    {
        return word1;
    }

    public String getSecond()
    {
        return word2;
    }

    public String toString()
    {
        return "(" + word1 + ", " + word2 + ")";
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("WordPairsList");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect =
                "[(Hi, there), (Hi, Tyler), (Hi, Sam), (there, Tyler), (there, Sam), (Tyler, Sam)]";

        boolean passed = output.contains(expect);

        String[] lines = output.split("\n");
        if (lines.length &gt; 1) output = lines[0];

        getResults(expect, output, "Part 1 - Add all word pairs from main()", passed);
        assertTrue(passed);
    }

    /* //remove test because instructions say to add a matched pair.
    @Test
    public void test2()
    {
        String output = getMethodOutput("main");
        String expect = "The number of matched pairs is: 0";

        boolean passed = output.contains(expect);
        String[] lines = output.split("\n");
        if (lines.length &gt; 1) output = lines[1];

        getResults(expect, output, "Part 2 - call to numMatches from main()", passed);
        assertTrue(passed);
    }
    */

    @Test
    public void test3()
    {
        String[] words = {"Hi", "Hi", "Test", "Test"};
        WordPairsList list = new WordPairsList(words);
        String output = list.toString();
        String expect = "[(Hi, Hi), (Hi, Test), (Hi, Test), (Hi, Test), (Hi, Test), (Test, Test)]";

        boolean passed =
                getResults(
                        expect,
                        output,
                        "Part 1 - Add all word pairs with {\"Hi\", \"Hi\", \"Test\", \"Test\"}");
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String[] words = {"Hi", "Hi", "Test", "Test"};
        WordPairsList list = new WordPairsList(words);
        String output = "The number of matched pairs is: " + list.numMatches();
        String expect = "The number of matched pairs is: 2";

        boolean passed =
                getResults(
                        expect,
                        output,
                        "Part 2 - numMatches() with {\"Hi\", \"Hi\", \"Test\", \"Test\"}");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-8-11</id>
      <title>ArrayList Algorithms</title>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_strng_mcalg_answr_0" data-multipleanswers="false">
                <div class="para" id="strng_mcalg_answr_0-1-1">7-4-1-2: What is returned by this method?</div>
                <li data-component="answer" id="csawesome2_2_strng_mcalg_answr_0_opt_a">
                  <div class="para" id="strng_mcalg_answr_0-2-1-1-1">String</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_strng_mcalg_answr_0_opt_a">
                  <div class="para" id="strng_mcalg_answr_0-2-1-2-1">Reread the method header, the datatype returned is to the left of the method name.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_strng_mcalg_answr_0_opt_b">
                  <div class="para" id="strng_mcalg_answr_0-2-2-1-1">ArrayList</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_strng_mcalg_answr_0_opt_b">
                  <div class="para" id="strng_mcalg_answr_0-2-2-2-1">Reread the method header, the datatype returned is to the left of the method name.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_strng_mcalg_answr_0_opt_c">
                  <div class="para" id="strng_mcalg_answr_0-2-3-1-1">Array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_strng_mcalg_answr_0_opt_c">
                  <div class="para" id="strng_mcalg_answr_0-2-3-2-1">Reread the method header, the datatype returned is to the left of the method name.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_strng_mcalg_answr_0_opt_d" data-correct="">
                  <div class="para" id="strng_mcalg_answr_0-2-4-1-1">void</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_strng_mcalg_answr_0_opt_d">
                  <div class="para" id="strng_mcalg_answr_0-2-4-2-1">Correct!</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_strng_mcalg_answr_0_5" data-multipleanswers="false">
                <div class="para" id="strng_mcalg_answr_0_5-1-1">7-4-1-3: This method accepts an <code class="code-inline tex2jax_ignore">ArrayList</code>, what is the datatype of the objects contained in this <code class="code-inline tex2jax_ignore">ArrayList</code>?</div>
                <li data-component="answer" id="csawesome2_2_strng_mcalg_answr_0_5_opt_a">
                  <div class="para" id="strng_mcalg_answr_0_5-2-1-1-1">void</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_strng_mcalg_answr_0_5_opt_a">
                  <div class="para" id="strng_mcalg_answr_0_5-2-1-2-1">you cannot have an ArrayList of type void</div>
                </li>
                <li data-component="answer" id="csawesome2_2_strng_mcalg_answr_0_5_opt_b" data-correct="">
                  <div class="para" id="strng_mcalg_answr_0_5-2-2-1-1">String</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_strng_mcalg_answr_0_5_opt_b">
                  <div class="para" id="strng_mcalg_answr_0_5-2-2-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_strng_mcalg_answr_0_5_opt_c">
                  <div class="para" id="strng_mcalg_answr_0_5-2-3-1-1">List</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_strng_mcalg_answr_0_5_opt_c">
                  <div class="para" id="strng_mcalg_answr_0_5-2-3-2-1">This is not an ArrayList of more Lists</div>
                </li>
                <li data-component="answer" id="csawesome2_2_strng_mcalg_answr_0_5_opt_d">
                  <div class="para" id="strng_mcalg_answr_0_5-2-4-1-1">int</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_strng_mcalg_answr_0_5_opt_d">
                  <div class="para" id="strng_mcalg_answr_0_5-2-4-2-1">This list does not contain integers.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_strng_mcalg_answr_1" data-multipleanswers="false">
                <div class="para" id="strng_mcalg_answr_1-1-1">7-4-1-4: There are many ways to use loops to solve this problem. If we were to use a while loop, what conditional could we write to make sure the loop does not go out of bounds? (Assume an integer index has already been initialized).</div>
                <li data-component="answer" id="csawesome2_2_strng_mcalg_answr_1_opt_a">
                  <div class="para" id="strng_mcalg_answr_1-2-1-1-1">(index != wordList.current())</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_strng_mcalg_answr_1_opt_a">
                  <div class="para" id="strng_mcalg_answr_1-2-1-2-1">the .current() method does not exist</div>
                </li>
                <li data-component="answer" id="csawesome2_2_strng_mcalg_answr_1_opt_b">
                  <div class="para" id="strng_mcalg_answr_1-2-2-1-1">(int index = wordList.size() - 1; index &gt;= 0; index--)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_strng_mcalg_answr_1_opt_b">
                  <div class="para" id="strng_mcalg_answr_1-2-2-2-1">this form of range control does not work with while loops</div>
                </li>
                <li data-component="answer" id="csawesome2_2_strng_mcalg_answr_1_opt_c" data-correct="">
                  <div class="para" id="strng_mcalg_answr_1-2-3-1-1">(index &lt; wordList.size())</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_strng_mcalg_answr_1_opt_c">
                  <div class="para" id="strng_mcalg_answr_1-2-3-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_strng_mcalg_answr_1_opt_d">
                  <div class="para" id="strng_mcalg_answr_1-2-4-1-1">(wordList(index) != wordList.size())</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_strng_mcalg_answr_1_opt_d">
                  <div class="para" id="strng_mcalg_answr_1-2-4-2-1">this does not accurately update the list as you iterate through wordList</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_strng_mcalg_answr_2" data-multipleanswers="false">
                <div class="para" id="strng_mcalg_answr_2-1-1">7-4-1-5: You can also use a for loop to solve this problem instead of a while loop. what conditional could we write to make sure the loop does not go out of bounds?</div>
                <li data-component="answer" id="csawesome2_2_strng_mcalg_answr_2_opt_a">
                  <div class="para" id="strng_mcalg_answr_2-2-1-1-1">(int i = wordList.size() - 1; i != wordList.size(); i--)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_strng_mcalg_answr_2_opt_a">
                  <div class="para" id="strng_mcalg_answr_2-2-1-2-1">this will lead to an infinite loop</div>
                </li>
                <li data-component="answer" id="csawesome2_2_strng_mcalg_answr_2_opt_b" data-correct="">
                  <div class="para" id="strng_mcalg_answr_2-2-2-1-1">(int i = wordList.size() - 1; i &gt;= 0; i--)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_strng_mcalg_answr_2_opt_b">
                  <div class="para" id="strng_mcalg_answr_2-2-2-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_strng_mcalg_answr_2_opt_c">
                  <div class="para" id="strng_mcalg_answr_2-2-3-1-1">(int i = wordList.size(); i &gt;= 0; i--)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_strng_mcalg_answr_2_opt_c">
                  <div class="para" id="strng_mcalg_answr_2-2-3-2-1">This loop starts out of bounds since there isn’t an element at wordList.size().</div>
                </li>
                <li data-component="answer" id="csawesome2_2_strng_mcalg_answr_2_opt_d">
                  <div class="para" id="strng_mcalg_answr_2-2-4-1-1">(int i = wordList.size() - 1; i &gt; 0; i--)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_strng_mcalg_answr_2_opt_d">
                  <div class="para" id="strng_mcalg_answr_2-2-4-2-1">This loop doesn’t iterate all the way through the wordList. It misses the 0th element.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_strng_mcalg_answr_3" data-multipleanswers="false">
                <div class="para" id="strng_mcalg_answr_3-1-1">7-4-1-6: How would you access each element in wordList assuming you already have an integer index properly initialized.</div>
                <li data-component="answer" id="csawesome2_2_strng_mcalg_answr_3_opt_a" data-correct="">
                  <div class="para" id="strng_mcalg_answr_3-2-1-1-1">wordList.get(index)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_strng_mcalg_answr_3_opt_a">
                  <div class="para" id="strng_mcalg_answr_3-2-1-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_strng_mcalg_answr_3_opt_b">
                  <div class="para" id="strng_mcalg_answr_3-2-2-1-1">wordList[index]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_strng_mcalg_answr_3_opt_b">
                  <div class="para" id="strng_mcalg_answr_3-2-2-2-1">This accessor method doesn’t work for arrayLists.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_strng_mcalg_answr_3_opt_c">
                  <div class="para" id="strng_mcalg_answr_3-2-3-1-1">wordList(index)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_strng_mcalg_answr_3_opt_c">
                  <div class="para" id="strng_mcalg_answr_3-2-3-2-1">This accessor method doesn’t work for arrayLists.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_strng_mcalg_answr_3_opt_d">
                  <div class="para" id="strng_mcalg_answr_3-2-4-1-1">wordList.at(index)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_strng_mcalg_answr_3_opt_d">
                  <div class="para" id="strng_mcalg_answr_3-2-4-2-1">This accessor method doesn’t work for arrayLists.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_strng_mcalg_answr_4" data-multipleanswers="false">
                <div class="para" id="strng_mcalg_answr_4-1-1">7-4-1-7: How would you check that a string <code class="code-inline tex2jax_ignore">word</code> is equal to a different string called <code class="code-inline tex2jax_ignore">other</code>?</div>
                <li data-component="answer" id="csawesome2_2_strng_mcalg_answr_4_opt_a">
                  <div class="para" id="strng_mcalg_answr_4-2-1-1-1">!(word != other)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_strng_mcalg_answr_4_opt_a">
                  <div class="para" id="strng_mcalg_answr_4-2-1-2-1">This checks to make sure that word does not equal a different space in memory that other.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_strng_mcalg_answr_4_opt_b">
                  <div class="para" id="strng_mcalg_answr_4-2-2-1-1">word.size() == other.size()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_strng_mcalg_answr_4_opt_b">
                  <div class="para" id="strng_mcalg_answr_4-2-2-2-1">This only checks the size of the strings, it does not check for equality</div>
                </li>
                <li data-component="answer" id="csawesome2_2_strng_mcalg_answr_4_opt_c">
                  <div class="para" id="strng_mcalg_answr_4-2-3-1-1">word == other</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_strng_mcalg_answr_4_opt_c">
                  <div class="para" id="strng_mcalg_answr_4-2-3-2-1">This checks the actual addresses in memory of the strings, not their contents.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_strng_mcalg_answr_4_opt_d" data-correct="">
                  <div class="para" id="strng_mcalg_answr_4-2-4-1-1">word.equals(other)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_strng_mcalg_answr_4_opt_d">
                  <div class="para" id="strng_mcalg_answr_4-2-4-2-1">Correct!</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_StringScrambleB1">
                <div class="parsons_question parsons-text">
                  <div class="para" id="StringScrambleB1-1-1">The method test below contains the correct code for one solution to this problem, but it is mixed up.  Drag the needed code from the left to the right and put them in order with the correct indention so that the code would work correctly.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public static void test(List&lt;String&gt; wordList)
{
---
  int i = 0;
  while (i &lt; wordList.size())
  {
---
     String current = wordList.get(i);
     String scrambled = scrambleWord(current);
---
     if (scrambled.equals(current))
---
        wordList.remove(i);
---
     else
     {
---
        wordList.set(i,scrambled);
---
        i++;
---
     } // end else
---
  } // end while
---
} // end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_StringScrambleB2">
                <div class="parsons_question parsons-text">
                  <div class="para" id="StringScrambleB2-1-1">The method test below contains the correct code for another solution to this problem, but it is mixed up.  Drag the needed code from the left to the right and put them in order with the correct indention so that the code would work correctly.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public static void test(List&lt;String&gt; wordList)
{
---
   for (int i = wordList.size() - 1; i &gt;= 0; i--)
   {
---
      String word = wordList.get(i);
---
      String scrambled = scrambleWord(word);
---
      if (!scrambled.equals(word))
---
        wordList.set(i, scrambled);
---
      else
---
        wordList.remove(i);
---
   } // end for
---
} // end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.10.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_frqScrambleOrRemove">
                <div class="ac_question" id="csawesome2_2_frqScrambleOrRemove_question">
                  <div class="para" id="frqScrambleOrRemove-1-1">Write the method <code class="code-inline tex2jax_ignore">scrambleOrRemove</code> below. The main has code to test the result.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_frqScrambleOrRemove_editor" data-question_label="" data-codelens="true">import java.util.ArrayList;
import java.util.List;

public class ScrambledStrings
{

    /**
     * Scrambles a given word.
     *
     * @param word the word to be scrambled
     * @return the scrambled word (possibly equal to word) Precondition: word is
     *     either an empty string or contains only uppercase letters.
     *     Postcondition: the string returned was created from word as follows: -
     *     the word was scrambled, beginning at the first letter and continuing
     *     from left to right - two consecutive letters consisting of "A" followed
     *     by a letter that was not "A" were swapped - letters were swapped at most
     *     once
     */
    public static String scrambleWord(String word)
    {
        String scrambled = "";
        int i = 0;

        while (i &lt; word.length())
        {
            String letter1 = word.substring(i, i + 1);
            String letter2 = "";
            if (i &lt; word.length() - 1)
            {
                letter2 = word.substring(i + 1, i + 2);
            }
            if (letter1.equals("A")
                    &amp;&amp; !letter2.equals("A")
                    &amp;&amp; !letter2.equals(""))
            {
                scrambled += letter2 + letter1;
                i += 2;
            }
            else
            {
                scrambled += letter1;
                i += 1;
            }
        }
        return scrambled;
    }

    /********************** Part (b) *********************/

    /**
     * Modifies wordList by replacing each word with its scrambled version,
     * removing any words that are unchanged as a result of scrambling.
     *
     * @param wordList the list of words Precondition: wordList contains only
     *     non-null objects Postcondition: - all words unchanged by scrambling have
     *     been removed from wordList - each of the remaining words has been
     *     replaced by its scrambled version - the relative ordering of the entries
     *     in wordList is the same as it was before the method was called
     */
    public static void scrambleOrRemove(List&lt;String&gt; wordList) {}

    /********************** Test *********************/

    public static void main(String[] args)
    {

        System.out.println("\nTesting Part (b):\n");

        String[] words2 = {"TAN", "ABRACADABRA", "WHOA", "APPLE", "EGGS"};
        ArrayList&lt;String&gt; wordList = new ArrayList&lt;String&gt;();
        for (String word : words2) wordList.add(word);
        System.out.print(wordList);
        scrambleOrRemove(wordList);
        System.out.println(" ==&gt; " + wordList);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;

@SuppressWarnings("unchecked")
public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ScrambledStrings");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "[TNA, BARCADABARA, PAPLE]";
        boolean passed = output.contains(expect);
        passed = getResults(expect, output, "expected output from main", passed);
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        ArrayList&lt;String&gt; wordList =
                new ArrayList(Arrays.asList("TAN", "ABRACADABRA", "WHOA", "APPLE", "EGGS"));

        ArrayList&lt;String&gt; wordListExpect =
                new ArrayList&lt;String&gt;(Arrays.asList("TNA", "BARCADABARA", "PAPLE"));

        ScrambledStrings.scrambleOrRemove(wordList);

        boolean result = wordList.equals(wordListExpect);

        boolean passed =
                getResults(
                        "true",
                        "" + result,
                        "scrambleOrRemove works for ArrayList #1: TAN, ABRACADABRA, WHOA, APPLE,"
                            + " EGGS");

        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        ArrayList&lt;String&gt; wordList = new ArrayList(Arrays.asList("TESTING", "ONE", "TWO", "THREE"));

        ArrayList&lt;String&gt; wordListExpect = new ArrayList&lt;String&gt;(Arrays.asList());

        ScrambledStrings.scrambleOrRemove(wordList);

        boolean result = wordList.equals(wordListExpect);

        boolean passed =
                getResults(
                        "true",
                        "" + result,
                        "scrambleOrRemove works for ArrayList #2: TESTING, ONE, TWO, THREE");

        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_fr_climbA_1" data-multipleanswers="false">
                <div class="para" id="fr_climbA_1-1-1">7-4-2-1: How would you create a new object newClimb of the ClimbInfo class, with a peakName of Everest and climbTime of 600?</div>
                <li data-component="answer" id="csawesome2_2_fr_climbA_1_opt_a" data-correct="">
                  <div class="para" id="fr_climbA_1-2-1-1-1">ClimbInfo newClimb = new ClimbInfo("Everest", 600);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_climbA_1_opt_a">
                  <div class="para" id="fr_climbA_1-2-1-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_climbA_1_opt_b">
                  <div class="para" id="fr_climbA_1-2-2-1-1">new ClimbInfo("Everest", 600);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_climbA_1_opt_b">
                  <div class="para" id="fr_climbA_1-2-2-2-1">This answer is missing the instantiation of the variable newClimb. Try again!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_climbA_1_opt_c">
                  <div class="para" id="fr_climbA_1-2-3-1-1">ClimbInfo newClimb = new ClimbInfo();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_climbA_1_opt_c">
                  <div class="para" id="fr_climbA_1-2-3-2-1">The constructor of a ClimbInfo object requires two arguments. Try again!</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_fr_climbA_2" data-multipleanswers="false">
                <div class="para" id="fr_climbA_2-1-1">7-4-2-2: How do you append a new item, 7, to the end of a non-empty ArrayList&lt;Integer&gt; list?</div>
                <li data-component="answer" id="csawesome2_2_fr_climbA_2_opt_a">
                  <div class="para" id="fr_climbA_2-2-1-1-1">list.add(0, 7);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_climbA_2_opt_a">
                  <div class="para" id="fr_climbA_2-2-1-2-1">This would add 7 to the beginning of the list. Try again!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_climbA_2_opt_b" data-correct="">
                  <div class="para" id="fr_climbA_2-2-2-1-1">list.add(7);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_climbA_2_opt_b">
                  <div class="para" id="fr_climbA_2-2-2-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_climbA_2_opt_c">
                  <div class="para" id="fr_climbA_2-2-3-1-1">add(7);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_climbA_2_opt_c">
                  <div class="para" id="fr_climbA_2-2-3-2-1">You must reference the ArrayList list using a dot operator to use the add() method. Try again!</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.10.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ClimbClubA">
                <div class="ac_question" id="csawesome2_2_ClimbClubA_question">
                  <div class="para" id="ClimbClubA-1-1">Complete the method <code class="code-inline tex2jax_ignore">addClimb</code> in the <code class="code-inline tex2jax_ignore">ClimbingClub</code> class in the code below.  The code includes a <code class="code-inline tex2jax_ignore">main</code> method that will test the <code class="code-inline tex2jax_ignore">addClimb</code> method.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ClimbClubA_editor" data-question_label="" data-codelens="true">import java.util.ArrayList;
import java.util.List;

class ClimbInfo
{
    private String name;
    private int time;

    /**
     * Creates a ClimbInfo object with name peakName and time climbTime.
     *
     * @param peakName the name of the mountain peak
     * @param climbTime the number of minutes taken to complete the climb
     */
    public ClimbInfo(String peakName, int climbTime)
    {
        name = peakName;
        time = climbTime;
    }

    /**
     * @return the name of the mountain peak
     */
    public String getName()
    {
        return name;
    }

    /**
     * @return the number of minutes taken to complete the climb
     */
    public int getTime()
    {
        return time;
    }

    public String toString()
    {
        return "Peak name: " + name + " time: " + time;
    }
}

public class ClimbingClub
{
    /**
     * The list of climbs completed by members of the club. * Guaranteed not to be
     * null. Contains only non-null references.
     */
    private List&lt;ClimbInfo&gt; climbList;

    /** Creates a new ClimbingClub object. */
    public ClimbingClub()
    {
        climbList = new ArrayList&lt;ClimbInfo&gt;();
    }

    /**
     * Adds a new climb with name peakName and time climbTime to the end of the
     * list of climbs
     *
     * @param peakName the name of the mountain peak climbed
     * @param climbTime the number of minutes taken to complete the climb
     */
    public void addClimb(String peakName, int climbTime) {}

    public String toString()
    {
        String output = "";
        for (ClimbInfo info : climbList)
        {
            output = output + info.toString() + "\n";
        }
        return output;
    }

    public static void main(String[] args)
    {
        // test a
        ClimbingClub hikerClub = new ClimbingClub();
        hikerClub.addClimb("Monadnock", 274);
        hikerClub.addClimb("Whiteface", 301);
        hikerClub.addClimb("Algonquin", 225);
        hikerClub.addClimb("Monadnock", 344);
        System.out.print(hikerClub);
        System.out.println(
                "The order printed above should be Monadnock, Whiteface,"
                    + " Algonquin, Monadnock");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    public RunestoneTests()
    {
        super("ClimbingClub");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");

        String expect =
                "Peak name: Monadnock time: 274\n"
                    + "Peak name: Whiteface time: 301\n"
                    + "Peak name: Algonquin time: 225\n"
                    + "Peak name: Monadnock time: 344\n";

        expect =
                expect
                        + "The order printed above should be Monadnock, Whiteface, Algonquin,"
                        + " Monadnock\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        ClimbingClub hikerClub = new ClimbingClub();
        hikerClub.addClimb("Monadnock", 274);
        hikerClub.addClimb("Whiteface", 301);
        hikerClub.addClimb("Algonquin", 225);
        hikerClub.addClimb("Monadnock", 344);

        String output = hikerClub.toString();

        String expect =
                "Peak name: Monadnock time: 274\n"
                    + "Peak name: Whiteface time: 301\n"
                    + "Peak name: Algonquin time: 225\n"
                    + "Peak name: Monadnock time: 344\n";

        boolean result = (output.compareTo(expect) == 0);

        boolean passed =
                getResults(
                        "true",
                        "" + result,
                        "addClimb method works with arguments Monadnock: 274, Whiteface:301,"
                            + " Algonquin: 225, Monadnock: 344");

        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: dAbU9_Qn92I</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="dAbU9_Qn92I" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_fr_climbB_1" data-multipleanswers="false">
                <div class="para" id="fr_climbB_1-1-1">7-4-3-1: What type of loop should you use to find the first place that the new peakName is less than the current element’s peakName?</div>
                <li data-component="answer" id="csawesome2_2_fr_climbB_1_opt_a" data-correct="">
                  <div class="para" id="fr_climbB_1-2-1-1-1">while</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_climbB_1_opt_a">
                  <div class="para" id="fr_climbB_1-2-1-2-1">Correct! While loops are perfect when you don’t always need to loop through the whole list.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_climbB_1_opt_b">
                  <div class="para" id="fr_climbB_1-2-2-1-1">for</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_climbB_1_opt_b">
                  <div class="para" id="fr_climbB_1-2-2-2-1">Try again. For loops are typically used when it is necessary to access every element in a list.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_climbB_1_opt_c">
                  <div class="para" id="fr_climbB_1-2-3-1-1">for-each</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_climbB_1_opt_c">
                  <div class="para" id="fr_climbB_1-2-3-2-1">Try again. For each loops automatically loop through every element in a list, but this problem doesn’t require that.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_fr_climbB_2" data-multipleanswers="false">
                <div class="para" id="fr_climbB_2-1-1">7-4-3-2: What ArrayList method allows you to add a new element at a specific index in a list?</div>
                <li data-component="answer" id="csawesome2_2_fr_climbB_2_opt_a">
                  <div class="para" id="fr_climbB_2-2-1-1-1">add()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_climbB_2_opt_a">
                  <div class="para" id="fr_climbB_2-2-1-2-1">There are two versions of the add method for ArrayLists. Both require at least one argument.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_climbB_2_opt_b">
                  <div class="para" id="fr_climbB_2-2-2-1-1">add(ClimbInfo elmt)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_climbB_2_opt_b">
                  <div class="para" id="fr_climbB_2-2-2-2-1">This will add the element to the end of the list rather than at a specific index.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_climbB_2_opt_c" data-correct="">
                  <div class="para" id="fr_climbB_2-2-3-1-1">add(int i, ClimbInfo elmt)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_climbB_2_opt_c">
                  <div class="para" id="fr_climbB_2-2-3-2-1">Correct! This will add elmt at the ith index in your list.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_fr_climbB_3" data-multipleanswers="false"><div class="para" id="fr_climbB_3-1-1">7-4-3-3: What will be stored in value after running this code:</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String s1 = "Bee";
String s2 = "Kiwi";
boolean value = false;
if (s1.compareTo(s2) &gt; 0){
    boolean value = true;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_fr_climbB_3_opt_a"><div class="para" id="fr_climbB_3-2-1-1-1">true</div></li><li data-component="feedback" id="csawesome2_2_fr_climbB_3_opt_a"><div class="para" id="fr_climbB_3-2-1-2-1">s1 starts with "B", so it is less than s1, which starts with "K". This means compareTo would return a negative number, not a positive number.</div></li><li data-component="answer" id="csawesome2_2_fr_climbB_3_opt_b" data-correct=""><div class="para" id="fr_climbB_3-2-2-1-1">false</div></li><li data-component="feedback" id="csawesome2_2_fr_climbB_3_opt_b"><div class="para" id="fr_climbB_3-2-2-2-1">Correct! "Bee" is less than "Kiwi", so value would be false after running this code.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.10.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ClimbClubB">
                <div class="ac_question" id="csawesome2_2_ClimbClubB_question">
                  <div class="para" id="ClimbClubB-1-1">FRQ Climb Club B: complete the method addClimb below.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ClimbClubB_editor" data-question_label="" data-codelens="true">import java.util.ArrayList;
import java.util.List;

class ClimbInfo
{
    private String name;
    private int time;

    /**
     * Creates a ClimbInfo object with name peakName and time climbTime.
     *
     * @param peakName the name of the mountain peak
     * @param climbTime the number of minutes taken to complete the climb
     */
    public ClimbInfo(String peakName, int climbTime)
    {
        name = peakName;
        time = climbTime;
    }

    /**
     * @return the name of the mountain peak
     */
    public String getName()
    {
        return name;
    }

    /**
     * @return the number of minutes taken to complete the climb
     */
    public int getTime()
    {
        return time;
    }

    public String toString()
    {
        return "Peak name: " + name + " time: " + time;
    }
}

public class ClimbingClub
{
    /**
     * The list of climbs completed by members of the club. Guaranteed not to be
     * null. Contains only non-null references.
     */
    private List&lt;ClimbInfo&gt; climbList;

    /** Creates a new ClimbingClub object. */
    public ClimbingClub()
    {
        climbList = new ArrayList&lt;ClimbInfo&gt;();
    }

    /**
     * Adds a new climb with name peakName and time climbTime to the list of climbs
     * in order by name
     *
     * @param peakName the name of the mountain peak climbed
     * @param climbTime the number of minutes taken to complete the climb
     */
    public void addClimb(String peakName, int climbTime) {}

    public String toString()
    {
        String output = "";
        for (ClimbInfo info : climbList)
        {
            output = output + info.toString() + "\n";
        }
        return output;
    }

    public static void main(String[] args)
    {
        ClimbingClub hikerClub = new ClimbingClub();
        hikerClub.addClimb("Monadnock", 274);
        hikerClub.addClimb("Whiteface", 301);
        hikerClub.addClimb("Algonquin", 225);
        hikerClub.addClimb("Monadnock", 344);
        System.out.print(hikerClub);
        System.out.println(
                "The order printed above should be Algonquin, Monadnock,"
                    + " Monadnock, Whiteface");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    public RunestoneTests()
    {
        super("ClimbingClub");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");

        String expect1 =
                "The order printed above should be Algonquin, Monadnock, Monadnock, Whiteface";

        boolean passed = output.contains(expect1);

        getResults(expect1, output, "Expected output from main", passed);

        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        ClimbingClub hikerClub = new ClimbingClub();
        hikerClub.addClimb("Mount B", 200);
        hikerClub.addClimb("Mount C", 300);
        hikerClub.addClimb("Mount A", 225);

        String output = hikerClub.toString();

        String expect1 =
                "Peak name: Mount A time: 225\n"
                    + "Peak name: Mount B time: 200\n"
                    + "Peak name: Mount C time: 300";

        boolean passed = (getResults(expect1, output, "addClimb on new input with sorting works"));
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: Fye33yPQk-g</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="Fye33yPQk-g" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.10.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ClimbClubC">
                <div class="ac_question" id="csawesome2_2_ClimbClubC_question">
                  <div class="para" id="ClimbClubC-1-1">FRQ ClimbClub C: Try the code.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ClimbClubC_editor" data-question_label="" data-codelens="true">import java.util.ArrayList;
import java.util.List;

class ClimbInfo
{
    private String name;
    private int time;

    /**
     * Creates a ClimbInfo object with name peakName and time climbTime.
     *
     * @param peakName the name of the mountain peak
     * @param climbTime the number of minutes taken to complete the climb
     */
    public ClimbInfo(String peakName, int climbTime)
    {
        name = peakName;
        time = climbTime;
    }

    /**
     * @return the name of the mountain peak
     */
    public String getName()
    {
        return name;
    }

    /**
     * @return the number of minutes taken to complete the climb
     */
    public int getTime()
    {
        return time;
    }

    public String toString()
    {
        return "Peak name: " + name + " time: " + time;
    }
}

public class ClimbingClub
{
    /**
     * The list of climbs completed by members of the club. Guaranteed not to be
     * null. Contains only non-null references.
     */
    private List&lt;ClimbInfo&gt; climbList;

    /** Creates a new ClimbingClub object. */
    public ClimbingClub()
    {
        climbList = new ArrayList&lt;ClimbInfo&gt;();
    }

    /**
     * Adds a new climb with name peakName and time climbTime to the end of the
     * list of climbs
     *
     * @param peakName the name of the mountain peak climbed
     * @param climbTime the number of minutes taken to complete the climb
     */
    public void addClimbA(String peakName, int climbTime)
    {
        climbList.add(new ClimbInfo(peakName, climbTime));
    }

    /**
     * Adds a new climb with name peakName and time climbTime to the list of climbs
     * in order by name
     *
     * @param peakName the name of the mountain peak climbed
     * @param climbTime the number of minutes taken to complete the climb
     */
    public void addClimbB(String peakName, int climbTime)
    {
        // find the position for the new item
        int index = 0;
        while (index &lt; climbList.size()
                &amp;&amp; climbList.get(index).getName().compareTo(peakName) &lt;= 0)
                {
            index++;
        }
        climbList.add(index, new ClimbInfo(peakName, climbTime));
    }

    /**
     * @return the number of distinct names in the list of climbs
     */
    public int distinctPeakNames()
    {
        if (climbList.size() == 0)
        {
            return 0;
        }

        ClimbInfo currInfo = climbList.get(0);
        String prevName = currInfo.getName();
        String currName = null;
        int numNames = 1;
        for (int k = 1; k &lt; climbList.size(); k++)
        {
            currInfo = climbList.get(k);
            currName = currInfo.getName();
            if (prevName.compareTo(currName) != 0)
            {
                numNames++;
                prevName = currName;
            }
        }
        return numNames;
    }

    public String toString()
    {
        String output = "";
        for (ClimbInfo info : climbList)
        {
            output = output + info.toString() + "\n";
        }
        return output;
    }

    public static void main(String[] args)
    {
        ClimbingClub hikerClub = new ClimbingClub();
        hikerClub.addClimbA("Monadnock", 274);
        hikerClub.addClimbA("Whiteface", 301);
        hikerClub.addClimbA("Algonquin", 225);
        hikerClub.addClimbA("Monadnock", 344);
        System.out.print(hikerClub);
        System.out.println(
                "The order printed above should be Monadnock, Whiteface,"
                    + " Algonquin, Monadnock");
        System.out.println(
                "Distinct peaks is "
                        + hikerClub.distinctPeakNames()
                        + " and should be "
                        + 3);

        hikerClub = new ClimbingClub();
        hikerClub.addClimbB("Monadnock", 274);
        hikerClub.addClimbB("Whiteface", 301);
        hikerClub.addClimbB("Algonquin", 225);
        hikerClub.addClimbB("Monadnock", 344);
        System.out.print(hikerClub);
        System.out.println(
                "The order printed above should be Algonquin, Monadnock,"
                    + " Monadnock, Whiteface");
        System.out.println(
                "Distinct peaks is "
                        + hikerClub.distinctPeakNames()
                        + " and should be "
                        + 3);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ClimbingClub");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");

        String expect =
                "Peak name: Monadnock time: 274\n"
                    + "Peak name: Whiteface time: 301\n"
                    + "Peak name: Algonquin time: 225\n"
                    + "Peak name: Monadnock time: 344\n"
                    + "The order printed above should be Monadnock, Whiteface, Algonquin,"
                    + " Monadnock\n"
                    + "Distinct peaks is 4 and should be 3\n"
                    + "Peak name: Algonquin time: 225\n"
                    + "Peak name: Monadnock time: 274\n"
                    + "Peak name: Monadnock time: 344\n"
                    + "Peak name: Whiteface time: 301\n"
                    + "The order printed above should be Algonquin, Monadnock, Monadnock,"
                    + " Whiteface\n"
                    + "Distinct peaks is 3 and should be 3\n";

        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.10.4.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_frqccc_1" data-multipleanswers="false">
                <div class="para" id="frqccc_1-1-1">7-4-4-1: Does this implementation of the <code class="code-inline tex2jax_ignore">distinctPeakNames</code> method work as intended when the <code class="code-inline tex2jax_ignore">addClimb</code> method stores the <code class="code-inline tex2jax_ignore">ClimbInfo</code> objects in the order they were added as described in part (a)?</div>
                <li data-component="answer" id="csawesome2_2_frqccc_1_opt_a">
                  <div class="para" id="frqccc_1-2-1-1-1">yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frqccc_1_opt_a">
                  <div class="para" id="frqccc_1-2-1-2-1">Did you trace it to see what it would do?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frqccc_1_opt_b" data-correct="">
                  <div class="para" id="frqccc_1-2-2-1-1">no</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frqccc_1_opt_b">
                  <div class="para" id="frqccc_1-2-2-2-1">This code depends on the peakNames being in alphabetical order by peakName.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.10.4.2.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_frqccc_2" data-multipleanswers="false">
                <div class="para" id="frqccc_2-1-1">7-4-4-2: Does this implementation of the <code class="code-inline tex2jax_ignore">distinctPeakNames</code> method work as intended when the <code class="code-inline tex2jax_ignore">addClimb</code> method stores the <code class="code-inline tex2jax_ignore">ClimbInfo</code> objects in alphabetical order by name as described in part (b)?</div>
                <li data-component="answer" id="csawesome2_2_frqccc_2_opt_a" data-correct="">
                  <div class="para" id="frqccc_2-2-1-1-1">yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frqccc_2_opt_a">
                  <div class="para" id="frqccc_2-2-1-2-1">This code depends on the peakNames being in alphabetical order by peakName.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frqccc_2_opt_b">
                  <div class="para" id="frqccc_2-2-2-1-1">no</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frqccc_2_opt_b">
                  <div class="para" id="frqccc_2-2-2-2-1">Did you trace it to see what it would do?</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.10.5.1.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_fr_cookieA_1" data-multipleanswers="false">
                <div class="para" id="fr_cookieA_1-1-1">7-4-5-1: What type of loop is best for this problem?</div>
                <li data-component="answer" id="csawesome2_2_fr_cookieA_1_opt_a">
                  <div class="para" id="fr_cookieA_1-2-1-1-1">while</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_cookieA_1_opt_a">
                  <div class="para" id="fr_cookieA_1-2-1-2-1">While loops are better for problems where you are looping until a condition is true or false.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_cookieA_1_opt_b">
                  <div class="para" id="fr_cookieA_1-2-2-1-1">for</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_cookieA_1_opt_b">
                  <div class="para" id="fr_cookieA_1-2-2-2-1">This will work, but it is more concise to use a for-each loop.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_cookieA_1_opt_c" data-correct="">
                  <div class="para" id="fr_cookieA_1-2-3-1-1">for-each</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_cookieA_1_opt_c">
                  <div class="para" id="fr_cookieA_1-2-3-2-1">Correct! This is the most concise way to access every CookieOrder.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.10.5.1.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_fr_cookieA_2" data-multipleanswers="false">
                <div class="para" id="fr_cookieA_2-1-1">7-4-5-2: What will you return at the end of this method?</div>
                <li data-component="answer" id="csawesome2_2_fr_cookieA_2_opt_a">
                  <div class="para" id="fr_cookieA_2-2-1-1-1">The total number of cookie orders</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_cookieA_2_opt_a">
                  <div class="para" id="fr_cookieA_2-2-1-2-1">The number of cookie orders is the length of the orders List. We are going one step farther in counting boxes. Try again!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_cookieA_2_opt_b" data-correct="">
                  <div class="para" id="fr_cookieA_2-2-2-1-1">The total number of cookie boxes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_cookieA_2_opt_b">
                  <div class="para" id="fr_cookieA_2-2-2-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_cookieA_2_opt_c">
                  <div class="para" id="fr_cookieA_2-2-3-1-1">The total number of cookies</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_cookieA_2_opt_c">
                  <div class="para" id="fr_cookieA_2-2-3-2-1">We don’t know how many cookies are in each box. Try again!</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.10.5.1.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_fr_cookieA_3" data-multipleanswers="false"><div class="para" id="fr_cookieA_3-1-1">7-4-5-3: What is wrong with this code?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public int getTotalBoxes()
{
    for (CookieOrder co : this.orders)
    {
      int sum = sum + co.getNumBoxes();
    }
    return sum;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_fr_cookieA_3_opt_a" data-correct=""><div class="para" id="fr_cookieA_3-2-1-1-1">It does not count the total number of boxes because the sum variable’s scope is only inside the loop.</div></li><li data-component="feedback" id="csawesome2_2_fr_cookieA_3_opt_a"><div class="para" id="fr_cookieA_3-2-1-2-1">Correct! int sum must be initialized before the loop.</div></li><li data-component="answer" id="csawesome2_2_fr_cookieA_3_opt_b"><div class="para" id="fr_cookieA_3-2-2-1-1">It counts orders, not boxes</div></li><li data-component="feedback" id="csawesome2_2_fr_cookieA_3_opt_b"><div class="para" id="fr_cookieA_3-2-2-2-1">co.getNumBoxes returns the number of boxes for a CookieOrder.</div></li><li data-component="answer" id="csawesome2_2_fr_cookieA_3_opt_c"><div class="para" id="fr_cookieA_3-2-3-1-1">Nothing.</div></li><li data-component="feedback" id="csawesome2_2_fr_cookieA_3_opt_c"><div class="para" id="fr_cookieA_3-2-3-2-1">Take a closer look inside the loop.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.10.5.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_cookieOrderA">
                <div class="parsons_question parsons-text">
                  <div class="para" id="cookieOrderA-1-1">The method <code class="code-inline tex2jax_ignore">getTotalBoxes</code> below contains the correct code for one solution to this problem, but it is mixed up.  Drag the needed code from the left to the right and put them in order with the correct indention so that the code would work correctly.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public int getTotalBoxes()
{
---
   int sum = 0;
---
   for (CookieOrder co : this.orders)
   {
---
      sum += co.getNumBoxes();
---
   } // end for
---
   return sum;
---
} // end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.10.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_FRQCookieOrderA">
                <div class="ac_question" id="csawesome2_2_FRQCookieOrderA_question">
                  <div class="para" id="FRQCookieOrderA-1-1">FRQ Cookie Order Part A: Complete the method <code class="code-inline tex2jax_ignore">getTotalBoxes</code> below.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_FRQCookieOrderA_editor" data-question_label="" data-codelens="true">import java.util.ArrayList;
import java.util.List;

class CookieOrder
{
    private int numBoxes;
    private String variety;

    /** Constructs a new CookieOrder object */
    public CookieOrder(String variety, int numBoxes)
    {
        this.variety = variety;
        this.numBoxes = numBoxes;
    }

    /**
     * @return the variety of cookie being ordered
     */
    public String getVariety()
    {
        return this.variety;
    }

    /**
     * @return the number of boxes being ordered
     */
    public int getNumBoxes()
    {
        return this.numBoxes;
    }

    // There may be instance variables, constructors, and methods that are not
    // shown.
}

public class MasterOrder
{
    /** The list of all cookie orders */
    private List&lt;CookieOrder&gt; orders;

    /** Constructs a new MasterOrder object */
    public MasterOrder()
    {
        orders = new ArrayList&lt;CookieOrder&gt;();
    }

    /**
     * Adds theOrder to the master order.
     *
     * @param theOrder the cookie order to add to the master order
     */
    public void addOrder(CookieOrder theOrder)
    {
        orders.add(theOrder);
    }

    /**
     * @return the sum of the number of boxes of all of the cookie orders
     */
    public int getTotalBoxes()
    {
        // Complete this method
    }

    public static void main(String[] args)
    {
        boolean test1 = false;
        boolean test2 = false;

        MasterOrder order = new MasterOrder();

        if (order.getTotalBoxes() == 0)
        {
            test1 = true;
        }
        else
        {
            System.out.println(
                    "Oops! Looks like your code doesn't properly check to see if"
                        + " the master order is empty.\n");
        }
        order.addOrder(new CookieOrder("Raisin", 3));
        order.addOrder(new CookieOrder("Oatmeal", 8));

        if (order.getTotalBoxes() == 11)
        {
            test2 = true;
        }
        else
        {
            System.out.println(
                    "Oops! Looks like your code doesn't properly count the number"
                        + " of boxes in the master order.\n");
         }
        if (test1 &amp;&amp; test2)
        {
            System.out.println("Looks like your code works well!");
        }
        else
        {
            System.out.println("Make some changes to your code, please.");
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("MasterOrder");
    }

    @Test
    public void test0()
    {
        String output = getMethodOutput("main");
        String expected = "Looks like your code works well!";

        boolean passed = getResults(expected, output, "main()");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        MasterOrder order = new MasterOrder();
        int total = order.getTotalBoxes();

        boolean passed = getResults("0", "" + total, "Empty order");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        MasterOrder order = new MasterOrder();
        order.addOrder(new CookieOrder("Raisin", 4));
        order.addOrder(new CookieOrder("Oatmeal", 5));

        int total = order.getTotalBoxes();

        boolean passed =
                getResults("9", "" + total, "Test order of 4 boxes of Raisin and 5 Oatmeal");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.10.6.1.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_fr_cookieB_1" data-multipleanswers="false">
                <div class="para" id="fr_cookieB_1-1-1">7-4-6-1: What type of loop is best to check the variety of each cookie order in the list of orders?</div>
                <li data-component="answer" id="csawesome2_2_fr_cookieB_1_opt_a">
                  <div class="para" id="fr_cookieB_1-2-1-1-1">while</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_cookieB_1_opt_a">
                  <div class="para" id="fr_cookieB_1-2-1-2-1">While loops are better for problems where you are looping until a condition is true or false.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_cookieB_1_opt_b" data-correct="">
                  <div class="para" id="fr_cookieB_1-2-2-1-1">for</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_cookieB_1_opt_b">
                  <div class="para" id="fr_cookieB_1-2-2-2-1">Correct! A for loop will allow you to access every CookieOrder and change its contents.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_cookieB_1_opt_c">
                  <div class="para" id="fr_cookieB_1-2-3-1-1">for-each</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_cookieB_1_opt_c">
                  <div class="para" id="fr_cookieB_1-2-3-2-1">This will not work because you will be changing values by removing boxes.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.10.6.1.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_fr_cookieB_2" data-multipleanswers="false">
                <div class="para" id="fr_cookieB_2-1-1">7-4-6-2: How would you remove the third item from an ArrayList&lt;String&gt; list of size 6?</div>
                <li data-component="answer" id="csawesome2_2_fr_cookieB_2_opt_a">
                  <div class="para" id="fr_cookieB_2-2-1-1-1">remove(list[2]);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_cookieB_2_opt_a">
                  <div class="para" id="fr_cookieB_2-2-1-2-1">The remove method in the ArrayList class requires the object to call its function with a dot operator.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_cookieB_2_opt_b">
                  <div class="para" id="fr_cookieB_2-2-2-1-1">list.remove(list[2]);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_cookieB_2_opt_b">
                  <div class="para" id="fr_cookieB_2-2-2-2-1">The remove method in the ArrayList class requires an integer as its argument, not a String.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_cookieB_2_opt_c" data-correct="">
                  <div class="para" id="fr_cookieB_2-2-3-1-1">list.remove(2);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_cookieB_2_opt_c">
                  <div class="para" id="fr_cookieB_2-2-3-2-1">Correct! Use the dot operator with list and the index you want to remove as the argument.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.10.6.1.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_fr_cookieB_3" data-multipleanswers="false">
                <div class="para" id="fr_cookieB_3-1-1">7-4-6-3: How would you compare the values of two Strings str1 and str2?</div>
                <li data-component="answer" id="csawesome2_2_fr_cookieB_3_opt_a">
                  <div class="para" id="fr_cookieB_3-2-1-1-1">if (str1 == str2)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_cookieB_3_opt_a">
                  <div class="para" id="fr_cookieB_3-2-1-2-1">Strings cannot be compared with a double equals sign.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_cookieB_3_opt_b" data-correct="">
                  <div class="para" id="fr_cookieB_3-2-2-1-1">if (str1.equals(str2))</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_cookieB_3_opt_b">
                  <div class="para" id="fr_cookieB_3-2-2-2-1">Correct! the equals() method in the String class will compare two strings.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_cookieB_3_opt_c">
                  <div class="para" id="fr_cookieB_3-2-3-1-1">if (str1 = str2)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_cookieB_3_opt_c">
                  <div class="para" id="fr_cookieB_3-2-3-2-1">A single = should only be used for assigning values!</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.10.6.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_cookieOrderB">
                <div class="parsons_question parsons-text">
                  <div class="para" id="cookieOrderB-1-1">The method <code class="code-inline tex2jax_ignore">removeVariety</code> below contains the correct code for one solution to this problem, but it is mixed up.  Drag the needed code from the left to the right and put them in order with the correct indention so that the code would work correctly.  There may be extra blocks that are not needed in a correct solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">private int removeVariety(String cookieVar)
{
   int numBoxesRemoved = 0;
---
   for (int i = this.orders.size() - 1; i &gt;= 0; i--)
   {
---
   for (CookieOrder co : this.orders)
   {  #distractor
---
      CookieOrder thisOrder = this.orders.get(i);
---
      if(cookieVar.equals(thisOrder.getVariety()))
      {
---
      if(cookieVar == thisOrder.getVariety())
      {  #paired
---
         numBoxesRemoved += thisOrder.getNumBoxes();
         this.orders.remove(i);
---
      } // end if
---
   } // end for
---
   return numBoxesRemoved;
---
} // end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.10.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_FRQCookieOrderB">
                <div class="ac_question" id="csawesome2_2_FRQCookieOrderB_question">
                  <div class="para" id="FRQCookieOrderB-1-1">FRQ Cookie Order B: Complete the method <code class="code-inline tex2jax_ignore">removeVariety</code> below.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_FRQCookieOrderB_editor" data-question_label="" data-codelens="true">import java.util.ArrayList;
import java.util.List;

class CookieOrder
{
    private int numBoxes;
    private String variety;

    /** Constructs a new CookieOrder object */
    public CookieOrder(String variety, int numBoxes)
    {
        this.variety = variety;
        this.numBoxes = numBoxes;
    }

    /**
     * @return the variety of cookie being ordered
     */
    public String getVariety()
    {
        return this.variety;
    }

    /**
     * @return the number of boxes being ordered
     */
    public int getNumBoxes()
    {
        return this.numBoxes;
    }

    // There may be instance variables, constructors, and methods that are not
    // shown.
}

public class MasterOrder
{
    /** The list of all cookie orders */
    private List&lt;CookieOrder&gt; orders;

    /** Constructs a new MasterOrder object */
    public MasterOrder()
    {
        orders = new ArrayList&lt;CookieOrder&gt;();
    }

    /**
     * Adds theOrder to the master order.
     *
     * @param theOrder the cookie order to add to the master order
     */
    public void addOrder(CookieOrder theOrder)
    {
        orders.add(theOrder);
    }

    /**
     * @return the sum of the number of boxes of all of the cookie orders
     */
    public int getTotalBoxes()
    {
        int sum = 0;
        for (CookieOrder co : this.orders)
        {
            sum += co.getNumBoxes();
        }
        return sum;
    }

    public int removeVariety(String cookieVar)
    {
        // Complete this method
    }

    public static void main(String[] args)
    {
        boolean test1 = false;
        boolean test2 = false;

        MasterOrder order = new MasterOrder();
        order.addOrder(new CookieOrder("Raisin", 3));
        order.addOrder(new CookieOrder("Oatmeal", 8));
        order.addOrder(new CookieOrder("Sugar", 2));

        if (order.removeVariety("Raisin") == 3
                &amp;&amp; order.removeVariety("Sugar") == 2)
        {
             test1 = true;
        }
        else
        {
            System.out.println(
                    "Oops! Looks like your code doesn't return the correct value"
                        + " for cookie order varieties that exist.\n");
        }

        if (order.removeVariety("Chocolate Chip") == 0)
        {
             test2 = true;
        }
        else
        {
            System.out.println(
                    "Oops! Looks like your code doesn't return the correct value"
                        + " for cookie orders that don't exist in the master"
                        + " order.\n");
        }

        if (test1 &amp;&amp; test2)
        {
            System.out.println("Looks like your code works well!");
        }
        else
        {
            System.out.println("Make some changes to your code, please.");
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("MasterOrder");
    }

    @Test
    public void test0()
    {
        String output = getMethodOutput("main");
        String expected = "Looks like your code works well!";

        boolean passed = getResults(expected, output, "Running main() to check expected output");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        MasterOrder order = new MasterOrder();
        order.addOrder(new CookieOrder("Raisin", 3));
        order.addOrder(new CookieOrder("Oatmeal", 8));
        order.addOrder(new CookieOrder("Raisin", 4));
        order.addOrder(new CookieOrder("Oatmeal", 8));

        int total = order.removeVariety("Raisin");

        boolean passed =
                getResults(
                        "7",
                        "" + total,
                        "Remove Raisin from order: [[Raisin, 3], [Oatmeal, 8], [Raisin, 4],"
                            + " [Oatmeal,8]]");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        MasterOrder order = new MasterOrder();
        order.addOrder(new CookieOrder("Raisin", 6));
        order.addOrder(new CookieOrder("Oatmeal", 2));
        order.addOrder(new CookieOrder("Raisin", 5));
        order.addOrder(new CookieOrder("Oatmeal", 9));

        int total = order.removeVariety("Chocolate Chip");

        boolean passed =
                getResults(
                        "0",
                        "" + total,
                        "Remove Chocolate Chip from order: [[Raisin, 6], [Oatmeal, 2], [Raisin, 5],"
                            + " [Oatmeal, 9]]");
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        MasterOrder order = new MasterOrder();

        order.addOrder(new CookieOrder("Oatmeal", 3));
        order.addOrder(new CookieOrder("Raisin", 8));
        order.addOrder(new CookieOrder("Raisin", 4));
        order.addOrder(new CookieOrder("Oatmeal", 8));

        int total = order.removeVariety("Raisin");

        boolean passed =
                getResults(
                        "12",
                        "" + total,
                        "Remove Raisin from order: [[Oatmeal, 3], [Raisin, 8], [Raisin, 4],"
                            + " [Oatmeal,8]] (Did you make sure to remove the adjacent matches?)");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_fr_formatter_1" data-multipleanswers="false">
                <div class="para" id="fr_formatter_1-1-1">7-4-7-1: Which loop would be best for this problem?</div>
                <li data-component="answer" id="csawesome2_2_fr_formatter_1_opt_a">
                  <div class="para" id="fr_formatter_1-2-1-1-1">while</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_formatter_1_opt_a">
                  <div class="para" id="fr_formatter_1-2-1-2-1">A while loop is the best choice when you don’t know the number of times you need to loop.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_formatter_1_opt_b">
                  <div class="para" id="fr_formatter_1-2-2-1-1">for</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_formatter_1_opt_b">
                  <div class="para" id="fr_formatter_1-2-2-2-1">You could use a for loop, but there is a more concise option since you are not changing any values of wordList.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_formatter_1_opt_c" data-correct="">
                  <div class="para" id="fr_formatter_1-2-3-1-1">for-each</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_formatter_1_opt_c">
                  <div class="para" id="fr_formatter_1-2-3-2-1">Correct! A for-each loop is the most concise way to access every string in wordList to keep track of numLetters</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_fr_formatter_2" data-multipleanswers="false">
                <div class="para" id="fr_formatter_2-1-1">7-4-7-2: What is the correct way to access the length of a String str?</div>
                <li data-component="answer" id="csawesome2_2_fr_formatter_2_opt_a">
                  <div class="para" id="fr_formatter_2-2-1-1-1">str.size()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_formatter_2_opt_a">
                  <div class="para" id="fr_formatter_2-2-1-2-1">.size() is not the correct method call to find the length of a string. .size() is used with ArrayLists. Try again!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_formatter_2_opt_b" data-correct="">
                  <div class="para" id="fr_formatter_2-2-2-1-1">str.length()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_formatter_2_opt_b">
                  <div class="para" id="fr_formatter_2-2-2-2-1">Correct! str.length() will return the length of String str.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_formatter_2_opt_c">
                  <div class="para" id="fr_formatter_2-2-3-1-1">str.length</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_formatter_2_opt_c">
                  <div class="para" id="fr_formatter_2-2-3-2-1">Almost! length() is a method call, so parentheses are required.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.10.7.3.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_stringFormatterA">
                <div class="parsons_question parsons-text">
                  <div class="para" id="stringFormatterA-1-1">The following has the correct code to solve this problem, but also contains extra code that isn’t needed in a correct solution.  Drag the needed blocks from the left into the correct order on the right and indent them as well. Check your solution by clicking on the Check button.  You will be told if any of the blocks are in the wrong or are in the wrong order.  You will also be told if the indention is wrong.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public static int totalLetters(List&lt;String&gt; wordList)
{
---
   int numLetters = 0;
---
   for (String s : wordList)
---
   for (String s in wordList)  #paired
---
      numLetters = numLetters + s.length();
---
      numLetters = numLetters + wordList.length();  #paired
---
   return numLetters;
---
   return numletters;  #paired
---
} //end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.10.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcfrsTotalLetters">
                <div class="ac_question" id="csawesome2_2_lcfrsTotalLetters_question">
                  <div class="para" id="lcfrsTotalLetters-1-1">Finish writing the <code class="code-inline tex2jax_ignore">totalLetters</code> method below so that it returns the number of letters for all the strings in <code class="code-inline tex2jax_ignore">wordList</code>.  The <code class="code-inline tex2jax_ignore">main</code> method below will test your code to check that you solved it correctly.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcfrsTotalLetters_editor" data-question_label="" data-codelens="true">import java.util.*;

public class StringFormatter
{
    /**
     * Returns the total number of letters in wordList. Precondition: wordList
     * contains at least two words, consisting of letters only.
     */
    public static int totalLetters(List&lt;String&gt; wordList) {}

    public static void main(String[] args)
    {
        List&lt;String&gt; myWords = new ArrayList&lt;String&gt;();
        myWords.add("A");
        myWords.add("frog");
        myWords.add("is");
        System.out.println("Should print 7 and prints: " + totalLetters(myWords));

        List&lt;String&gt; words2 = new ArrayList&lt;String&gt;();
        words2.add("Hi");
        words2.add("Bye");
        System.out.println("Should print 5 and prints: " + totalLetters(words2));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.util.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("StringFormatter");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Should print 7 and prints: 7\n" + "Should print 5 and prints: 5\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        List&lt;String&gt; myWords = new ArrayList&lt;String&gt;();
        myWords.add("A");
        myWords.add("dog");
        myWords.add("is");

        String output = String.valueOf(StringFormatter.totalLetters(myWords));
        String expect = "6";

        boolean passed = getResults(expect, output, "totalLetters method test on A, dog, is");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_fr_formatterb_1" data-multipleanswers="false">
                <div class="para" id="fr_formatterb_1-1-1">7-4-8-1: How do you access the number of items in an ArrayList&lt;String&gt; called list?</div>
                <li data-component="answer" id="csawesome2_2_fr_formatterb_1_opt_a">
                  <div class="para" id="fr_formatterb_1-2-1-1-1">list.length()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_formatterb_1_opt_a">
                  <div class="para" id="fr_formatterb_1-2-1-2-1">.length() is used with Arrays to return the number of items. Try again!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_formatterb_1_opt_b">
                  <div class="para" id="fr_formatterb_1-2-2-1-1">list.size</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_formatterb_1_opt_b">
                  <div class="para" id="fr_formatterb_1-2-2-2-1">.size is a method call, so parentheses are required.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_formatterb_1_opt_c" data-correct="">
                  <div class="para" id="fr_formatterb_1-2-3-1-1">list.size()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_formatterb_1_opt_c">
                  <div class="para" id="fr_formatterb_1-2-3-2-1">Correct! ArrayLists use .size() to return the number of items in a list.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_fr_formatterb_2" data-multipleanswers="false">
                <div class="para" id="fr_formatterb_2-1-1">7-4-8-2: True or False: A loop is required to correctly solve this problem.</div>
                <li data-component="answer" id="csawesome2_2_fr_formatterb_2_opt_a">
                  <div class="para" id="fr_formatterb_2-2-1-1-1">True</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_formatterb_2_opt_a">
                  <div class="para" id="fr_formatterb_2-2-1-2-1">Incorrect. You do not need to access any of the individual items in wordList.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_fr_formatterb_2_opt_b" data-correct="">
                  <div class="para" id="fr_formatterb_2-2-2-1-1">False</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_fr_formatterb_2_opt_b">
                  <div class="para" id="fr_formatterb_2-2-2-2-1">Correct! All you need is the size of wordList, which you can find without a loop.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.10.8.3.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_stringFormatterB">
                <div class="parsons_question parsons-text">
                  <div class="para" id="stringFormatterB-1-1">The following has the correct code to solve this problem, but also contains extra code that isn’t needed in a correct solution.  Drag the needed blocks from the left into the correct order on the right and indent them as well. Check your solution by clicking on the Check button.  You will be told if any of the blocks are in the wrong or are in the wrong order.  You will also be told if the indention is wrong.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public static int basicGapWidth(List&lt;String&gt; wordList,
                                int formattedLen)
---
{
---
   int numSpaces = formattedLen - totalLetters(wordList);
   int numGaps = wordList.size() - 1;
---
   int numSpaces = formattedLen + totalLetters(wordList); 
   int numGaps = wordList.length - 1; #paired
---
   return numSpaces / numGaps;
---
} //end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.10.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcfrsbasicGapWidth">
                <div class="ac_question" id="csawesome2_2_lcfrsbasicGapWidth_question">
                  <div class="para" id="lcfrsbasicGapWidth-1-1">Finish writing the <code class="code-inline tex2jax_ignore">basicGapWidth</code> method below so that it returns the size that the gap should be.  The <code class="code-inline tex2jax_ignore">main</code> method below will test your code to check that you solved it correctly.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcfrsbasicGapWidth_editor" data-question_label="" data-codelens="true">import java.util.*;

public class StringFormatter
{
    /**
     * Returns the basic gap width when wordList is used to produce a formatted
     * string of formattedLen characters. Precondition: wordList contains at least
     * two words, consisting of letters only. formattedLen is large enough for all
     * the words and gaps.
     */
    public static int basicGapWidth(List&lt;String&gt; wordList, int formattedLen) {}

    public static int totalLetters(List&lt;String&gt; wordList)
    {
        int numLetters = 0;
        for (String s : wordList)
        {
            numLetters = numLetters + s.length();
        }
        return numLetters;
    }

    public static void main(String[] args)
    {
        List&lt;String&gt; wordList = new ArrayList&lt;String&gt;();
        wordList.add("AP");
        wordList.add("COMP");
        wordList.add("SCI");
        wordList.add("ROCKS");
        System.out.println(
                "Should print 2 and prints: " + basicGapWidth(wordList, 20));

        List&lt;String&gt; words2 = new ArrayList&lt;String&gt;();
        words2.add("GREEN");
        words2.add("EGGS");
        words2.add("AND");
        words2.add("HAM");
        System.out.println(
                "Should print 1 and prints: " + basicGapWidth(words2, 20));

        List&lt;String&gt; words3 = new ArrayList&lt;String&gt;();
        words3.add("BEACH");
        words3.add("BALL");
        System.out.println(
                "Should print 11 and prints: " + basicGapWidth(words3, 20));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.util.*;

public class RunestoneTests extends CodeTestHelper
{

    public RunestoneTests()
    {
        super("StringFormatter");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "Should print 2 and prints: 2\n"
                        + "Should print 1 and prints: 1\n"
                        + "Should print 11 and prints: 11\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        List&lt;String&gt; wordList = new ArrayList&lt;String&gt;();
        wordList.add("AP");
        wordList.add("COMP");
        wordList.add("SCI");
        wordList.add("ROCKS");

        String output = String.valueOf(StringFormatter.basicGapWidth(wordList, 20));
        String expect = "2";

        boolean passed = getResults(expect, output, "basicGapWidth method test 01");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        List&lt;String&gt; words2 = new ArrayList&lt;String&gt;();
        words2.add("GREEN");
        words2.add("EGGS");
        words2.add("AND");
        words2.add("HAM");

        String output = String.valueOf(StringFormatter.basicGapWidth(words2, 20));
        String expect = "1";

        boolean passed = getResults(expect, output, "basicGapWidth method test 02");
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        List&lt;String&gt; words3 = new ArrayList&lt;String&gt;();
        words3.add("SOCCER");
        words3.add("BALL");

        String output = String.valueOf(StringFormatter.basicGapWidth(words3, 20));
        String expect = "10";

        boolean passed = getResults(expect, output, "basicGapWidth method test on SOCCER, BALL");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.10.9.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_delim_find_parts_ca">
                <span data-question="">
                  <div class="para" id="delim_find_parts_ca-1-1">Click on the part of the sentences below with the type of thing passed to the method getDelimitersList and the type it returns.</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="delim_find_parts_ca-2-1">Variable declarations start with a type and then a name.</div>
                </span>
                <pre><span data-incorrect="">A string</span> <span data-incorrect="">containing text and possibly delimiters has been split into *tokens* and stored in Test2</span> <span data-correct="">String[] tokens</span>.
<span data-incorrect="">Each token is either an open delimiter, a close delimiter, or a substring that is not a delimiter</span>.
<span data-incorrect="">You will write the method</span><span data-incorrect="">getDelimitersList</span>, <span data-incorrect="">which returns an</span> <span data-correct="">ArrayList</span><span data-incorrect="">containing all the open and close delimiters found in tokens in their original order.</span>
</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.10.9.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_delim_cu_mc_1" data-multipleanswers="false">
                <div class="para" id="delim_cu_mc_1-1-1">7-4-9-2: What type is tokens?</div>
                <li data-component="answer" id="csawesome2_2_delim_cu_mc_1_opt_a" data-correct="">
                  <div class="para" id="delim_cu_mc_1-2-1-1-1">array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_cu_mc_1_opt_a">
                  <div class="para" id="delim_cu_mc_1-2-1-2-1">tokens is an array of Strings</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_cu_mc_1_opt_b">
                  <div class="para" id="delim_cu_mc_1-2-2-1-1">List</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_cu_mc_1_opt_b">
                  <div class="para" id="delim_cu_mc_1-2-2-2-1">Check again</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_cu_mc_1_opt_c">
                  <div class="para" id="delim_cu_mc_1-2-3-1-1">String</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_cu_mc_1_opt_c">
                  <div class="para" id="delim_cu_mc_1-2-3-2-1">Check again</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_cu_mc_1_opt_d">
                  <div class="para" id="delim_cu_mc_1-2-4-1-1">ArrayList</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_cu_mc_1_opt_d">
                  <div class="para" id="delim_cu_mc_1-2-4-2-1">Check again</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.10.9.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_delim_cu_mc_2" data-multipleanswers="false">
                <div class="para" id="delim_cu_mc_2-1-1">7-4-9-3: What type of thing is in tokens?</div>
                <li data-component="answer" id="csawesome2_2_delim_cu_mc_2_opt_a">
                  <div class="para" id="delim_cu_mc_2-2-1-1-1">int</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_cu_mc_2_opt_a">
                  <div class="para" id="delim_cu_mc_2-2-1-2-1">Check again.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_cu_mc_2_opt_b" data-correct="">
                  <div class="para" id="delim_cu_mc_2-2-2-1-1">String</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_cu_mc_2_opt_b">
                  <div class="para" id="delim_cu_mc_2-2-2-2-1">Yes, tokens is an array of strings.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_cu_mc_2_opt_c">
                  <div class="para" id="delim_cu_mc_2-2-3-1-1">List</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_cu_mc_2_opt_c">
                  <div class="para" id="delim_cu_mc_2-2-3-2-1">Check again.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_cu_mc_2_opt_d">
                  <div class="para" id="delim_cu_mc_2-2-4-1-1">double</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_cu_mc_2_opt_d">
                  <div class="para" id="delim_cu_mc_2-2-4-2-1">Check again.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.10.9.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_delim_cu_mc_3" data-multipleanswers="false">
                <div class="para" id="delim_cu_mc_3-1-1">7-4-9-4: What type of thing does getDelimitersList return?</div>
                <li data-component="answer" id="csawesome2_2_delim_cu_mc_3_opt_a">
                  <div class="para" id="delim_cu_mc_3-2-1-1-1">int</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_cu_mc_3_opt_a">
                  <div class="para" id="delim_cu_mc_3-2-1-2-1">Check again.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_cu_mc_3_opt_b">
                  <div class="para" id="delim_cu_mc_3-2-2-1-1">String</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_cu_mc_3_opt_b">
                  <div class="para" id="delim_cu_mc_3-2-2-2-1">Check again.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_cu_mc_3_opt_c" data-correct="">
                  <div class="para" id="delim_cu_mc_3-2-3-1-1">ArrayList</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_cu_mc_3_opt_c">
                  <div class="para" id="delim_cu_mc_3-2-3-2-1">It returns a list of strings, which is actually an ArrayList.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_cu_mc_3_opt_d">
                  <div class="para" id="delim_cu_mc_3-2-4-1-1">double</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_cu_mc_3_opt_d">
                  <div class="para" id="delim_cu_mc_3-2-4-2-1">Check again.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_delim_solve_mc_1" data-multipleanswers="false">
                <div class="para" id="delim_solve_mc_1-1-1">7-4-9-6: Which Java expression correctly creates an empty ArrayList of type String called delList?</div>
                <li data-component="answer" id="csawesome2_2_delim_solve_mc_1_opt_a">
                  <div class="para" id="delim_solve_mc_1-2-1-1-1">delList = new ArrayList&lt;String&amp;gt;();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_solve_mc_1_opt_a">
                  <div class="para" id="delim_solve_mc_1-2-1-2-1">You must declare the type for delList</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_solve_mc_1_opt_b">
                  <div class="para" id="delim_solve_mc_1-2-2-1-1">ArrayList&lt;String&amp;gt; delList = new ArrayList&lt;String&amp;gt;;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_solve_mc_1_opt_b">
                  <div class="para" id="delim_solve_mc_1-2-2-2-1">You must include the () when creating a new object</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_solve_mc_1_opt_c">
                  <div class="para" id="delim_solve_mc_1-2-3-1-1">ArrayList&lt;String&amp;gt; delList = new List&lt;String&amp;gt;();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_solve_mc_1_opt_c">
                  <div class="para" id="delim_solve_mc_1-2-3-2-1">You must create an ArrayList using a concrete subclass like ArrayList</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_solve_mc_1_opt_d" data-correct="">
                  <div class="para" id="delim_solve_mc_1-2-4-1-1">ArrayList&lt;String&amp;gt; delList = new ArrayList&lt;String&amp;gt;();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_solve_mc_1_opt_d">
                  <div class="para" id="delim_solve_mc_1-2-4-2-1">The declared type must be the same or a parent class of the actual type.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_delim_solve_mc_2" data-multipleanswers="false">
                <div class="para" id="delim_solve_mc_2-1-1">7-4-9-7: Which loop would be best for this situation?</div>
                <li data-component="answer" id="csawesome2_2_delim_solve_mc_2_opt_a">
                  <div class="para" id="delim_solve_mc_2-2-1-1-1">while</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_solve_mc_2_opt_a">
                  <div class="para" id="delim_solve_mc_2-2-1-2-1">You can use a while loop, but it would make your code more error prone than another type of loop</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_solve_mc_2_opt_b">
                  <div class="para" id="delim_solve_mc_2-2-2-1-1">for</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_solve_mc_2_opt_b">
                  <div class="para" id="delim_solve_mc_2-2-2-2-1">You can use a for loop, but it would make your code more error prone than another type of loop</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_solve_mc_2_opt_c" data-correct="">
                  <div class="para" id="delim_solve_mc_2-2-3-1-1">for-each</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_solve_mc_2_opt_c">
                  <div class="para" id="delim_solve_mc_2-2-3-2-1">Since you need to loop through all the strings in the array tokens in order, a for-each loop would be best</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_solve_mc_2_opt_d">
                  <div class="para" id="delim_solve_mc_2-2-4-1-1">nested for loop</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_solve_mc_2_opt_d">
                  <div class="para" id="delim_solve_mc_2-2-4-2-1">There is no need for a nested loop in this situation</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_delim_solve_mc_3" data-multipleanswers="false">
                <div class="para" id="delim_solve_mc_3-1-1">7-4-9-8: Which code adds item to the end of the list called delList?</div>
                <li data-component="answer" id="csawesome2_2_delim_solve_mc_3_opt_a">
                  <div class="para" id="delim_solve_mc_3-2-1-1-1">delList.set(0,item);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_solve_mc_3_opt_a">
                  <div class="para" id="delim_solve_mc_3-2-1-2-1">This would change the value at index 0 to item.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_solve_mc_3_opt_b">
                  <div class="para" id="delim_solve_mc_3-2-2-1-1">delList.add(0,item);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_solve_mc_3_opt_b">
                  <div class="para" id="delim_solve_mc_3-2-2-2-1">This would add item at index 0 and move right any other items in the list</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_solve_mc_3_opt_c">
                  <div class="para" id="delim_solve_mc_3-2-3-1-1">delList.remove(item);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_solve_mc_3_opt_c">
                  <div class="para" id="delim_solve_mc_3-2-3-2-1">This would remove item from the list</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_solve_mc_3_opt_d" data-correct="">
                  <div class="para" id="delim_solve_mc_3-2-4-1-1">delList.add(item);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_solve_mc_3_opt_d">
                  <div class="para" id="delim_solve_mc_3-2-4-2-1">This adds item to the end of the list</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_delim_solve_mc_4" data-multipleanswers="false">
                <div class="para" id="delim_solve_mc_4-1-1">7-4-9-9: Which code correctly checks if token is equal to (has the same characters as) openDel or closeDel?</div>
                <li data-component="answer" id="csawesome2_2_delim_solve_mc_4_opt_a">
                  <div class="para" id="delim_solve_mc_4-2-1-1-1">if (token == openDel &amp;&amp; token == closeDel)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_solve_mc_4_opt_a">
                  <div class="para" id="delim_solve_mc_4-2-1-2-1">You should use .equals with strings and || for or</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_solve_mc_4_opt_b">
                  <div class="para" id="delim_solve_mc_4-2-2-1-1">if (token == openDel || token == closeDel)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_solve_mc_4_opt_b">
                  <div class="para" id="delim_solve_mc_4-2-2-2-1">You should use .equals with strings</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_solve_mc_4_opt_c">
                  <div class="para" id="delim_solve_mc_4-2-3-1-1">if (token.equals(openDel) &amp;&amp; token.equals(closeDel))</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_solve_mc_4_opt_c">
                  <div class="para" id="delim_solve_mc_4-2-3-2-1">You should use || for or not &amp;&amp;</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_solve_mc_4_opt_d" data-correct="">
                  <div class="para" id="delim_solve_mc_4-2-4-1-1">if (token.equals(openDel) || token.equals(closeDel))</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_solve_mc_4_opt_d">
                  <div class="para" id="delim_solve_mc_4-2-4-2-1">This returns true when openDel or closeDel have the same characters as token</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.10.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_frq2019Q3A-delim">
                <div class="ac_question" id="csawesome2_2_frq2019Q3A-delim_question">
                  <div class="para" id="frq2019Q3A-delim-1-1">Write the method getDelimitersList in the code below. The main method contains code to test your solution.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_frq2019Q3A-delim_editor" data-question_label="" data-codelens="true">import java.util.*;

public class Delimiters
{

    /** The open and close delimiters * */
    private String openDel;

    private String closeDel;

    /**
     * Constructs a Delimiters object were open is the open delimiter and close is
     * the close delimiter. Precondition: open and close are non-empty strings
     */
    public Delimiters(String open, String close)
    {
        openDel = open;
        closeDel = close;
    }

    /**
     * Returns an ArrayList of delimiters from the array tokens, as described in
     * part (a).
     */
    public ArrayList&lt;String&gt; getDelimitersList(String[] tokens)
    {
        /* to be implemented in part a */
    }

    public static void main(String[] args)
    {
        Delimiters d1 = new Delimiters("(", ")");
        String[] tokens = {"(", "x + y", ")", " * 5"};
        ArrayList&lt;String&gt; res1 = d1.getDelimitersList(tokens);
        System.out.println("It should print [(, )] and it prints" + res1);

        Delimiters d2 = new Delimiters("&lt;q&gt;", "&lt;/q&gt;");
        String[] tokens2 = {"&lt;q&gt;", "yy", "&lt;/q&gt;", "zz", "&lt;/q&gt;"};
        ArrayList&lt;String&gt; res2 = d2.getDelimitersList(tokens2);
        System.out.println(
                "It should print [&lt;q&gt;, &lt;/q&gt;, &lt;/q&gt;] and it prints " + res2);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.util.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testRunGetDelimitersList()
    {
        Delimiters d1 = new Delimiters("[", "]");
        String[] tokens = {"[", "[", "x", "]", "]", "+ 5"};
        ArrayList&lt;String&gt; res1 = d1.getDelimitersList(tokens);
        String[] answer = {"[", "[", "]", "]"};
        List&lt;String&gt; answerList = Arrays.asList(answer);
        boolean passed = res1.equals(answerList);
        getResults("true", passed + "", "getDelimitersList(\"{[[x]]+5})", passed);
        assertTrue(passed);
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "It should print [(, )] and it prints[(, )]\n"
                    + "It should print [&lt;q&gt;, &lt;/q&gt;, &lt;/q&gt;] and it prints [&lt;q&gt;, &lt;/q&gt;, &lt;/q&gt;]\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void checkCodeContains1()
    {
        // check accessor method getDelimitersList()
        boolean passed =
                checkCodeContains(
                        "correct getDelimitersList method header",
                        "ArrayList&lt;String&gt; getDelimitersList(String[]");
        assertTrue(passed);
    }

    @Test
    public void checkCodeContains2()
    {
        // check accessor method getDelimitersList() creates a new ArrayList&lt;String&gt;
        boolean passed =
                checkCodeContains(
                        "new ArrayList&lt;String&gt; declared in method", "= new ArrayList&lt;String&gt;()");
        assertTrue(passed);
    }

    @Test
    public void checkCodeContains3()
    {
        // check accessor method getDelimtersList() checks for open delimiters in generating
        // returned delimitaor ArrayList
        boolean passed = checkCodeContains("checks for open delimiters", ".equals(openDel)");
        assertTrue(passed);
    }

    @Test
    public void checkCodeContains4()
    {
        // check accessor method getDelimtersList() checks for close delimiters in generating
        // returned delimitaor ArrayList
        boolean passed = checkCodeContains("checks for closed delimiters", ".equals(closeDel)");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.10.10.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_delim_cub_mc_1" data-multipleanswers="false">
                <div class="para" id="delim_cub_mc_1-1-1">7-4-10-1: What type does isBalanced return?</div>
                <li data-component="answer" id="csawesome2_2_delim_cub_mc_1_opt_a">
                  <div class="para" id="delim_cub_mc_1-2-1-1-1">String</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_cub_mc_1_opt_a">
                  <div class="para" id="delim_cub_mc_1-2-1-2-1">What type are false and true?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_cub_mc_1_opt_b" data-correct="">
                  <div class="para" id="delim_cub_mc_1-2-2-1-1">boolean</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_cub_mc_1_opt_b">
                  <div class="para" id="delim_cub_mc_1-2-2-2-1">The values false and true are of type boolean.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_cub_mc_1_opt_c">
                  <div class="para" id="delim_cub_mc_1-2-3-1-1">int</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_cub_mc_1_opt_c">
                  <div class="para" id="delim_cub_mc_1-2-3-2-1">In some languages false and true are represented by integers, but not in Java.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_cub_mc_1_opt_d">
                  <div class="para" id="delim_cub_mc_1-2-4-1-1">ArrayList</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_cub_mc_1_opt_d">
                  <div class="para" id="delim_cub_mc_1-2-4-2-1">What type are false and true?</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.10.10.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_delim_cub_mc_2" data-multipleanswers="false">
                <div class="para" id="delim_cub_mc_2-1-1">7-4-10-2: What is the name of the variable the code will be looping through?</div>
                <li data-component="answer" id="csawesome2_2_delim_cub_mc_2_opt_a">
                  <div class="para" id="delim_cub_mc_2-2-1-1-1">openDel</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_cub_mc_2_opt_a">
                  <div class="para" id="delim_cub_mc_2-2-1-2-1">openDel holds the open delimiter</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_cub_mc_2_opt_b">
                  <div class="para" id="delim_cub_mc_2-2-2-1-1">closeDel</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_cub_mc_2_opt_b">
                  <div class="para" id="delim_cub_mc_2-2-2-2-1">closeDel holds the close delimiter</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_cub_mc_2_opt_c">
                  <div class="para" id="delim_cub_mc_2-2-3-1-1">Delimiters</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_cub_mc_2_opt_c">
                  <div class="para" id="delim_cub_mc_2-2-3-2-1">Delimiters is the class name</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_cub_mc_2_opt_d" data-correct="">
                  <div class="para" id="delim_cub_mc_2-2-4-1-1">delimiters</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_cub_mc_2_opt_d">
                  <div class="para" id="delim_cub_mc_2-2-4-2-1">delimiters is the variable which is passed to the isBalanced method</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_delim_solveb_mc_1" data-multipleanswers="false">
                <div class="para" id="delim_solveb_mc_1-1-1">7-4-10-4: Which loop would be best for this situation?</div>
                <li data-component="answer" id="csawesome2_2_delim_solveb_mc_1_opt_a">
                  <div class="para" id="delim_solveb_mc_1-2-1-1-1">while</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_solveb_mc_1_opt_a">
                  <div class="para" id="delim_solveb_mc_1-2-1-2-1">You can use a while loop, but it would make your code more error prone than another type of loop</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_solveb_mc_1_opt_b">
                  <div class="para" id="delim_solveb_mc_1-2-2-1-1">for</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_solveb_mc_1_opt_b">
                  <div class="para" id="delim_solveb_mc_1-2-2-2-1">You can use a for loop, but it would make your code more error prone than another type of loop</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_solveb_mc_1_opt_c" data-correct="">
                  <div class="para" id="delim_solveb_mc_1-2-3-1-1">for-each</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_solveb_mc_1_opt_c">
                  <div class="para" id="delim_solveb_mc_1-2-3-2-1">Since you need to loop through all the strings in the ArrayList in order, a for-each loop would be best</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_solveb_mc_1_opt_d">
                  <div class="para" id="delim_solveb_mc_1-2-4-1-1">nested for loop</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_solveb_mc_1_opt_d">
                  <div class="para" id="delim_solveb_mc_1-2-4-2-1">There is no need for a nested loop in this situation</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_delim_solveb_mc_2" data-multipleanswers="false">
                <div class="para" id="delim_solveb_mc_2-1-1">7-4-10-5: Which Java expression correctly tests if currString is equal to openDel?</div>
                <li data-component="answer" id="csawesome2_2_delim_solveb_mc_2_opt_a">
                  <div class="para" id="delim_solveb_mc_2-2-1-1-1">if (currString = openDel)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_solveb_mc_2_opt_a">
                  <div class="para" id="delim_solveb_mc_2-2-1-2-1">You must declare the type for delList</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_solveb_mc_2_opt_b">
                  <div class="para" id="delim_solveb_mc_2-2-2-1-1">if (currString == openDel)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_solveb_mc_2_opt_b">
                  <div class="para" id="delim_solveb_mc_2-2-2-2-1">You must include the () when creating a new object</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_solveb_mc_2_opt_c" data-correct="">
                  <div class="para" id="delim_solveb_mc_2-2-3-1-1">if (currString.equals(openDel))</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_solveb_mc_2_opt_c">
                  <div class="para" id="delim_solveb_mc_2-2-3-2-1">You must create an ArrayList using a concrete subclass like ArrayList</div>
                </li>
                <li data-component="answer" id="csawesome2_2_delim_solveb_mc_2_opt_d">
                  <div class="para" id="delim_solveb_mc_2-2-4-1-1">if (currString.equal(openDel))</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_delim_solveb_mc_2_opt_d">
                  <div class="para" id="delim_solveb_mc_2-2-4-2-1">The declared type must be the same or a parent class of the actual type.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.10.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_frq2019Q3B-delim">
                <div class="ac_question" id="csawesome2_2_frq2019Q3B-delim_question">
                  <div class="para" id="frq2019Q3B-delim-1-1">Write the method <code class="code-inline tex2jax_ignore">isBalanced</code> in the code below. The <code class="code-inline tex2jax_ignore">main</code> method contains code to test your solution.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_frq2019Q3B-delim_editor" data-question_label="" data-codelens="true">import java.util.*;

public class Delimiters
{

    /** The open and close delimiters * */
    private String openDel;

    private String closeDel;

    /**
     * Constructs a Delimiters object were open is the open delimiter and close is
     * the close delimiter. Precondition: open and close are non-empty strings
     */
    public Delimiters(String open, String close)
    {
        openDel = open;
        closeDel = close;
    }

    /**
     * Returns an ArrayList of delimiters from the array tokens, as described in
     * part (a).
     */
    public ArrayList&lt;String&gt; getDelimitersList(String[] tokens)
    {
        ArrayList&lt;String&gt; delList = new ArrayList&lt;String&gt;();

        for (String currString : tokens)
        {
            if (currString.equals(openDel) || currString.equals(closeDel))
            {
                delList.add(currString);
            }
        }
        return delList;
    }

    /**
     * Returns true if the delimiters are balanced and false otherwise, as
     * described in part (b). Precondition: delimiters contains only valid open and
     * close delimiters.
     */
    public boolean isBalanced(ArrayList&lt;String&gt; delimiters)
    {
        /* to be implemented in part (b) */
    }

    public static void main(String[] args)
    {
        Delimiters d1 = new Delimiters("&lt;sup&gt;", "&lt;/sup&gt;");
        String[] tokens =
        {
            "&lt;sup&gt;", "&lt;sup&gt;", "&lt;/sup&gt;", "&lt;sup&gt;", "&lt;/sup&gt;", "&lt;/sup&gt;"
        };
        ArrayList&lt;String&gt; delList1 = d1.getDelimitersList(tokens);
        boolean res1 = d1.isBalanced(delList1);
        System.out.println("It should print true and it prints " + res1);

        String[] tokens2 = {"&lt;sup&gt;", "&lt;/sup&gt;", "&lt;/sup&gt;", "&lt;sup&gt;"};
        ArrayList&lt;String&gt; delList2 = d1.getDelimitersList(tokens2);
        boolean res2 = d1.isBalanced(delList2);
        System.out.println("It should print false and it prints " + res2);

        String[] tokens3 = {"&lt;/sup&gt;"};
        ArrayList&lt;String&gt; delList3 = d1.getDelimitersList(tokens3);
        boolean res3 = d1.isBalanced(delList2);
        System.out.println("It should print false and it prints " + res3);

        String[] tokens4 = {"&lt;sup&gt;", "&lt;/sup&gt;", "&lt;/sup&gt;"};
        ArrayList&lt;String&gt; delList4 = d1.getDelimitersList(tokens4);
        boolean res4 = d1.isBalanced(delList2);
        System.out.println("It should print false and it prints " + res4);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.util.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Delimiters");
    }

    @Test
    public void test0()
    {
        String output = getMethodOutput("main");
        String expect =
                "It should print true and it prints true\n"
                    + "It should print false and it prints false\n"
                    + "It should print false and it prints false\n"
                    + "It should print false and it prints false\n";

        boolean passed =
                getResults(
                        expect,
                        output,
                        "Expected output from main: testing isBalanced on 4 sets of delimiters.");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        Delimiters d1 = new Delimiters("{", "}");

        String[] tokens = {"{", "{", "}", "{", "}", "}"};
        ArrayList&lt;String&gt; delList1 = d1.getDelimitersList(tokens);
        boolean res1 = d1.isBalanced(delList1);

        boolean passed =
                getResults(
                        "true",
                        "" + res1,
                        "isBalanced works on a balanced set of delimiters "
                                + Arrays.toString(tokens));

        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        Delimiters d1 = new Delimiters("{", "}");

        String[] tokens2 = {"{", "}", "}", "{"};
        ArrayList&lt;String&gt; delList2 = d1.getDelimitersList(tokens2);

        boolean res2 = d1.isBalanced(delList2);

        boolean passed =
                getResults(
                        "false",
                        "" + res2,
                        "isBalanced on a non-balanced set of delimiters "
                                + Arrays.toString(tokens2));

        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        Delimiters d1 = new Delimiters("{", "}");

        String[] tokens3 = {"}"};
        ArrayList&lt;String&gt; delList3 = d1.getDelimitersList(tokens3);

        boolean res3 = d1.isBalanced(delList3);

        boolean passed =
                getResults(
                        "false",
                        "" + res3,
                        "isBalanced on a non-balanced set of delimiters "
                                + Arrays.toString(tokens3));

        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        Delimiters d1 = new Delimiters("{", "}");

        String[] tokens4 = {"{", "}", "}"};
        ArrayList&lt;String&gt; delList4 = d1.getDelimitersList(tokens4);

        boolean res4 = d1.isBalanced(delList4);

        boolean passed =
                getResults(
                        "false",
                        "" + res4,
                        "isBalanced on a non-balanced set of delimiters "
                                + Arrays.toString(tokens4));

        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.10.11.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_grid_find_parts">
                <span data-question="">
                  <div class="para" id="grid_find_parts-1-1">The question statement is listed below. Click on the part of the sentences below with the data type of the object passed to  getEmptyLocations and the datatype of the returned object.</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="grid_find_parts-2-1">The method header for getEmptyLocations is "public static ? getEmptyLocations (?)". What information should replace the "?" and what does that tell you about the method?</div>
                </span>
                <pre>Write the <span data-incorrect="">GridWorldUtilities</span> method <span data-incorrect="">getEmptyLocations.</span>
If there are no empty <span data-incorrect="">locations</span> in <span data-correct="">Grid,</span> the <span data-incorrect="">method</span> returns an empty <span data-correct="">Arraylist.</span>
Otherwise, it returns an Arraylist of all <span data-incorrect="">empty</span> <span data-incorrect="">locations in Grid</span>.
Each <span data-incorrect="">empty location</span> should appear exactly once in the Arraylist.
</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.10.11.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_grid_wrld_cu_mc_1" data-multipleanswers="false">
                <div class="para" id="grid_wrld_cu_mc_1-1-1">7-4-11-2: In which class is the method <code class="code-inline tex2jax_ignore">getEmptyLocations</code> written?</div>
                <li data-component="answer" id="csawesome2_2_grid_wrld_cu_mc_1_opt_a" data-correct="">
                  <div class="para" id="grid_wrld_cu_mc_1-2-1-1-1">GridWorldUtilities</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grid_wrld_cu_mc_1_opt_a">
                  <div class="para" id="grid_wrld_cu_mc_1-2-1-2-1">getEmptyLocations is a method inside of GridWorldUtilities.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grid_wrld_cu_mc_1_opt_b">
                  <div class="para" id="grid_wrld_cu_mc_1-2-2-1-1">getEmptyLocations</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grid_wrld_cu_mc_1_opt_b">
                  <div class="para" id="grid_wrld_cu_mc_1-2-2-2-1">getEmptyLocations exists in a class, whereas getEmptyLocations is only a method.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grid_wrld_cu_mc_1_opt_c">
                  <div class="para" id="grid_wrld_cu_mc_1-2-3-1-1">BoundedGrid</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grid_wrld_cu_mc_1_opt_c">
                  <div class="para" id="grid_wrld_cu_mc_1-2-3-2-1">BoundedGrid is not the correct class.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grid_wrld_cu_mc_1_opt_d">
                  <div class="para" id="grid_wrld_cu_mc_1-2-4-1-1">Actor</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grid_wrld_cu_mc_1_opt_d">
                  <div class="para" id="grid_wrld_cu_mc_1-2-4-2-1">Actor is no the correct class.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.10.11.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_grid_wrld_cu_mc_2" data-multipleanswers="false">
                <div class="para" id="grid_wrld_cu_mc_2-1-1">7-4-11-3: When this method returns an <code class="code-inline tex2jax_ignore">ArrayList</code>, what is the datatype of the objects in the <code class="code-inline tex2jax_ignore">ArrayList</code>?</div>
                <li data-component="answer" id="csawesome2_2_grid_wrld_cu_mc_2_opt_a">
                  <div class="para" id="grid_wrld_cu_mc_2-2-1-1-1">Grid</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grid_wrld_cu_mc_2_opt_a">
                  <div class="para" id="grid_wrld_cu_mc_2-2-1-2-1">Grid is the type of the parameter.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grid_wrld_cu_mc_2_opt_b">
                  <div class="para" id="grid_wrld_cu_mc_2-2-2-1-1">String</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grid_wrld_cu_mc_2_opt_b">
                  <div class="para" id="grid_wrld_cu_mc_2-2-2-2-1">There are no strings in this problem.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grid_wrld_cu_mc_2_opt_c" data-correct="">
                  <div class="para" id="grid_wrld_cu_mc_2-2-3-1-1">Location</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grid_wrld_cu_mc_2_opt_c">
                  <div class="para" id="grid_wrld_cu_mc_2-2-3-2-1">Correct, the ArrayList returned contains Location objects.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grid_wrld_cu_mc_2_opt_d">
                  <div class="para" id="grid_wrld_cu_mc_2-2-4-1-1">Actor</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grid_wrld_cu_mc_2_opt_d">
                  <div class="para" id="grid_wrld_cu_mc_2-2-4-2-1">This is no the type of object the ArrayList holds.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.10.11.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_grid_wrld_cu_mc_3" data-multipleanswers="false">
                <div class="para" id="grid_wrld_cu_mc_3-1-1">7-4-11-4: How can one find the height of the <code class="code-inline tex2jax_ignore">grid</code> that is passed to this method?</div>
                <li data-component="answer" id="csawesome2_2_grid_wrld_cu_mc_3_opt_a">
                  <div class="para" id="grid_wrld_cu_mc_3-2-1-1-1">.length</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grid_wrld_cu_mc_3_opt_a">
                  <div class="para" id="grid_wrld_cu_mc_3-2-1-2-1">This call works for strings, but we aren’t working with strings.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grid_wrld_cu_mc_3_opt_b">
                  <div class="para" id="grid_wrld_cu_mc_3-2-2-1-1">.getSize()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grid_wrld_cu_mc_3_opt_b">
                  <div class="para" id="grid_wrld_cu_mc_3-2-2-2-1">This is not an applicable method for grid</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grid_wrld_cu_mc_3_opt_c">
                  <div class="para" id="grid_wrld_cu_mc_3-2-3-1-1">.getHeight()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grid_wrld_cu_mc_3_opt_c">
                  <div class="para" id="grid_wrld_cu_mc_3-2-3-2-1">This does not exist.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grid_wrld_cu_mc_3_opt_d" data-correct="">
                  <div class="para" id="grid_wrld_cu_mc_3-2-4-1-1">.getNumRows()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grid_wrld_cu_mc_3_opt_d">
                  <div class="para" id="grid_wrld_cu_mc_3-2-4-2-1">Correct, this will return the height of the grid.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.10.11.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_grid_wrld_cu_mc_4" data-multipleanswers="false">
                <div class="para" id="grid_wrld_cu_mc_4-1-1">7-4-11-5: How can one find the width of the <code class="code-inline tex2jax_ignore">grid</code> that is passed to this method?</div>
                <li data-component="answer" id="csawesome2_2_grid_wrld_cu_mc_4_opt_a" data-correct="">
                  <div class="para" id="grid_wrld_cu_mc_4-2-1-1-1">.getNumCols()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grid_wrld_cu_mc_4_opt_a">
                  <div class="para" id="grid_wrld_cu_mc_4-2-1-2-1">Correct, this will find the width of the grid.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grid_wrld_cu_mc_4_opt_b">
                  <div class="para" id="grid_wrld_cu_mc_4-2-2-1-1">.getNumRows()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grid_wrld_cu_mc_4_opt_b">
                  <div class="para" id="grid_wrld_cu_mc_4-2-2-2-1">This will find the height of the grid, but we’re looking for the width.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grid_wrld_cu_mc_4_opt_c">
                  <div class="para" id="grid_wrld_cu_mc_4-2-3-1-1">.getWidth()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grid_wrld_cu_mc_4_opt_c">
                  <div class="para" id="grid_wrld_cu_mc_4-2-3-2-1">This does not exist.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grid_wrld_cu_mc_4_opt_d">
                  <div class="para" id="grid_wrld_cu_mc_4-2-4-1-1">.length</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grid_wrld_cu_mc_4_opt_d">
                  <div class="para" id="grid_wrld_cu_mc_4-2-4-2-1">This call works for strings, but we aren’t working with strings.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_grdwrld_mcalg_answr_1" data-multipleanswers="false">
                <div class="para" id="grdwrld_mcalg_answr_1-1-1">7-4-11-7: Which Java expression correctly creates an empty <code class="code-inline tex2jax_ignore">ArrayList</code> of type <code class="code-inline tex2jax_ignore">Location</code> called locs?</div>
                <li data-component="answer" id="csawesome2_2_grdwrld_mcalg_answr_1_opt_a">
                  <div class="para" id="grdwrld_mcalg_answr_1-2-1-1-1">locs = new ArrayList&lt;Location&amp;gt;();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grdwrld_mcalg_answr_1_opt_a">
                  <div class="para" id="grdwrld_mcalg_answr_1-2-1-2-1">You must declare the type for locs</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grdwrld_mcalg_answr_1_opt_b">
                  <div class="para" id="grdwrld_mcalg_answr_1-2-2-1-1">ArrayList&lt;Location&amp;gt; locs = new ArrayList&lt;Location&amp;gt;;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grdwrld_mcalg_answr_1_opt_b">
                  <div class="para" id="grdwrld_mcalg_answr_1-2-2-2-1">You must include the () when creating a new object</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grdwrld_mcalg_answr_1_opt_c">
                  <div class="para" id="grdwrld_mcalg_answr_1-2-3-1-1">ArrayList&lt;Location&amp;gt; locs = new List&lt;Location&amp;gt;();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grdwrld_mcalg_answr_1_opt_c">
                  <div class="para" id="grdwrld_mcalg_answr_1-2-3-2-1">You must create an ArrayList using a concrete subclass like ArrayList</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grdwrld_mcalg_answr_1_opt_d" data-correct="">
                  <div class="para" id="grdwrld_mcalg_answr_1-2-4-1-1">ArrayList&lt;Location&amp;gt; locs = new ArrayList&lt;Location&amp;gt;();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grdwrld_mcalg_answr_1_opt_d">
                  <div class="para" id="grdwrld_mcalg_answr_1-2-4-2-1">Correct!</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_grdwrld_mcalg_answr_2" data-multipleanswers="false">
                <div class="para" id="grdwrld_mcalg_answr_2-1-1">7-4-11-8: Which loop would be best for this situation?</div>
                <li data-component="answer" id="csawesome2_2_grdwrld_mcalg_answr_2_opt_a" data-correct="">
                  <div class="para" id="grdwrld_mcalg_answr_2-2-1-1-1">nested for loop</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grdwrld_mcalg_answr_2_opt_a">
                  <div class="para" id="grdwrld_mcalg_answr_2-2-1-2-1">Correct! This method will be the easiest to read and simplest to debug.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grdwrld_mcalg_answr_2_opt_b">
                  <div class="para" id="grdwrld_mcalg_answr_2-2-2-1-1">for</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grdwrld_mcalg_answr_2_opt_b">
                  <div class="para" id="grdwrld_mcalg_answr_2-2-2-2-1">you cannot use a single for loop because you need to traverse 2 dimensions</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grdwrld_mcalg_answr_2_opt_c">
                  <div class="para" id="grdwrld_mcalg_answr_2-2-3-1-1">for-each</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grdwrld_mcalg_answr_2_opt_c">
                  <div class="para" id="grdwrld_mcalg_answr_2-2-3-2-1">you could use a nested for-each loop but it would make your code longer and less efficient, as well as harder to read.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grdwrld_mcalg_answr_2_opt_d">
                  <div class="para" id="grdwrld_mcalg_answr_2-2-4-1-1">while</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grdwrld_mcalg_answr_2_opt_d">
                  <div class="para" id="grdwrld_mcalg_answr_2-2-4-2-1">you cannot use a single while loop because you need to traverse 2 dimensions</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_grdwrld_mcalg_answr_3" data-multipleanswers="false">
                <div class="para" id="grdwrld_mcalg_answr_3-1-1">7-4-11-9:  Assuming we have our nested for loop that uses r and c to iterate through the <code class="code-inline tex2jax_ignore">grid</code>, how do we initialize a <code class="code-inline tex2jax_ignore">Location</code> object (called locToCheck) to add our <code class="code-inline tex2jax_ignore">ArrayList</code> locs?</div>
                <li data-component="answer" id="csawesome2_2_grdwrld_mcalg_answr_3_opt_a">
                  <div class="para" id="grdwrld_mcalg_answr_3-2-1-1-1">locToCheck = new Location (r,c);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grdwrld_mcalg_answr_3_opt_a">
                  <div class="para" id="grdwrld_mcalg_answr_3-2-1-2-1">You need to assign a datatype to locToCheck on the left side of the initialization.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grdwrld_mcalg_answr_3_opt_b">
                  <div class="para" id="grdwrld_mcalg_answr_3-2-2-1-1">location locToCheck = location (r,c);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grdwrld_mcalg_answr_3_opt_b">
                  <div class="para" id="grdwrld_mcalg_answr_3-2-2-2-1">You need to state that you a creating a new object with the keyword, "new".</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grdwrld_mcalg_answr_3_opt_c" data-correct="">
                  <div class="para" id="grdwrld_mcalg_answr_3-2-3-1-1">Location locToCheck = new Location (r,c);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grdwrld_mcalg_answr_3_opt_c">
                  <div class="para" id="grdwrld_mcalg_answr_3-2-3-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grdwrld_mcalg_answr_3_opt_d">
                  <div class="para" id="grdwrld_mcalg_answr_3-2-4-1-1">location locToCheck = new location (r,c);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grdwrld_mcalg_answr_3_opt_d">
                  <div class="para" id="grdwrld_mcalg_answr_3-2-4-2-1">Watch your capitalization! the Location class needs to be capitalized.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_grdwrld_mcalg_answr_4" data-multipleanswers="false">
                <div class="para" id="grdwrld_mcalg_answr_4-1-1">7-4-11-10: How can you check if the current location, “locToCheck” is empty?</div>
                <li data-component="answer" id="csawesome2_2_grdwrld_mcalg_answr_4_opt_a">
                  <div class="para" id="grdwrld_mcalg_answr_4-2-1-1-1">if (locToCheck == null)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grdwrld_mcalg_answr_4_opt_a">
                  <div class="para" id="grdwrld_mcalg_answr_4-2-1-2-1">locToCheck currently only contains the location in the grid, not what object is actually located there</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grdwrld_mcalg_answr_4_opt_b" data-correct="">
                  <div class="para" id="grdwrld_mcalg_answr_4-2-2-1-1">if (grid.get(locToCheck) == null)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grdwrld_mcalg_answr_4_opt_b">
                  <div class="para" id="grdwrld_mcalg_answr_4-2-2-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grdwrld_mcalg_answr_4_opt_c">
                  <div class="para" id="grdwrld_mcalg_answr_4-2-3-1-1">if (locs.get(locToCheck) == 0)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grdwrld_mcalg_answr_4_opt_c">
                  <div class="para" id="grdwrld_mcalg_answr_4-2-3-2-1">We want locs to contain all the empty locations so it wouldn’t make sense to call locs.get(locToCheck).</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grdwrld_mcalg_answr_4_opt_d">
                  <div class="para" id="grdwrld_mcalg_answr_4-2-4-1-1">if (grid.get(locToCheck) == 0)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grdwrld_mcalg_answr_4_opt_d">
                  <div class="para" id="grdwrld_mcalg_answr_4-2-4-2-1">The grid could contain an integer object equal to 0 so that would mean the grid isn’t empty at that spot.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.10.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_frq2013Q3A-grid">
                <div class="ac_question" id="csawesome2_2_frq2013Q3A-grid_question">
                  <div class="para" id="frq2013Q3A-grid-1-1">Complete the getEmptyLocations() method below.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_frq2013Q3A-grid_editor" data-question_label="" data-codelens="true">import java.util.*;

public class GridWorldUtilities
{

    /**
     * Gets all the locations in grid that do not contain objects.
     *
     * @param grid is a reference to a bounded object
     * @param an array list (possibly contains nothing) of empty locations in grid.
     *     The size of the returned list is 0 if there are no empty locations in
     *     grid. Each empty location in grid should appear exactly and only once in
     *     the returned list.
     */
    public static ArrayList&lt;Location&gt; getEmptyLocations(Grid&lt;Location&gt; grid)
    {
        /* TO BE IMPLEMENTED IN PART A*/
    }

    public static void main(String[] args)
    {
        System.out.println("Running Test 1");
        BoundedGrid&lt;Location&gt; example = new BoundedGrid&lt;Location&gt;(2, 2);
        Location loc1 = new Location(0, 0);
        Location loc2 = new Location(1, 0);
        Location loc3 = new Location(0, 1);
        Location loc4 = new Location(1, 1);
        example.put(loc1, loc1);
        example.put(loc2, loc2);
        example.put(loc3, loc3);

        ArrayList&lt;Location&gt; locsCorrect = new ArrayList&lt;Location&gt;();
        locsCorrect.add(loc4);

        ArrayList&lt;Location&gt; studentAnswer = new ArrayList&lt;Location&gt;();
        studentAnswer = getEmptyLocations(example);

        System.out.println(
                "This is the correct output for test 1, compare the result with"
                    + " your output");
        for (int i = 0; i &lt; locsCorrect.size(); i++)
        {
            System.out.println(locsCorrect.get(i));
        }

        System.out.println("Student output:");
        for (int j = 0; j &lt; studentAnswer.size(); j++)
        {
            System.out.println(studentAnswer.get(j));
        }

        System.out.println(
                "Running Test 2: returns empty ArrayList if no empty locations");
        example.put(loc4, loc4);
        locsCorrect.clear();
        studentAnswer = getEmptyLocations(example);

        System.out.println(
                "This is the correct output for test 2 (empty), compare the result"
                    + " with your output");
        for (int i = 0; i &lt; locsCorrect.size(); i++)
        {
            System.out.println(locsCorrect.get(i));
        }

        System.out.println("Student output:");
        for (int j = 0; j &lt; studentAnswer.size(); j++)
        {
            System.out.println(studentAnswer.get(j));
        }
    }
}

/* GridWorld files
 */
/**
 * Grid provides an interface for a two-dimensional, grid-like environment
 * containing arbitrary objects.
 */
interface Grid&lt;E&gt;
{
    /**
     * Returns the number of rows in this grid.
     *
     * @return the number of rows, or -1 if this grid is unbounded
     */
    int getNumRows();

    /**
     * Returns the number of columns in this grid.
     *
     * @return the number of columns, or -1 if this grid is unbounded
     */
    int getNumCols();

    /**
     * Checks whether a location is valid in this grid. Precondition: loc is not
     * null
     *
     * @param loc the location to check
     * @return true if loc is valid in this grid, false otherwise
     */
    boolean isValid(Location loc);

    /**
     * Puts an object at a given location in this grid. Precondition: (1) loc is
     * valid in this grid (2) obj is not null
     *
     * @param loc the location at which to put the object
     * @param obj the new object to be added
     * @return the object previously at loc (or null if the location was previously
     *     unoccupied)
     */
    E put(Location loc, E obj);

    /**
     * Removes the object at a given location from this grid. Precondition: loc is
     * valid in this grid
     *
     * @param loc the location of the object that is to be removed
     * @return the object that was removed (or null if the location is unoccupied)
     */
    E remove(Location loc);

    /**
     * Returns the object at a given location in this grid. Precondition: loc is
     * valid in this grid
     *
     * @param loc a location in this grid
     * @return the object at location loc (or null if the location is unoccupied)
     */
    E get(Location loc);

    /**
     * Gets the locations in this grid that contain objects.
     *
     * @return an array list of all occupied locations in this grid
     */
    ArrayList&lt;Location&gt; getOccupiedLocations();

    /**
     * Gets the valid locations adjacent to a given location in all eight compass
     * directions (north, northeast, east, southeast, south, southwest, west, and
     * northwest). Precondition: loc is valid in this grid
     *
     * @param loc a location in this grid
     * @return an array list of the valid locations adjacent to loc in this grid
     */
    ArrayList&lt;Location&gt; getValidAdjacentLocations(Location loc);

    /**
     * Gets the valid empty locations adjacent to a given location in all eight
     * compass directions (north, northeast, east, southeast, south, southwest,
     * west, and northwest). Precondition: loc is valid in this grid
     *
     * @param loc a location in this grid
     * @return an array list of the valid empty locations adjacent to loc in this
     *     grid
     */
    ArrayList&lt;Location&gt; getEmptyAdjacentLocations(Location loc);

    /**
     * Gets the valid occupied locations adjacent to a given location in all eight
     * compass directions (north, northeast, east, southeast, south, southwest,
     * west, and northwest). Precondition: loc is valid in this grid
     *
     * @param loc a location in this grid
     * @return an array list of the valid occupied locations adjacent to loc in
     *     this grid
     */
    ArrayList&lt;Location&gt; getOccupiedAdjacentLocations(Location loc);

    /**
     * Gets the neighboring occupants in all eight compass directions (north,
     * northeast, east, southeast, south, southwest, west, and northwest).
     *
* &lt;p&gt;Precondition: loc is valid in this grid
     *
     * @param loc a location in this grid
     * @return returns an array list of the objects in the occupied locations
     *     adjacent to loc in this grid
     */
    ArrayList&lt;E&gt; getNeighbors(Location loc);
}

// End of Class Grid

// Location Class

/**
 * A Location object represents the row and column of a location in a
 * two-dimensional grid. The API of this class is testable on the AP CSA and AB
 * exams.
 */
class Location implements Comparable
{
    private int row; // row location in grid
    private int col; // column location in grid

    /** The turn angle for turning 90 degrees to the left. */
    public static final int LEFT = -90;

    /** The turn angle for turning 90 degrees to the right. */
    public static final int RIGHT = 90;

    /** The turn angle for turning 45 degrees to the left. */
    public static final int HALF_LEFT = -45;

    /** The turn angle for turning 45 degrees to the right. */
    public static final int HALF_RIGHT = 45;

    /** The turn angle for turning a full circle. */
    public static final int FULL_CIRCLE = 360;

    /** The turn angle for turning a half circle. */
    public static final int HALF_CIRCLE = 180;

    /** The turn angle for making no turn. */
    public static final int AHEAD = 0;

    /** The compass direction for north. */
    public static final int NORTH = 0;

    /** The compass direction for northeast. */
    public static final int NORTHEAST = 45;

    /** The compass direction for east. */
    public static final int EAST = 90;

    /** The compass direction for southeast. */
    public static final int SOUTHEAST = 135;

    /** The compass direction for south. */
    public static final int SOUTH = 180;

    /** The compass direction for southwest. */
    public static final int SOUTHWEST = 225;

    /** The compass direction for west. */
    public static final int WEST = 270;

    /** The compass direction for northwest. */
    public static final int NORTHWEST = 315;

    /**
     * Constructs a location with given row and column coordinates.
     *
     * @param r the row
     * @param c the column
     */
    public Location(int r, int c)
    {
        row = r;
        col = c;
    }

    /**
     * Gets the row coordinate.
     *
     * @return the row of this location
     */
    public int getRow()
    {
        return row;
    }

    /**
     * Gets the column coordinate.
     *
     * @return the column of this location
     */
    public int getCol()
    {
        return col;
    }

    /**
     * Gets the adjacent location in any one of the eight compass directions.
     *
     * @param direction the direction in which to find a neighbor location
     * @return the adjacent location in the direction that is closest to
* &lt;tt&gt;direction&lt;/tt&gt;
     */
    public Location getAdjacentLocation(int direction)
    {
        // reduce mod 360 and round to closest multiple of 45
        int adjustedDirection = (direction + HALF_RIGHT / 2) % FULL_CIRCLE;
        if (adjustedDirection &lt; 0)
        {
             adjustedDirection += FULL_CIRCLE;
        }
        adjustedDirection = (adjustedDirection / HALF_RIGHT) * HALF_RIGHT;
        int dc = 0;
        int dr = 0;
        if (adjustedDirection == EAST)
        {
             dc = 1;
        }
        else if (adjustedDirection == SOUTHEAST)
        {
            dc = 1;
            dr = 1;
        }
        else if (adjustedDirection == SOUTH)
        {
            dr = 1;
        }
        else if (adjustedDirection == SOUTHWEST)
        {
            dc = -1;
            dr = 1;
        }
        else if (adjustedDirection == WEST)
        {
            dc = -1;
        }
        else if (adjustedDirection == NORTHWEST)
        {
            dc = -1;
            dr = -1;
        }
        else if (adjustedDirection == NORTH)
        {
            dr = -1;
        }
        else if (adjustedDirection == NORTHEAST)
        {
            dc = 1;
            dr = -1;
        }
        return new Location(getRow() + dr, getCol() + dc);
    }

    /**
     * Returns the direction from this location toward another location. The
     * direction is rounded to the nearest compass direction.
     *
     * @param target a location that is different from this location
     * @return the closest compass direction from this location toward target
     */
    public int getDirectionToward(Location target)
    {
        int dx = target.getCol() - getCol();
        int dy = target.getRow() - getRow();
        // y axis points opposite to mathematical orientation
        int angle = (int) Math.toDegrees(Math.atan2(-dy, dx));

        // mathematical angle is counterclockwise from x-axis,
        // compass angle is clockwise from y-axis
        int compassAngle = RIGHT - angle;
        // prepare for truncating division by 45 degrees
        compassAngle += HALF_RIGHT / 2;
        // wrap negative angles
        if (compassAngle &lt; 0)
        {
             compassAngle += FULL_CIRCLE;
        }


        // round to nearest multiple of 45
        return (compassAngle / HALF_RIGHT) * HALF_RIGHT;
    }

    /**
     * Indicates whether some other Location object is "equal to" this one.
     *
     * @param other the other location to test
     * @return true if other is a Location with the same row and column as this
     *     location; false otherwise
     */
    public boolean equals(Object other)
    {
        if (!(other instanceof Location))
        {
             return false;
        }

        Location otherLoc = (Location) other;
        return getRow() == otherLoc.getRow() &amp;&amp; getCol() == otherLoc.getCol();
    }

    /**
     * Generates a hash code.
     *
     * @return a hash code for this location
     */
    public int hashCode()
    {
        return getRow() * 3737 + getCol();
    }

    /**
     * Compares this location to other for ordering. Returns a negative integer,
     * zero, or a positive integer as this location is less than, equal to, or
     * greater than other. Locations are ordered in row-major order. (Precondition:
     * other is a Location object.)
     *
     * @param other the other location to test
     * @return a negative integer if this location is less than other, zero if the
     *     two locations are equal, or a positive integer if this location is
     *     greater than other
     */
    public int compareTo(Object other)
    {
        Location otherLoc = (Location) other;
        if (getRow() &lt; otherLoc.getRow()) return -1;
        if (getRow() &gt; otherLoc.getRow()) return 1;
        if (getCol() &lt; otherLoc.getCol()) return -1;
        if (getCol() &gt; otherLoc.getCol()) return 1;
        return 0;
    }

    /**
     * Creates a string that describes this location.
     *
     * @return a string with the row and column of this location, in the format
     *     (row, col)
     */
    public String toString()
    {
        return "(" + getRow() + ", " + getCol() + ")";
    }
}

// End of Class

// BoundedGrid Class

/**
 * A BoundedGrid is a rectangular grid with a finite number of rows and columns.
 * The implementation of this class is testable on the AP CS AB exam.
 */
class BoundedGrid&lt;E&gt; extends AbstractGrid&lt;E&gt;
{
    private Object[][] occupantArray; // the array storing the grid elements

    /**
     * Constructs an empty bounded grid with the given dimensions. (Precondition:
     * rows &gt; 0 and cols &gt; 0.)
     *
     * @param rows number of rows in BoundedGrid
     * @param cols number of columns in BoundedGrid
     */
    public BoundedGrid(int rows, int cols)
    {
        if (rows &lt;= 0) throw new IllegalArgumentException("rows &lt;= 0");
        if (cols &lt;= 0) throw new IllegalArgumentException("cols &lt;= 0");
        occupantArray = new Object[rows][cols];
    }

    public int getNumRows()
    {
        return occupantArray.length;
    }

    public int getNumCols()
    {
        // Note: according to the constructor precondition, numRows() &gt; 0, so
        // theGrid[0] is non-null.
        return occupantArray[0].length;
    }

    public boolean isValid(Location loc)
    {
        return 0 &lt;= loc.getRow()
                &amp;&amp; loc.getRow() &lt; getNumRows()
                &amp;&amp; 0 &lt;= loc.getCol()
                &amp;&amp; loc.getCol() &lt; getNumCols();
    }

    public ArrayList&lt;Location&gt; getOccupiedLocations()
    {
        ArrayList&lt;Location&gt; theLocations = new ArrayList&lt;Location&gt;();

        // Look at all grid locations.
        for (int r = 0; r &lt; getNumRows(); r++)
        {
            for (int c = 0; c &lt; getNumCols(); c++)
            {
                // If there's an object at this location, put it in the array.
                Location loc = new Location(r, c);
                if (get(loc) != null)
                    theLocations.add(loc);
            }
        }

        return theLocations;
    }

    @SuppressWarnings("unchecked")
    public E get(Location loc)
    {
        if (!isValid(loc))
            throw new IllegalArgumentException(
                    "Location " + loc + " is not valid");
        return (E)
                occupantArray[loc.getRow()][loc.getCol()]; // unavoidable warning
    }

    public E put(Location loc, E obj)
    {
        if (!isValid(loc))
            throw new IllegalArgumentException(
                    "Location " + loc + " is not valid");
        if (obj == null) throw new NullPointerException("obj == null");

        // Add the object to the grid.
        E oldOccupant = get(loc);
        occupantArray[loc.getRow()][loc.getCol()] = obj;
        return oldOccupant;
    }

    public E remove(Location loc)
    {
        if (!isValid(loc))
            throw new IllegalArgumentException(
                    "Location " + loc + " is not valid");

        // Remove the object from the grid.
        E r = get(loc);
        occupantArray[loc.getRow()][loc.getCol()] = null;
        return r;
    }
}

// End of Class

// Class AbstractGrid

/**
 * AbstractGrid contains the methods that are common to grid implementations. The
 * implementation of this class is testable on the AP CS AB exam.
 */
abstract class AbstractGrid&lt;E&gt; implements Grid&lt;E&gt;
{
    public ArrayList&lt;E&gt; getNeighbors(Location loc)
    {
        ArrayList&lt;E&gt; neighbors = new ArrayList&lt;E&gt;();
        for (Location neighborLoc : getOccupiedAdjacentLocations(loc))
            neighbors.add(get(neighborLoc));
        return neighbors;
    }

    public ArrayList&lt;Location&gt; getValidAdjacentLocations(Location loc)
    {
        ArrayList&lt;Location&gt; locs = new ArrayList&lt;Location&gt;();

        int d = Location.NORTH;
        for (int i = 0; i &lt; Location.FULL_CIRCLE / Location.HALF_RIGHT; i++)
        {
            Location neighborLoc = loc.getAdjacentLocation(d);
            if (isValid(neighborLoc))
                locs.add(neighborLoc);
            d = d + Location.HALF_RIGHT;
        }
        return locs;
    }

    public ArrayList&lt;Location&gt; getEmptyAdjacentLocations(Location loc)
    {
        ArrayList&lt;Location&gt; locs = new ArrayList&lt;Location&gt;();
        for (Location neighborLoc : getValidAdjacentLocations(loc))
        {
            if (get(neighborLoc) == null)
                locs.add(neighborLoc);
        }
        return locs;
    }


    public ArrayList&lt;Location&gt; getOccupiedAdjacentLocations(Location loc)
    {
        ArrayList&lt;Location&gt; locs = new ArrayList&lt;Location&gt;();
        for (Location neighborLoc : getValidAdjacentLocations(loc))
        {
            if (get(neighborLoc) != null)
                locs.add(neighborLoc);
        }
        return locs;
    }

    /**
     * Creates a string that describes this grid.
     *
     * @return a string with descriptions of all objects in this grid (not
     *     necessarily in any particular order), in the format {loc=obj, loc=obj,
     *     ...}
     */
    public String toString()
    {
        String s = "{";
        for (Location loc : getOccupiedLocations())
        {
            if (s.length() &gt; 1)
                s += ", ";
            s += loc + "=" + get(loc);
        }
        return s + "}";
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.util.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("GridWorldUtilities");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Student output:\n(1, 1)\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        BoundedGrid&lt;Location&gt; example = new BoundedGrid&lt;Location&gt;(2, 2);
        Location loc1 = new Location(0, 0);
        Location loc2 = new Location(1, 0);
        Location loc3 = new Location(0, 1);
        Location loc4 = new Location(1, 1);
        example.put(loc1, loc1);
        example.put(loc2, loc2);
        example.put(loc3, loc3);

        ArrayList&lt;Location&gt; locsCorrect = new ArrayList&lt;Location&gt;();
        locsCorrect.add(loc4);
        ArrayList&lt;Location&gt; studentAnswer = new ArrayList&lt;Location&gt;();
        studentAnswer = GridWorldUtilities.getEmptyLocations(example);

        String output = studentAnswer.get(0).toString();
        String expect = "(1, 1)";

        boolean passed = getResults(expect, output, "Test 1 call to getEmptyLocations()");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.10.12.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qListRem3" data-multipleanswers="false"><div class="para" id="qListRem3-1-1">7-4-1: What will print when the following code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">List&lt;Integer&gt; numList = new ArrayList&lt;Integer&gt;();
numList.add(new Integer(1));
numList.add(new Integer(2));
numList.add(new Integer(3));
numList.set(2,new Integer(4));
numList.add(1, new Integer(5));
numList.add(new Integer(6));
System.out.println(numList);
</code></pre></div><li data-component="answer" id="csawesome2_2_qListRem3_opt_a"><div class="para" id="qListRem3-2-1-1-1">[1, 2, 3, 4, 5]</div></li><li data-component="feedback" id="csawesome2_2_qListRem3_opt_a"><div class="para" id="qListRem3-2-1-2-1">The set will replace the 3 at index 2 so this isn’t correct.</div></li><li data-component="answer" id="csawesome2_2_qListRem3_opt_b"><div class="para" id="qListRem3-2-2-1-1">[1, 2, 4, 5, 6]</div></li><li data-component="feedback" id="csawesome2_2_qListRem3_opt_b"><div class="para" id="qListRem3-2-2-2-1">The add with an index of 1 and a value of 5 adds the 5 at index 1 not 3. Remember that the first index is 0.</div></li><li data-component="answer" id="csawesome2_2_qListRem3_opt_c"><div class="para" id="qListRem3-2-3-1-1">[1, 2, 5, 4, 6]</div></li><li data-component="feedback" id="csawesome2_2_qListRem3_opt_c"><div class="para" id="qListRem3-2-3-2-1">The set will change the item at index 2 to 4.  The add of 5 at index 1 will move everything else to the right and insert 5.  The last add will be at the end of the list.</div></li><li data-component="answer" id="csawesome2_2_qListRem3_opt_d" data-correct=""><div class="para" id="qListRem3-2-4-1-1">[1, 5, 2, 4, 6]</div></li><li data-component="feedback" id="csawesome2_2_qListRem3_opt_d"><div class="para" id="qListRem3-2-4-2-1">add without an index adds at the end, set will replace the item at that index, add with an index will move all current values at that index or beyond to the right.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.10.12.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qListRem4" data-multipleanswers="false"><div class="para" id="qListRem4-1-1">7-4-2: What will print when the following code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">List&lt;Integer&gt; list1 = new ArrayList&lt;Integer&gt;();
list1.add(new Integer(1));
list1.add(new Integer(2));
list1.add(new Integer(3));
list1.remove(1);
System.out.println(list1);
</code></pre></div><li data-component="answer" id="csawesome2_2_qListRem4_opt_a"><div class="para" id="qListRem4-2-1-1-1">[2, 3]</div></li><li data-component="feedback" id="csawesome2_2_qListRem4_opt_a"><div class="para" id="qListRem4-2-1-2-1">The remove will remove the item at the given index.</div></li><li data-component="answer" id="csawesome2_2_qListRem4_opt_b"><div class="para" id="qListRem4-2-2-1-1">[1, 2, 3]</div></li><li data-component="feedback" id="csawesome2_2_qListRem4_opt_b"><div class="para" id="qListRem4-2-2-2-1">The item at index 1 will be removed and all the other values shifted left.</div></li><li data-component="answer" id="csawesome2_2_qListRem4_opt_c"><div class="para" id="qListRem4-2-3-1-1">[1, 2]</div></li><li data-component="feedback" id="csawesome2_2_qListRem4_opt_c"><div class="para" id="qListRem4-2-3-2-1">The 3 is at index 2.  The item at index 1 will be removed.</div></li><li data-component="answer" id="csawesome2_2_qListRem4_opt_d" data-correct=""><div class="para" id="qListRem4-2-4-1-1">[1, 3]</div></li><li data-component="feedback" id="csawesome2_2_qListRem4_opt_d"><div class="para" id="qListRem4-2-4-2-1">The item at index 1 is removed and the 3 is moved left.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.10.12.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_arrayListRemoveInLoop">
                <div class="ac_question" id="csawesome2_2_arrayListRemoveInLoop_question">
                  <div class="para" id="arrayListRemoveInLoop-1-1">The following code is supposed to initialize the ArrayList arr to [0,1,2,3,4] and then remove every other element to get [1,3]. However, when you remove an element the size of the array changes and elements move up an index! See if you can figure out why you get the unexpected result. Try the CodeLens button to trace through the code.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_arrayListRemoveInLoop_editor" data-question_label="" data-codelens="true">import java.util.*;

public class ArrayListLoop
{
    public static void main(String[] args)
    {
        ArrayList&lt;Integer&gt; arr = new ArrayList&lt;Integer&gt;();
        for (int i = 0; i &lt; 5; i++)
        {
            arr.add(i);
        }
        for (int i = 0; i &lt; arr.size(); i++)
        {
            if (i % 2 == 0)
            {
                System.out.println("Removing element " + i + " : " + arr.get(i));
                arr.remove(i);
            }
        }
        System.out.println(arr);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Removing element 0: 0\nRemoving element 2: 3\n[1, 2, 4]";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.10.12.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_parallelArrayLists">
                <div class="ac_question" id="csawesome2_2_parallelArrayLists_question">
                  <div class="para" id="parallelArrayLists-1-1">Demonstration of parallel ArrayLists.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_parallelArrayLists_editor" data-question_label="" data-codelens="true">import java.util.*;

public class ParallelTests
{
    public static void main(String[] args)
    {
        ArrayList&lt;Integer&gt; test1Grades = new ArrayList&lt;Integer&gt;();
        ArrayList&lt;Integer&gt; test2Grades = new ArrayList&lt;Integer&gt;();
        test1Grades.add(100);
        test2Grades.add(100);
        test1Grades.add(80);
        test2Grades.add(70);
        test1Grades.add(70);
        test2Grades.add(90);
        double total = 0;
        for (int i = 0; i &lt; test1Grades.size(); i++)
        {
            total += test1Grades.get(i) + test2Grades.get(i);
        }
        int numberOfGrades = test1Grades.size() * 2;
        System.out.println("Average over two tests: " + total / numberOfGrades);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Average over two tests: 85.0";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>d-arrays</id>
      <title>2D Arrays</title>
      <question>
        <label>Exercise 4.11.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_clicktd1">
                <span data-question="">
                  <div class="para" id="clicktd1-1-1">Click on all the values in the row at index 2</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="clicktd1-2-1">Rows are horizontal and columns are vertical and both start with index 0.</div>
                </span>
                <figure class="table table-like" id="clicktd1-3-1">
                  <figcaption>
                    <span class="type">Table</span>
                    <span class="space"> </span>
                    <span class="codenumber">4.11.5<span class="period">.</span></span>
                    <span class="space"> </span>
                  </figcaption>
                  <div class="tabular-box natural-width">
                    <table class="tabular">
                      <tr>
                        <td class="l m b0 r0 l0 t0 lines">8</td>
                        <td class="l m b0 r0 l0 t0 lines">-2</td>
                        <td class="l m b0 r0 l0 t0 lines">3</td>
                        <td class="l m b0 r0 l0 t0 lines">-1</td>
                      </tr>
                      <tr>
                        <td class="l m b0 r0 l0 t0 lines">4</td>
                        <td class="l m b0 r0 l0 t0 lines">5</td>
                        <td class="l m b0 r0 l0 t0 lines">0</td>
                        <td class="l m b0 r0 l0 t0 lines">-7</td>
                      </tr>
                      <tr>
                        <td class="l m b0 r0 l0 t0 lines">2</td>
                        <td class="l m b0 r0 l0 t0 lines">-3</td>
                        <td class="l m b0 r0 l0 t0 lines">-4</td>
                        <td class="l m b0 r0 l0 t0 lines">-5</td>
                      </tr>
                    </table>
                  </div>
                </figure>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.11.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_clicktd2">
                <span data-question="">
                  <div class="para" id="clicktd2-1-1">Click on all the values in the column at index 1</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="clicktd2-2-1">Rows are horizontal and columns are vertical and both start with index 0.</div>
                </span>
                <figure class="table table-like" id="clicktd2-3-1">
                  <figcaption>
                    <span class="type">Table</span>
                    <span class="space"> </span>
                    <span class="codenumber">4.11.7<span class="period">.</span></span>
                    <span class="space"> </span>
                  </figcaption>
                  <div class="tabular-box natural-width">
                    <table class="tabular">
                      <tr>
                        <td class="l m b0 r0 l0 t0 lines">8</td>
                        <td class="l m b0 r0 l0 t0 lines">-2</td>
                        <td class="l m b0 r0 l0 t0 lines">3</td>
                        <td class="l m b0 r0 l0 t0 lines">-1</td>
                      </tr>
                      <tr>
                        <td class="l m b0 r0 l0 t0 lines">4</td>
                        <td class="l m b0 r0 l0 t0 lines">5</td>
                        <td class="l m b0 r0 l0 t0 lines">0</td>
                        <td class="l m b0 r0 l0 t0 lines">-7</td>
                      </tr>
                      <tr>
                        <td class="l m b0 r0 l0 t0 lines">2</td>
                        <td class="l m b0 r0 l0 t0 lines">-3</td>
                        <td class="l m b0 r0 l0 t0 lines">-4</td>
                        <td class="l m b0 r0 l0 t0 lines">-5</td>
                      </tr>
                    </table>
                  </div>
                </figure>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.11.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_clicktd3">
                <span data-question="">
                  <div class="para" id="clicktd3-1-1">Click on the value at row index 2 and column index 1</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="clicktd3-2-1">Rows are horizontal and columns are vertical and both start with index 0.</div>
                </span>
                <figure class="table table-like" id="clicktd3-3-1">
                  <figcaption>
                    <span class="type">Table</span>
                    <span class="space"> </span>
                    <span class="codenumber">4.11.9<span class="period">.</span></span>
                    <span class="space"> </span>
                  </figcaption>
                  <div class="tabular-box natural-width">
                    <table class="tabular">
                      <tr>
                        <td class="l m b0 r0 l0 t0 lines">8</td>
                        <td class="l m b0 r0 l0 t0 lines">-2</td>
                        <td class="l m b0 r0 l0 t0 lines">3</td>
                        <td class="l m b0 r0 l0 t0 lines">-1</td>
                      </tr>
                      <tr>
                        <td class="l m b0 r0 l0 t0 lines">4</td>
                        <td class="l m b0 r0 l0 t0 lines">5</td>
                        <td class="l m b0 r0 l0 t0 lines">0</td>
                        <td class="l m b0 r0 l0 t0 lines">-7</td>
                      </tr>
                      <tr>
                        <td class="l m b0 r0 l0 t0 lines">2</td>
                        <td class="l m b0 r0 l0 t0 lines">-3</td>
                        <td class="l m b0 r0 l0 t0 lines">-4</td>
                        <td class="l m b0 r0 l0 t0 lines">-5</td>
                      </tr>
                    </table>
                  </div>
                </figure>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.11.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_clicktd4">
                <span data-question="">
                  <div class="para" id="clicktd4-1-1">Click on the value at row index 0 and column index 2</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="clicktd4-2-1">Rows are horizontal and columns are vertical and both start with index 0.</div>
                </span>
                <figure class="table table-like" id="clicktd4-3-1">
                  <figcaption>
                    <span class="type">Table</span>
                    <span class="space"> </span>
                    <span class="codenumber">4.11.11<span class="period">.</span></span>
                    <span class="space"> </span>
                  </figcaption>
                  <div class="tabular-box natural-width">
                    <table class="tabular">
                      <tr>
                        <td class="l m b0 r0 l0 t0 lines">8</td>
                        <td class="l m b0 r0 l0 t0 lines">-2</td>
                        <td class="l m b0 r0 l0 t0 lines">3</td>
                        <td class="l m b0 r0 l0 t0 lines">-1</td>
                      </tr>
                      <tr>
                        <td class="l m b0 r0 l0 t0 lines">4</td>
                        <td class="l m b0 r0 l0 t0 lines">5</td>
                        <td class="l m b0 r0 l0 t0 lines">0</td>
                        <td class="l m b0 r0 l0 t0 lines">-7</td>
                      </tr>
                      <tr>
                        <td class="l m b0 r0 l0 t0 lines">2</td>
                        <td class="l m b0 r0 l0 t0 lines">-3</td>
                        <td class="l m b0 r0 l0 t0 lines">-4</td>
                        <td class="l m b0 r0 l0 t0 lines">-5</td>
                      </tr>
                    </table>
                  </div>
                </figure>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.11.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_clicktd5">
                <span data-question="">
                  <div class="para" id="clicktd5-1-1">Click on the value at row index 1 and column index 1</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="clicktd5-2-1">Rows are horizontal and columns are vertical and both start with index 0.</div>
                </span>
                <figure class="table table-like" id="clicktd5-3-1">
                  <figcaption>
                    <span class="type">Table</span>
                    <span class="space"> </span>
                    <span class="codenumber">4.11.13<span class="period">.</span></span>
                    <span class="space"> </span>
                  </figcaption>
                  <div class="tabular-box natural-width">
                    <table class="tabular">
                      <tr>
                        <td class="l m b0 r0 l0 t0 lines">8</td>
                        <td class="l m b0 r0 l0 t0 lines">-2</td>
                        <td class="l m b0 r0 l0 t0 lines">3</td>
                        <td class="l m b0 r0 l0 t0 lines">-1</td>
                      </tr>
                      <tr>
                        <td class="l m b0 r0 l0 t0 lines">4</td>
                        <td class="l m b0 r0 l0 t0 lines">5</td>
                        <td class="l m b0 r0 l0 t0 lines">0</td>
                        <td class="l m b0 r0 l0 t0 lines">-7</td>
                      </tr>
                      <tr>
                        <td class="l m b0 r0 l0 t0 lines">2</td>
                        <td class="l m b0 r0 l0 t0 lines">-3</td>
                        <td class="l m b0 r0 l0 t0 lines">-4</td>
                        <td class="l m b0 r0 l0 t0 lines">-5</td>
                      </tr>
                    </table>
                  </div>
                </figure>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.11.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_2daNumElfill">
                <div class="para" id="2daNumElfill-1-1">8-1-6: How many elements are in ticketInfo? <input type="text" placeholder="Text"/></div>
                <script type="application/json">[[{"regex": "^\\s*^\\s*6$\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"2daNumElfill-2-1-1-1-1\"&gt;Correct.  2 * 3 = 6&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"2daNumElfill-2-1-2-1-1\"&gt;Multiply the number of rows and the number of columns&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.11.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_2DArrayCreate">
                <div class="ac_question" id="csawesome2_2_2DArrayCreate_question">
                  <div class="para" id="2DArrayCreate-1-1">What will the following code print out? Can you change ticketInfo to be an array of 5 rows and 10 columns? Can you declare another array called studentNames that has 10 rows and 5 columns? The length property of arrays will be explained in the next lesson.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_2DArrayCreate_editor" data-question_label="" data-codelens="true">public class TicketInfo
{
    public static void main(String[] args)
    {
        // declare arrays
        int[][] ticketInfo = new int[2][3];
        System.out.println(ticketInfo.length + " rows");
        System.out.println(ticketInfo[0].length + " columns");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TicketInfo");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expected = "5 rows\n10 columns";

        boolean passed = output.contains(expected);
        passed =
                getResults(expected, output, "Changed ticketInfo to 5 rows and 10 columns", passed);

        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String expected = "studentNames = new String[10][5]";

        boolean passed = checkCodeContains(expected);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.11.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_2DArraySet">
                <div class="ac_question" id="csawesome2_2_2DArraySet_question">
                  <div class="para" id="2DArraySet-1-1">Add another row of data to the arrays by changing the size of the arrays and adding in the assignment statements for the cells in those rows.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_2DArraySet_editor" data-question_label="" data-codelens="true">public class TwoDArraySet
{
    public static void main(String[] args)
    {
        // declare arrays
        int[][] ticketInfo;
        String[][] seatingChart;

        // create arrays
        ticketInfo = new int[2][3];
        seatingChart = new String[3][2];

        // initialize the array elements
        ticketInfo[0][0] = 15;
        ticketInfo[0][1] = 10;
        ticketInfo[0][2] = 15;
        ticketInfo[1][0] = 25;
        ticketInfo[1][1] = 20;
        ticketInfo[1][2] = 25;
        seatingChart[0][0] = "Jamal";
        seatingChart[0][1] = "Maria";
        seatingChart[1][0] = "Jacob";
        seatingChart[1][1] = "Suzy";
        seatingChart[2][0] = "Emma";
        seatingChart[2][1] = "Luke";

        // print the contents
        System.out.println(ticketInfo);
        System.out.println(seatingChart);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TwoDArraySet");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expected = "[[I@", expected2 = "[[Ljava.lang.String;@";

        boolean passed = output.contains(expected) &amp;&amp; output.contains(expected2);

        passed = getResults("true", "" + passed, "Prints two 2D arrays");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String code = getCode();
        String expected = "new String[4][2]";

        boolean passed = code.contains(expected);

        passed = getResults("true", "" + passed, "Add another row to seatingChart");
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCode();
        String expected1 = "seatingChart[3][0]";
        String expected2 = "seatingChart[3][1]";

        boolean passed = code.contains(expected1) &amp;&amp; code.contains(expected2);

        passed = getResults("true", "" + passed, "Give values to new elements");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.11.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qa2dab_1" data-multipleanswers="false">
                <div class="para" id="qa2dab_1-1-1">8-1-9: Which of the following sets the value for the 3rd row and 2nd column of a 2D array called <code class="code-inline tex2jax_ignore">nums</code>?</div>
                <li data-component="answer" id="csawesome2_2_qa2dab_1_opt_a">
                  <div class="para" id="qa2dab_1-2-1-1-1">nums[3][2] = 5;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2dab_1_opt_a">
                  <div class="para" id="qa2dab_1-2-1-2-1">Remember that the indices start at 0.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qa2dab_1_opt_b">
                  <div class="para" id="qa2dab_1-2-2-1-1">nums[1][2] = 5;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2dab_1_opt_b">
                  <div class="para" id="qa2dab_1-2-2-2-1">Remember that the row is first then the column.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qa2dab_1_opt_c" data-correct="">
                  <div class="para" id="qa2dab_1-2-3-1-1">nums[2][1] = 5;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2dab_1_opt_c">
                  <div class="para" id="qa2dab_1-2-3-2-1">This will set the value  of the 3rd row and 2nd column.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qa2dab_1_opt_d">
                  <div class="para" id="qa2dab_1-2-4-1-1">nums[2][3] = 5;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2dab_1_opt_d">
                  <div class="para" id="qa2dab_1-2-4-2-1">Remember that the row is first and then the column and that the indices start at 0.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.11.18 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_2daGetElfill">
                <div class="para" id="2daGetElfill-1-1">8-1-10: What is the value at <code class="code-inline tex2jax_ignore">seatingInfo[2][1]</code> after the code above executes? <input type="text" placeholder="Text"/></div>
                <script type="application/json">[[{"regex": "^\\s*^\\s*Luke$\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"2daGetElfill-2-1-1-1-1\"&gt;Correct.  The string at row index 2 and column index 1 is Luke.&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"2daGetElfill-2-1-2-1-1\"&gt;indices start at 0 and the row is first then the column&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.11.19 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qa2dab_2" data-multipleanswers="false">
                <div class="para" id="qa2dab_2-1-1">8-1-11: What is the value of <code class="code-inline tex2jax_ignore">name</code> after the code above executes?</div>
                <li data-component="answer" id="csawesome2_2_qa2dab_2_opt_a">
                  <div class="para" id="qa2dab_2-2-1-1-1">Jamal</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2dab_2_opt_a">
                  <div class="para" id="qa2dab_2-2-1-2-1">This would be true for if name was set to seatingInfo[0][0]; instead.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qa2dab_2_opt_b" data-correct="">
                  <div class="para" id="qa2dab_2-2-2-1-1">Maria</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2dab_2_opt_b">
                  <div class="para" id="qa2dab_2-2-2-2-1">Maria is the value of seatingInfo[0][1];.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qa2dab_2_opt_c">
                  <div class="para" id="qa2dab_2-2-3-1-1">Jake</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2dab_2_opt_c">
                  <div class="para" id="qa2dab_2-2-3-2-1">This would be true for if name was set to seatingInfo[1][0]; instead.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qa2dab_2_opt_d">
                  <div class="para" id="qa2dab_2-2-4-1-1">Suzy</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2dab_2_opt_d">
                  <div class="para" id="qa2dab_2-2-4-2-1">This would be true for if name was set to seatingInfo[1][1]; instead.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qa2dab_2_opt_e">
                  <div class="para" id="qa2dab_2-2-5-1-1">Emma</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2dab_2_opt_e">
                  <div class="para" id="qa2dab_2-2-5-2-1">This would be true for if name was set to seatingInfo[2][1]; instead.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.11.20 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_2DArrayInitGet">
                <div class="ac_question" id="csawesome2_2_2DArrayInitGet_question">
                  <div class="para" id="2DArrayInitGet-1-1">Add another row to seatingInfo initialized to your name and a friend’s name. Get these names out of the array using the correct indices and then print them out.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_2DArrayInitGet_editor" data-question_label="" data-codelens="true">public class TwoDArrayInitGet
{
    public static void main(String[] args)
    {
        String[][] seatingInfo =
        {
            {"Jamal", "Maria"},
            {"Jake", "Suzy"},
            {"Emma", "Luke"}
        };
        String name = seatingInfo[0][0];
        System.out.println(name + " is at [0,0]");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TwoDArrayInitGet");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expected = "Jamal is at [0,0]";

        boolean passed = output.contains(expected);

        passed = getResults("true", "" + passed, "Output contains " + expected);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String output = getMethodOutput("main");
        String[] lines = output.split("\n");

        String expected = "[3,0]";
        String actual = "";

        boolean passed = false;

        for (String l : lines)
        {
            if (l.replaceAll(" ", "").contains(expected))
            {
                actual = l;
                passed = true;
            }
        }

        passed =
                getResults(
                        "Name is at " + expected,
                        actual,
                        "Add one name to new row and print it out",
                        passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String output = getMethodOutput("main");
        String[] lines = output.split("\n");

        String expected = "[3,1]";
        String actual = "";

        boolean passed = false;

        for (String l : lines)
        {
            if (l.replaceAll(" ", "").contains(expected))
            {
                actual = l;
                passed = true;
            }
        }

        passed =
                getResults(
                        "Name is at " + expected,
                        actual,
                        "Add second name to new row and print it out",
                        passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.11.21 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-8-1-ascii-art">
                <div class="ac_question" id="csawesome2_2_challenge-8-1-ascii-art_question">
                  <div class="para" id="challenge-8-1-ascii-art-1-1">Part 1: Add 2 assignment statements for the 2D array asciiArt to change the “o” characters to “@” characters. Part 2: Create a new asciiArt array and print it out.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-8-1-ascii-art_editor" data-question_label="" data-codelens="true">public class AsciiArt
{
    public static void main(String[] args)
    {

        String[][] asciiArt =
        {
            {" ", " ", "_", "_", "_", " ", " "},
            {" ", "(", "o", " ", "o", ")", " "},
            {"(", " ", " ", "V", " ", " ", ")"},
            {" ", "-", "m", "-", "m", "-", " "},
        };

        // Part 1: Add 2 assignment statements to change "o" to "@"

        // print the asciiArt for Part 1
        System.out.println("ASCII Art:");
        for (String[] row : asciiArt)
        {
            for (String column : row) System.out.print(column);
            System.out.println();
        }

        // Part 2: Create your own ASCII art array and print it out!

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("AsciiArt");
    }

    @Test
    public void test0()
    {
        String output = getMethodOutput("main");
        String expect = "ASCII Art: \n___  \n (@ @) \n(  V  )\n -m-m-";

        boolean passed = getResults(expect, output, "Running main()", true);
        assertTrue(passed);
    }

    /* removed because doesn't work if their own art has o
    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "ASCII Art: \n___  \n (@ @) \n(  V  )\n -m-m-";

        boolean passed = output.contains("@") &amp;&amp; !output.contains("o");
        passed = getResults(expect, output, "changed o to @", passed);
        assertTrue(passed);
    }
    */

    @Test
    public void test2()
    {
        String output = getMethodOutput("main");
        String expect = "___  \n (@ @) \n(  V  )\n -m-m-";

        if (output.contains("-m-m-"))
        {
            int i = output.indexOf("-m-m-") + "-m-m-".length();
            output = output.substring(i);
        }

        String[] lines = output.split("\n");

        boolean passed = output.length() &gt;= 10 &amp;&amp; lines.length &gt;= 3;

        passed =
                getResults(
                        "Your art",
                        output,
                        "added your own ascii art (should be at least 3 x 3)",
                        passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String expect = "asciiArt[#][#] = \"@\"";
        String code = getCode();
        int num = countOccurencesRegex(code, expect);

        boolean passed = num &gt;= 2;

        getResults("2", "" + num, "Number of asciiArt[#][#] = \"@\" lines in code", passed);

        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>nested-loops-for-2d-arrays</id>
      <title>Nested Loops for 2D Arrays</title>
      <question>
        <label>Exercise 4.12.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qa2ldb_2" data-multipleanswers="false">
                <div class="para" id="qa2ldb_2-1-1">8-2-1: How many rows does <code class="code-inline tex2jax_ignore">a</code> have if it is created as follows <code class="code-inline tex2jax_ignore">int[][] a = { {2, 4, 6, 8}, {1, 2, 3, 4}};</code>?</div>
                <li data-component="answer" id="csawesome2_2_qa2ldb_2_opt_a" data-correct="">
                  <div class="para" id="qa2ldb_2-2-1-1-1">2</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2ldb_2_opt_a">
                  <div class="para" id="qa2ldb_2-2-1-2-1">The size of outer list is the number of rows.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qa2ldb_2_opt_b">
                  <div class="para" id="qa2ldb_2-2-2-1-1">4</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2ldb_2_opt_b">
                  <div class="para" id="qa2ldb_2-2-2-2-1">The size of the inner list is the number of columns.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qa2ldb_2_opt_c">
                  <div class="para" id="qa2ldb_2-2-3-1-1">8</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2ldb_2_opt_c">
                  <div class="para" id="qa2ldb_2-2-3-2-1">This is the total number of items in the array.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.12.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qa2ldb_3" data-multipleanswers="false">
                <div class="para" id="qa2ldb_3-1-1">8-2-2: Which of the following would I use to get the value in the third row and second column from a 2D array called <code class="code-inline tex2jax_ignore">nums</code>?</div>
                <li data-component="answer" id="csawesome2_2_qa2ldb_3_opt_a">
                  <div class="para" id="qa2ldb_3-2-1-1-1">nums[3][2]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2ldb_3_opt_a">
                  <div class="para" id="qa2ldb_3-2-1-2-1">This would be true if array indices started with 1 but they start with 0.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qa2ldb_3_opt_b">
                  <div class="para" id="qa2ldb_3-2-2-1-1">nums[2][3]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2ldb_3_opt_b">
                  <div class="para" id="qa2ldb_3-2-2-2-1">This would be true if array indices started with 1 and the column was specified first.  However, array indices start at 0 and the row is given first in row-major order.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qa2ldb_3_opt_c" data-correct="">
                  <div class="para" id="qa2ldb_3-2-3-1-1">nums[2][1]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2ldb_3_opt_c">
                  <div class="para" id="qa2ldb_3-2-3-2-1">Array indices start with 0 so the third row has an index of 2 and the second column has an index of 1.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qa2ldb_3_opt_d">
                  <div class="para" id="qa2ldb_3-2-4-1-1">nums[1][2]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2ldb_3_opt_d">
                  <div class="para" id="qa2ldb_3-2-4-2-1">This would be true if the column index was first, but in row-major order the row index is first.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.12.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcgetAverage">
                <div class="ac_question" id="csawesome2_2_lcgetAverage_question">
                  <div class="para" id="lcgetAverage-1-1">What does the following code do? Add another row of numbers to the matrix. Will the loops traverse this row too? Use the CodeLens button to trace through the code. Note that an array can be passed in as an argument to a method.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcgetAverage_editor" data-question_label="" data-codelens="true">public class Test1
{

    public static double getAverage(int[][] a)
    {
        double total = 0;
        int value = 0;
        for (int row = 0; row &lt; a.length; row++)
        {
            for (int col = 0; col &lt; a[0].length; col++)
            {
                value = a[row][col];
                total = total + value;
            }
        }
        return total / (a.length * a[0].length);
    }

    public static void main(String[] args)
    {
        int[][] matrix = { {1, 2, 3}, {4, 5, 6}};
        System.out.println(getAverage(matrix));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expected = "3.5";

        boolean passed = !output.contains(expected);

        passed = getResults("true", "" + passed, "Average has changed");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String code = getCode();
        String expected = "int[][] matrix = { {1,2,3},{4,5,6}};";

        boolean passed = !code.replaceAll(" ", "").contains(expected.replaceAll(" ", ""));

        passed = getResults("true", "" + passed, "Matrix has been changed");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.12.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_9_largest">
                <div class="parsons_question parsons-text">
                  <div class="para" id="9_largest-1-1">The following has the correct code to find the largest value in a 2D array. Drag the blocks from the left into the correct order on the right and indent them as well. Check your solution by clicking on the Check button.  You will be told if any of the blocks are in the wrong order or have the wrong indention.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public static int getLargest(int[][] arr)
{
---
 int largest = arr[0][0];
 int current = 0;
 for (int r = 0; r &lt; arr.length; r++)
 {
 
---
   for (int c = 0; c &lt; arr[0].length; c++)
   {
 
---
     current = arr[r][c];
     if (current &gt; largest)
     {
 
---
       largest = current;
 
---
     } // end if
 
---
   } // end column loop
 
---
 } // end row loop
 return largest;
---
} // end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.12.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ColumnMajorTraversal">
                <div class="ac_question" id="csawesome2_2_ColumnMajorTraversal_question">
                  <div class="para" id="ColumnMajorTraversal-1-1">What will the following code print out? Try to guess before you run it.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ColumnMajorTraversal_editor" data-question_label="" data-codelens="true">public class ColumnMajorTraversal
{
    public static void main(String[] args)
    {
        int[][] array = { {1, 2, 3}, {4, 5, 6}};
        for (int col = 0; col &lt; array[0].length; col++)
        {
            for (int row = 0; row &lt; array.length; row++)
            {
                System.out.println(array[row][col]);
            }
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expected = "1\n4\n2\n5\n3\n6";

        boolean passed = getResults(expected, output, "main()", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.12.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP8-2-1" data-multipleanswers="false"><div class="para" id="AP8-2-1-1-1">8-2-6: Consider the following code segment. What is the last row of numbers printed when this code segment is executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java"> int[][] points = { {11, 12, 13, 14, 15},
                    {21, 22, 23, 24, 25},
                    {31, 32, 33, 34, 35},
                    {41, 42, 43, 44, 45}};
 for (int row = 0; row &lt; points.length; row++)
 {
     for (int col = points[0].length - 1; col &gt;= row; col--)
     {
          System.out.print(points[row][col] + " ");
     }
     System.out.println();
}
</code></pre></div><li data-component="answer" id="csawesome2_2_AP8-2-1_opt_a"><div class="para" id="AP8-2-1-2-1-1-1">45 44 43 42 41</div></li><li data-component="feedback" id="csawesome2_2_AP8-2-1_opt_a"><div class="para" id="AP8-2-1-2-1-2-1">Trace through the code. Notice that the inner loop stops at index row.</div></li><li data-component="answer" id="csawesome2_2_AP8-2-1_opt_b"><div class="para" id="AP8-2-1-2-2-1-1">45</div></li><li data-component="feedback" id="csawesome2_2_AP8-2-1_opt_b"><div class="para" id="AP8-2-1-2-2-2-1">Trace through the code. Notice that the inner loop stops at index row.</div></li><li data-component="answer" id="csawesome2_2_AP8-2-1_opt_c"><div class="para" id="AP8-2-1-2-3-1-1">41 42</div></li><li data-component="feedback" id="csawesome2_2_AP8-2-1_opt_c"><div class="para" id="AP8-2-1-2-3-2-1">Trace through the code. Notice that the inner loop works through the row backwards.</div></li><li data-component="answer" id="csawesome2_2_AP8-2-1_opt_d" data-correct=""><div class="para" id="AP8-2-1-2-4-1-1">45 44</div></li><li data-component="feedback" id="csawesome2_2_AP8-2-1_opt_d"><div class="para" id="AP8-2-1-2-4-2-1">Correct!</div></li><li data-component="answer" id="csawesome2_2_AP8-2-1_opt_e"><div class="para" id="AP8-2-1-2-5-1-1">44 45</div></li><li data-component="feedback" id="csawesome2_2_AP8-2-1_opt_e"><div class="para" id="AP8-2-1-2-5-2-1">Trace through the code. Notice that the inner loop works through the row backwards.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.12.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_getAvgForEach">
                <div class="ac_question" id="csawesome2_2_getAvgForEach_question">
                  <div class="para" id="getAvgForEach-1-1">Nested for-each loops demo. Click on the CodeLens button to trace through the code.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_getAvgForEach_editor" data-question_label="" data-codelens="true">public class Average
{

    public static double getAvg(int[][] a)
    {
        double total = 0;
        for (int[] innerArray : a)
        {
            for (int val : innerArray)
            {
                total = total + val;
            }
        }
        return total / (a.length * a[0].length);
    }

    public static void main(String[] args)
    {
        int[][] theArray = { {80, 90, 70}, {20, 80, 75}};
        System.out.println(getAvg(theArray));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "69.16666666666667";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.12.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lca2dloopPart">
                <div class="ac_question" id="csawesome2_2_lca2dloopPart_question">
                  <div class="para" id="lca2dloopPart-1-1">What will the following code print out? Can you complete the  method called <code class="code-inline tex2jax_ignore">getTotalForCol</code> that gets the total for a column? To do this, you must loop through the rows. The array’s length will tell you how many rows you have since it is an array of arrays, while the length of the array’s first element will tell you how many columns.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lca2dloopPart_editor" data-question_label="" data-codelens="true">public class Total
{

    public static int getTotalForRow(int row, int[][] a)
    {
        int total = 0;
        for (int col = 0; col &lt; a[0].length; col++)
        {
            total = total + a[row][col];
        }
        return total;
    }

    // Complete the method getTotalForCol below
    public static int getTotalForCol(int col, int[][] a)
    {
        int total = 0;
        // Add a loop here to total a column col

        return total;
    }

    public static void main(String[] args)
    {
        int[][] matrix = { {1, 2, 3}, {4, 5, 6}};
        System.out.println(getTotalForRow(0, matrix));
        System.out.println(getTotalForCol(0, matrix));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Total");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "6\n5";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        int[][] array = { {1, 4, 8}, {6, 7, 9}};
        int value = 0;
        Object[] args = {value, array};

        String output = getMethodOutput("getTotalForCol", args);
        String expect = "7";

        boolean passed =
                getResults(expect, output, "Testing getTotalForCol(0, { {1, 4,8},{6, 7, 9} })");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.12.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lca2dloopPart2">
                <div class="ac_question" id="csawesome2_2_lca2dloopPart2_question">
                  <div class="para" id="lca2dloopPart2-1-1">Looping through just part of a 2D array.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lca2dloopPart2_editor" data-question_label="" data-codelens="true">public class Count
{
    public static int countValues(int value, int[][] a, int rowStart,
                               int rowEnd, int colStart, int colEnd)
    {
        int count = 0;
        for (int row = rowStart; row &lt;= rowEnd; row++)
        {
            for (int col = colStart; col &lt;= colEnd; col++)
            {
                if (a[row][col] == value)
                {
                     count++;
                }
            }
        }
        return count;
    }

    public static void main(String[] args)
    {
        int[][] matrix = { {3, 2, 3}, {4, 3, 6}, {8, 9, 3}, {10, 3, 3}};
        System.out.println(countValues(3, matrix, 0, 2, 0, 2));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "4";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.12.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_linearSearch2DArrays">
                <div class="ac_question" id="csawesome2_2_linearSearch2DArrays_question">
                  <div class="para" id="linearSearch2DArrays-1-1">What will the following code print? Can you change the code to work for a String 2D array instead of an int array? Note that the indices row and col will still be ints.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_linearSearch2DArrays_editor" data-question_label="" data-codelens="true">public class Search
{
    public static boolean search(int[][] array, int value)
    {
        boolean found = false;
        for (int row = 0; row &lt; array.length; row++)
        {
            for (int col = 0; col &lt; array[0].length; col++)
            {
                if (array[row][col] == value)
                {
                     found = true;
                }
            }
        }
        return found;
    }

    public static void main(String[] args)
    {
        int[][] matrix = { {3, 2, 3}, {4, 3, 6}, {8, 9, 3}, {10, 3, 3}};
        System.out.println(search(matrix, 10));
        System.out.println(search(matrix, 11));

        // Comment out the code above, and try these:
        // String[][] matrix2 = { {"a","b","c"},{"d","e","f"} };
        // System.out.println(search(matrix2, "b"));

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Search");
    }

    @Test
    public void test2()
    {
        String[][] array = { {"a", "b", "c"}, {"d", "e", "f"}, {"g", "h", "i"}, {"j", "k", "l"}};
        String value = "b";
        Object[] args = {array, value};

        String output = getMethodOutput("search", args);
        String expect = "true";

        boolean passed =
                getResults(
                        expect,
                        output,
                        "Testing search({"
                            + " {\"a\",\"b\",\"c\"},{\"d\",\"e\",\"f\"},{\"g\",\"h\",\"i\"},{\"j\",\"k\",\"l\""
                            + " } }, \"b\")");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.12.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-8-2-picture">
                <div class="ac_question" id="csawesome2_2_challenge-8-2-picture_question">
                  <div class="para" id="challenge-8-2-picture-1-1">Picture Lab: 1) write a method called keepOnlyBlue() that keeps only the blue values by setting the red and green values to zero. Uncomment the code in main to test it. 2) write a method called switchColors() that replaces red values (using p.setRed) with green or blue values (using p.getGreen(), etc.) to change the colors around. Uncomment the code in main to test it.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-8-2-picture_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /** zeroBlue() method sets the blue values at all pixels to zero */
    public void zeroBlue()
    {
        Pixel[][] pixels = this.getPixels2D();

        for (Pixel[] rowArray : pixels)
        {
            for (Pixel p : rowArray)
            {
                p.setBlue(0);
            }
        }
    }

    /* Add new methods here.
       keepOnlyBlue() method sets the red and green values at all pixels to zero.
       switchColors() method switches colors, for example the red values with green values, etc.
    */

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        Picture arch = new Picture("arch.jpg");
        arch.show();
        arch.zeroBlue();
        arch.show();

        // Uncomment the follow code to test your keepOnlyBlue method.
        /*
        Picture arch2 = new Picture("arch.jpg");
        System.out.println("Keep only blue: ");
        arch2.keepOnlyBlue();// using new method
        arch2.show();
        */
        System.out.println();

        // Uncomment the follow code to test your swithColors method.
        /*
        Picture arch3 = new Picture("arch.jpg");
        System.out.println("Switch colors: ");
        arch3.switchColors();// using new method
        arch3.show();
        */
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void keepOnlyBlue()";
        boolean passed = checkCodeContains("keepOnlyBlue() method", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = ".setGreen(0);";
        boolean passed =
                checkCodeContains("keepOnlyBlue() setting green pixels to the number 0", target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "for";
        String code = getCode();
        int index = code.indexOf("public void keepOnlyBlue()");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index, index + 200);
            int num = countOccurences(code, target);
            passed = num == 2;
        }
        getResults(
                "true", "" + passed, "Checking that keepOnlyBlue() contains 2 for loops", passed);
        assertTrue(passed);
    }

    @Test
    public void testSwitch1()
    {
        String target = "public void switchColors()";
        boolean passed = checkCodeContains("switchColors() method", target);
        assertTrue(passed);
    }

    @Test
    public void testSwitch2()
    {
        String target = ".getGreen()";
        boolean passed = checkCodeContains("switchColors() uses getGreen()", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.12.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_AP8-2-2" data-multipleanswers="false"><div class="para" id="AP8-2-2-1-1">8-2-12: Consider the following code segment. What is the value of sum as a result of executing the code segment?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int[][] arr = { {1, 2, 3, 4},
                {5, 6, 7, 8},
                {9, 10, 11, 12} };
int sum = 0;
for (int[] x : arr)
{
    for (int y = 0; y &lt; x.length - 1; y++)
    {
         sum += x[y];
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_AP8-2-2_opt_a"><div class="para" id="AP8-2-2-2-1-1-1">36</div></li><li data-component="feedback" id="csawesome2_2_AP8-2-2_opt_a"><div class="para" id="AP8-2-2-2-1-2-1">Trace through the code.</div></li><li data-component="answer" id="csawesome2_2_AP8-2-2_opt_b" data-correct=""><div class="para" id="AP8-2-2-2-2-1-1">54</div></li><li data-component="feedback" id="csawesome2_2_AP8-2-2_opt_b"><div class="para" id="AP8-2-2-2-2-2-1">Correct!</div></li><li data-component="answer" id="csawesome2_2_AP8-2-2_opt_c"><div class="para" id="AP8-2-2-2-3-1-1">63</div></li><li data-component="feedback" id="csawesome2_2_AP8-2-2_opt_c"><div class="para" id="AP8-2-2-2-3-2-1">Trace through the code.</div></li><li data-component="answer" id="csawesome2_2_AP8-2-2_opt_d"><div class="para" id="AP8-2-2-2-4-1-1">68</div></li><li data-component="feedback" id="csawesome2_2_AP8-2-2_opt_d"><div class="para" id="AP8-2-2-2-4-2-1">Trace through the code.</div></li><li data-component="answer" id="csawesome2_2_AP8-2-2_opt_e"><div class="para" id="AP8-2-2-2-5-1-1">78</div></li><li data-component="feedback" id="csawesome2_2_AP8-2-2_opt_e"><div class="para" id="AP8-2-2-2-5-2-1">Notice that the inner loop goes up to but not including x.length - 1.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-001286</id>
      <title>Free Response Questions</title>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_frgia_1" data-multipleanswers="false">
                <div class="para" id="frgia_1-1-1">9-10-1: What kind of loop could you use to solve this problem?</div>
                <li data-component="answer" id="csawesome2_2_frgia_1_opt_a">
                  <div class="para" id="frgia_1-2-1-1-1">single for each loop</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frgia_1_opt_a">
                  <div class="para" id="frgia_1-2-1-2-1">This is a two-dimensional array so you would need a nested for-each loop.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frgia_1_opt_b" data-correct="">
                  <div class="para" id="frgia_1-2-2-1-1">nested for loop</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frgia_1_opt_b">
                  <div class="para" id="frgia_1-2-2-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frgia_1_opt_c">
                  <div class="para" id="frgia_1-2-3-1-1">nested while loop</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frgia_1_opt_c">
                  <div class="para" id="frgia_1-2-3-2-1">You could use a nested while loop, but since you know the numbers of rows and columns a nested for loop is usually better since with a while loop you could forget to increment the row or column index.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_frgia_1.5" data-multipleanswers="false">
                <div class="para" id="frgia_1.5-1-1">9-10-2: What is another kind of loop you could use to solve this problem?</div>
                <li data-component="answer" id="csawesome2_2_frgia_1.5_opt_a" data-correct="">
                  <div class="para" id="frgia_1.5-2-1-1-1">nested for each loop</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frgia_1.5_opt_a">
                  <div class="para" id="frgia_1.5-2-1-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frgia_1.5_opt_b">
                  <div class="para" id="frgia_1.5-2-2-1-1">single for loop</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frgia_1.5_opt_b">
                  <div class="para" id="frgia_1.5-2-2-2-1">For a two-dimensional array you would need to use a nested for loop.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_frgia_1.5_opt_c">
                  <div class="para" id="frgia_1.5-2-3-1-1">nested switch statement</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_frgia_1.5_opt_c">
                  <div class="para" id="frgia_1.5-2-3-2-1">Nested switch statements would not work in this situation and are generally convoluted and difficult to read.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test
{
    public static void main(String[] args)
    {
        for (int i = 0; i &lt; 5; i++)
        {
            for (int j = 0; j &lt; 5; j++)
            {
                System.out.print(j);
            }
            System.out.println();
        }
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test
{
    public static void main(String[] args)
    {
        int[][] arr = new int[5][5];
        for (int[] row : arr)
        {
            for (int ent : row)
            {
                System.out.print(ent);
            }
            System.out.println();
        }
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.13.1.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_2012GreyScale_alg_ans" data-multipleanswers="false">
                <div class="para" id="2012GreyScale_alg_ans-1-1">9-10-6: Which class is <code class="code-inline tex2jax_ignore">countWhitePixels</code> a method in?</div>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg_ans_opt_a">
                  <div class="para" id="2012GreyScale_alg_ans-2-1-1-1">pixelValues</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg_ans_opt_a">
                  <div class="para" id="2012GreyScale_alg_ans-2-1-2-1">Pixel values is a private member variable of the overall class, it is not the class that contains countWhitePixels</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg_ans_opt_b">
                  <div class="para" id="2012GreyScale_alg_ans-2-2-1-1">greyimage</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg_ans_opt_b">
                  <div class="para" id="2012GreyScale_alg_ans-2-2-2-1">Capitalization and spelling are important! Check the class name again carefully.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg_ans_opt_c">
                  <div class="para" id="2012GreyScale_alg_ans-2-3-1-1">countWhitePixels</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg_ans_opt_c">
                  <div class="para" id="2012GreyScale_alg_ans-2-3-2-1">This is the name of the method you are writing! Since it is not a constructor, the overall Class name cannot be countWhitePixels</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg_ans_opt_d" data-correct="">
                  <div class="para" id="2012GreyScale_alg_ans-2-4-1-1">GrayImage</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg_ans_opt_d">
                  <div class="para" id="2012GreyScale_alg_ans-2-4-2-1">Correct!</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.13.1.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_2012GreyScale_alg1_ans" data-multipleanswers="false">
                <div class="para" id="2012GreyScale_alg1_ans-1-1">9-10-7: What array will you be modifying in this method?</div>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg1_ans_opt_a" data-correct="">
                  <div class="para" id="2012GreyScale_alg1_ans-2-1-1-1">pixelValues</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg1_ans_opt_a">
                  <div class="para" id="2012GreyScale_alg1_ans-2-1-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg1_ans_opt_b">
                  <div class="para" id="2012GreyScale_alg1_ans-2-2-1-1">You need to initialize your own</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg1_ans_opt_b">
                  <div class="para" id="2012GreyScale_alg1_ans-2-2-2-1">This method iterates through an already existing image, which can be found in the GreyImage class initialization.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg1_ans_opt_c">
                  <div class="para" id="2012GreyScale_alg1_ans-2-3-1-1">countWhitePixels</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg1_ans_opt_c">
                  <div class="para" id="2012GreyScale_alg1_ans-2-3-2-1">This is the name of the method you are writing, not an array.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg1_ans_opt_d">
                  <div class="para" id="2012GreyScale_alg1_ans-2-4-1-1">This method is called using the dot operation so you can just write "this"</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg1_ans_opt_d">
                  <div class="para" id="2012GreyScale_alg1_ans-2-4-2-1">Although this method is called with the dot operator, you still need to specify the name of the array and cannot only write "this"</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.13.1.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_2012GreyScale_alg2_ans" data-multipleanswers="false">
                <div class="para" id="2012GreyScale_alg2_ans-1-1">9-10-8: What could you write for the outer for loop so that it iterates through the rows of the array?</div>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg2_ans_opt_a">
                  <div class="para" id="2012GreyScale_alg2_ans-2-1-1-1">(int row = 0; row &lt; pixelValues.length - 1; row++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg2_ans_opt_a">
                  <div class="para" id="2012GreyScale_alg2_ans-2-1-2-1">This does not iterate through all the rows of the array</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg2_ans_opt_b" data-correct="">
                  <div class="para" id="2012GreyScale_alg2_ans-2-2-1-1">(int row = 0; row &lt; pixelValues.length; row++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg2_ans_opt_b">
                  <div class="para" id="2012GreyScale_alg2_ans-2-2-2-1">Correct</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg2_ans_opt_c">
                  <div class="para" id="2012GreyScale_alg2_ans-2-3-1-1">(int row = 0; row &lt; pixelValues.height; row++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg2_ans_opt_c">
                  <div class="para" id="2012GreyScale_alg2_ans-2-3-2-1">The .height method does not exist</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg2_ans_opt_d">
                  <div class="para" id="2012GreyScale_alg2_ans-2-4-1-1">(int row = 0; row &lt; pixelValues.height - 1; row++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg2_ans_opt_d">
                  <div class="para" id="2012GreyScale_alg2_ans-2-4-2-1">The .height method does not exist</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.13.1.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_2012GreyScale_alg3_ans" data-multipleanswers="false">
                <div class="para" id="2012GreyScale_alg3_ans-1-1">9-10-9: What could you write for the inner for loop so that it iterates through the columns of the array?</div>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg3_ans_opt_a">
                  <div class="para" id="2012GreyScale_alg3_ans-2-1-1-1">(int col = 0; col &lt;= row; col++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg3_ans_opt_a">
                  <div class="para" id="2012GreyScale_alg3_ans-2-1-2-1">This does not correctly iterate through all the columns in the array</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg3_ans_opt_b">
                  <div class="para" id="2012GreyScale_alg3_ans-2-2-1-1">(int col = 0; col &lt; pixelValues[0].length - 1; col++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg3_ans_opt_b">
                  <div class="para" id="2012GreyScale_alg3_ans-2-2-2-1">This stops one short of iterating through the whole array</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg3_ans_opt_c">
                  <div class="para" id="2012GreyScale_alg3_ans-2-3-1-1">(int col = 0; col &lt; row; col++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg3_ans_opt_c">
                  <div class="para" id="2012GreyScale_alg3_ans-2-3-2-1">This does not correctly iterate through all the columns in the array</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg3_ans_opt_d" data-correct="">
                  <div class="para" id="2012GreyScale_alg3_ans-2-4-1-1">(int col = 0; col &lt; pixelValues[0].length; col++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg3_ans_opt_d">
                  <div class="para" id="2012GreyScale_alg3_ans-2-4-2-1">Correct!</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.13.1.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_2012GreyScale_alg4_ans" data-multipleanswers="false">
                <div class="para" id="2012GreyScale_alg4_ans-1-1">9-10-10: how could you check if the current value is white?</div>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg4_ans_opt_a">
                  <div class="para" id="2012GreyScale_alg4_ans-2-1-1-1">if (pixelValues[row][col] == 0)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg4_ans_opt_a">
                  <div class="para" id="2012GreyScale_alg4_ans-2-1-2-1">0 is actually equal to black</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg4_ans_opt_b">
                  <div class="para" id="2012GreyScale_alg4_ans-2-2-1-1">if (pixelValues[col][row] == 255)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg4_ans_opt_b">
                  <div class="para" id="2012GreyScale_alg4_ans-2-2-2-1">the column and row variables are switched, so the array could possibly go out of bounds.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg4_ans_opt_c" data-correct="">
                  <div class="para" id="2012GreyScale_alg4_ans-2-3-1-1">if (pixelValues[row][col] == WHITE)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg4_ans_opt_c">
                  <div class="para" id="2012GreyScale_alg4_ans-2-3-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg4_ans_opt_d">
                  <div class="para" id="2012GreyScale_alg4_ans-2-4-1-1">if (pixelValue == WHITE)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg4_ans_opt_d">
                  <div class="para" id="2012GreyScale_alg4_ans-2-4-2-1">pixelValue does not access the integers stored in the array</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.13.1.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_2012GreyScale_alg5_ans" data-multipleanswers="false">
                <div class="para" id="2012GreyScale_alg5_ans-1-1">9-10-11: What could you write for the outer for loop so that it iterates through the rows of the array?</div>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg5_ans_opt_a">
                  <div class="para" id="2012GreyScale_alg5_ans-2-1-1-1">(int[] row; row &lt; pixelValues; row++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg5_ans_opt_a">
                  <div class="para" id="2012GreyScale_alg5_ans-2-1-2-1">This is not the correct way to initialize a for each loop</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg5_ans_opt_b">
                  <div class="para" id="2012GreyScale_alg5_ans-2-2-1-1">(int row : this.pixelValues)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg5_ans_opt_b">
                  <div class="para" id="2012GreyScale_alg5_ans-2-2-2-1">When looping through an array with a for each loop you need to include the ’[]’</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg5_ans_opt_c" data-correct="">
                  <div class="para" id="2012GreyScale_alg5_ans-2-3-1-1">(int[] row : this.pixelValues)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg5_ans_opt_c">
                  <div class="para" id="2012GreyScale_alg5_ans-2-3-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg5_ans_opt_d">
                  <div class="para" id="2012GreyScale_alg5_ans-2-4-1-1">(int[] row ; pixelValues)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg5_ans_opt_d">
                  <div class="para" id="2012GreyScale_alg5_ans-2-4-2-1">A for each loop has a colon not a semicolon.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.13.1.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_2012GreyScale_alg6_ans" data-multipleanswers="false">
                <div class="para" id="2012GreyScale_alg6_ans-1-1">9-10-12: What could you write for the inner for loop so that it iterates through the columns of the array?</div>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg6_ans_opt_a">
                  <div class="para" id="2012GreyScale_alg6_ans-2-1-1-1">(int col = 0; col &lt; pixelValues.length; col++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg6_ans_opt_a">
                  <div class="para" id="2012GreyScale_alg6_ans-2-1-2-1">This is not the correct way to initialize a for each loop</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg6_ans_opt_b" data-correct="">
                  <div class="para" id="2012GreyScale_alg6_ans-2-2-1-1">(int pv : row)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg6_ans_opt_b">
                  <div class="para" id="2012GreyScale_alg6_ans-2-2-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg6_ans_opt_c">
                  <div class="para" id="2012GreyScale_alg6_ans-2-3-1-1">(int pv[] : row)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg6_ans_opt_c">
                  <div class="para" id="2012GreyScale_alg6_ans-2-3-2-1">For the inner bound, you are no longer iterating through an array so you do not need to include the ’[]’</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg6_ans_opt_d">
                  <div class="para" id="2012GreyScale_alg6_ans-2-4-1-1">(int col : pixelValues)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg6_ans_opt_d">
                  <div class="para" id="2012GreyScale_alg6_ans-2-4-2-1">Your outer bound is already iterating through pixelValues, your inner bound needs to loop through something else</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.13.1.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_2012GreyScale_alg7_ans" data-multipleanswers="false">
                <div class="para" id="2012GreyScale_alg7_ans-1-1">9-10-13: How will you check if pv is white?</div>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg7_ans_opt_a" data-correct="">
                  <div class="para" id="2012GreyScale_alg7_ans-2-1-1-1">if (pv == this.WHITE)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg7_ans_opt_a">
                  <div class="para" id="2012GreyScale_alg7_ans-2-1-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg7_ans_opt_b">
                  <div class="para" id="2012GreyScale_alg7_ans-2-2-1-1">if (pv == {255,255,255})</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg7_ans_opt_b">
                  <div class="para" id="2012GreyScale_alg7_ans-2-2-2-1">Our image is in greyscale and is not a three value color</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg7_ans_opt_c">
                  <div class="para" id="2012GreyScale_alg7_ans-2-3-1-1">if (pv == 0)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg7_ans_opt_c">
                  <div class="para" id="2012GreyScale_alg7_ans-2-3-2-1">0 is the value of black</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScale_alg7_ans_opt_d">
                  <div class="para" id="2012GreyScale_alg7_ans-2-4-1-1">if (pv == white)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScale_alg7_ans_opt_d">
                  <div class="para" id="2012GreyScale_alg7_ans-2-4-2-1">When using private variables, you need to make sure the spelling is the same.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.13.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcfrgia2">
                <div class="ac_question" id="csawesome2_2_lcfrgia2_question">
                  <div class="para" id="lcfrgia2-1-1">FRQ Gray Image A: write the code for the method <code class="code-inline tex2jax_ignore">countWhitePixels</code>. When you are ready click “Run” to test your solution.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcfrgia2_editor" data-question_label="" data-codelens="true">public class GrayImage
{
    public static final int BLACK = 0;
    public static final int WHITE = 255;

    /**
     * The 2-dimensional representation of this image. Guaranteed not to be null.
     * All values in the array are within the range [BLACK, WHITE], inclusive.
     */
    private int[][] pixelValues;

    /** constructor that takes a 2D array */
    public GrayImage(int[][] theArray)
    {
        pixelValues = theArray;
    }

    /**
     * @return the total number of white pixels in this image. Postcondition: this
     *     image has not been changed.
     */
    public int countWhitePixels() {}

    /** main for testing */
    public static void main(String[] args)
    {
        int[][] values =
        {
            {255, 184, 178, 84, 129},
            {84, 255, 255, 130, 94},
            {78, 255, 0, 0, 78},
            {84, 130, 255, 130, 84}
        };
        GrayImage image = new GrayImage(values);
        System.out.println(
                "count white should be 5 and is " + image.countWhitePixels());
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "count white should be 5 and is 5\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        int[][] values =
        {
            {255, 255, 255},
            {255, 255, 255},
            {255, 255, 255}
        };

        GrayImage image = new GrayImage(values);
        String output = String.valueOf(image.countWhitePixels());
        String expect = "9";

        boolean passed = getResults(expect, output, "countWhitePixels 3X3, all are white");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        int[][] values =
        {
            {255, 0},
            {0, 255},
            {255, 0},
            {0, 255},
        };

        GrayImage image = new GrayImage(values);
        String output = String.valueOf(image.countWhitePixels());
        String expect = "4";

        boolean passed = getResults(expect, output, "countWhitePixels 4X2, half are white");
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCode();
        String target = "for";

        int num = countOccurencesRegex(code, target);

        boolean passed = num == 2;

        getResults("2", "" + num, "2 for loops (nested)", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: Rx4bPs0wkxU</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="Rx4bPs0wkxU" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.13.2.1.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_grayImageB_0" data-multipleanswers="false">
                <div class="para" id="grayImageB_0-1-1">9-11-1: Which is the simplest way to subtract one integer value from another integer value?</div>
                <li data-component="answer" id="csawesome2_2_grayImageB_0_opt_a">
                  <div class="para" id="grayImageB_0-2-1-1-1">result = int1 - int2;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grayImageB_0_opt_a">
                  <div class="para" id="grayImageB_0-2-1-2-1">While the syntax here is correct, there’s an even simpler way to execute subtraction that doesn’t create a new variable.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grayImageB_0_opt_b" data-correct="">
                  <div class="para" id="grayImageB_0-2-2-1-1">int1 -= int2;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grayImageB_0_opt_b">
                  <div class="para" id="grayImageB_0-2-2-2-1">The "-=" syntax correct subtracts int2 from int1, without creating an additional variable, which is ideal in our solution for this problem.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grayImageB_0_opt_c">
                  <div class="para" id="grayImageB_0-2-3-1-1">int1.subtract(int2);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grayImageB_0_opt_c">
                  <div class="para" id="grayImageB_0-2-3-2-1">Because the pixels are of primitive type "int,"  there is not subtract() method which can be executed in this case.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.13.2.1.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_grayImageB_1" data-multipleanswers="false">
                <div class="para" id="grayImageB_1-1-1">9-11-2: Which loop is the best for iterating through the image?</div>
                <li data-component="answer" id="csawesome2_2_grayImageB_1_opt_a">
                  <div class="para" id="grayImageB_1-2-1-1-1">two while loops</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grayImageB_1_opt_a">
                  <div class="para" id="grayImageB_1-2-1-2-1">This is not the most efficient way to iterate through a 2D array.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grayImageB_1_opt_b">
                  <div class="para" id="grayImageB_1-2-2-1-1">linked for each loops</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grayImageB_1_opt_b">
                  <div class="para" id="grayImageB_1-2-2-2-1">"linked" does not refer to anything specific in this context, and for each loops would not work in this situation.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_grayImageB_1_opt_c" data-correct="">
                  <div class="para" id="grayImageB_1-2-3-1-1">nested for loops</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_grayImageB_1_opt_c">
                  <div class="para" id="grayImageB_1-2-3-2-1">Correct!</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.13.2.1.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcfrgib3">
                <div class="ac_question" id="csawesome2_2_lcfrgib3_question">
                  <div class="para" id="lcfrgib3-1-1">Fix the terminating conditions of the loops so that we do not go beyond the array bounds</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcfrgib3_editor" data-question_label="" data-codelens="true">public class LoopTest
{
    public static void main(String[] args)
    {
        int[][] values =
        {
            {9, 8, 7, 6, 5}, {7, 6, 5, 4, 3}, {4, 3, 2, 1, 0}, {4, 3, 2, 1, 0}
        };
        for (int i = 0; i &lt; values.length; i++)
        {
            for (int j = i; j &lt; values[i].length; j++)
            {
                System.out.print(values[i][j] - values[i + 2][j + 2]);
            }
            System.out.println();
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "777\n" + "55\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.13.2.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_2012GreyScaleB_3" data-multipleanswers="false">
                <div class="para" id="2012GreyScaleB_3-1-1">9-11-5: What could you write for the outer for loop so that it iterates through the rows but stops 2 before the end?</div>
                <li data-component="answer" id="csawesome2_2_2012GreyScaleB_3_opt_a">
                  <div class="para" id="2012GreyScaleB_3-2-1-1-1">for (int row = this.pixelValues.length; row &gt; 2;  row--)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScaleB_3_opt_a">
                  <div class="para" id="2012GreyScaleB_3-2-1-2-1">This starts and the end and stops two from the beginning.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScaleB_3_opt_b">
                  <div class="para" id="2012GreyScaleB_3-2-2-1-1">for (int row = this.pixelValues.length - 2; row &gt; 0;  row--)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScaleB_3_opt_b">
                  <div class="para" id="2012GreyScaleB_3-2-2-2-1">This starts two from the end but never reaches the zero element.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScaleB_3_opt_c" data-correct="">
                  <div class="para" id="2012GreyScaleB_3-2-3-1-1">for (int row = 0; row &lt; this.pixelValues.length - 2; row++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScaleB_3_opt_c">
                  <div class="para" id="2012GreyScaleB_3-2-3-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScaleB_3_opt_d">
                  <div class="para" id="2012GreyScaleB_3-2-4-1-1">for (int row = -2; row &lt; this.pixelValues.length; row++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScaleB_3_opt_d">
                  <div class="para" id="2012GreyScaleB_3-2-4-2-1">Starting at -2 is out of the bounds of the array and will return an error.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.13.2.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_2012GreyScaleB_4" data-multipleanswers="false">
                <div class="para" id="2012GreyScaleB_4-1-1">9-11-6: What could you write for the Inner for loop so that it iterates through the rows but stops 2 before the bottom?</div>
                <li data-component="answer" id="csawesome2_2_2012GreyScaleB_4_opt_a" data-correct="">
                  <div class="para" id="2012GreyScaleB_4-2-1-1-1">for (int col = 0; col &lt; this.pixelValues[0].length - 2; col++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScaleB_4_opt_a">
                  <div class="para" id="2012GreyScaleB_4-2-1-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScaleB_4_opt_b">
                  <div class="para" id="2012GreyScaleB_4-2-2-1-1">for (int col = 0; col &lt; this.pixelValues.length - 2; col++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScaleB_4_opt_b">
                  <div class="para" id="2012GreyScaleB_4-2-2-2-1">it is important to specify the row of which you are finding the length of (which will give you the height).</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScaleB_4_opt_c">
                  <div class="para" id="2012GreyScaleB_4-2-3-1-1">for (int col = 0; col &lt; row; col++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScaleB_4_opt_c">
                  <div class="para" id="2012GreyScaleB_4-2-3-2-1">having the comparison col &lt; row will lead to unwanted behavior because col will not iterate through the full image.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScaleB_4_opt_d">
                  <div class="para" id="2012GreyScaleB_4-2-4-1-1">for (int col = this.pixelValues[0] - 2; col &gt; 0; col--)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScaleB_4_opt_d">
                  <div class="para" id="2012GreyScaleB_4-2-4-2-1">The sets col equal to the first VALUE in the image -2 rather than having it only loop through the length - 2</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.13.2.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_2012GreyScaleB_5" data-multipleanswers="false">
                <div class="para" id="2012GreyScaleB_5-1-1">9-11-7: The question requires if any value is less than the value <code class="code-inline tex2jax_ignore">BLACK</code> after subtraction, it needs to be replaced with the value <code class="code-inline tex2jax_ignore">BLACK</code>. How could you write this?</div>
                <li data-component="answer" id="csawesome2_2_2012GreyScaleB_5_opt_a">
                  <div class="para" id="2012GreyScaleB_5-2-1-1-1">if (pixelValues[row][col] = -black) { this.pixelValues[row][col] = black }</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScaleB_5_opt_a">
                  <div class="para" id="2012GreyScaleB_5-2-1-2-1">We want to check if the pixel in below the value black, not -BLACK (which would be 0)</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScaleB_5_opt_b">
                  <div class="para" id="2012GreyScaleB_5-2-2-1-1">if (pixelValues[row][col] &lt; black) { this.pixelValues[row][col] = black }</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScaleB_5_opt_b">
                  <div class="para" id="2012GreyScaleB_5-2-2-2-1">Variable names are case sensitive and the member variable for black is spelt in all caps.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScaleB_5_opt_c">
                  <div class="para" id="2012GreyScaleB_5-2-3-1-1">if (pixelValues[row][col] = BLACK) { this.pixelValues[row][col] &lt; BLACK }</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScaleB_5_opt_c">
                  <div class="para" id="2012GreyScaleB_5-2-3-2-1">This order does not make sense and would not contribute to the code.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScaleB_5_opt_d" data-correct="">
                  <div class="para" id="2012GreyScaleB_5-2-4-1-1">if (pixelValues[row][col] &lt; BLACK) { this.pixelValues[row][col] = BLACK }</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScaleB_5_opt_d">
                  <div class="para" id="2012GreyScaleB_5-2-4-2-1">Correct!</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.13.2.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_2012GreyScaleB_6" data-multipleanswers="false">
                <div class="para" id="2012GreyScaleB_6-1-1">9-11-8: What could you write for the outer for loop so that it iterates through the rows?</div>
                <li data-component="answer" id="csawesome2_2_2012GreyScaleB_6_opt_a" data-correct="">
                  <div class="para" id="2012GreyScaleB_6-2-1-1-1">for (int row = 0; row &lt; this.pixelValues.length; row++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScaleB_6_opt_a">
                  <div class="para" id="2012GreyScaleB_6-2-1-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScaleB_6_opt_b">
                  <div class="para" id="2012GreyScaleB_6-2-2-1-1">for (int row = 1; row &lt;= this.pixelValues.length; row++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScaleB_6_opt_b">
                  <div class="para" id="2012GreyScaleB_6-2-2-2-1">We need to start at the beginning of the image.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScaleB_6_opt_c">
                  <div class="para" id="2012GreyScaleB_6-2-3-1-1">for (int row = 0; row &lt; this.pixelValues.length - 1; row++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScaleB_6_opt_c">
                  <div class="para" id="2012GreyScaleB_6-2-3-2-1">this syntax would be correct if the comparison was row &lt;= this.pixelValues.length - 1;</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScaleB_6_opt_d">
                  <div class="para" id="2012GreyScaleB_6-2-4-1-1">for (int row = 1; row &lt; this.pixelValues.length + 1; row++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScaleB_6_opt_d">
                  <div class="para" id="2012GreyScaleB_6-2-4-2-1">We need to start at the beginning of the array</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.13.2.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_2012GreyScaleB_7" data-multipleanswers="false">
                <div class="para" id="2012GreyScaleB_7-1-1">9-11-9: What could you write for the Inner for loop so that it iterates through the columns?</div>
                <li data-component="answer" id="csawesome2_2_2012GreyScaleB_7_opt_a">
                  <div class="para" id="2012GreyScaleB_7-2-1-1-1">for (int col = 0; col &lt;= this.pixelValues.length - 1; col++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScaleB_7_opt_a">
                  <div class="para" id="2012GreyScaleB_7-2-1-2-1">This would assume that the image is square, instead you should specify a row from which we can reference the height.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScaleB_7_opt_b">
                  <div class="para" id="2012GreyScaleB_7-2-2-1-1">for (int col = 0; col &lt; this.pixelValues[0].length - 1; col++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScaleB_7_opt_b">
                  <div class="para" id="2012GreyScaleB_7-2-2-2-1">The comparison would need to be less &lt;= for this statement to be true.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScaleB_7_opt_c" data-correct="">
                  <div class="para" id="2012GreyScaleB_7-2-3-1-1">for (int col = 0; col &lt; this.pixelValues[0].length; col++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScaleB_7_opt_c">
                  <div class="para" id="2012GreyScaleB_7-2-3-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScaleB_7_opt_d">
                  <div class="para" id="2012GreyScaleB_7-2-4-1-1">for (int col = 0; col &lt; this.pixelValues.length + 1; col++)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScaleB_7_opt_d">
                  <div class="para" id="2012GreyScaleB_7-2-4-2-1">This would make the loop go out of bounds.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.13.2.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_2012GreyScaleB_b" data-multipleanswers="false">
                <div class="para" id="2012GreyScaleB_b-1-1">9-11-10: Since you don’t limit the iteration through the array, how can you check to make sure the subtraction isn’t going out of bounds?</div>
                <li data-component="answer" id="csawesome2_2_2012GreyScaleB_b_opt_a">
                  <div class="para" id="2012GreyScaleB_b-2-1-1-1">if (row &lt; pixelValues.length + 2 &amp;&amp; col &lt; pixelValues[row].length + 2)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScaleB_b_opt_a">
                  <div class="para" id="2012GreyScaleB_b-2-1-2-1">The would not check for out of bounds, in fact the bounds have been incorrectly extended making it possible to be even more out of bounds.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScaleB_b_opt_b" data-correct="">
                  <div class="para" id="2012GreyScaleB_b-2-2-1-1">if (row + 2 &lt; pixelValues.length &amp;&amp; col + 2 &lt; pixelValues[row].length)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScaleB_b_opt_b">
                  <div class="para" id="2012GreyScaleB_b-2-2-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScaleB_b_opt_c">
                  <div class="para" id="2012GreyScaleB_b-2-3-1-1">if (row + 2 &lt;= pixelValues.length &amp;&amp; col + 2 &lt;= pixelValues[row].length)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScaleB_b_opt_c">
                  <div class="para" id="2012GreyScaleB_b-2-3-2-1">We do not want to check for equality, remember arrays index from 0 while length returns the number of elements in the array.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_2012GreyScaleB_b_opt_d">
                  <div class="para" id="2012GreyScaleB_b-2-4-1-1">if (row + 2 &lt; pixelValues.length &amp;&amp; col + 2 &lt; pixelValues.length)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_2012GreyScaleB_b_opt_d">
                  <div class="para" id="2012GreyScaleB_b-2-4-2-1">Make sure to specify an element when checking for col bounds.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.13.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_lcfrgib4">
                <div class="ac_question" id="csawesome2_2_lcfrgib4_question">
                  <div class="para" id="lcfrgib4-1-1">FRQ Gray Image B: write the code for the method <code class="code-inline tex2jax_ignore">processImage</code>. Please use row and col for your loop variables.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_lcfrgib4_editor" data-question_label="" data-codelens="true">public class GrayImage
{
    public static final int BLACK = 0;
    public static final int WHITE = 255;

    /**
     * The 2-dimensional representation of this image. Guaranteed not to be null.
     * All values in the array are within the range [BLACK, WHITE], inclusive.
     */
    private int[][] pixelValues;

    /** constructor that takes a 2D array */
    public GrayImage(int[][] theArray)
    {
        pixelValues = theArray;
    }

    /**
     * Processes this image in row-major order and decreases the value of each
     * pixel at position (row, col) by the value of the pixel at position (row + 2,
     * col + 2) if it exists. Resulting values that would be less than BLACK are
     * replaced by BLACK. Pixels for which there is no pixel at position (row + 2,
     * col + 2) are unchanged.
     */
    public void processImage() {}

    public void printValues()
    {
        for (int r = 0; r &lt; pixelValues.length; r++)
        {
            for (int c = 0; c &lt; pixelValues[0].length; c++)
            {
                System.out.print(pixelValues[r][c] + ", ");
            }
            System.out.println();
        }
    }

    /** main for testing */
    public static void main(String[] args)
    {
        int[][] values =
        {
            {221, 184, 178, 84, 135},
            {84, 255, 255, 130, 84},
            {78, 255, 0, 0, 78},
            {84, 130, 255, 130, 84}
        };
        GrayImage image = new GrayImage(values);
        image.printValues();
        image.processImage();
        System.out.println("after process image");
        image.printValues();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "221, 184, 178, 84, 135,\n"
                        + "84, 255, 255, 130, 84,\n"
                        + "78, 255, 0, 0, 78,\n"
                        + "84, 130, 255, 130, 84,\n"
                        + "after process image\n"
                        + "221, 184, 100, 84, 135,\n"
                        + "0, 125, 171, 130, 84,\n"
                        + "78, 255, 0, 0, 78,\n"
                        + "84, 130, 255, 130, 84,\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        String target = "pixelValues[row+2][col+2];";
        boolean passed = checkCodeContainsRegex("subtracting pixel at row+2, col+2", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target1 = "pixelValues[row][col] &lt; BLACK";
        String target2 = "pixelValues[row][col] &lt; 0";

        boolean passed =
                checkCodeContainsRegex("check of pixel value at row, col less than 0", target2)
                        || checkCodeContainsRegex(
                                "or check of pixel value less than BLACK", target1);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: 8j34xQkjsJI</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="8j34xQkjsJI" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_routeciphera_1.5MC" data-multipleanswers="false">
                <div class="para" id="routeciphera_1.5MC-1-1">9-12-2: What type of loop should you use?</div>
                <li data-component="answer" id="csawesome2_2_routeciphera_1.5MC_opt_a">
                  <div class="para" id="routeciphera_1.5MC-2-1-1-1">for each</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_1.5MC_opt_a">
                  <div class="para" id="routeciphera_1.5MC-2-1-2-1">We need to utilize elements by indexing them so a for each loop will not work</div>
                </li>
                <li data-component="answer" id="csawesome2_2_routeciphera_1.5MC_opt_b">
                  <div class="para" id="routeciphera_1.5MC-2-2-1-1">if</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_1.5MC_opt_b">
                  <div class="para" id="routeciphera_1.5MC-2-2-2-1">This is not a type of loop</div>
                </li>
                <li data-component="answer" id="csawesome2_2_routeciphera_1.5MC_opt_c" data-correct="">
                  <div class="para" id="routeciphera_1.5MC-2-3-1-1">for</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_1.5MC_opt_c">
                  <div class="para" id="routeciphera_1.5MC-2-3-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_routeciphera_1.5MC_opt_d">
                  <div class="para" id="routeciphera_1.5MC-2-4-1-1">while</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_1.5MC_opt_d">
                  <div class="para" id="routeciphera_1.5MC-2-4-2-1">Although this could would, we would need some kind of tracker variable to allow use to count indexes which would be more easily accomplished by a different loop.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_routeciphera_1.5MC_opt_e">
                  <div class="para" id="routeciphera_1.5MC-2-5-1-1">switch statement</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_1.5MC_opt_e">
                  <div class="para" id="routeciphera_1.5MC-2-5-2-1">This would not work in this situation.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_routeciphera_1.75MC" data-multipleanswers="false">
                <div class="para" id="routeciphera_1.75MC-1-1">9-12-3: How many Loops should you use?</div>
                <li data-component="answer" id="csawesome2_2_routeciphera_1.75MC_opt_a">
                  <div class="para" id="routeciphera_1.75MC-2-1-1-1">1</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_1.75MC_opt_a">
                  <div class="para" id="routeciphera_1.75MC-2-1-2-1">This would not correctly iterate through the 2D array</div>
                </li>
                <li data-component="answer" id="csawesome2_2_routeciphera_1.75MC_opt_b" data-correct="">
                  <div class="para" id="routeciphera_1.75MC-2-2-1-1">2, nested</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_1.75MC_opt_b">
                  <div class="para" id="routeciphera_1.75MC-2-2-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_routeciphera_1.75MC_opt_c">
                  <div class="para" id="routeciphera_1.75MC-2-3-1-1">2, un-nested</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_1.75MC_opt_c">
                  <div class="para" id="routeciphera_1.75MC-2-3-2-1">This would not correctly iterate through the 2D array</div>
                </li>
                <li data-component="answer" id="csawesome2_2_routeciphera_1.75MC_opt_d">
                  <div class="para" id="routeciphera_1.75MC-2-4-1-1">3, un-nested</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_1.75MC_opt_d">
                  <div class="para" id="routeciphera_1.75MC-2-4-2-1">This would not correctly iterate through the 2D array</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_routeciphera_2MC" data-multipleanswers="false">
                <div class="para" id="routeciphera_2MC-1-1">9-12-4: What can you use to set the outer bound while you iterate through your 2D array?</div>
                <li data-component="answer" id="csawesome2_2_routeciphera_2MC_opt_a" data-correct="">
                  <div class="para" id="routeciphera_2MC-2-1-1-1">numRows</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_2MC_opt_a">
                  <div class="para" id="routeciphera_2MC-2-1-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_routeciphera_2MC_opt_b">
                  <div class="para" id="routeciphera_2MC-2-2-1-1">numCols</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_2MC_opt_b">
                  <div class="para" id="routeciphera_2MC-2-2-2-1">No, numCols finds the width and we are iterating through this in row-major order.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_routeciphera_2MC_opt_c">
                  <div class="para" id="routeciphera_2MC-2-3-1-1">str.length()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_2MC_opt_c">
                  <div class="para" id="routeciphera_2MC-2-3-2-1">This finds us the length of the string but the array is not based on the string length.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_routeciphera_2MC_opt_d">
                  <div class="para" id="routeciphera_2MC-2-4-1-1">str[0].length()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_2MC_opt_d">
                  <div class="para" id="routeciphera_2MC-2-4-2-1">Strings aren’t defined under the ’[]’ operator and str is not a 2D array so this would return an error.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_routeciphera_3MC" data-multipleanswers="false">
                <div class="para" id="routeciphera_3MC-1-1">9-12-5: What can you use to set the inner bound while you iterate through your 2D array?</div>
                <li data-component="answer" id="csawesome2_2_routeciphera_3MC_opt_a">
                  <div class="para" id="routeciphera_3MC-2-1-1-1">numRows</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_3MC_opt_a">
                  <div class="para" id="routeciphera_3MC-2-1-2-1">No, numRows finds the width and should not be used as the inner bound because we are iterating through the array in row-major order.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_routeciphera_3MC_opt_b" data-correct="">
                  <div class="para" id="routeciphera_3MC-2-2-1-1">numCols</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_3MC_opt_b">
                  <div class="para" id="routeciphera_3MC-2-2-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_routeciphera_3MC_opt_c">
                  <div class="para" id="routeciphera_3MC-2-3-1-1">str.length()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_3MC_opt_c">
                  <div class="para" id="routeciphera_3MC-2-3-2-1">This finds us the length of the string but the array is not based on the string length.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_routeciphera_3MC_opt_d">
                  <div class="para" id="routeciphera_3MC-2-4-1-1">str[0].length()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_3MC_opt_d">
                  <div class="para" id="routeciphera_3MC-2-4-2-1">Strings aren’t defined under the ’[]’ operator and str is not a 2D array so this would return an error.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_routeciphera_4MC" data-multipleanswers="false">
                <div class="para" id="routeciphera_4MC-1-1">9-12-6: Which <code class="code-inline tex2jax_ignore">String</code> method can you use to access partial or full strings within another string?</div>
                <li data-component="answer" id="csawesome2_2_routeciphera_4MC_opt_a">
                  <div class="para" id="routeciphera_4MC-2-1-1-1">str.length()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_4MC_opt_a">
                  <div class="para" id="routeciphera_4MC-2-1-2-1">This does not return a string</div>
                </li>
                <li data-component="answer" id="csawesome2_2_routeciphera_4MC_opt_b">
                  <div class="para" id="routeciphera_4MC-2-2-1-1">str(lowerbound, upperbound)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_4MC_opt_b">
                  <div class="para" id="routeciphera_4MC-2-2-2-1">This is not a valid string method</div>
                </li>
                <li data-component="answer" id="csawesome2_2_routeciphera_4MC_opt_c">
                  <div class="para" id="routeciphera_4MC-2-3-1-1">str.subsection(lowerbound, upperbound)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_4MC_opt_c">
                  <div class="para" id="routeciphera_4MC-2-3-2-1">This is not a valid string method</div>
                </li>
                <li data-component="answer" id="csawesome2_2_routeciphera_4MC_opt_d" data-correct="">
                  <div class="para" id="routeciphera_4MC-2-4-1-1">str.substring(lowerbound, upperbound)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_4MC_opt_d">
                  <div class="para" id="routeciphera_4MC-2-4-2-1">Correct!</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_routeciphera_5MC" data-multipleanswers="false">
                <div class="para" id="routeciphera_5MC-1-1">9-12-7: What is the formula for obtaining a single-character string at position <code class="code-inline tex2jax_ignore">k</code> of the string <code class="code-inline tex2jax_ignore">str</code>?</div>
                <li data-component="answer" id="csawesome2_2_routeciphera_5MC_opt_a">
                  <div class="para" id="routeciphera_5MC-2-1-1-1">str.substring(k, k)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_5MC_opt_a">
                  <div class="para" id="routeciphera_5MC-2-1-2-1">This will not return the correct char correctly</div>
                </li>
                <li data-component="answer" id="csawesome2_2_routeciphera_5MC_opt_b">
                  <div class="para" id="routeciphera_5MC-2-2-1-1">str.substring(k + 1, k + 1)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_5MC_opt_b">
                  <div class="para" id="routeciphera_5MC-2-2-2-1">This will not return the correct char correctly</div>
                </li>
                <li data-component="answer" id="csawesome2_2_routeciphera_5MC_opt_c" data-correct="">
                  <div class="para" id="routeciphera_5MC-2-3-1-1">str.substring(k, k + 1)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_5MC_opt_c">
                  <div class="para" id="routeciphera_5MC-2-3-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_routeciphera_5MC_opt_d">
                  <div class="para" id="routeciphera_5MC-2-4-1-1">str.substring(k + 1, k)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_5MC_opt_d">
                  <div class="para" id="routeciphera_5MC-2-4-2-1">This will not return the correct char correctly</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_routeciphera_5.5MC" data-multipleanswers="false">
                <div class="para" id="routeciphera_5.5MC-1-1">9-12-8: How can one find the aforementioned <code class="code-inline tex2jax_ignore">k</code>? (this is hard to visualize, try drawing out some examples)</div>
                <li data-component="answer" id="csawesome2_2_routeciphera_5.5MC_opt_a" data-correct="">
                  <div class="para" id="routeciphera_5.5MC-2-1-1-1">str.substring(c + r * this.numCols, 1 + c + r * this.numCols)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_5.5MC_opt_a">
                  <div class="para" id="routeciphera_5.5MC-2-1-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_routeciphera_5.5MC_opt_b">
                  <div class="para" id="routeciphera_5.5MC-2-2-1-1">str.substring(c - r * this.numCols, 1 + c - r * this.numCols)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_5.5MC_opt_b">
                  <div class="para" id="routeciphera_5.5MC-2-2-2-1">Try using this formula to find a given character of one of the example strings. Does it work? Try coming up with some of your own examples to figure out the forumla for k.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_routeciphera_5.5MC_opt_c">
                  <div class="para" id="routeciphera_5.5MC-2-3-1-1">str.substring(c + r, 1 + c + r)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_5.5MC_opt_c">
                  <div class="para" id="routeciphera_5.5MC-2-3-2-1">Try using this formula to find a given character of one of the example strings. Does it work? Try coming up with some of your own examples to figure out the forumla for k.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_routeciphera_5.5MC_opt_d">
                  <div class="para" id="routeciphera_5.5MC-2-4-1-1">str.substring(c - r, 1 + c - r)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_5.5MC_opt_d">
                  <div class="para" id="routeciphera_5.5MC-2-4-2-1">Try using this formula to find a given character of one of the example strings. Does it work? Try coming up with some of your own examples to figure out the forumla for k.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_routeciphera_6MC" data-multipleanswers="false">
                <div class="para" id="routeciphera_6MC-1-1">9-12-9: What conditional can you write to make sure trailing characters are ignored?</div>
                <li data-component="answer" id="csawesome2_2_routeciphera_6MC_opt_a">
                  <div class="para" id="routeciphera_6MC-2-1-1-1">if (str.length() &lt; (c + (r * this.numCols)))</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_6MC_opt_a">
                  <div class="para" id="routeciphera_6MC-2-1-2-1">This will not return the correct boolean</div>
                </li>
                <li data-component="answer" id="csawesome2_2_routeciphera_6MC_opt_b" data-correct="">
                  <div class="para" id="routeciphera_6MC-2-2-1-1">if (str.length() &gt; (c + (r * this.numCols)))</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_6MC_opt_b">
                  <div class="para" id="routeciphera_6MC-2-2-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_routeciphera_6MC_opt_c">
                  <div class="para" id="routeciphera_6MC-2-3-1-1">if (str.length() &gt; numRows * numCols)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_6MC_opt_c">
                  <div class="para" id="routeciphera_6MC-2-3-2-1">We need to determine whether or not to ignore trialing character at each step, not just check for it once at the beginning.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_routeciphera_6MC_opt_d">
                  <div class="para" id="routeciphera_6MC-2-4-1-1">if (str.length() &lt; numRows * numCols)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_routeciphera_6MC_opt_d">
                  <div class="para" id="routeciphera_6MC-2-4-2-1">We need to determine whether or not to ignore trialing character at each step, not just check for it once at the beginning.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.13.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_RouteCipherA">
                <div class="parsons_question parsons-text">
                  <div class="para" id="RouteCipherA-1-1">The method fillBlock below contains the correct code for one solution to this problem, but it is mixed up.  Drag the needed code from the left to the right and put them in order with the correct indention so that the code would work correctly.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public void fillBlock(String str)
{
  int pos = 0;
---
  for (int r = 0; r &lt; this.numRows; r++ )
  {
---
      for (int c = 0; c &lt; this.numCols; c++ )
      {
---
          if (pos &lt; str.length())
          {
---
              String subStr = str.substring(pos, pos+1);
              this.letterBlock[r][c] = subStr;
              pos++;
---
          } else
          {
              this.letterBlock[r][c] = "A";
          } // end else block
---
      } // end inner for
  } // end outer for
} // end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.13.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_FRQRouteCipherA">
                <div class="ac_question" id="csawesome2_2_FRQRouteCipherA_question">
                  <div class="para" id="FRQRouteCipherA-1-1">Complete the method <code class="code-inline tex2jax_ignore">fillBlock</code> below.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_FRQRouteCipherA_editor" data-question_label="" data-codelens="true">public class RouteCipher
{
    /**
     * A two-dimensional array of single-character strings, instantiated in the
     * constructor
     */
    public String[][] letterBlock;

    /** The number of rows of letterBlock, set by the constructor */
    private int numRows;

    /** The number of columns of letterBlock, set by the constructor */
    private int numCols;

    public RouteCipher(int r, int c)
    {
        this.letterBlock = new String[r][c];
        this.numRows = r;
        this.numCols = c;
    }

    /**
     * Places a string into letterBlock in row-major order.
     *
* @param str the string to be processed Postcondition: if str.length() &lt;
     *     numRows * numCols, "A" in each unfilled cell if str.length() &gt; numRows *
     *     numCols, trailing characters are ignored
     */
    public void fillBlock(String str)
    {
        // Complete this method

    }

    /**
     * Extracts encrypted string from letterBlock in column-major order.
     * Precondition: letterBlock has been filled
     *
     * @return the encrypted string from letterBlock
     */
    private String encryptBlock()
    {
        return "";
    }

    /**
     * Encrypts a message.
     *
     * @param message the string to be encrypted
     * @return the encrypted message; if message is the empty string, returns the
     *     empty string
     */
    public String encryptMessage(String message)
    {
        return "";
    }

    public static void main(String[] args)
    {

        boolean test1 = false;
        RouteCipher ciph = new RouteCipher(3, 3);

        ciph.fillBlock("There's 1");

        if ((ciph.letterBlock[0][2]).equals("e")
                &amp;&amp; (ciph.letterBlock[2][1]).equals(" "))
            test1 = true;
        else
            System.out.println(
                    "Oops! Looks like your code doesn't properly insert the given"
                        + " String.\n");

        if (test1)
            System.out.println("Looks like your code works well!");
        else
            System.out.println("Make a few changes, please.");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Looks like your code works well!\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        RouteCipher ciph = new RouteCipher(3, 4);

        ciph.fillBlock("Lady Bugs");

        String result =
                String.valueOf(
                        (ciph.letterBlock[0][2]).equals("d")
                                &amp;&amp; (ciph.letterBlock[2][2]).equals("A"));
        boolean passed = getResults("true", result, "method fillBlock works");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.13.4.1.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_FRQRouteCipherB_1.5MC" data-multipleanswers="false">
                <div class="para" id="FRQRouteCipherB_1.5MC-1-1">9-13-2: What type of loop could you use to solve this problem?</div>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherB_1.5MC_opt_a" data-correct="">
                  <div class="para" id="FRQRouteCipherB_1.5MC-2-1-1-1">while</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherB_1.5MC_opt_a">
                  <div class="para" id="FRQRouteCipherB_1.5MC-2-1-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherB_1.5MC_opt_b">
                  <div class="para" id="FRQRouteCipherB_1.5MC-2-2-1-1">if</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherB_1.5MC_opt_b">
                  <div class="para" id="FRQRouteCipherB_1.5MC-2-2-2-1">You would need a loop.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherB_1.5MC_opt_c">
                  <div class="para" id="FRQRouteCipherB_1.5MC-2-3-1-1">for</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherB_1.5MC_opt_c">
                  <div class="para" id="FRQRouteCipherB_1.5MC-2-3-2-1">For this problem, a while loop would be easier to use.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherB_1.5MC_opt_d">
                  <div class="para" id="FRQRouteCipherB_1.5MC-2-4-1-1">switch statement</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherB_1.5MC_opt_d">
                  <div class="para" id="FRQRouteCipherB_1.5MC-2-4-2-1">You would need a loop.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.13.4.1.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_FRQRouteCipherBnorm_1" data-multipleanswers="false">
                <div class="para" id="FRQRouteCipherBnorm_1-1-1">9-13-3: What should your while statement conditional be?</div>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBnorm_1_opt_a">
                  <div class="para" id="FRQRouteCipherBnorm_1-2-1-1-1">while (message.substring(k, k + 1) &lt; 0)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBnorm_1_opt_a">
                  <div class="para" id="FRQRouteCipherBnorm_1-2-1-2-1">You do not need to apply that formula here.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBnorm_1_opt_b">
                  <div class="para" id="FRQRouteCipherBnorm_1-2-2-1-1">while (message.substring(k, k + 1) &gt; 0)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBnorm_1_opt_b">
                  <div class="para" id="FRQRouteCipherBnorm_1-2-2-2-1">You do not need to apply that formula here.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBnorm_1_opt_c">
                  <div class="para" id="FRQRouteCipherBnorm_1-2-3-1-1">while (message.length() &lt; 0)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBnorm_1_opt_c">
                  <div class="para" id="FRQRouteCipherBnorm_1-2-3-2-1">The inequality is backwards.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBnorm_1_opt_d" data-correct="">
                  <div class="para" id="FRQRouteCipherBnorm_1-2-4-1-1">while (message.length() &gt; 0)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBnorm_1_opt_d">
                  <div class="para" id="FRQRouteCipherBnorm_1-2-4-2-1">Correct!</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.13.4.1.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_FRQRouteCipherBnorm_2" data-multipleanswers="false">
                <div class="para" id="FRQRouteCipherBnorm_2-1-1">9-13-4: How can you determine how large the “chunk size” should be?</div>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBnorm_2_opt_a" data-correct="">
                  <div class="para" id="FRQRouteCipherBnorm_2-2-1-1-1">int chunkSize = this.numRows * this.numCols;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBnorm_2_opt_a">
                  <div class="para" id="FRQRouteCipherBnorm_2-2-1-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBnorm_2_opt_b">
                  <div class="para" id="FRQRouteCipherBnorm_2-2-2-1-1">int chunkSize = this.numRows + this.numCols;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBnorm_2_opt_b">
                  <div class="para" id="FRQRouteCipherBnorm_2-2-2-2-1">This does not give you the correct result.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBnorm_2_opt_c">
                  <div class="para" id="FRQRouteCipherBnorm_2-2-3-1-1">int chunkSize = this.numRows - this.numCols;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBnorm_2_opt_c">
                  <div class="para" id="FRQRouteCipherBnorm_2-2-3-2-1">This does not give you the correct result.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBnorm_2_opt_d">
                  <div class="para" id="FRQRouteCipherBnorm_2-2-4-1-1">int chunkSize = this.numRows / this.numCols;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBnorm_2_opt_d">
                  <div class="para" id="FRQRouteCipherBnorm_2-2-4-2-1">This does not give you the correct result.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.13.4.1.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_FRQRouteCipherBnorm_3" data-multipleanswers="false">
                <div class="para" id="FRQRouteCipherBnorm_3-1-1">9-13-5: If chunkSize is greater that message.length(), what should you set chunkSize to?</div>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBnorm_3_opt_a">
                  <div class="para" id="FRQRouteCipherBnorm_3-2-1-1-1">chunkSize = message.substring(chunkSize);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBnorm_3_opt_a">
                  <div class="para" id="FRQRouteCipherBnorm_3-2-1-2-1">This does not give you the correct result.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBnorm_3_opt_b">
                  <div class="para" id="FRQRouteCipherBnorm_3-2-2-1-1">chunkSize = += encryptBlock();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBnorm_3_opt_b">
                  <div class="para" id="FRQRouteCipherBnorm_3-2-2-2-1">This does not give you the correct result.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBnorm_3_opt_c" data-correct="">
                  <div class="para" id="FRQRouteCipherBnorm_3-2-3-1-1">chunkSize = message.length();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBnorm_3_opt_c">
                  <div class="para" id="FRQRouteCipherBnorm_3-2-3-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBnorm_3_opt_d">
                  <div class="para" id="FRQRouteCipherBnorm_3-2-4-1-1">chunkSize = fillBlock(message);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBnorm_3_opt_d">
                  <div class="para" id="FRQRouteCipherBnorm_3-2-4-2-1">This does not give you the correct result.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.13.4.1.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_FRQRouteCipherBnorm_4" data-multipleanswers="false">
                <div class="para" id="FRQRouteCipherBnorm_4-1-1">9-13-6: What method needs to be called on message before you can call “encryptBlock()”?</div>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBnorm_4_opt_a">
                  <div class="para" id="FRQRouteCipherBnorm_4-2-1-1-1">encryptMessage(message);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBnorm_4_opt_a">
                  <div class="para" id="FRQRouteCipherBnorm_4-2-1-2-1">This is the method we are trying to write!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBnorm_4_opt_b" data-correct="">
                  <div class="para" id="FRQRouteCipherBnorm_4-2-2-1-1">fillBlock(message);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBnorm_4_opt_b">
                  <div class="para" id="FRQRouteCipherBnorm_4-2-2-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBnorm_4_opt_c">
                  <div class="para" id="FRQRouteCipherBnorm_4-2-3-1-1">RouteCipher(message);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBnorm_4_opt_c">
                  <div class="para" id="FRQRouteCipherBnorm_4-2-3-2-1">RouteCipher is the class of the method we are currently writing.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBnorm_4_opt_d">
                  <div class="para" id="FRQRouteCipherBnorm_4-2-4-1-1">encryptBlock(message);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBnorm_4_opt_d">
                  <div class="para" id="FRQRouteCipherBnorm_4-2-4-2-1">We need to call a different method before we call encryptBlock()</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.13.4.1.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_RouteCipherB">
                <div class="parsons_question parsons-text">
                  <div class="para" id="RouteCipherB-1-1">The method encryptMessage below contains the correct code for one solution to this problem, but it is mixed up and contains extra blocks that are not needed.  Drag the needed code from the left to the right and put them in order with the correct indention so that the code would work correctly.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public String encryptMessage(String message)
{
  String encryptedMessage = "";
  int chunkSize = this.numRows * this.numCols;
---
  while (message.length() &gt; 0)
  {
---
    if (chunkSize &gt; message.length())
    {
      chunkSize = message.length();
---
    } // end if
---
    fillBlock(message);
    encryptedMessage += encryptBlock();
    message = message.substring(chunkSize);
---
  } // end while
---
  return encryptedMessage;
---
} // end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class RouteCipher
{
    /**
     * A two-dimensional array of single-character strings, instantiated in the
     * constructor
     */
    private String[][] letterBlock;

    /** The number of rows of letterBlock, set by the constructor */
    private int numRows;

    /** The number of columns of letterBlock, set by the constructor */
    private int numCols;

    private int counter = 0;

    public RouteCipher(int r, int c)
    {
        letterBlock = new String[r][c];
        this.fillBlock("Meet at midnight");
        this.numRows = r;
        this.numCols = c;
    }

    /**
     * Places a string into letterBlock in row-major order.
     *
     * @param str the string to be processed Postcondition: if str.length() &lt;
     *     numRows * numCols, "A" in each unfilled cell if str.length() &gt; numRows *
     *     numCols, trailing characters are ignored
     */
    private void fillBlock(String str)
    {
        int pos = 0;
        for (int r = 0; r &lt; this.numRows; r++)
        {
            for (int c = 0; c &lt; this.numCols; c++)
            {
                if (pos &lt; str.length())
                {
                    this.letterBlock[r][c] = str.substring(pos, pos + 1);
                    pos++;
                }
                else
                {
                    this.letterBlock[r][c] = "A";
                } // end else block
            } // end inner for
        } // end outer for
    }

    /**
     * Extracts encrypted string from letterBlock in column-major order.
     * Precondition: letterBlock has been filled
     *
     * @return the encrypted string from letterBlock
     */
    private String encryptBlock()
    {
        return "Mte ea";
    }

    /**
     * Encrypts a message.
     *
     * @param message the string to be encrypted
     * @return the encrypted message; if message is the empty string, returns the
     *     empty string
     */
    public String encryptMessage(String message)
    {
        // Complete this method
    }

    public static void main(String[] args)
    {

        RouteCipher ciph = new RouteCipher(2, 3);
        if (ciph.encryptMessage("Meet at midnight")
                .substring(0, 6)
                .equals("Mte ea"))
            System.out.println("Looks like your code works well!");
        else System.out.println("Oops! Make a few changes to your code, please.");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Looks like your code works well!\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        RouteCipher ciph = new RouteCipher(2, 3);

        String result =
                String.valueOf(
                        ciph.encryptMessage("Meet at midnight").substring(0, 6).equals("Mte ea"));

        boolean passed = getResults("true", result, "method encryptMessage works");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.13.4.3.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_FRQRouteCipherBrecur_1" data-multipleanswers="false">
                <div class="para" id="FRQRouteCipherBrecur_1-1-1">9-13-9: What is your base case?</div>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBrecur_1_opt_a" data-correct="">
                  <div class="para" id="FRQRouteCipherBrecur_1-2-1-1-1">if (message.length() == 0) { return ""; }</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBrecur_1_opt_a">
                  <div class="para" id="FRQRouteCipherBrecur_1-2-1-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBrecur_1_opt_b">
                  <div class="para" id="FRQRouteCipherBrecur_1-2-2-1-1">if (message.length() &lt;= this.numRows * this.numCols) { return encryptBlock(); }</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBrecur_1_opt_b">
                  <div class="para" id="FRQRouteCipherBrecur_1-2-2-2-1">This would not work in this situation.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBrecur_1_opt_c">
                  <div class="para" id="FRQRouteCipherBrecur_1-2-3-1-1">return "";</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBrecur_1_opt_c">
                  <div class="para" id="FRQRouteCipherBrecur_1-2-3-2-1">This would not work in this situation.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBrecur_1_opt_d">
                  <div class="para" id="FRQRouteCipherBrecur_1-2-4-1-1">return encryptBlock();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBrecur_1_opt_d">
                  <div class="para" id="FRQRouteCipherBrecur_1-2-4-2-1">This would not work in this situation.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.13.4.3.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_FRQRouteCipherBrecur_2" data-multipleanswers="false">
                <div class="para" id="FRQRouteCipherBrecur_2-1-1">9-13-10: What kind of recursion will you use?</div>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBrecur_2_opt_a">
                  <div class="para" id="FRQRouteCipherBrecur_2-2-1-1-1">Head</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBrecur_2_opt_a">
                  <div class="para" id="FRQRouteCipherBrecur_2-2-1-2-1">The recursive call is not the first statement in the method hence it is not head recursive.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBrecur_2_opt_b" data-correct="">
                  <div class="para" id="FRQRouteCipherBrecur_2-2-2-1-1">Tail</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBrecur_2_opt_b">
                  <div class="para" id="FRQRouteCipherBrecur_2-2-2-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBrecur_2_opt_c">
                  <div class="para" id="FRQRouteCipherBrecur_2-2-3-1-1">Tree</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBrecur_2_opt_c">
                  <div class="para" id="FRQRouteCipherBrecur_2-2-3-2-1">We do not make multiple recursive calls so the method is not tree recursive.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBrecur_2_opt_d">
                  <div class="para" id="FRQRouteCipherBrecur_2-2-4-1-1">Body</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBrecur_2_opt_d">
                  <div class="para" id="FRQRouteCipherBrecur_2-2-4-2-1">This is not a term that describes recursion.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.13.4.3.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_FRQRouteCipherBrecur_3" data-multipleanswers="false">
                <div class="para" id="FRQRouteCipherBrecur_3-1-1">9-13-11: What is your tail recursive call?</div>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBrecur_3_opt_a">
                  <div class="para" id="FRQRouteCipherBrecur_3-2-1-1-1">return "";</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBrecur_3_opt_a">
                  <div class="para" id="FRQRouteCipherBrecur_3-2-1-2-1">This is the return statement of the base case.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBrecur_3_opt_b">
                  <div class="para" id="FRQRouteCipherBrecur_3-2-2-1-1">return (encryptMessage(message.substring(this.numRows * this.numCols)));</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBrecur_3_opt_b">
                  <div class="para" id="FRQRouteCipherBrecur_3-2-2-2-1">This does not return the correct results</div>
                </li>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBrecur_3_opt_c">
                  <div class="para" id="FRQRouteCipherBrecur_3-2-3-1-1">return (encryptBlock());</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBrecur_3_opt_c">
                  <div class="para" id="FRQRouteCipherBrecur_3-2-3-2-1">This is the return statement of one of the conditional base cases.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_FRQRouteCipherBrecur_3_opt_d" data-correct="">
                  <div class="para" id="FRQRouteCipherBrecur_3-2-4-1-1">return (encryptBlock() + encryptMessage(message.substring(this.numRows * this.numCols)));</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_FRQRouteCipherBrecur_3_opt_d">
                  <div class="para" id="FRQRouteCipherBrecur_3-2-4-2-1">Correct!</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.13.4.3.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_RouteCipherB_recurpar">
                <div class="parsons_question parsons-text">
                  <div class="para" id="RouteCipherB_recurpar-1-1">The method encryptMessage below contains the correct code for one solution to this problem, but it is mixed up and contains extra blocks that are not needed.  Drag the needed code from the left to the right and put them in order with the correct indention so that the code would work correctly.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public String encryptMessage(String message)
{
---
  if (message.length() == 0)
  {
      return "";
  }
---
  fillBlock(message);
---
  if (message.length() &lt;= this.numRows * this.numCols)
  {
      return encryptBlock();
  }
---
  return (encryptBlock() +
         encryptMessage(message.substring(
            this.numRows * this.numCols)));
---
} // end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>searching-algorithms</id>
      <title>Searching Algorithms</title>
      <question>
        <label>Video: DHLCXXX1OtE</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="DHLCXXX1OtE" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.14.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_seqSearch">
                <div class="ac_question" id="csawesome2_2_seqSearch_question">
                  <div class="para" id="seqSearch-1-1">The code for <code class="code-inline tex2jax_ignore">sequentialSearch</code> for arrays below is from a previous AP CSA course description. Click on the Code Lens button to see this code running in the Java visualizer.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_seqSearch_editor" data-question_label="" data-codelens="true">public class ArraySearcher
{

    /**
     * Finds the index of a value in an array of integers.
     *
     * @param elements an array containing the items to be searched.
     * @param target the item to be found in elements.
     * @return an index of target in elements if found; -1 otherwise.
     */
    public static int sequentialSearch(int[] elements, int target)
    {
        for (int j = 0; j &lt; elements.length; j++)
        {
            if (elements[j] == target)
            {
                return j;
            }
        }
        return -1;
    }

    public static void main(String[] args)
    {
        int[] numArray = {3, -2, 9, 38, -23};
        System.out.println("Tests of sequentialSearch");
        System.out.println(sequentialSearch(numArray, 3));
        System.out.println(sequentialSearch(numArray, 9));
        System.out.println(sequentialSearch(numArray, -23));
        System.out.println(sequentialSearch(numArray, 99));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Tests of sequentialSearch\n0\n2\n4\n-1";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.14.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_seqSearchList">
                <div class="ac_question" id="csawesome2_2_seqSearchList_question">
                  <div class="para" id="seqSearchList-1-1">Here is a linear search using ArrayLists. Notice that size() and get(i) is used with ArrayLists instead of length and [i] which are used in arrays. Click on the Code Lens button to step through this code in the visualizer.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_seqSearchList_editor" data-question_label="" data-codelens="true">import java.util.*;

public class ArrayListSearcher
{

    /**
     * Finds the index of a value in an ArrayList of integers.
     *
     * @param elements an array containing the items to be searched.
     * @param target the item to be found in elements.
     * @return an index of target in elements if found; -1 otherwise.
     */
    public static int sequentialSearch(ArrayList&lt;Integer&gt; elements, int target)
    {
        for (int j = 0; j &lt; elements.size(); j++)
        {
            if (elements.get(j) == target)
            {
                return j;
            }
        }
        return -1;
    }

    public static void main(String[] args)
    {
        ArrayList&lt;Integer&gt; numList = new ArrayList&lt;Integer&gt;();
        numList.add(3);
        numList.add(-2);
        numList.add(9);
        numList.add(38);
        numList.add(-23);
        System.out.println("Tests of sequentialSearch");
        System.out.println(sequentialSearch(numList, 3));
        System.out.println(sequentialSearch(numList, 9));
        System.out.println(sequentialSearch(numList, -23));
        System.out.println(sequentialSearch(numList, 99));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Tests of sequentialSearch\n0\n2\n4\n-1";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.14.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qss_1" data-multipleanswers="false">
                <div class="para" id="qss_1-1-1">7-5-4: Which will cause the <em class="emphasis">longest</em> execution of a sequential search looking for a value in an array of integers?</div>
                <li data-component="answer" id="csawesome2_2_qss_1_opt_a">
                  <div class="para" id="qss_1-2-1-1-1">The value is the first one in the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qss_1_opt_a">
                  <div class="para" id="qss_1-2-1-2-1">This would be true for the shortest execution. This would only take one execution of the loop.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qss_1_opt_b">
                  <div class="para" id="qss_1-2-2-1-1">The value is in the middle of the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qss_1_opt_b">
                  <div class="para" id="qss_1-2-2-2-1">Why would this be the longest execution?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qss_1_opt_c">
                  <div class="para" id="qss_1-2-3-1-1">The value is the last one in the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qss_1_opt_c">
                  <div class="para" id="qss_1-2-3-2-1">There is one case that will take longer.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qss_1_opt_d" data-correct="">
                  <div class="para" id="qss_1-2-4-1-1">The value isn’t in the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qss_1_opt_d">
                  <div class="para" id="qss_1-2-4-2-1">A sequential search loops through the elements of an array or list starting with the first and ending with the last and returns from the loop as soon as it finds the passed value. It has to check every value in the array when the value it is looking for is not in the array.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.14.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qss_2" data-multipleanswers="false">
                <div class="para" id="qss_2-1-1">7-5-5: Which will cause the <em class="emphasis">shortest</em> execution of a sequential search looking for a value in an array of integers?</div>
                <li data-component="answer" id="csawesome2_2_qss_2_opt_a" data-correct="">
                  <div class="para" id="qss_2-2-1-1-1">The value is the first one in the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qss_2_opt_a">
                  <div class="para" id="qss_2-2-1-2-1">This would only take one execution of the loop.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qss_2_opt_b">
                  <div class="para" id="qss_2-2-2-1-1">The value is in the middle of the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qss_2_opt_b">
                  <div class="para" id="qss_2-2-2-2-1">Are you thinking of binary search?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qss_2_opt_c">
                  <div class="para" id="qss_2-2-3-1-1">The value is the last one in the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qss_2_opt_c">
                  <div class="para" id="qss_2-2-3-2-1">This would be true if you were starting at the last element, but the algorithm in the course description starts with the first element.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qss_2_opt_d">
                  <div class="para" id="qss_2-2-4-1-1">The value isn’t in the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qss_2_opt_d">
                  <div class="para" id="qss_2-2-4-2-1">This is true for the longest execution time, but we are looking for the shortest.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.14.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_seqSearchStr">
                <div class="ac_question" id="csawesome2_2_seqSearchStr_question">
                  <div class="para" id="seqSearchStr-1-1">Demonstration of a linear search for a String. Click on the Code Lens button or the link below to step through this code.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_seqSearchStr_editor" data-question_label="" data-codelens="true">public class SearchTest
{

    public static int sequentialSearch(String[] elements, String target)
    {
        for (int j = 0; j &lt; elements.length; j++)
        {
            if (elements[j].equals(target))
            {
                return j;
            }
        }
        return -1;
    }

    public static void main(String[] args)
    {
        String[] arr1 = {"blue", "red", "purple", "green"};

        // test when the target is in the array
        int index = sequentialSearch(arr1, "red");
        System.out.println(index);

        // test when the target is not in the array
        index = sequentialSearch(arr1, "pink");
        System.out.println(index);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "1\n-1";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.14.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_binSearch">
                <div class="ac_question" id="csawesome2_2_binSearch_question">
                  <div class="para" id="binSearch-1-1">Demonstration of iterative binary search. Click on the Code Lens button to step through this code.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_binSearch_editor" data-question_label="" data-codelens="true">public class SearchTest
{
    public static int binarySearch(int[] elements, int target)
    {
        int left = 0;
        int right = elements.length - 1;
        while (left &lt;= right)
        {
            int middle = (left + right) / 2;
            if (target &lt; elements[middle])
            {
                right = middle - 1;
            }
            else if (target &gt; elements[middle])
            {
                left = middle + 1;
            }
            else
            {
                return middle;
            }
        }
        return -1;
    }

    public static void main(String[] args)
    {
        int[] arr1 = {-20, 3, 15, 81, 432};

        // test when the target is in the middle
        int index = binarySearch(arr1, 15);
        System.out.println(index);

        // test when the target is the first item in the array
        index = binarySearch(arr1, -20);
        System.out.println(index);

        // test when the target is in the array - last
        index = binarySearch(arr1, 432);
        System.out.println(index);

        // test when the target is not in the array
        index = binarySearch(arr1, 53);
        System.out.println(index);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "2\n0\n4\n-1";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.14.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_binSearchStrings">
                <div class="ac_question" id="csawesome2_2_binSearchStrings_question">
                  <div class="para" id="binSearchStrings-1-1">Demonstration of binary search with strings using compareTo. Click on the Code Lens button to step through the code.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_binSearchStrings_editor" data-question_label="" data-codelens="true">public class BinSearchStrings
{
    public static int binarySearch(String[] elements, String target)
    {
        int left = 0;
        int right = elements.length - 1;
        while (left &lt;= right)
        {
            int middle = (left + right) / 2;
            if (target.compareTo(elements[middle]) &lt; 0)
            {
                right = middle - 1;
            }
            else if (target.compareTo(elements[middle]) &gt; 0)
            {
                left = middle + 1;
            }
            else
            {
                return middle;
            }
        }
        return -1;
    }

    public static void main(String[] args)
    {
        String[] arr1 = {"apple", "banana", "cherry", "kiwi", "melon"};

        // test when the target is in the middle
        int index = binarySearch(arr1, "cherry");
        System.out.println(index);

        // test when the target is the first item in the array
        index = binarySearch(arr1, "apple");
        System.out.println(index);

        // test when the target is in the array - last
        index = binarySearch(arr1, "melon");
        System.out.println(index);

        // test when the target is not in the array
        index = binarySearch(arr1, "pear");
        System.out.println(index);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "2\n0\n4\n-1";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.14.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qbs_1" data-multipleanswers="false">
                <div class="para" id="qbs_1-1-1">7-5-9: Which will cause the <em class="emphasis">shortest</em> execution of a binary search looking for a value in an array of integers?</div>
                <li data-component="answer" id="csawesome2_2_qbs_1_opt_a">
                  <div class="para" id="qbs_1-2-1-1-1">The value is the first one in the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qbs_1_opt_a">
                  <div class="para" id="qbs_1-2-1-2-1">This would be true for sequential search, not binary.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qbs_1_opt_b" data-correct="">
                  <div class="para" id="qbs_1-2-2-1-1">The value is in the middle of the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qbs_1_opt_b">
                  <div class="para" id="qbs_1-2-2-2-1">If the value is in the middle of the array the binary search will return after one iteration of the loop.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qbs_1_opt_c">
                  <div class="para" id="qbs_1-2-3-1-1">The value is the last one in the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qbs_1_opt_c">
                  <div class="para" id="qbs_1-2-3-2-1">How would that be the shortest in a binary search?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qbs_1_opt_d">
                  <div class="para" id="qbs_1-2-4-1-1">The value isn’t in the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qbs_1_opt_d">
                  <div class="para" id="qbs_1-2-4-2-1">This is true for the longest execution time, but we are looking for the shortest.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.14.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qbs_2" data-multipleanswers="false"><div class="para" id="qbs_2-1-1">7-5-10: Which of the following conditions must be true in order to search for a value using binary search?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">I. The values in the array must be integers.
II. The values in the array must be in sorted order.
III. The array must not contain duplicate values.
</code></pre></div><li data-component="answer" id="csawesome2_2_qbs_2_opt_a"><div class="para" id="qbs_2-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qbs_2_opt_a"><div class="para" id="qbs_2-2-1-2-1">You can use a binary search on any type of data that can be compared, but the data must be in order.</div></li><li data-component="answer" id="csawesome2_2_qbs_2_opt_b"><div class="para" id="qbs_2-2-2-1-1">I and II</div></li><li data-component="feedback" id="csawesome2_2_qbs_2_opt_b"><div class="para" id="qbs_2-2-2-2-1">You can use a binary search on any type of data that can be compared.</div></li><li data-component="answer" id="csawesome2_2_qbs_2_opt_c" data-correct=""><div class="para" id="qbs_2-2-3-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qbs_2_opt_c"><div class="para" id="qbs_2-2-3-2-1">The only requirement for using a Binary Search is that the values must be ordered.</div></li><li data-component="answer" id="csawesome2_2_qbs_2_opt_d"><div class="para" id="qbs_2-2-4-1-1">II and III</div></li><li data-component="feedback" id="csawesome2_2_qbs_2_opt_d"><div class="para" id="qbs_2-2-4-2-1">The array can contain duplicate values.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.14.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qbs_3" data-multipleanswers="false">
                <div class="para" id="qbs_3-1-1">7-5-11: How many times would the loop in the binary search run for an array  int[] arr = {2, 10, 23, 31, 55, 86} with binarySearch(arr,55)?</div>
                <li data-component="answer" id="csawesome2_2_qbs_3_opt_a" data-correct="">
                  <div class="para" id="qbs_3-2-1-1-1">2</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qbs_3_opt_a">
                  <div class="para" id="qbs_3-2-1-2-1">It will first compare with the value at index 2 and then index 4 and then return 4.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qbs_3_opt_b">
                  <div class="para" id="qbs_3-2-2-1-1">1</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qbs_3_opt_b">
                  <div class="para" id="qbs_3-2-2-2-1">This would be true if we were looking for 23.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qbs_3_opt_c">
                  <div class="para" id="qbs_3-2-3-1-1">3</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qbs_3_opt_c">
                  <div class="para" id="qbs_3-2-3-2-1">This would be true if we were looking for 31.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.14.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qbs_4" data-multipleanswers="false">
                <div class="para" id="qbs_4-1-1">7-5-12: If you had an ordered array of size 500, what is the maximum number of iterations required to find an element with binary search?</div>
                <li data-component="answer" id="csawesome2_2_qbs_4_opt_a">
                  <div class="para" id="qbs_4-2-1-1-1">approximately 15 times</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qbs_4_opt_a">
                  <div class="para" id="qbs_4-2-1-2-1">How many times can you divide 500 in half?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qbs_4_opt_b" data-correct="">
                  <div class="para" id="qbs_4-2-2-1-1">approximately 9 times</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qbs_4_opt_b">
                  <div class="para" id="qbs_4-2-2-2-1">You can divide 500 in half, 9 times, or you can observe that 2^9 = 512 which is slightly bigger than 500.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qbs_4_opt_c">
                  <div class="para" id="qbs_4-2-3-1-1">500 times</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qbs_4_opt_c">
                  <div class="para" id="qbs_4-2-3-2-1">How many times can you divide 500 in half?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qbs_4_opt_d">
                  <div class="para" id="qbs_4-2-4-1-1">2 times</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qbs_4_opt_d">
                  <div class="para" id="qbs_4-2-4-2-1">How many times can you divide 500 in half?</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.14.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge7-5-search-coding">
                <div class="ac_question" id="csawesome2_2_challenge7-5-search-coding_question">
                  <div class="para" id="challenge7-5-search-coding-1-1">This spellchecker uses an ArrayList for the dictionary. Write a <code class="code-inline tex2jax_ignore">linearSearch(word)</code> and a <code class="code-inline tex2jax_ignore">binarySearch(word)</code> method. Use <code class="code-inline tex2jax_ignore">get(i)</code>, <code class="code-inline tex2jax_ignore">size()</code>, <code class="code-inline tex2jax_ignore">equals</code>, and <code class="code-inline tex2jax_ignore">compareTo</code>. Return a count of the number of words checked.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge7-5-search-coding_editor" data-question_label="" data-codelens="true">import java.io.*;
import java.nio.file.*;
import java.util.*;

public class SpellChecker
{
    private ArrayList&lt;String&gt; dictionary;

    /* Constructor populates the dictionary ArrayList from the file dictionary.txt*/
    public SpellChecker() throws IOException
    {
        List&lt;String&gt; lines = Files.readAllLines(Paths.get("dictionary.txt"));
        dictionary = new ArrayList&lt;String&gt;(lines);
    }

    /**
     * Write a linearSearch(word) method that finds a word
     * in the ArrayList dictionary. It should also keep
     * a count of the number of words checked.
     *
     * @param String word to be found in elements.
     * @return a count of how many words checked before returning.
     */
    public int linearSearch(String word)
    {

    }

    /**
     * Write a binarySearch(word) method that finds the word
     * in the ArrayList dictionary. It should also keep
     * a count of the number of words checked.
     *
     * @param String word to be found in elements.
     * @return a count of how many words checked before returning.
     */
    public int binarySearch(String word)
    {

    }

    public static void main(String[] args) throws IOException
    {
        SpellChecker checker = new SpellChecker();
        String word = "catz";
        int i = checker.linearSearch(word);
        System.out.println("Linear search steps for " + word + " = " + i);
        int count = checker.binarySearch(word);
        System.out.println("Binary search steps for " + word + " = " + count);
    }
}
====
import static org.junit.Assert.*;
import org.junit.*;
import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
       super("SpellChecker");
    }


   @Test
   public void test1()
   {
       Object[] args = {"medium"};
       String output = getMethodOutput("linearSearch", args);
       String expect = "5549";

       boolean passed =
               getResults(
                       expect,
                       output,
                       "linearSearch(\"medium\")"
                       );
       assertTrue(passed);
   }

   @Test
   public void test2()
   {
       Object[] args = {"medium"};
       String output = getMethodOutput("binarySearch", args);
       String expect = "13";

       boolean passed =
               getResults(
                       expect,
                       output,
                       "binarySearch(\"medium\")"
                       );
       assertTrue(passed);
   }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>sorting-algorithms</id>
      <title>Sorting Algorithms</title>
      <question>
        <label>Video: Ns4TPTC8whw</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="Ns4TPTC8whw" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: g-PGLbMth_g</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="g-PGLbMth_g" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.15.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_selSort">
                <div class="ac_question" id="csawesome2_2_selSort_question">
                  <div class="para" id="selSort-1-1">Demonstration of selection sort. Click on the Code Lens button or the link below to step through the code.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_selSort_editor" data-question_label="" data-codelens="true">import java.util.Arrays;

public class SortTest
{
    public static void selectionSort(int[] elements)
    {
        for (int j = 0; j &lt; elements.length - 1; j++)
        {
            int minIndex = j;
            for (int k = j + 1; k &lt; elements.length; k++)
            {
                if (elements[k] &lt; elements[minIndex])
                {
                    minIndex = k;
                }
            }
            int temp = elements[j];
            elements[j] = elements[minIndex];
            elements[minIndex] = temp;
        }
    }

    public static void main(String[] args)
    {
        int[] arr1 = {3, 86, -20, 14, 40};
        System.out.println(Arrays.toString(arr1));
        selectionSort(arr1);
        System.out.println(Arrays.toString(arr1));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "[3, 86, -20, 14, 40]\n[-20, 3, 14, 40, 86]";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.15.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsel_1" data-multipleanswers="false">
                <div class="para" id="qsel_1-1-1">7-6-4: Under what condition will a selection sort execute faster?</div>
                <li data-component="answer" id="csawesome2_2_qsel_1_opt_a">
                  <div class="para" id="qsel_1-2-1-1-1">If the data is already sorted in ascending order</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qsel_1_opt_a">
                  <div class="para" id="qsel_1-2-1-2-1">How would this be faster?  Look at the code.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qsel_1_opt_b">
                  <div class="para" id="qsel_1-2-2-1-1">If the data is already sorted in descending order</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qsel_1_opt_b">
                  <div class="para" id="qsel_1-2-2-2-1">How would this be faster?  Look at the code.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qsel_1_opt_c" data-correct="">
                  <div class="para" id="qsel_1-2-3-1-1">It will always take the same amount of time to execute</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qsel_1_opt_c">
                  <div class="para" id="qsel_1-2-3-2-1">A selection sort always does the same number of comparisons and always takes the same time to execute regardless of the order of the data.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.15.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsel_2" data-multipleanswers="false"><div class="para" id="qsel_2-1-1">7-6-5: This method should sort the numbers in the passed array into ascending order. But, it does not work. Which of the following lines is wrong?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static void selectionSort(int[] elements)
{
  for (int j = 0; j &lt; elements.length − 1; j++)      // line 1
  {
     int minIndex = j;                               // line 2
     for (int k = 0; k &lt; elements.length; k++)       // line 3
     {
        if (elements[k] &lt; elements[minIndex])        // line 4
        {
           minIndex = k;                             // line 5
        }
     }
     int temp = elements[j];
     elements[j] = elements[minIndex];
     elements[minIndex] = temp;
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qsel_2_opt_a"><div class="para" id="qsel_2-2-1-1-1">line 1</div></li><li data-component="feedback" id="csawesome2_2_qsel_2_opt_a"><div class="para" id="qsel_2-2-1-2-1">The outer loop starts at 0 and ends when it reaches the length - 1.</div></li><li data-component="answer" id="csawesome2_2_qsel_2_opt_b"><div class="para" id="qsel_2-2-2-1-1">line 2</div></li><li data-component="feedback" id="csawesome2_2_qsel_2_opt_b"><div class="para" id="qsel_2-2-2-2-1">The min index should be set to the outer loop index before the start of the inner loop.</div></li><li data-component="answer" id="csawesome2_2_qsel_2_opt_c" data-correct=""><div class="para" id="qsel_2-2-3-1-1">line 3</div></li><li data-component="feedback" id="csawesome2_2_qsel_2_opt_c"><div class="para" id="qsel_2-2-3-2-1">The inner loop should start at the outer loop index + 1.</div></li><li data-component="answer" id="csawesome2_2_qsel_2_opt_d"><div class="para" id="qsel_2-2-4-1-1">line 4</div></li><li data-component="feedback" id="csawesome2_2_qsel_2_opt_d"><div class="para" id="qsel_2-2-4-2-1">You should compare the element at the inner loop index to the element at the min index to see if it is smaller.</div></li><li data-component="answer" id="csawesome2_2_qsel_2_opt_e"><div class="para" id="qsel_2-2-5-1-1">line 5</div></li><li data-component="feedback" id="csawesome2_2_qsel_2_opt_e"><div class="para" id="qsel_2-2-5-2-1">You should save the new min index as the inner loop index.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: ROalU379l3U</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="ROalU379l3U" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: JU767SDMDvA</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="JU767SDMDvA" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.15.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_insertionSort">
                <div class="ac_question" id="csawesome2_2_insertionSort_question">
                  <div class="para" id="insertionSort-1-1">Demonstration of insertion sort. Click on the Code Lens button or the link below to step through the code.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_insertionSort_editor" data-question_label="" data-codelens="true">import java.util.Arrays;

public class SortTest
{
    public static void insertionSort(int[] elements)
    {
        for (int j = 1; j &lt; elements.length; j++)
        {
            int temp = elements[j];
            int possibleIndex = j;
            while (possibleIndex &gt; 0 &amp;&amp; temp &lt; elements[possibleIndex - 1])
            {
                elements[possibleIndex] = elements[possibleIndex - 1];
                possibleIndex--;
            }
            elements[possibleIndex] = temp;
        }
    }

    public static void main(String[] args)
    {
        int[] arr1 = {3, 86, -20, 14, 40};
        System.out.println(Arrays.toString(arr1));
        insertionSort(arr1);
        System.out.println(Arrays.toString(arr1));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "[3, 86, -20, 14, 40]\n[-20, 3, 14, 40, 86]";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.15.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qins_1" data-multipleanswers="false">
                <div class="para" id="qins_1-1-1">7-6-9: Under what condition will an insertion sort execute faster?</div>
                <li data-component="answer" id="csawesome2_2_qins_1_opt_a" data-correct="">
                  <div class="para" id="qins_1-2-1-1-1">If the data is already sorted in ascending order</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qins_1_opt_a">
                  <div class="para" id="qins_1-2-1-2-1">If the data is already sorted in the correct order you don’t need to move any values.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qins_1_opt_b">
                  <div class="para" id="qins_1-2-2-1-1">If the data is already sorted in descending order</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qins_1_opt_b">
                  <div class="para" id="qins_1-2-2-2-1">This would actually result in the longest execution.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qins_1_opt_c">
                  <div class="para" id="qins_1-2-3-1-1">It will always take the same amount of time to execute</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qins_1_opt_c">
                  <div class="para" id="qins_1-2-3-2-1">This would be true if it was a selection sort.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.15.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qins_2" data-multipleanswers="false"><div class="para" id="qins_2-1-1">7-6-10: This method should sort the numbers in the passed array into ascending order. But, it does not work. Which of the following lines is wrong?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static void insertionSort(int[] elements)
{
  for (int j = 1; j &lt; elements.length - 1; j++)                       // line 1
  {
     int temp = elements[j];                                          // line 2
     int possibleIndex = j;                                           // line 3
     while (possibleIndex &gt; 0 &amp;&amp; temp &lt; elements[possibleIndex - 1])  // line 4
     {
        elements[possibleIndex] = elements[possibleIndex - 1];        // line 5
        possibleIndex--;
     }
     elements[possibleIndex] = temp;
  }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qins_2_opt_a" data-correct=""><div class="para" id="qins_2-2-1-1-1">line 1</div></li><li data-component="feedback" id="csawesome2_2_qins_2_opt_a"><div class="para" id="qins_2-2-1-2-1">It should loop through the entire array.</div></li><li data-component="answer" id="csawesome2_2_qins_2_opt_b"><div class="para" id="qins_2-2-2-1-1">line 2</div></li><li data-component="feedback" id="csawesome2_2_qins_2_opt_b"><div class="para" id="qins_2-2-2-2-1">The value at the outer loop index should be stored in temp.</div></li><li data-component="answer" id="csawesome2_2_qins_2_opt_c"><div class="para" id="qins_2-2-3-1-1">line 3</div></li><li data-component="feedback" id="csawesome2_2_qins_2_opt_c"><div class="para" id="qins_2-2-3-2-1">The possible index should be set to the outer loop index before the inner loop executes.</div></li><li data-component="answer" id="csawesome2_2_qins_2_opt_d"><div class="para" id="qins_2-2-4-1-1">line 4</div></li><li data-component="feedback" id="csawesome2_2_qins_2_opt_d"><div class="para" id="qins_2-2-4-2-1">Loop while the possible index is greater than 0 and the temp value is less than the value at the possible index minus one.</div></li><li data-component="answer" id="csawesome2_2_qins_2_opt_e"><div class="para" id="qins_2-2-5-1-1">line 5</div></li><li data-component="feedback" id="csawesome2_2_qins_2_opt_e"><div class="para" id="qins_2-2-5-2-1">Move the value at possible index minus one to the possible index (move to the right).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-8-17</id>
      <title>What is Recursion?</title>
      <question>
        <label>Video: V2S_8E_ubBY</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="V2S_8E_ubBY" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.16.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_recurb2fill">
                <div class="para" id="recurb2fill-1-1">10-1-5: Which line in the method factorial contains the recursive call (the call to the same method)? <input type="text" placeholder="Text"/></div>
                <script type="application/json">[[{"regex": "^\\s*^\\s*6$\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"recurb2fill-2-1-1-1-1\"&gt;Correct.  This line contains a call to the same method, which makes it a recursive method.&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"recurb2fill-2-1-2-1-1\"&gt;Look for a call to the same method name&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.16.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_FactorialTest">
                <div class="ac_question" id="csawesome2_2_FactorialTest_question">
                  <div class="para" id="FactorialTest-1-1">Run the code below to test the factorial method. What’s the factorial of 6? Add another test to print out the factorial of 6. What’s the factorial of 1? Add another test to print out the factorial of 1.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_FactorialTest_editor" data-question_label="" data-codelens="true">public class FactorialTest
{

    public static int factorial(int n)
    {
        if (n == 0) return 1;
        else return n * factorial(n - 1);
    }

    public static void main(String[] args)
    {
        System.out.println("factorial of 3 is: " + factorial(3));
        System.out.println("factorial of 4 is: " + factorial(4));
        System.out.println("factorial of 5 is: " + factorial(5));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "factorial of 3 is: 6\n"
                    + "factorial of 4 is: 24\n"
                    + "factorial of 5 is: 120\n"
                    + "factorial of 6 is: 720\n"
                    + "factorial of 1 is: 1\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.16.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_rec_base1">
                <span data-question="">
                  <div class="para" id="rec_base1-1-1">Click on the line or lines that contain the test for the base case</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="rec_base1-2-1">When a base case test is true a value is returned and the recursion stops.</div>
                </span>
                <pre><span data-incorrect="">public static int factorial(int n)</span>
<span data-incorrect="">{</span>
    <span data-correct="">if (n == 0)</span>
        <span data-incorrect="">return 1;</span>
    <span data-incorrect="">else</span>
        <span data-incorrect="">return n * factorial(n-1);</span>
<span data-incorrect="">}</span>
</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.16.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qrb_3" data-multipleanswers="false"><div class="para" id="qrb_3-1-1">10-1-8: What is the value of n when this method stops calling itself (when it reaches the base case)?</div> <blockquote class="blockquote" id="qrb_3-1-2"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static int product(int n)
{
   if(n == 1)
      return 1;
   else
      return n * product(n - 2);
}
</code></pre></div></blockquote><li data-component="answer" id="csawesome2_2_qrb_3_opt_a"><div class="para" id="qrb_3-2-1-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_qrb_3_opt_a"><div class="para" id="qrb_3-2-1-2-1">Look again.  What is the value of n when this method returns a value, without doing a recursive call?</div></li><li data-component="answer" id="csawesome2_2_qrb_3_opt_b" data-correct=""><div class="para" id="qrb_3-2-2-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qrb_3_opt_b"><div class="para" id="qrb_3-2-2-2-1">This method stops calling itself when n equals 1 (line 3).</div></li><li data-component="answer" id="csawesome2_2_qrb_3_opt_c"><div class="para" id="qrb_3-2-3-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_qrb_3_opt_c"><div class="para" id="qrb_3-2-3-2-1">Look for a return with a number after it.  When is this code executed?</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.16.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qrb_4" data-multipleanswers="false"><div class="para" id="qrb_4-1-1">10-1-9: What is/are the values of the variable bunnies when this method stops calling itself (when it reaches the base case)?</div> <blockquote class="blockquote" id="qrb_4-1-2"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static int bunnyEars(int bunnies)
{
   if (bunnies == 0) return 0;
   else if (bunnies == 1) return 2;
   else return 2 + bunnyEars(bunnies - 1);
}
</code></pre></div></blockquote><li data-component="answer" id="csawesome2_2_qrb_4_opt_a"><div class="para" id="qrb_4-2-1-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_qrb_4_opt_a"><div class="para" id="qrb_4-2-1-2-1">This method also stops for another value of bunnies.</div></li><li data-component="answer" id="csawesome2_2_qrb_4_opt_b"><div class="para" id="qrb_4-2-2-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qrb_4_opt_b"><div class="para" id="qrb_4-2-2-2-1">This method also stops for another value of bunnies.</div></li><li data-component="answer" id="csawesome2_2_qrb_4_opt_c" data-correct=""><div class="para" id="qrb_4-2-3-1-1">Both 0 and 1</div></li><li data-component="feedback" id="csawesome2_2_qrb_4_opt_c"><div class="para" id="qrb_4-2-3-2-1">This method stops calling itself when bunnies is either 0 or 1.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.16.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qrb_5-new" data-multipleanswers="false"><div class="para" id="qrb_5-new-1-1">10-1-10: Is the following method recursive?</div> <blockquote class="blockquote" id="qrb_5-new-1-2"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static int bunnyEars(int bunnies)
{
   int total = 0;
   for (int i = 0; i &lt; bunnies; i++)
   {
      total = total + 2;
   }
   return total;
}
</code></pre></div></blockquote><li data-component="answer" id="csawesome2_2_qrb_5-new_opt_a"><div class="para" id="qrb_5-new-2-1-1-1">yes</div></li><li data-component="feedback" id="csawesome2_2_qrb_5-new_opt_a"><div class="para" id="qrb_5-new-2-1-2-1">Where is the call to the same method?</div></li><li data-component="answer" id="csawesome2_2_qrb_5-new_opt_b" data-correct=""><div class="para" id="qrb_5-new-2-2-1-1">no</div></li><li data-component="feedback" id="csawesome2_2_qrb_5-new_opt_b"><div class="para" id="qrb_5-new-2-2-2-1">There is no call to the same method, so it is not recursive. This uses iteration instead.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.16.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qrb_5-old" data-multipleanswers="false"><div class="para" id="qrb_5-old-1-1">10-1-11:  Given the method defined below what does the following return: factorial(6)?</div> <blockquote class="blockquote" id="qrb_5-old-1-2"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static int factorial(int n)
{
    if (n == 0)
    {
        return 1;
    }
    else
    {
        return n * factorial(n-1);
    }
}
</code></pre></div></blockquote><li data-component="answer" id="csawesome2_2_qrb_5-old_opt_a"><div class="para" id="qrb_5-old-2-1-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qrb_5-old_opt_a"><div class="para" id="qrb_5-old-2-1-2-1">This would be correct if it was factorial(0), but don’t forget the recursive calls.</div></li><li data-component="answer" id="csawesome2_2_qrb_5-old_opt_b"><div class="para" id="qrb_5-old-2-2-1-1">120</div></li><li data-component="feedback" id="csawesome2_2_qrb_5-old_opt_b"><div class="para" id="qrb_5-old-2-2-2-1">This would be correct if it was factorial(5), but this is factorial(6).</div></li><li data-component="answer" id="csawesome2_2_qrb_5-old_opt_c" data-correct=""><div class="para" id="qrb_5-old-2-3-1-1">720</div></li><li data-component="feedback" id="csawesome2_2_qrb_5-old_opt_c"><div class="para" id="qrb_5-old-2-3-2-1">If you remember that factorial(5) was 120 then this is just 6 * 120 = 720.</div></li><li data-component="answer" id="csawesome2_2_qrb_5-old_opt_d"><div class="para" id="qrb_5-old-2-4-1-1">30</div></li><li data-component="feedback" id="csawesome2_2_qrb_5-old_opt_d"><div class="para" id="qrb_5-old-2-4-2-1">It doesn’t return 6 * 5 it returns 6 * factorial(5).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.16.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qrb_6" data-multipleanswers="false"><div class="para" id="qrb_6-1-1">10-1-12:  Given the method defined below what does the following return: mystery(5)?</div> <blockquote class="blockquote" id="qrb_6-1-2"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static int mystery(int n)
{
   if (n == 0)
   {
      return 1;
   }
   else
   {
      return 2 * mystery (n - 1);
   }
}
</code></pre></div></blockquote><li data-component="answer" id="csawesome2_2_qrb_6_opt_a"><div class="para" id="qrb_6-2-1-1-1">10</div></li><li data-component="feedback" id="csawesome2_2_qrb_6_opt_a"><div class="para" id="qrb_6-2-1-2-1">This would be correct if it addition instead of multiplication.</div></li><li data-component="answer" id="csawesome2_2_qrb_6_opt_b" data-correct=""><div class="para" id="qrb_6-2-2-1-1">32</div></li><li data-component="feedback" id="csawesome2_2_qrb_6_opt_b"><div class="para" id="qrb_6-2-2-2-1">This method calculates 2 raised to the nth power.</div></li><li data-component="answer" id="csawesome2_2_qrb_6_opt_c"><div class="para" id="qrb_6-2-3-1-1">16</div></li><li data-component="feedback" id="csawesome2_2_qrb_6_opt_c"><div class="para" id="qrb_6-2-3-2-1">Check that you didn’t miss one of the recursive calls.</div></li><li data-component="answer" id="csawesome2_2_qrb_6_opt_d"><div class="para" id="qrb_6-2-4-1-1">64</div></li><li data-component="feedback" id="csawesome2_2_qrb_6_opt_d"><div class="para" id="qrb_6-2-4-2-1">This would be true if the call was mystery(6).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.16.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qrb_7" data-multipleanswers="false"><div class="para" id="qrb_7-1-1">10-1-13:  Given the method defined below what does the following print: mystery(4,3)?</div> <blockquote class="blockquote" id="qrb_7-1-2"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static int mystery(int n, int a)
{
    if (n == 1)
    {
        return a;
    }
    return a * mystery(n-1,a);
}
</code></pre></div></blockquote><li data-component="answer" id="csawesome2_2_qrb_7_opt_a"><div class="para" id="qrb_7-2-1-1-1">12</div></li><li data-component="feedback" id="csawesome2_2_qrb_7_opt_a"><div class="para" id="qrb_7-2-1-2-1">This would be correct if it added instead of multiplied.</div></li><li data-component="answer" id="csawesome2_2_qrb_7_opt_b" data-correct=""><div class="para" id="qrb_7-2-2-1-1">81</div></li><li data-component="feedback" id="csawesome2_2_qrb_7_opt_b"><div class="para" id="qrb_7-2-2-2-1">This calculates a to nth power.</div></li><li data-component="answer" id="csawesome2_2_qrb_7_opt_c"><div class="para" id="qrb_7-2-3-1-1">64</div></li><li data-component="feedback" id="csawesome2_2_qrb_7_opt_c"><div class="para" id="qrb_7-2-3-2-1">This would be correct if it was 4 to the 3rd instead of 3 to the 4th power.</div></li><li data-component="answer" id="csawesome2_2_qrb_7_opt_d"><div class="para" id="qrb_7-2-4-1-1">27</div></li><li data-component="feedback" id="csawesome2_2_qrb_7_opt_d"><div class="para" id="qrb_7-2-4-2-1">This would be correct if returned 1 instead of a in the base case.</div></li><li data-component="answer" id="csawesome2_2_qrb_7_opt_e"><div class="para" id="qrb_7-2-5-1-1">243</div></li><li data-component="feedback" id="csawesome2_2_qrb_7_opt_e"><div class="para" id="qrb_7-2-5-2-1">This would be correct if it was 3 to the 5th.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.16.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qrb_8" data-multipleanswers="false"><div class="para" id="qrb_8-1-1">10-1-14:  Given the method defined below what does the following print: mystery(1234)?</div> <blockquote class="blockquote" id="qrb_8-1-2"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static void mystery (int x) {
   System.out.print(x % 10);

   if ((x / 10) != 0)
   {
      mystery(x / 10);
   }
   System.out.print(x % 10);
}
</code></pre></div></blockquote><li data-component="answer" id="csawesome2_2_qrb_8_opt_a"><div class="para" id="qrb_8-2-1-1-1">12344321</div></li><li data-component="feedback" id="csawesome2_2_qrb_8_opt_a"><div class="para" id="qrb_8-2-1-2-1">Remember that 1234 % 10 returns the rightmost digit.</div></li><li data-component="answer" id="csawesome2_2_qrb_8_opt_b"><div class="para" id="qrb_8-2-2-1-1">1234</div></li><li data-component="feedback" id="csawesome2_2_qrb_8_opt_b"><div class="para" id="qrb_8-2-2-2-1">There are two calls that print something in this method.</div></li><li data-component="answer" id="csawesome2_2_qrb_8_opt_c"><div class="para" id="qrb_8-2-3-1-1">4321</div></li><li data-component="feedback" id="csawesome2_2_qrb_8_opt_c"><div class="para" id="qrb_8-2-3-2-1">There are two calls that print something in this method.</div></li><li data-component="answer" id="csawesome2_2_qrb_8_opt_d" data-correct=""><div class="para" id="qrb_8-2-4-1-1">43211234</div></li><li data-component="feedback" id="csawesome2_2_qrb_8_opt_d"><div class="para" id="qrb_8-2-4-2-1">This method prints the right most digit and then removes the rightmost digit for the recursive call.  It prints both before and after the recursive call.</div></li><li data-component="answer" id="csawesome2_2_qrb_8_opt_e"><div class="para" id="qrb_8-2-5-1-1">32144123</div></li><li data-component="feedback" id="csawesome2_2_qrb_8_opt_e"><div class="para" id="qrb_8-2-5-2-1">Since 1234 % 10 returns the rightmost digit, the first thing printed is 4.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.16.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qrb_9" data-multipleanswers="false"><div class="para" id="qrb_9-1-1">10-1-15:  Given the method defined below what does the following return: mystery(“xyzxyxy”)? Note that this recursive method traverses a String.</div> <blockquote class="blockquote" id="qrb_9-1-2"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static int mystery(String str)
{
   if (str.length() == 1)
   {
       return 0;
   }
   else
   {
      if (str.substring(0,1).equals("y"))
      {
          return 1 + mystery(str.substring(1));
      }
      else
      {
          return mystery(str.substring(1));
      }
   }
}
</code></pre></div></blockquote><li data-component="answer" id="csawesome2_2_qrb_9_opt_a"><div class="para" id="qrb_9-2-1-1-1">7</div></li><li data-component="feedback" id="csawesome2_2_qrb_9_opt_a"><div class="para" id="qrb_9-2-1-2-1">This would be correct if was counting the number of characters in the string, but that isn’t what it is doing.</div></li><li data-component="answer" id="csawesome2_2_qrb_9_opt_b" data-correct=""><div class="para" id="qrb_9-2-2-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_qrb_9_opt_b"><div class="para" id="qrb_9-2-2-2-1">This method seems to be counting the number of y’s in the string, but fails to check if a single character is a y.</div></li><li data-component="answer" id="csawesome2_2_qrb_9_opt_c"><div class="para" id="qrb_9-2-3-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qrb_9_opt_c"><div class="para" id="qrb_9-2-3-2-1">Don’t forget that there are recursive calls too.</div></li><li data-component="answer" id="csawesome2_2_qrb_9_opt_d"><div class="para" id="qrb_9-2-4-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_qrb_9_opt_d"><div class="para" id="qrb_9-2-4-2-1">This would be correct if the base case returned 1 if the single character was a y.</div></li><li data-component="answer" id="csawesome2_2_qrb_9_opt_e"><div class="para" id="qrb_9-2-5-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_qrb_9_opt_e"><div class="para" id="qrb_9-2-5-2-1">Don’t forget about the recursive calls.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.16.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_recBase1">
                <div class="para" id="recBase1-1-1">10-1-16: What is the value of A in the trace above? <input type="text" placeholder="Text"/></div>
                <script type="application/json">[[{"regex": "^\\s*^\\s*^1$\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"recBase1-2-1-1-1-1\"&gt;Correct!&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"recBase1-2-1-2-1-1\"&gt;What is the value returned from mystery(0)?&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.16.18 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_recFBTracex1">
                <div class="para" id="recFBTracex1-1-1">10-1-17: What is the value of X in the trace above? <input type="text" placeholder="Text"/></div>
                <script type="application/json">[[{"regex": "^\\s*^\\s*^27$\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"recFBTracex1-2-1-1-1-1\"&gt;Correct!&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"recFBTracex1-2-1-2-1-1\"&gt;What is the result of mystery(3)?&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.16.19 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_recFBTracey1">
                <div class="para" id="recFBTracey1-1-1">10-1-18: What is the value of Y in the trace above? <input type="text" placeholder="Text"/></div>
                <script type="application/json">[[{"regex": "^\\s*^\\s*^81$\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"recFBTracey1-2-1-1-1-1\"&gt;Correct!&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"recFBTracey1-2-1-2-1-1\"&gt;What is the result of 3 * mystery(3)?&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.16.20 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_recFBBase2">
                <div class="para" id="recFBBase2-1-1">10-1-19: What is the value of B in the trace above? <input type="text" placeholder="Text"/></div>
                <script type="application/json">[[{"regex": "^\\s*^\\s*^0$\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"recFBBase2-2-1-1-1-1\"&gt;Correct!&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"recFBBase2-2-1-2-1-1\"&gt;What is the value returned from strMethod(“y”)?&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.16.21 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_recFBRetX2">
                <div class="para" id="recFBRetX2-1-1">10-1-20: What is the value of X in the trace above? <input type="text" placeholder="Text"/></div>
                <script type="application/json">[[{"regex": "^\\s*^\\s*^0$\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"recFBRetX2-2-1-1-1-1\"&gt;Correct!&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"recFBRetX2-2-1-2-1-1\"&gt;What is the value returned from strMethod(“ry”)?&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.16.22 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_recFBRetY2">
                <div class="para" id="recFBRetY2-1-1">10-1-21: What is the value of Y in the trace above? <input type="text" placeholder="Text"/></div>
                <script type="application/json">[[{"regex": "^\\s*^\\s*^1$\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"recFBRetY2-2-1-1-1-1\"&gt;Correct!&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"recFBRetY2-2-1-2-1-1\"&gt;What is the value returned from strMethod(“ery”)?&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.16.23 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_recFBRetZ2">
                <div class="para" id="recFBRetZ2-1-1">10-1-22: What is the value of Z in the trace above? <input type="text" placeholder="Text"/></div>
                <script type="application/json">[[{"regex": "^\\s*^\\s*^2$\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"recFBRetZ2-2-1-1-1-1\"&gt;Correct!&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"recFBRetZ2-2-1-2-1-1\"&gt;What is the value returned from strMethod(“every”)?&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.16.7.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_recurb1fill">
                <div class="para" id="recurb1fill-1-1">10-1-1: Which line in the method neverEnd (shown above) contains the recursive call (the call to the same method)? <input type="text" placeholder="Text"/></div>
                <script type="application/json">[[{"regex": "^\\s*^\\s*4$\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"recurb1fill-2-1-1-1-1\"&gt;Correct.  This line contains a call to the same method, which makes it a recursive method.&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"recurb1fill-2-1-2-1-1\"&gt;Look for a call to the same method name&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.16.7.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qrb_1" data-multipleanswers="false"><div class="para" id="qrb_1-1-1">10-1-2:  Is the following method recursive?</div> <blockquote class="blockquote" id="qrb_1-1-2"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static int mystery()
{
   int total = 0;
   for (int i=10; i&gt;0; i--)
   {
      total = total + i;
   }
   return total;
}
</code></pre></div></blockquote><li data-component="answer" id="csawesome2_2_qrb_1_opt_a"><div class="para" id="qrb_1-2-1-1-1">Yes</div></li><li data-component="feedback" id="csawesome2_2_qrb_1_opt_a"><div class="para" id="qrb_1-2-1-2-1">Where is the call to the same method?</div></li><li data-component="answer" id="csawesome2_2_qrb_1_opt_b" data-correct=""><div class="para" id="qrb_1-2-2-1-1">No</div></li><li data-component="feedback" id="csawesome2_2_qrb_1_opt_b"><div class="para" id="qrb_1-2-2-2-1">There is no call to the same method, so this can not be a recursive method. It uses iteration instead.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.16.7.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qrb_2" data-multipleanswers="false"><div class="para" id="qrb_2-1-1">10-1-3: Is the following method recursive?</div> <blockquote class="blockquote" id="qrb_2-1-2"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static int mystery2(int x)
{
   if (x == 1) return 1;
   else return x + mystery2(x-1);
}
</code></pre></div></blockquote><li data-component="answer" id="csawesome2_2_qrb_2_opt_a" data-correct=""><div class="para" id="qrb_2-2-1-1-1">Yes</div></li><li data-component="feedback" id="csawesome2_2_qrb_2_opt_a"><div class="para" id="qrb_2-2-1-2-1">Yes, any method that contains at least one call to the same method is recursive.</div></li><li data-component="answer" id="csawesome2_2_qrb_2_opt_b"><div class="para" id="qrb_2-2-2-1-1">No</div></li><li data-component="feedback" id="csawesome2_2_qrb_2_opt_b"><div class="para" id="qrb_2-2-2-2-1">Look again.  Check if the method contains a call to itself.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>recursive-searching-and-sorting</id>
      <title>Recursive Searching and Sorting</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class IterativeBinarySearch
{
    public static int binarySearch(int[] elements, int target)
    {
        int left = 0;
        int right = elements.length - 1;
        while (left &lt;= right)
        {
            int middle = (left + right) / 2;
            if (target &lt; elements[middle])
            {
                right = middle - 1;
            }
            else if (target &gt; elements[middle])
            {
                left = middle + 1;
            }
            else
            {
                return middle;
            }
        }
        return -1;
    }

    public static void main(String[] args)
    {
        int[] arr1 = {-20, 3, 15, 81, 432};

        int index = binarySearch(arr1, 81);
        System.out.println(index);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.17.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_recursiveBinarySearch">
                <div class="ac_question" id="csawesome2_2_recursiveBinarySearch_question">
                  <div class="para" id="recursiveBinarySearch-1-1">Run the code below. Try searching for the value 3 and then the value 2 which is not in the array. What would happen if we removed the second base case checking if end &lt; start? Try it and see.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_recursiveBinarySearch_editor" data-question_label="" data-codelens="true">public class RecursiveBinarySearch
{
    public static int recursiveBinarySearch(
        int[] array, int start, int end, int target)
    {
        int middle = (start + end) / 2;
        // base case: check middle element
        if (target == array[middle])
        {
            return middle;
        }
        // base case: check if we've run out of elements
        if (end &lt; start)
        {
            return -1; // not found
        }
        // recursive call: search start to middle
        if (target &lt; array[middle])
        {
            return recursiveBinarySearch(array, start, middle - 1, target);
        }
        // recursive call: search middle to end
        if (target &gt; array[middle])
        {
            return recursiveBinarySearch(array, middle + 1, end, target);
        }
        return -1;
    }

    public static void main(String[] args)
    {
        int[] array = {3, 7, 12, 19, 22, 25, 29, 30};
        int target = 25;
        int foundIndex = recursiveBinarySearch(array, 0, array.length - 1, target);
        System.out.println(target + " was found at index " + foundIndex);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: XaqR3G_NVoo</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="XaqR3G_NVoo" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: 4VqmGXwpLqc</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="4VqmGXwpLqc" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">import java.util.Arrays;

public class SortTest
{
    public static void mergeSort(int[] elements)
    {
        int n = elements.length;
        int[] temp = new int[n];
        mergeSortHelper(elements, 0, n - 1, temp);
    }

    private static void mergeSortHelper(
        int[] elements, int from, int to, int[] temp)
    {
        if (from &lt; to)
        {
            int middle = (from + to) / 2;
            mergeSortHelper(elements, from, middle, temp);
            mergeSortHelper(elements, middle + 1, to, temp);
            merge(elements, from, middle, to, temp);
        }
    }

    private static void merge(
        int[] elements, int from, int mid, int to, int[] temp)
    {
        int i = from;
        int j = mid + 1;
        int k = from;

        while (i &lt;= mid &amp;&amp; j &lt;= to)
        {
            if (elements[i] &lt; elements[j])
            {
                temp[k] = elements[i];
                i++;
            }
            else
            {
                temp[k] = elements[j];
                j++;
            }
            k++;
        }

        while (i &lt;= mid)
        {
            temp[k] = elements[i];
            i++;
            k++;
        }

        while (j &lt;= to)
        {
            temp[k] = elements[j];
            j++;
            k++;
        }

        for (k = from; k &lt;= to; k++)
        {
            elements[k] = temp[k];
        }
    }

    public static void main(String[] args)
    {
        int[] arr1 = {86, 3, 43, 5};
        System.out.println(Arrays.toString(arr1));
        mergeSort(arr1);
        System.out.println(Arrays.toString(arr1));
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.17.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qms_1" data-multipleanswers="false">
                <div class="para" id="qms_1-1-1">10-2-8: Under what condition will a merge sort execute faster?</div>
                <li data-component="answer" id="csawesome2_2_qms_1_opt_a">
                  <div class="para" id="qms_1-2-1-1-1">If the data is already sorted in ascending order</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qms_1_opt_a">
                  <div class="para" id="qms_1-2-1-2-1">This won’t really affect the execution time for merge sort.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qms_1_opt_b">
                  <div class="para" id="qms_1-2-2-1-1">If the data is already sorted in descending order</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qms_1_opt_b">
                  <div class="para" id="qms_1-2-2-2-1">This won’t really affect the execution time for merge sort.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qms_1_opt_c" data-correct="">
                  <div class="para" id="qms_1-2-3-1-1">It will always take the same amount of time to execute</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qms_1_opt_c">
                  <div class="para" id="qms_1-2-3-2-1">It will take about the same time regardless of the data.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.17.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qms_2" data-multipleanswers="false">
                <div class="para" id="qms_2-1-1">10-2-9: Which sort should be the fastest most of the time?</div>
                <li data-component="answer" id="csawesome2_2_qms_2_opt_a">
                  <div class="para" id="qms_2-2-1-1-1">selection sort</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qms_2_opt_a">
                  <div class="para" id="qms_2-2-1-2-1">Merge sort is always faster than selection sort.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qms_2_opt_b">
                  <div class="para" id="qms_2-2-2-1-1">insertion sort</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qms_2_opt_b">
                  <div class="para" id="qms_2-2-2-2-1">Merge sort is usually faster than insertion sort.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qms_2_opt_c" data-correct="">
                  <div class="para" id="qms_2-2-3-1-1">merge sort</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qms_2_opt_c">
                  <div class="para" id="qms_2-2-3-2-1">Merge sort is always faster than selection sort and usually faster than insertion sort.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: AMJjtTo1LLE</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="AMJjtTo1LLE" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>unit-6-summary</id>
      <title>Unit 6 Summary</title>
      <question>
        <label>Exercise 4.18.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_ch7_match_1">
                <span data-subcomponent="question">
                  <div class="para" id="ch7_match_1-1-1">Drag the item from the left and drop it on its corresponding answer on the right.  Click the "Check Me" button to see if you are correct.</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="ch7_match_1-2-1">Review the summaries above.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_ch7_match_1_drag1">The index of the last element</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch7_match_1_drag1">length - 1</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch7_match_1_drag2">The number of elements in the array</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch7_match_1_drag2">length</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch7_match_1_drag3">The index of the first element</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch7_match_1_drag3">0</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch7_match_1_drag4">The index of the second element</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch7_match_1_drag4">1</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.18.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_ch7_match_2">
                <span data-subcomponent="question">
                  <div class="para" id="ch7_match_2-1-1">Drag the description from the left and drop it on the correct code on the right.  Click the "Check Me" button to see if you are correct.</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="ch7_match_2-2-1">Review the summaries above.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_ch7_match_2_drag1">Declare an integer array named nums</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch7_match_2_drag1">int[] nums;</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch7_match_2_drag2">Declare and create a String array named list1 that can hold 3 elements</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch7_match_2_drag2">String[] list1 = new String[3];</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch7_match_2_drag3">Initialize an array of integers named nums to contain the first 3 whole numbers</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch7_match_2_drag3">int[] nums = {1,2,3};</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch7_match_2_drag4">Initialize a String array named list1 to contain the first 3 letters of the alphabet as separate strings</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch7_match_2_drag4">String[] list1 = {"a", "b", "c"};</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>arraylist-summary</id>
      <title>ArrayList Summary</title>
      <question>
        <label>Exercise 4.19.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_ch10_17_match_1">
                <span data-subcomponent="question">
                  <div class="para" id="ch10_17_match_1-1-1">Drag the item from the left and drop it on its corresponding answer on the right.  Click the "Check Me" button to see if you are correct.</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="ch10_17_match_1-2-1">Review the summaries above.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_ch10_17_match_1_drag1">The index of the last element</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch10_17_match_1_drag1">size() - 1</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch10_17_match_1_drag2">The number of elements in the list</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch10_17_match_1_drag2">size()</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch10_17_match_1_drag3">The index of the first element</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch10_17_match_1_drag3">0</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch10_17_match_1_drag4">The index of the second element</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch10_17_match_1_drag4">1</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.19.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_ch10_17_match_2">
                <span data-subcomponent="question">
                  <div class="para" id="ch10_17_match_2-1-1">Drag the description from the left and drop it on the correct code on the right.  Click the "Check Me" button to see if you are correct.</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="ch10_17_match_2-2-1">Review the summaries above.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_ch10_17_match_2_drag1">Declare an integer list named numList</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch10_17_match_2_drag1">List&lt;Integer&gt; numList = null;</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch10_17_match_2_drag2">Declare and create a list of strings named list1</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch10_17_match_2_drag2">List&lt;String&gt; list1 = new ArrayList&lt;String&gt;();</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch10_17_match_2_drag3">Declare and create a list of integers named list1</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch10_17_match_2_drag3">List&lt;Integer&gt; list1 = new ArrayList&lt;Integer&gt;();</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch10_17_match_2_drag4">Get the first object in a list named list1</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch10_17_match_2_drag4">list1.get(0);</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch10_17_match_2_drag5">Get the last object in a list named list1</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch10_17_match_2_drag5">list1.get(list1.size() - 1);</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>d-arrays-summary</id>
      <title>2D Arrays Summary</title>
      <question>
        <label>Exercise 4.20.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_ch2darr_match_1">
                <span data-subcomponent="question">
                  <div class="para" id="ch2darr_match_1-1-1">Drag the item from the left and drop it on its corresponding answer on the right.  Click the "Check Me" button to see if you are correct.</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="ch2darr_match_1-2-1">Review the summaries above.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_ch2darr_match_1_drag1">The index of the last row</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch2darr_match_1_drag1">arr.length - 1</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch2darr_match_1_drag2">The number of elements in the array</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch2darr_match_1_drag2">arr.length * arr[0].length</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch2darr_match_1_drag3">The index of the item in the first row and first column</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch2darr_match_1_drag3">arr[0][0]</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch2darr_match_1_drag4">The index of the item in the first row and second column</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch2darr_match_1_drag4">arr[0][1]</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.20.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_ch2darr_match_2">
                <span data-subcomponent="question">
                  <div class="para" id="ch2darr_match_2-1-1">Drag the description from the left and drop it on the correct code on the right.  Click the "Check Me" button to see if you are correct.</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="ch2darr_match_2-2-1">Review the summaries above.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_ch2darr_match_2_drag1">Declare an 2d integer array named nums</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch2darr_match_2_drag1">int[][] nums;</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch2darr_match_2_drag2">Declare and create a String 2d array named list1 that has 3 rows and 2 columns</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch2darr_match_2_drag2">String[][] list1 = new String[3][2];</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch2darr_match_2_drag3">Initialize a 2d array of integers named nums so that it has 1,2,3 in the first row and 4,5,6 in the second row.</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch2darr_match_2_drag3">int[][] nums = { {1,2,3},{4,5,6}};</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch2darr_match_2_drag4">Initialize a 2d String array named list1 so that it has a,b,c in the first row and d,e,f in the second row.</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch2darr_match_2_drag4">String[][] list1 = { {"a","b","c"},{"d","e","f"}};</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>recursion-summary</id>
      <title>Recursion Summary</title>
      <question>
        <label>Exercise 4.21.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_ch12rec_match_1">
                <span data-subcomponent="question">
                  <div class="para" id="ch12rec_match_1-1-1">Drag the item from the left and drop it on its corresponding answer on the right.  Click the "Check Me" button to see if you are correct.</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="ch12rec_match_1-2-1">Review the summaries above.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_ch12rec_match_1_drag1">A method that calls itself</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch12rec_match_1_drag1">recursive method</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch12rec_match_1_drag2">The stack of calls to methods</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch12rec_match_1_drag2">call stack</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch12rec_match_1_drag3">The case when the method doesn’t call itself</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch12rec_match_1_drag3">base case</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-8-23</id>
      <title>Mixed Up Code Practice</title>
      <question optional="yes">
        <label>Exercise 4.22.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_arrayex1muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="arrayex1muc-1-1">The following program segment should loop from 0 to less than the length of the array and double each element in the array <code class="code-inline tex2jax_ignore">arr</code> and also print out each new value on the same line separated by “, “. The finished code should print “2, 4, 6, 8, 10, “.  But, the blocks have been mixed up.  Drag the blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">int[] arr = {1, 2, 3, 4, 5};
---
for (int i = 0; i &lt; arr.length; i++)
{
---
    arr[i] = arr[i] * 2;
---
    System.out.println(arr[i] + ", ");
---
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.22.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_arrayex2muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="arrayex2muc-1-1">The following program segment should fill an array with elements that count up from 0 to 50 by 5 (0, 5, 10, 15, 20…).  But the blocks have been mixed up.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">int[] arr = new int[11];
---
for (int i = 0; i &lt; 11; i++)
{
---
    arr[i] = i * 5;
---
    System.out.println(arr[i]);
---
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.22.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_arrayex3muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="arrayex3muc-1-1">The following program segment should print each element in the array that is even using an enhanced for each loop.  But, the blocks have been mixed up.  Drag the blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">int[] arr = {14, -5, 2, 17, 29, -8, 36};
---
for (int value : arr)
{
---
    if (value % 2 == 0)
    {
---
        System.out.println(value);
---
    } //end conditional
---
} //end for loop</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.22.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_arrayex4muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="arrayex4muc-1-1">The following program segment is a method that should return the smallest integer given an array of integers (the parameter).  But, the blocks have been mixed up and include one extra block that is not needed in a correct solution.  Drag the blocks from the left and put them in the correct order with the correct indentation on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static int findSmallest(int[] arr)
{
---
    int smallest = arr[0];
---
    for (int i = 0 ; i &lt; arr.length; i++)
    {
---
        if (arr[i] &lt; smallest)
        {
---
        if (arr[i] &gt; smallest)
        {  #distractor
---
            smallest = arr[i];
---
        }
---
    } //end for loop
---
    return smallest;
---
} //end findSmallest method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.22.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_arrayex5muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="arrayex5muc-1-1">The following program segment is a method that should return the average given an array of integers (the parameter).  But, the blocks have been mixed up and include one extra block that is not needed in a correct solution.  Drag the blocks from the left and put them in the correct order with the correct indentation on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static double findAverage(int[] arr)
{
---
    double sum = 0;
---
    int sum = 0;  #distractor
---
    for (int i = 0; i &lt; arr.length; i++)
    {
---
        sum += arr[i];
---
    } //end for loop
---
    return (sum / arr.length);
---
} //end findAverage method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.22.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_arrayex6muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="arrayex6muc-1-1">The following program segment is a method that should return the largest integer given an array of integers (the parameter).  But, the blocks have been mixed up and include two extra blocks that are not needed in a correct solution.  Drag the needed code from the left to the right and put them in order with the correct indention so that the code would work correctly.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static int findLargest(int[] arr)
{
---
   int largest = arr[0];
---
   int largest = arr.get(0);  #distractor
---
   for (int i = 0; i &lt; arr.length; i++)
   {
---
       if (largest &lt; arr[i])
       {
---
       if (largest &gt; arr[i])
       {  #distractor
---
           largest = arr[i];
---
       } //end conditional
---
   } //end for loop
---
   return largest;
---
} //end findLargest method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.22.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_arrayex7muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="arrayex7muc-1-1">The following program segment is a method that should return an integer array that is “right shifted” by one – so {6, 2, 5, 3} returns {3, 6, 2, 5} (the parameter). Note that the method return type is int[] which means it will return an int array. But, the blocks have been mixed up and include one extra block that is not needed in a correct solution.  Drag the blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static int[] shiftRight(int[] arr)
{
---
    int[] result = new int[arr.length];
---
    result[0] = arr[arr.length-1];
---
    for (int i = 0; i &lt; arr.length - 1; i++)
    {
---
    for (int i = 0; i &lt; arr.length; i++)
    {  #distractor
---
        result[i + 1] = arr[i];
---
    } //end for loop
---
    return result;
---
} //end shiftRight method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.22.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_arrayex8muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="arrayex8muc-1-1">The following program segment is a method that should return a new array of length 2 containing the middle two elements of a given array of integers of even length (the parameter) – so {1,2,3,4} should return {2,3}.  But, the blocks have been mixed up and include one extra block that is not needed in a correct solution.  Drag the blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static int[] makeMiddle(int[] arr)
{
---
    int[] result = new int[2];
---
    int middleIndex = (arr.length / 2) - 1;
---
    int middleIndex = (arr.length / 2);  #distractor
---
    result[0] = arr[middleIndex];
    result[1] = arr[middleIndex + 1];
---
    return result;
---
} //end makeMiddle method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.22.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_arrayex9muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="arrayex9muc-1-1">The following program segment is a method that should return string array that is in reverse order – so {“b”, “a”, “z”} should return {“z”, “a”, “b”}.  But, the blocks have been mixed up and include two extra blocks that are not needed in a correct solution.  Drag the blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static String[] reverse(String[] arr)
{
---
    String[] result = new String[arr.length];
---
    int i = arr.length - 1;
---
    int i = arr.length;  #distractor
---
    for (String element: arr)
    {
---
    for (element: arr)
    {  #distractor
---
      result[i] = element;
---
      i--;
---
    } //end for loop
---
    return result;
---
} //end reverse method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.22.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_arrayex10muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="arrayex10muc-1-1">The following program copies the first half of an array given as an argument to the method into a result array which is returned. But, the blocks have been mixed up and include one extra block that is not needed in a correct solution.  Drag the blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static int[] firstHalf(int[] arr)
{
---
    int[] result = new int[arr.length / 2];
---
    for (int i = 0; i &lt; result.length; i++)
    {
---
    for (int i = 0; i &lt; arr.length; i++)
    {  #distractor
---
      result[i] = arr[i];
---
    } //end for loop
---
    return result;
---
} //end firstHalf method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-001427</id>
      <title>Toggle Mixed Up or Write Code Practice</title>
    </subchapter>
    <subchapter>
      <id>csawesome2-8-25</id>
      <title>Code Practice with Arrays</title>
      <question optional="yes">
        <label>Exercise 4.24.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_UNIQUE-ID-001103">
                <div class="ac_question" id="csawesome2_2_UNIQUE-ID-001103_question">
                  <div class="para" id="UNIQUE-ID-001103-1-1">Fix the following code so that it prints every other value in the array <code class="code-inline tex2jax_ignore">arr1</code> starting with the value at index 0.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_UNIQUE-ID-001103_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int arr1 = {1, 3, 7, 9, 15, 17};
        for (int index = 0; index &lt;= arr1.length; index += 2)
        {
            System.out.print(index + ", ");
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "1, 7, 15, ";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testCodeContains1()
    {
        boolean passed = checkCodeContains("correct array data type", "int[] arr1");
        assertTrue(passed);
    }

    @Test
    public void testCodeContains2()
    {
        boolean passed =
                checkCodeContains(
                        "correct for loop condition",
                        "for (int index = 0; index &lt; arr1.length; index+=2)");
        assertTrue(passed);
    }

    @Test
    public void testCodeContains3()
    {
        boolean passed =
                checkCodeContains(
                        "access values in array instead of index",
                        "System.out.print(arr1[index] + \", \")");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.24.2.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch7Ex1a">
                <div class="ac_question" id="csawesome2_2_ch7Ex1a_question">
                  <div class="para" id="ch7Ex1a-1-1">Solution to question above.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch7Ex1a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int[] arr1 = {1, 3, 7, 9, 15, 17};
        for (int index = 0; index &lt; arr1.length; index += 2)
        {
            System.out.print(arr1[index] + ", ");
        }
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.24.2.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_UNIQUE-ID-001107">
                <div class="ac_question" id="csawesome2_2_UNIQUE-ID-001107_question">
                  <div class="para" id="UNIQUE-ID-001107-1-1">Fix the following to print the values in the array <code class="code-inline tex2jax_ignore">a1</code> starting with the value at the last index and then backwards to the value at the first index.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_UNIQUE-ID-001107_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int[] a1 = {1, 3, 7, 9, 15};
        for (int i = a1.length; i &gt; 0; i--)
        {
            System.out.print(arr[i] + ", ");
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "15, 9, 7, 3, 1, ";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testCodeContains1()
    {
        boolean passed = checkCodeContains("correct starting index", "int i = a1.length-1;");
        assertTrue(passed);
    }

    @Test
    public void testCodeContains2()
    {
        boolean passed = checkCodeContains("correct ending index", "i &gt;= 0;");
        assertTrue(passed);
    }

    @Test
    public void testCodeContains3()
    {
        boolean passed =
                checkCodeContains(
                        "correct array variable name", "System.out.print(a1[i] + \", \");");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.24.2.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch7Ex2a">
                <div class="ac_question" id="csawesome2_2_ch7Ex2a_question">
                  <div class="para" id="ch7Ex2a-1-1">Solution to question above.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch7Ex2a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int[] a1 = {1, 3, 7, 9, 15};
        for (int i = a1.length - 1; i &gt;= 0; i--)
        {
            System.out.print(a1[i] + ", ");
        }
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.24.2.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_UNIQUE-ID-001111">
                <div class="ac_question" id="csawesome2_2_UNIQUE-ID-001111_question">
                  <div class="para" id="UNIQUE-ID-001111-1-1">Rewrite the following code so that it prints all the values in an array <code class="code-inline tex2jax_ignore">arr1</code> using a for-each loop instead of a <code class="code-inline tex2jax_ignore">for</code> loop.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_UNIQUE-ID-001111_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int[] arr1 = {1, 3, 7, 9};
        for (int index = 0; index &lt; arr1.length; index++)
        {
            System.out.print(arr1[index] + ", ");
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testCodeContains()
    {

        boolean passed = checkCodeContains("for each loop", "for (int * : arr1)");
        assertTrue(passed);
    }

    @Test
    public void testCodeContains1()
    {

        boolean passed =
                checkCodeContains("print statement variable name", "System.out.print(* + \", \");");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.24.2.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch7Ex3a">
                <div class="ac_question" id="csawesome2_2_ch7Ex3a_question">
                  <div class="para" id="ch7Ex3a-1-1">Solution to question above.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch7Ex3a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int[] arr1 = {1, 3, 7, 9};
        for (int value : arr1)
        {
            System.out.print(value + ", ");
        }
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.24.2.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_UNIQUE-ID-001115">
                <div class="ac_question" id="csawesome2_2_UNIQUE-ID-001115_question">
                  <div class="para" id="UNIQUE-ID-001115-1-1">Finish the following code so that it prints out all of the odd values in the array <code class="code-inline tex2jax_ignore">a1</code>. Hint: use % to check for odd values.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_UNIQUE-ID-001115_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int[] a1 = {0, 3, 6, 7, 9, 10};
        for (int value : a1)
        {
            // your code here
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "3 7 9 ";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testContains()
    {
        boolean passed = checkCodeContains("Use % to see if value is odd", "value % 2 ");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.24.2.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch7Ex4a">
                <div class="ac_question" id="csawesome2_2_ch7Ex4a_question">
                  <div class="para" id="ch7Ex4a-1-1">Solution to question above.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch7Ex4a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int[] a1 = {0, 3, 6, 7, 9, 10};
        for (int value : a1)
        {
            if (value % 2 == 1)
            {
                System.out.print(value + " ");
            }
        }
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.24.2.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_UNIQUE-ID-001119">
                <div class="ac_question" id="csawesome2_2_UNIQUE-ID-001119_question">
                  <div class="para" id="UNIQUE-ID-001119-1-1">Finish the following method <code class="code-inline tex2jax_ignore">getSum</code> to return the sum of all values in the passed array.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_UNIQUE-ID-001119_editor" data-question_label="" data-codelens="true">public class Test1
{

    public static int getSum(int[] arr) {}

    public static void main(String[] args)
    {
        int[] a1 = {1, 2, 5, 3};
        System.out.println(
                "It should print 11 " + " and your answer is: " + getSum(a1));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "It should print 11  and your answer is: 11";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testMethod()
    {
        int[] nums = {10, 20, 30, 40, 50};
        Object[] args = {nums};

        // name of method, arguments are (nums, 30)
        String output = getMethodOutput("getSum", args);
        String expect = "150";

        boolean passed = getResults(expect, output, "getSum({10, 20, 30, 40, 50})");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.24.2.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch7Ex5a">
                <div class="ac_question" id="csawesome2_2_ch7Ex5a_question">
                  <div class="para" id="ch7Ex5a-1-1">Solution to question above.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch7Ex5a_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static int getSum(int[] arr)
    {
        int sum = 0;
        for (int value : arr)
        {
            sum = sum + value;
        }
        return sum;
    }

    public static void main(String[] args)
    {
        int[] a1 = {1, 2, 5, 3};
        System.out.println(
                "It should print 11 " + " and your answer is: " + getSum(a1));
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.24.2.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_UNIQUE-ID-001123">
                <div class="ac_question" id="csawesome2_2_UNIQUE-ID-001123_question">
                  <div class="para" id="UNIQUE-ID-001123-1-1">Finish the following method to return the sum of all of the non-negative values in the passed array.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_UNIQUE-ID-001123_editor" data-question_label="" data-codelens="true">public class Test1
{

    public static int getSumNonNeg(int[] arr) {}

    public static void main(String[] args)
    {
        int[] a1 = {1, 2, 5, 3, -1, -20};
        System.out.println(
                "The code should print 11 "
                        + "and your answer is: "
                        + getSumNonNeg(a1));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "The code should print 11 and your answer is: 11";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testMethod()
    {
        int[] nums = {10, -20, 30, -40, 50};
        Object[] args = {nums};

        // name of method, arguments are (nums, 30)
        String output = getMethodOutput("getSumNonNeg", args);
        String expect = "90";

        boolean passed = getResults(expect, output, "getSum({10, -20, 30, -40, 50})");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.24.2.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch7Ex6a">
                <div class="ac_question" id="csawesome2_2_ch7Ex6a_question">
                  <div class="para" id="ch7Ex6a-1-1">Solution to question above.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch7Ex6a_editor" data-question_label="" data-codelens="true">public class Test1
{

    public static int getSumNonNeg(int[] arr)
    {
        int sum = 0;
        for (int value : arr)
        {
            if (value &gt;= 0)
            {
                 sum = sum + value;
            }
        }
        return sum;
    }

    public static void main(String[] args)
    {
        int[] a1 =
        {
            1, 2, 5, 3, -1, -20,
        };
        System.out.println(
                "The code should print 11 "
                        + "and your answer is: "
                        + getSumNonNeg(a1));
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.24.2.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_UNIQUE-ID-001127">
                <div class="ac_question" id="csawesome2_2_UNIQUE-ID-001127_question">
                  <div class="para" id="UNIQUE-ID-001127-1-1">Finish the following code to print the strings at the odd indices in the array.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_UNIQUE-ID-001127_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String[] stArr1 = {"Destini", "Landon", "Anaya", "Gabby", "Evert"};
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expectNewL = "Landon\nGabby\n";
        boolean passedNewL = getResults(expectNewL, output, "Expected output from main");
        assertTrue(passedNewL);
    }

    @Test
    public void testCodeContains()
    {

        boolean passed = checkCodeContains("for loop", "for");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.24.2.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch7Ex7na">
                <div class="ac_question" id="csawesome2_2_ch7Ex7na_question">
                  <div class="para" id="ch7Ex7na-1-1">Solution to question above.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch7Ex7na_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String[] stArr1 = {"Destini", "Landon", "Anaya", "Gabby", "Evert"};
        for (int i = 1; i &lt; stArr1.length; i += 2)
        {
            System.out.println(stArr1[i]);
        }
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.24.2.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_UNIQUE-ID-001131">
                <div class="ac_question" id="csawesome2_2_UNIQUE-ID-001131_question">
                  <div class="para" id="UNIQUE-ID-001131-1-1">Finish the method <code class="code-inline tex2jax_ignore">getSumChars</code> below to return the total number of characters in the array of strings <code class="code-inline tex2jax_ignore">strArr</code>.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_UNIQUE-ID-001131_editor" data-question_label="" data-codelens="true">public class Test1
{

    public static int getSumChars(String[] strArr) {}

    public static void main(String[] args)
    {
        String[] strArr = {"hi", "bye", "hola"};
        System.out.println(getSumChars(strArr));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "9";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testCodeContains1()
    {
        boolean passed = checkCodeContains("adding length of each string", ".length()");
        assertTrue(passed);
    }

    @Test
    public void testCodecontains()
    {
        boolean passed = checkCodeContains("for loop", "for");
        assertTrue(passed);
    }

    @Test
    public void testMethod()
    {
        String[] strs = {"a", "aa", "aaa"};
        Object[] args = {strs};

        // name of method, arguments are (nums, 30)
        String output = getMethodOutput("getSumChars", args);
        String expect = "6";

        boolean passed = getResults(expect, output, "getSumChars({\"a\",\"aa\",\"aaa\"})");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.24.2.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch7Ex8na">
                <div class="ac_question" id="csawesome2_2_ch7Ex8na_question">
                  <div class="para" id="ch7Ex8na-1-1">Solution to question above.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch7Ex8na_editor" data-question_label="" data-codelens="true">public class Test1
{
    public static int getSumChars(String[] strArr)
    {
        int sum = 0;
        for (String str : strArr)
        {
            sum = sum + str.length();
        }
        return sum;
    }

    public static void main(String[] args)
    {
        String[] strArr = {"hi", "bye", "hola"};
        System.out.println(getSumChars(strArr));
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.24.2.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_UNIQUE-ID-001135">
                <div class="ac_question" id="csawesome2_2_UNIQUE-ID-001135_question">
                  <div class="para" id="UNIQUE-ID-001135-1-1">Finish the method <code class="code-inline tex2jax_ignore">findMin</code> so that it finds and returns the minimum value in the array.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_UNIQUE-ID-001135_editor" data-question_label="" data-codelens="true">public class Test1
{

    public static int findMin(int[] arr)
    {

    }

    public static void main(String[] args)
    {
        int[] arr = {20, -3, 18, 55, 4};
        System.out.println(findMin(arr));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "-3";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testCodeContains2()
    {
        boolean passed = checkCodeContains("for loop", "for");
        assertTrue(passed);
    }

    @Test
    public void testMethod()
    {
        int[] nums = {10, 20, 5, 40, 50};
        Object[] args = {nums};

        // name of method, arguments are (nums, 30)
        String output = getMethodOutput("findMin", args);
        String expect = "5";

        boolean passed = getResults(expect, output, "findMin({10, 20, 5, 40, 50})");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.24.2.18 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch7Ex9na">
                <div class="ac_question" id="csawesome2_2_ch7Ex9na_question">
                  <div class="para" id="ch7Ex9na-1-1">Solution to question above.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch7Ex9na_editor" data-question_label="" data-codelens="true">public class Test1
{

    public static int findMin(int[] arr)
    {
        int min = arr[0];
        int value = 0;
        for (int i = 1; i &lt; arr.length; i++)
        {
            value = arr[i];
            if (value &lt; min)
            {
                min = value;
            }
        }
        return min;
    }

    public static void main(String[] args)
    {
        int[] arr = {20, -3, 18, 55, 4};
        System.out.println(findMin(arr));
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.24.2.19 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_UNIQUE-ID-001139">
                <div class="ac_question" id="csawesome2_2_UNIQUE-ID-001139_question">
                  <div class="para" id="UNIQUE-ID-001139-1-1">Finish the method <code class="code-inline tex2jax_ignore">getAverage</code> to calculate and return the average of all of the values in the array.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_UNIQUE-ID-001139_editor" data-question_label="" data-codelens="true">public class Test1
{

    public static double getAverage(int[] arr) {}

    public static void main(String[] args)
    {
        int[] arr = {20, 3, 18, 55, 4};
        System.out.println(getAverage(arr));
        ;
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "20.0";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testCodeContains2()
    {
        boolean passed = checkCodeContains("for loop", "for");
        assertTrue(passed);
    }

    @Test
    public void testMethod()
    {
        int[] nums = {10, 20, 30, 40, 50};
        Object[] args = {nums};

        // name of method, arguments are (nums, 30)
        String output = getMethodOutput("getAverage", args);
        String expect = "30.0";

        boolean passed = getResults(expect, output, "getAverage({10, 20, 30, 40, 50})");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.24.2.20 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch7Ex10na">
                <div class="ac_question" id="csawesome2_2_ch7Ex10na_question">
                  <div class="para" id="ch7Ex10na-1-1">Solution to question above.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch7Ex10na_editor" data-question_label="" data-codelens="true">public class Test1
{

    public static double getAverage(int[] arr)
    {
        double total = 0;
        for (int value : arr)
        {
            total = total + value;
        }
        return total / arr.length;
    }

    public static void main(String[] args)
    {
        int[] arr = {20, 3, 18, 55, 4};
        System.out.println(getAverage(arr));
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-8-26</id>
      <title>More Code Practice with Arrays</title>
      <question optional="yes">
        <label>Exercise 4.25.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_sum13_written">
                <div class="ac_question" id="csawesome2_2_sum13_written_question"><div class="para" id="sum13_written-1-1">Create a method <code class="code-inline tex2jax_ignore">sum13(nums)</code> that takes an array of integers, <code class="code-inline tex2jax_ignore">nums</code> and returns the sum of the numbers in the array. However, the number 13 is very unlucky, so do not add it or the number that comes immediately after a 13 to the sum.    Return <code class="code-inline tex2jax_ignore">0</code> if <code class="code-inline tex2jax_ignore">nums</code> is an empty array.</div> <blockquote class="blockquote" id="sum13_written-1-2"><figure class="table table-like" id="sum13_written-1-2-1"><figcaption><span class="type">Table</span><span class="space"> </span><span class="codenumber">4.25.1<span class="period">.</span></span><span class="space"> </span></figcaption><div class="tabular-box natural-width"><table class="tabular"><tr class="header-horizontal"><th scope="col" class="l m b0 r0 l0 t0 lines">Example Input</th><th scope="col" class="l m b0 r0 l0 t0 lines">Expected Output</th></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">sum13({13, 1, 2})</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">2</code></td></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">sum13({1,13})</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">1</code></td></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">sum13({4, 13, 8})</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">4</code></td></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">sum13({13, 1, 13, 3, 2})</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">2</code></td></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">sum13({})</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">0</code></td></tr></table></div></figure></blockquote></div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_sum13_written_editor" data-question_label="" data-codelens="true">public class Sum13
{
   public static int sum13(int[] nums)
   {
       // ADD CODE HERE //
   }

   public static void main(String[] args)
   {
      int[] nums1 = {13, 1, 2};
      System.out.println(sum13(nums1));

      int[] nums2 = {1, 13};
      System.out.println(sum13(nums2));

      int[] nums3 = {4, 13, 8};
      System.out.println(sum13(nums3));

      int[] nums4 = {13, 1, 13, 3, 2};
      System.out.println(sum13(nums4));

      int[] nums5 = {};
      System.out.println(sum13(nums5));
  }
}
====
import static org.junit.Assert.*;
import org.junit.Test;
import java.io.IOException;
import java.util.Arrays;

public class RunestoneTests extends CodeTestHelper {
    public RunestoneTests()
     {
        super();
    }

    @Test
    public void testSum13() throws IOException {
         String output = getMethodOutput("main");
         String expect = "2\n1\n4\n2\n0\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
   }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.25.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_has22_written2">
                <div class="ac_question" id="csawesome2_2_has22_written2_question"><div class="para" id="has22_written2-1-1">Create a method <code class="code-inline tex2jax_ignore">has22(nums)</code> that takes an array of integers, <code class="code-inline tex2jax_ignore">nums</code> and returns <code class="code-inline tex2jax_ignore">true</code> if there are at least two items in the list that are adjacent and both equal to <code class="code-inline tex2jax_ignore">2</code>, otherwise return <code class="code-inline tex2jax_ignore">false</code>.</div> <figure class="table table-like" id="has22_written2-1-2"><figcaption><span class="type">Table</span><span class="space"> </span><span class="codenumber">4.25.2<span class="period">.</span></span><span class="space"> </span></figcaption><div class="tabular-box natural-width"><table class="tabular"><tr class="header-horizontal"><th scope="col" class="l m b0 r0 l0 t0 lines">Example Input</th><th scope="col" class="l m b0 r0 l0 t0 lines">Expected Output</th></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">has22({1, 2, 2})</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">true</code></td></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">has22({2, 1, 2})</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">false</code></td></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">has22({2, 2, 8})</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">true</code></td></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">has22({3, 3, 5})</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">false</code></td></tr></table></div></figure></div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_has22_written2_editor" data-question_label="" data-codelens="true">import java.util.Scanner;
import java.util.Arrays;

public class Has22
{
   public static boolean has22(int[] nums)
   {
       // ADD CODE HERE //

   }


   public static void main(String[] args)
   {

      int[] nums1 = {1, 2, 2};
      System.out.println(has22(nums1));

      int[] nums2 = {2, 1, 2};
      System.out.println(has22(nums2));

      int[] nums3 = {2, 2, 8};
      System.out.println(has22(nums3));

      int[] nums4 = {3, 3, 5};
      System.out.println(has22(nums4));
   }

}
====
import static org.junit.Assert.*;
import org.junit.Test;
import java.io.IOException;
import java.util.Arrays;

public class RunestoneTests extends CodeTestHelper {
   public RunestoneTests()
     {
      super();
   }

   @Test
   public void testHas22() throws IOException {
      String output = getMethodOutput("main");
      String expect = "true\nfalse\ntrue\nfalse\n";
      boolean passed = getResults(expect, output, "Expected output from main");
      assertTrue(passed);
   }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.25.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_total89_written">
                <div class="ac_question" id="csawesome2_2_total89_written_question"><div class="para" id="total89_written-1-1">Create the <code class="code-inline tex2jax_ignore">total89(nums)</code> method below that takes an array of integers, <code class="code-inline tex2jax_ignore">nums</code>, and returns the total of the numbers in <code class="code-inline tex2jax_ignore">nums</code> except for all numbers in the array between an 8 and a 9 (inclusive).</div> <figure class="table table-like" id="total89_written-1-2"><figcaption><span class="type">Table</span><span class="space"> </span><span class="codenumber">4.25.3<span class="period">.</span></span><span class="space"> </span></figcaption><div class="tabular-box natural-width"><table class="tabular"><tr class="header-horizontal"><th scope="col" class="l m b0 r0 l0 t0 lines">Example Input</th><th scope="col" class="l m b0 r0 l0 t0 lines">Expected Output</th></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">total89({1, 2})</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">3</code></td></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">total89({2, 8, 3, 9, 2})</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">4</code></td></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">total89({8, 3, 5, 9, 6})</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">6</code></td></tr></table></div></figure></div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_total89_written_editor" data-question_label="" data-codelens="true">public class Total89
{
   public static int total89(int[] nums)
   {
       // ADD CODE HERE //
   }

   public static void main(String[] args)
   {
      int[] nums1 = {1, 2};
      System.out.println(total89(nums1));

      int[] nums2 = {2, 8, 3, 9, 2};
      System.out.println(total89(nums2));

      int[] nums3 = {8, 3, 5, 9, 6};
      System.out.println(total89(nums3));
  }
}
====
import static org.junit.Assert.*;
import org.junit.Test;
import java.io.IOException;
import java.util.Arrays;

public class RunestoneTests extends CodeTestHelper {
    public RunestoneTests()
     {
        super();
    }

    @Test
    public void testTotal89() throws IOException {
         String output = getMethodOutput("main");
         String expect = "3\n4\n6\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
   }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.25.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_twoSum_written">
                <div class="ac_question" id="csawesome2_2_twoSum_written_question"><div class="para" id="twoSum_written-1-1">Create a method <code class="code-inline tex2jax_ignore">twoSum(nums, target)</code> that takes an array of integers <code class="code-inline tex2jax_ignore">nums</code> and an integer <code class="code-inline tex2jax_ignore">target</code> and returns an array with the indices of two numbers such that they add up to <code class="code-inline tex2jax_ignore">target</code>. If no two numbers add up to <code class="code-inline tex2jax_ignore">target</code>, it returns an empty array. Assume that each input has exactly one solution, and you may not use the same element twice.</div> <figure class="table table-like" id="twoSum_written-1-2"><figcaption><span class="type">Table</span><span class="space"> </span><span class="codenumber">4.25.4<span class="period">.</span></span><span class="space"> </span></figcaption><div class="tabular-box natural-width"><table class="tabular"><tr class="header-horizontal"><th scope="col" class="l m b0 r0 l0 t0 lines">Example Input</th><th scope="col" class="l m b0 r0 l0 t0 lines">Expected Output</th></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">twoSum({2,7,11,15}, 9)</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">{0, 1}</code></td></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">twoSum({2,7,11,15}, 13)</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">{0, 2}</code></td></tr><tr><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">twoSum({2,7,11,15}, 5)</code></td><td class="l m b0 r0 l0 t0 lines"><code class="code-inline tex2jax_ignore">{}</code></td></tr></table></div></figure></div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_twoSum_written_editor" data-question_label="" data-codelens="true">import java.util.Scanner;
import java.util.Arrays;

public class TwoSum
{
   public static int[] twoSum(int[] nums, int target)
   {
       // ADD CODE HERE //
   }

   public static void main(String[] args)
   {
     int[] nums = {2, 7, 11, 15};
     int target = 9;
     System.out.println(Arrays.toString(twoSum(nums, target)));
     target = 13;
     System.out.println(Arrays.toString(twoSum(nums, target)));
     target = 5;
     System.out.println(Arrays.toString(twoSum(nums, target)));
   }
}
====
import static org.junit.Assert.*;
import org.junit.Test;
import java.io.IOException;
import java.util.Arrays;

public class RunestoneTests extends CodeTestHelper {
    public RunestoneTests()
     {
        super();
    }

    @Test
    public void testTwoSum() throws IOException {
         String output = getMethodOutput("main");
         String expect = "{0, 1}, {0, 2}, {}";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);

    }
 }
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>multiple-choice-exercises-2</id>
      <title>Multiple-Choice Exercises</title>
      <question>
        <label>Exercise 4.26.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qaeasy_1" data-multipleanswers="false">
                <div class="para" id="qaeasy_1-1-1">6-9-1: Which index is the last element in an array called <code class="code-inline tex2jax_ignore">nums</code> at?</div>
                <li data-component="answer" id="csawesome2_2_qaeasy_1_opt_a">
                  <div class="para" id="qaeasy_1-2-1-1-1">nums.length</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qaeasy_1_opt_a">
                  <div class="para" id="qaeasy_1-2-1-2-1">Since the first element in an array is at index 0 the last element is the length minus 1.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qaeasy_1_opt_b" data-correct="">
                  <div class="para" id="qaeasy_1-2-2-1-1">nums.length - 1</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qaeasy_1_opt_b">
                  <div class="para" id="qaeasy_1-2-2-2-1">Since the first element in an array is at index 0 the last element is the length minus 1.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.26.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qaeasy_2new" data-multipleanswers="false">
                <div class="para" id="qaeasy_2new-1-1">6-9-2: Which of the following declarations will cause a compile time error?</div>
                <li data-component="answer" id="csawesome2_2_qaeasy_2new_opt_a">
                  <div class="para" id="qaeasy_2new-2-1-1-1">int[] scores = null;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qaeasy_2new_opt_a">
                  <div class="para" id="qaeasy_2new-2-1-2-1">You can initialize an array reference to null to show that it doesn’t refer to any array yet.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qaeasy_2new_opt_b">
                  <div class="para" id="qaeasy_2new-2-2-1-1">int[] scoreArray = {50,90,85};</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qaeasy_2new_opt_b">
                  <div class="para" id="qaeasy_2new-2-2-2-1">You can provide the values for an array when you declare it.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qaeasy_2new_opt_c">
                  <div class="para" id="qaeasy_2new-2-3-1-1">String[] nameArray = new String[10];</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qaeasy_2new_opt_c">
                  <div class="para" id="qaeasy_2new-2-3-2-1">You can declare and array and create the array using the new operator in the same statement.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qaeasy_2new_opt_d" data-correct="">
                  <div class="para" id="qaeasy_2new-2-4-1-1">String[] nameArray = {5, 3, 2};</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qaeasy_2new_opt_d">
                  <div class="para" id="qaeasy_2new-2-4-2-1">You can not put integers into an array of String objects.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qaeasy_2new_opt_e">
                  <div class="para" id="qaeasy_2new-2-5-1-1">int[] scores = new int[5];</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qaeasy_2new_opt_e">
                  <div class="para" id="qaeasy_2new-2-5-2-1">You can declare and array and create it in the same statement.  Use the new operator to create the array and specify the size in square brackets.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.26.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qaeasy_3" data-multipleanswers="false">
                <div class="para" id="qaeasy_3-1-1">6-9-3: What is returned from <code class="code-inline tex2jax_ignore">arr[3]</code> if <code class="code-inline tex2jax_ignore">arr={6, 3, 1, 2}</code>?</div>
                <li data-component="answer" id="csawesome2_2_qaeasy_3_opt_a">
                  <div class="para" id="qaeasy_3-2-1-1-1">1</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qaeasy_3_opt_a">
                  <div class="para" id="qaeasy_3-2-1-2-1">This would be returned from arr[2].</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qaeasy_3_opt_b" data-correct="">
                  <div class="para" id="qaeasy_3-2-2-1-1">2</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qaeasy_3_opt_b">
                  <div class="para" id="qaeasy_3-2-2-2-1">This returns the value in arr at index 3.  Remember that the first item in an array is at index 0.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qaeasy_3_opt_c">
                  <div class="para" id="qaeasy_3-2-3-1-1">3</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qaeasy_3_opt_c">
                  <div class="para" id="qaeasy_3-2-3-2-1">This would be returned from arr[1].</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qaeasy_3_opt_d">
                  <div class="para" id="qaeasy_3-2-4-1-1">6</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qaeasy_3_opt_d">
                  <div class="para" id="qaeasy_3-2-4-2-1">This would be returned from arr[0].</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qaeasy_3_opt_e">
                  <div class="para" id="qaeasy_3-2-5-1-1">4</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qaeasy_3_opt_e">
                  <div class="para" id="qaeasy_3-2-5-2-1">This would be returned from arr.length</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.26.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qaeasy_4" data-multipleanswers="false"><div class="para" id="qaeasy_4-1-1">6-9-4: What is returned from <code class="code-inline tex2jax_ignore">mystery</code> when it is passed <code class="code-inline tex2jax_ignore">{10, 30, 30, 60}</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static double mystery(int[] arr)
{
   double output = 0;
   for (int i = 0; i &lt; arr.length; i++)
   {
      output = output + arr[i];
   }
   return output / arr.length;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qaeasy_4_opt_a"><div class="para" id="qaeasy_4-2-1-1-1">17.5</div></li><li data-component="feedback" id="csawesome2_2_qaeasy_4_opt_a"><div class="para" id="qaeasy_4-2-1-2-1">This would be true if the loop stopped at arr.length - 1.</div></li><li data-component="answer" id="csawesome2_2_qaeasy_4_opt_b"><div class="para" id="qaeasy_4-2-2-1-1">30.0</div></li><li data-component="feedback" id="csawesome2_2_qaeasy_4_opt_b"><div class="para" id="qaeasy_4-2-2-2-1">This would be true if the loop started at 1 instead of 0.</div></li><li data-component="answer" id="csawesome2_2_qaeasy_4_opt_c"><div class="para" id="qaeasy_4-2-3-1-1">130</div></li><li data-component="feedback" id="csawesome2_2_qaeasy_4_opt_c"><div class="para" id="qaeasy_4-2-3-2-1">This would be true if it returned output rather than output / arr.length</div></li><li data-component="answer" id="csawesome2_2_qaeasy_4_opt_d"><div class="para" id="qaeasy_4-2-4-1-1">32</div></li><li data-component="feedback" id="csawesome2_2_qaeasy_4_opt_d"><div class="para" id="qaeasy_4-2-4-2-1">This would be true if output was declared to be an int rather than a double.</div></li><li data-component="answer" id="csawesome2_2_qaeasy_4_opt_e" data-correct=""><div class="para" id="qaeasy_4-2-5-1-1">32.5</div></li><li data-component="feedback" id="csawesome2_2_qaeasy_4_opt_e"><div class="para" id="qaeasy_4-2-5-2-1">This sums all the values in the array and then returns the sum divided by the number of items in the array.  This is the average.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.26.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qaeasy_5old3" data-multipleanswers="false"><div class="para" id="qaeasy_5old3-1-1">6-9-5: Given the following values of <code class="code-inline tex2jax_ignore">a</code> and the method <code class="code-inline tex2jax_ignore">doubleLast</code> what will the values of <code class="code-inline tex2jax_ignore">a</code> be after you execute: <code class="code-inline tex2jax_ignore">doubleLast()</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private int[ ] a = {-10, -5, 1, 4, 8, 30};

public void doubleLast()
{

   for (int i = a.length / 2; i &lt; a.length; i++)
   {
      a[i] = a[i] * 2;
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qaeasy_5old3_opt_a"><div class="para" id="qaeasy_5old3-2-1-1-1">{-20, -10, 2, 8, 16, 60}</div></li><li data-component="feedback" id="csawesome2_2_qaeasy_5old3_opt_a"><div class="para" id="qaeasy_5old3-2-1-2-1">This would true if it looped through the whole array.  Does it?</div></li><li data-component="answer" id="csawesome2_2_qaeasy_5old3_opt_b"><div class="para" id="qaeasy_5old3-2-2-1-1">{-20, -10, 2, 4, 8, 30}</div></li><li data-component="feedback" id="csawesome2_2_qaeasy_5old3_opt_b"><div class="para" id="qaeasy_5old3-2-2-2-1">This would be true if it looped from the beginning to the middle.  Does it?</div></li><li data-component="answer" id="csawesome2_2_qaeasy_5old3_opt_c" data-correct=""><div class="para" id="qaeasy_5old3-2-3-1-1">{-10, -5, 1, 8, 16, 60}</div></li><li data-component="feedback" id="csawesome2_2_qaeasy_5old3_opt_c"><div class="para" id="qaeasy_5old3-2-3-2-1">It loops from the middle to the end doubling each value. Since there are 6 elements it will start at index 3.</div></li><li data-component="answer" id="csawesome2_2_qaeasy_5old3_opt_d"><div class="para" id="qaeasy_5old3-2-4-1-1">{-10, -5, 1, 4, 8, 30}</div></li><li data-component="feedback" id="csawesome2_2_qaeasy_5old3_opt_d"><div class="para" id="qaeasy_5old3-2-4-2-1">This would be true if array elements didn’t change, but they do.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.26.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qaeasy_6" data-multipleanswers="false"><div class="para" id="qaeasy_6-1-1">6-9-6: What are the values in a after multAll(3) executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private int[ ] a = {1, 3, -5, -2};

public void multAll(int amt)
{
   int i = 0;
   while (i &lt; a.length)
   {
      a[i] = a[i] * amt;
      i++;
   } // end while
} // end method
</code></pre></div><li data-component="answer" id="csawesome2_2_qaeasy_6_opt_a"><div class="para" id="qaeasy_6-2-1-1-1">{1, 3, -5, -2}</div></li><li data-component="feedback" id="csawesome2_2_qaeasy_6_opt_a"><div class="para" id="qaeasy_6-2-1-2-1">This would be true if the contents of arrays could not be changed but they can.</div></li><li data-component="answer" id="csawesome2_2_qaeasy_6_opt_b" data-correct=""><div class="para" id="qaeasy_6-2-2-1-1">{3, 9, -15, -6}</div></li><li data-component="feedback" id="csawesome2_2_qaeasy_6_opt_b"><div class="para" id="qaeasy_6-2-2-2-1">This code multiplies each value in a by the passed amt which is 3 in this case.</div></li><li data-component="answer" id="csawesome2_2_qaeasy_6_opt_c"><div class="para" id="qaeasy_6-2-3-1-1">{2, 6, -10, -4}</div></li><li data-component="feedback" id="csawesome2_2_qaeasy_6_opt_c"><div class="para" id="qaeasy_6-2-3-2-1">This would be correct if we called multAll(2) instead of multAll(3).</div></li><li data-component="answer" id="csawesome2_2_qaeasy_6_opt_d"><div class="para" id="qaeasy_6-2-4-1-1">The code will never stop executing due to an infinite loop</div></li><li data-component="feedback" id="csawesome2_2_qaeasy_6_opt_d"><div class="para" id="qaeasy_6-2-4-2-1">The variable i starts at 0 and increments each time through the loop and stops when it equals the number of items in a.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.26.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qaeasy" data-multipleanswers="false"><div class="para" id="qaeasy-1-1">6-9-7: What are the values in a after mult(2) executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private int[ ] a = {1, 3, -5, -2};

public void mult(int amt)
{
   int i = 0;
   while (i &lt; a.length)
   {
      a[i] = a[i] * amt;
   } // end while
} // end method
</code></pre></div><li data-component="answer" id="csawesome2_2_qaeasy_opt_a"><div class="para" id="qaeasy-2-1-1-1">{1, 3, -5, -2}</div></li><li data-component="feedback" id="csawesome2_2_qaeasy_opt_a"><div class="para" id="qaeasy-2-1-2-1">Does the value of i ever change inside the loop?</div></li><li data-component="answer" id="csawesome2_2_qaeasy_opt_b"><div class="para" id="qaeasy-2-2-1-1">{3, 9, -15, -6}</div></li><li data-component="feedback" id="csawesome2_2_qaeasy_opt_b"><div class="para" id="qaeasy-2-2-2-1">Does the value of i ever change inside the loop?</div></li><li data-component="answer" id="csawesome2_2_qaeasy_opt_c"><div class="para" id="qaeasy-2-3-1-1">{2, 6, -10, -4}</div></li><li data-component="feedback" id="csawesome2_2_qaeasy_opt_c"><div class="para" id="qaeasy-2-3-2-1">Does the value of i ever change inside the loop?</div></li><li data-component="answer" id="csawesome2_2_qaeasy_opt_d" data-correct=""><div class="para" id="qaeasy-2-4-1-1">The code will never stop executing due to an infinite loop</div></li><li data-component="feedback" id="csawesome2_2_qaeasy_opt_d"><div class="para" id="qaeasy-2-4-2-1">The value of i is initialized to 0 and then never changes inside the body of the loop, so this loop will never stop.  It is an infinite loop.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.26.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qamed_1" data-multipleanswers="false"><div class="para" id="qamed_1-1-1">6-9-8: Which of the following statements is a valid conclusion. Assume that variable <code class="code-inline tex2jax_ignore">b</code> is an array of <code class="code-inline tex2jax_ignore">k</code> integers and that the following is true:</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">b[0] != b[i] for all i from 1 to k-1
</code></pre></div><li data-component="answer" id="csawesome2_2_qamed_1_opt_a" data-correct=""><div class="para" id="qamed_1-2-1-1-1">The value in b[0] does not occur anywhere else in the array</div></li><li data-component="feedback" id="csawesome2_2_qamed_1_opt_a"><div class="para" id="qamed_1-2-1-2-1">The assertion denotes that b[0] occurs only once, regardless of the order or value of the other array values.</div></li><li data-component="answer" id="csawesome2_2_qamed_1_opt_b"><div class="para" id="qamed_1-2-2-1-1">Array b is sorted</div></li><li data-component="feedback" id="csawesome2_2_qamed_1_opt_b"><div class="para" id="qamed_1-2-2-2-1">The array does not necessarily need to be in order for the assertion to be true.</div></li><li data-component="answer" id="csawesome2_2_qamed_1_opt_c"><div class="para" id="qamed_1-2-3-1-1">Array b is not sorted</div></li><li data-component="feedback" id="csawesome2_2_qamed_1_opt_c"><div class="para" id="qamed_1-2-3-2-1">We can’t tell if it is sorted or not from this assertion.</div></li><li data-component="answer" id="csawesome2_2_qamed_1_opt_d"><div class="para" id="qamed_1-2-4-1-1">Array b contains no duplicates</div></li><li data-component="feedback" id="csawesome2_2_qamed_1_opt_d"><div class="para" id="qamed_1-2-4-2-1">The only value that must not have a duplicate is b[0]</div></li><li data-component="answer" id="csawesome2_2_qamed_1_opt_e"><div class="para" id="qamed_1-2-5-1-1">The value in b[0] is the smallest value in the array</div></li><li data-component="feedback" id="csawesome2_2_qamed_1_opt_e"><div class="para" id="qamed_1-2-5-2-1">b[0] can be any value, so long as no other array element is equal to it.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.26.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qamed_2" data-multipleanswers="false"><div class="para" id="qamed_2-1-1">6-9-9: Consider the following code segment. Which of the following statements best describes the condition when it returns true?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">boolean temp = false;
for (int i = 0; i &lt; a.length; i++)
{
   temp = (a[i] == val);
}
return temp;
</code></pre></div><li data-component="answer" id="csawesome2_2_qamed_2_opt_a"><div class="para" id="qamed_2-2-1-1-1">whenever the first element in a is equal to val</div></li><li data-component="feedback" id="csawesome2_2_qamed_2_opt_a"><div class="para" id="qamed_2-2-1-2-1">It is the last value in a that controls the final state of temp, as the loop is progressing through the array from 0 to the end.</div></li><li data-component="answer" id="csawesome2_2_qamed_2_opt_b"><div class="para" id="qamed_2-2-2-1-1">Whenever a contains any element which equals val</div></li><li data-component="feedback" id="csawesome2_2_qamed_2_opt_b"><div class="para" id="qamed_2-2-2-2-1">Because temp is reset every time through the loop, only the last element controls whether the final value is true or false.</div></li><li data-component="answer" id="csawesome2_2_qamed_2_opt_c" data-correct=""><div class="para" id="qamed_2-2-3-1-1">Whenever the last element in a is equal to val</div></li><li data-component="feedback" id="csawesome2_2_qamed_2_opt_c"><div class="para" id="qamed_2-2-3-2-1">Because each time through the loop temp is reset, it will only be returned as true if the last value in a is equal to val.</div></li><li data-component="answer" id="csawesome2_2_qamed_2_opt_d"><div class="para" id="qamed_2-2-4-1-1">Whenever more than 1 element in a is equal to val</div></li><li data-component="feedback" id="csawesome2_2_qamed_2_opt_d"><div class="para" id="qamed_2-2-4-2-1">Because temp is reset every time through the loop, only the last element controls whether the final value is true or false, so it is possible for just the last value to be equal to val.</div></li><li data-component="answer" id="csawesome2_2_qamed_2_opt_e"><div class="para" id="qamed_2-2-5-1-1">Whenever exactly 1 element in a is equal to val</div></li><li data-component="feedback" id="csawesome2_2_qamed_2_opt_e"><div class="para" id="qamed_2-2-5-2-1">Because temp is reset every time through the loop, only the last element controls whether the final value is true or false, so it is possible for several elements to be equal to val.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.26.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qamed_3" data-multipleanswers="false"><div class="para" id="qamed_3-1-1">6-9-10: Consider the following data field and method <code class="code-inline tex2jax_ignore">findLongest</code>. Method <code class="code-inline tex2jax_ignore">findLongest</code> is intended to find the longest consecutive block of the value <code class="code-inline tex2jax_ignore">target</code> occurring in the array <code class="code-inline tex2jax_ignore">nums</code>; however, <code class="code-inline tex2jax_ignore">findLongest</code> does not work as intended. For example given the code below the call <code class="code-inline tex2jax_ignore">findLongest(10)</code> should return 3, the length of the longest consecutive block of 10s. Which of the following best describes the value actually returned by a call to <code class="code-inline tex2jax_ignore">findLongest</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private int[] nums = {7, 10, 10, 15, 15, 15, 15, 10, 10, 10, 15, 10, 10};

public int findLongest(int target)
{
   int lenCount = 0; // length of current consecutive numbers
   int maxLen = 0;   // max length of consecutive numbers
   for (int k = 0; k &lt; nums.length; k++)
   {
      if (nums[k] == target)
      {
         lenCount++;
      } else if (lenCount &gt; maxLen)
      {
         maxLen = lenCount;
      }
   }
   if (lenCount &gt; maxLen)
   {
      maxLen = lenCount;
   }
   return maxLen;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qamed_3_opt_a"><div class="para" id="qamed_3-2-1-1-1">It is the length of the shortest consecutive block of the value target  in nums</div></li><li data-component="feedback" id="csawesome2_2_qamed_3_opt_a"><div class="para" id="qamed_3-2-1-2-1">It doesn’t reset lenCount ever, so it just counts all the times the target value appears in the array.</div></li><li data-component="answer" id="csawesome2_2_qamed_3_opt_b"><div class="para" id="qamed_3-2-2-1-1">It is the length of the array nums</div></li><li data-component="feedback" id="csawesome2_2_qamed_3_opt_b"><div class="para" id="qamed_3-2-2-2-1">The only count happens when lenCount is incremented when nums[k] == target. nums.length is only used to stop the loop.</div></li><li data-component="answer" id="csawesome2_2_qamed_3_opt_c"><div class="para" id="qamed_3-2-3-1-1">It is the length of the first consecutive block of the value target  in nums</div></li><li data-component="feedback" id="csawesome2_2_qamed_3_opt_c"><div class="para" id="qamed_3-2-3-2-1">It doesn’t reset lenCount ever, so it just counts all the times the target value appears in the array.</div></li><li data-component="answer" id="csawesome2_2_qamed_3_opt_d" data-correct=""><div class="para" id="qamed_3-2-4-1-1">It is the number of occurrences of the value target  in nums</div></li><li data-component="feedback" id="csawesome2_2_qamed_3_opt_d"><div class="para" id="qamed_3-2-4-2-1">The variable lenCount is incremented each time the current array element is the same value as the target. It is never reset so it counts the number of occurrences of the value target in nums. The method returns maxLen which is set to lenCount after the loop finishes if lenCount is greater than maxLen.</div></li><li data-component="answer" id="csawesome2_2_qamed_3_opt_e"><div class="para" id="qamed_3-2-5-1-1">It is the length of the last consecutive block of the value target  in nums</div></li><li data-component="feedback" id="csawesome2_2_qamed_3_opt_e"><div class="para" id="qamed_3-2-5-2-1">It doesn’t reset lenCount ever, so it just counts all the times the target value appears in the array.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.26.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qamed_4" data-multipleanswers="false"><div class="para" id="qamed_4-1-1">6-9-11: Consider the following data field and method. Which of the following best describes the contents of <code class="code-inline tex2jax_ignore">myStuff</code> in terms of <code class="code-inline tex2jax_ignore">m</code> and <code class="code-inline tex2jax_ignore">n</code> after the following statement has been executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private int[] myStuff;

//precondition: myStuff contains
//   integers in no particular order
public int mystery(int num)
{
   for (int k = myStuff.length - 1; k &gt;= 0; k--)
   {
      if (myStuff[k] &lt; num)
      {
          return k;
      }
   }
   return -1;
}

int m = mystery(n)
</code></pre></div><li data-component="answer" id="csawesome2_2_qamed_4_opt_a" data-correct=""><div class="para" id="qamed_4-2-1-1-1">All values in positions m+1 through myStuff.length-1 are greater than or equal to n.</div></li><li data-component="feedback" id="csawesome2_2_qamed_4_opt_a"><div class="para" id="qamed_4-2-1-2-1">Mystery steps backwards through the array until the first value less than the passed num (n) is found and then it returns the index where this value is found. Nothing is known about the elements of the array prior to the index at which the condition is met.</div></li><li data-component="answer" id="csawesome2_2_qamed_4_opt_b"><div class="para" id="qamed_4-2-2-1-1">All values in position 0 through m are less than n.</div></li><li data-component="feedback" id="csawesome2_2_qamed_4_opt_b"><div class="para" id="qamed_4-2-2-2-1">Mystery steps backwards through the array and quits the first time the value at the current index is less than the passed num (n). This would be true if we went forward through the array and returned when it found a value greater than the passed num (n).</div></li><li data-component="answer" id="csawesome2_2_qamed_4_opt_c"><div class="para" id="qamed_4-2-3-1-1">All values in position m+1 through myStuff.length-1 are less than n.</div></li><li data-component="feedback" id="csawesome2_2_qamed_4_opt_c"><div class="para" id="qamed_4-2-3-2-1">This would be true if it returned when it found a value at the current index that was greater than num (n).</div></li><li data-component="answer" id="csawesome2_2_qamed_4_opt_d"><div class="para" id="qamed_4-2-4-1-1">The smallest value is at position m.</div></li><li data-component="feedback" id="csawesome2_2_qamed_4_opt_d"><div class="para" id="qamed_4-2-4-2-1">The condition compares the value at the current index of the array to the passed num. It returns the first time the condition is met so nothing is known about the values which are unchecked. One of the unchecked values could be smaller.</div></li><li data-component="answer" id="csawesome2_2_qamed_4_opt_e"><div class="para" id="qamed_4-2-5-1-1">The largest value that is smaller than n is at position m.</div></li><li data-component="feedback" id="csawesome2_2_qamed_4_opt_e"><div class="para" id="qamed_4-2-5-2-1">The condition checks for any value that is smaller than the passed num and returns from mystery the first time that the condition is encountered. The values are not ordered so we don’t know if this is the largest value smaller than n.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.26.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qamed_5" data-multipleanswers="false"><div class="para" id="qamed_5-1-1">6-9-12: Consider the following field <code class="code-inline tex2jax_ignore">arr</code> and method <code class="code-inline tex2jax_ignore">checkArray</code>.  Which of the following best describes what <code class="code-inline tex2jax_ignore">checkArray</code> returns?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private int[] arr;

// precondition: arr.length != 0
public int checkArray()
{
    int loc = arr.length / 2;
    for (int k = 0; k &lt; arr.length; k++)
    {
        if (arr[k] &gt; arr[loc])
        {
            loc = k;
        }
    }
    return loc;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qamed_5_opt_a" data-correct=""><div class="para" id="qamed_5-2-1-1-1">Returns the index of the largest value in array arr.</div></li><li data-component="feedback" id="csawesome2_2_qamed_5_opt_a"><div class="para" id="qamed_5-2-1-2-1">This code sets loc to the middle of the array and then loops through all the array elements.  If the value at the current index is greater than the value at loc then it changes loc to the current index.  It returns loc, which is the index of the largest value in the array.</div></li><li data-component="answer" id="csawesome2_2_qamed_5_opt_b"><div class="para" id="qamed_5-2-2-1-1">Returns the index of the first element in array arr whose value is greater than arr[loc].</div></li><li data-component="feedback" id="csawesome2_2_qamed_5_opt_b"><div class="para" id="qamed_5-2-2-2-1">This would be true if there was a return loc after loc = k in the if block.</div></li><li data-component="answer" id="csawesome2_2_qamed_5_opt_c"><div class="para" id="qamed_5-2-3-1-1">Returns the index of the last element in array arr whose value is greater than arr[loc].</div></li><li data-component="feedback" id="csawesome2_2_qamed_5_opt_c"><div class="para" id="qamed_5-2-3-2-1">This would be true if it returned loc after setting loc = k and if it started at the end of the array and looped toward the beginning of the array.</div></li><li data-component="answer" id="csawesome2_2_qamed_5_opt_d"><div class="para" id="qamed_5-2-4-1-1">Returns the largest value in array arr.</div></li><li data-component="feedback" id="csawesome2_2_qamed_5_opt_d"><div class="para" id="qamed_5-2-4-2-1">It returns the index to the largest value in array arr, not the largest value.</div></li><li data-component="answer" id="csawesome2_2_qamed_5_opt_e"><div class="para" id="qamed_5-2-5-1-1">Returns the index of the largest value in the second half of array arr.</div></li><li data-component="feedback" id="csawesome2_2_qamed_5_opt_e"><div class="para" id="qamed_5-2-5-2-1">k loops from 0 to arr.length - 1.  So it checks all of the elements in the array.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.26.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qamed_6" data-multipleanswers="false"><div class="para" id="qamed_6-1-1">6-9-13: Given the following field and method declaration, what is the value in <code class="code-inline tex2jax_ignore">a[1]</code> when <code class="code-inline tex2jax_ignore">m1(a)</code> is run?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int[] a = {7, 3, -1};

public static int m1(int[] a)
{
   a[1]--;
   return (a[1] * 2);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qamed_6_opt_a"><div class="para" id="qamed_6-2-1-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_qamed_6_opt_a"><div class="para" id="qamed_6-2-1-2-1">This would be true if it was return (a[1] *= 2);, which would change the value at a[1].</div></li><li data-component="answer" id="csawesome2_2_qamed_6_opt_b" data-correct=""><div class="para" id="qamed_6-2-2-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_qamed_6_opt_b"><div class="para" id="qamed_6-2-2-2-1">The statement a[1]--; is the same as a[1] = a[1] - 1; so this will change the 3 to 2.  The return (a[1] * 2) does not change the value at a[1].</div></li><li data-component="answer" id="csawesome2_2_qamed_6_opt_c"><div class="para" id="qamed_6-2-3-1-1">12</div></li><li data-component="feedback" id="csawesome2_2_qamed_6_opt_c"><div class="para" id="qamed_6-2-3-2-1">This would be true if array indices started at 1 instead of 0 and if the code changed the value at index 1 to the current value times two.</div></li><li data-component="answer" id="csawesome2_2_qamed_6_opt_d"><div class="para" id="qamed_6-2-4-1-1">6</div></li><li data-component="feedback" id="csawesome2_2_qamed_6_opt_d"><div class="para" id="qamed_6-2-4-2-1">This would be true if array indices started at 1 rather than 0.</div></li><li data-component="answer" id="csawesome2_2_qamed_6_opt_e"><div class="para" id="qamed_6-2-5-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_qamed_6_opt_e"><div class="para" id="qamed_6-2-5-2-1">This can’t be true because a[1]--;  means the same as a[1] = a[1] - 1;  so the 3 changes to 2.  Parameters are all pass by value in Java which means that a copy of the value is passed to a method. But, since an array is an object a copy of the value is a copy of the reference to the object. So changes to objects in methods are permanent.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.26.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qamed_7" data-multipleanswers="false"><div class="para" id="qamed_7-1-1">6-9-14: Consider the following code. What is the <em class="emphasis">maximum</em> amount of times that <code class="code-inline tex2jax_ignore">HELLO</code> could possibly be printed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int i = 1; i &lt; k; i++)
{
   if (arr[i] &lt; someValue)
   {
     System.out.print("HELLO")
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qamed_7_opt_a" data-correct=""><div class="para" id="qamed_7-2-1-1-1">k - 1</div></li><li data-component="feedback" id="csawesome2_2_qamed_7_opt_a"><div class="para" id="qamed_7-2-1-2-1">This loop will start at 1 and continue until k is reached as long as arr[i] &lt; someValue is true.  The last time the loop executes, i will equal k-1, if the condition is always true.  The number of times a loop executes is equal to the largest value when the loop executes minus the smallest value plus one.  In this case that is (k - 1) - 1 + 1 which equals k - 1.</div></li><li data-component="answer" id="csawesome2_2_qamed_7_opt_b"><div class="para" id="qamed_7-2-2-1-1">k + 1</div></li><li data-component="feedback" id="csawesome2_2_qamed_7_opt_b"><div class="para" id="qamed_7-2-2-2-1">This would be true if arr[i] &lt; someValue was always true and the loop started at 0 instead of 1 and continued while it was less than or equal to k.</div></li><li data-component="answer" id="csawesome2_2_qamed_7_opt_c"><div class="para" id="qamed_7-2-3-1-1">k</div></li><li data-component="feedback" id="csawesome2_2_qamed_7_opt_c"><div class="para" id="qamed_7-2-3-2-1">This would be true if arr[i] &lt; someValue was always true and the loop started at 0 instead of 1.</div></li><li data-component="answer" id="csawesome2_2_qamed_7_opt_d"><div class="para" id="qamed_7-2-4-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qamed_7_opt_d"><div class="para" id="qamed_7-2-4-2-1">This would be the case if only one element in the array would fulfill the condition that arr[i] &lt; someValue.</div></li><li data-component="answer" id="csawesome2_2_qamed_7_opt_e"><div class="para" id="qamed_7-2-5-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_qamed_7_opt_e"><div class="para" id="qamed_7-2-5-2-1">This is the minimum number of times that HELLO could be executed.  This would be true if k was less than i initially.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.26.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qamed_8" data-multipleanswers="false"><div class="para" id="qamed_8-1-1">6-9-15: Consider the following method <code class="code-inline tex2jax_ignore">changeArray</code>. An array is created that contains <code class="code-inline tex2jax_ignore">{2, 8, 10, 9, 6}</code> and is passed to <code class="code-inline tex2jax_ignore">changeArray</code>. What are the contents of the array after the <code class="code-inline tex2jax_ignore">changeArray</code> method executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static void changeArray(int[] data)
{
   for (int k = data.length - 1; k &gt; 0; k--)
      data[k - 1] = data[k] + data[k - 1];
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qamed_8_opt_a"><div class="para" id="qamed_8-2-1-1-1">{2, 6, 2, -1, -3}</div></li><li data-component="feedback" id="csawesome2_2_qamed_8_opt_a"><div class="para" id="qamed_8-2-1-2-1">This would be correct if data[k] was modified in the for-loop. In this for-loop, data[k - 1] is the element that changes.</div></li><li data-component="answer" id="csawesome2_2_qamed_8_opt_b"><div class="para" id="qamed_8-2-2-1-1">{-23, -21, -13, -3, 6}</div></li><li data-component="feedback" id="csawesome2_2_qamed_8_opt_b"><div class="para" id="qamed_8-2-2-2-1">This would be correct if data[k - 1] was subtracted from data[k]. Notice that for every instance of the for-loop, data[k] and data[k - 1] are added together and data[k - 1] is set to that value.</div></li><li data-component="answer" id="csawesome2_2_qamed_8_opt_c"><div class="para" id="qamed_8-2-3-1-1">{10, 18, 19, 15, 6}</div></li><li data-component="feedback" id="csawesome2_2_qamed_8_opt_c"><div class="para" id="qamed_8-2-3-2-1">This would be correct if the for-loop began at 1 and continued to data.length - 1. Notice the for-loop indexing.</div></li><li data-component="answer" id="csawesome2_2_qamed_8_opt_d"><div class="para" id="qamed_8-2-4-1-1">This method results in an IndexOutOfBounds exception.</div></li><li data-component="feedback" id="csawesome2_2_qamed_8_opt_d"><div class="para" id="qamed_8-2-4-2-1">The indexing of this method is correct. The for-loop begins at the last valid index and ends when k is equal to 0, and the method does not access any values other than the ones specified.</div></li><li data-component="answer" id="csawesome2_2_qamed_8_opt_e" data-correct=""><div class="para" id="qamed_8-2-5-1-1">{35, 33, 25, 15, 6}</div></li><li data-component="feedback" id="csawesome2_2_qamed_8_opt_e"><div class="para" id="qamed_8-2-5-2-1">This method starts at the last valid index of the array and adds the value of the previous element to the element at index k - 1.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.26.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qamed_9" data-multipleanswers="false"><div class="para" id="qamed_9-1-1">6-9-16: Assume that <code class="code-inline tex2jax_ignore">arr1={1, 5, 3, -8, 6}</code> and <code class="code-inline tex2jax_ignore">arr2={-2, -1, -5, 3, -4}</code> what will the contents of <code class="code-inline tex2jax_ignore">arr1</code> be after <code class="code-inline tex2jax_ignore">copyArray</code> finishes executing?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static void copyArray(int[] arr1, int[] arr2)
{
   for (int i = arr1.length / 2; i &lt; arr1.length; i++)
   {
      arr1[i] = arr2[i];
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qamed_9_opt_a"><div class="para" id="qamed_9-2-1-1-1">[-2, -1, -5, 3, -4]</div></li><li data-component="feedback" id="csawesome2_2_qamed_9_opt_a"><div class="para" id="qamed_9-2-1-2-1">This would be true if i started at 0 instead of arr1.length / 2.</div></li><li data-component="answer" id="csawesome2_2_qamed_9_opt_b"><div class="para" id="qamed_9-2-2-1-1">[-2, -1, 3, -8, 6]</div></li><li data-component="feedback" id="csawesome2_2_qamed_9_opt_b"><div class="para" id="qamed_9-2-2-2-1">This would be true if i started at 0 and ended when it reached arr1.length / 2.</div></li><li data-component="answer" id="csawesome2_2_qamed_9_opt_c" data-correct=""><div class="para" id="qamed_9-2-3-1-1">[1, 5, -5, 3, -4]</div></li><li data-component="feedback" id="csawesome2_2_qamed_9_opt_c"><div class="para" id="qamed_9-2-3-2-1">This loop starts at arr2.length / 2 which is 2 and loops to the end of the array copying from arr2 to arr1.</div></li><li data-component="answer" id="csawesome2_2_qamed_9_opt_d"><div class="para" id="qamed_9-2-4-1-1">[1, 5, 3, -8, 6]</div></li><li data-component="feedback" id="csawesome2_2_qamed_9_opt_d"><div class="para" id="qamed_9-2-4-2-1">This would be correct if this loop didn’t change arr1, but it does.</div></li><li data-component="answer" id="csawesome2_2_qamed_9_opt_e"><div class="para" id="qamed_9-2-5-1-1">[1, 5, -2, -5, 2]</div></li><li data-component="feedback" id="csawesome2_2_qamed_9_opt_e"><div class="para" id="qamed_9-2-5-2-1">This would be correct if it set arr1[i] equal to arr[i] + arr[2] instead.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.26.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qamed_10" data-multipleanswers="false"><div class="para" id="qamed_10-1-1">6-9-17: Given the following code segment, which of the following will cause an infinite loop?  Assume that <code class="code-inline tex2jax_ignore">temp</code> is an <code class="code-inline tex2jax_ignore">int</code> variable initialized to be greater than zero and that <code class="code-inline tex2jax_ignore">a</code> is an array of ints.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for ( int k = 0; k &lt; a.length; k++ )
{
   while ( a[ k ] &lt; temp )
   {
      a[ k ] *= 2;
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qamed_10_opt_a"><div class="para" id="qamed_10-2-1-1-1">The values don’t matter this will always cause an infinite loop.</div></li><li data-component="feedback" id="csawesome2_2_qamed_10_opt_a"><div class="para" id="qamed_10-2-1-2-1">An infinite loop will not always occur in this code segment.</div></li><li data-component="answer" id="csawesome2_2_qamed_10_opt_b" data-correct=""><div class="para" id="qamed_10-2-2-1-1">Whenever a includes a value that is less than or equal to zero.</div></li><li data-component="feedback" id="csawesome2_2_qamed_10_opt_b"><div class="para" id="qamed_10-2-2-2-1">When a contains a value that is less than or equal to zero then multiplying that value by 2 will never make the result larger than temp (which was set to some value &gt; 0), so an infinite loop will occur.</div></li><li data-component="answer" id="csawesome2_2_qamed_10_opt_c"><div class="para" id="qamed_10-2-3-1-1">Whenever a has values larger then temp.</div></li><li data-component="feedback" id="csawesome2_2_qamed_10_opt_c"><div class="para" id="qamed_10-2-3-2-1">Values larger then temp will not cause an infinite loop.</div></li><li data-component="answer" id="csawesome2_2_qamed_10_opt_d"><div class="para" id="qamed_10-2-4-1-1">When all values in a are larger than temp.</div></li><li data-component="feedback" id="csawesome2_2_qamed_10_opt_d"><div class="para" id="qamed_10-2-4-2-1">Values larger then temp will not cause an infinite loop.</div></li><li data-component="answer" id="csawesome2_2_qamed_10_opt_e"><div class="para" id="qamed_10-2-5-1-1">Whenever a includes a value equal to temp.</div></li><li data-component="feedback" id="csawesome2_2_qamed_10_opt_e"><div class="para" id="qamed_10-2-5-2-1">Values equal to temp will not cause the infinite loop.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.26.18 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qab_4" data-multipleanswers="false"><div class="para" id="qab_4-1-1">6-9-18: Given the following array instance variable and method, which of the following best describes the contents of <code class="code-inline tex2jax_ignore">myStuff</code> after (<code class="code-inline tex2jax_ignore">int m = mystery(n);</code>) has been executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">// private field in the class
private int[ ] myStuff;

//precondition: myStuff contains
//  integers in no particular order
public int mystery(int num)
{
   for (int k = myStuff.length - 1; k &gt;= 0; k--)
   {
       if (myStuff[k] &lt; num)
       {
          return k;
       }
   }
   return -1;
 }
</code></pre></div><li data-component="answer" id="csawesome2_2_qab_4_opt_a" data-correct=""><div class="para" id="qab_4-2-1-1-1">All values in positions m+1 through myStuff.length-1 are greater than or equal to n.</div></li><li data-component="feedback" id="csawesome2_2_qab_4_opt_a"><div class="para" id="qab_4-2-1-2-1">Mystery steps backwards through the array until the first value less than the passed num (n) is found and then it returns the index where this value is found.</div></li><li data-component="answer" id="csawesome2_2_qab_4_opt_b"><div class="para" id="qab_4-2-2-1-1">All values in position 0 through m are less than n.</div></li><li data-component="feedback" id="csawesome2_2_qab_4_opt_b"><div class="para" id="qab_4-2-2-2-1">This would be true if mystery looped forward through the array and returned when it found a value greater than the passed num (n).</div></li><li data-component="answer" id="csawesome2_2_qab_4_opt_c"><div class="para" id="qab_4-2-3-1-1">All values in position m+1 through myStuff.length-1 are less than n.</div></li><li data-component="feedback" id="csawesome2_2_qab_4_opt_c"><div class="para" id="qab_4-2-3-2-1">This would be true if it returned when it found a value at the current index that was greater than num (n).</div></li><li data-component="answer" id="csawesome2_2_qab_4_opt_d"><div class="para" id="qab_4-2-4-1-1">The smallest value is at position m.</div></li><li data-component="feedback" id="csawesome2_2_qab_4_opt_d"><div class="para" id="qab_4-2-4-2-1">It returns the first time the condition is met so nothing is known about the values which are unchecked.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.26.19 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qahard_1" data-multipleanswers="false"><div class="para" id="qahard_1-1-1">6-9-19: Consider the following data field and incomplete method, <code class="code-inline tex2jax_ignore">partialSum</code>, which is intended to return an integer array <code class="code-inline tex2jax_ignore">sum</code> such that for all <code class="code-inline tex2jax_ignore">i</code>, <code class="code-inline tex2jax_ignore">sum[i]</code> is equal to <code class="code-inline tex2jax_ignore">arr[0] + arr[1] + ... + arr[i]</code>. For instance, if arr contains the values <code class="code-inline tex2jax_ignore">{1, 4, 1, 3}</code>, the array <code class="code-inline tex2jax_ignore">sum</code> will contain the values <code class="code-inline tex2jax_ignore">{1, 5, 6, 9}</code>. Which of the following is true about the two implementations of <code class="code-inline tex2jax_ignore">missing code</code> on line 9 that are proposed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private int[] arr;

public int[] partialSum()
{
   int[] sum = new int[arr.length];

   for (int j = 0; j &lt; sum.length; j++)
      sum[j] = 0;

   /* missing code */
   return sum;
}


Implementation 1

for (int j = 0; j &lt; arr.length; j++)
    sum[j] = sum[j - 1] + arr[j];


Implementation 2

for (int j = 0; j &lt; arr.length; j++)
   for (int k = 0; k &lt;= j; k++)
      sum[j] = sum [j] + arr[k];
</code></pre></div><li data-component="answer" id="csawesome2_2_qahard_1_opt_a"><div class="para" id="qahard_1-2-1-1-1">Both implementations work as intended and are equally fast.</div></li><li data-component="feedback" id="csawesome2_2_qahard_1_opt_a"><div class="para" id="qahard_1-2-1-2-1">Implementation 1 doesn’t work and will cause an ArrayIndexOutOfBoundsException. If Implementation 1 was correct, it would be faster.</div></li><li data-component="answer" id="csawesome2_2_qahard_1_opt_b"><div class="para" id="qahard_1-2-2-1-1">Both implementations work as intended, but implementation 1 is faster than implementation 2.</div></li><li data-component="feedback" id="csawesome2_2_qahard_1_opt_b"><div class="para" id="qahard_1-2-2-2-1">Implementation 1 doesn’t work and will cause an ArrayIndexOutOfBoundsException.</div></li><li data-component="answer" id="csawesome2_2_qahard_1_opt_c"><div class="para" id="qahard_1-2-3-1-1">Both implementations work as intended, but implementation 2 is faster than implementation 1.</div></li><li data-component="feedback" id="csawesome2_2_qahard_1_opt_c"><div class="para" id="qahard_1-2-3-2-1">Implementation 1 doesn’t work and will cause an ArrayIndexOutOfBoundsException. If it did work, it would be faster than 2.</div></li><li data-component="answer" id="csawesome2_2_qahard_1_opt_d" data-correct=""><div class="para" id="qahard_1-2-4-1-1">Implementation 1 does not work as intended, because it will cause an ArrayIndexOutOfBoundsException.</div></li><li data-component="feedback" id="csawesome2_2_qahard_1_opt_d"><div class="para" id="qahard_1-2-4-2-1">When j is 0, sum[j-1] will be sum[-1] which will cause an ArrayIndexOutOfBoundsException.</div></li><li data-component="answer" id="csawesome2_2_qahard_1_opt_e"><div class="para" id="qahard_1-2-5-1-1">Implementation 2 does not work as intended, because it will cause an ArrayIndexOutOfBoundsException.</div></li><li data-component="feedback" id="csawesome2_2_qahard_1_opt_e"><div class="para" id="qahard_1-2-5-2-1">Implementation 1 doesn’t work and will cause an ArrayIndexOutOfBoundsException.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>practice-exam-for-arrays</id>
      <title>Practice Exam for Arrays</title>
      <question optional="yes">
        <label>Exercise 4.27.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_arrayEx1" data-multipleanswers="false"><div class="para" id="arrayEx1-1-1">6-10-1: What is the value of <code class="code-inline tex2jax_ignore">i</code> after the following code has executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int[] x = {2, 1, 4, 5, 7};
int limit = 3;
int i = 0;
int sum = 0;
while ((sum &lt; limit) &amp;&amp; (i &lt; x.length))
{
   i++;
   sum = sum + x[i];
}
</code></pre></div><li data-component="answer" id="csawesome2_2_arrayEx1_opt_a"><div class="para" id="arrayEx1-2-1-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_arrayEx1_opt_a"><div class="para" id="arrayEx1-2-1-2-1">While i is set to 0 initially it does change.</div></li><li data-component="answer" id="csawesome2_2_arrayEx1_opt_b"><div class="para" id="arrayEx1-2-2-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_arrayEx1_opt_b"><div class="para" id="arrayEx1-2-2-2-1">This would be true if i was incremented after the sum was changed instead of before.</div></li><li data-component="answer" id="csawesome2_2_arrayEx1_opt_c" data-correct=""><div class="para" id="arrayEx1-2-3-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_arrayEx1_opt_c"><div class="para" id="arrayEx1-2-3-2-1">This will loop twice and increment i each time so at the end i is 2.</div></li><li data-component="answer" id="csawesome2_2_arrayEx1_opt_d"><div class="para" id="arrayEx1-2-4-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_arrayEx1_opt_d"><div class="para" id="arrayEx1-2-4-2-1">This would be true if it was asking for the value of limit.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.27.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_arrayEx2" data-multipleanswers="false"><div class="para" id="arrayEx2-1-1">6-10-2: What is the value of <code class="code-inline tex2jax_ignore">count</code> after the following code has executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int[] x1 = {1, 2, 4, 7};
int[] x2 = {1, 2, 5, 7};
int i1 = x1.length - 1;
int i2 = x2.length - 1;
int count = 0;
while ((i1 &gt; 0 ) &amp;&amp; (i2 &gt; 0 ))
{
   if (x1[i1] == x2[i2])
   {
      count++;
      i1--;
      i2--;
   }
   else if (x1[i1] &lt; x2[i2])
   {
      i2--;
   }
   else
   { // x1[i1] &gt; x2[i2]
      i1--;
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_arrayEx2_opt_a"><div class="para" id="arrayEx2-2-1-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_arrayEx2_opt_a"><div class="para" id="arrayEx2-2-1-2-1">This would be true if the while loop continued as long as i1 and i2 where greater than or equal to 0.</div></li><li data-component="answer" id="csawesome2_2_arrayEx2_opt_b" data-correct=""><div class="para" id="arrayEx2-2-2-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_arrayEx2_opt_b"><div class="para" id="arrayEx2-2-2-2-1">This loops and only increments count when the same value is in x1 and x2, but it doesn’t compare the values at index 0 since it stops when either index is 0.</div></li><li data-component="answer" id="csawesome2_2_arrayEx2_opt_c"><div class="para" id="arrayEx2-2-3-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_arrayEx2_opt_c"><div class="para" id="arrayEx2-2-3-2-1">It may appear that the indices get out of synchronization, but check out the else if and else code.</div></li><li data-component="answer" id="csawesome2_2_arrayEx2_opt_d"><div class="para" id="arrayEx2-2-4-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_arrayEx2_opt_d"><div class="para" id="arrayEx2-2-4-2-1">The very first time through the loop the values at the two indices are equal and count is incremented.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.27.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_arrayEx3" data-multipleanswers="false"><div class="para" id="arrayEx3-1-1">6-10-3: What is the value of <code class="code-inline tex2jax_ignore">count</code> after the following code has executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int [] x = {1, 2, 3, 3, 3};
boolean b[] = new boolean[x.length];
for (int i = 0; i &lt; b.length; i++)
   b[i] = false;
for (int i = 0; i &lt; x.length; i++)
   b[ x[i] ] = true;
int count = 0;
for (int i = 0; i &lt; b.length; i++)
{
   if (b[i] == true)
   {
        count++;
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_arrayEx3_opt_a"><div class="para" id="arrayEx3-2-1-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_arrayEx3_opt_a"><div class="para" id="arrayEx3-2-1-2-1">This would be true if the second loop only executed one time, but it executes for all values in x.</div></li><li data-component="answer" id="csawesome2_2_arrayEx3_opt_b"><div class="para" id="arrayEx3-2-2-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_arrayEx3_opt_b"><div class="para" id="arrayEx3-2-2-2-1">This would be true if there were only 2 distinct values in x.</div></li><li data-component="answer" id="csawesome2_2_arrayEx3_opt_c" data-correct=""><div class="para" id="arrayEx3-2-3-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_arrayEx3_opt_c"><div class="para" id="arrayEx3-2-3-2-1">This changes b[x[i]] to true and then counts the number of true in b.  Since x only has 3 distinct values in it the answer will be 3.</div></li><li data-component="answer" id="csawesome2_2_arrayEx3_opt_d"><div class="para" id="arrayEx3-2-4-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_arrayEx3_opt_d"><div class="para" id="arrayEx3-2-4-2-1">This would be true if there were 4 distinct values in x.</div></li><li data-component="answer" id="csawesome2_2_arrayEx3_opt_e"><div class="para" id="arrayEx3-2-5-1-1">5</div></li><li data-component="feedback" id="csawesome2_2_arrayEx3_opt_e"><div class="para" id="arrayEx3-2-5-2-1">This would be true if it was ``b[i] = true`` instead of ``b[x[i]] = true``.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.27.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_arrayEx4" data-multipleanswers="false"><div class="para" id="arrayEx4-1-1">6-10-4: What is the value of <code class="code-inline tex2jax_ignore">count</code> after the following code has executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int[ ] x1 = {0, 1, 2, 3};
int[ ] x2 = {1, 2, 2, 3};
int i1 = 0;
int i2 = 0;
int count = 0;
while ( (i1 &lt; x1.length) &amp;&amp;
        (i2 &lt; x2.length))
{
   if (x1[i1] == x2[i2])
   {
      count++;
      i2++;
   }
   else if (x1[i1] &lt; x2[i2])
   {
      i1++;
   }
   else
   { // x1[i1] &gt; x2[i2]
      i2++;
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_arrayEx4_opt_a"><div class="para" id="arrayEx4-2-1-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_arrayEx4_opt_a"><div class="para" id="arrayEx4-2-1-2-1">While count starts at 0 it is incremented when a match is found, which will happen when i1 is 1 and i2 is 0.</div></li><li data-component="answer" id="csawesome2_2_arrayEx4_opt_b"><div class="para" id="arrayEx4-2-2-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_arrayEx4_opt_b"><div class="para" id="arrayEx4-2-2-2-1">This would be true if the loop stopped after the first match was found, but it does not.</div></li><li data-component="answer" id="csawesome2_2_arrayEx4_opt_c"><div class="para" id="arrayEx4-2-3-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_arrayEx4_opt_c"><div class="para" id="arrayEx4-2-3-2-1">This would be true if the code only looked for a match at the same indices.</div></li><li data-component="answer" id="csawesome2_2_arrayEx4_opt_d"><div class="para" id="arrayEx4-2-4-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_arrayEx4_opt_d"><div class="para" id="arrayEx4-2-4-2-1">This would be true if both i2 and i1 were incremented when a match was found.</div></li><li data-component="answer" id="csawesome2_2_arrayEx4_opt_e" data-correct=""><div class="para" id="arrayEx4-2-5-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_arrayEx4_opt_e"><div class="para" id="arrayEx4-2-5-2-1">This code only increments i2 when a match is found, which means that the 2 at position 2 in x1 matches both 2’s in x2.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.27.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_arrayEx5" data-multipleanswers="false"><div class="para" id="arrayEx5-1-1">6-10-5: After the following code is executed which of the following are the values in <code class="code-inline tex2jax_ignore">x</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int[ ] x = {0, 1, 2, 3};
int temp;
int i = 0;
int j = x.length - 1;
while (i &lt; j)
{
   temp = x[i];
   x[i] = x[j];
   x[j] = 2 * temp;
   i++;
   j--;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_arrayEx5_opt_a" data-correct=""><div class="para" id="arrayEx5-2-1-1-1">{3,2,2,0}</div></li><li data-component="feedback" id="csawesome2_2_arrayEx5_opt_a"><div class="para" id="arrayEx5-2-1-2-1">This loops 2 times.  During the first loop it copies x[3] to x[0] and sets x[3] to 2 times the original value of x[0].  In the second loop it copies x[2] to x[1] and sets x[2] to 2 times the original value in x[1].</div></li><li data-component="answer" id="csawesome2_2_arrayEx5_opt_b"><div class="para" id="arrayEx5-2-2-1-1">{0,1,2,3}</div></li><li data-component="feedback" id="csawesome2_2_arrayEx5_opt_b"><div class="para" id="arrayEx5-2-2-2-1">These are the initial values for x, but they are changed since i starts out at 0 and j starts out as 3 and i is less than j.</div></li><li data-component="answer" id="csawesome2_2_arrayEx5_opt_c"><div class="para" id="arrayEx5-2-3-1-1">{3,2,1,0}</div></li><li data-component="feedback" id="csawesome2_2_arrayEx5_opt_c"><div class="para" id="arrayEx5-2-3-2-1">This would be true if the code simply reversed the values in the array, but what happens when x[j] = 2 * temp?</div></li><li data-component="answer" id="csawesome2_2_arrayEx5_opt_d"><div class="para" id="arrayEx5-2-4-1-1">{0,2,4,6}</div></li><li data-component="feedback" id="csawesome2_2_arrayEx5_opt_d"><div class="para" id="arrayEx5-2-4-2-1">This would be true if the code just multiplied all the original values by 2.  Is that what it does?  Why would you need to use temp for that?</div></li><li data-component="answer" id="csawesome2_2_arrayEx5_opt_e"><div class="para" id="arrayEx5-2-5-1-1">{6,4,2,0}</div></li><li data-component="feedback" id="csawesome2_2_arrayEx5_opt_e"><div class="para" id="arrayEx5-2-5-2-1">This would be true if the code multiplied the original values by 2 and reversed the values.  Is that what it does?  The loop only continues while i is less than j, so it doesn’t loop through all the values in x.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.27.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_arrayEx6" data-multipleanswers="false"><div class="para" id="arrayEx6-1-1">6-10-6: Which of the following is the missing code from the method <code class="code-inline tex2jax_ignore">isSorted</code> so that it correctly checks that all elements in <code class="code-inline tex2jax_ignore">x</code> are sorted in ascending order?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java"> public static boolean isSorted(int[] x)
 {
    //missing code goes here
 }


A.
boolean b = true;
for (int i=0 ; i &lt; x.length - 1; i++)
{
   if ( x[i] &gt; x[i+1] )
      b = false;
   else
      b = true;
}
return b;

B.
for (int i=0; i &lt; x.length - 1; i++)
{
   if (x[i] &gt; x[i+1] )
      return false;
}
return true;

C.
boolean b = false;
for (int i=0; i&lt;x.length - 1; i++)
{
   if (x[i] &gt; x[i+1] )
      b = false;
}
return b;

D.
boolean b = false;
for (int i=0;i&lt;x.length - 1;i++)
{
   if (x[i] &gt; x[i+1] )
      b = true;
}
return b;

E.
for (int i=0;i&lt;x.length - 1;i++)
{
   if (x[i] &gt; x[i+1] )
      return true;
}
return false;
</code></pre></div><li data-component="answer" id="csawesome2_2_arrayEx6_opt_a"><div class="para" id="arrayEx6-2-1-1-1">A</div></li><li data-component="feedback" id="csawesome2_2_arrayEx6_opt_a"><div class="para" id="arrayEx6-2-1-2-1">This won’t work since each time through the loop b is reset based on the last comparison.</div></li><li data-component="answer" id="csawesome2_2_arrayEx6_opt_b" data-correct=""><div class="para" id="arrayEx6-2-2-1-1">B</div></li><li data-component="feedback" id="csawesome2_2_arrayEx6_opt_b"><div class="para" id="arrayEx6-2-2-2-1">This will return false if it finds a value at i that is larger than the value at i+1 and otherwise it returns true.</div></li><li data-component="answer" id="csawesome2_2_arrayEx6_opt_c"><div class="para" id="arrayEx6-2-3-1-1">C</div></li><li data-component="feedback" id="csawesome2_2_arrayEx6_opt_c"><div class="para" id="arrayEx6-2-3-2-1">There is no way for b to become true.</div></li><li data-component="answer" id="csawesome2_2_arrayEx6_opt_d"><div class="para" id="arrayEx6-2-4-1-1">D</div></li><li data-component="feedback" id="csawesome2_2_arrayEx6_opt_d"><div class="para" id="arrayEx6-2-4-2-1">This sets b to true when it finds elements that are out of order.</div></li><li data-component="answer" id="csawesome2_2_arrayEx6_opt_e"><div class="para" id="arrayEx6-2-5-1-1">E</div></li><li data-component="feedback" id="csawesome2_2_arrayEx6_opt_e"><div class="para" id="arrayEx6-2-5-2-1">This returns as soon as it finds a value that is out of order, but returns true instead of false.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.27.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_arrayEx7" data-multipleanswers="false"><div class="para" id="arrayEx7-1-1">6-10-7: What is the value of <code class="code-inline tex2jax_ignore">i</code> after the following code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int[] x = {2, 1, 4, 5, 7};
int limit = 7;
int i = 0;
int sum = 0;
while ((sum&lt;limit) &amp;&amp; (i&lt;x.length))
{
   sum += x[i];
   i++;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_arrayEx7_opt_a"><div class="para" id="arrayEx7-2-1-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_arrayEx7_opt_a"><div class="para" id="arrayEx7-2-1-2-1">Each time the loop executes i is incremented and it executes at least once.</div></li><li data-component="answer" id="csawesome2_2_arrayEx7_opt_b"><div class="para" id="arrayEx7-2-2-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_arrayEx7_opt_b"><div class="para" id="arrayEx7-2-2-2-1">Does this code only execute 1 time?</div></li><li data-component="answer" id="csawesome2_2_arrayEx7_opt_c"><div class="para" id="arrayEx7-2-3-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_arrayEx7_opt_c"><div class="para" id="arrayEx7-2-3-2-1">This code will loop till sum is not less than limit.  It adds the value at i of x each time to sum so sum isn’t 7 until the 3rd time through the loop.</div></li><li data-component="answer" id="csawesome2_2_arrayEx7_opt_d" data-correct=""><div class="para" id="arrayEx7-2-4-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_arrayEx7_opt_d"><div class="para" id="arrayEx7-2-4-2-1">This will loop three times till sum is 7 and so i will be 3.</div></li><li data-component="answer" id="csawesome2_2_arrayEx7_opt_e"><div class="para" id="arrayEx7-2-5-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_arrayEx7_opt_e"><div class="para" id="arrayEx7-2-5-2-1">This would be true if it was sum &lt;= limit.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.27.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_arrayEx8" data-multipleanswers="false"><div class="para" id="arrayEx8-1-1">6-10-8: If any two numbers in an array of integers, not necessarily consecutive numbers in the array, are out of order (i.e. the number that occurs first in the array is larger than the number that occurs second), then that is called an inversion. For example, consider an array <code class="code-inline tex2jax_ignore">x</code> that has the values {1, 4, 3, 2}.  Then there are three inversions since 4 is greater than both 3 and 2 and 3 is greater than 2.  Which of the following can be used to replace the missing code so that the code correctly counts the number of inversions?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int inversionCount = 0;
for (int i=0 ; i &lt; x.length - 1 ; i++)
{
   // missing code goes here
   {
      if (x[i] &gt; x[j])
         inversionCount++;
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_arrayEx8_opt_a"><div class="para" id="arrayEx8-2-1-1-1">for (int j=0 ; j &lt; x.length; j++)</div></li><li data-component="feedback" id="csawesome2_2_arrayEx8_opt_a"><div class="para" id="arrayEx8-2-1-2-1">The inner loop should start at the outer loop current position plus one to not double count inversions.</div></li><li data-component="answer" id="csawesome2_2_arrayEx8_opt_b"><div class="para" id="arrayEx8-2-2-1-1">for (int j=0 ; j &lt; x.length - 1; j++)</div></li><li data-component="feedback" id="csawesome2_2_arrayEx8_opt_b"><div class="para" id="arrayEx8-2-2-2-1">The inner loop should start at the outer loop current position plus one to not double count inversions.</div></li><li data-component="answer" id="csawesome2_2_arrayEx8_opt_c" data-correct=""><div class="para" id="arrayEx8-2-3-1-1">for (int j=i+1; j &lt; x.length; j++)</div></li><li data-component="feedback" id="csawesome2_2_arrayEx8_opt_c"><div class="para" id="arrayEx8-2-3-2-1">This correctly starts at the outer loop current index plus one and loops through the rest of the array.</div></li><li data-component="answer" id="csawesome2_2_arrayEx8_opt_d"><div class="para" id="arrayEx8-2-4-1-1">for (int j=i+1; j &lt; x.length - 1; j++)</div></li><li data-component="feedback" id="csawesome2_2_arrayEx8_opt_d"><div class="para" id="arrayEx8-2-4-2-1">This misses checking the last value in the array since it is j &lt; x.length-1.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.27.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_arrayEx9" data-multipleanswers="false"><div class="para" id="arrayEx9-1-1">6-10-9: Which of the following correctly copies all the even numbers from <code class="code-inline tex2jax_ignore">array1</code> to <code class="code-inline tex2jax_ignore">array2</code> in the same order as they are in <code class="code-inline tex2jax_ignore">array1</code> without any errors?  Assume that <code class="code-inline tex2jax_ignore">array2</code> is large enough for all the copied values.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">A.
int a2 = 0;
for (int a1=0 ; a1 &lt; array1.length ; a1++)
{
   // if array1[a1] is even
   if (array1[a1] % 2 == 0)
   {
      // array1[a1] is even,
      // so copy it
      a2++;
      array2[a2] = array1[a1];
   }
}

B.
int a2 = 0;
for (int a1=0 ; a1 &lt; array1.length ; a1++)
{
   // if array1[a1] is even
   if (array1[a1] % 2 == 0)
   {
      // array1[a1] is even,
      // so copy it
      array2[a2] = array1[a1];
      a2++;
   }
}

C.
int a2 = 0;
for ( int a1=0 ; a1 &lt;= array1.length ; a1++)
{
   // if array1[a1] is even
   if (array1[a1] % 2 == 0)
   {
      // array1[a1] is even,
      // so copy it
      array2[a2] = array1[a1];
      a2++;
   }
}

D.
int a2 = 0;
for (int a1=0 ; a1 &lt;= array1.length ; a1++)
{
   // if array1[a1] is even
   if (array1[a1] % 2 == 0)
   {
      // array1[a1] is even,
      // so copy it
      a2++;
      array2[a2] = array1[a1];
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_arrayEx9_opt_a"><div class="para" id="arrayEx9-2-1-1-1">A</div></li><li data-component="feedback" id="csawesome2_2_arrayEx9_opt_a"><div class="para" id="arrayEx9-2-1-2-1">This increments a2 before copying the value into array2 and so puts it in the wrong place.</div></li><li data-component="answer" id="csawesome2_2_arrayEx9_opt_b" data-correct=""><div class="para" id="arrayEx9-2-2-1-1">B</div></li><li data-component="feedback" id="csawesome2_2_arrayEx9_opt_b"><div class="para" id="arrayEx9-2-2-2-1">This will copy all the even values in array1 to array2 and put them in the same position as they were in array1.</div></li><li data-component="answer" id="csawesome2_2_arrayEx9_opt_c"><div class="para" id="arrayEx9-2-3-1-1">C</div></li><li data-component="feedback" id="csawesome2_2_arrayEx9_opt_c"><div class="para" id="arrayEx9-2-3-2-1">This will cause an out of bounds error.</div></li><li data-component="answer" id="csawesome2_2_arrayEx9_opt_d"><div class="para" id="arrayEx9-2-4-1-1">D</div></li><li data-component="feedback" id="csawesome2_2_arrayEx9_opt_d"><div class="para" id="arrayEx9-2-4-2-1">This increments a2 before copying the value into array2 and so puts it in the wrong place.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.27.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_arrayEx10" data-multipleanswers="false"><div class="para" id="arrayEx10-1-1">6-10-10: After the following code executes what are the values in <code class="code-inline tex2jax_ignore">array2</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int[] array1 = {2, 4, 1, 3};
int[] array2 = {0, 0, 0, 0};
int a2 = 0;
for (int a1=1; a1 &lt; array1.length; a1++)
{
   if (array1[a1] &gt;= 2)
   {
      array2[a2] = array1[a1];
      a2++;
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_arrayEx10_opt_a" data-correct=""><div class="para" id="arrayEx10-2-1-1-1">{4, 3, 0, 0}</div></li><li data-component="feedback" id="csawesome2_2_arrayEx10_opt_a"><div class="para" id="arrayEx10-2-1-2-1">This copies the value from array1[a1] to array2[a2] but only if the value at array1[a1] is greater than or equal to 2.  So it copies the 4 and 3.  Notice that a2 starts at 0 and a1 starts at 1.</div></li><li data-component="answer" id="csawesome2_2_arrayEx10_opt_b"><div class="para" id="arrayEx10-2-2-1-1">{4, 1, 3, 0}</div></li><li data-component="feedback" id="csawesome2_2_arrayEx10_opt_b"><div class="para" id="arrayEx10-2-2-2-1">This would be true except that a2 is only incremented if the copy occurs.</div></li><li data-component="answer" id="csawesome2_2_arrayEx10_opt_c"><div class="para" id="arrayEx10-2-3-1-1">{2, 4, 3, 0}</div></li><li data-component="feedback" id="csawesome2_2_arrayEx10_opt_c"><div class="para" id="arrayEx10-2-3-2-1">Walk through the very first iteration of the loop and notice that after the first iteration the first value in array2 is 4.</div></li><li data-component="answer" id="csawesome2_2_arrayEx10_opt_d"><div class="para" id="arrayEx10-2-4-1-1">{2, 4, 1, 3}</div></li><li data-component="feedback" id="csawesome2_2_arrayEx10_opt_d"><div class="para" id="arrayEx10-2-4-2-1">This would be true if we were asking for the values in array1.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-8-29</id>
      <title>Mixed Up Code Practice</title>
      <question optional="yes">
        <label>Exercise 4.28.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch8ex1muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch8ex1muc-1-1">The following program segment should be a class that adds some Strings of conversational phrases to a List and then prints them out.  But, the blocks have been mixed up and include one extra block that is not needed in a correct solution.  Drag the needed code from the left to the right and put them in order with the correct indention so that the code would work correctly.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">import java.util.List;
import java.util.ArrayList;
---
import java.util.List;  #distractor
---
public class ListTest
{
---
   public static void main(String[] args)
   {
---
       List&lt;String&gt; conversation;
       conversation = new ArrayList&lt;String&gt;();
---
       conversation.add("hello");
       conversation.add("goodbye");
       conversation.add("how are you");
       conversation.add("see you later");
---
       for (String element: conversation)
       {
---
           System.out.print(element + ", ");
---
       } //end for loop
   } //end main method
} //end class</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.28.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch8ex2muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch8ex2muc-1-1">The following program segment should be a method that traverses through an ArrayList of Strings (the parameter) and print out the elements in reverse order – so  {“cat”, “dog”, “mouse”} should print “mouse, dog, cat, ” as output.  Assume the ArrayList “myList” has been instantiated and filled with Strings.  But, the blocks have been mixed up and include two extra blocks that are not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static void printBackwards(ArrayList&lt;String&gt; myList)
{
---
    for (int i = myList.size() - 1; i &gt;= 0; i--)
    {
---
    for (int i = myList.size() - 1; i &gt; 0; i--)
    {  #distractor
---
        System.out.print(myList.get(i) + ", ");
---
        System.out.print(myList[i] + ", ");  #distractor
---
    } //end for loop
} //end printBackwards method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.28.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch8ex3muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch8ex3muc-1-1">The following program segment should remove all the zeros from an ArrayList of Integers.  Assume the ArrayList “listOfNums” has been instantiated and filled with Integers.  But, the blocks have been mixed up and include two extra blocks that are not needed in a correct solution.  Drag the blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">Integer zero = new Integer(0);
int i = 0;
---
while (i &lt; listOfNums.size())
{
---
    if (listOfNums.get(i).equals(zero))
    {
---
    if (listOfNums.get(i) == zero)
    {  #distractor
---
        listOfNums.remove(i);
---
    } //end if
---
    else
    {
        i++;
    }
---
    i++;  #distractor
---
} //end while loop</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.28.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch8ex4muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch8ex4muc-1-1">The following program segment is a method that should return the smallest int given an ArrayList of Integers (the parameter).  But, the blocks have been mixed up and include one extra block that is not needed in a correct solution.  Drag the blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static int findSmallest(ArrayList&lt;Integer&gt; nums)
{
---
    int smallest = nums.get(0);
---
    int smallest = nums[0];  #distractor
---
    for (int i = 0; i &lt; nums.size(); i++)
    {
---
        if (nums.get(i) &lt; smallest)
        {
---
            smallest = nums.get(i);
---
        }
---
    } //end for loop
---
    return smallest;
---
} //end findSmallest method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.28.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch8ex5muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch8ex5muc-1-1">The following program segment is a method that should remove all the positive and negative odd values in an ArrayList of Integers (the parameter).  But, the blocks have been mixed up and include one extra block that is not needed in a correct solution.  Drag the blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static void removeOdd(ArrayList&lt;Integer&gt; nums)
{
---
    int i = 0;
---
    while (i &lt; nums.size())
    {
---
        if (Math.abs(nums.get(i)) % 2 == 1)
        {
---
        if (nums.get(i) % 2 == 1)
        {  #distractor
---
            nums.remove(i);
---
        } else {
            i++;
        }
---
    } //end while loop
---
} //end removeOdd method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.28.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch8ex6muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch8ex6muc-1-1">The following method should calculate the average from an ArrayList of Integers (the parameter).  But, the blocks have been mixed up and include one extra block that is not needed in a correct solution.  Drag the needed code from the left to the right and put them in order with the correct indention so that the code would work correctly.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static double average(ArrayList&lt;Integer&gt; nums)
{
---
   double sum = 0;
---
   for (int i = 0; i &lt; nums.size(); i++)
   {
---
   for (int i = 0; i &lt; nums.length; i++)
   {  #distractor
---
       sum += nums.get(i);
---
   } //end for loop
---
   return (sum / nums.size());
---
} //end average method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.28.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch8ex7muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch8ex7muc-1-1">The following program segment is a method that should find the largest value given an ArrayList of Integers (the parameter) and move it to the back of the list.  But, the blocks have been mixed up and include two extra blocks that are not needed in a correct solution.  Drag the blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static void moveLargest(ArrayList&lt;Integer&gt; nums)
{
---
    int largest = 0;
---
    for (int i = 0; i &lt; nums.size(); i++)
    {
---
        if (nums.get(i) &gt; nums.get(largest))
        {
---
        if (nums[i] &gt; nums[largest])
        {  #distractor
---
            largest = i;
---
        }
---
    } //end for loop
---
    Integer largestVal = nums.remove(largest);
    nums.add(largestVal);
---
    nums.add(largest);  #distractor
---
} //end moveLargest method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.28.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch8ex8muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch8ex8muc-1-1">The following method should remove all the Strings that have length 3 or shorter from an ArrayList of Strings (the parameter) – so {“catch”, “dog”, “tree”, “me”} should return {“catch”, “tree”}.  But, the blocks have been mixed up and include one extra block that is not needed in a correct solution.  Drag the needed code from the left to the right and put them in order with the correct indention so that the code would work correctly.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static void removeShort(ArrayList&lt;String&gt; words)
{
---
    int i = 0;
---
    while (i &lt; words.size())
    {
---
        if (words.get(i).length() &lt;= 3)
        {
---
        if (words.get(i).length &lt;= 3)
        {  #distractor
---
            words.remove(i);
---
        } else {
            i++;
        }
---
    } //end while loop
---
} //end removeShort method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.28.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch8ex9muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch8ex9muc-1-1">The following program segment is a method that should take each String from an ArrayList of Strings (the parameter) and add it again to the list – so {“cat”, “ribbon”, “house”} should become {“cat”, “cat”, “ribbon”, “ribbon”, “house”, “house”}.  But, the blocks have been mixed up and include two extra blocks that are not needed in a correct solution.  Drag the blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static void doubleList(ArrayList&lt;String&gt; words)
{
---
    int count = 0;
---
    while (count &lt; words.size())
    {
---
    while (count &lt;= words.size())
    {  #distractor
---
        String toAdd = words.get(count);
        words.add(count, toAdd);
---
        count += 2;
---
        count++;  #distractor
---
    } //end while loop
---
} //end doubleList method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.28.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch8ex10muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch8ex10muc-1-1">The following method should remove a specific Integer (specified in parameter) whenever it occurs in a given ArrayList of Integers (the parameter).  But, the blocks have been mixed up and include three extra blocks that are not needed in a correct solution.  Drag the needed code from the left to the right and put them in order with the correct indention so that the code would work correctly.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static void removeElement(
                      ArrayList&lt;Integer&gt; nums,
                      int toRemove)
{
---
   int i = 0;
---
   while (i &lt; nums.size())
   {
---
   while (i &lt; nums.length)
   {  #distractor
---
       if (nums.get(i) == toRemove)
       {
---
       if (nums.get(i) == nums(toRemove))
       {  #distractor
---
        nums.remove(i);
---
       } //end if
---
       else {
           i++;
       }
---
       i++;  #distractor
---
   } //end while loop
} //end average method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-001459</id>
      <title>Toggle Mixed Up or Write Code Practice</title>
    </subchapter>
    <subchapter>
      <id>csawesome2-8-31</id>
      <title>Code Practice with ArrayLists</title>
      <question optional="yes">
        <label>Exercise 4.30.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-8-31-2-1-1-1">Fix the following code so that it compiles. The code should instantiate an ArrayList of Strings <code class="code-inline tex2jax_ignore">names</code> and fill it with the Strings from the array <code class="code-inline tex2jax_ignore">friends</code>. It should then print out <code class="code-inline tex2jax_ignore">names</code>.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">import java.util.*;

public class Test1
{
    public static void main(String[] args)
    {
        ArrayList&lt;String&gt; names = new ArrayList&lt;String&gt;();
        String[] friends = {"Sam", "Jessica", "Mark", "Alexis"};
        for (int i = 0; i &lt;= friends.length; i++)
        {
            names.add(friends[i]);
        }
        System.out.println(names);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Sam\nJessica\nMark\nAlexis";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.30.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch8Ex1a">
                <div class="ac_question" id="csawesome2_2_ch8Ex1a_question">
                  <div class="para" id="ch8Ex1a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch8Ex1a_editor" data-question_label="" data-codelens="true">import java.util.*;

public class Test1
{
    public static void main(String[] args)
    {
        ArrayList&lt;String&gt; names = new ArrayList&lt;String&gt;();
        String[] friends = {"Sam", "Jessica", "Mark", "Alexis"};
        for (int i = 0; i &lt; friends.length; i++)
        {
            names.add(friends[i]);
        }
        System.out.println(names);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.30.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-8-31-2-2-1-1">Fix the following class so that it will compile and the method <code class="code-inline tex2jax_ignore">reverse</code> will return an ArrayList containing Integers in the reversed order of the ArrayList parameter <code class="code-inline tex2jax_ignore">list</code>. Hint: for this solution, only one line needs to be added to the for-loop inside of the <code class="code-inline tex2jax_ignore">reverse</code> method.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">import java.util.*;

public class Test1
{
    public static ArrayList&lt;Integer&gt; reverse(ArrayList&lt;Integer&gt; list)
    {
        ArrayList&lt;int&gt; reversed = new ArrayList&lt;int&gt;();
        for (Integer element : list) {}

        return reversed;
    }

    public static void main(String[] args)
    {
        // instantiate ArrayList and fill with Integers
        ArrayList&lt;Integer&gt; values = new ArrayList&lt;Integer&gt;();
        int[] nums = {1, 5, 7, 9, -2, 3, 2};
        for (int i = 0; i &lt; nums.length; i++)
        {
            values.add(nums[i]);
        }
        ArrayList&lt;Integer&gt; result = reverse(values);
        System.out.println("Expected Result:\t [2, 3, -2, 9, 7, 5, 1]");
        System.out.println("Your Result:\t\t " + result);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "Expected Result: [2, 3, -2, 9, 7, 5, 1]\n"
                        + "Your Result:     [2, 3, -2, 9, 7, 5, 1]\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testAdd()
    {
        String target = "reversed.add(0,element);";
        boolean passed =
                checkCodeContains(
                        "add method called to add element to the beginning of ArrayList reversed",
                        target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.30.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch8Ex2a">
                <div class="ac_question" id="csawesome2_2_ch8Ex2a_question">
                  <div class="para" id="ch8Ex2a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch8Ex2a_editor" data-question_label="" data-codelens="true">import java.util.*;

public class Test1
{
    public static ArrayList&lt;Integer&gt; reverse(ArrayList&lt;Integer&gt; list)
    {
        ArrayList&lt;Integer&gt; reversed = new ArrayList&lt;Integer&gt;();
        for (Integer element : list)
        {
            reversed.add(0, element);
        }
        return reversed;
    }

    public static void main(String[] args)
    {
        // instantiate ArrayList and fill with Integers
        ArrayList&lt;Integer&gt; values = new ArrayList&lt;Integer&gt;();
        int[] nums = {1, 5, 7, 9, -2, 3, 2};
        for (int i = 0; i &lt; nums.length; i++)
        {
            values.add(nums[i]);
        }
        ArrayList&lt;Integer&gt; result = reverse(values);
        System.out.println("Expected Result:\t [2, 3, -2, 9, 7, 5, 1]");
        System.out.println("Your Result:\t\t " + result);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.30.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-8-31-2-3-1-1">Fix the following method <code class="code-inline tex2jax_ignore">printEvenIndex</code> so that it will print out the Integers at even indices of the passed-in ArrayList <code class="code-inline tex2jax_ignore">list</code>.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">import java.util.*;

public class Test1
{
    public static void printEvenIndex(ArrayList&lt;Integer&gt; list)
    {
        for (int i)
        {
            if (i % 2 == 1)
            {
                System.out.print(list.get(i) + ", ");
            }
        }
    }

    public static void main(String[] args)
    {
        //instantiate ArrayList and fill with Integers
        ArrayList&lt;Integer&gt; values = new ArrayList&lt;Integer&gt;();
        int[] nums = {1, 5, 7, 9, -2, 3, 2};
        for (int i = 0; i &lt; nums.length; i ++)
        {
            values.add(nums[i]);
        }
        System.out.println("Expected Result:\t 1, 7, -2, 2,");
        System.out.print("Your Result:\t\t ");
        printEvenIndex(values);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Expected Result:\t1, 7, -2, 2,\n" + "Your Result:\t\t1, 7, -2, 2,\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testFor()
    {
        String target = "for (int i = 0; i &lt; list.size(); i++)";
        boolean passed = checkCodeContains("FOR loop: traversing ArrayList list", target);
        assertTrue(passed);
    }

    @Test
    public void testEvenIndx()
    {
        String target = "if (i % 2 == 0)";
        boolean passed =
                checkCodeContains("checking EVEN index i: traversing ArrayList list", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.30.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch8Ex3a">
                <div class="ac_question" id="csawesome2_2_ch8Ex3a_question">
                  <div class="para" id="ch8Ex3a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch8Ex3a_editor" data-question_label="" data-codelens="true">import java.util.*;

public class Test1
{
    public static void printEvenIndex(ArrayList&lt;Integer&gt; list)
    {
        for (int i = 0; i &lt; list.size(); i++)
        {
            if (i % 2 == 0)
            {
                System.out.print(list.get(i) + ", ");
            }
        }
    }

    public static void main(String[] args)
    {
        // instantiate ArrayList and fill with Integers
        ArrayList&lt;Integer&gt; values = new ArrayList&lt;Integer&gt;();
        int[] nums = {1, 5, 7, 9, -2, 3, 2};
        for (int i = 0; i &lt; nums.length; i++)
        {
            values.add(nums[i]);
        }
        System.out.println("Expected Result:\t 1, 7, -2, 2,");
        System.out.print("Your Result:\t\t ");
        printEvenIndex(values);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.30.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-8-31-2-4-1-1">Fix the following method <code class="code-inline tex2jax_ignore">printEvenElements</code> so that it will print out all of the even Integers that are in the passed-in ArrayList <code class="code-inline tex2jax_ignore">list</code>.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">import java.util.*;

public class Test1
{
    public static void printEvenElements(ArrayList&lt;Integer&gt; list)
    {
        for (int i = 0; i &lt; list.length; i++)
        {
            if (list.get(i) % 2 == 0)
            {
                System.out.print(list.get(i) + ", ");
            }
        }
    }

    public static void main(String[] args)
    {
        // instantiate ArrayList and fill with Integers
        ArrayList&lt;Integer&gt; values = new ArrayList&lt;Integer&gt;();
        int[] nums = {1, 44, 7, 9, -16, 3, 2};
        for (int i = 0; i &lt; nums.length; i++)
        {
            values.add(nums[i]);
        }
        System.out.println("Expected Result:\t 44, -16, 2,");
        System.out.print("Your Result:\t\t ");
        printEvenElements(values);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Expected Result:\t44, -16, 2,\n" + "Your Result:\t\t44, -16, 2,\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testSizeMethod()
    {
        String target = "i &lt; list.size()";
        boolean passed = checkCodeContains("SIZE method used in traversing ArrayList list", target);
        assertTrue(passed);
    }

}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.30.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch8Ex4a">
                <div class="ac_question" id="csawesome2_2_ch8Ex4a_question">
                  <div class="para" id="ch8Ex4a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch8Ex4a_editor" data-question_label="" data-codelens="true">import java.util.*;

public class Test1
{
    public static void printEvenElements(ArrayList&lt;Integer&gt; list)
    {
        for (int i = 0; i &lt; list.size(); i++)
        {
            if (list.get(i) % 2 == 0)
            {
                System.out.print(list.get(i) + ", ");
            }
        }
    }

    public static void main(String[] args)
    {
        // instantiate ArrayList and fill with Integers
        ArrayList&lt;Integer&gt; values = new ArrayList&lt;Integer&gt;();
        int[] nums = {1, 44, 7, 9, -16, 3, 2};
        for (int i = 0; i &lt; nums.length; i++)
        {
            values.add(nums[i]);
        }
        System.out.println("Expected Result:\t 44, -16, 2,");
        System.out.print("Your Result:\t\t ");
        printEvenElements(values);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.30.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-8-31-2-5-1-1">Rewrite the following code so that it fills the ArrayList <code class="code-inline tex2jax_ignore">values</code> with the elements of the array <code class="code-inline tex2jax_ignore">nums</code> using a for-each loop instead of a <code class="code-inline tex2jax_ignore">for</code> loop.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">import java.util.*;

public class Test1
{
    public static void main(String[] args)
    {
        ArrayList&lt;Integer&gt; values = new ArrayList&lt;Integer&gt;();
        int[] nums = {1, 44, 7, 9, -16, 3};
        for (int i = 0; i &lt; nums.length; i++)
        {
            values.add(nums[i]);
        }
        System.out.println("Expected Result:\t [1, 44, 7, 9, -16, 3]");
        System.out.println("Your Result:\t\t " + values);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "Expected Result:\t[1, 44, 7, 9, -16, 3]\n"
                        + "Your Result:\t\t[1, 44, 7, 9, -16, 3]\n ";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testForEachLoop()
    {
        String target = "for (int * : nums)";
        boolean passed = checkCodeContainsRegex("For-Each loop in traversing Array nums", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.30.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch8Ex5a">
                <div class="ac_question" id="csawesome2_2_ch8Ex5a_question">
                  <div class="para" id="ch8Ex5a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch8Ex5a_editor" data-question_label="" data-codelens="true">import java.util.ArrayList;

public class Test1
{
    public static void main(String[] args)
    {
        ArrayList&lt;Integer&gt; values = new ArrayList&lt;Integer&gt;();
        int[] nums = {1, 44, 7, 9, -16, 3};
        for (int element : nums)
        {
            values.add(element);
        }
        System.out.println("Expected Result:\t [1, 44, 7, 9, -16, 3]");
        System.out.println("Your Result:\t\t " + values);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.30.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch8Ex6a">
                <div class="ac_question" id="csawesome2_2_ch8Ex6a_question">
                  <div class="para" id="ch8Ex6a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch8Ex6a_editor" data-question_label="" data-codelens="true">import java.util.ArrayList;

public class Test1
{
    public static int sumNegValues(ArrayList&lt;Integer&gt; list)
    {
        int sum = 0;
        for (Integer element : list)
        {
            if (element &lt; 0)
            {
                sum += element;
            }
        }
        return sum;
    }

    public static void main(String[] args)
    {
        // instantiate ArrayList and fill with Integers
        ArrayList&lt;Integer&gt; values = new ArrayList&lt;Integer&gt;();
        int[] nums = {-2, 34, -11, 9, -6, 3};
        for (int i = 0; i &lt; nums.length; i++)
        {
            values.add(nums[i]);
        }
        System.out.println("Expected Result:\t -19");
        System.out.print("Your Result:\t\t ");
        System.out.println(sumNegValues(values));
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.30.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch8Ex6a">
                <div class="ac_question" id="csawesome2_2_ch8Ex6a_question">
                  <div class="para" id="ch8Ex6a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch8Ex6a_editor" data-question_label="" data-codelens="true">import java.util.ArrayList;

public class Test1
{
    public static int sumNegValues(ArrayList&lt;Integer&gt; list)
    {
        int sum = 0;
        for (Integer element : list)
        {
            if (element &lt; 0)
            {
                sum += element;
            }
        }
        return sum;
    }

    public static void main(String[] args)
    {
        // instantiate ArrayList and fill with Integers
        ArrayList&lt;Integer&gt; values = new ArrayList&lt;Integer&gt;();
        int[] nums = {-2, 34, -11, 9, -6, 3};
        for (int i = 0; i &lt; nums.length; i++)
        {
            values.add(nums[i]);
        }
        System.out.println("Expected Result:\t -19");
        System.out.print("Your Result:\t\t ");
        System.out.println(sumNegValues(values));
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.30.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-8-31-2-7-1-1">Finish the following method ‘’removeLongStrings’’ that checks each element of the passed in ArrayList <code class="code-inline tex2jax_ignore">list</code> and removes any that are strictly longer than 4 characters.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">import java.util.ArrayList;

public class Test1
{
    public static void removeLongStrings(ArrayList&lt;String&gt; list)
    {
        // code here
    }

    public static void main(String[] args)
    {
        // instantiate ArrayList and fill with Integers
        ArrayList&lt;String&gt; values = new ArrayList&lt;String&gt;();
        String[] words = {"bathtub", "fish", "computer", "cat", "foo"};
        for (int i = 0; i &lt; words.length; i++)
        {
            values.add(words[i]);
        }
        removeLongStrings(values);
        System.out.println("Expected Result:\t [fish, cat, foo]");
        System.out.println("Your Result:\t\t " + values);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.util.ArrayList;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "Expected Result:\t [fish, cat, foo]\n" + "Your Result:\t\t [fish, cat, foo]\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testRemoveLongStrings()
    {
        ArrayList&lt;String&gt; mylist1 = new ArrayList&lt;String&gt;();
        mylist1.add("longword");
        mylist1.add("dog");
        mylist1.add("longword");
        mylist1.add("wee");

        ArrayList&lt;String&gt; mylist2 = new ArrayList&lt;&gt;();
        mylist2.add("dog");
        mylist2.add("wee");

        Test1.removeLongStrings(mylist1);

        boolean result = mylist2.equals(mylist1);

        boolean passed = getResults("true", "" + result, "removeLongStrings method test");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.30.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch8Ex7a">
                <div class="ac_question" id="csawesome2_2_ch8Ex7a_question">
                  <div class="para" id="ch8Ex7a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch8Ex7a_editor" data-question_label="" data-codelens="true">import java.util.ArrayList;

public class Test1
{
    public static void removeLongStrings(ArrayList&lt;String&gt; list)
    {
        int count = 0;
        while (count &lt; list.size())
        {
            if (list.get(count).length() &gt; 4)
            {
                list.remove(count);
            }
            else
            {
                count++;
            }
        }
    }

    public static void main(String[] args)
    {
        // instantiate ArrayList and fill with Integers
        ArrayList&lt;String&gt; values = new ArrayList&lt;String&gt;();
        String[] words = {"bathtub", "fish", "computer", "cat", "foo"};
        for (int i = 0; i &lt; words.length; i++)
        {
            values.add(words[i]);
        }
        removeLongStrings(values);
        System.out.println("Expected Result:\t [fish, cat, foo]");
        System.out.println("Your Result:\t\t " + values);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.30.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-8-31-2-8-1-1">Fill in the method <code class="code-inline tex2jax_ignore">shiftLeftOne</code> below to shift all of the elements of the passed-in ArrayList <code class="code-inline tex2jax_ignore">list</code> left by one. The original first element should be wrapped to the back of the list after the shift. Ex: {1, 2, 3, 4} should turn turn into {2, 3, 4, 1}</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">import java.util.ArrayList;

public class Test1
{
    public static void shiftLeftOne(ArrayList&lt;Integer&gt; list)
    {
        // code here
    }

    public static void main(String[] args)
    {
        // instantiate ArrayList and fill with Integers
        ArrayList&lt;Integer&gt; values = new ArrayList&lt;Integer&gt;();
        int[] nums = {1, 2, 3, 4, 5};
        for (int i = 0; i &lt; nums.length; i++)
        {
            values.add(nums[i]);
        }
        shiftLeftOne(values);
        System.out.println("Expected Result:\t [2, 3, 4, 5, 1]");
        System.out.println("Your Result:\t\t " + values);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.util.ArrayList;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "Expected Result:\t [2, 3, 4, 5, 1]\n" + "Your Result:\t\t [2, 3, 4, 5, 1]\n ";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testShiftLeftOne()
    {
        ArrayList&lt;Integer&gt; mylist1 = new ArrayList&lt;Integer&gt;();
        mylist1.add(2);
        mylist1.add(4);
        mylist1.add(1);

        ArrayList&lt;Integer&gt; mylist2 = new ArrayList&lt;Integer&gt;();
        mylist2.add(4);
        mylist2.add(1);
        mylist2.add(2);
        Test1.shiftLeftOne(mylist1);

        boolean result = mylist2.equals(mylist1);

        boolean passed = getResults("true", "" + result, "shiftLeftOne method test");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.30.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch8Ex8a">
                <div class="ac_question" id="csawesome2_2_ch8Ex8a_question">
                  <div class="para" id="ch8Ex8a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch8Ex8a_editor" data-question_label="" data-codelens="true">import java.util.ArrayList;

public class Test1
{
    public static void shiftLeftOne(ArrayList&lt;Integer&gt; list)
    {
        Integer firstVal = list.remove(0);
        list.add(firstVal);
    }

    public static void main(String[] args)
    {
        // instantiate ArrayList and fill with Integers
        ArrayList&lt;Integer&gt; values = new ArrayList&lt;Integer&gt;();
        int[] nums = {1, 2, 3, 4, 5};
        for (int i = 0; i &lt; nums.length; i++)
        {
            values.add(nums[i]);
        }
        shiftLeftOne(values);
        System.out.println("Expected Result:\t [2, 3, 4, 5, 1]");
        System.out.println("Your Result:\t\t " + values);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.30.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-8-31-2-9-1-1">Finish the method <code class="code-inline tex2jax_ignore">moveSmallest</code> so that it finds the smallest value in the passed-in ArrayList <code class="code-inline tex2jax_ignore">list</code> and moves it to the front of the list.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">import java.util.List;
import java.util.ArrayList;

public class Test1
{
    public static void moveSmallest(ArrayList&lt;Integer&gt; list)
    {
        int smallestIndex = 0;
        for ()
        {
            if ()
            {
                smallestIndex = i;
            }
        }
        //move smallest to front
    }

    public static void main(String[] args)
    {
        //instantiate ArrayList and fill with Integers
        ArrayList&lt;Integer&gt; values = new ArrayList&lt;Integer&gt;();
        int[] nums = {3, 11, 54, 7, 1, 22};
        for (int i = 0; i &lt; nums.length; i ++)
        {
            values.add(nums[i]);
        }
        moveSmallest(values);
        System.out.println("Expected Result:\t [1, 3, 11, 54, 7, 22]");
        System.out.println("Your Result:\t\t " + values);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.util.ArrayList;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "Expected Result:\t [1, 3, 11, 54, 7, 22]\n"
                        + "Your Result:\t\t [1, 3, 11, 54, 7, 22]\n ";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testMoveSmallest()
    {
        ArrayList&lt;Integer&gt; mylist1 = new ArrayList&lt;Integer&gt;();
        mylist1.add(11);
        mylist1.add(54);
        mylist1.add(7);
        mylist1.add(3);
        mylist1.add(22);

        ArrayList&lt;Integer&gt; mylist2 = new ArrayList&lt;Integer&gt;();
        mylist2.add(3);
        mylist2.add(11);
        mylist2.add(54);
        mylist2.add(7);
        mylist2.add(22);

        Test1.moveSmallest(mylist1);

        boolean result = mylist2.equals(mylist1);

        boolean passed = getResults("true", "" + result, "moveSmallest method test");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.30.18 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch8Ex9a">
                <div class="ac_question" id="csawesome2_2_ch8Ex9a_question">
                  <div class="para" id="ch8Ex9a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch8Ex9a_editor" data-question_label="" data-codelens="true">import java.util.ArrayList;

public class Test1
{
    public static void moveSmallest(ArrayList&lt;Integer&gt; list)
    {
        int smallestIndex = 0;
        for (int i = 0; i &lt; list.size(); i++)
        {
            if (list.get(i) &lt; list.get(smallestIndex))
            {
                smallestIndex = i;
            }
        }
        Integer smallest = list.remove(smallestIndex);
        list.add(0, smallest);
    }

    public static void main(String[] args)
    {
        // instantiate ArrayList and fill with Integers
        ArrayList&lt;Integer&gt; values = new ArrayList&lt;Integer&gt;();
        int[] nums = {3, 11, 54, 7, 1, 22};
        for (int i = 0; i &lt; nums.length; i++)
        {
            values.add(nums[i]);
        }
        moveSmallest(values);
        System.out.println("Expected Result:\t [1, 3, 11, 54, 7, 22]");
        System.out.println("Your Result:\t\t " + values);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.30.19 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-8-31-2-10-1-1">Finish the method <code class="code-inline tex2jax_ignore">findLongest</code> to find and return the longest String in the ArrayList of Strings <code class="code-inline tex2jax_ignore">list</code>.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">import java.util.ArrayList;

public class Test1
{
    public static String findLongest(ArrayList&lt;String&gt; list)
    {
        // code here
    }

    public static void main(String[] args)
    {
        // instantiate ArrayList and fill with Integers
        ArrayList&lt;String&gt; values = new ArrayList&lt;String&gt;();
        String[] words = {"singapore", "cattle", "metropolitan", "turnstile"};
        for (int i = 0; i &lt; words.length; i++)
        {
            values.add(words[i]);
        }
        System.out.println("Expected Result:\t metropolitan");
        System.out.print("Your Result:\t\t ");
        System.out.println(findLongest(values));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.util.ArrayList;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Expected Result:\t metropolitan\n" + "Your Result:\t\t metropolitan\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testFindLongest()
    {
        ArrayList&lt;String&gt; mylist = new ArrayList&lt;String&gt;();
        mylist.add("longword");
        mylist.add("longerword");
        mylist.add("short");

        String output = Test1.findLongest(mylist);
        String expect = "longerword";

        boolean passed = getResults(output, expect, "findLongest method test");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.30.20 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ch8Ex10a">
                <div class="ac_question" id="csawesome2_2_ch8Ex10a_question">
                  <div class="para" id="ch8Ex10a-1-1">This is the answer to the previous question.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ch8Ex10a_editor" data-question_label="" data-codelens="true">import java.util.ArrayList;

public class Test1
{
    public static String findLongest(ArrayList&lt;String&gt; list)
    {
        String longest = "";
        for (String element : list)
        {
            if (element.length() &gt; longest.length())
            {
                longest = element;
            }
        }
        return longest;
    }

    public static void main(String[] args)
    {
        // instantiate ArrayList and fill with Integers
        ArrayList&lt;String&gt; values = new ArrayList&lt;String&gt;();
        String[] words = {"singapore", "cattle", "metropolitan", "turnstile"};
        for (int i = 0; i &lt; words.length; i++)
        {
            values.add(words[i]);
        }
        System.out.println("Expected Result:\t metropolitan");
        System.out.print("Your Result:\t\t ");
        System.out.println(findLongest(values));
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-001287</id>
      <title>Multiple-Choice Exercises</title>
      <question optional="yes">
        <label>Exercise 4.31.1.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qale_1" data-multipleanswers="false">
                <div class="para" id="qale_1-1-1">7-11-1-1: Which index is the last element in a list called <code class="code-inline tex2jax_ignore">nums</code> at?</div>
                <li data-component="answer" id="csawesome2_2_qale_1_opt_a">
                  <div class="para" id="qale_1-2-1-1-1">nums.length</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_1_opt_a">
                  <div class="para" id="qale_1-2-1-2-1">You can’t use length on lists and the last index is one less than the size.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qale_1_opt_b">
                  <div class="para" id="qale_1-2-2-1-1">nums.length - 1</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_1_opt_b">
                  <div class="para" id="qale_1-2-2-2-1">You can’t use length on lists, use size instead.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qale_1_opt_c">
                  <div class="para" id="qale_1-2-3-1-1">nums.size()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_1_opt_c">
                  <div class="para" id="qale_1-2-3-2-1">Since the first element in a list is at index 0 the last element is at the size minus 1.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qale_1_opt_d" data-correct="">
                  <div class="para" id="qale_1-2-4-1-1">nums.size() - 1</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_1_opt_d">
                  <div class="para" id="qale_1-2-4-2-1">The last element is at the size of the list minus 1.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.1.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qale_2" data-multipleanswers="false">
                <div class="para" id="qale_2-1-1">7-11-1-2: Which of the following is a reason to use an array instead of an ArrayList?</div>
                <li data-component="answer" id="csawesome2_2_qale_2_opt_a">
                  <div class="para" id="qale_2-2-1-1-1">An array has faster access to its elements than a list does.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_2_opt_a">
                  <div class="para" id="qale_2-2-1-2-1">Since an ArrayList is implemented by an array, it has the same access time.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qale_2_opt_b">
                  <div class="para" id="qale_2-2-2-1-1">An array knows it length, but a list doesn’t know its length.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_2_opt_b">
                  <div class="para" id="qale_2-2-2-2-1">Lists do know their length, but they don’t make it public.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qale_2_opt_c" data-correct="">
                  <div class="para" id="qale_2-2-3-1-1">An ArrayList can allocate more space than it needs.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_2_opt_c">
                  <div class="para" id="qale_2-2-3-2-1">Every time an ArrayList fills up a new array is created that is twice as big.  This can lead to extra space that is wasted.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.1.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qale_3" data-multipleanswers="false">
                <div class="para" id="qale_3-1-1">7-11-1-3: Which of the following is a reason to use an ArrayList instead of an array?</div>
                <li data-component="answer" id="csawesome2_2_qale_3_opt_a" data-correct="">
                  <div class="para" id="qale_3-2-1-1-1">An ArrayList can grow or shrink as needed, while an array is always the same size.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_3_opt_a">
                  <div class="para" id="qale_3-2-1-2-1">This is the main advantage to an ArrayList.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qale_3_opt_b">
                  <div class="para" id="qale_3-2-2-1-1">You can use a for-each loop on an ArrayList, but not in an array.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_3_opt_b">
                  <div class="para" id="qale_3-2-2-2-1">You can use a for-each loop on either an ArrayList or array.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qale_3_opt_c">
                  <div class="para" id="qale_3-2-3-1-1">You can store objects in an ArrayList, but not in an array.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_3_opt_c">
                  <div class="para" id="qale_3-2-3-2-1">Arrays can also store objects of the same type.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.1.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qale_4" data-multipleanswers="false">
                <div class="para" id="qale_4-1-1">7-11-1-4: Which of the following is the correct way to get the first value in a list called <code class="code-inline tex2jax_ignore">nums</code>?</div>
                <li data-component="answer" id="csawesome2_2_qale_4_opt_a">
                  <div class="para" id="qale_4-2-1-1-1">nums[0]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_4_opt_a">
                  <div class="para" id="qale_4-2-1-2-1">This is how you get the first value in an array, but not in a list.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qale_4_opt_b">
                  <div class="para" id="qale_4-2-2-1-1">nums[1]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_4_opt_b">
                  <div class="para" id="qale_4-2-2-2-1">This is how you get the second value in an array.  Remember that this is a list and that the first item in an array is at index 0.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qale_4_opt_c">
                  <div class="para" id="qale_4-2-3-1-1">nums.first()</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_4_opt_c">
                  <div class="para" id="qale_4-2-3-2-1">The List  doesn’t have a first method.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qale_4_opt_d" data-correct="">
                  <div class="para" id="qale_4-2-4-1-1">nums.get(0)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_4_opt_d">
                  <div class="para" id="qale_4-2-4-2-1">Use the get method to get a value from a list and the first element in a list is at index 0.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qale_4_opt_e">
                  <div class="para" id="qale_4-2-5-1-1">nums.get(1)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_4_opt_e">
                  <div class="para" id="qale_4-2-5-2-1">This would return the second element in a list.  Remember that the first element in a list or array is at index 0.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.1.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qale_5" data-multipleanswers="false">
                <div class="para" id="qale_5-1-1">7-11-1-5: Which of the following is the correct way to set the second value in a list called <code class="code-inline tex2jax_ignore">nums</code> to 5?</div>
                <li data-component="answer" id="csawesome2_2_qale_5_opt_a">
                  <div class="para" id="qale_5-2-1-1-1">nums[1] = 5;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_5_opt_a">
                  <div class="para" id="qale_5-2-1-2-1">This is how you set the second value in an array, but not in a list.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qale_5_opt_b">
                  <div class="para" id="qale_5-2-2-1-1">nums[2] = 5;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_5_opt_b">
                  <div class="para" id="qale_5-2-2-2-1">This is how you set the third value in an array, but not in a list.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qale_5_opt_c">
                  <div class="para" id="qale_5-2-3-1-1">nums.set(5, 1);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_5_opt_c">
                  <div class="para" id="qale_5-2-3-2-1">This would the value at index 5 to 1.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qale_5_opt_d" data-correct="">
                  <div class="para" id="qale_5-2-4-1-1">nums.set(1, 5);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_5_opt_d">
                  <div class="para" id="qale_5-2-4-2-1">This sets the second value in the list to 5.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qale_5_opt_e">
                  <div class="para" id="qale_5-2-5-1-1">nums.set(2, 5);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_5_opt_e">
                  <div class="para" id="qale_5-2-5-2-1">This would set the third value in the list to 5.  Remember that the first value is at index 0.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.1.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qale_6" data-multipleanswers="false">
                <div class="para" id="qale_6-1-1">7-11-1-6: Which of the following is the correct way to remove the value 3 from the list <code class="code-inline tex2jax_ignore">nums = [5, 3, 2, 1]</code>?</div>
                <li data-component="answer" id="csawesome2_2_qale_6_opt_a">
                  <div class="para" id="qale_6-2-1-1-1">nums.remove(3);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_6_opt_a">
                  <div class="para" id="qale_6-2-1-2-1">This would remove the value at index 3 which is 1.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qale_6_opt_b">
                  <div class="para" id="qale_6-2-2-1-1">nums.remove(0);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_6_opt_b">
                  <div class="para" id="qale_6-2-2-2-1">This would remove the value at index 0 which is 5.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qale_6_opt_c" data-correct="">
                  <div class="para" id="qale_6-2-3-1-1">nums.remove(1);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_6_opt_c">
                  <div class="para" id="qale_6-2-3-2-1">This would remove the value at index 1 which is 3.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qale_6_opt_d">
                  <div class="para" id="qale_6-2-4-1-1">nums.remove(2);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_6_opt_d">
                  <div class="para" id="qale_6-2-4-2-1">This would remove the value at index 2 which is 2.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.1.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qale_7" data-multipleanswers="false">
                <div class="para" id="qale_7-1-1">7-11-1-7: Which of the following is the correct way to add 2 between the 1 and 3 in the following list <code class="code-inline tex2jax_ignore">nums = [1, 3, 4]</code>?</div>
                <li data-component="answer" id="csawesome2_2_qale_7_opt_a">
                  <div class="para" id="qale_7-2-1-1-1">nums.add(2, 0);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_7_opt_a">
                  <div class="para" id="qale_7-2-1-2-1">This would add 0 at index 2.  Remember that the method is add(index, obj).</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qale_7_opt_b">
                  <div class="para" id="qale_7-2-2-1-1">nums.add(2, 1);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_7_opt_b">
                  <div class="para" id="qale_7-2-2-2-1">This would add 1 at index 2.  Remember that the method is add(index, obj)</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qale_7_opt_c">
                  <div class="para" id="qale_7-2-3-1-1">nums.add(0, 2);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_7_opt_c">
                  <div class="para" id="qale_7-2-3-2-1">This would add 2 at index 0 which would result in [2, 1, 3, 4]</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qale_7_opt_d" data-correct="">
                  <div class="para" id="qale_7-2-4-1-1">nums.add(1, 2);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_7_opt_d">
                  <div class="para" id="qale_7-2-4-2-1">This would add 2 at index 1 which would result in [1, 2, 3, 4]</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qale_7_opt_e">
                  <div class="para" id="qale_7-2-5-1-1">nums.add(2, 2);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qale_7_opt_e">
                  <div class="para" id="qale_7-2-5-2-1">This would add 2 at index 2 which would result in [1, 3, 2, 4]</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.1.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qale_9" data-multipleanswers="false"><div class="para" id="qale_9-1-1">7-11-1-8: What will print when the following code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">List&lt;Integer&gt; list1 = new ArrayList&lt;Integer&gt;();
list1.add(new Integer(1));
list1.add(new Integer(2));
list1.add(new Integer(3));
list1.remove(1);
System.out.println(list1);
</code></pre></div><li data-component="answer" id="csawesome2_2_qale_9_opt_a"><div class="para" id="qale_9-2-1-1-1">[2, 3]</div></li><li data-component="feedback" id="csawesome2_2_qale_9_opt_a"><div class="para" id="qale_9-2-1-2-1">This would be true if it was remove(0)</div></li><li data-component="answer" id="csawesome2_2_qale_9_opt_b"><div class="para" id="qale_9-2-2-1-1">[1, 2, 3]</div></li><li data-component="feedback" id="csawesome2_2_qale_9_opt_b"><div class="para" id="qale_9-2-2-2-1">The remove will remove a value from the list, so this can’t be correct.</div></li><li data-component="answer" id="csawesome2_2_qale_9_opt_c"><div class="para" id="qale_9-2-3-1-1">[1, 2]</div></li><li data-component="feedback" id="csawesome2_2_qale_9_opt_c"><div class="para" id="qale_9-2-3-2-1">This would be true if it was remove(2)</div></li><li data-component="answer" id="csawesome2_2_qale_9_opt_d" data-correct=""><div class="para" id="qale_9-2-4-1-1">[1, 3]</div></li><li data-component="feedback" id="csawesome2_2_qale_9_opt_d"><div class="para" id="qale_9-2-4-2-1">This removes the value at index 1 which is 2.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.1.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qale_10" data-multipleanswers="false"><div class="para" id="qale_10-1-1">7-11-1-9: What will print when the following code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">List&lt;String&gt; list1 = new ArrayList&lt;String&gt;();
list1.add("Anaya");
list1.add("Layla");
list1.add("Sharrie");
list1.set(0, "Destini");
list1.add(0, "Sarah");
System.out.println(list1);
</code></pre></div><li data-component="answer" id="csawesome2_2_qale_10_opt_a" data-correct=""><div class="para" id="qale_10-2-1-1-1">["Sarah", "Destini", "Layla", "Sharrie"]</div></li><li data-component="feedback" id="csawesome2_2_qale_10_opt_a"><div class="para" id="qale_10-2-1-2-1">The list is first ["Anaya", "Layla", "Sharrie"] and then ["Destini, "Layla", "Sharrie"] and finally ["Sarah", "Destini, "Layla", "Sharrie"]</div></li><li data-component="answer" id="csawesome2_2_qale_10_opt_b"><div class="para" id="qale_10-2-2-1-1">["Sarah", "Destini", "Anaya", "Layla", "Sharrie"]</div></li><li data-component="feedback" id="csawesome2_2_qale_10_opt_b"><div class="para" id="qale_10-2-2-2-1">The set replaces the value at index 0.</div></li><li data-component="answer" id="csawesome2_2_qale_10_opt_c"><div class="para" id="qale_10-2-3-1-1">["Sarah", "Layla", "Sharrie"]</div></li><li data-component="feedback" id="csawesome2_2_qale_10_opt_c"><div class="para" id="qale_10-2-3-2-1">This would be true if the second add was a set.</div></li><li data-component="answer" id="csawesome2_2_qale_10_opt_d"><div class="para" id="qale_10-2-4-1-1">["Destini", "Layla", "Sharrie", "Sarah"]</div></li><li data-component="feedback" id="csawesome2_2_qale_10_opt_d"><div class="para" id="qale_10-2-4-2-1">This would be true if the last add didn’t have an index of 0.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qalm_1" data-multipleanswers="false"><div class="para" id="qalm_1-1-1">7-11-2-1: What is printed as a result of executing the following code segment?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">List&lt;Integer&gt; list1 = new ArrayList&lt;Integer&gt;();
list1.add(new Integer(1));
list1.add(new Integer(2));
list1.add(new Integer(3));
list1.set(2, new Integer(4));
list1.add(2, new Integer(5));
list1.add(new Integer(6));
System.out.println(list1);
</code></pre></div><li data-component="answer" id="csawesome2_2_qalm_1_opt_a"><div class="para" id="qalm_1-2-1-1-1">[1, 2, 3, 4, 5]</div></li><li data-component="feedback" id="csawesome2_2_qalm_1_opt_a"><div class="para" id="qalm_1-2-1-2-1">The set replaces the 3 at index 2 with the 4 so this can’t be right.</div></li><li data-component="answer" id="csawesome2_2_qalm_1_opt_b"><div class="para" id="qalm_1-2-2-1-1">[1, 2, 4, 5, 6]</div></li><li data-component="feedback" id="csawesome2_2_qalm_1_opt_b"><div class="para" id="qalm_1-2-2-2-1">The add with an index of 2 and a value of 5 adds the 5 at index 2 not 3.  Remember that the first index is 0.</div></li><li data-component="answer" id="csawesome2_2_qalm_1_opt_c" data-correct=""><div class="para" id="qalm_1-2-3-1-1">[1, 2, 5, 4, 6]</div></li><li data-component="feedback" id="csawesome2_2_qalm_1_opt_c"><div class="para" id="qalm_1-2-3-2-1">The add method that takes just an object as a parameter adds that object to the end of the list.  The set replaces the value at that index with the new value.  The add with parameters of an index and an object puts the passed object at that index and moves any existing values by one index to the right (increments the index).</div></li><li data-component="answer" id="csawesome2_2_qalm_1_opt_d"><div class="para" id="qalm_1-2-4-1-1">[1, 5, 2, 4, 6]</div></li><li data-component="feedback" id="csawesome2_2_qalm_1_opt_d"><div class="para" id="qalm_1-2-4-2-1">The add with an index of 2 and a value of 5 adds the 5 at index 2 not 1.  Remember that the first index is 0.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.2.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qalm_2" data-multipleanswers="false"><div class="para" id="qalm_2-1-1">7-11-2-2: Given the following code and assume that <code class="code-inline tex2jax_ignore">nums</code> initially contains [0, 0, 4, 2, 5, 0, 3], what will <code class="code-inline tex2jax_ignore">nums</code> contain as a result of executing numQuest?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private List&lt;Integer&gt; nums;

// precondition: nums.size() &gt; 0;
// nums contains Integer objects
public void numQuest()
{
  int k = 0;
  Integer zero = new Integer(0);
  while (k &lt; nums.size())
  {
   if (nums.get(k).equals(zero))
     nums.remove(k);
   else
      k++;
  }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qalm_2_opt_a"><div class="para" id="qalm_2-2-1-1-1">[0, 4, 2, 5, 3]</div></li><li data-component="feedback" id="csawesome2_2_qalm_2_opt_a"><div class="para" id="qalm_2-2-1-2-1">This code will loop through the array list and if the current value at the current index (k) is 0 it will remove it.  When you remove a value from an array list it moves all values to the right of that one to the the left. It only increments the index when it doesn’t find a zero so it work work correctly.</div></li><li data-component="answer" id="csawesome2_2_qalm_2_opt_b"><div class="para" id="qalm_2-2-2-1-1">[3, 5, 2, 4, 0, 0, 0]</div></li><li data-component="feedback" id="csawesome2_2_qalm_2_opt_b"><div class="para" id="qalm_2-2-2-2-1">This shows all zeros at the end and this code removes 0’s so this can’t be right.</div></li><li data-component="answer" id="csawesome2_2_qalm_2_opt_c"><div class="para" id="qalm_2-2-3-1-1">[0, 0, 0, 4, 2, 5, 3]</div></li><li data-component="feedback" id="csawesome2_2_qalm_2_opt_c"><div class="para" id="qalm_2-2-3-2-1">This shows all zeros at the beginning and this code removes zeros so this can’t be right.</div></li><li data-component="answer" id="csawesome2_2_qalm_2_opt_d" data-correct=""><div class="para" id="qalm_2-2-4-1-1">[4, 2, 5, 3]</div></li><li data-component="feedback" id="csawesome2_2_qalm_2_opt_d"><div class="para" id="qalm_2-2-4-2-1">This shows all zeros removed.  Since k is only incremented if a value wasn’t removed this will work correctly.</div></li><li data-component="answer" id="csawesome2_2_qalm_2_opt_e"><div class="para" id="qalm_2-2-5-1-1">[0, 0, 4, 2, 5, 0, 3]</div></li><li data-component="feedback" id="csawesome2_2_qalm_2_opt_e"><div class="para" id="qalm_2-2-5-2-1">This shows the original values, but this code does remove some zeros so this can’t be right.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.2.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qalm_3" data-multipleanswers="false"><div class="para" id="qalm_3-1-1">7-11-2-3: Which of the following best describes the behavior of process1 and process2 (shown below)?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static List&lt;Integer&gt; process1(int n)
{
   List&lt;Integer&gt; someList = new ArrayList&lt;Integer&gt;();
   for (int k = 0; k &lt; n; k++)
      someList.add(k);
   return someList;
}

public static List&lt;Integer&gt; process2(int n)
{
   List&lt;Integer&gt; someList = new ArrayList&lt;Integer&gt;();
   for (int k = 0; k &lt; n; k++)
      someList.add(k, k);
   return someList;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qalm_3_opt_a"><div class="para" id="qalm_3-2-1-1-1">Both methods produce the same result, and process1 is faster than process2.</div></li><li data-component="feedback" id="csawesome2_2_qalm_3_opt_a"><div class="para" id="qalm_3-2-1-2-1">In this case they do the same thing.  The only difference would be if there were values in the list in process2.</div></li><li data-component="answer" id="csawesome2_2_qalm_3_opt_b"><div class="para" id="qalm_3-2-2-1-1">The two methods produce different results and take the same amount of time.</div></li><li data-component="feedback" id="csawesome2_2_qalm_3_opt_b"><div class="para" id="qalm_3-2-2-2-1">These produce the same result on an empty list when you add to the end.</div></li><li data-component="answer" id="csawesome2_2_qalm_3_opt_c"><div class="para" id="qalm_3-2-3-1-1">The two methods produce different results, and process1 is faster than process2.</div></li><li data-component="feedback" id="csawesome2_2_qalm_3_opt_c"><div class="para" id="qalm_3-2-3-2-1">These produce the same result on an empty list when you add to the end.</div></li><li data-component="answer" id="csawesome2_2_qalm_3_opt_d"><div class="para" id="qalm_3-2-4-1-1">The two methods produce different results, and process2 is faster than process1.</div></li><li data-component="feedback" id="csawesome2_2_qalm_3_opt_d"><div class="para" id="qalm_3-2-4-2-1">These produce the same result on an empty list when you add to the end.</div></li><li data-component="answer" id="csawesome2_2_qalm_3_opt_e" data-correct=""><div class="para" id="qalm_3-2-5-1-1">Both methods produce the same result and take the same amount of time.</div></li><li data-component="feedback" id="csawesome2_2_qalm_3_opt_e"><div class="para" id="qalm_3-2-5-2-1">The method process1 adds to the end of the list each time through the loop.  The method process2 also adds to the end of the list each time through the loop.  The only difference would be if there were values in the list in process2.  Any existing values would be moved to the right.  But, there are no existing values in the list at that index or beyond.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.2.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qalm_4" data-multipleanswers="false"><div class="para" id="qalm_4-1-1">7-11-2-4: What is printed as a result of executing the following code segment?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">List&lt;Integer&gt; aList = new ArrayList&lt;Integer&gt;();
aList.add(new Integer(1));
aList.add(new Integer(2));
aList.add(1, new Integer(5));
aList.set(1, new Integer(4));
aList.add(new Integer(6));
aList.add(new Integer(3));
System.out.println(aList);
</code></pre></div><li data-component="answer" id="csawesome2_2_qalm_4_opt_a"><div class="para" id="qalm_4-2-1-1-1">[1, 2, 5, 4, 6, 3]</div></li><li data-component="feedback" id="csawesome2_2_qalm_4_opt_a"><div class="para" id="qalm_4-2-1-2-1">The set replaces the 3 with the 4 so this can’t be right.</div></li><li data-component="answer" id="csawesome2_2_qalm_4_opt_b"><div class="para" id="qalm_4-2-2-1-1">[6, 5, 4, 3, 2, 1]</div></li><li data-component="feedback" id="csawesome2_2_qalm_4_opt_b"><div class="para" id="qalm_4-2-2-2-1">The add with an index of 2 and a value of 5 adds the 5 at index 2 not 3.  Remember that the first index is 0.</div></li><li data-component="answer" id="csawesome2_2_qalm_4_opt_c"><div class="para" id="qalm_4-2-3-1-1">[1, 2, 3, 4, 5, 6]</div></li><li data-component="feedback" id="csawesome2_2_qalm_4_opt_c"><div class="para" id="qalm_4-2-3-2-1">The add method that takes just a value as a parameter adds that value to the end of the list.  The set replaces the value at that index with the new value.  The add with parameters of an index and a value puts the passed value at that index and moves any existing values by one index to the right (increments the index).</div></li><li data-component="answer" id="csawesome2_2_qalm_4_opt_d" data-correct=""><div class="para" id="qalm_4-2-4-1-1">[1, 4, 2, 6, 3]</div></li><li data-component="feedback" id="csawesome2_2_qalm_4_opt_d"><div class="para" id="qalm_4-2-4-2-1">The add with an index of 2 and a value of 5 adds the 5 at index 2 not 1.  Remember that the first index is 0.</div></li><li data-component="answer" id="csawesome2_2_qalm_4_opt_e"><div class="para" id="qalm_4-2-5-1-1">[1, 2, 4, 6, 3]</div></li><li data-component="feedback" id="csawesome2_2_qalm_4_opt_e"><div class="para" id="qalm_4-2-5-2-1">When you declare and create a collection class you can specify the type of the items in it.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.2.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qalm_5" data-multipleanswers="false"><div class="para" id="qalm_5-1-1">7-11-2-5: What is printed as a result of executing the following code segment?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">List&lt;Integer&gt; aList = new ArrayList&lt;Integer&gt;();
aList.add(new Integer(1));
aList.add(new Integer(2));
aList.remove(1);
aList.add(1, new Integer(3));
aList.set(1, new Integer(4));
aList.add(new Integer(5));
System.out.println(list);
</code></pre></div><li data-component="answer" id="csawesome2_2_qalm_5_opt_a"><div class="para" id="qalm_5-2-1-1-1">[1, 2, 3, 4, 5]</div></li><li data-component="feedback" id="csawesome2_2_qalm_5_opt_a"><div class="para" id="qalm_5-2-1-2-1">This would be true if the code just added each integer at the end of the list.  But, that is not what it does.</div></li><li data-component="answer" id="csawesome2_2_qalm_5_opt_b" data-correct=""><div class="para" id="qalm_5-2-2-1-1">[1, 4, 5]</div></li><li data-component="feedback" id="csawesome2_2_qalm_5_opt_b"><div class="para" id="qalm_5-2-2-2-1">The list is [1], then [1, 2], then [1], then [1, 3], then [1, 4], then [1, 4, 5].</div></li><li data-component="answer" id="csawesome2_2_qalm_5_opt_c"><div class="para" id="qalm_5-2-3-1-1">[1, 4, 3, 5]</div></li><li data-component="feedback" id="csawesome2_2_qalm_5_opt_c"><div class="para" id="qalm_5-2-3-2-1">This would be true if the set was an add.</div></li><li data-component="answer" id="csawesome2_2_qalm_5_opt_d"><div class="para" id="qalm_5-2-4-1-1">[2, 4, 5]</div></li><li data-component="feedback" id="csawesome2_2_qalm_5_opt_d"><div class="para" id="qalm_5-2-4-2-1">This would be true it it was remove(0).  Remember that it removes the object at the given index.</div></li><li data-component="answer" id="csawesome2_2_qalm_5_opt_e"><div class="para" id="qalm_5-2-5-1-1">[2, 4, 3, 5]</div></li><li data-component="feedback" id="csawesome2_2_qalm_5_opt_e"><div class="para" id="qalm_5-2-5-2-1">This would be true if the set was an add and if it was remove(0).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.2.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qalm_6" data-multipleanswers="false"><div class="para" id="qalm_6-1-1">7-11-2-6: What is printed as a result of executing the following code segment?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">List&lt;String&gt; list1 = new ArrayList&lt;String&gt;();
list1.add("a");
list1.add("b");
list1.add(0,"c");
list1.add(1, "d");
list1.set(2, "e");
list1.add("f");
System.out.println(list1);

What is printed as a result of executing the following code segment?
</code></pre></div><li data-component="answer" id="csawesome2_2_qalm_6_opt_a"><div class="para" id="qalm_6-2-1-1-1">[c, d, e, b]</div></li><li data-component="feedback" id="csawesome2_2_qalm_6_opt_a"><div class="para" id="qalm_6-2-1-2-1">What happened to the f?</div></li><li data-component="answer" id="csawesome2_2_qalm_6_opt_b" data-correct=""><div class="para" id="qalm_6-2-2-1-1">[c, d, e, b, f]</div></li><li data-component="feedback" id="csawesome2_2_qalm_6_opt_b"><div class="para" id="qalm_6-2-2-2-1">This list is [a], then [a, b], then [c, a, b], then [c, d, a, b], then [c, d, e, b], then [c, d, e, b, f]</div></li><li data-component="answer" id="csawesome2_2_qalm_6_opt_c"><div class="para" id="qalm_6-2-3-1-1">[c, a, e, b, f]</div></li><li data-component="feedback" id="csawesome2_2_qalm_6_opt_c"><div class="para" id="qalm_6-2-3-2-1">The a is pushed to position 2 and then replaced with the e.</div></li><li data-component="answer" id="csawesome2_2_qalm_6_opt_d"><div class="para" id="qalm_6-2-4-1-1">[c, d, e, a, b, f]</div></li><li data-component="feedback" id="csawesome2_2_qalm_6_opt_d"><div class="para" id="qalm_6-2-4-2-1">This would be true if it was list1.add(2,"e")</div></li><li data-component="answer" id="csawesome2_2_qalm_6_opt_e"><div class="para" id="qalm_6-2-5-1-1">[c, a, e, d, b, f]</div></li><li data-component="feedback" id="csawesome2_2_qalm_6_opt_e"><div class="para" id="qalm_6-2-5-2-1">Remember that the set will replace the value at index 2.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.2.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qalm_7" data-multipleanswers="false">
                <div class="para" id="qalm_7-1-1">7-11-2-7: Given the list <code class="code-inline tex2jax_ignore">nums = [4, 2, 3, 4, 5]</code> what is the result after executing <code class="code-inline tex2jax_ignore">nums.remove(4)</code>?</div>
                <li data-component="answer" id="csawesome2_2_qalm_7_opt_a">
                  <div class="para" id="qalm_7-2-1-1-1">[2, 3, 4, 5]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qalm_7_opt_a">
                  <div class="para" id="qalm_7-2-1-2-1">This would be true if it removed the first 4 but it removes the value at index 4.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qalm_7_opt_b">
                  <div class="para" id="qalm_7-2-2-1-1">[2, 3, 5]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qalm_7_opt_b">
                  <div class="para" id="qalm_7-2-2-2-1">This would be true if it removed all the 4 values, but it removes the value at index 4.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qalm_7_opt_c">
                  <div class="para" id="qalm_7-2-3-1-1">[4, 2, 3, 5]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qalm_7_opt_c">
                  <div class="para" id="qalm_7-2-3-2-1">This would be true if it removed the value at index 3.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qalm_7_opt_d" data-correct="">
                  <div class="para" id="qalm_7-2-4-1-1">[4, 2, 3, 4]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qalm_7_opt_d">
                  <div class="para" id="qalm_7-2-4-2-1">This removes the value at index 4 which is 5.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.2.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qalm_8" data-multipleanswers="false"><div class="para" id="qalm_8-1-1">7-11-2-8: What is printed as a result of executing the following code segment?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">List&lt;String&gt; list1 = new ArrayList&lt;String&gt;();
list1.add("a");
list1.add("b");
list1.add(0,"c");
list1.set(1, "d");
list1.set(0, "e");
list1.add("b");
System.out.println(list1);

What is printed as a result of executing the following code segment?
</code></pre></div><li data-component="answer" id="csawesome2_2_qalm_8_opt_a"><div class="para" id="qalm_8-2-1-1-1">[e, d, b]</div></li><li data-component="feedback" id="csawesome2_2_qalm_8_opt_a"><div class="para" id="qalm_8-2-1-2-1">This would be true if you couldn’t add a duplicate object to a list, but you can.</div></li><li data-component="answer" id="csawesome2_2_qalm_8_opt_b" data-correct=""><div class="para" id="qalm_8-2-2-1-1">[e, d, b, b]</div></li><li data-component="feedback" id="csawesome2_2_qalm_8_opt_b"><div class="para" id="qalm_8-2-2-2-1">The list is [a], [a, b], [c, a, b], [c, d, b], [e, d, b], and then [e, d, b, b]</div></li><li data-component="answer" id="csawesome2_2_qalm_8_opt_c"><div class="para" id="qalm_8-2-3-1-1">[e, d, a, b, b]</div></li><li data-component="feedback" id="csawesome2_2_qalm_8_opt_c"><div class="para" id="qalm_8-2-3-2-1">This would be true it list1.set(1,"d"); was list1.add(1,"d");</div></li><li data-component="answer" id="csawesome2_2_qalm_8_opt_d"><div class="para" id="qalm_8-2-4-1-1">[e, d, a, b]</div></li><li data-component="feedback" id="csawesome2_2_qalm_8_opt_d"><div class="para" id="qalm_8-2-4-2-1">This would be true it list1.set(1,"d"); was list1.add(1,"d"); and if lists didn’t allow duplicate objects.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.2.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qalm_9" data-multipleanswers="false"><div class="para" id="qalm_9-1-1">7-11-2-9: Assume that <code class="code-inline tex2jax_ignore">numList</code> has been initialized with the following Integer objects: [0, 1, 2, 3, 4].  What is the value of <code class="code-inline tex2jax_ignore">numList</code> after <code class="code-inline tex2jax_ignore">mystery(5)</code> executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private List&lt;Integer&gt; numList;
public void mystery(int n)
{
    for (int i = 0; i &lt; n; i++)
    {
        Integer obj = numList.remove(0);
        numList.add(obj);
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qalm_9_opt_a"><div class="para" id="qalm_9-2-1-1-1">[4, 3, 2, 1, 0]</div></li><li data-component="feedback" id="csawesome2_2_qalm_9_opt_a"><div class="para" id="qalm_9-2-1-2-1">This would be true if it was numList.add(numList.size() - i, obj)</div></li><li data-component="answer" id="csawesome2_2_qalm_9_opt_b"><div class="para" id="qalm_9-2-2-1-1">[1, 2, 3, 4, 0]</div></li><li data-component="feedback" id="csawesome2_2_qalm_9_opt_b"><div class="para" id="qalm_9-2-2-2-1">This would be true if it was mystery(1)</div></li><li data-component="answer" id="csawesome2_2_qalm_9_opt_c" data-correct=""><div class="para" id="qalm_9-2-3-1-1">[0, 1, 2, 3, 4]</div></li><li data-component="feedback" id="csawesome2_2_qalm_9_opt_c"><div class="para" id="qalm_9-2-3-2-1">Each value is removed one at a time and added to the end of the list which results in the same list.</div></li><li data-component="answer" id="csawesome2_2_qalm_9_opt_d"><div class="para" id="qalm_9-2-4-1-1">[2, 3, 4, 0, 1]</div></li><li data-component="feedback" id="csawesome2_2_qalm_9_opt_d"><div class="para" id="qalm_9-2-4-2-1">This would be true if it was mystery(2)</div></li><li data-component="answer" id="csawesome2_2_qalm_9_opt_e"><div class="para" id="qalm_9-2-5-1-1">[4, 0, 1, 2, 3]</div></li><li data-component="feedback" id="csawesome2_2_qalm_9_opt_e"><div class="para" id="qalm_9-2-5-2-1">This would be true if it was mystery(4)</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.2.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qalm_10" data-multipleanswers="false"><div class="para" id="qalm_10-1-1">7-11-2-10: Assume that <code class="code-inline tex2jax_ignore">numList</code> has been initialized with the following Integer objects: [5, 7, 8, 12].  Which of the following shows the values in <code class="code-inline tex2jax_ignore">numList</code> after a call to <code class="code-inline tex2jax_ignore">mystery(11)</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private List&lt;Integer&gt; numList;
public void mystery(int value)
{
    int i = 0;
    while (i &lt; numList.size() &amp;&amp; numList.get(i) &lt; value)
    {
        i++;
    }
    numList.add(i, value);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qalm_10_opt_a"><div class="para" id="qalm_10-2-1-1-1">[5, 7, 8, 12]</div></li><li data-component="feedback" id="csawesome2_2_qalm_10_opt_a"><div class="para" id="qalm_10-2-1-2-1">What about the 11?</div></li><li data-component="answer" id="csawesome2_2_qalm_10_opt_b" data-correct=""><div class="para" id="qalm_10-2-2-1-1">[5, 7, 8, 11, 12]</div></li><li data-component="feedback" id="csawesome2_2_qalm_10_opt_b"><div class="para" id="qalm_10-2-2-2-1">This will add the value at the correct location in a list in ascending order.</div></li><li data-component="answer" id="csawesome2_2_qalm_10_opt_c"><div class="para" id="qalm_10-2-3-1-1">[11, 5, 7, 8, 12]</div></li><li data-component="feedback" id="csawesome2_2_qalm_10_opt_c"><div class="para" id="qalm_10-2-3-2-1">This would be true if it was numList.add(0, value)</div></li><li data-component="answer" id="csawesome2_2_qalm_10_opt_d"><div class="para" id="qalm_10-2-4-1-1">[5, 7, 8, 12, 11]</div></li><li data-component="feedback" id="csawesome2_2_qalm_10_opt_d"><div class="para" id="qalm_10-2-4-2-1">This would be true if the while loop was from 0 to one less than the size of the list.</div></li><li data-component="answer" id="csawesome2_2_qalm_10_opt_e"><div class="para" id="qalm_10-2-5-1-1">[5, 7, 11, 8, 12]</div></li><li data-component="feedback" id="csawesome2_2_qalm_10_opt_e"><div class="para" id="qalm_10-2-5-2-1">This would be true if it was numList.add(i-1, value)</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.3.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qalh_1" data-multipleanswers="false"><div class="para" id="qalh_1-1-1">7-11-3-1: What is in the list <code class="code-inline tex2jax_ignore">nums</code> if it initially contained {5, 3, 1} and the following code is executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">nums.add(6);
nums.add(0,4);
nums.remove(1);
</code></pre></div><li data-component="answer" id="csawesome2_2_qalh_1_opt_a"><div class="para" id="qalh_1-2-1-1-1">[5, 3, 1, 6]</div></li><li data-component="feedback" id="csawesome2_2_qalh_1_opt_a"><div class="para" id="qalh_1-2-1-2-1">The remove(1) removes the item at index 1 which will be 5 after the 4 is added at index 0.</div></li><li data-component="answer" id="csawesome2_2_qalh_1_opt_b" data-correct=""><div class="para" id="qalh_1-2-2-1-1">[4, 3, 1, 6]</div></li><li data-component="feedback" id="csawesome2_2_qalh_1_opt_b"><div class="para" id="qalh_1-2-2-2-1">The add(6) adds the 6 at the end of the list. The add(0,4) will add 4 at index 0. The remove(1) removes the 5 at index 1.</div></li><li data-component="answer" id="csawesome2_2_qalh_1_opt_c"><div class="para" id="qalh_1-2-3-1-1">[4, 3, 6]</div></li><li data-component="feedback" id="csawesome2_2_qalh_1_opt_c"><div class="para" id="qalh_1-2-3-2-1">The remove(1) doesn’t remove the 1, it removes the value at index 1.</div></li><li data-component="answer" id="csawesome2_2_qalh_1_opt_d"><div class="para" id="qalh_1-2-4-1-1">[5, 3, 6]</div></li><li data-component="feedback" id="csawesome2_2_qalh_1_opt_d"><div class="para" id="qalh_1-2-4-2-1">The 5 will be removed with the remove(1).</div></li><li data-component="answer" id="csawesome2_2_qalh_1_opt_e"><div class="para" id="qalh_1-2-5-1-1">[4, 5, 3, 6]</div></li><li data-component="feedback" id="csawesome2_2_qalh_1_opt_e"><div class="para" id="qalh_1-2-5-2-1">This would be true if remove(1) removed the item with that value, but it removes the item at that index.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.3.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qalh_2" data-multipleanswers="false"><div class="para" id="qalh_2-1-1">7-11-3-2: Assume that nums has been created as an ArrayList object and initially contains the following Integer values: [0, 0, 4, 2, 5, 0, 3, 0]. What will nums contain as a result of executing the following method numQuest?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private List&lt;Integer&gt; nums;

//precondition: nums.size() &gt; 0
//nums contains Integer objects
public void numQuest() {
   int k = 0;
   Integer zero = new Integer(0);
   while (k &lt; nums.size())
   {
      if (nums.get(k).equals(zero))
         nums.remove(k);
      k++;
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qalh_2_opt_a"><div class="para" id="qalh_2-2-1-1-1">[0, 0, 4, 2, 5, 0, 3, 0]</div></li><li data-component="feedback" id="csawesome2_2_qalh_2_opt_a"><div class="para" id="qalh_2-2-1-2-1">This shows the original values but this code does remove some zeros so this can’t be right.</div></li><li data-component="answer" id="csawesome2_2_qalh_2_opt_b"><div class="para" id="qalh_2-2-2-1-1">[3, 5, 2, 4, 0, 0, 0, 0]</div></li><li data-component="feedback" id="csawesome2_2_qalh_2_opt_b"><div class="para" id="qalh_2-2-2-2-1">This shows all zeros at the end, but this code removes 0’s so this can’t be right.</div></li><li data-component="answer" id="csawesome2_2_qalh_2_opt_c"><div class="para" id="qalh_2-2-3-1-1">[0, 0, 0, 0, 4, 2, 5, 3]</div></li><li data-component="feedback" id="csawesome2_2_qalh_2_opt_c"><div class="para" id="qalh_2-2-3-2-1">This shows all zeros at the beginning, but this code removes zeros so this can’t be right.</div></li><li data-component="answer" id="csawesome2_2_qalh_2_opt_d"><div class="para" id="qalh_2-2-4-1-1">[4, 2, 5, 3]</div></li><li data-component="feedback" id="csawesome2_2_qalh_2_opt_d"><div class="para" id="qalh_2-2-4-2-1">This shows all zeros removed. This would be correct if k was only incremented if a value wasn’t removed.</div></li><li data-component="answer" id="csawesome2_2_qalh_2_opt_e" data-correct=""><div class="para" id="qalh_2-2-5-1-1">[0, 4, 2, 5, 3]</div></li><li data-component="feedback" id="csawesome2_2_qalh_2_opt_e"><div class="para" id="qalh_2-2-5-2-1">This code will loop through the array list and if the current value at the current index (k) is 0, it will remove it. When you remove a value from an array list, it moves all values to the right of that down one. So the first 0 will be deleted but the second one will not since k is incremented even if you remove something. You should only increment k if you didn’t remove something and then you would remove all 0’s from the list.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.4.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsearchse_1" data-multipleanswers="false"><div class="para" id="qsearchse_1-1-1">7-11-4-1: What would the following code return from mystery([90, -30, 50], 50)?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java"> public static int mystery(int[] elements, int target)
 {
   for (int j = 0; j &lt; elements.length; j++)
   {
      if (elements[j] == target)
      {
         return j;
      }
  }
  return -1;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qsearchse_1_opt_a"><div class="para" id="qsearchse_1-2-1-1-1">-1</div></li><li data-component="feedback" id="csawesome2_2_qsearchse_1_opt_a"><div class="para" id="qsearchse_1-2-1-2-1">This value is returned if the target is not in the list since this is a sequential search.</div></li><li data-component="answer" id="csawesome2_2_qsearchse_1_opt_b"><div class="para" id="qsearchse_1-2-2-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_qsearchse_1_opt_b"><div class="para" id="qsearchse_1-2-2-2-1">This would be true if the target was 90 since this is a sequential search.</div></li><li data-component="answer" id="csawesome2_2_qsearchse_1_opt_c"><div class="para" id="qsearchse_1-2-3-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qsearchse_1_opt_c"><div class="para" id="qsearchse_1-2-3-2-1">This would be true if the target was -30 since this is a sequential search.</div></li><li data-component="answer" id="csawesome2_2_qsearchse_1_opt_d" data-correct=""><div class="para" id="qsearchse_1-2-4-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_qsearchse_1_opt_d"><div class="para" id="qsearchse_1-2-4-2-1">This is a sequential search that returns the index where the target appears in the elements list</div></li><li data-component="answer" id="csawesome2_2_qsearchse_1_opt_e"><div class="para" id="qsearchse_1-2-5-1-1">50</div></li><li data-component="feedback" id="csawesome2_2_qsearchse_1_opt_e"><div class="para" id="qsearchse_1-2-5-2-1">A sequential search returns the index, not the value.  What is the index of the 50?</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.4.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsearchse_2" data-multipleanswers="false"><div class="para" id="qsearchse_2-1-1">7-11-4-2: What would the following code return from mystery([90, -30, 50], -20)?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java"> public static int mystery(int[] elements, int target)
 {
   for (int j = 0; j &lt; elements.length; j++)
   {
      if (elements[j] == target)
      {
         return j;
      }
  }
  return -1;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qsearchse_2_opt_a" data-correct=""><div class="para" id="qsearchse_2-2-1-1-1">-1</div></li><li data-component="feedback" id="csawesome2_2_qsearchse_2_opt_a"><div class="para" id="qsearchse_2-2-1-2-1">A sequential search returns -1 if the target value is not found in the list.</div></li><li data-component="answer" id="csawesome2_2_qsearchse_2_opt_b"><div class="para" id="qsearchse_2-2-2-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_qsearchse_2_opt_b"><div class="para" id="qsearchse_2-2-2-2-1">This would be true if the target was 90 since this is a sequential search.</div></li><li data-component="answer" id="csawesome2_2_qsearchse_2_opt_c"><div class="para" id="qsearchse_2-2-3-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qsearchse_2_opt_c"><div class="para" id="qsearchse_2-2-3-2-1">This would be true if the target was -30 since this is a sequential search.</div></li><li data-component="answer" id="csawesome2_2_qsearchse_2_opt_d"><div class="para" id="qsearchse_2-2-4-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_qsearchse_2_opt_d"><div class="para" id="qsearchse_2-2-4-2-1">This would be true if the target was</div></li><li data-component="answer" id="csawesome2_2_qsearchse_2_opt_e"><div class="para" id="qsearchse_2-2-5-1-1">-20</div></li><li data-component="feedback" id="csawesome2_2_qsearchse_2_opt_e"><div class="para" id="qsearchse_2-2-5-2-1">A sequential search returns negative one when the value isn’t found in the list.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.4.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsearchse_3" data-multipleanswers="false"><div class="para" id="qsearchse_3-1-1">7-11-4-3: Consider the <code class="code-inline tex2jax_ignore">binarySearch</code> method below.  How many times would the while loop execute if you first do int[] arr = {2, 10, 23, 31, 55, 86} and then call  binarySearch(arr,2)?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static int binarySearch(int[] elements, int target) {
   int left = 0;
   int right = elements.length - 1;
   while (left &lt;= right)
   {
      int middle = (left + right) / 2;
      if (target &lt; elements[middle])
      {
         right = middle - 1;
      }
      else if (target &gt; elements[middle])
      {
         left = middle + 1;
      }
      else {
         return middle;
      }
    }
    return -1;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qsearchse_3_opt_a"><div class="para" id="qsearchse_3-2-1-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qsearchse_3_opt_a"><div class="para" id="qsearchse_3-2-1-2-1">This would be true if we were looking for 23.</div></li><li data-component="answer" id="csawesome2_2_qsearchse_3_opt_b" data-correct=""><div class="para" id="qsearchse_3-2-2-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_qsearchse_3_opt_b"><div class="para" id="qsearchse_3-2-2-2-1">It first compares 23 at index 2 (5 / 2 is 2) to 2.  The second time it compares the 2 at index 0 (1 / 2 = 0) to 2 and returns 0.</div></li><li data-component="answer" id="csawesome2_2_qsearchse_3_opt_c"><div class="para" id="qsearchse_3-2-3-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_qsearchse_3_opt_c"><div class="para" id="qsearchse_3-2-3-2-1">This would be true if we were looking for 10.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.4.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsearchse_4" data-multipleanswers="false">
                <div class="para" id="qsearchse_4-1-1">7-11-4-4: Which sort contains a recursive call?</div>
                <li data-component="answer" id="csawesome2_2_qsearchse_4_opt_a">
                  <div class="para" id="qsearchse_4-2-1-1-1">selection sort</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qsearchse_4_opt_a">
                  <div class="para" id="qsearchse_4-2-1-2-1">A selection sort has nested for loops.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qsearchse_4_opt_b">
                  <div class="para" id="qsearchse_4-2-2-1-1">insertion sort</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qsearchse_4_opt_b">
                  <div class="para" id="qsearchse_4-2-2-2-1">An insertion sort has a while loop inside a for loop.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qsearchse_4_opt_c" data-correct="">
                  <div class="para" id="qsearchse_4-2-3-1-1">merge sort</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qsearchse_4_opt_c">
                  <div class="para" id="qsearchse_4-2-3-2-1">A merge sort has a recursive call to mergeSortHelper in mergeSortHelper.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.4.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsearchse_5" data-multipleanswers="false">
                <div class="para" id="qsearchse_5-1-1">7-11-4-5: Under what condition will an ascending insertion sort execute the slowest?</div>
                <li data-component="answer" id="csawesome2_2_qsearchse_5_opt_a">
                  <div class="para" id="qsearchse_5-2-1-1-1">If the data is already sorted in ascending order</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qsearchse_5_opt_a">
                  <div class="para" id="qsearchse_5-2-1-2-1">If the data is already sorted in the correct order you don’t need to move any values.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qsearchse_5_opt_b" data-correct="">
                  <div class="para" id="qsearchse_5-2-2-1-1">If the data is already sorted in descending order</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qsearchse_5_opt_b">
                  <div class="para" id="qsearchse_5-2-2-2-1">All values will have to be moved multiple times since the data was sorted into descending order.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qsearchse_5_opt_c">
                  <div class="para" id="qsearchse_5-2-3-1-1">It will always take the same amount of time to execute</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qsearchse_5_opt_c">
                  <div class="para" id="qsearchse_5-2-3-2-1">This would be true if it was a selection sort.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.5.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsearchsm_1" data-multipleanswers="false">
                <div class="para" id="qsearchsm_1-1-1">7-11-5-1: Which of the following correctly shows the iterations of an ascending (from left to right) insertion sort on an array with the following elements: {7,3,8,5,2}?</div>
                <li data-component="answer" id="csawesome2_2_qsearchsm_1_opt_a" data-correct="">
                  <div class="para" id="qsearchsm_1-2-1-1-1">{3,7,8,5,2}, {3,7,8,5,2}, {3,5,7,8,2}, {2,3,5,7,8}</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qsearchsm_1_opt_a">
                  <div class="para" id="qsearchsm_1-2-1-2-1">The insertion sort starts at index 1 and inserts each value into the sorted list to the left by moving any larger values right.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qsearchsm_1_opt_b">
                  <div class="para" id="qsearchsm_1-2-2-1-1">{2,3,8,5,7}, {2,3,8,5,7}, {2,3,5,8,7}, {2,3,5,7,8}</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qsearchsm_1_opt_b">
                  <div class="para" id="qsearchsm_1-2-2-2-1">This would be true if it was a selection sort.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qsearchsm_1_opt_c">
                  <div class="para" id="qsearchsm_1-2-3-1-1">{3,7,8,5,2}, {3,5,7,8,2}, {2,3,5,7,8}</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qsearchsm_1_opt_c">
                  <div class="para" id="qsearchsm_1-2-3-2-1">This looks like an insertion sort, but it is missing one step.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qsearchsm_1_opt_d">
                  <div class="para" id="qsearchsm_1-2-4-1-1">{2,3,8,5,7}, {2,3,5,8,7}, {2,3,5,7,8}</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qsearchsm_1_opt_d">
                  <div class="para" id="qsearchsm_1-2-4-2-1">This looks like a selection sort, but it is missing one step.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qsearchsm_1_opt_e">
                  <div class="para" id="qsearchsm_1-2-5-1-1">{2,7,3,8,5}, {2,3,7,8,5}, {2,3,5,7,8}</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qsearchsm_1_opt_e">
                  <div class="para" id="qsearchsm_1-2-5-2-1">This is more like a selection sort, but not a correct one.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.5.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsearchsm_2" data-multipleanswers="false"><div class="para" id="qsearchsm_2-1-1">7-11-5-2: What is printed when the following main method is executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Searcher
{
    private int[] arr = {1, 3, 5, 8, 9};

    public int mystery(int low, int high, int num)
    {
        int mid = (low + high) / 2;
        if (low &gt; high)
        {
            return -1;
        }
        else if (arr[mid] &lt; num)
        {
            return mystery(mid + 1, high, num);
        }
        else if (arr[mid] &gt; num)
        {
            return mystery(low, mid - 1, num);
        } else return mid;
    }

    public static void main(String[] args)
    {
        Searcher s = new Searcher();
        System.out.println(s.mystery(0, 4, 3));
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qsearchsm_2_opt_a"><div class="para" id="qsearchsm_2-2-1-1-1">-1</div></li><li data-component="feedback" id="csawesome2_2_qsearchsm_2_opt_a"><div class="para" id="qsearchsm_2-2-1-2-1">This would be true if the third value was something that wasn’t in the array.</div></li><li data-component="answer" id="csawesome2_2_qsearchsm_2_opt_b"><div class="para" id="qsearchsm_2-2-2-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_qsearchsm_2_opt_b"><div class="para" id="qsearchsm_2-2-2-2-1">This would be true if the third value was 1</div></li><li data-component="answer" id="csawesome2_2_qsearchsm_2_opt_c" data-correct=""><div class="para" id="qsearchsm_2-2-3-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qsearchsm_2_opt_c"><div class="para" id="qsearchsm_2-2-3-2-1">This is a binary search and it returns the index of the value 3, which is 1.</div></li><li data-component="answer" id="csawesome2_2_qsearchsm_2_opt_d"><div class="para" id="qsearchsm_2-2-4-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_qsearchsm_2_opt_d"><div class="para" id="qsearchsm_2-2-4-2-1">This would be true if the third value was 5.</div></li><li data-component="answer" id="csawesome2_2_qsearchsm_2_opt_e"><div class="para" id="qsearchsm_2-2-5-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_qsearchsm_2_opt_e"><div class="para" id="qsearchsm_2-2-5-2-1">This would be true if the third value was 8.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.5.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsearchsm_3" data-multipleanswers="false">
                <div class="para" id="qsearchsm_3-1-1">7-11-5-3: Which of the following correctly shows the iterations of an ascending (from left to right) selection sort on an array with the following elements: {10, 6, 3, 2, 8}?</div>
                <li data-component="answer" id="csawesome2_2_qsearchsm_3_opt_a">
                  <div class="para" id="qsearchsm_3-2-1-1-1">{6,10,3,2,8}, {3,6,10,2,8}, {2,3,6,10,8}, {2,3,6,8,10}</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qsearchsm_3_opt_a">
                  <div class="para" id="qsearchsm_3-2-1-2-1">This would be true if it was an insertion sort.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qsearchsm_3_opt_b">
                  <div class="para" id="qsearchsm_3-2-2-1-1">{6,10,3,2,8}, {3,6,10,2,8}, {2,3,6,8,10}</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qsearchsm_3_opt_b">
                  <div class="para" id="qsearchsm_3-2-2-2-1">This would be true if it was an insertion sort, but you are also missing a step.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qsearchsm_3_opt_c">
                  <div class="para" id="qsearchsm_3-2-3-1-1">{2,6,3,10,8}, {2,3,6,10,8}, {2,3,6,8,10}</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qsearchsm_3_opt_c">
                  <div class="para" id="qsearchsm_3-2-3-2-1">This is almost right, but is missing one step.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qsearchsm_3_opt_d" data-correct="">
                  <div class="para" id="qsearchsm_3-2-4-1-1">{2,6,3,10,8}, {2,3,6,10,8}, {2,3,6,10,8}, {2,3,6,8,10}</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qsearchsm_3_opt_d">
                  <div class="para" id="qsearchsm_3-2-4-2-1">This is the result from a selection sort.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.5.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsearchsm_4" data-multipleanswers="false"><div class="para" id="qsearchsm_4-1-1">7-11-5-4: Which of the following could be used to replace // missing code // in the code so that the method always sorts the array <code class="code-inline tex2jax_ignore">elem</code> in ascending order?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Searcher
{

    public static void sort(int[] elem)
    {
        for (int j = 0; j &lt; elem.length - 1; j++)
        {
            int minIndex = j;

            for (// missing code //)
            {
                if (elem [k] &lt; elem [minIndex])
                {
                    minIndex = k;
                }
            }
            int temp = elem[j];
            elem[j] = elem[minIndex];
            elem[minIndex] = temp;
        }
    }

    public static void main(String[] args)
    {
        int[] nums = {28, -3, 2, 14, 30};
        Searcher.sort(nums);
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qsearchsm_4_opt_a"><div class="para" id="qsearchsm_4-2-1-1-1">int k = j - 1; k &gt;= 0; k--</div></li><li data-component="feedback" id="csawesome2_2_qsearchsm_4_opt_a"><div class="para" id="qsearchsm_4-2-1-2-1">The inner loop starts at the outer loop value plus one, not minus one.</div></li><li data-component="answer" id="csawesome2_2_qsearchsm_4_opt_b" data-correct=""><div class="para" id="qsearchsm_4-2-2-1-1">int k = j + 1; k &lt; elem.length; k++</div></li><li data-component="feedback" id="csawesome2_2_qsearchsm_4_opt_b"><div class="para" id="qsearchsm_4-2-2-2-1">The inner loop starts at the outer loop value plus one and ends at the last element.</div></li><li data-component="answer" id="csawesome2_2_qsearchsm_4_opt_c"><div class="para" id="qsearchsm_4-2-3-1-1">int k = j; k &lt; elem.length; k++</div></li><li data-component="feedback" id="csawesome2_2_qsearchsm_4_opt_c"><div class="para" id="qsearchsm_4-2-3-2-1">The inner loop should start at the outer loop value plus one.</div></li><li data-component="answer" id="csawesome2_2_qsearchsm_4_opt_d"><div class="para" id="qsearchsm_4-2-4-1-1">int k = j; k &gt;= 0; k--</div></li><li data-component="feedback" id="csawesome2_2_qsearchsm_4_opt_d"><div class="para" id="qsearchsm_4-2-4-2-1">The inner loop should start at the outer loop value plus one and increment.</div></li><li data-component="answer" id="csawesome2_2_qsearchsm_4_opt_e"><div class="para" id="qsearchsm_4-2-5-1-1">int k = j - 1; k &gt; 0; k--</div></li><li data-component="feedback" id="csawesome2_2_qsearchsm_4_opt_e"><div class="para" id="qsearchsm_4-2-5-2-1">The inner loop should start at the outer loop value plus one and increment.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.5.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsearchsm_5" data-multipleanswers="false"><div class="para" id="qsearchsm_5-1-1">7-11-5-5: What would test return if a = {1,2,3,4} and v =  3?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static int test(int[] a, int v)
{
    for (int i = 0; i &lt; a.length; i++)
    {
        if (a[i] == v)
            return i;
        else return -1;
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qsearchsm_5_opt_a"><div class="para" id="qsearchsm_5-2-1-1-1">-1</div></li><li data-component="feedback" id="csawesome2_2_qsearchsm_5_opt_a"><div class="para" id="qsearchsm_5-2-1-2-1">This would be true if the sequential search code was okay and v was a value that wasn’t in the array, but the code is incorrect.  The return -1 should be outside of the for loop.</div></li><li data-component="answer" id="csawesome2_2_qsearchsm_5_opt_b"><div class="para" id="qsearchsm_5-2-2-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_qsearchsm_5_opt_b"><div class="para" id="qsearchsm_5-2-2-2-1">This would be true if v was 1 and the code was correct for a sequential search.</div></li><li data-component="answer" id="csawesome2_2_qsearchsm_5_opt_c"><div class="para" id="qsearchsm_5-2-3-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qsearchsm_5_opt_c"><div class="para" id="qsearchsm_5-2-3-2-1">This would be true if v was 2 and the code was correct for a sequential search.</div></li><li data-component="answer" id="csawesome2_2_qsearchsm_5_opt_d"><div class="para" id="qsearchsm_5-2-4-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_qsearchsm_5_opt_d"><div class="para" id="qsearchsm_5-2-4-2-1">This would be true if the code was correct for a sequential search, but it returns -1 inside the for loop instead of outside of it.</div></li><li data-component="answer" id="csawesome2_2_qsearchsm_5_opt_e" data-correct=""><div class="para" id="qsearchsm_5-2-5-1-1">The code will not compile</div></li><li data-component="feedback" id="csawesome2_2_qsearchsm_5_opt_e"><div class="para" id="qsearchsm_5-2-5-2-1">This method won’t compile because it is supposed to return an integer and if the for loop doesn’t execute it will not return anything.  The return -1 should be outside the for loop to make this sequential search work as intended.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.6.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qssm_1" data-multipleanswers="false"><div class="para" id="qssm_1-1-1">7-11-6-1: What is printed when the following main method is executed? The break; statement used in this code breaks out of or terminates the loop at that point. It is not used on the AP CSA exam.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class AlphaSort
{

    public static void main(String[] args)
    {
        int i, j;
        String key;
        String[] letters = {"E", "D", "C", "B", "A", "B"};
        for (j = 1; j &lt; letters.length; j++)
        {
            key = letters[j];
            i = j - 1;
            while (i &gt;= 0)
            {
                if (key.compareTo(letters[i]) &gt; 0)
                {
                    break;
                }
                letters[i + 1] = letters[i];
                i--;
            }
            letters[i + 1] = key;
        }
        for (int t = 0; t &lt; letters.length; t++)
        {
            System.out.print((letters[t]) + "");
        }
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qssm_1_opt_a"><div class="para" id="qssm_1-2-1-1-1">A B B C D</div></li><li data-component="feedback" id="csawesome2_2_qssm_1_opt_a"><div class="para" id="qssm_1-2-1-2-1">This would be true if the for loop inside the main method did not interate through every value in the array.</div></li><li data-component="answer" id="csawesome2_2_qssm_1_opt_b"><div class="para" id="qssm_1-2-2-1-1">E D C B B A</div></li><li data-component="feedback" id="csawesome2_2_qssm_1_opt_b"><div class="para" id="qssm_1-2-2-2-1">This would be true if the conditional statement inside the for loop stated "if (key.compareTo(letters[i]) &lt; 0)", because that would put the array in a reverse alphabetical order.</div></li><li data-component="answer" id="csawesome2_2_qssm_1_opt_c" data-correct=""><div class="para" id="qssm_1-2-3-1-1">A B B C D E</div></li><li data-component="feedback" id="csawesome2_2_qssm_1_opt_c"><div class="para" id="qssm_1-2-3-2-1">This is an insertion sort which sorts the array in alphabetical order using the compareTo() method.</div></li><li data-component="answer" id="csawesome2_2_qssm_1_opt_d"><div class="para" id="qssm_1-2-4-1-1">E D C B A B</div></li><li data-component="feedback" id="csawesome2_2_qssm_1_opt_d"><div class="para" id="qssm_1-2-4-2-1">This would be true if array was not modified at all in the main method.</div></li><li data-component="answer" id="csawesome2_2_qssm_1_opt_e"><div class="para" id="qssm_1-2-5-1-1">E D C B B</div></li><li data-component="feedback" id="csawesome2_2_qssm_1_opt_e"><div class="para" id="qssm_1-2-5-2-1">This would be true if the conditional statement inside the for loop stated "if (key.compareTo(letters[i]) &lt; 0)" and if the loop did not iterate through every item of the letters array, because that would put the array in a reverse alphabetical order.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.6.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qssm_2" data-multipleanswers="false"><div class="para" id="qssm_2-1-1">7-11-6-2: What is printed when the following main method is executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class NumberCount
{
    public static void main(String[] args)
    {
        int count = 0;
        int[] numbers = {-5, 4, -5, 3, -2, -4};
        for (int j = 0; j &lt; numbers.length; j++)
        {
            if (numbers[j] &lt; 0 &amp;&amp; numbers[j] % 2 != 0)
            {
                count++;
            }
        }
        System.out.println(count);
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qssm_2_opt_a"><div class="para" id="qssm_2-2-1-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_qssm_2_opt_a"><div class="para" id="qssm_2-2-1-2-1">This would be true if the if statement was not trying to check if the numbers in the array were negative and odd.</div></li><li data-component="answer" id="csawesome2_2_qssm_2_opt_b" data-correct=""><div class="para" id="qssm_2-2-2-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_qssm_2_opt_b"><div class="para" id="qssm_2-2-2-2-1">This answer is correct because the for loop iterates through every element and increments the count if the current number is negative and odd.</div></li><li data-component="answer" id="csawesome2_2_qssm_2_opt_c"><div class="para" id="qssm_2-2-3-1-1">12</div></li><li data-component="feedback" id="csawesome2_2_qssm_2_opt_c"><div class="para" id="qssm_2-2-3-2-1">This may be a result of misunderstanding the question, as 12 cannot be an answer because the array length itself is only 6.</div></li><li data-component="answer" id="csawesome2_2_qssm_2_opt_d"><div class="para" id="qssm_2-2-4-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qssm_2_opt_d"><div class="para" id="qssm_2-2-4-2-1">This would be true if the code was looking for the numbers in the array that were positive and odd.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.6.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qssm_3" data-multipleanswers="false"><div class="para" id="qssm_3-1-1">7-11-6-3: What is printed when the following main method is executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class GuestList
{
    public static void main(String[] args)
    {
        int count = 0;
        String[] guestList = {"Anna", "Briana", "Alex", "John"};
        String subj1 = null;
        String subj2 = null;
        for (int j = 0; j &lt; guestList.length; j++)
        {
            subj1 = guestList[j].substring(0, 1);
            subj2 = guestList[j].substring(guestList[j].length() - 1);
            if (subj1.equalsIgnoreCase(subj2))
            {
                count--;
            }
            else if (subj1.equalsIgnoreCase("a"))
            {
                count++;
            }
        }
        System.out.println(count);
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qssm_3_opt_a"><div class="para" id="qssm_3-2-1-1-1">-3</div></li><li data-component="feedback" id="csawesome2_2_qssm_3_opt_a"><div class="para" id="qssm_3-2-1-2-1">This would be true if there were three strings in the array that had the same first letter as the last letter.</div></li><li data-component="answer" id="csawesome2_2_qssm_3_opt_b"><div class="para" id="qssm_3-2-2-1-1">-4</div></li><li data-component="feedback" id="csawesome2_2_qssm_3_opt_b"><div class="para" id="qssm_3-2-2-2-1">This would be true if there were four strings in the array that had the same first letter as the last letter.</div></li><li data-component="answer" id="csawesome2_2_qssm_3_opt_c"><div class="para" id="qssm_3-2-3-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_qssm_3_opt_c"><div class="para" id="qssm_3-2-3-2-1">This would be true if there had been four strings in the array that had the first letter as an A and those strings’ last letter was not an A.</div></li><li data-component="answer" id="csawesome2_2_qssm_3_opt_d" data-correct=""><div class="para" id="qssm_3-2-4-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_qssm_3_opt_d"><div class="para" id="qssm_3-2-4-2-1">This is the correct answer. The for loop is iterating through every element in the guestList array and the first if statement is checking to see if the current element in the array starts with the same letter and ends with the same letter. The variable, count decreases by one if that is true. However if that is false, the program goes to the else if statment and checks to see if the first letter is an A. If that is true count increases by one.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.6.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qssm_4" data-multipleanswers="false"><div class="para" id="qssm_4-1-1">7-11-6-4: What is printed when the following main method is executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class OddEvenMod
{
    public static void main(String[] args)
    {
        int[] arr = {8, 7, 7, 3, 4, 1};
        for (int i = 0; i &lt; arr.length; i++)
        {
            if (arr[i] % 2 == 0)
            {
                int temp = arr[0];
                arr[0] = arr[i];
                arr[i] = temp;
            }
        }
        for (int t = 0; t &lt; arr.length; t++)
        {
            System.out.print((arr[t]) + ",");
        }
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qssm_4_opt_a"><div class="para" id="qssm_4-2-1-1-1">8,7,7,3,4,1</div></li><li data-component="feedback" id="csawesome2_2_qssm_4_opt_a"><div class="para" id="qssm_4-2-1-2-1">This would be true if the array was not modified at all.</div></li><li data-component="answer" id="csawesome2_2_qssm_4_opt_b" data-correct=""><div class="para" id="qssm_4-2-2-1-1">4,7,7,3,8,1</div></li><li data-component="feedback" id="csawesome2_2_qssm_4_opt_b"><div class="para" id="qssm_4-2-2-2-1">This is the correct answer. The for loop is iterating through every element in the array. The if statement is checking to see if the current element is even or odd. If it is even, then the first element of the array and the current element will swap places in the array.</div></li><li data-component="answer" id="csawesome2_2_qssm_4_opt_c"><div class="para" id="qssm_4-2-3-1-1">4,8,7,1,3,7</div></li><li data-component="feedback" id="csawesome2_2_qssm_4_opt_c"><div class="para" id="qssm_4-2-3-2-1">This would be true if the loop had brought all the even numbers to the beginning of the array.</div></li><li data-component="answer" id="csawesome2_2_qssm_4_opt_d"><div class="para" id="qssm_4-2-4-1-1">1,8,7,7,4,3</div></li><li data-component="feedback" id="csawesome2_2_qssm_4_opt_d"><div class="para" id="qssm_4-2-4-2-1">This would be true if the if statement had said: if(arr[i] % 2 == 1).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.6.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qssm_5" data-multipleanswers="false"><div class="para" id="qssm_5-1-1">7-11-6-5: What is printed when the following main method is executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class PrimeOrNot
{
    private static boolean check(int n)
    {
        for (int i = 2; i &lt; n; i++)
        {
            if (n % i == 0)
            {
                 return false;
            }
        }
        return true;
    }

    public static void main(String[] args)
    {
        int[] arr = {5, 3, 2, 9, 3, 4};
        for (int i = 0; i &lt; arr.length; i++)
        {
            if (check(arr[i]))
            {
                int temp = arr[0];
                arr[0] = arr[i];
                arr[i] = temp;
            }
        }
        for (int t = 0; t &lt; arr.length; t++)
        {
            System.out.print((arr[t]) + ",");
        }
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qssm_5_opt_a" data-correct=""><div class="para" id="qssm_5-2-1-1-1">3,5,3,9,2,4,</div></li><li data-component="feedback" id="csawesome2_2_qssm_5_opt_a"><div class="para" id="qssm_5-2-1-2-1">This is the correct answer. The check method is using a for loop and an if statement to return true if the parameter is prime and false if it is not prime. In the main method, the for loop iterates through every element in the array and checks to see if it is prime. If it is prime, then the program will swap that element with the first element in the array.</div></li><li data-component="answer" id="csawesome2_2_qssm_5_opt_b"><div class="para" id="qssm_5-2-2-1-1">4,5,2,3,9,3,</div></li><li data-component="feedback" id="csawesome2_2_qssm_5_opt_b"><div class="para" id="qssm_5-2-2-2-1">This would be true if the if statement had said: if(!check(arr[i])).</div></li><li data-component="answer" id="csawesome2_2_qssm_5_opt_c"><div class="para" id="qssm_5-2-3-1-1">5,3,2,9,3,4,</div></li><li data-component="feedback" id="csawesome2_2_qssm_5_opt_c"><div class="para" id="qssm_5-2-3-2-1">This would be true if the array had not been modified at all.</div></li><li data-component="answer" id="csawesome2_2_qssm_5_opt_d"><div class="para" id="qssm_5-2-4-1-1">2,3,5,9,3,</div></li><li data-component="feedback" id="csawesome2_2_qssm_5_opt_d"><div class="para" id="qssm_5-2-4-2-1">This would be true if the final for loop did not iterate through every element in the array.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.6.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qssm_6" data-multipleanswers="false"><div class="para" id="qssm_6-1-1">7-11-6-6: What is printed when the following main method is executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class GradeSort
{
    public static void main(String[] args)
    {
        String[] names = {"Anna", "John", "Billy", "Bob", "Roger", "Dominic"};
        int[] grades = {93, 100, 67, 84, 86, 93};
        int i, j, first, temp;
        String temp2;
        for (i = grades.length - 1; i &gt; 0; i--)
        {
            first = 0;
            for (j = 1; j &lt;= i; j++)
            {
                if (grades[j] &lt; grades[first])
                {
                     first = j;
                }
            }
            temp = grades[first];
            grades[first] = grades[i];
            grades[i] = temp;
            temp2 = names[first];
            names[first] = names[i];
            names[i] = temp2;
        }
        for (int t = 0; t &lt; names.length; t++)
        {
            System.out.print((names[t]) + " ");
        }
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qssm_6_opt_a"><div class="para" id="qssm_6-2-1-1-1">Anna John Billy Bob Roger Dominic</div></li><li data-component="feedback" id="csawesome2_2_qssm_6_opt_a"><div class="para" id="qssm_6-2-1-2-1">This would be true if the program did not modify the names array at all.</div></li><li data-component="answer" id="csawesome2_2_qssm_6_opt_b" data-correct=""><div class="para" id="qssm_6-2-2-1-1">John Dominic Anna Roger Bob Billy</div></li><li data-component="feedback" id="csawesome2_2_qssm_6_opt_b"><div class="para" id="qssm_6-2-2-2-1">This is the correct answer. The program is ordering the grades array from greatest to least as well as keeping the names with the grades.</div></li><li data-component="answer" id="csawesome2_2_qssm_6_opt_c"><div class="para" id="qssm_6-2-3-1-1">Billy Bob Roger Anna Dominic John</div></li><li data-component="feedback" id="csawesome2_2_qssm_6_opt_c"><div class="para" id="qssm_6-2-3-2-1">This would be true if the program sorted the grades array from the smallest value to the largest value.</div></li><li data-component="answer" id="csawesome2_2_qssm_6_opt_d"><div class="para" id="qssm_6-2-4-1-1">Anna John Billy Bob Roger</div></li><li data-component="feedback" id="csawesome2_2_qssm_6_opt_d"><div class="para" id="qssm_6-2-4-2-1">This would be true if the program did not modify the names array and if the for loop at the end of the program did not output all the values of the array.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.31.6.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qssm_7" data-multipleanswers="false"><div class="para" id="qssm_7-1-1">7-11-6-7: What is printed when the following main method is executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class DivisibleBy2or3
{
    private static boolean divCheck(int n)
    {
        if (n % 2 == 0 || n % 3 == 0)
        {
            return true;
        }
        return false;
    }

    public static void main(String[] args)
    {
        int[] arr = {6, 7, 17, 3, 2, 9, 1, 5};
        for (int i = 0; i &lt; arr.length; i++)
        {
            if (divCheck(arr[i]))
            {
                int temp = arr[0];
                arr[0] = arr[i];
                arr[i] = temp;
            }
        }
        for (int t = 0; t &lt; arr.length; t++)
        {
            System.out.print((arr[t]) + " ");
        }
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qssm_7_opt_a"><div class="para" id="qssm_7-2-1-1-1">6 7 17 3 2 9 1 5</div></li><li data-component="feedback" id="csawesome2_2_qssm_7_opt_a"><div class="para" id="qssm_7-2-1-2-1">This would be true if the program had not modified the array at all.</div></li><li data-component="answer" id="csawesome2_2_qssm_7_opt_b"><div class="para" id="qssm_7-2-2-1-1">9 6 3 2 3 1 5 17</div></li><li data-component="feedback" id="csawesome2_2_qssm_7_opt_b"><div class="para" id="qssm_7-2-2-2-1">This would be true if the loop was moving the position of odd numbers in the array to arr.length-1.</div></li><li data-component="answer" id="csawesome2_2_qssm_7_opt_c"><div class="para" id="qssm_7-2-3-1-1">5 1 2 3 6 17 7 9</div></li><li data-component="feedback" id="csawesome2_2_qssm_7_opt_c"><div class="para" id="qssm_7-2-3-2-1">This would be true if the array was printed in the reversed order.</div></li><li data-component="answer" id="csawesome2_2_qssm_7_opt_d" data-correct=""><div class="para" id="qssm_7-2-4-1-1">9 7 17 6 3 2 1 5</div></li><li data-component="feedback" id="csawesome2_2_qssm_7_opt_d"><div class="para" id="qssm_7-2-4-2-1">This is the correct answer, because the divCheck method is checking to see if the values in the array are divisible by 2 or 3. If they are, they are swapped with the value at the first position (index 0).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-8-33</id>
      <title>Mixed Up Code Practice</title>
      <question optional="yes">
        <label>Exercise 4.32.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch9ex1muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch9ex1muc-1-1">The following program segment should create a 10 by 10 two-dimensional int array. It should fill this array with numbers 0 to 99 from left to right, top row to bottom row and print the output (in row-column order).  But, the blocks have been mixed up and contain an extra block that is not needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">int[][] table = new int[10][10];
---
for (int row = 0; row &lt; table.length; row++)
{
     for (int col = 0; col &lt; table[row].length; col++)
     {
 
---
        table[row][col] = col + 10 * row;
---
        table[row][col] = row + 10 * col;  #paired
---
        System.out.print(table[row][col] + "\t");
---
    } //end inner for loop
} //end outer for loop</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.32.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch9ex2muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch9ex2muc-1-1">The following program segment should create a 8 by 8 two-dimensional int array. It should fill this array with a checkered pattern of 0s and 1s – starting with a 1 in the top left corner and print the output (in row-column order).  But, the blocks have been mixed up and include one extra block that is not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">int[][] checkerboard = new int[8][8];
---
for (int row = 0; row &lt; checkerboard.length; row++)
{
     for (int col = 0; col &lt; checkerboard[row].length; col++)
     {
 
---
        if ( (row + col) % 2 == 0)
        {
 
---
        if ( (row + col) % 2 == 1)
        {  #paired
---
            checkerboard[row][col] = 1;
---
        } //end if
---
        System.out.print(checkerboard[row][col] + " ");
---
    } //end inner for loop
} //end outer for loop</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.32.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch9ex3muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch9ex3muc-1-1">The following program segment is a method that should accept a two-dimensional int array and return the sum of all of its values.  But, the blocks have been mixed up and include three extra blocks that are not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static int sumVals(int[][] nums)
{
 
---
   int sum = 0;
---
   int sum;  #distractor
---
   for (int row = 0; row &lt; nums.length; row++)
   {
 
---
   for (int row = 0; row &lt; nums.length(); row++)
   {  #paired
---
         for (int col = 0; col &lt; nums[row].length; col++)
         {
 
---
             sum += nums[row][col];
---
             sum = nums[row][col];  #paired
---
         } //end inner for loop
---
   } //end outer for loop
   return sum;
---
} //end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.32.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch9ex4muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch9ex4muc-1-1">The following program segment is a method that should accept a two-dimensional String array “image” and flip the “image” 180 degrees vertically. For example:   1 2 3 4  -&gt;    4 3 2 1. But, the blocks have been mixed up and include one extra block that is not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static void flipImage(String[][] image)
{
 
---
    for (int row = 0; row &lt; image.length; row++)
    {
 
---
        for (int col = 0; col &lt; image[0].length / 2; col++)
        {
 
---
            String temp = image[row][col];
            image[row][col] = image[row][image[row].length - 1 - col];
            image[row][image[row].length - 1 - col] = temp;
---
            image[row][col] = image[row][image[row].length - 1 - col]; 
            image[row][image[row].length - 1 - col] = image[row][col]; #paired
---
        } //end inner for loop
    } //end outer for loop
} //end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.32.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch9ex5muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch9ex5muc-1-1">The following program segment is a method that should accept a two-dimensional array of ints and edit it such that all even numbers are replaced by zero.  But, the blocks have been mixed up and include two extra blocks that are not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static void makeEvenNumsZero(int[][] nums)
{
 
---
    for (int row = 0; row &lt; nums.length; row++)
    {
 
---
        for (int col = 0; col &lt; nums[row].length; col++)
        {
 
---
        for (int col = 0; col &lt; nums[row].length(); col++)
        {   #distractor
---
            if (nums[row][col] % 2 == 0)
            {
                nums[row][col] = 0;
            } //end if
---
            if (nums[row][col] % 2 == 1) 
            {
                nums[row][col] = 0;
            } //end if #distractor
---
        } //end inner for loop
---
    } //end outer for loop
} //end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.32.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch9ex6muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch9ex6muc-1-1">The following program segment is a method that should accept a two-dimensional array of ints and a desired int and return the number of occurrences of the desired int in the two-dimensional array.  But, the blocks have been mixed up and include two extra blocks that are not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static int numOccurrences(int[][] nums,
                                 int desired)
{
 
---
    int occurrences = 0;
---
    int occurrences;  #distractor
---
    for (int i = 0; i &lt; nums.length; i++)
    {
         for (int j = 0; j &lt; nums[i].length; j++)
         {
 
---
            if (nums[i][j] == desired)
            {
                occurrences++;
            }
---
            if (nums[i][j] != desired) 
            {
                occurrences++;
            } #distractor
---
         } //end inner for loop
    } //end outer for loop
---
    return occurrences;
} //end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.32.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch9ex7muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch9ex7muc-1-1">The following program segment is a method that should accept a two-dimensional int array and return a single dimensional (normal) int array containing the average of each of the columns.  But, the blocks have been mixed up and include three extra blocks that are not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static int[] averageCols(int[][] nums)
{
 
---
    int[] averages = new int[nums.length];  #distractor
---
    int[] averages = new int[nums[0].length];
---
    for (int col = 0; col &lt; nums[0].length; col++)
    {
 
---
        int colSum = 0;
---
        for (int row = 0; row &lt; nums.length; row++)
        {
            colSum += nums[row][col];
        } //end inner for loop
---
        for (int row = 0; row &lt; nums.length; row++)
        {  
            colSum += nums[col][row];
        } //end inner for loop #distractor
---
        averages[col] = colSum / nums.length;
---
        averages[col] = colSum / nums.length();  #distractor
---
    } //end outer for loop
    return averages;
} //end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.32.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch9ex8muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch9ex8muc-1-1">The following program segment is a method that should accept a two-dimensional int array and return a new two-dimensional int array containing only the odd index rows.  But, the blocks have been mixed up and include three extra blocks that are not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static int[][] oddRows(int[][] nums)
{
 
---
public static int[] oddRows(int[][] nums)
{   #distractor
---
    int[][] odds = new int[nums.length / 2][nums[0].length];
---
    int[][] odds = new int[nums.length][nums[0].length];  #distractor
---
    int index = 0;
    for (int i = 0; i &lt; nums.length; i++)
    {
 
---
        if (i % 2 == 1)
        {
 
---
            for (int j = 0; j &lt; nums[i].length; j++)
            {
                 odds[index][j] = nums[i][j];
            }
---
            for (int j = 0; j &lt; nums[i].length; j++) 
            {
                 odds[index][j] = nums[j][i];
            } #distractor
---
            index++;
---
        } //end if
---
    } //end outer for loop
    return odds;
} //end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.32.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch9ex9muc">
                <div class="parsons_question parsons-text"><div class="para" id="ch9ex9muc-1-1">The following program segment is a method that should accept a two-dimensional String array, in which each row contains the characters of a word.  The method should return a single-dimensional (normal) String array containing the words in each row of the two-dimensional array.</div> <dl class="description-list"><dt id="ch9ex9muc-1-2-1">Take for example, the input 2d array: { {“b”, “a”, “t”, “h”},</dt><dd><div class="para" id="ch9ex9muc-1-2-1-2">{“t”, “e”, “n”, “s”}, {“j”, “a”, “c”, “k”}, {“l”, “a”, “z”, “y”}}</div></dd></dl> <div class="para" id="ch9ex9muc-1-3">Resulting array: {“bath”, “tens”, “jack”, “lazy”}</div> <div class="para" id="ch9ex9muc-1-4">But, the blocks have been mixed up.  Drag the needed code from the left to the right and put them in order with the correct indention so that the code would work correctly.  Click the Check button to check your solution.</div></div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static String[] breakIntoLetters(String[][] words)
{
 
---
   String[] result = new String[words.length];
---
   for (int i = 0; i &lt; words.length; i++)
   {
 
---
       String word = "";
---
       for (int j = 0; j &lt; words[i].length; j++)
       {
            word += words[i][j];
       }
---
       result[i] = word;
---
   } //end for loop
   return result;
---
} //end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.32.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch9ex10muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch9ex10muc-1-1">The following program segment is a method that should accept a two-dimensional int array, and return a single-dimensional (normal) int array containing the max of each row.  But, the blocks have been mixed up and include one extra block that is not needed in a correct solution.  Drag the needed code from the left to the right and put them in order with the correct indention so that the code would work correctly.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static int[] maxEachRow(int[][] nums)
{
 
---
   int[] max = new int[nums.length];
 
---
   for (int i = 0; i &lt; nums.length; i++)
   {
 
---
       int maxVal = nums[i][0];
       for (int j = 1; j &lt; nums[i].length; j++)
       {
 
---
           if (maxVal &lt; nums[i][j])
           {
               maxVal = nums[i][j];
           }
---
           if (maxVal &gt; nums[i][j]) 
           {
               maxVal = nums[i][j];
           } #distractor
---
       } //end inner for loop
       max[i] = maxVal;
---
   } //end outer for loop
   return max;
} //end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-001451</id>
      <title>Toggle Mixed Up or Write Code Practice</title>
    </subchapter>
    <subchapter>
      <id>csawesome2-8-35</id>
      <title>Code Practice with 2D Arrays</title>
      <question optional="yes">
        <label>Exercise 4.34.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-8-35-2-1-1-1">Replace the “ADD CODE HERE” below with the code to declare and create a 3 by 3 two-dimensional int array named <code class="code-inline tex2jax_ignore">table</code>. The finished code will print the values 0 to 8.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        // ADD CODE HERE //

        // Should print the values in table
        int count = 0;
        for (int row = 0; row &lt; table.length; row++)
        {
            for (int col = 0; col &lt; table.length; col++)
            {
                table[row][col] = count;
                count++;
                System.out.print(table[row][col] + " ");
            }
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "0 1 2 3 4 5 6 7 8";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testContains()
    {
        String target = "int[][] table = new int[3][3];";
        boolean passed = checkCodeContains("3x3 declaration of int array table", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.34.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-8-35-2-2-1-1">Replace the “ADD CODE HERE” below with the code to declare and initialize a two-dimensional String array called <code class="code-inline tex2jax_ignore">students</code> with the names “Brice, Marvin, Anna” in the first row and “Kamal, Maria, Elissa” in the second. The finished code will print all the names in the array starting with all in the first row followed by all in the second row.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        // ADD CODE HERE //

        // Should print the values in students in order
        for (int row = 0; row &lt; students.length; row++)
        {
            for (int col = 0; col &lt; students[0].length; col++)
            {
                System.out.print(students[row][col] + " ");
            }
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Brice Marvin Anna Kamal Maria Elissa";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testContains()
    {
        String target = "String[][] students";
        boolean passed = checkCodeContains("2D String array called students", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.34.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-8-35-2-3-1-1">Print the values 47, 51, and 20 by accessing them in  the given two-dimensional array.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int[][] arr = { {47, 3, 12}, {51, 74, 20}};

        // ADD CODE HERE //

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testDigitOne() throws IOException
    {
        String target = "arr[0][0]";
        boolean passed = checkCodeContains("using arr to access 47", target);
        assertTrue(passed);
    }

    @Test
    public void testDigit2() throws IOException
    {
        String target = "arr[1][0]";
        boolean passed = checkCodeContains("using arr to access 51", target);
        assertTrue(passed);
    }

    @Test
    public void testDigit3() throws IOException
    {
        String target = "arr[1][2]";
        boolean passed = checkCodeContains("using arr to access 20", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.34.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-8-35-2-4-1-1">Print the values 8, 3, 87, and 34 by accessing them from the given two-dimensional array.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int[][] arr = { {10, 39, 8}, {3}, {35, 87}, {22}, {34}};

        // ADD CODE HERE //

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testOutput() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "8\n3\n87\n34";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testDigitOne() throws IOException
    {
        String target = "arr[0][2]";
        boolean passed = checkCodeContains("Correct accessing of 8", target);
        assertTrue(passed);
    }

    @Test
    public void testDigitTwo() throws IOException
    {
        String target = "arr[1][0]";
        boolean passed = checkCodeContains("Correct accessing of 3", target);
        assertTrue(passed);
    }

    @Test
    public void testDigitThree() throws IOException
    {
        String target = "arr[2][1]";
        boolean passed = checkCodeContains("Correct accessing of 87", target);
        assertTrue(passed);
    }

    @Test
    public void testDigitFour() throws IOException
    {
        String target = "arr[4][0]";
        boolean passed = checkCodeContains("Correct accessing of 34", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.34.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-8-35-2-5-1-1">Print the number of rows in the given two-dimensional array, or the length of the outer array. Then print the number of columns, or the length of each inner array.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{

    public static void main(String[] args)
    {
        String[][] arr = { {"hello", "there", "world"}, {"how", "are", "you"}};

        System.out.print("Rows:");
        // ADD CODE TO PRINT NUMBER OF ROWS HERE using arr //

        System.out.print("Columns:");
        // ADD CODE TO PRINT NUMBER OF COLUMNS HERE using arr //

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Rows:2\nColumns:3";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "arr.length";
        boolean passed = checkCodeContains("using arr and length to get number of rows", target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "arr[0].length";
        boolean passed =
                checkCodeContains("using arr[0] and length to get number of columns", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.34.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-8-35-2-7-1-1">Declare and create a two-dimensional array of strings named <code class="code-inline tex2jax_ignore">colors</code>.  Put the colors (“red”, “yellow”, “blue”) in the first row, and the colors (“orange”, “green”, “purple”) in the second row. Then print every value in the array.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        // ADD CODE HERE //
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testArrayDec() throws IOException
    {
        String code = removeSpaces(getCode());
        String expect =
                removeSpaces(
                        "String[][] colors = { {\"red\", \"yellow\", \"blue\"},{\"orange\","
                            + " \"green\", \"purple\"}}");

        boolean passed = code.contains(expect);
        getResults("true", passed + "", "correct initialization of array", passed);
        assertTrue(passed);
    }

    @Test
    public void testOutput() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "red yellow blue \norange green purple";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.34.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-8-35-2-8-1-1">Replace the “ADD CODE HERE” below with the code to count and print the number of 7’s that are in the 2d array. It should print 2.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        int[][] array = { {4, 7, 8}, {8, 8, 7}};

        // ADD CODE HERE

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "2";
        boolean passed = output.contains(expect);
        getResults(expect, output, "Expected output from main", passed);
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        String target = "for";
        int num = countOccurences(getCode(), target);
        boolean passed = (num == 2);
        getResults("2", num + "", "2 for loops", passed);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "if (array[*][*] == 7)";
        boolean passed =
                checkCodeContains("if statement checking if array[*][*] element equals 7", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.34.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-8-35-2-9-1-1">Replace the “ADD CODE HERE” below with the code to print out the sum of the numbers in the second row of the “table” array.  It should print 18.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{

    public static void main(String[] args)
    {
        int[][] table = { {1, 4, 9}, {11, 4, 3}, {2, 2, 3}};

        // ADD CODE HERE

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "18";
        boolean passed = output.contains(expect);
        getResults(expect, output, "Expected output from main", passed);
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        boolean passed = checkCodeContains("1 for loop", "for");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.34.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-8-35-2-10-1-1">Replace the “ADD CODE HERE” below with the code to find the sum of the values on the diagonal from [0][0] to [num rows - 1][num rows - 1]. Print the sum.  It should print 5.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{

    public static void main(String[] args)
    {
        int[][] array = { {1, 2, 3}, {-1, -2, -3}, {4, 5, 6}};

        // ADD CODE HERE

    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "5";
        boolean passed = output.contains(expect);
        getResults(expect, output, "Expected output from main", passed);
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        boolean passed = checkCodeContains("1 for loop", "for");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.34.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-8-35-2-11-1-1">Replace the “ADD CODE HERE” below with the code to declare and create a two-dimensional array of integers <code class="code-inline tex2jax_ignore">numbers</code> with the numbers (1,2,3) in the first row, and the numbers (4,5,6) in the second row. Then loop through the two-dimensional array, printing out the values in the first row followed by those in the second row.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        // ADD CODE HERE //
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "1 2 3\n4 5 6";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testArray()
    {
        String expect = "int[][] numbers = { {1,2,3},{4,5,6}}";
        boolean passed = checkCodeContains("correct array initialization", expect);
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        String target = "for";
        int num = countOccurences(getCode(), target);
        boolean passed = (num == 2);
        getResults("2", num + "", "2 for loops", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.34.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-8-35-2-12-1-1">Replace the “ADD CODE HERE” below with the code to declare and create a two-dimensional array of integers <code class="code-inline tex2jax_ignore">numbers</code> with the numbers (1,2,3) in the first row, the numbers (4,5,6) in the second row, and the numbers (7,8,9) in the third row. Then loop through the two-dimensional array, printing out the values in the first row followed by those in the second row and so on.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        // ADD CODE HERE //
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "1 2 3\n4 5 6\n7 8 9";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        String expect = "int[][] numbers = { {1,2,3},{4,5,6}, {7,8,9}}";
        boolean passed = checkCodeContains("correct array initialization", expect);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "for";
        int num = countOccurences(getCode(), target);
        boolean passed = (num == 2);
        getResults("2", num + "", "2 for loops", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.34.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-8-35-2-13-1-1">Given the following array, replace the “ADD CODE HERE” below with 1 line of code to replace the word “purple” with “yellow” using the correct array location.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void main(String[] args)
    {
        String[][] arr =
        {
            {"red", "orange", "purple"}, {"green", "blue", "indigo"}
        };

        // ADD CODE HERE //

        for (int row = 0; row &lt; arr.length; row++)
        {
            for (int col = 0; col &lt; arr[1].length; col++)
            {
                System.out.println(arr[row][col]);
            }
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "red\norange\nyellow\ngreen\nblue\nindigo\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test1() throws IOException
    {
        String expect = "arr[0][2] = \"yellow\"";
        boolean passed = checkCodeContains("replacing correct array element with yellow", expect);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-8-36</id>
      <title>More Code Practice with 2D Arrays</title>
      <question optional="yes">
        <label>Exercise 4.35.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_SentenceModifier_Written">
                <div class="ac_question" id="csawesome2_2_SentenceModifier_Written_question">
                  <div class="para" id="SentenceModifier_Written-1-1">Replace the “ADD CODE HERE” below to finish a method <code class="code-inline tex2jax_ignore">String findAndReplaceFirst(String[][] sentence, String target, String replacement)</code> that takes a 2D array of strings, a target string to search for, and a replacement string. The method searches the 2D array for the first occurrence of the target string and replaces it with the replacement string.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_SentenceModifier_Written_editor" data-question_label="" data-codelens="true">import java.util.Arrays;

public class SentenceModifier
{
   public static String[][] findAndReplaceFirst(String[][] sentence, String target, String replacement)
   {
       // ADD CODE HERE //
   }

   public static void main(String[] args)
   {
     String[][] document =
     {
         {"Hello", "world"},
         {"hello", "Lucy"},
         {"hello", "Yuyu"},
     };


     String target = "hello";
     String replacement = "hi";


     String[][] updatedDocument = findAndReplaceFirst(document, target, replacement);

     for (String[] row : updatedDocument)
     {
         for (String word : row)
         {
             System.out.print(word + " ");
         }
         System.out.println();
     }
  }
}
====
import static org.junit.Assert.*;
import org.junit.Test;
import java.io.IOException;
import java.util.Arrays;

public class RunestoneTests extends CodeTestHelper {
    @Test
    public void testSymmetry() throws IOException {
         String output = getMethodOutput("main");
         String expect = "Hello world\nhi Lucy\nhello Yuyu";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);

    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.35.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_FindMaxOnes_Written">
                <div class="ac_question" id="csawesome2_2_FindMaxOnes_Written_question">
                  <div class="para" id="FindMaxOnes_Written-1-1">Replace the “ADD CODE HERE” below to finish a method <code class="code-inline tex2jax_ignore">findMaxOnes(matrix)</code> that accepts a two-dimensional integer array <code class="code-inline tex2jax_ignore">matrix</code> as input. The method should determine the row with the maximum number of occurrences of the integer 1 and return its index. If multiple rows have the same maximum number of 1s, return the index of the first such row encountered. For example: if the input matrix is: {[ 0, 1, 1 ], [ 1, 1, 0 ], [ 1, 0, 1 ]}. The method should return 1, as the second row contains the maximum number of 1s (2 in total).</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_FindMaxOnes_Written_editor" data-question_label="" data-codelens="true">import java.util.Arrays;

public class MaxOnesRowFinder
{
   public static int findMaxOnes(int[][] matrix)
   {
      // ADD CODE HERE //
   }

   public static void main(String[] args)
   {
       int[][] matrix =
       {
           {0, 1, 1},
           {1, 1, 0},
           {1, 0, 1}
       };

       int maxRow = findMaxOnes(matrix);
       System.out.println(maxRow);
   }

}
====
import static org.junit.Assert.*;
import org.junit.Test;
import java.io.IOException;
import java.util.Arrays;

public class RunestoneTests extends CodeTestHelper {
    @Test
    public void testMain() throws IOException {
        String output = getMethodOutput("main");
        String expectedOutput = "0";

        boolean passed = getResults(expectedOutput, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.35.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_isSeatAvailable_Written">
                <div class="ac_question" id="csawesome2_2_isSeatAvailable_Written_question">
                  <div class="para" id="isSeatAvailable_Written-1-1">You are given a 2D array representing the seating arrangement in a theater. Each cell in the array contains either <code class="code-inline tex2jax_ignore">0</code> (indicating an available seat) or <code class="code-inline tex2jax_ignore">1</code> (indicating an occupied seat). Additionally, each row represents a different row in the theater, and each column represents a different seat in that row. Your task is to determine whether a specific seat at a given row and column is available while ensuring that social distancing guidelines are followed. The social distancing guideline specifies that no two occupied seats should be adjacent horizontally, vertically, or diagonally. Thus, a seat is considered available only if all adjacent seats (including diagonals) are empty. Replace the “ADD CODE HERE” below to finish a method <code class="code-inline tex2jax_ignore">isSeatAvailable(int[][] theater, int row, int column)</code> that takes the theater seating arrangement and the row and column indices of the seat as input and returns <code class="code-inline tex2jax_ignore">true</code> if the seat is available while adhering to social distancing guidelines, and <code class="code-inline tex2jax_ignore">false</code> otherwise.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_isSeatAvailable_Written_editor" data-question_label="" data-codelens="true">import java.util.Arrays;

public class SocialDistancingSeating
{
   public static boolean isSeatAvailable(int[][] theater, int row, int column)
   {
      // ADD CODE HERE //
   }

   public static void main(String[] args)
   {
       int[][] theater = {
           {0, 0, 1, 1},
           {1, 1, 0, 0},
           {0, 1, 1, 0}
       };
       int row = 1;
       int column = 2;

       boolean available = isSeatAvailable(theater, row, column);
       System.out.println(available);
   }
}
====
import static org.junit.Assert.*;
import org.junit.Test;
import java.io.IOException;
import java.util.Arrays;

public class RunestoneTests extends CodeTestHelper {
    @Test
    public void testMain() throws IOException {
        String output = getMethodOutput("main");
        String expectedOutput = "false";

        boolean passed = getResults(expectedOutput, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.35.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_DiagonalSum_Written">
                <div class="ac_question" id="csawesome2_2_DiagonalSum_Written_question">
                  <div class="para" id="DiagonalSum_Written-1-1">Replace the “ADD CODE HERE” to finish a method <code class="code-inline tex2jax_ignore">diagonalSum(int[][] matrix)</code> that takes the matrix as input and returns an array containing the sums of elements along both diagonals. The first element of the array should represent the sum of elements along the main diagonal, and the second element should represent the sum of elements along the opposite diagonal. In a square matrix, the main diagonal refers to the diagonal line of elements from the top left to the bottom right. Conversely, the opposite diagonal runs from the top right to the bottom left corner of the matrix. For example if the input matrix is { {1, 1, 1},{2, 2, 2},{1, 1, 2} }. The method should return [5,4]</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_DiagonalSum_Written_editor" data-question_label="" data-codelens="true">import java.util.Arrays;

public class DiagonalSum
{
    public static int[] diagonalSum(int[][] matrix)
    {
        // ADD CODE HERE //
     }

    public static void main(String[] args)
    {
       int[][] matrix = {
           {1, 2, 3},
           {4, 5, 6},
           {7, 8, 9}
       };

       int[] diagonalSums = diagonalSum(matrix);
       System.out.println(Arrays.toString(diagonalSums));
   }
}
====
import static org.junit.Assert.*;
import org.junit.Test;
import java.io.IOException;
import java.util.Arrays;

public class RunestoneTests extends CodeTestHelper {
    @Test
    public void testMain() throws IOException {
        String output = getMethodOutput("main");
        String expectedOutput = "15, 15";

        boolean passed = getResults(expectedOutput, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-001460</id>
      <title>Multiple-Choice Exercises</title>
      <question optional="yes">
        <label>Exercise 4.36.1.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qa2de_1" data-multipleanswers="false">
                <div class="para" id="qa2de_1-1-1">8-8-1: How many columns does <code class="code-inline tex2jax_ignore">a</code> have if it is created as follows <code class="code-inline tex2jax_ignore">int[][] a = { {2, 4, 6, 8}, {1, 2, 3, 4}};</code>?</div>
                <li data-component="answer" id="csawesome2_2_qa2de_1_opt_a">
                  <div class="para" id="qa2de_1-2-1-1-1">2</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2de_1_opt_a">
                  <div class="para" id="qa2de_1-2-1-2-1">The size of outer array is the number of rows.  Remember that two-dimensional arrays are actually an array of arrays in Java.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qa2de_1_opt_b" data-correct="">
                  <div class="para" id="qa2de_1-2-2-1-1">4</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2de_1_opt_b">
                  <div class="para" id="qa2de_1-2-2-2-1">The size of the inner array is the number of columns.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qa2de_1_opt_c">
                  <div class="para" id="qa2de_1-2-3-1-1">8</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2de_1_opt_c">
                  <div class="para" id="qa2de_1-2-3-2-1">This is the total number of items in the array.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.36.1.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qa2de_2" data-multipleanswers="false">
                <div class="para" id="qa2de_2-1-1">8-8-2: Which of the following statements assigns the letter S to the third row and first column of a two-dimensional array named <code class="code-inline tex2jax_ignore">strGrid</code> (assuming row-major order).</div>
                <li data-component="answer" id="csawesome2_2_qa2de_2_opt_a">
                  <div class="para" id="qa2de_2-2-1-1-1">strGrid[0][2] = "S";</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2de_2_opt_a">
                  <div class="para" id="qa2de_2-2-1-2-1">The code letterGrid[0][2] = "S"; actually sets the 1st row and 3rd column to hold a reference to the String object "S".</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qa2de_2_opt_b">
                  <div class="para" id="qa2de_2-2-2-1-1">strGrid[1][3] = "S";</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2de_2_opt_b">
                  <div class="para" id="qa2de_2-2-2-2-1">This would be true if row and column indices started at 1 instead of 0 and if this was in column major order.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qa2de_2_opt_c">
                  <div class="para" id="qa2de_2-2-3-1-1">strGrid[3][1] = "S";</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2de_2_opt_c">
                  <div class="para" id="qa2de_2-2-3-2-1">This would be true if row and column indices started at 1 instead of 0.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qa2de_2_opt_d" data-correct="">
                  <div class="para" id="qa2de_2-2-4-1-1">strGrid[2][0] = "S";</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2de_2_opt_d">
                  <div class="para" id="qa2de_2-2-4-2-1">In row-major order the row is specified first followed by the column.  Row and column indices start with 0.  So letterGrid[2][0] is the 3rd row and 1st column.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qa2de_2_opt_e">
                  <div class="para" id="qa2de_2-2-5-1-1">strGrid[0][0] = "S";</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2de_2_opt_e">
                  <div class="para" id="qa2de_2-2-5-2-1">This would set the element at the first row and column.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.36.1.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qa2de_3" data-multipleanswers="false">
                <div class="para" id="qa2de_3-1-1">8-8-3: How would you get the value 6 out of the following array <code class="code-inline tex2jax_ignore">int[][] a = { {2, 4, 6, 8}, {1, 2, 3, 4}};</code>?</div>
                <li data-component="answer" id="csawesome2_2_qa2de_3_opt_a">
                  <div class="para" id="qa2de_3-2-1-1-1">a[0][3]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2de_3_opt_a">
                  <div class="para" id="qa2de_3-2-1-2-1">This would be true if the row index started at 0, but the column index started at 1.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qa2de_3_opt_b">
                  <div class="para" id="qa2de_3-2-2-1-1">a[1][3]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2de_3_opt_b">
                  <div class="para" id="qa2de_3-2-2-2-1">Both the row and column indices start with 0.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qa2de_3_opt_c" data-correct="">
                  <div class="para" id="qa2de_3-2-3-1-1">a[0][2]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2de_3_opt_c">
                  <div class="para" id="qa2de_3-2-3-2-1">The value 6 is at row 0 and column 2.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qa2de_3_opt_d">
                  <div class="para" id="qa2de_3-2-4-1-1">a[2][0]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2de_3_opt_d">
                  <div class="para" id="qa2de_3-2-4-2-1">The row index is specified first, then the column index.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qa2de_3_opt_e">
                  <div class="para" id="qa2de_3-2-5-1-1">a[3][1]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qa2de_3_opt_e">
                  <div class="para" id="qa2de_3-2-5-2-1">The row index is specified first and the indices start at 0.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.36.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qa2dm_1" data-multipleanswers="false"><div class="para" id="qa2dm_1-1-1">8-8-4: Given the following code segment, what is the value of sum after this code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int[][] matrix = { {1,1,2,2},{1,2,2,4},{1,2,3,4},{1,4,1,2}};

int sum = 0;
int col = matrix[0].length - 2;
for (int row = 0; row &lt; 4; row++)
{
   sum = sum + matrix[row][col];
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qa2dm_1_opt_a"><div class="para" id="qa2dm_1-2-1-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_qa2dm_1_opt_a"><div class="para" id="qa2dm_1-2-1-2-1">This would be correct if the variable col was 0 because then it would add 1 + 1 + 1 + 1 which is 4.</div></li><li data-component="answer" id="csawesome2_2_qa2dm_1_opt_b" data-correct=""><div class="para" id="qa2dm_1-2-2-1-1">8</div></li><li data-component="feedback" id="csawesome2_2_qa2dm_1_opt_b"><div class="para" id="qa2dm_1-2-2-2-1">Since col is matrix[0].length - 2 it is 4 - 2 which is 2.  This code will loop through all the rows and add all the numbers in the third column (index is 2) which is 2  + 2 + 3 + 1 which is 8.</div></li><li data-component="answer" id="csawesome2_2_qa2dm_1_opt_c"><div class="para" id="qa2dm_1-2-3-1-1">9</div></li><li data-component="feedback" id="csawesome2_2_qa2dm_1_opt_c"><div class="para" id="qa2dm_1-2-3-2-1">This would be correct if the variable col was 1 because then it would add 1 + 2 + 2 + 4 which is 9.</div></li><li data-component="answer" id="csawesome2_2_qa2dm_1_opt_d"><div class="para" id="qa2dm_1-2-4-1-1">12</div></li><li data-component="feedback" id="csawesome2_2_qa2dm_1_opt_d"><div class="para" id="qa2dm_1-2-4-2-1">This would be correct if the variable col was 3 becuase then it would add 2 + 4 + 4+ 2 which is 12.</div></li><li data-component="answer" id="csawesome2_2_qa2dm_1_opt_e"><div class="para" id="qa2dm_1-2-5-1-1">10</div></li><li data-component="feedback" id="csawesome2_2_qa2dm_1_opt_e"><div class="para" id="qa2dm_1-2-5-2-1">This would be true if we were adding the values in the 3rd row (row = 2) instead of the 3rd column.  This would be 1 + 2 + 3 + 4 which is 10.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.36.2.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qa2dm_2" data-multipleanswers="false"><div class="para" id="qa2dm_2-1-1">8-8-5: What are the contents of <code class="code-inline tex2jax_ignore">mat</code> after the following code segment has been executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int [][] mat = new int [4][3];
for (int row = 0; row &lt; mat.length; row++)
{
   for (int col = 0; col &lt; mat[0].length; col++)
   {
      if (row &lt; col)
         mat[row][col] = 1;
      else if (row == col)
         mat[row][col] = 2;
      else
         mat[row][col] = 3;
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qa2dm_2_opt_a"><div class="para" id="qa2dm_2-2-1-1-1">{ {2 3 3}, {1 2 3}, {1 1 2}, {1 1 1}}</div></li><li data-component="feedback" id="csawesome2_2_qa2dm_2_opt_a"><div class="para" id="qa2dm_2-2-1-2-1">This woud be true if the code put a 3 in the array when the row index is less than the column index and a 2 in the array when the row and column index are the same, and a 1 in the array when the row index is greater than the column index.</div></li><li data-component="answer" id="csawesome2_2_qa2dm_2_opt_b" data-correct=""><div class="para" id="qa2dm_2-2-2-1-1">{ {2 1 1}, {3 2 1}, {3 3 2}, {3 3 3}}</div></li><li data-component="feedback" id="csawesome2_2_qa2dm_2_opt_b"><div class="para" id="qa2dm_2-2-2-2-1">This code will put a 1 in the array when the row index is less than the column index and a 2 in the array when the row and column index are the same, and a 3 in the array when the row index is greater than the column index.</div></li><li data-component="answer" id="csawesome2_2_qa2dm_2_opt_c"><div class="para" id="qa2dm_2-2-3-1-1">{ {2 1 1 1}, {3 2 1 1}, {3 3 2 1}}</div></li><li data-component="feedback" id="csawesome2_2_qa2dm_2_opt_c"><div class="para" id="qa2dm_2-2-3-2-1">This code creates a 2D array with 4 rows and 3 columns so this can’t be right.</div></li><li data-component="answer" id="csawesome2_2_qa2dm_2_opt_d"><div class="para" id="qa2dm_2-2-4-1-1">{ {2 3 3 3}, {1 2 3 3}, {1 1 2 3}}</div></li><li data-component="feedback" id="csawesome2_2_qa2dm_2_opt_d"><div class="para" id="qa2dm_2-2-4-2-1">This code creates a 2D array with 4 rows and 3 columns so this can’t be right.</div></li><li data-component="answer" id="csawesome2_2_qa2dm_2_opt_e"><div class="para" id="qa2dm_2-2-5-1-1">{ {1 1 1 1}, {2 2 2 2}, {3 3 3 3}}</div></li><li data-component="feedback" id="csawesome2_2_qa2dm_2_opt_e"><div class="para" id="qa2dm_2-2-5-2-1">This code creates a 2D array with 4 rows and 3 columns so this can’t be right.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.36.2.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qa2dm_3" data-multipleanswers="false"><div class="para" id="qa2dm_3-1-1">8-8-6: Given the following code segment, what is the value of sum after this code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int[][] m = { {1,1,1,1},{1,2,3,4},{2,2,2,2},{2,4,6,8}};

int sum = 0;
for (int k = 0; k &lt; m.length; k++)
{
    sum = sum + m[m.length-1-k][1];
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qa2dm_3_opt_a"><div class="para" id="qa2dm_3-2-1-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_qa2dm_3_opt_a"><div class="para" id="qa2dm_3-2-1-2-1">This would be correct if it was adding up all the values in the first row.  Does it?</div></li><li data-component="answer" id="csawesome2_2_qa2dm_3_opt_b"><div class="para" id="qa2dm_3-2-2-1-1">6</div></li><li data-component="feedback" id="csawesome2_2_qa2dm_3_opt_b"><div class="para" id="qa2dm_3-2-2-2-1">This would be correct if it was adding up all the values in column 0.</div></li><li data-component="answer" id="csawesome2_2_qa2dm_3_opt_c" data-correct=""><div class="para" id="qa2dm_3-2-3-1-1">9</div></li><li data-component="feedback" id="csawesome2_2_qa2dm_3_opt_c"><div class="para" id="qa2dm_3-2-3-2-1">This adds all the values in column 1 starting with the one in the last row (row 3).</div></li><li data-component="answer" id="csawesome2_2_qa2dm_3_opt_d"><div class="para" id="qa2dm_3-2-4-1-1">10</div></li><li data-component="feedback" id="csawesome2_2_qa2dm_3_opt_d"><div class="para" id="qa2dm_3-2-4-2-1">This would be correct if it was adding up all the values in the second row.</div></li><li data-component="answer" id="csawesome2_2_qa2dm_3_opt_e"><div class="para" id="qa2dm_3-2-5-1-1">20</div></li><li data-component="feedback" id="csawesome2_2_qa2dm_3_opt_e"><div class="para" id="qa2dm_3-2-5-2-1">This would be correct if it was adding up all the values in the last row.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.36.3.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qa2dh_1" data-multipleanswers="false"><div class="para" id="qa2dh_1-1-1">8-8-7: What are the contents of <code class="code-inline tex2jax_ignore">arr</code> after the following code has been executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int[][] arr = { {3,2,1},{1,2,3}};
for (int row = 1; row &lt; arr.length; row++)
{
   for (int col = 1; col &lt; arr[0].length; col++)
   {
      if (arr[row][col] % 2 == 1)
      {
          arr[row][col] = arr[row][col] + 1;
      }
      if (arr[row][col] % 2 == 0)
      {
          arr[row][col] = arr[row][col] * 2;
      }
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qa2dh_1_opt_a"><div class="para" id="qa2dh_1-2-1-1-1">{ {6, 4, 2}, {2, 4, 6}}</div></li><li data-component="feedback" id="csawesome2_2_qa2dh_1_opt_a"><div class="para" id="qa2dh_1-2-1-2-1">Check the starting values on the nested loops.</div></li><li data-component="answer" id="csawesome2_2_qa2dh_1_opt_b"><div class="para" id="qa2dh_1-2-2-1-1">{ {3, 2, 1}, {1, 4, 6}}</div></li><li data-component="feedback" id="csawesome2_2_qa2dh_1_opt_b"><div class="para" id="qa2dh_1-2-2-2-1">Notice that there are two if’s, not an if and else.</div></li><li data-component="answer" id="csawesome2_2_qa2dh_1_opt_c" data-correct=""><div class="para" id="qa2dh_1-2-3-1-1">{ {3, 2, 1}, {1, 4, 8}}</div></li><li data-component="feedback" id="csawesome2_2_qa2dh_1_opt_c"><div class="para" id="qa2dh_1-2-3-2-1">The first if will change an odd number to an even.  The second if will also execute after an odd number has been made even.  Both loops start at index 1 so this only changes the items in the second row and second and third column.</div></li><li data-component="answer" id="csawesome2_2_qa2dh_1_opt_d"><div class="para" id="qa2dh_1-2-4-1-1">{ {4, 4, 2}, {2, 4, 4}}</div></li><li data-component="feedback" id="csawesome2_2_qa2dh_1_opt_d"><div class="para" id="qa2dh_1-2-4-2-1">Both if’s will execute.  Also, check the bounds on the nested loop.</div></li><li data-component="answer" id="csawesome2_2_qa2dh_1_opt_e"><div class="para" id="qa2dh_1-2-5-1-1">{ {3, 2, 1}, {2, 4, 4}}</div></li><li data-component="feedback" id="csawesome2_2_qa2dh_1_opt_e"><div class="para" id="qa2dh_1-2-5-2-1">Both if’s will execute.  Check the bounds on the inner loop.  When does it stop?</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.36.3.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qa2hard_2" data-multipleanswers="false"><div class="para" id="qa2hard_2-1-1">8-8-8: A two-dimensional array, <code class="code-inline tex2jax_ignore">imagePixels</code>, holds the brightness values for the pixels in an image. The brightness can range from 0 to 255. What does the following method compute?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public int findMax(int[][] imagePixels)
{
   int r, c;
   int i, iMax = 0;

   for (r = 0; r &lt; imagePixels.length; r++)
   {
      for (c = 0; c &lt; imagePixels[0].length; c++)
      {
         i = imagePixels[r][c];
         if (i &gt; iMax)
            iMax = i;
       }
    }
    return iMax;
 }
</code></pre></div><li data-component="answer" id="csawesome2_2_qa2hard_2_opt_a" data-correct=""><div class="para" id="qa2hard_2-2-1-1-1">The maximum brightness value for all pixels in imagePixel</div></li><li data-component="feedback" id="csawesome2_2_qa2hard_2_opt_a"><div class="para" id="qa2hard_2-2-1-2-1">The method works by scanning all the pixels in imagePixels and comparing them to the current iMax value. If the current is greater, it replaces iMax and becomes the new maximum brightness. This is the value that is returned.</div></li><li data-component="answer" id="csawesome2_2_qa2hard_2_opt_b"><div class="para" id="qa2hard_2-2-2-1-1">The column with the greatest brightness sum</div></li><li data-component="feedback" id="csawesome2_2_qa2hard_2_opt_b"><div class="para" id="qa2hard_2-2-2-2-1">This could be accomplished by adding the brightness in the second loop and comparing the sum to iMax after the second loop finishes and before the first loop starts again.</div></li><li data-component="answer" id="csawesome2_2_qa2hard_2_opt_c"><div class="para" id="qa2hard_2-2-3-1-1">The most frequent brightness value in imagePixels</div></li><li data-component="feedback" id="csawesome2_2_qa2hard_2_opt_c"><div class="para" id="qa2hard_2-2-3-2-1">To do this you would need a third loop and an array, 256 in size. In the second loop you would track how many pixels of a certain brightness had occurred using, countBright[i]++, and then in the third loop find the item in countBright with the highest value.</div></li><li data-component="answer" id="csawesome2_2_qa2hard_2_opt_d"><div class="para" id="qa2hard_2-2-4-1-1">The row with the greatest brightness sum</div></li><li data-component="feedback" id="csawesome2_2_qa2hard_2_opt_d"><div class="para" id="qa2hard_2-2-4-2-1">Firstly, you would need to traverse the 2D array in the opposite order, going through the rows instead of the columns. Then, you would sum each row’s brightness in the second loop and compare it to the max in the first loop.</div></li><li data-component="answer" id="csawesome2_2_qa2hard_2_opt_e"><div class="para" id="qa2hard_2-2-5-1-1">The sum of the total brightness of imagePixels</div></li><li data-component="feedback" id="csawesome2_2_qa2hard_2_opt_e"><div class="para" id="qa2hard_2-2-5-2-1">This would be accomplished by instead of having an if statement to track the currentmax, simply using, sum += imagePixels[r][c];</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-8-38</id>
      <title>Mixed Up Code Practice</title>
      <question optional="yes">
        <label>Exercise 4.37.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch12ex1muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch12ex1muc-1-1">The following method should reverse the order of the characters in the given string – so “abcd” should become “dcba”.  But, the blocks have been mixed up.  Drag the blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static String reverse(String myText)
{
    if (myText.length() == 0)
    {
---
        return "";
---
    } //end if
---
    else
    {
---
        return reverse(myText.substring(1)) + myText.charAt(0);
---
    } //end else
} //end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.37.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch12ex2muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch12ex2muc-1-1">The following method should multiply the two passed-in positive integers (using the fact that multiplication is repeated addition) – so multiply(3, 4) should become 12 (3+3+3+3).  But the blocks have been mixed up and include one extra block that is not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static int multiply(int a, int b)
{
---
    if (b == 0)
    {
---
      return 0;
---
      return 1;  #distractor
---
    } //end if
---
    else
    {
---
      return multiply(a, b - 1) + a;
---
    } //end else
} //end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.37.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch12ex3muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch12ex3muc-1-1">The following method should add up all of the elements in the passed-in array – so {1,2,3,12} should return 18 (Note when the method is called, the index will always start off as 0).  But the blocks have been mixed up and include two extra blocks that are not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static int sumElements(int[] arr, int index)
{
---
    if (index &gt;= arr.length)
    {
        return 0;
    } //end if
---
    if (index &gt;= arr.length) 
    {
        return 1;
    } //end if #distractor
---
    else
    {
---
        return sumElements(arr, index + 1) + arr[index];
---
        return sumElements(arr, index) + arr[index];  #distractor
---
    } //end else
} //end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.37.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch12ex4muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch12ex4muc-1-1">The following method should remove any occurrence of an asterisk “*” from a passed-in string – so “ab*c**d” should become “abcd”.  But the blocks have been mixed up.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static String removeStar(String myText)
{
---
    if (myText.length() == 0)
    {
       return "";
    } //end if
---
    if (myText.charAt(0) == '*')
    {
       return removeStar(myText.substring(1));
    } //end if
---
    return myText.charAt(0) + removeStar(myText.substring(1));
---
} //end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.37.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch12ex5muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch12ex5muc-1-1">The following method should return the base multiplied power times. In other words, the base ^ power – so exponent(2, 4) should return 16.  But the blocks have been mixed up and include one extra block that is not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static int exponent(int base, int power)
{
---
    if (power == 0)
    {
---
        return 1;
---
        return 0;  #distractor
---
    } //end if
    else
    {
---
        return base * exponent(base, power - 1);
---
    } //end else
} //end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.37.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch12ex6muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch12ex6muc-1-1">The following method should return the number of times “5” is an element in the passed-in array – so {1, 5, 7, 14, 5} will return 2 (Note that when the method is called the index will always start off as 0).  But the blocks have been mixed up and include two extra blocks that are not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static int numFiveOccurrence(int[] arr, int index)
{
---
    if (index &gt;= arr.length)
    {
---
    if (index &lt;= arr.length) 
    { #distractor
---
        return 0;
---
    } //end if
    else
    {
---
        if (arr[index] == 5)
        {
            return numFiveOccurrence(arr, index + 1) + 1;
        }
---
        return numFiveOccurrence(arr, index + 1);
---
        return numFiveOccurrence(arr, index);  #distractor
---
    } //end else
} //end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.37.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch12ex7muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch12ex7muc-1-1">The following method should repeat the passed-in string a set number of times – so repeatThis(“hi”, 3) should return “hihihi”.  But the blocks have been mixed up and include two extra blocks that are not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static String repeatThis(String s, int i)
{
---
    if (i == 0)
    {
---
    if (i &gt;= 0) 
    { #distractor
---
       return "";
---
    } //end if
    else
    {
---
       return s + repeatThis(s, i-1);
---
       return repeatThis(s, i-1);  #distractor
---
    } //end else
} //end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.37.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch12ex8muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch12ex8muc-1-1">The following method should return number of times the character ” x ” is in a String – so findNumX(“xHihxixx”) should return 4.  But the blocks have been mixed up and include one extra block that is not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static int findNumX(String s)
{
---
    if (s.length() == 0)
    {
        return 0;
    } //end if
---
    else
    {
---
        if (s.charAt(0) == 'x')
        {
            return 1 + findNumX(s.substring(1));
        } //end if
---
        if (s.charAt(0) = 'x') 
        {
            return 1 + findNumX(s.substring(0));
        } //end if #distractor
---
        return findNumX(s.substring(1));
---
    } //end else
} //end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.37.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch12ex9muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch12ex9muc-1-1">The following method should return a string counting from 1 to the specified number – so countTo(4) should return “1…2…3…4…”.  But the blocks have been mixed up and include two extra blocks that are not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static String countTo(int x)
{
---
    if (x == 0)
    {
---
    if (x == 1) 
    { #distractor
---
        return "";
---
    } //end if
    else
    {
---
        return countTo(x - 1) + x + "...";
---
        return countTo(x - 1) + (x - 1) + "...";  #distractor
---
    } //end else
} //end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.37.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch12ex10muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch12ex10muc-1-1">The following method should take an passed-in number and return a string such that only the even numbers are still present. All of the odd digits should be replaced with a “_” – so 4321 should become <code class="code-inline tex2jax_ignore">4_2_</code>.  But the blocks have been mixed up and include two extra blocks that are not needed in a correct solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public static String displayEvenDigits(int num)
{
---
    if (num == 0)
    {
        return "";
    } //end if
---
    else
    {
---
        if ((num % 10) % 2 == 0)
        {
---
        if ((num % 10) % 2 == 1) 
        { #distractor
---
            return "" + displayEvenDigits(num / 10) + (num % 10);
        } //end if
---
        return displayEvenDigits(num / 10) + "_";
---
        return "_" + displayEvenDigits(num / 10);  #distractor
---
    } //end else
} //end method</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-8-39</id>
      <title>More Mixed Up Code Practice</title>
      <question optional="yes">
        <label>Exercise 4.38.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch12p2ex1muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch12p2ex1muc-1-1">The following method should recursively reverse the string that is passed in the parameter and return the reversed string.  It if is passed “abcd” it should return “dcba”.  It has one extra block that is not needed in a correct solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public String reverse(String str)
{
---
    if(str.length() &lt;= 1)
    {
---
        return str;
---
    }
    return reverse(str.substring(1)) + str.charAt(0);
---
}
---
    return reverse(str.substring(1));  #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.38.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch12p2ex2muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch12p2ex2muc-1-1">The following method should recursively return the fibonacci sequence of the first n numbers.  The fibonacci (f) of f(0) is 0 and of f(1) is 1.  The fibonacci of any other number is f(n-1) + f(n-2).  It has one extra block that is not needed in a correct solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public int fibonacci(int n)
{
---
    if(n == 0)
    {
---
        return 0;
---
    }
    else if(n == 1)
    {
---
        return 1;
---
    }
    else
    {
---
        return fibonacci(n - 1) + fibonacci(n - 2);
---
    }
}
---
     return fibonacci(n - 1);  #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.38.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch12p2ex3muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch12p2ex3muc-1-1">The following method should recursively replace all the spaces in the String str with dashes.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public String spaceDash(String str)
{
---
    if(str.length == 0)
    {
---
        return str;
---
    }
    else if(str.charAt(0) ==  ' ')
    {
---
        return "-" + spaceDash(str.substring(1));
---
    }
    else
    {
---
        return str.charAt(0) + spaceDash(str.substring(1));
---
    }
}
---
     return "-" + str.substring(1);  #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.38.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch12p2ex4muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch12p2ex4muc-1-1">The following method should recursively count and return the number of 2’s that are present in the number.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public int numberOf2s(int n)
{
---
    if(n == 0)
    {
---
        return 0;
---
    }
    else if(n % 10 == 2)
    {
---
        return 1 + numberOf2s(n / 10);
---
    }
    else
    {
---
        return numberOf2s(n / 10);
---
    }
}
---
     return 1 + numberOf2s(n % 10);  #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.38.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch12p2ex5muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch12p2ex5muc-1-1">The following method should recursively find and return the sum of the digits of int n.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public int sum(int n)
{
---
    if(n / 10 == 0)
    {
---
        return n;
---
    }
    else
    {
---
        return sum(n / 10) + n % 10;
---
    }
}
---
     return 1 + sum(n % 10);  #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.38.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch12p2ex6muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch12p2ex6muc-1-1">The following method should recursively find and return the number of even digits in int n.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public int evenDigits(int n)
{
---
    if(n / 10 == 0)
    {
---
        if(n % 2 == 0)
        {
---
           return 1;
---
        }
        else
        {
            return 0;
        }
---
    }
    else if((n % 10) % 2 == 0)
    {
---
        return evenDigits(n / 10) + 1;
---
    }
    else
    {
---
        return evenDigits(n / 10);
---
    }
}</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.38.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch12p2ex7muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch12p2ex7muc-1-1">The following method should recursively find and print the factorial of int n. It has 1 extra block of code.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public int factorial(int n)
{
---
    if(n == 1)
    {
---
        return 1;
---
    }
    else
    {
---
        return n * factorial(n - 1);
---
    }
}
---
     return 1 + factorial(n % 10);  #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-001477</id>
      <title>Toggle Mixed Up or Write Code Practice</title>
    </subchapter>
    <subchapter>
      <id>csawesome2-8-41</id>
      <title>Code Practice for Recursion</title>
      <question optional="yes">
        <label>Exercise 4.40.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-8-41-3-1-1-1">Replace the “ADD CODE HERE” below with the code to complete the findSum method. The method should take the sum of every value that is less than or equal to n. For example, findSum(3) should return 6. The output of the program should be 15.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Recursion
{
    public static int findSum(int n)
    {
        // write code here
    }

    public static void main(String[] args)
    {
        System.out.println(findSum(5));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "15\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>exercises</id>
      <title>Exercises</title>
      <question optional="yes">
        <label>Exercise 4.41.1.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_rec_base2">
                <span data-question="">
                  <div class="para" id="rec_base2-1-1">Click on the line or lines that contain the test for the base case</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="rec_base2-2-1">When a base case test is true a value is returned and the recursion stops</div>
                </span>
                <pre>
          <span data-incorrect="">public static int mystery(int n)</span>
        

          <span data-incorrect="">{</span>
        

          <span data-correct="">if (n == 0)</span>
        

          <span data-incorrect="">{</span>
        

          <span data-incorrect="">return 1;</span>
        

          <span data-incorrect="">}</span>
        

          <span data-incorrect="">else</span>
        

          <span data-incorrect="">{</span>
        

          <span data-incorrect="">return 2 * mystery (n - 1);</span>
        

          <span data-incorrect="">}</span>
        

          <span data-incorrect="">}</span>
        
</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.41.1.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_rec_base3">
                <span data-question="">
                  <div class="para" id="rec_base3-1-1">Click on the line or lines that contain the test for the base case</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="rec_base3-2-1">When a base case test is true a value is returned and the recursion stops</div>
                </span>
                <pre>
          <span data-incorrect="">public static int bunnyEars(int bunnies)</span>
        

          <span data-incorrect="">{</span>
        

          <span data-correct="">if (bunnies == 0)</span>
        

          <span data-incorrect="">{</span>
        

          <span data-incorrect="">return 0;</span>
        

          <span data-incorrect="">}</span>
        

          <span data-correct="">else if (bunnies == 1)</span>
        

          <span data-incorrect="">{</span>
        

          <span data-incorrect="">return 2;</span>
        

          <span data-incorrect="">}</span>
        

          <span data-incorrect="">else</span>
        

          <span data-incorrect="">{</span>
        

          <span data-incorrect="">return 2 + bunnyEars(bunnies - 1);</span>
        

          <span data-incorrect="">}</span>
        

          <span data-incorrect="">}</span>
        
</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.41.1.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_rec_base4">
                <span data-question="">
                  <div class="para" id="rec_base4-1-1">Click on the line or lines that contain the test for the base case</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="rec_base4-2-1">When a base case test is true a value is returned and the recursion stops</div>
                </span>
                <pre>
          <span data-incorrect="">public static void mystery (int x) {</span>
        

          <span data-incorrect="">System.out.print(x % 10);</span>
        

          <span data-correct="">if ((x / 10) != 0)</span>
        

          <span data-incorrect="">{</span>
        

          <span data-incorrect="">mystery(x / 10);</span>
        

          <span data-incorrect="">}</span>
        

          <span data-incorrect="">System.out.print(x % 10);</span>
        

          <span data-incorrect="">}</span>
        
</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.41.1.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone clickablearea_section">
              <div data-component="clickablearea" data-question_label="" style="visibility: hidden;" id="csawesome2_2_rec_base5">
                <span data-question="">
                  <div class="para" id="rec_base5-1-1">Click on the line or lines that contain the test for the base case</div>
                </span>
                <span data-feedback="">
                  <div class="para" id="rec_base5-2-1">When a base case test is true a value is returned and the recursion stops</div>
                </span>
                <pre>
          <span data-incorrect="">public static int mystery(String str)</span>
        

          <span data-incorrect="">{</span>
        

          <span data-correct="">if (str.length() == 1)</span>
        

          <span data-incorrect="">{</span>
        

          <span data-incorrect="">return 0;</span>
        

          <span data-incorrect="">}</span>
        

          <span data-incorrect="">else</span>
        

          <span data-incorrect="">{</span>
        

          <span data-incorrect="">if (str.substring(0, 1).equals("y"))</span>
        

          <span data-incorrect="">{</span>
        

          <span data-incorrect="">return 1 + mystery (str.substring(1));</span>
        

          <span data-incorrect="">}</span>
        

          <span data-incorrect="">else</span>
        

          <span data-incorrect="">{</span>
        

          <span data-incorrect="">return mystery(str.substring(1));</span>
        

          <span data-incorrect="">}</span>
        

          <span data-incorrect="">}</span>
        

          <span data-incorrect="">}</span>
        
</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.41.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qre_1" data-multipleanswers="false"><div class="para" id="qre_1-1-1">10-7-2-1: Which line has the recursive call?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static int factorial(int n)
{
    if (n == 0)
    {
        return 1;
    }
    else
    {
        return n * factorial(n-1);
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qre_1_opt_a"><div class="para" id="qre_1-2-1-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qre_1_opt_a"><div class="para" id="qre_1-2-1-2-1">This is the method declaration.  Look for a call to the same method in the body of the method.</div></li><li data-component="answer" id="csawesome2_2_qre_1_opt_b"><div class="para" id="qre_1-2-2-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_qre_1_opt_b"><div class="para" id="qre_1-2-2-2-1">This is a conditional, not a method call.</div></li><li data-component="answer" id="csawesome2_2_qre_1_opt_c"><div class="para" id="qre_1-2-3-1-1">5</div></li><li data-component="feedback" id="csawesome2_2_qre_1_opt_c"><div class="para" id="qre_1-2-3-2-1">This is a return statement, not a method call.</div></li><li data-component="answer" id="csawesome2_2_qre_1_opt_d" data-correct=""><div class="para" id="qre_1-2-4-1-1">9</div></li><li data-component="feedback" id="csawesome2_2_qre_1_opt_d"><div class="para" id="qre_1-2-4-2-1">This line contains a call to the same method which makes this method recursive.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.41.2.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qre_2" data-multipleanswers="false"><div class="para" id="qre_2-1-1">10-7-2-2: Which line has the recursive call?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public String starString(int n)
{
    if (n == 0)
    {
        return "*";
    }
    else
    {
        return starString(n - 1) + starString(n - 1);
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qre_2_opt_a"><div class="para" id="qre_2-2-1-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qre_2_opt_a"><div class="para" id="qre_2-2-1-2-1">This is the method declaration.  Look for a call to the same method in the body of the method.</div></li><li data-component="answer" id="csawesome2_2_qre_2_opt_b"><div class="para" id="qre_2-2-2-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_qre_2_opt_b"><div class="para" id="qre_2-2-2-2-1">This is a conditional, not a method call.</div></li><li data-component="answer" id="csawesome2_2_qre_2_opt_c"><div class="para" id="qre_2-2-3-1-1">5</div></li><li data-component="feedback" id="csawesome2_2_qre_2_opt_c"><div class="para" id="qre_2-2-3-2-1">This is a return statement, not a method call.</div></li><li data-component="answer" id="csawesome2_2_qre_2_opt_d"><div class="para" id="qre_2-2-4-1-1">7</div></li><li data-component="feedback" id="csawesome2_2_qre_2_opt_d"><div class="para" id="qre_2-2-4-2-1">This is an else which is part of a conditional, not a method call.</div></li><li data-component="answer" id="csawesome2_2_qre_2_opt_e" data-correct=""><div class="para" id="qre_2-2-5-1-1">9</div></li><li data-component="feedback" id="csawesome2_2_qre_2_opt_e"><div class="para" id="qre_2-2-5-2-1">This line contains a call to the same method which makes this method recursive.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.41.2.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qre_3" data-multipleanswers="false"><div class="para" id="qre_3-1-1">10-7-2-3: How many recursive calls does the following method contain?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static int fibonacci(int n)
{
    if (n == 0)
    {
        return 0;
    }
    else if (n == 1)
    {
        return 1;
    }
    else
    {
        return fibonacci(n-1) + fibonacci(n-2);
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qre_3_opt_a"><div class="para" id="qre_3-2-1-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_qre_3_opt_a"><div class="para" id="qre_3-2-1-2-1">Look at line 13 more closely.</div></li><li data-component="answer" id="csawesome2_2_qre_3_opt_b"><div class="para" id="qre_3-2-2-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qre_3_opt_b"><div class="para" id="qre_3-2-2-2-1">Many recursive methods only have one recursive call.  But, this one has two.</div></li><li data-component="answer" id="csawesome2_2_qre_3_opt_c" data-correct=""><div class="para" id="qre_3-2-3-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_qre_3_opt_c"><div class="para" id="qre_3-2-3-2-1">Line 13 has two calls to fibonacci.</div></li><li data-component="answer" id="csawesome2_2_qre_3_opt_d"><div class="para" id="qre_3-2-4-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_qre_3_opt_d"><div class="para" id="qre_3-2-4-2-1">There are not 3 calls to fibonacci.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.41.2.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qre_4" data-multipleanswers="false"><div class="para" id="qre_4-1-1">10-7-2-4: How many recursive calls does the following method contain?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static int multiplyEvens(int n)
{
    if (n == 1)
    {
        return 2;
    }
    else
    {
        return 2 * n * multiplyEvens(n - 1);
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qre_4_opt_a"><div class="para" id="qre_4-2-1-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_qre_4_opt_a"><div class="para" id="qre_4-2-1-2-1">Look for a call to the same method in the body of the method.</div></li><li data-component="answer" id="csawesome2_2_qre_4_opt_b" data-correct=""><div class="para" id="qre_4-2-2-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qre_4_opt_b"><div class="para" id="qre_4-2-2-2-1">Line 9 has one call to multiplyEvens.</div></li><li data-component="answer" id="csawesome2_2_qre_4_opt_c"><div class="para" id="qre_4-2-3-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_qre_4_opt_c"><div class="para" id="qre_4-2-3-2-1">Where do you see 2 calls to multiplyEvens?</div></li><li data-component="answer" id="csawesome2_2_qre_4_opt_d"><div class="para" id="qre_4-2-4-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_qre_4_opt_d"><div class="para" id="qre_4-2-4-2-1">Where do you see 3 calls to multiplyEvens?</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.41.3.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qrm_1" data-multipleanswers="false"><div class="para" id="qrm_1-1-1">10-7-3-1: Given the following method declaration, which of the following is printed as the result of the call <code class="code-inline tex2jax_ignore">mystery(1234)</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">//precondition:  x &gt;=0
public static void mystery (int x)
{
    System.out.print(x % 10);

    if ((x / 10) != 0)
    {
        mystery(x / 10);
    }
    System.out.print(x % 10);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qrm_1_opt_a"><div class="para" id="qrm_1-2-1-1-1">1441</div></li><li data-component="feedback" id="csawesome2_2_qrm_1_opt_a"><div class="para" id="qrm_1-2-1-2-1">The first call to mystery with the integer 1234 will print 1234 % 10. The ’%’ means remainder. The remainder of 1234 divided by 10 is 4 so the first thing printed must be 4.</div></li><li data-component="answer" id="csawesome2_2_qrm_1_opt_b" data-correct=""><div class="para" id="qrm_1-2-2-1-1">43211234</div></li><li data-component="feedback" id="csawesome2_2_qrm_1_opt_b"><div class="para" id="qrm_1-2-2-2-1">This has a recursive call which means that the method calls itself when (x / 10) is greater than or equal to zero. Each time the method is called it prints the remainder of the passed value divided by 10 and then calls the method again with the result of the integer division of the passed number by 10 (which throws away the decimal part). After the recursion stops by (x / 10) == 0 the method will print the remainder of the passed value divided by 10 again.</div></li><li data-component="answer" id="csawesome2_2_qrm_1_opt_c"><div class="para" id="qrm_1-2-3-1-1">3443</div></li><li data-component="feedback" id="csawesome2_2_qrm_1_opt_c"><div class="para" id="qrm_1-2-3-2-1">The first call to mystery with the integer 1234 will print 1234 % 10. The ’%’ means remainder. The remainder of 1234 divided by 10 is 4 so the first thing printed must be 4.</div></li><li data-component="answer" id="csawesome2_2_qrm_1_opt_d"><div class="para" id="qrm_1-2-4-1-1">12344321</div></li><li data-component="feedback" id="csawesome2_2_qrm_1_opt_d"><div class="para" id="qrm_1-2-4-2-1">The first call to mystery with the integer 1234 will print 1234 % 10. The ’%’ means remainder. The remainder of 1234 divided by 10 is 4 so the first thing printed must be 4.</div></li><li data-component="answer" id="csawesome2_2_qrm_1_opt_e"><div class="para" id="qrm_1-2-5-1-1">Many digits are printed due to infinite recursion.</div></li><li data-component="feedback" id="csawesome2_2_qrm_1_opt_e"><div class="para" id="qrm_1-2-5-2-1">When the recursive call to mystery(1) occurs (the 4th call to mystery), the division of x /10 equals .01--this becomes 0 because this is integer division and the remainder is thrown away. Therefore the current call will be completed and all of the previous calls to mystery will be completed.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.41.3.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qrm_2" data-multipleanswers="false"><div class="para" id="qrm_2-1-1">10-7-3-2: Given the following method declaration, what value is returned as the result of the call <code class="code-inline tex2jax_ignore">mystery(5)</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static int mystery(int n)
{
    if (n == 0)
    {
        return 1;
    }
    else
    {
        return 3 * mystery (n - 1);
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qrm_2_opt_a" data-correct=""><div class="para" id="qrm_2-2-1-1-1">243</div></li><li data-component="feedback" id="csawesome2_2_qrm_2_opt_a"><div class="para" id="qrm_2-2-1-2-1">For the call mystery(5), n != 0 so the else statement is executed. This results in the next recursive call of mystery(4). This will continue until the call mystery(0) is executed. At this point, the value 1 will be returned. Then each call of mystery can return with the 3 * the result of the recursive call. So this method will compute 3 to the given power.</div></li><li data-component="answer" id="csawesome2_2_qrm_2_opt_b"><div class="para" id="qrm_2-2-2-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_qrm_2_opt_b"><div class="para" id="qrm_2-2-2-2-1">This can never be 0 because the stopping condition returns 1 when you call mystery(0)</div></li><li data-component="answer" id="csawesome2_2_qrm_2_opt_c"><div class="para" id="qrm_2-2-3-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_qrm_2_opt_c"><div class="para" id="qrm_2-2-3-2-1">This would only be true if you called mystery(1)</div></li><li data-component="answer" id="csawesome2_2_qrm_2_opt_d"><div class="para" id="qrm_2-2-4-1-1">81</div></li><li data-component="feedback" id="csawesome2_2_qrm_2_opt_d"><div class="para" id="qrm_2-2-4-2-1">This would be true if you called mystery(4)</div></li><li data-component="answer" id="csawesome2_2_qrm_2_opt_e"><div class="para" id="qrm_2-2-5-1-1">27</div></li><li data-component="feedback" id="csawesome2_2_qrm_2_opt_e"><div class="para" id="qrm_2-2-5-2-1">This would be true if you called mystery(3)</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.41.3.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qrm_3" data-multipleanswers="false"><div class="para" id="qrm_3-1-1">10-7-3-3: Given the following method declaration, what value is returned as the result of the call <code class="code-inline tex2jax_ignore">product(5)</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static int product(int n)
{
   if (n &lt;= 1)
   {
       return 1;
   }
   else
   {
       return n * product(n - 2);
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qrm_3_opt_a"><div class="para" id="qrm_3-2-1-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qrm_3_opt_a"><div class="para" id="qrm_3-2-1-2-1">The value 1 will only be returned when the initial call to product is less than or equal to 1.</div></li><li data-component="answer" id="csawesome2_2_qrm_3_opt_b"><div class="para" id="qrm_3-2-2-1-1">10</div></li><li data-component="feedback" id="csawesome2_2_qrm_3_opt_b"><div class="para" id="qrm_3-2-2-2-1">If you assume the purpose of the method is to compute n * 2, this is correct, but the product method does not do this. Be sure to trace the code to see what happens.</div></li><li data-component="answer" id="csawesome2_2_qrm_3_opt_c"><div class="para" id="qrm_3-2-3-1-1">25</div></li><li data-component="feedback" id="csawesome2_2_qrm_3_opt_c"><div class="para" id="qrm_3-2-3-2-1">If you assume the purpose of the method is to compute n * n this is correct, but the product method does not do this. Be sure to trace the code to see what happens.</div></li><li data-component="answer" id="csawesome2_2_qrm_3_opt_d"><div class="para" id="qrm_3-2-4-1-1">3125</div></li><li data-component="feedback" id="csawesome2_2_qrm_3_opt_d"><div class="para" id="qrm_3-2-4-2-1">If you assume the purpose of the method is to compute n ^ n, this would be correct. But product does not do this. Be sure to trace the code to see what happens.</div></li><li data-component="answer" id="csawesome2_2_qrm_3_opt_e" data-correct=""><div class="para" id="qrm_3-2-5-1-1">15</div></li><li data-component="feedback" id="csawesome2_2_qrm_3_opt_e"><div class="para" id="qrm_3-2-5-2-1">The result from product(5) is 5 * product(3) which is 3 * product(1) which is 1 so the answer is 1 * 3 * 5 = 15.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.41.3.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qrm_4" data-multipleanswers="false"><div class="para" id="qrm_4-1-1">10-7-3-4: Given the following method declaration, what value is returned as the result of the call <code class="code-inline tex2jax_ignore">f(5)</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static int f(int n)
{
   if (n == 0)
   {
       return 0;
   }
   else if (n == 1)
   {
       return 1;
   }
   else
   {
       return f(n-1) + f(n-2);
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qrm_4_opt_a"><div class="para" id="qrm_4-2-1-1-1">8</div></li><li data-component="feedback" id="csawesome2_2_qrm_4_opt_a"><div class="para" id="qrm_4-2-1-2-1">This would be true if it was f(6) not f(5).</div></li><li data-component="answer" id="csawesome2_2_qrm_4_opt_b"><div class="para" id="qrm_4-2-2-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_qrm_4_opt_b"><div class="para" id="qrm_4-2-2-2-1">This would be true if it was f(4) not f(5).</div></li><li data-component="answer" id="csawesome2_2_qrm_4_opt_c"><div class="para" id="qrm_4-2-3-1-1">There is no result because of infinite recursion.</div></li><li data-component="feedback" id="csawesome2_2_qrm_4_opt_c"><div class="para" id="qrm_4-2-3-2-1">This method will stop when n equals 0 or 1.</div></li><li data-component="answer" id="csawesome2_2_qrm_4_opt_d" data-correct=""><div class="para" id="qrm_4-2-4-1-1">5</div></li><li data-component="feedback" id="csawesome2_2_qrm_4_opt_d"><div class="para" id="qrm_4-2-4-2-1">This is the Fibonacci method which returns 0 for 0 and 1 for 1 and Fibonacci(n-1) + Fibonacci(n-2) for the rest of the numbers.</div></li><li data-component="answer" id="csawesome2_2_qrm_4_opt_e"><div class="para" id="qrm_4-2-5-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_qrm_4_opt_e"><div class="para" id="qrm_4-2-5-2-1">This would be true if it was f(0) not f(5).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.41.4.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qrh_1" data-multipleanswers="false"><div class="para" id="qrh_1-1-1">10-7-4-1: Given the following method declaration, this method will return true if and only if:</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static boolean check(String s)
{
   return s.length() &gt;= 2 &amp;&amp;
          (s.charAt(0) == s.charAt(1) ||
           check(s.substring(1)));
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qrh_1_opt_a"><div class="para" id="qrh_1-2-1-1-1">The string s contains two or more of the same characters.</div></li><li data-component="feedback" id="csawesome2_2_qrh_1_opt_a"><div class="para" id="qrh_1-2-1-2-1">It is not enough for s to contain two of the same characters, they must be adjacent to satisfy s.charAt(0) == s.charAt(1).</div></li><li data-component="answer" id="csawesome2_2_qrh_1_opt_b"><div class="para" id="qrh_1-2-2-1-1">The string s starts with two or more of the same characters.</div></li><li data-component="feedback" id="csawesome2_2_qrh_1_opt_b"><div class="para" id="qrh_1-2-2-2-1">It is not neccessary for the adjacent characters to be at the start of the string.</div></li><li data-component="answer" id="csawesome2_2_qrh_1_opt_c" data-correct=""><div class="para" id="qrh_1-2-3-1-1">The string s contains two or more of the same character that are next to each other.</div></li><li data-component="feedback" id="csawesome2_2_qrh_1_opt_c"><div class="para" id="qrh_1-2-3-2-1">This method will return true when s has at least 2 characters in it and at least 2 characters are the same and are adjacent.</div></li><li data-component="answer" id="csawesome2_2_qrh_1_opt_d"><div class="para" id="qrh_1-2-4-1-1">The string s ends with two or more of the same characters</div></li><li data-component="feedback" id="csawesome2_2_qrh_1_opt_d"><div class="para" id="qrh_1-2-4-2-1">It is not neccessary for the adjacent characters to be at the end of the string.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.41.4.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qrh_2" data-multipleanswers="false"><div class="para" id="qrh_2-1-1">10-7-4-2: Given the following method declaration, what will <code class="code-inline tex2jax_ignore">redo(82, 3)</code> return?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static int redo(int i, int j)
{
    if (i == 0)
    {
        return 0;
    }
    else
    {
        return redo(i / j, j) + 1;
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qrh_2_opt_a" data-correct=""><div class="para" id="qrh_2-2-1-1-1">5</div></li><li data-component="feedback" id="csawesome2_2_qrh_2_opt_a"><div class="para" id="qrh_2-2-1-2-1">The first time the method is called, i is not equal to 0, so the method makes a recursive call to itself, with the value of 82/3 which equals 27 due to integer division.  This is still not equal to 0, so the method calls itself with the first parameter equal to 9, then 3, then 1. Finally, the method is called with the first parameter of 1/3 which equals 0 due to integer division which throws away any decimal part. Each method call adds 1 to the result, except for the final call when i is equal to 0.</div></li><li data-component="answer" id="csawesome2_2_qrh_2_opt_b"><div class="para" id="qrh_2-2-2-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_qrh_2_opt_b"><div class="para" id="qrh_2-2-2-2-1">Each time the method is called when i is not equal to 0, the return value is incremented. This happens 5 times, with i equal to 81, 27, 9, 3, and 1.</div></li><li data-component="answer" id="csawesome2_2_qrh_2_opt_c"><div class="para" id="qrh_2-2-3-1-1">6</div></li><li data-component="feedback" id="csawesome2_2_qrh_2_opt_c"><div class="para" id="qrh_2-2-3-2-1">The return value is not incremented the last time the method is called, when i is equal to 0.</div></li><li data-component="answer" id="csawesome2_2_qrh_2_opt_d"><div class="para" id="qrh_2-2-4-1-1">7</div></li><li data-component="feedback" id="csawesome2_2_qrh_2_opt_d"><div class="para" id="qrh_2-2-4-2-1">The method only executes 6 times, with the return value incremented each time i is not equal to zero</div></li><li data-component="answer" id="csawesome2_2_qrh_2_opt_e"><div class="para" id="qrh_2-2-5-1-1">The method never returns due to infinite recursion.</div></li><li data-component="feedback" id="csawesome2_2_qrh_2_opt_e"><div class="para" id="qrh_2-2-5-2-1">Infinite recursion would happen if the method never reached its base case where i is equal to 0. This would be true if the division could result in a constantly shrinking fraction, but integer division truncates the fractional portion of the division.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>college-board-celebrity-and-data-labs-1</id>
      <title>College Board Celebrity and Data Labs</title>
    </subchapter>
    <subchapter>
      <id>college-board-picture-lab-and-steganography-lab-for-2d-arrays</id>
      <title>College Board Picture Lab and Steganography Lab for 2D Arrays</title>
      <question>
        <label>Exercise 4.43.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_picture-lab-A1-1" data-multipleanswers="false">
                <div class="para" id="picture-lab-A1-1-1-1">6-4-7-1: How many bits does it take to represent the values from 0 to 255? See <a class="external" href="https://mobile-csp.org/webapps/numbers/binaryConverter.html" target="_blank">https://mobile-csp.org/webapps/numbers/binaryConverter.html</a><details class="ptx-footnote" aria-live="polite" id="picture-lab-A1-1-1-1-2"><summary class="ptx-footnote__number" title="Footnote 4.43.1"><sup> 1 </sup></summary><div class="ptx-footnote__contents" id="picture-lab-A1-1-1-1-2"><code class="code-inline tex2jax_ignore">https://mobile-csp.org/webapps/numbers/binaryConverter.html</code></div></details> for help.</div>
                <li data-component="answer" id="csawesome2_2_picture-lab-A1-1_opt_a">
                  <div class="para" id="picture-lab-A1-1-2-1-1-1">2</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-lab-A1-1_opt_a">
                  <div class="para" id="picture-lab-A1-1-2-1-2-1">You can only represent 4 numbers, decimal 0-3, with 2 bits: 00, 01, 10, 11.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-lab-A1-1_opt_b">
                  <div class="para" id="picture-lab-A1-1-2-2-1-1">4</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-lab-A1-1_opt_b">
                  <div class="para" id="picture-lab-A1-1-2-2-2-1">You can only represent decimal 0-15 with 4 bits: 0000-1111.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-lab-A1-1_opt_c" data-correct="">
                  <div class="para" id="picture-lab-A1-1-2-3-1-1">8</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-lab-A1-1_opt_c">
                  <div class="para" id="picture-lab-A1-1-2-3-2-1">Yes, you can represent decimal 0-255 with 8 bits: 00000000-11111111.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-lab-A1-1_opt_d">
                  <div class="para" id="picture-lab-A1-1-2-4-1-1">16</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-lab-A1-1_opt_d">
                  <div class="para" id="picture-lab-A1-1-2-4-2-1">You could use 16 bits, but you could use much less to represent 0-255.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.43.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_picture-lab-A1-2" data-multipleanswers="false">
                <div class="para" id="picture-lab-A1-2-1-1">6-4-7-2: How many bytes does it take to represent a color in the RGB color model?</div>
                <li data-component="answer" id="csawesome2_2_picture-lab-A1-2_opt_a">
                  <div class="para" id="picture-lab-A1-2-2-1-1-1">1</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-lab-A1-2_opt_a">
                  <div class="para" id="picture-lab-A1-2-2-1-2-1">A byte is 8 bits which can store 1 color value 0-255, but we want 3 color values for red, green, and blue.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-lab-A1-2_opt_b">
                  <div class="para" id="picture-lab-A1-2-2-2-1-1">2</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-lab-A1-2_opt_b">
                  <div class="para" id="picture-lab-A1-2-2-2-2-1">2 bytes would store 2 color values.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-lab-A1-2_opt_c" data-correct="">
                  <div class="para" id="picture-lab-A1-2-2-3-1-1">3</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-lab-A1-2_opt_c">
                  <div class="para" id="picture-lab-A1-2-2-3-2-1">Yes, you can store 3 color values 0-255 for R, G, B in 3 bytes.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-lab-A1-2_opt_d">
                  <div class="para" id="picture-lab-A1-2-2-4-1-1">4</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-lab-A1-2_opt_d">
                  <div class="para" id="picture-lab-A1-2-2-4-2-1">4 bytes could store 4 color values.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.43.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_picture-lab-A1-3" data-multipleanswers="false">
                <div class="para" id="picture-lab-A1-3-1-1">6-4-7-3: How many pixels are in a picture that is 640 pixels wide and 480 pixels high?</div>
                <li data-component="answer" id="csawesome2_2_picture-lab-A1-3_opt_a">
                  <div class="para" id="picture-lab-A1-3-2-1-1-1">640 pixels</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-lab-A1-3_opt_a">
                  <div class="para" id="picture-lab-A1-3-2-1-2-1">That would only be enough pixels for the first row.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-lab-A1-3_opt_b">
                  <div class="para" id="picture-lab-A1-3-2-2-1-1">480 pixels</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-lab-A1-3_opt_b">
                  <div class="para" id="picture-lab-A1-3-2-2-2-1">That would only be enough pixels for the first column.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-lab-A1-3_opt_c">
                  <div class="para" id="picture-lab-A1-3-2-3-1-1">640 + 480 = 1120 pixels</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-lab-A1-3_opt_c">
                  <div class="para" id="picture-lab-A1-3-2-3-2-1">That would only be enough pixels for the first row and first column.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-lab-A1-3_opt_d" data-correct="">
                  <div class="para" id="picture-lab-A1-3-2-4-1-1">640 x 480 = 307,200 pixels</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-lab-A1-3_opt_d">
                  <div class="para" id="picture-lab-A1-3-2-4-2-1">Yes, the pixels are in a 640x480 grid.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.43.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_picture-day3-0a" data-multipleanswers="false">
                <div class="para" id="picture-day3-0a-1-1">6-4-7-5: What is the row index for the top left corner of the 640x480 beach picture?</div>
                <li data-component="answer" id="csawesome2_2_picture-day3-0a_opt_a" data-correct="">
                  <div class="para" id="picture-day3-0a-2-1-1-1">0</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-0a_opt_a">
                  <div class="para" id="picture-day3-0a-2-1-2-1">Correct</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day3-0a_opt_b">
                  <div class="para" id="picture-day3-0a-2-2-1-1">180</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-0a_opt_b">
                  <div class="para" id="picture-day3-0a-2-2-2-1">Try running some more tests.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day3-0a_opt_c">
                  <div class="para" id="picture-day3-0a-2-3-1-1">240</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-0a_opt_c">
                  <div class="para" id="picture-day3-0a-2-3-2-1">Try running some more tests.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day3-0a_opt_d">
                  <div class="para" id="picture-day3-0a-2-4-1-1">90</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-0a_opt_d">
                  <div class="para" id="picture-day3-0a-2-4-2-1">Try running some more tests.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.43.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_picture-day3-1a" data-multipleanswers="false">
                <div class="para" id="picture-day3-1a-1-1">6-4-7-6: What is the column index for the top left corner of the 640x480 beach picture?</div>
                <li data-component="answer" id="csawesome2_2_picture-day3-1a_opt_a" data-correct="">
                  <div class="para" id="picture-day3-1a-2-1-1-1">0</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-1a_opt_a">
                  <div class="para" id="picture-day3-1a-2-1-2-1">Correct</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day3-1a_opt_b">
                  <div class="para" id="picture-day3-1a-2-2-1-1">180</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-1a_opt_b">
                  <div class="para" id="picture-day3-1a-2-2-2-1">Try running some more tests.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day3-1a_opt_c">
                  <div class="para" id="picture-day3-1a-2-3-1-1">240</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-1a_opt_c">
                  <div class="para" id="picture-day3-1a-2-3-2-1">Try running some more tests.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day3-1a_opt_d">
                  <div class="para" id="picture-day3-1a-2-4-1-1">90</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-1a_opt_d">
                  <div class="para" id="picture-day3-1a-2-4-2-1">Try running some more tests.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.43.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_picture-day3-2a" data-multipleanswers="false">
                <div class="para" id="picture-day3-2a-1-1">6-4-7-7: What is the right most column index of the 640x480 beach picture? You can click on the Maximize button on the top right to see the scroll bars or use the right arrows.</div>
                <li data-component="answer" id="csawesome2_2_picture-day3-2a_opt_a">
                  <div class="para" id="picture-day3-2a-2-1-1-1">100</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-2a_opt_a">
                  <div class="para" id="picture-day3-2a-2-1-2-1">Try running some more tests.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day3-2a_opt_b" data-correct="">
                  <div class="para" id="picture-day3-2a-2-2-1-1">639</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-2a_opt_b">
                  <div class="para" id="picture-day3-2a-2-2-2-1">Correct</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day3-2a_opt_c">
                  <div class="para" id="picture-day3-2a-2-3-1-1">479</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-2a_opt_c">
                  <div class="para" id="picture-day3-2a-2-3-2-1">Try running some more tests.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day3-2a_opt_d">
                  <div class="para" id="picture-day3-2a-2-4-1-1">700</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-2a_opt_d">
                  <div class="para" id="picture-day3-2a-2-4-2-1">Try running some more tests.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.43.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_picture-day3-3a" data-multipleanswers="false">
                <div class="para" id="picture-day3-3a-1-1">6-4-7-8: What is the bottom most row index of the 640x480 beach picture? You can click on the Maximize button on the top right to see the scroll bars or use the right arrows.</div>
                <li data-component="answer" id="csawesome2_2_picture-day3-3a_opt_a">
                  <div class="para" id="picture-day3-3a-2-1-1-1">180</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-3a_opt_a">
                  <div class="para" id="picture-day3-3a-2-1-2-1">Try running some more tests.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day3-3a_opt_b">
                  <div class="para" id="picture-day3-3a-2-2-1-1">500</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-3a_opt_b">
                  <div class="para" id="picture-day3-3a-2-2-2-1">Try running some more tests.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day3-3a_opt_c">
                  <div class="para" id="picture-day3-3a-2-3-1-1">639</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-3a_opt_c">
                  <div class="para" id="picture-day3-3a-2-3-2-1">Try running some more tests.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day3-3a_opt_d" data-correct="">
                  <div class="para" id="picture-day3-3a-2-4-1-1">479</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-3a_opt_d">
                  <div class="para" id="picture-day3-3a-2-4-2-1">Correct</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.43.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_picture-day3-4a" data-multipleanswers="false">
                <div class="para" id="picture-day3-4a-1-1">6-4-7-9: Does the row index increase from left to right or top to bottom?</div>
                <li data-component="answer" id="csawesome2_2_picture-day3-4a_opt_a">
                  <div class="para" id="picture-day3-4a-2-1-1-1">The row increases starting at the left and ending at the right.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-4a_opt_a">
                  <div class="para" id="picture-day3-4a-2-1-2-1">Try running some more tests.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day3-4a_opt_b">
                  <div class="para" id="picture-day3-4a-2-2-1-1">The row increases starting at the right and ending at the left.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-4a_opt_b">
                  <div class="para" id="picture-day3-4a-2-2-2-1">Try running some more tests.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day3-4a_opt_c" data-correct="">
                  <div class="para" id="picture-day3-4a-2-3-1-1">The row increases starting at the top and ending at the bottom.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-4a_opt_c">
                  <div class="para" id="picture-day3-4a-2-3-2-1">Correct.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day3-4a_opt_d">
                  <div class="para" id="picture-day3-4a-2-4-1-1">The row increases starting at the bottom and ending at the top.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-4a_opt_d">
                  <div class="para" id="picture-day3-4a-2-4-2-1">Try running some more tests.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.43.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_picture-day3-5a" data-multipleanswers="false">
                <div class="para" id="picture-day3-5a-1-1">6-4-7-10: Does the column index increase from left to right or top to bottom?</div>
                <li data-component="answer" id="csawesome2_2_picture-day3-5a_opt_a" data-correct="">
                  <div class="para" id="picture-day3-5a-2-1-1-1">The column increases starting at the left and ending at the right.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-5a_opt_a">
                  <div class="para" id="picture-day3-5a-2-1-2-1">Correct</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day3-5a_opt_b">
                  <div class="para" id="picture-day3-5a-2-2-1-1">The column increases starting at the right and ending at the left.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-5a_opt_b">
                  <div class="para" id="picture-day3-5a-2-2-2-1">Try running some more tests.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day3-5a_opt_c">
                  <div class="para" id="picture-day3-5a-2-3-1-1">The column increases starting at the top and ending at the bottom.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-5a_opt_c">
                  <div class="para" id="picture-day3-5a-2-3-2-1">Try running some more tests.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day3-5a_opt_d">
                  <div class="para" id="picture-day3-5a-2-4-1-1">The column increases starting at the bottom and ending at the top.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-5a_opt_d">
                  <div class="para" id="picture-day3-5a-2-4-2-1">Try running some more tests.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.43.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_picture-day3-6a" data-multipleanswers="false">
                <div class="para" id="picture-day3-6a-1-1">6-4-7-11: Use the Zoom menu to set the zoom to 500%. Can you see squares of color? This is called pixelation. What is pixelation?</div>
                <li data-component="answer" id="csawesome2_2_picture-day3-6a_opt_a">
                  <div class="para" id="picture-day3-6a-2-1-1-1">This is when data is lost in the resizing of an image.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-6a_opt_a">
                  <div class="para" id="picture-day3-6a-2-1-2-1">try again.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day3-6a_opt_b">
                  <div class="para" id="picture-day3-6a-2-2-1-1">The intentional decreasing of resolution by merging adjacent pixels.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-6a_opt_b">
                  <div class="para" id="picture-day3-6a-2-2-2-1">try again.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day3-6a_opt_c" data-correct="">
                  <div class="para" id="picture-day3-6a-2-3-1-1">When an image is magnified to the point where you can see the pixels as small squares.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-6a_opt_c">
                  <div class="para" id="picture-day3-6a-2-3-2-1">Correct</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day3-6a_opt_d">
                  <div class="para" id="picture-day3-6a-2-4-1-1">The modification of individual pixels.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day3-6a_opt_d">
                  <div class="para" id="picture-day3-6a-2-4-2-1">try again.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.43.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_picture-lab-A4-0a" data-multipleanswers="false">
                <div class="para" id="picture-lab-A4-0a-1-1">6-4-7-1: Given an array A = { 2  4  6 }, {1  3  5} how would A be stored in a 1D array in row-major order?</div>
                <li data-component="answer" id="csawesome2_2_picture-lab-A4-0a_opt_a">
                  <div class="para" id="picture-lab-A4-0a-2-1-1-1">[1, 2, 3, 4, 5, 6]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-lab-A4-0a_opt_a">
                  <div class="para" id="picture-lab-A4-0a-2-1-2-1">Remember, row-major order means the rows are stored starting from first to last.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-lab-A4-0a_opt_b">
                  <div class="para" id="picture-lab-A4-0a-2-2-1-1">[2, 1, 4, 3, 6, 5]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-lab-A4-0a_opt_b">
                  <div class="para" id="picture-lab-A4-0a-2-2-2-1">For row-major order, we need to store the rows which go horizontally across the array.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-lab-A4-0a_opt_c" data-correct="">
                  <div class="para" id="picture-lab-A4-0a-2-3-1-1">[2, 4, 6, 1, 3, 5]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-lab-A4-0a_opt_c">
                  <div class="para" id="picture-lab-A4-0a-2-3-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-lab-A4-0a_opt_d">
                  <div class="para" id="picture-lab-A4-0a-2-4-1-1">[1, 3, 5, 2, 4, 6]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-lab-A4-0a_opt_d">
                  <div class="para" id="picture-lab-A4-0a-2-4-2-1">Remember, row-major order means the rows are stored starting from first to last.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.43.2.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_picture-lab-A4-1a" data-multipleanswers="false">
                <div class="para" id="picture-lab-A4-1a-1-1">6-4-7-2: Given an array A = { 2  4  6 }, {1  3  5} how would A be stored in a 1D array in column-major order?</div>
                <li data-component="answer" id="csawesome2_2_picture-lab-A4-1a_opt_a">
                  <div class="para" id="picture-lab-A4-1a-2-1-1-1">[1, 2, 3, 4, 5, 6]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-lab-A4-1a_opt_a">
                  <div class="para" id="picture-lab-A4-1a-2-1-2-1">This answer has stored the columns, but they need to be stored from the lowest index to the highest.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-lab-A4-1a_opt_b" data-correct="">
                  <div class="para" id="picture-lab-A4-1a-2-2-1-1">[2, 1, 4, 3, 6, 5]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-lab-A4-1a_opt_b">
                  <div class="para" id="picture-lab-A4-1a-2-2-2-1">Correct</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-lab-A4-1a_opt_c">
                  <div class="para" id="picture-lab-A4-1a-2-3-1-1">[2, 4, 6, 1, 3, 5]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-lab-A4-1a_opt_c">
                  <div class="para" id="picture-lab-A4-1a-2-3-2-1">We need to store this array in column-major order. The columns of the array are aligned vertically.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-lab-A4-1a_opt_d">
                  <div class="para" id="picture-lab-A4-1a-2-4-1-1">[1, 3, 5, 2, 4, 6]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-lab-A4-1a_opt_d">
                  <div class="para" id="picture-lab-A4-1a-2-4-2-1">We need to store this array in column-major order. The columns of the array are aligned vertically.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.43.2.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_picture-lab-A4-2a" data-multipleanswers="false"><div class="para" id="picture-lab-A4-2a-1-1">6-4-7-3: Here is a mysteryMethod in the <code class="code-inline tex2jax_ignore">IntArrayWorker</code> class that uses a private instance variable which is a 2D array named <code class="code-inline tex2jax_ignore">matrix</code>. What does this method do?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-none">public int mysteryMethod() {
  int total = 0;
  for (int row = 0; row &lt; matrix.length; row++) {
     for (int col = 0; col &lt; matrix[0].length; col++) {
         total = total + matrix[row][col];
     }
  }
  return total;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_picture-lab-A4-2a_opt_a"><div class="para" id="picture-lab-A4-2a-2-1-1-1">It sums up all the values in the matrix[0] column</div></li><li data-component="feedback" id="csawesome2_2_picture-lab-A4-2a_opt_a"><div class="para" id="picture-lab-A4-2a-2-1-2-1">matrix[0].length is different from just the matrix column 0, what does matrix[0].length return? How does this affect the inner loop</div></li><li data-component="answer" id="csawesome2_2_picture-lab-A4-2a_opt_b"><div class="para" id="picture-lab-A4-2a-2-2-1-1">This method sums up all the column and row indexes to find the matrix’s ‘weight’</div></li><li data-component="feedback" id="csawesome2_2_picture-lab-A4-2a_opt_b"><div class="para" id="picture-lab-A4-2a-2-2-2-1">This is not what the method does and matrix ‘weight’ does not exist.</div></li><li data-component="answer" id="csawesome2_2_picture-lab-A4-2a_opt_c"><div class="para" id="picture-lab-A4-2a-2-3-1-1">This method finds the number of elements in a given 2D array.</div></li><li data-component="feedback" id="csawesome2_2_picture-lab-A4-2a_opt_c"><div class="para" id="picture-lab-A4-2a-2-3-2-1">The number of elements would be found through multiplying the rows by the columns.</div></li><li data-component="answer" id="csawesome2_2_picture-lab-A4-2a_opt_d" data-correct=""><div class="para" id="picture-lab-A4-2a-2-4-1-1">This method finds the total of all the values in a 2D array of numbers.</div></li><li data-component="feedback" id="csawesome2_2_picture-lab-A4-2a_opt_d"><div class="para" id="picture-lab-A4-2a-2-4-2-1">correct!</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.43.2.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_picture-lab-A4-3a" data-multipleanswers="true">
                <div class="para" id="picture-lab-A4-3a-1-1">6-4-7-4: Which of these methods correctly sum up the values in a 2D array? Assume the 2D array is called <code class="code-inline tex2jax_ignore">matrix</code>.</div>
                <li data-component="answer" id="csawesome2_2_picture-lab-A4-3a_opt_a">
                  <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;">
                    <pre class="program">
                      <code class="language-none">public int getSum() {
  int total = 0;
  int i = 0;
  int j = 0;
  while (matrix.length != 0) {
     while (matrix[0].length != 0) {
         total += matrix[i][j];
         i++;
         j++;
     }
  }
}
</code>
                    </pre>
                  </div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-lab-A4-3a_opt_a">
                  <div class="para" id="picture-lab-A4-3a-2-1-2-1">This method will continue forever and give an index out of bounds error.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-lab-A4-3a_opt_b" data-correct="">
                  <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;">
                    <pre class="program">
                      <code class="language-none">public int getSum() {
  int total = 0;
  for (int[] rowArray : matrix) {
     for (int item : rowArray) {
         total = total + item;
     }
  }
  return total;
}
</code>
                    </pre>
                  </div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-lab-A4-3a_opt_b">
                  <div class="para" id="picture-lab-A4-3a-2-2-2-1">Correct! This uses nested for each loops to iterate through the array.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-lab-A4-3a_opt_c" data-correct="">
                  <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;">
                    <pre class="program">
                      <code class="language-none">public int getSum() {
  int total = 0;
  for (int i = 0; i &lt; matrix.length; i++) {
     for (int j = 0; j &lt; matrix[0].length; j++) {
         total = total + matrix[i][j];
     }
  }
  return total;
}
</code>
                    </pre>
                  </div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-lab-A4-3a_opt_c">
                  <div class="para" id="picture-lab-A4-3a-2-3-2-1">Correct! This uses nested for loops to traverse through the matrix.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-lab-A4-3a_opt_d">
                  <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;">
                    <pre class="program">
                      <code class="language-none">public int getSum() {
   int total = 0;
   int mystery = 0;
   int row = 0;
   while (row &lt; matrix.length) {
       for (int col = 0; j &lt; matrix[0].length; i++) {
           if (row % 2 == 0) {
               total = total +  matrix[row][col];
           }
           else {
               mystery = mystery + matrix[row][col];
           }
       }
       row++;
   }
   return (total - mystery);
}
</code>
                    </pre>
                  </div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-lab-A4-3a_opt_d">
                  <div class="para" id="picture-lab-A4-3a-2-4-2-1">This does not return the correct amount.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.43.2.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_picture-lab-A4-getCount">
                <div class="ac_question" id="csawesome2_2_picture-lab-A4-getCount_question">
                  <div class="para" id="picture-lab-A4-getCount-1-1">Write a <code class="code-inline tex2jax_ignore">getCount</code> method in the <code class="code-inline tex2jax_ignore">IntArrayWorker</code> class that returns the count of the number of times a passed integer value is found in the matrix.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_picture-lab-A4-getCount_editor" data-question_label="" data-codelens="true">public class IntArrayWorker
{
    /** two dimensional matrix */
    private int[][] matrix = null;

    /**
     * set the matrix to the passed one
     *
     * @param theMatrix the one to use
     */
    public void setMatrix(int[][] theMatrix)
    {
        matrix = theMatrix;
    }

    /** print the values in the array in rows and columns */
    public void print()
    {
        for (int row = 0; row &lt; matrix.length; row++)
        {
            for (int col = 0; col &lt; matrix[0].length; col++)
            {
                System.out.print(matrix[row][col] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    /** Method to test getCount */
    public static void testGetCount()
    {
        IntArrayWorker worker = new IntArrayWorker();
        worker.setMatrix(new int[][] { {1, 2, 1}, {2, 1, 0}});
        int count = worker.getCount(1);
        System.out.println("Count should be 3 and count is " + count);
    }

    /**
     * getCount counts number of times value is found in the matrix.
     *
     * @return the number of times value is found in the array
     */
    public int getCount(int value)
    {
        // TO DO
    }

    public static void main(String[] args)
    {
        testGetCount();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    public RunestoneTests()
    {
        super("IntArrayWorker");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Count should be 3 and count is 3\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        IntArrayWorker worker = new IntArrayWorker();
        worker.setMatrix(new int[][] { {1, 4, 8}, {8, 8, 8}});
        int count = worker.getCount(8);
        int expectedCount = 4;

        boolean passed =
                getResults(
                        expectedCount + "",
                        count + "",
                        "Testing getCount for matrix { {1,4,8},{8,8,8} }");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.43.2.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_picture-lab-A4-getLargest">
                <div class="ac_question" id="csawesome2_2_picture-lab-A4-getLargest_question">
                  <div class="para" id="picture-lab-A4-getLargest-1-1">Write a <code class="code-inline tex2jax_ignore">getLargest</code> method in the <code class="code-inline tex2jax_ignore">IntArrayWorker</code> class that returns the largest value in the matrix.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_picture-lab-A4-getLargest_editor" data-question_label="" data-codelens="true">public class IntArrayWorker
{
    /** two dimensional matrix */
    private int[][] matrix = null;

    /**
     * set the matrix to the passed one
     *
     * @param theMatrix the one to use
     */
    public void setMatrix(int[][] theMatrix)
    {
        matrix = theMatrix;
    }

    /** print the values in the array in rows and columns */
    public void print()
    {
        for (int row = 0; row &lt; matrix.length; row++)
        {
            for (int col = 0; col &lt; matrix[0].length; col++)
            {
                System.out.print(matrix[row][col] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    public static void testGetLargest()
    {
        // test when largest is last
        IntArrayWorker worker = new IntArrayWorker();
        int[][] nums2 = { {1, 2, 3}, {4, 5, 6}};
        worker.setMatrix(nums2);
        int largest = worker.getLargest();
        System.out.println(
                "When largest is last, it should be 6 and is " + largest);
        // test when largest is first
        int[][] nums3 = { {6, 2, 3}, {4, 5, 1}};
        worker.setMatrix(nums3);
        largest = worker.getLargest();
        System.out.println(
                "When largest is first, it should be 6 and is " + largest);
        // test when largest is in the middle
        int[][] nums4 = { {1, 2, 3}, {6, 5, 1}};
        worker.setMatrix(nums4);
        largest = worker.getLargest();
        System.out.println(
                "When largest is in the middle, it should be 6 and is " + largest);
    }

    /**
     * Method to return the largest value in the array
     *
     * @return the largest value found in the array
     */
    public int getLargest()
    {
        // TO DO
    }

    public static void main(String[] args)
    {
        testGetLargest();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    public RunestoneTests()
    {
        super("IntArrayWorker");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "When largest is last, it should be 6 and is 6\n"
                    + "When largest is first, it should be 6 and is 6\n"
                    + "When largest is in the middle, it should be 6 and is 6\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        IntArrayWorker worker = new IntArrayWorker();
        worker.setMatrix(new int[][] { {1, 4, 8}, {6, 9, 7}});
        int output = worker.getLargest();
        int expect = 9;

        boolean passed =
                getResults(
                        expect + "",
                        output + "",
                        "Testing getLargest for matrix { {1, 4,8},{6, 9, 7} }");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.43.2.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_picture-lab-A4-getColTotal">
                <div class="ac_question" id="csawesome2_2_picture-lab-A4-getColTotal_question">
                  <div class="para" id="picture-lab-A4-getColTotal-1-1">Write a <code class="code-inline tex2jax_ignore">getColTotal</code> method in the <code class="code-inline tex2jax_ignore">IntArrayWorker</code> class that returns the total of all integers in a specified column.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_picture-lab-A4-getColTotal_editor" data-question_label="" data-codelens="true">public class IntArrayWorker
{
    /** two dimensional matrix */
    private int[][] matrix = null;

    /**
     * set the matrix to the passed one
     *
     * @param theMatrix the one to use
     */
    public void setMatrix(int[][] theMatrix)
    {
        matrix = theMatrix;
    }

    /** print the values in the array in rows and columns */
    public void print()
    {
        for (int row = 0; row &lt; matrix.length; row++)
        {
            for (int col = 0; col &lt; matrix[0].length; col++)
            {
                System.out.print(matrix[row][col] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    /**
     * getColTotal adds and returns the total of all integers in a specified
     * column.
     *
     * @return the total of elements in a column
     */
    public int getColTotal(int column)
    {
        // TO DO
    }

    /** Method to test getColTotal */
    public static void testGetColTotal()
    {
        IntArrayWorker worker = new IntArrayWorker();
        int[][] nums2 = { {1, 2, 3}, {4, 5, 6}};
        worker.setMatrix(nums2);
        int total = worker.getColTotal(0);
        System.out.println("Total for column 0 should be 5 and is " + total);
        total = worker.getColTotal(1);
        System.out.println("Total for column 1 should be 7 and is " + total);
        total = worker.getColTotal(2);
        System.out.println("Total for column 2 should be 9 and is " + total);
    }

    public static void main(String[] args)
    {
        testGetColTotal();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    public RunestoneTests()
    {
        super("IntArrayWorker");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "Total for column 0 should be 5 and is 5\n"
                    + "Total for column 1 should be 7 and is 7\n"
                    + "Total for column 2 should be 9 and is 9";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        IntArrayWorker worker = new IntArrayWorker();
        worker.setMatrix(new int[][] { {1, 1, 1}, {0, 1, 2}});
        int count = worker.getColTotal(1);
        int expectedCount = 2;

        boolean passed =
                getResults(
                        expectedCount + "",
                        count + "",
                        "Testing getColTotal for matrix { {1,1,1},{0,1,2} }");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.43.3.1.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_picture-day5-0a" data-multipleanswers="false">
                <div class="para" id="picture-day5-0a-1-1">6-4-7-1: Click on the <a class="external" href="https://firewalledreplit.com/@BerylHoffman/Picture-Lab" target="_blank">Picture Lab project link</a><details class="ptx-footnote" aria-live="polite" id="picture-day5-0a-1-1-2"><summary class="ptx-footnote__number" title="Footnote 4.43.2"><sup> 2 </sup></summary><div class="ptx-footnote__contents" id="picture-day5-0a-1-1-2"><code class="code-inline tex2jax_ignore">https://firewalledreplit.com/@BerylHoffman/Picture-Lab</code></div></details> and click on Show files. Open <code class="code-inline tex2jax_ignore">Picture.java</code> and look for the method <code class="code-inline tex2jax_ignore">getPixels2D</code>. Is it there?</div>
                <li data-component="answer" id="csawesome2_2_picture-day5-0a_opt_a">
                  <div class="para" id="picture-day5-0a-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day5-0a_opt_a">
                  <div class="para" id="picture-day5-0a-2-1-2-1">The Picture.java class does not have the getPixels2D() method defined in it but it inherits it from the class SimplePicture.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day5-0a_opt_b" data-correct="">
                  <div class="para" id="picture-day5-0a-2-2-1-1">No, but it is inherited</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day5-0a_opt_b">
                  <div class="para" id="picture-day5-0a-2-2-2-1">Correct, this class inherits that method from the class SimplePicture.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.43.3.1.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_picture-day5-1" data-multipleanswers="false">
                <div class="para" id="picture-day5-1-1-1">6-4-7-2: Open <code class="code-inline tex2jax_ignore">SimplePicture.java</code> and look for the method <code class="code-inline tex2jax_ignore">getPixels2D</code>. Is it there?</div>
                <li data-component="answer" id="csawesome2_2_picture-day5-1_opt_a" data-correct="">
                  <div class="para" id="picture-day5-1-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day5-1_opt_a">
                  <div class="para" id="picture-day5-1-2-1-2-1">Yes, the SimplePicture class contains the method getPixels2D.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day5-1_opt_b">
                  <div class="para" id="picture-day5-1-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day5-1_opt_b">
                  <div class="para" id="picture-day5-1-2-2-2-1">The SimplePicture class contains the method getPixels2D.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.43.3.1.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_picture-day5-1a" data-multipleanswers="false">
                <dl class="description-list">
                  <dt id="picture-day5-1a-1-1-1">6-4-7-3: This question is about interfaces which are not covered in the AP exam. Interfaces are like abstract templates of a class that specify the method headers but not the definitions. Does the following code compile? Try it in the main method if you do not know.</dt>
                  <dd>
                    <div class="para" id="picture-day5-1a-1-1-1-2">DigitalPicture p = new DigitalPicture();</div>
                  </dd>
                </dl>
                <li data-component="answer" id="csawesome2_2_picture-day5-1a_opt_a">
                  <div class="para" id="picture-day5-1a-2-1-1-1">yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day5-1a_opt_a">
                  <div class="para" id="picture-day5-1a-2-1-2-1">We cannot create an object from an interface because it is abstract.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day5-1a_opt_b" data-correct="">
                  <div class="para" id="picture-day5-1a-2-2-1-1">no</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day5-1a_opt_b">
                  <div class="para" id="picture-day5-1a-2-2-2-1">Correct! We cannot create an object from an interface because it is abstract.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.43.3.1.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_picture-day5-2a" data-multipleanswers="false">
                <dl class="description-list">
                  <dt id="picture-day5-2a-1-1-1">6-4-7-4: This question is about interfaces which are not covered in the AP exam. Assuming that a no-argument constructor exists for SimplePicture, would the following code compile?</dt>
                  <dd>
                    <div class="para" id="picture-day5-2a-1-1-1-2">DigitalPicture p = new SimplePicture();</div>
                  </dd>
                </dl>
                <li data-component="answer" id="csawesome2_2_picture-day5-2a_opt_a" data-correct="">
                  <div class="para" id="picture-day5-2a-2-1-1-1">yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day5-2a_opt_a">
                  <div class="para" id="picture-day5-2a-2-1-2-1">Yes. The SimplePicture class implements the interface DigitalPicture which means it is a type of Digital Picture.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day5-2a_opt_b">
                  <div class="para" id="picture-day5-2a-2-2-1-1">no</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day5-2a_opt_b">
                  <div class="para" id="picture-day5-2a-2-2-2-1">The SimplePicture class implements the interface DigitalPicture which means it is a type of Digital Picture.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.43.3.1.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_picture-day5-3a" data-multipleanswers="false">
                <dl class="description-list">
                  <dt id="picture-day5-3a-1-1-1">6-4-7-5: This question is about interfaces which are not covered in the AP exam. Assuming that a no-argument constructor exists for Picture, would the following code compile?</dt>
                  <dd>
                    <div class="para" id="picture-day5-3a-1-1-1-2">DigitalPicture p = new Picture();</div>
                  </dd>
                </dl>
                <li data-component="answer" id="csawesome2_2_picture-day5-3a_opt_a" data-correct="">
                  <div class="para" id="picture-day5-3a-2-1-1-1">yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day5-3a_opt_a">
                  <div class="para" id="picture-day5-3a-2-1-2-1">Yes, because Picture extends SimplePicture which implements the interface DigitalPicture.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day5-3a_opt_b">
                  <div class="para" id="picture-day5-3a-2-2-1-1">no</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day5-3a_opt_b">
                  <div class="para" id="picture-day5-3a-2-2-2-1">Picture extends SimplePicture which implements the interface DigitalPicture.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.43.3.1.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_picture-day5-4a" data-multipleanswers="false">
                <dl class="description-list">
                  <dt id="picture-day5-4a-1-1-1">6-4-7-6: Assuming that a no-argument constructor exists for Picture, does the following code compile?</dt>
                  <dd>
                    <div class="para" id="picture-day5-4a-1-1-1-2">SimplePicture p = new Picture();</div>
                  </dd>
                </dl>
                <li data-component="answer" id="csawesome2_2_picture-day5-4a_opt_a" data-correct="">
                  <div class="para" id="picture-day5-4a-2-1-1-1">yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day5-4a_opt_a">
                  <div class="para" id="picture-day5-4a-2-1-2-1">Yes, because Picture extends SimplePicture which implements the interface DigitalPicture.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day5-4a_opt_b">
                  <div class="para" id="picture-day5-4a-2-2-1-1">no</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day5-4a_opt_b">
                  <div class="para" id="picture-day5-4a-2-2-2-1">Picture extends SimplePicture which implements the interface DigitalPicture.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.43.3.1.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_picture-day5-5a" data-multipleanswers="false">
                <dl class="description-list">
                  <dt id="picture-day5-5a-1-1-1">6-4-7-7: Assuming that a no-argument constructor exists for SimplePicture, does the following code compile?</dt>
                  <dd>
                    <div class="para" id="picture-day5-5a-1-1-1-2">Picture p = new SimplePicture();</div>
                  </dd>
                </dl>
                <li data-component="answer" id="csawesome2_2_picture-day5-5a_opt_a">
                  <div class="para" id="picture-day5-5a-2-1-1-1">yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day5-5a_opt_a">
                  <div class="para" id="picture-day5-5a-2-1-2-1">Picture inherits from SimplePicture, but not the other way around.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-day5-5a_opt_b" data-correct="">
                  <div class="para" id="picture-day5-5a-2-2-1-1">no</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-day5-5a_opt_b">
                  <div class="para" id="picture-day5-5a-2-2-2-1">Picture inherits from SimplePicture, but not the other way around.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.43.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_picture-lab-A5-keepOnlyBlue">
                <div class="ac_question" id="csawesome2_2_picture-lab-A5-keepOnlyBlue_question">
                  <div class="para" id="picture-lab-A5-keepOnlyBlue-1-1">Picture Lab keepOnlyBlue: Using zeroBlue() as a guide, write a method called keepOnlyBlue() that keeps only the blue values by setting the red and green values to zero. Change the method call in main from zeroBlue to keepOnlyBlue to test it. Try one of the other images below like metalLion.jpg, water.jpg, kitten.jpg, puppies.jpg, blueMotorcycle.jpg, or student.jpg.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_picture-lab-A5-keepOnlyBlue_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /** zeroBlue() method sets the blue values at all pixels to zero */
    public void zeroBlue()
    {
        Pixel[][] pixels = this.getPixels2D();

        for (Pixel[] rowArray : pixels)
        {
            for (Pixel p : rowArray)
            {
                p.setBlue(0);
            }
        }
    }

    /*
       keepOnlyBlue() method sets the red and green values at all pixels to zero.

       Add new method here and call it from main.
    */

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        Picture pict = new Picture("beach.jpg");
        pict.show();
        pict.zeroBlue(); // Change this to call keepOnlyBlue()
        pict.show();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void keepOnlyBlue()";
        boolean passed = checkCodeContains("keepOnlyBlue() method", target);
        assertTrue(passed);
    }

    @Test
    public void test1b()
    {
        String target = ".keepOnlyBlue()";
        boolean passed = checkCodeContains("Call to keepOnlyBlue() in main", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = ".setGreen(0);";
        boolean passed =
                checkCodeContains("keepOnlyBlue() setting green pixels to the number 0", target);
        assertTrue(passed);
    }

    @Test
    public void test2b()
    {
        String target = ".setRed(0);";
        boolean passed =
                checkCodeContains("keepOnlyBlue() setting red pixels to the number 0", target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "for";
        String code = getCode();
        int index = code.indexOf("public void keepOnlyBlue()");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 2;
        }
        getResults(
                "true", "" + passed, "Checking that keepOnlyBlue() contains 2 for loops", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.43.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_picture-lab-A5-negate">
                <div class="ac_question" id="csawesome2_2_picture-lab-A5-negate_question">
                  <div class="para" id="picture-lab-A5-negate-1-1">Picture Lab negate: Write a method called negate() that negates all the pixels in a picture by setting the red value to 255 minus the current red value (use the pixel’s getRed() method), the green value to 255 minus the current green value and the blue value to 255 minus the current blue value.  Try one of the other images below like beach.jpg, metalLion.jpg, water.jpg, kitten.jpg, puppies.jpg, blueMotorcycle.jpg, or student.jpg.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_picture-lab-A5-negate_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /*
       negate() method negates all the pixels in a picture by setting the red value to 255 minus the current red value (use the pixel's getRed() method), the green value to 255 minus the current green value and the blue value to 255 minus the current blue value.

       Add new method here.
    */

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        Picture pict = new Picture("puppies.jpg");
        pict.show();
        System.out.println("Negate: ");
        pict.negate();
        pict.show();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void negate()";
        boolean passed = checkCodeContains("negate() method", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "255";
        boolean passed = checkCodeContains("negate() subtracts from 255", target);
        assertTrue(passed);
    }

    @Test
    public void test2b()
    {
        String target = ".getRed()";
        boolean passed = checkCodeContains("negate() uses get methods", target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "for";
        String code = getCode();
        int index = code.indexOf("public void negate()");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 2;
        }
        getResults("true", "" + passed, "Checking that negate() contains 2 for loops", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.43.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_picture-lab-A5-gray-scale">
                <div class="ac_question" id="csawesome2_2_picture-lab-A5-gray-scale_question">
                  <div class="para" id="picture-lab-A5-gray-scale-1-1">Picture Lab Grayscale: Write a method called grayscale to turn the picture into shades of gray. Set the red, green, and blue values to the average of the current red, green, and blue values (add all three values and divide by 3). Try another image file from beach.jpg, metalLion.jpg, water.jpg, kitten.jpg, puppies.jpg, blueMotorcycle.jpg, student.jpg.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_picture-lab-A5-gray-scale_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /*
       grayscale() method sets the red, green, andblue values to the average of the current red, green, and blue values (add all three values and divide by 3).

       Add new method here.
    */

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        Picture pict = new Picture("blueMotorcycle.jpg");
        pict.show();
        System.out.println("Gray Scale: ");
        pict.grayscale();
        pict.show();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void grayscale()";
        boolean passed = checkCodeContains("grayscale() method", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = ".getRed()";
        boolean passed = checkCodeContains("grayscale() uses get methods", target);
        assertTrue(passed);
    }

    @Test
    public void test2b()
    {
        String target = "/3";
        boolean passed =
                checkCodeContains("grayscale() divides by 3 to average the values", target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "for";
        String code = getCode();
        int index = code.indexOf("public void grayscale()");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 2;
        }
        getResults("true", "" + passed, "Checking that grayscale() contains 2 for loops", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.43.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_picture-lab-A5-fix-underwater">
                <div class="ac_question" id="csawesome2_2_picture-lab-A5-fix-underwater_question">
                  <div class="para" id="picture-lab-A5-fix-underwater-1-1">Picture Lab fix-underwater: Write a method called fixUnderwater() to modify the pixel colors to make the fish easier to see. Try increasing one of the colors by a certain factor.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_picture-lab-A5-fix-underwater_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /*
       fixUnderwater() modifies the pixel colors to make the fish easier to see.

       Add new method here.
    */

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        Picture pict = new Picture("water.jpg");
        pict.show();
        System.out.println("Fix Underwater: ");
        pict.fixUnderwater();
        pict.show();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void fixUnderwater()";
        boolean passed = checkCodeContains("fixUnderwater() method", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = ".setRed(";
        boolean passed =
                checkCodeContains(
                        "fixUnderwater() uses the setRed() method to increase red values", target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "for";
        String code = getCode();
        int index = code.indexOf("public void fixUnderwater()");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 2;
        }
        getResults(
                "true", "" + passed, "Checking that fixUnderwater() contains 2 for loops", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.43.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_picture-lab-A5-tshirt-color">
                <div class="ac_question" id="csawesome2_2_picture-lab-A5-tshirt-color_question">
                  <div class="para" id="picture-lab-A5-tshirt-color-1-1">Can you change just the t-shirt color in student.jpg? You will need to use an if statement inside the loops to look for the red t-shirt color and then change it. The red pixels probably have a high red value (for example greater than 200) and low green and blue values (for example less than 100). After changing the t-shirt color, try changing the background color or the hair color.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_picture-lab-A5-tshirt-color_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /** zeroBlue() method sets the blue values at all pixels to zero */
    public void zeroBlue()
    {
        Pixel[][] pixels = this.getPixels2D();

        for (Pixel[] rowArray : pixels)
        {
            for (Pixel p : rowArray)
            {
                p.setBlue(0);
            }
        }
    }

    /*
      changeTshirt(): Can you change just the t-shirt color in student.jpg? You will need to use an if statement inside the loops to look for the red t-shirt color and then change it. The red pixels probably have a high red value (for example greater than 200) and low green and blue values (for example less than 100).

       Add new method here.
    */

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        Picture pict = new Picture("student.jpg");
        pict.show();
        System.out.println("Change tshirt color: ");
        pict.changeTshirt();
        pict.show();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void changeTshirt()";
        boolean passed = checkCodeContains("changeTshirt() method", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "if";
        boolean passed = checkCodeContains("changeTshirt uses if statement", target);
        assertTrue(passed);
    }

    @Test
    public void test2b()
    {
        String target = ".getRed() &gt;";
        boolean passed =
                checkCodeContains("changeTshirt() chacks if getRed() greater than a value", target);
        assertTrue(passed);
    }

    @Test
    public void test2c()
    {
        String target = ".setRed(0)";
        boolean passed = checkCodeContains("changeTshirt() uses setRed(0)", target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "for";
        String code = getCode();
        int index = code.indexOf("public void changeTshirt()");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 2;
        }
        getResults(
                "true", "" + passed, "Checking that changeTshirt() contains 2 for loops", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.43.4.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_picture-lab-A6-mirrorVerticalRightToLeft">
                <div class="ac_question" id="csawesome2_2_picture-lab-A6-mirrorVerticalRightToLeft_question">
                  <div class="para" id="picture-lab-A6-mirrorVerticalRightToLeft-1-1">Picture Lab A6 Mirroring: Write a method mirrorVerticalRightToLeft that mirrors a picture around a mirror placed vertically from right to left so that you get two tails for the caterpillar instead of two heads. Hint: you can copy the body of mirrorVertical and only change one line in the body of the method to accomplish this. Change the method call in the main method.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_picture-lab-A6-mirrorVerticalRightToLeft_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /**
     * Method that mirrors the picture around a vertical mirror in the center of
     * the picture from left to right
     */
    public void mirrorVertical()
    {
        Pixel[][] pixels = this.getPixels2D();
        Pixel leftPixel = null;
        Pixel rightPixel = null;
        int width = pixels[0].length;
        for (int row = 0; row &lt; pixels.length; row++)
        {
            for (int col = 0; col &lt; width / 2; col++)
            {
                leftPixel = pixels[row][col];
                rightPixel = pixels[row][width - 1 - col];
                rightPixel.setColor(leftPixel.getColor());
            }
        }
    }

    /*
      Write a method mirrorVerticalRightToLeft that mirrors a picture around a mirror placed vertically from right to left. Hint: you can copy the body of mirrorVertical() above and only change one line in the body of the method to accomplish this.

      Add new method here. Change the method call in main to test this.
    */

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        // or try puppy.jpg
        Picture pict = new Picture("caterpillar.jpg");
        pict.show();

        pict.mirrorVertical(); // change this to pict.mirrorVerticalRightToLeft();

        pict.show();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void mirrorVerticalRightToLeft()";
        boolean passed = checkCodeContains("mirrorVerticalRightToLeft() method", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "leftPixel.setColor(";
        boolean passed =
                checkCodeContains("mirrorVerticalRightToLeft() sets leftPixel's color", target);
        assertTrue(passed);
    }

    @Test
    public void test2b()
    {
        String target = "rightPixel.getColor(";
        boolean passed =
                checkCodeContains("mirrorVerticalRightToLeft() uses rightPixel's getColor", target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "for";
        String code = getCode();
        int index = code.indexOf("public void mirrorVerticalRightToLeft()");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 2;
        }
        getResults(
                "true",
                "" + passed,
                "Checking that mirrorVerticalRightToLeft() contains 2 for loops",
                passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.43.4.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_picture-lab-A6-mirrorHorizontal">
                <div class="ac_question" id="csawesome2_2_picture-lab-A6-mirrorHorizontal_question">
                  <div class="para" id="picture-lab-A6-mirrorHorizontal-1-1">Picture Lab A6 Mirroring: Write a method mirrorHorizontal that mirrors a picture around a mirror placed horizontally at the middle of the height of the picture from top to bottom. Change the bottom pixel to be the color of the top pixel.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_picture-lab-A6-mirrorHorizontal_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /**
     * Method that mirrors the picture around a vertical mirror in the center of
     * the picture from left to right
     */
    public void mirrorVertical()
    {
        Pixel[][] pixels = this.getPixels2D();
        Pixel leftPixel = null;
        Pixel rightPixel = null;
        int width = pixels[0].length;
        for (int row = 0; row &lt; pixels.length; row++)
        {
            for (int col = 0; col &lt; width / 2; col++)
            {
                leftPixel = pixels[row][col];
                rightPixel = pixels[row][width - 1 - col];
                rightPixel.setColor(leftPixel.getColor());
            }
        }
    }

    /*
      Write a method mirrorHorizontal that mirrors a picture around a mirror placed horizontally at the middle of the height of the picture from top to bottom.

      Add new method here.
    */

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        // or try puppy.jpg or caterpillar.jpg
        Picture pict = new Picture("redMotorcycle.jpg");
        pict.show();
        pict.mirrorHorizontal();
        pict.show();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void mirrorHorizontal()";
        boolean passed = checkCodeContains("mirrorHorizontal() method", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "height = pixels.length;";
        boolean passed =
                checkCodeContains("mirrorHorizontal() sets height to pixels.length", target);
        assertTrue(passed);
    }

    @Test
    public void test2b()
    {
        String target = "height/2";
        boolean passed = checkCodeContains("mirrorHorizontal() uses height/2", target);
        assertTrue(passed);
    }

    @Test
    public void test2c()
    {
        String target = "pixels[height - row - 1][col]";
        boolean passed =
                checkCodeContains(
                        "mirrorHorizontal() uses pixels[height - row - 1][col] to get the bottom"
                            + " pixel",
                        target);
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String target = "bottomPixel.setColor(";
        boolean passed =
                checkCodeContains(
                        "mirrorHorizontal() uses bottomPixel.setColor to change the bottom pixel",
                        target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "for";
        String code = getCode();
        int index = code.indexOf("public void mirrorHorizontal()");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 2;
        }
        getResults(
                "true",
                "" + passed,
                "Checking that mirrorHorizontal() contains 2 for loops",
                passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.43.4.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_picture-lab-A6-mirrorHorizontalBotToTop">
                <div class="ac_question" id="csawesome2_2_picture-lab-A6-mirrorHorizontalBotToTop_question">
                  <div class="para" id="picture-lab-A6-mirrorHorizontalBotToTop-1-1">Picture Lab A6 Mirroring: Write the method mirrorHorizontalBotToTop that mirrors the picture around a mirror placed horizontally from bottom to top. Hint: you can copy the body of mirrorHorizontal and only change one line to accomplish this. Change the top pixel to the bottom pixel instead of the other way around.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_picture-lab-A6-mirrorHorizontalBotToTop_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /*
      Write the method mirrorHorizontalBotToTop that mirrors the picture around a mirror placed horizontally from bottom to top. Hint: you can copy the body of mirrorHorizontal and only change one line to accomplish this.

      Add new method here.
    */

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        // or try puppy.jpg or caterpillar.jpg
        Picture pict = new Picture("redMotorcycle.jpg");
        pict.show();
        pict.mirrorHorizontalBotToTop();
        pict.show();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void mirrorHorizontalBotToTop()";
        boolean passed = checkCodeContains("mirrorHorizontalBotToTop() method", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "height = pixels.length;";
        boolean passed =
                checkCodeContains(
                        "mirrorHorizontalBotToTop() sets height to pixels.length", target);
        assertTrue(passed);
    }

    @Test
    public void test2b()
    {
        String target = "height/2";
        boolean passed = checkCodeContains("mirrorHorizontalBotToTop() uses height/2", target);
        assertTrue(passed);
    }

    @Test
    public void test2c()
    {
        String target = "pixels[height - row - 1][col]";
        boolean passed =
                checkCodeContains(
                        "mirrorHorizontalBotToTop() uses pixels[height - row - 1][col]", target);
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String target = "topPixel.setColor(";
        boolean passed =
                checkCodeContains(
                        "mirrorHorizontalBotToTop() uses setColor to change the topPixel variable",
                        target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "for";
        String code = getCode();
        int index = code.indexOf("public void mirrorHorizontalBotToTop(");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 2;
        }
        getResults(
                "true",
                "" + passed,
                "Checking that mirrorHorizontalBotToTop() contains 2 for loops",
                passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.43.4.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_picture-lab-A6-mirrorDiagonal">
                <div class="ac_question" id="csawesome2_2_picture-lab-A6-mirrorDiagonal_question">
                  <div class="para" id="picture-lab-A6-mirrorDiagonal-1-1">Picture Lab A6 Mirroring: Write a method method mirrorDiagonal that mirrors just a square part of the picture from bottom left to top right around a mirror placed on the diagonal line (the diagonal line is the one where the row index equals the column index).</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_picture-lab-A6-mirrorDiagonal_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /**
     * Method that mirrors the picture around a vertical mirror in the center of
     * the picture from left to right
     */
    public void mirrorVertical()
    {
        Pixel[][] pixels = this.getPixels2D();
        Pixel leftPixel = null;
        Pixel rightPixel = null;
        int width = pixels[0].length;
        for (int row = 0; row &lt; pixels.length; row++)
        {
            for (int col = 0; col &lt; width / 2; col++)
            {
                leftPixel = pixels[row][col];
                rightPixel = pixels[row][width - 1 - col];
                rightPixel.setColor(leftPixel.getColor());
            }
        }
    }

    /*
      Write a method method mirrorDiagonal that mirrors just a square part of the picture from bottom left to top right around a mirror placed on the diagonal line (the diagonal line is the one where the row index equals the column index).

      Add new method here.
    */

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        // or try puppy.jpg or caterpillar.jpg
        Picture pict = new Picture("beach2.jpg");
        pict.show();
        pict.mirrorDiagonal();
        pict.show();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void mirrorDiagonal()";
        boolean passed = checkCodeContains("mirrorDiagonal() method", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "col &lt; row";
        boolean passed = checkCodeContains("mirrorDiagonal() loops for col &lt; row", target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "for";
        String code = getCode();
        int index = code.indexOf("public void mirrorDiagonal()");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 2;
        }
        getResults(
                "true", "" + passed, "Checking that mirrorDiagonal() contains 2 for loops", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.43.5.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_picture-lab-A7-mirrorTemple">
                <div class="ac_question" id="csawesome2_2_picture-lab-A7-mirrorTemple_question">
                  <div class="para" id="picture-lab-A7-mirrorTemple-1-1">Picture Lab A7: Run to see mirrorTemple() working.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_picture-lab-A7-mirrorTemple_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /** Method mirrorTemple() fixes the temple.jpg picture */
    public void mirrorTemple()
    {
        int mirrorPoint = 276;
        Pixel leftPixel = null;
        Pixel rightPixel = null;
        Pixel[][] pixels = this.getPixels2D();

        // loop through the rows
        for (int row = 27; row &lt; 97; row++)
        {
            // loop from 13 to just before the mirror point
            for (int col = 13; col &lt; mirrorPoint; col++)
            {
                leftPixel = pixels[row][col];
                rightPixel = pixels[row][mirrorPoint - col + mirrorPoint];
                rightPixel.setColor(leftPixel.getColor());
            }
        }
    }

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        Picture pict = new Picture("temple.jpg");
        pict.show();
        pict.mirrorTemple();
        pict.show();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void mirrorTemple()";
        boolean passed = checkCodeContains("mirrorTemple() method", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.43.5.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_picture-A7-1" data-multipleanswers="false"><div class="para" id="picture-A7-1-1-1">6-4-7-2: How many times would the body of this nested for loop execute?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int row = 7; row &lt; 17; row++)
    for (int col = 6; col &lt; 15; col++)
</code></pre></div><li data-component="answer" id="csawesome2_2_picture-A7-1_opt_a"><div class="para" id="picture-A7-1-2-1-1-1">17</div></li><li data-component="feedback" id="csawesome2_2_picture-A7-1_opt_a"><div class="para" id="picture-A7-1-2-1-2-1">Don’t forget the inner loop.</div></li><li data-component="answer" id="csawesome2_2_picture-A7-1_opt_b"><div class="para" id="picture-A7-1-2-2-1-1">17 - 7 = 10</div></li><li data-component="feedback" id="csawesome2_2_picture-A7-1_opt_b"><div class="para" id="picture-A7-1-2-2-2-1">Don’t forget the inner loop.</div></li><li data-component="answer" id="csawesome2_2_picture-A7-1_opt_c" data-correct=""><div class="para" id="picture-A7-1-2-3-1-1">(17 - 7) * (15 - 6) = 90</div></li><li data-component="feedback" id="csawesome2_2_picture-A7-1_opt_c"><div class="para" id="picture-A7-1-2-3-2-1">Correct</div></li><li data-component="answer" id="csawesome2_2_picture-A7-1_opt_d"><div class="para" id="picture-A7-1-2-4-1-1">17 * 15 = 255</div></li><li data-component="feedback" id="csawesome2_2_picture-A7-1_opt_d"><div class="para" id="picture-A7-1-2-4-2-1">The loops do not start at 0.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.43.5.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_picture-A7-2" data-multipleanswers="false">
                <div class="para" id="picture-A7-2-1-1">6-4-7-3: How many times would the body of this nested for loop execute?</div>
                <pre class="code-block tex2jax_ignore">for (int row = 5; row &lt;= 11; row++)
    for (int col = 3; col &lt;= 18; col++)
</pre>
                <li data-component="answer" id="csawesome2_2_picture-A7-2_opt_a">
                  <div class="para" id="picture-A7-2-2-1-1-1">11</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-A7-2_opt_a">
                  <div class="para" id="picture-A7-2-2-1-2-1">Don’t forget the inner loop.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-A7-2_opt_b">
                  <div class="para" id="picture-A7-2-2-2-1-1">11 - 5 = 6</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-A7-2_opt_b">
                  <div class="para" id="picture-A7-2-2-2-2-1">Don’t forget the inner loop.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-A7-2_opt_c">
                  <div class="para" id="picture-A7-2-2-3-1-1">(11 - 5) * (18 - 3) = 90</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-A7-2_opt_c">
                  <div class="para" id="picture-A7-2-2-3-2-1">Notice that these loops use &lt;=</div>
                </li>
                <li data-component="answer" id="csawesome2_2_picture-A7-2_opt_d" data-correct="">
                  <div class="para" id="picture-A7-2-2-4-1-1">(11 - 5 + 1) * (18 - 3 + 1) = 112</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_picture-A7-2_opt_d">
                  <div class="para" id="picture-A7-2-2-4-2-1">Yes, the loops do not start at 0 and use &lt;=.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.43.5.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_picture-lab-A7-mirror-temple-count">
                <div class="ac_question" id="csawesome2_2_picture-lab-A7-mirror-temple-count_question">
                  <div class="para" id="picture-lab-A7-mirror-temple-count-1-1">Picture Lab A7 Mirroring: Check the calculation of the number of times the body of the nested loop executes by adding an integer count variable to the mirrorTemple method that starts out at 0 and increments inside the body of the loop. Print the value of count after the nested loop ends which should be 18410.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_picture-lab-A7-mirror-temple-count_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /** Method mirrorTemple() fixes the temple.jpg picture */
    public void mirrorTemple()
    {
        int mirrorPoint = 276;
        Pixel leftPixel = null;
        Pixel rightPixel = null;
        int count = 0;
        Pixel[][] pixels = this.getPixels2D();

        // loop through the rows
        for (int row = 27; row &lt; 97; row++)
        {
            // loop from 13 to just before the mirror point
            for (int col = 13; col &lt; mirrorPoint; col++)
            {
                leftPixel = pixels[row][col];
                rightPixel = pixels[row][mirrorPoint - col + mirrorPoint];
                rightPixel.setColor(leftPixel.getColor());
            }
        }
    }

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        Picture pict = new Picture("temple.jpg");
        pict.show();
        pict.mirrorTemple();
        pict.show();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "count = 0";
        boolean passed = checkCodeContains("mirrorTemple() has count = 0", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "count++";
        boolean passed = checkCodeContains("mirrorTemple() has count++", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.43.5.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_picture-lab-A7-mirrorArms">
                <div class="ac_question" id="csawesome2_2_picture-lab-A7-mirrorArms_question">
                  <div class="para" id="picture-lab-A7-mirrorArms-1-1">Picture Lab A7 Mirroring: Write the method mirrorArms to mirror the arms on the snowperson (“snowperson.jpg”) to make a snowperson with 4 arms.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_picture-lab-A7-mirrorArms_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /** Write the method mirrorArms() to add more arms to snowperson.jpg */

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        Picture pict = new Picture("snowperson.jpg");
        pict.show();
        pict.mirrorArms();
        pict.show();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void mirrorArms()";
        boolean passed = checkCodeContains("mirrorArms() method", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "row = 155";
        boolean passed = checkCodeContains("starts looping at row = 155", target);
        assertTrue(passed);
    }

    @Test
    public void test2b()
    {
        String target = "191";
        boolean passed = checkCodeContains("mirrors at pixel 191", target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "for";
        String code = getCode();
        int index = code.indexOf("public void mirrorArms()");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 4;
        }
        getResults(
                "true",
                "" + passed,
                "Checking that mirrorArms() contains 4 (2 nested) for loops for mirroring arms",
                passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.43.5.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_picture-lab-A7-mirrorGull">
                <div class="ac_question" id="csawesome2_2_picture-lab-A7-mirrorGull_question">
                  <div class="para" id="picture-lab-A7-mirrorGull-1-1">Picture Lab A7 Mirroring: Write the method mirrorGull to mirror the seagull (“seagull.jpg”) to the right so that there are two seagulls on the beach near each other.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_picture-lab-A7-mirrorGull_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /**
     * Write the method mirrorGull to mirror the seagull to the right so that there
     * are two seagulls on the beach near each other.
     */

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        Picture pict = new Picture("seagull.jpg");
        pict.show();
        pict.mirrorGull();
        pict.show();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void mirrorGull()";
        boolean passed = checkCodeContains("mirrorGull() method", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "row = 225";
        boolean passed = checkCodeContains("starts looping at row = 225", target);
        assertTrue(passed);
    }

    @Test
    public void test2b()
    {
        String target = "350";
        boolean passed = checkCodeContains("mirrors at pixel 350", target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "for";
        String code = getCode();
        int index = code.indexOf("public void mirrorGull()");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 2;
        }
        getResults("true", "" + passed, "Checking that mirrorGull() contains 2 for loops", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.43.6.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_picture-lab-A8-createCollage">
                <div class="ac_question" id="csawesome2_2_picture-lab-A8-createCollage_question">
                  <div class="para" id="picture-lab-A8-createCollage-1-1">Picture Lab A8: Run to see createCollage() working.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_picture-lab-A8-createCollage_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int width, int height)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /** zeroBlue() method sets the blue values at all pixels to zero */
    public void zeroBlue()
    {
        Pixel[][] pixels = this.getPixels2D();

        for (Pixel[] rowArray : pixels)
        {
            for (Pixel p : rowArray)
            {
                p.setBlue(0);
            }
        }
    }

    /* mirrorVertical() */
    public void mirrorVertical()
    {
        Pixel[][] pixels = this.getPixels2D();
        Pixel leftPixel = null;
        Pixel rightPixel = null;
        int width = pixels[0].length;
        for (int row = 0; row &lt; pixels.length; row++)
        {
            for (int col = 0; col &lt; width / 2; col++)
            {
                leftPixel = pixels[row][col];
                rightPixel = pixels[row][width - 1 - col];
                rightPixel.setColor(leftPixel.getColor());
            }
        }
    }

    /**
     * copy from the passed fromPic to the specified startRow and startCol in the
     * current picture
     *
     * @param fromPic the picture to copy from
     * @param startRow the start row to copy to
     * @param startCol the start col to copy to
     */
    public void copy(Picture fromPic, int startRow, int startCol)
    {
        Pixel fromPixel = null;
        Pixel toPixel = null;
        Pixel[][] toPixels = this.getPixels2D();
        Pixel[][] fromPixels = fromPic.getPixels2D();
        for (int fromRow = 0, toRow = startRow;
                fromRow &lt; fromPixels.length &amp;&amp; toRow &lt; toPixels.length;
                fromRow++, toRow++)
                {
            for (int fromCol = 0, toCol = startCol;
                    fromCol &lt; fromPixels[0].length &amp;&amp; toCol &lt; toPixels[0].length;
                    fromCol++, toCol++)
                    {
                fromPixel = fromPixels[fromRow][fromCol];
                toPixel = toPixels[toRow][toCol];
                toPixel.setColor(fromPixel.getColor());
            }
        }
    }

    public void createCollage()
    {
        // You can also try butterfly.jpg and snowflake.jpg
        Picture flower1 = new Picture("flower1.jpg");
        Picture flower2 = new Picture("flower2.jpg");
        this.copy(flower1, 0, 0);
        this.copy(flower2, 100, 0);
        this.copy(flower1, 200, 0);
        Picture flowerNoBlue = new Picture(flower2);
        flowerNoBlue.zeroBlue();
        this.copy(flowerNoBlue, 300, 0);
        this.copy(flower1, 400, 0);
        this.copy(flower2, 500, 0);
        this.mirrorVertical();
        this.show();
    }

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        Picture p = new Picture(500, 500);
        p.createCollage();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void createCollage()";
        boolean passed = checkCodeContains("createCollage() method", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.43.6.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_picture-lab-A8-createCollage-copyPartial">
                <div class="ac_question" id="csawesome2_2_picture-lab-A8-createCollage-copyPartial_question">
                  <div class="para" id="picture-lab-A8-createCollage-copyPartial-1-1">Picture Lab A8: Create a second copy method called copyPartial that adds parameters to allow you to copy just part of the fromPic. You will need to add parameters that specify the start row, end row, start column, and end column to copy from. Use it in your collage.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_picture-lab-A8-createCollage-copyPartial_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int width, int height)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /** zeroBlue() method sets the blue values at all pixels to zero */
    public void zeroBlue()
    {
        Pixel[][] pixels = this.getPixels2D();

        for (Pixel[] rowArray : pixels)
        {
            for (Pixel p : rowArray)
            {
                p.setBlue(0);
            }
        }
    }

    /* mirrorVertical() */
    public void mirrorVertical()
    {
        Pixel[][] pixels = this.getPixels2D();
        Pixel leftPixel = null;
        Pixel rightPixel = null;
        int width = pixels[0].length;
        for (int row = 0; row &lt; pixels.length; row++)
        {
            for (int col = 0; col &lt; width / 2; col++)
            {
                leftPixel = pixels[row][col];
                rightPixel = pixels[row][width - 1 - col];
                rightPixel.setColor(leftPixel.getColor());
            }
        }
    }

    /**
     * copy from the passed fromPic to the specified startRow and startCol in the
     * current picture
     *
     * @param fromPic the picture to copy from
     * @param startRow the start row to copy to
     * @param startCol the start col to copy to
     */
    public void copy(Picture fromPic, int startRow, int startCol)
    {
        Pixel fromPixel = null;
        Pixel toPixel = null;
        Pixel[][] toPixels = this.getPixels2D();
        Pixel[][] fromPixels = fromPic.getPixels2D();
        for (int fromRow = 0, toRow = startRow;
                fromRow &lt; fromPixels.length &amp;&amp; toRow &lt; toPixels.length;
                fromRow++, toRow++)
                {
            for (int fromCol = 0, toCol = startCol;
                    fromCol &lt; fromPixels[0].length &amp;&amp; toCol &lt; toPixels[0].length;
                    fromCol++, toCol++)
                    {
                fromPixel = fromPixels[fromRow][fromCol];
                toPixel = toPixels[toRow][toCol];
                toPixel.setColor(fromPixel.getColor());
            }
        }
    }

    /**
     * Create a second copy method called copyPartial that adds parameters to allow
     * you to copy just part of fromPic. You will need to add parameters that
     * specify the start row, start column, end row, end column to copy from as
     * well as the start row and start column to copy to like the method above.
     *
* &lt;p&gt;Write your method here and use it in createCollage below
     */
    public void createCollage()
    {
        Picture snowflake = new Picture("snowflake.jpg");

        // copy just the (0,0) to (50,50) portion of the snowflake to (0,0)
        this.copyPartial(snowflake, 0, 0, 50, 50, 0, 0);
        // copy just the (0,50) to (50,100) portion of the snowflake to (0,0)
        this.copyPartial(snowflake, 0, 45, 50, 90, 70, 50);

        this.mirrorVertical();
        this.show();
    }

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        Picture p = new Picture(500, 500);
        p.createCollage();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void copyPartial(";
        boolean passed = checkCodeContains("copyPartial method", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "int";
        String code = getCode();
        int index = code.indexOf("public void copyPartial(");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 6;
        }
        getResults(
                "true", "" + passed, "Checking that copyPartial contains 6 int parameters", passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "for";
        String code = getCode();
        int index = code.indexOf("public void copyPartial(");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 2;
        }
        getResults("true", "" + passed, "Checking that copyPartial() contains 2 for loops", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 4.43.6.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_picture-lab-A8-myCollage">
                <div class="ac_question" id="csawesome2_2_picture-lab-A8-myCollage_question">
                  <div class="para" id="picture-lab-A8-myCollage-1-1">Picture Lab A8: Create a myCollage method that has at least three pictures (can be the same picture) copied three times with three different picture manipulations and at least one mirroring.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_picture-lab-A8-myCollage_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int width, int height)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /** zeroBlue() method sets the blue values at all pixels to zero */
    public void zeroBlue()
    {
        Pixel[][] pixels = this.getPixels2D();

        for (Pixel[] rowArray : pixels)
        {
            for (Pixel p : rowArray)
            {
                p.setBlue(0);
            }
        }
    }

    /* mirrorVertical() */
    public void mirrorVertical()
    {
        Pixel[][] pixels = this.getPixels2D();
        Pixel leftPixel = null;
        Pixel rightPixel = null;
        int width = pixels[0].length;
        for (int row = 0; row &lt; pixels.length; row++)
        {
            for (int col = 0; col &lt; width / 2; col++)
            {
                leftPixel = pixels[row][col];
                rightPixel = pixels[row][width - 1 - col];
                rightPixel.setColor(leftPixel.getColor());
            }
        }
    }

    /**
     * copy from the passed fromPic to the specified startRow and startCol in the
     * current picture
     *
     * @param fromPic the picture to copy from
     * @param startRow the start row to copy to
     * @param startCol the start col to copy to
     */
    public void copy(Picture fromPic, int startRow, int startCol)
    {
        Pixel fromPixel = null;
        Pixel toPixel = null;
        Pixel[][] toPixels = this.getPixels2D();
        Pixel[][] fromPixels = fromPic.getPixels2D();
        for (int fromRow = 0, toRow = startRow;
                fromRow &lt; fromPixels.length &amp;&amp; toRow &lt; toPixels.length;
                fromRow++, toRow++)
                {
            for (int fromCol = 0, toCol = startCol;
                    fromCol &lt; fromPixels[0].length &amp;&amp; toCol &lt; toPixels[0].length;
                    fromCol++, toCol++)
                    {
                fromPixel = fromPixels[fromRow][fromCol];
                toPixel = toPixels[toRow][toCol];
                toPixel.setColor(fromPixel.getColor());
            }
        }
    }

    public void createCollage()
    {
        // You can also try butterfly.jpg and snowflake.jpg
        Picture flower1 = new Picture("flower1.jpg");
        Picture flower2 = new Picture("flower2.jpg");

        this.copy(flower1, 0, 0);
        this.copy(flower2, 100, 0);
        this.copy(flower1, 200, 0);
        Picture flowerNoBlue = new Picture(flower2);
        flowerNoBlue.zeroBlue();
        this.copy(flowerNoBlue, 300, 0);
        this.copy(flower1, 400, 0);
        this.copy(flower2, 500, 0);
        this.mirrorVertical();
        this.show();
    }

    /**
     * Create a myCollage() method that has at least three pictures (can be the
     * same picture) copied three times with three different picture manipulations
     * and at least one mirroring.
     *
* &lt;p&gt;Write your method here.
     */

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        Picture p = new Picture(500, 500);
        p.myCollage();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void myCollage(";
        boolean passed = checkCodeContains("myCollage method", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "copy";
        String code = getCode();
        int index = code.indexOf("public void myCollage(");
        boolean passed = false;
        int num = 0;
        if (index &gt; 0)
        {
            code = code.substring(index);
            num = countOccurences(code, target);
            passed = num &gt;= 3;
        }
        getResults("3", "" + num, "Checking that myCollage contains 3 copy calls", passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "mirror";
        String code = getCode();
        int index = code.indexOf("public void myCollage(");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 1;
        }
        getResults("true", "" + passed, "Checking that myCollage() calls a mirror method", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.43.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_picture-lab-A9-edgeDetection">
                <div class="ac_question" id="csawesome2_2_picture-lab-A9-edgeDetection_question">
                  <div class="para" id="picture-lab-A9-edgeDetection-1-1">Picture Lab A9: Run to see edgeDetection working.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_picture-lab-A9-edgeDetection_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    public void edgeDetection(int edgeDist)
    {
        Pixel leftPixel = null;
        Pixel rightPixel = null;
        Pixel[][] pixels = this.getPixels2D();
        Color rightColor = null;
        for (int row = 0; row &lt; pixels.length; row++)
        {
            for (int col = 0; col &lt; pixels[0].length - 1; col++)
            {
                leftPixel = pixels[row][col];
                rightPixel = pixels[row][col + 1];
                rightColor = rightPixel.getColor();
                if (leftPixel.colorDistance(rightColor) &gt; edgeDist)
                    leftPixel.setColor(Color.BLACK);
                else leftPixel.setColor(Color.WHITE);
            }
        }
    }

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        // You can also try temple2.jpg
        Picture pict = new Picture("swan.jpg");
        pict.show();
        pict.edgeDetection(12);
        pict.show();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void edgeDetection(";
        boolean passed = checkCodeContains("edgeDetection( method", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.43.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_picture-lab-A9-edgeDetection2">
                <div class="ac_question" id="csawesome2_2_picture-lab-A9-edgeDetection2_question">
                  <div class="para" id="picture-lab-A9-edgeDetection2-1-1">Picture Lab A9: Improve the edgeDetection method by adding another nested loop that compares the current pixel with the pixel below it and sets the current pixel color to black as well, when the color distance is greater than the specified edge distance.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_picture-lab-A9-edgeDetection2_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    /**
     * Add another nested loop that compares the current pixel with the pixel below
     * it and sets the current pixel color to black as well when the color distance
     * is greater than the specified edge distance.
     */
    public void edgeDetection(int edgeDist)
    {
        Pixel leftPixel = null;
        Pixel rightPixel = null;
        Pixel[][] pixels = this.getPixels2D();
        Color rightColor = null;
        for (int row = 0; row &lt; pixels.length; row++)
        {
            for (int col = 0; col &lt; pixels[0].length - 1; col++)
            {
                leftPixel = pixels[row][col];
                rightPixel = pixels[row][col + 1];
                rightColor = rightPixel.getColor();
                if (leftPixel.colorDistance(rightColor) &gt; edgeDist)
                    leftPixel.setColor(Color.BLACK);
                else leftPixel.setColor(Color.WHITE);
            }
        }
    }

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        // You can also try temple2.jpg
        Picture pict = new Picture("swan.jpg");
        pict.show();
        pict.edgeDetection(12);
        pict.show();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void edgeDetection(";
        boolean passed = checkCodeContains("edgeDetection method", target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "for";
        String code = getCode();
        int index = code.indexOf("public void edgeDetection(");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 4;
        }
        getResults(
                "true",
                "" + passed,
                "Checking that edgeDetection contains 4 (2 nested) for loops",
                passed);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "colorDistance";
        String code = getCode();
        int index = code.indexOf("public void edgeDetection(");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 2;
        }
        getResults(
                "true",
                "" + passed,
                "Checking that edgeDetection calls colorDistance twice",
                passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 4.43.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_picture-lab-A9-myEdgeDetection">
                <div class="ac_question" id="csawesome2_2_picture-lab-A9-myEdgeDetection_question">
                  <div class="para" id="picture-lab-A9-myEdgeDetection-1-1">Picture Lab A9: Come up with another algorithm for edgeDetection in a method called myEdgeDetection.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_picture-lab-A9-myEdgeDetection_editor" data-question_label="" data-codelens="true">import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
    ///////////////////// constructors //////////////////////////////////

    /** Constructor that takes no arguments */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the height and width
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

    ////////////////////// methods ///////////////////////////////////////

    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName, height
     *     and width.
     */
    public String toString()
    {
        String output =
                "Picture, filename "
                        + getFileName()
                        + " height "
                        + getHeight()
                        + " width "
                        + getWidth();
        return output;
    }

    public void edgeDetection(int edgeDist)
    {
        Pixel leftPixel = null;
        Pixel rightPixel = null;
        Pixel[][] pixels = this.getPixels2D();
        Color rightColor = null;
        for (int row = 0; row &lt; pixels.length; row++)
        {
            for (int col = 0; col &lt; pixels[0].length - 1; col++)
            {
                leftPixel = pixels[row][col];
                rightPixel = pixels[row][col + 1];
                rightColor = rightPixel.getColor();
                if (leftPixel.colorDistance(rightColor) &gt; edgeDist)
                    leftPixel.setColor(Color.BLACK);
                else leftPixel.setColor(Color.WHITE);
            }
        }
    }

    /**
     * Come up with another algorithm for edgeDetection in a method called
     * myEdgeDetection
     */

    /* Main method for testing
     */
    public static void main(String[] args)
    {
        // You can also try temple2.jpg
        Picture pict = new Picture("swan.jpg");
        pict.show();
        pict.myEdgeDetection();
        pict.show();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String target = "public void myEdgeDetection(";
        boolean passed = checkCodeContains("myEdgeDetection( method", target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "for";
        String code = getCode();
        int index = code.indexOf("public void myEdgeDetection(");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 2;
        }
        getResults(
                "true",
                "" + passed,
                "Checking that myEdgeDetection contains at least 2 for loops",
                passed);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "colorDistance";
        String code = getCode();
        int index = code.indexOf("public void myEdgeDetection(");
        boolean passed = false;
        if (index &gt; 0)
        {
            code = code.substring(index);
            int num = countOccurences(code, target);
            passed = num &gt;= 1;
        }
        getResults(
                "true",
                "" + passed,
                "Checking that myEdgeDetection calls colorDistance at least once",
                passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
  </chapter>
  <chapter>
    <id>csawesome2-9</id>
    <title>Inheritance</title>
    <subchapter>
      <id>inheritance-superclass-subclass</id>
      <title>Inheritance, Superclass, Subclass</title>
      <question>
        <label>Exercise 5.1.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qoo10-1-1" data-multipleanswers="false">
                <div class="para" id="qoo10-1-1-1-1">9-1-1: If you don’t specify the parent class in a class declaration which of the following is true?</div>
                <li data-component="answer" id="csawesome2_2_qoo10-1-1_opt_a">
                  <div class="para" id="qoo10-1-1-2-1-1-1">It doesn’t have a parent class.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo10-1-1_opt_a">
                  <div class="para" id="qoo10-1-1-2-1-2-1">If no parent class is specified using the extends keyword, the current class will still have a parent class.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qoo10-1-1_opt_b" data-correct="">
                  <div class="para" id="qoo10-1-1-2-2-1-1">It inherits from the Object class.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo10-1-1_opt_b">
                  <div class="para" id="qoo10-1-1-2-2-2-1">If no parent class is specified using the extends keyword, the parent class will be Object.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qoo10-1-1_opt_c">
                  <div class="para" id="qoo10-1-1-2-3-1-1">It inherits from the Default class.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo10-1-1_opt_c">
                  <div class="para" id="qoo10-1-1-2-3-2-1">There isn’t a class named Default.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qoo10-1-1_opt_d">
                  <div class="para" id="qoo10-1-1-2-4-1-1">It inherits from the Parent class.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo10-1-1_opt_d">
                  <div class="para" id="qoo10-1-1-2-4-2-1">There isn’t a class named Parent.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.1.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qoo10-1-2" data-multipleanswers="false">
                <div class="para" id="qoo10-1-2-1-1">9-1-2: If the class Vehicle has the instance fields make and model and the class Car inherits from the class Vehicle, will a car object have a make and model?</div>
                <li data-component="answer" id="csawesome2_2_qoo10-1-2_opt_a" data-correct="">
                  <div class="para" id="qoo10-1-2-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo10-1-2_opt_a">
                  <div class="para" id="qoo10-1-2-2-1-2-1">Yes, a child class inherits all the parent class object field and methods.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qoo10-1-2_opt_b">
                  <div class="para" id="qoo10-1-2-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo10-1-2_opt_b">
                  <div class="para" id="qoo10-1-2-2-2-2-1">Why would inheritance be useful if you didn’t actually get anything from the parent class?</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.1.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qoo10-1-3" data-multipleanswers="false">
                <div class="para" id="qoo10-1-3-1-1">9-1-3: If I had a class ParkingGarage should it inherit from the class Vehicle?</div>
                <li data-component="answer" id="csawesome2_2_qoo10-1-3_opt_a">
                  <div class="para" id="qoo10-1-3-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo10-1-3_opt_a">
                  <div class="para" id="qoo10-1-3-2-1-2-1">Is a parking garage a kind of vehicle?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qoo10-1-3_opt_b" data-correct="">
                  <div class="para" id="qoo10-1-3-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo10-1-3_opt_b">
                  <div class="para" id="qoo10-1-3-2-2-2-1">No, a parking garage is not a kind of vehicle.  Instead it has vehicles in it which implies that the ParkingGarage class would have a field that tracks the vehicles in it.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.1.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qoo10-1-4" data-multipleanswers="false">
                <div class="para" id="qoo10-1-4-1-1">9-1-4: In Java how many parents can a class have?</div>
                <li data-component="answer" id="csawesome2_2_qoo10-1-4_opt_a">
                  <div class="para" id="qoo10-1-4-2-1-1-1">0</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo10-1-4_opt_a">
                  <div class="para" id="qoo10-1-4-2-1-2-1">In Java a class always has at least one parent class.  If none is specified the default is Object.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qoo10-1-4_opt_b" data-correct="">
                  <div class="para" id="qoo10-1-4-2-2-1-1">1</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo10-1-4_opt_b">
                  <div class="para" id="qoo10-1-4-2-2-2-1">All classes in Java have one and only one parent class.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qoo10-1-4_opt_c">
                  <div class="para" id="qoo10-1-4-2-3-1-1">2</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo10-1-4_opt_c">
                  <div class="para" id="qoo10-1-4-2-3-2-1">While that is how it works with humans, is that how Java works?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qoo10-1-4_opt_d">
                  <div class="para" id="qoo10-1-4-2-4-1-1">infinite</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo10-1-4_opt_d">
                  <div class="para" id="qoo10-1-4-2-4-2-1">This is true for interfaces, but not parent classes.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.1.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_StudentInheritance">
                <div class="ac_question" id="csawesome2_2_StudentInheritance_question">
                  <div class="para" id="StudentInheritance-1-1">What do you need to add to the Student class declaration below to make it inherit from type Person? When you fix the code, the <dfn class="terminology">instanceof</dfn> operator will return true that Student s is an instance of both the Student and the Person class. What other private instance variables could you add to Person and Student? In which class would you put an address attribute? Where would you put gpa?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_StudentInheritance_editor" data-question_label="" data-codelens="true">class Person
{
    private String name;
}

// How can we make the Student class inherit from class Person?
public class Student
{
    private int id;

    public static void main(String[] args)
    {
        Student s = new Student();
        System.out.println(s instanceof Student);
        System.out.println(s instanceof Person);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "true\ntrue";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void containsExtends()
    {
        boolean passed = checkCodeContains("Student extends Person");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.1.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qoo_1" data-multipleanswers="false">
                <div class="para" id="qoo_1-1-1">9-1-6:  An online store is working on an online ordering system for Books and Movies. For each type of Published Material (books and movies) they need to track the id, title, date published, and price. Which of the following would be the best design?</div>
                <li data-component="answer" id="csawesome2_2_qoo_1_opt_a">
                  <div class="para" id="qoo_1-2-1-1-1">Create one class PublishedMaterial with the requested attributes.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo_1_opt_a">
                  <div class="para" id="qoo_1-2-1-2-1">This will complicate the process of retrieving objects based on their type. Also if we need to add information that is specific to Book or Movie, it would be best if these were subclasses of PublishedMaterial.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qoo_1_opt_b">
                  <div class="para" id="qoo_1-2-2-1-1">Create classes Book and Movie and each class has the requested attributes.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo_1_opt_b">
                  <div class="para" id="qoo_1-2-2-2-1">This involves writing more code than is necessary (usually people copy and paste the shared code) and makes it harder to fix errors. It would be better to put common attributes and methods in the superclass PublishedMaterial and have Book and Movie be subclasses.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qoo_1_opt_c" data-correct="">
                  <div class="para" id="qoo_1-2-3-1-1">Create the class PublishedMaterial and have Book and Movie inherit from it all the listed attributes.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo_1_opt_c">
                  <div class="para" id="qoo_1-2-3-2-1">We will need to get objects based on their type so we should create classes for Book and Movie. They have common attributes so we should put these in a common superclass PublishedMaterial.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qoo_1_opt_d">
                  <div class="para" id="qoo_1-2-4-1-1">Create one class BookStore with the requested attributes.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo_1_opt_d">
                  <div class="para" id="qoo_1-2-4-2-1">The class name, BookStore, seems to imply the thing that keeps track of the store. This would be an appropriate class name for an object that handles the items in the Bookstore. However, for the published material, it would be better to use a superclass PublishedMaterial and subclasses for Books and Movies.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qoo_1_opt_e">
                  <div class="para" id="qoo_1-2-5-1-1">Create classes for PublishedMaterial, Books, Movies, Title, Price, ID, Authors, DatePublished</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo_1_opt_e">
                  <div class="para" id="qoo_1-2-5-2-1">This is more classes than is necessary. Items such as Title, Price, ID, and DatePublished are simple variables that do not need a class of their own but should be attributes in a PublishedMaterial superclass, with Movies and Books as subclasses.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.1.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qoo_2" data-multipleanswers="false">
                <div class="para" id="qoo_2-1-1">9-1-7:  An online site shows information about Books and Authors. What kind of relationship do these two classes have?</div>
                <li data-component="answer" id="csawesome2_2_qoo_2_opt_a">
                  <div class="para" id="qoo_2-2-1-1-1">An is-a relationship. The Author class should be a subclass of the Book class.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo_2_opt_a">
                  <div class="para" id="qoo_2-2-1-2-1">Is an Author a type of Book?  Or, does a Book have an Author associated with it?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qoo_2_opt_b">
                  <div class="para" id="qoo_2-2-2-1-1">An is-a relationship. The Book class should be a subclass of the Author class.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo_2_opt_b">
                  <div class="para" id="qoo_2-2-2-2-1">Is a Book a type of Author?  Or, does a Book have an Author associated with it?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qoo_2_opt_c" data-correct="">
                  <div class="para" id="qoo_2-2-3-1-1">A has-a relationship. The Book class has an Author attribute.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo_2_opt_c">
                  <div class="para" id="qoo_2-2-3-2-1">A Book has an Author associated with it. Note that you could also say that an Author has many Books associated with it.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.1.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qoo_3" data-multipleanswers="false">
                <div class="para" id="qoo_3-1-1">9-1-8: What Java keyword is used to set up an inheritance relationship between a subclass and a superclass?</div>
                <li data-component="answer" id="csawesome2_2_qoo_3_opt_a">
                  <div class="para" id="qoo_3-2-1-1-1">superclass</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo_3_opt_a">
                  <div class="para" id="qoo_3-2-1-2-1">The parent class is the superclass, but this is not the Java keyword for declaring the parent class.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qoo_3_opt_b">
                  <div class="para" id="qoo_3-2-2-1-1">parent</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo_3_opt_b">
                  <div class="para" id="qoo_3-2-2-2-1">The class you are inheriting from is called the parent or superclass, but this is not the Java keyword.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qoo_3_opt_c" data-correct="">
                  <div class="para" id="qoo_3-2-3-1-1">extends</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo_3_opt_c">
                  <div class="para" id="qoo_3-2-3-2-1">The extends keyword is used to specify the parent class.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qoo_3_opt_d">
                  <div class="para" id="qoo_3-2-4-1-1">class</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo_3_opt_d">
                  <div class="para" id="qoo_3-2-4-2-1">The class keyword is used to declare a class, but not the parent class.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.1.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-9-1-online-store">
                <div class="ac_question" id="csawesome2_2_challenge-9-1-online-store_question">
                  <div class="para" id="challenge-9-1-online-store-1-1">Declare at least 2 instance variables for each of the classes below. Create an inheritance or association relationship for some of them.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-9-1-online-store_editor" data-question_label="" data-codelens="true">class ItemForSale
{

}

class Movie
{

}

class Book
{

}

class Author
{

}

public class Store
{
    // instance variable (could be an array or ArrayList of one of the classes
    // above)

    public static void main(String[] args)
    {
        Store s = new Store();
        Book b = new Book();
        System.out.println(b instanceof ItemForSale);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Store");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "true";

        boolean passed = getResults(expect, output, "Running main", true);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String code = getCode();
        String target = "extends ItemForSale";

        int num = countOccurences(code, target);

        boolean passed = num &gt;= 2;
        getResults("2", "" + num, "Testing code for " + target);
        assertTrue(passed);
    }

    @Test
    public void testPrivateVariablesItemForSale()
    {
        String cname = "ItemForSale";
        changeClass(cname);
        String expect = "2+ Private";
        String output = testPrivateInstanceVariables();

        int num = Integer.parseInt(output.substring(0, output.indexOf(" ")));

        boolean passed = num &gt;= 2;

        getResults(expect, output, "Checking Instance Variables - " + cname, passed);
        assertTrue(passed);
    }

    @Test
    public void testPrivateVariablesAuthor()
    {
        String cname = "Author";
        changeClass(cname);
        String expect = "2+ Private";
        String output = testPrivateInstanceVariables();

        int num = Integer.parseInt(output.substring(0, output.indexOf(" ")));

        boolean passed = num &gt;= 2;

        getResults(expect, output, "Checking Instance Variables - " + cname, passed);
        assertTrue(passed);
    }

    @Test
    public void testPrivateVariablesMovie()
    {
        String cname = "Movie";
        changeClass(cname);
        String expect = "2+ Private";
        String output = testPrivateInstanceVariables();

        int num = Integer.parseInt(output.substring(0, output.indexOf(" ")));

        boolean passed = num &gt;= 2;

        getResults(expect, output, "Checking Instance Variables - " + cname, passed);
        assertTrue(passed);
    }

    @Test
    public void testPrivateVariablesBook()
    {
        String cname = "Book";
        changeClass(cname);
        String expect = "2+ Private";
        String output = testPrivateInstanceVariables();

        int num = Integer.parseInt(output.substring(0, output.indexOf(" ")));

        boolean passed = num &gt;= 2;

        getResults(expect, output, "Checking Instance Variables - " + cname, passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.1.2.4.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_apclass">
                <div class="ac_question" id="csawesome2_2_apclass_question">
                  <div class="para" id="apclass-1-1">What do you think the following code will print out?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_apclass_editor" data-question_label="" data-codelens="true">import java.util.*;

class Student
{
    private String name;
    private int id;
}

class Course
{
    private String title;
    private ArrayList&lt;Student&gt; roster;
}

public class APcourse extends Course
{
    private String APexamDate;

    public static void main(String[] args)
    {
        APcourse csa = new APcourse();
        System.out.print("Is an APcourse a Course? ");
        System.out.println(csa instanceof Course);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Is an APcourse a Course? true\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-9-3</id>
      <title>Inheritance and Constructors</title>
      <question>
        <label>Exercise 5.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qoo_9" data-multipleanswers="false"><div class="para" id="qoo_9-1-1">9-2-2: Given the class definitions of <code class="code-inline tex2jax_ignore">MPoint</code> and <code class="code-inline tex2jax_ignore">NamedPoint</code> below, which of the constructors that follow (labeled I, II, and III) would be valid in the <code class="code-inline tex2jax_ignore">NamedPoint</code> class?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">class MPoint
{
   private int myX; // coordinates
   private int myY;

   public MPoint( )
   {
      myX = 0;
      myY = 0;
   }

   public MPoint(int a, int b)
   {
      myX = a;
      myY = b;
   }

   // ... other methods not shown

}

public class NamedPoint extends MPoint
{
   private String myName;
   // constructors go here
   // ... other methods not shown
}

//  Proposed constructors for this class:
I.   public NamedPoint()
     {
        myName = "";
     }
II.  public NamedPoint(int d1, int d2, String name)
     {
        myX = d1;
        myY = d2;
        myName = name;
     }
III. public NamedPoint(int d1, int d2, String name)
     {
        super(d1, d2);
        myName = name;
     }
</code></pre></div><li data-component="answer" id="csawesome2_2_qoo_9_opt_a"><div class="para" id="qoo_9-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qoo_9_opt_a"><div class="para" id="qoo_9-2-1-2-1">I is okay but III is also okay.</div></li><li data-component="answer" id="csawesome2_2_qoo_9_opt_b" data-correct=""><div class="para" id="qoo_9-2-2-1-1">I and III</div></li><li data-component="feedback" id="csawesome2_2_qoo_9_opt_b"><div class="para" id="qoo_9-2-2-2-1">The MPoint variables are private and they can not be directly accessed in NamedPoint. You can use super as the first line in a constructor to initialize them. If you don’t use super as the first line in a constructor one will be put there by the compiler that will call the parent’s no argument constructor.</div></li><li data-component="answer" id="csawesome2_2_qoo_9_opt_c"><div class="para" id="qoo_9-2-3-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qoo_9_opt_c"><div class="para" id="qoo_9-2-3-2-1">II is invalid. Children do not have direct access to private fields. You can use super in a constructor to initialize these by calling the parent’s constructor with the same parameter list.</div></li><li data-component="answer" id="csawesome2_2_qoo_9_opt_d"><div class="para" id="qoo_9-2-4-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_qoo_9_opt_d"><div class="para" id="qoo_9-2-4-2-1">I is also okay</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.2.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-9-2-Square-Rectangle">
                <div class="ac_question" id="csawesome2_2_challenge-9-2-Square-Rectangle_question">
                  <div class="para logical" id="challenge-9-2-Square-Rectangle-1-1">
                    <ol class="decimal" id="challenge-9-2-Square-Rectangle-1-1-1">
                      <li id="challenge-9-2-Square-Rectangle-1-1-1-1">
                        <div class="para" id="challenge-9-2-Square-Rectangle-1-1-1-1-1">Make the class <code class="code-inline tex2jax_ignore">Square</code> below inherit from <code class="code-inline tex2jax_ignore">Rectangle</code>.</div>
                      </li>
                      <li id="challenge-9-2-Square-Rectangle-1-1-1-2">
                        <div class="para" id="challenge-9-2-Square-Rectangle-1-1-1-2-1">Add a <code class="code-inline tex2jax_ignore">Square</code> constructor with 1 argument for a side that calls <code class="code-inline tex2jax_ignore">Rectangle</code>‘s constructor with 2 arguments using <code class="code-inline tex2jax_ignore">super</code>.</div>
                      </li>
                      <li id="challenge-9-2-Square-Rectangle-1-1-1-3">
                        <div class="para" id="challenge-9-2-Square-Rectangle-1-1-1-3-1">Uncomment the objects in the <code class="code-inline tex2jax_ignore">main</code> method to test drawing the squares.</div>
                      </li>
                      <li id="challenge-9-2-Square-Rectangle-1-1-1-4">
                        <div class="para" id="challenge-9-2-Square-Rectangle-1-1-1-4-1">Add an <code class="code-inline tex2jax_ignore">area</code> method to <code class="code-inline tex2jax_ignore">Rectangle</code> that computes the area of the rectangle. Does it work for <code class="code-inline tex2jax_ignore">Square</code>s too? Test it.</div>
                      </li>
                      <li id="challenge-9-2-Square-Rectangle-1-1-1-5">
                        <div class="para" id="challenge-9-2-Square-Rectangle-1-1-1-5-1">Add another subclass called <code class="code-inline tex2jax_ignore">LongRectangle</code> which inherits from <code class="code-inline tex2jax_ignore">Rectangle</code> but has the additional condition that the length is always 2 x the width. Write constructors for it and test it out. Do not make it public (because only 1 class per file can be public).</div>
                      </li>
                    </ol>
                  </div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-9-2-Square-Rectangle_editor" data-question_label="" data-codelens="true">class Rectangle
{
    private int length;
    private int width;

    public Rectangle(int l, int w)
    {
        length = l;
        width = w;
    }

    public void draw()
    {
        for (int i = 0; i &lt; length; i++)
        {
            for (int j = 0; j &lt; width; j++)
            {
                System.out.print("* ");
            }
            System.out.println();
        }
        System.out.println();
    }

    // 4a. Add an area method to compute the area of the rectangle.

}

// 1. Make the class square inherit from Rectangle
public class Square
{

    // 2. Add a Square constructor with 1 argument for a side

    public static void main(String[] args)
    {
        Rectangle r = new Rectangle(3, 5);
        r.draw();
        // 3. Uncomment these to test
        // Square s1 = new Square(1);
        // s1.draw();
        // Square s = new Square(3);
        // s.draw();

        // 4b. Add some tests for your area method after you write it
    }
}

  // 5. Define the LongRectangle class here
  //    Do not make it public because only 1 class with main can be public in 1 file.
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Square");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main").trim();
        String expect = "* * * * *\n* * * * * \n* * * * * \n\n* \n\n* * * \n* * * \n* * *";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "extends Rectangle";

        boolean passed = checkCodeContains(target);
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String output = checkConstructor(new Object[] {1});
        String expect = "pass";

        boolean passed =
                getResults(expect, output, "Checking Square constructor with 1 argument (int)");
        assertTrue(passed);
    }

    @Test
    public void test5()
    {
        String target = "area";

        boolean passed = checkCodeContains(target);
        assertTrue(passed);
    }

    @Test
    public void test6()
    {
        String target = "LongRectangle extends Rectangle";

        boolean passed = checkCodeContains(target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.2.4.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_InitPrivateInherited">
                <div class="ac_question" id="csawesome2_2_InitPrivateInherited_question">
                  <div class="para" id="InitPrivateInherited-1-1">Try creating another Employee object in the main method that passes in your name and then use the get methods to print it out. Which class constructor sets the name? Which class constructor sets the id?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_InitPrivateInherited_editor" data-question_label="" data-codelens="true">class Person
{
    private String name;

    public Person(String theName)
    {
        this.name = theName;
    }

    public String getName()
    {
        return name;
    }

    public boolean setName(String theNewName)
    {
        if (theNewName != null)
        {
            this.name = theNewName;
            return true;
        }
        return false;
    }
}

public class Employee extends Person
{
    private int id;
    public static int nextId = 1;

    public Employee(String theName)
    {
        super(theName);
        id = nextId;
        nextId++;
    }

    public int getId()
    {
        return id;
    }

    public static void main(String[] args)
    {
        Employee emp = new Employee("Dani");
        System.out.println(emp.getName());
        System.out.println(emp.getId());
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Employee");
        Employee.nextId = 1;
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "Dani\n#";

        boolean passed = getResults(expect, output, "Running main");
        Employee.nextId = 1;
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String code = getCode();
        String target = "Employee * = new Employee";

        int num = countOccurencesRegex(code, target);

        boolean passed = num &gt;= 2;

        getResults("2+", "" + num, "Creating new Employee()", passed);
        Employee.nextId = 1;
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-9-4</id>
      <title>Overriding Methods</title>
      <question>
        <label>Exercise 5.3.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_GreeterOverride">
                <div class="ac_question" id="csawesome2_2_GreeterOverride_question">
                  <div class="para" id="GreeterOverride-1-1">After running the code, try overriding the greet(String) method in the MeanGreeter class to return <code class="code-inline tex2jax_ignore">Go away</code> + the who String.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_GreeterOverride_editor" data-question_label="" data-codelens="true">public class Greeter
{
    public String greet()
    {
        return "Hi";
    }

    public String greet(String who)
    {
        return "Hello " + who;
    }

    public static void main(String[] args)
    {
        Greeter g1 = new Greeter();
        System.out.println(g1.greet("Sam"));
        Greeter g2 = new MeanGreeter();
        System.out.println(g2.greet("Nimish"));
    }
}

class MeanGreeter extends Greeter
{
    public String greet()
    {
        return "Go away";
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Greeter");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Hello Sam\nGo away Nimish";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testCodeContains()
    {
        String code = removeSpaces(getCode());
        String target = removeSpaces("public String greet(String");

        int num = countOccurences(code, target);
        boolean passed = num &gt;= 2;
        getResults("2", "" + num, "Testing code for  number of greet methods");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.3.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qoo_5" data-multipleanswers="false"><div class="para" id="qoo_5-1-1">9-3-3:  Which of the following declarations in <code class="code-inline tex2jax_ignore">Student</code> would correctly <em class="emphasis">override</em> the <code class="code-inline tex2jax_ignore">getFood</code> method in <code class="code-inline tex2jax_ignore">Person</code>?</div> <blockquote class="blockquote" id="qoo_5-1-2"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Person
{
    private String name = null;

    public Person(String theName)
    {
        name = theName;
    }

    public String getFood()
    {
        return "Hamburger";
    }
}

public class Student extends Person
{
    private int id;
    private static int nextId = 0;

    public Student(String theName)
    {
        super(theName);
        id = nextId;
        nextId++;
    }

    public int getId()
    {
        return id;
    }

    public void setId(int theId)
    {
        this.id = theId;
    }
}
</code></pre></div></blockquote><li data-component="answer" id="csawesome2_2_qoo_5_opt_a"><div class="para" id="qoo_5-2-1-1-1">public void getFood()</div></li><li data-component="feedback" id="csawesome2_2_qoo_5_opt_a"><div class="para" id="qoo_5-2-1-2-1">The return type must match the parent method return type.</div></li><li data-component="answer" id="csawesome2_2_qoo_5_opt_b"><div class="para" id="qoo_5-2-2-1-1">public String getFood(int quantity)</div></li><li data-component="feedback" id="csawesome2_2_qoo_5_opt_b"><div class="para" id="qoo_5-2-2-2-1">The parameter lists must match (must have the same types in the same order).</div></li><li data-component="answer" id="csawesome2_2_qoo_5_opt_c" data-correct=""><div class="para" id="qoo_5-2-3-1-1">public String getFood()</div></li><li data-component="feedback" id="csawesome2_2_qoo_5_opt_c"><div class="para" id="qoo_5-2-3-2-1">The return type and parameter lists must match.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.3.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qoo_6" data-multipleanswers="false"><div class="para" id="qoo_6-1-1">9-3-4:  Which of the following declarations in <code class="code-inline tex2jax_ignore">Person</code> would correctly <em class="emphasis">overload</em> the <code class="code-inline tex2jax_ignore">getFood</code> method in <code class="code-inline tex2jax_ignore">Person</code>?</div> <blockquote class="blockquote" id="qoo_6-1-2"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Person
{
    private String name = null;

    public Person(String theName)
    {
        name = theName;
    }

    public String getFood()
    {
        return "Hamburger";
    }
}

public class Student extends Person
{
    private int id;
    private static int nextId = 0;

    public Student(String theName)
    {
        super(theName);
        id = nextId;
        nextId++;
    }

    public int getId()
    {
        return id;
    }

    public void setId(int theId)
    {
        this.id = theId;
    }
}
</code></pre></div></blockquote><li data-component="answer" id="csawesome2_2_qoo_6_opt_a"><div class="para" id="qoo_6-2-1-1-1">public void getFood()</div></li><li data-component="feedback" id="csawesome2_2_qoo_6_opt_a"><div class="para" id="qoo_6-2-1-2-1">You can not just change the return type to overload a method.</div></li><li data-component="answer" id="csawesome2_2_qoo_6_opt_b" data-correct=""><div class="para" id="qoo_6-2-2-1-1">public String getFood(int quantity)</div></li><li data-component="feedback" id="csawesome2_2_qoo_6_opt_b"><div class="para" id="qoo_6-2-2-2-1">For overloading you must change the parameter list (number, type, or order of parameters).</div></li><li data-component="answer" id="csawesome2_2_qoo_6_opt_c"><div class="para" id="qoo_6-2-3-1-1">public String getFood()</div></li><li data-component="feedback" id="csawesome2_2_qoo_6_opt_c"><div class="para" id="qoo_6-2-3-2-1">How is this different from the current declaration for getFood?</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.3.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_InheritedGetSet">
                <div class="ac_question" id="csawesome2_2_InheritedGetSet_question">
                  <div class="para" id="InheritedGetSet-1-1">Demonstrated inherited get/set methods.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_InheritedGetSet_editor" data-question_label="" data-codelens="true">class Person
{
    private String name;

    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        this.name = name;
    }
}

public class Employee extends Person
{

    private static int nextId = 1;
    private int id;

    public Employee()
    {
        id = nextId;
        nextId++;
    }

    public int getId()
    {
        return id;
    }

    public static void main(String[] args)
    {
        Employee emp = new Employee();
        emp.setName("Dina");
        System.out.println(emp.getName());
        System.out.println(emp.getId());
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Employee");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Dina\n1";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.3.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qoo_7" data-multipleanswers="false"><div class="para" id="qoo_7-1-1">9-3-6: Given the following class definitions which of the following would not compile if it was used in place of the missing code in the main method?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">class Item
{
    private int x;

    public void setX(int theX)
    {
        x = theX;
    }
    // ... other methods not shown
}

public class EnhancedItem extends Item
{
    private int y;

    public void setY(int theY)
    {
        y = theY;
    }

    // ... other methods not shown

    public static void main(String[] args)
    {
        EnhancedItem currItem = new EnhancedItem();
        // missing code
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qoo_7_opt_a"><div class="para" id="qoo_7-2-1-1-1">currItem.setX(3);</div></li><li data-component="feedback" id="csawesome2_2_qoo_7_opt_a"><div class="para" id="qoo_7-2-1-2-1">The object currItem is an EnhancedItem object and it will inherit the public setX method from Item.</div></li><li data-component="answer" id="csawesome2_2_qoo_7_opt_b"><div class="para" id="qoo_7-2-2-1-1">currItem.setY(2);</div></li><li data-component="feedback" id="csawesome2_2_qoo_7_opt_b"><div class="para" id="qoo_7-2-2-2-1">The object currItem is an EnhancedItem object and that class has a public setY method.</div></li><li data-component="answer" id="csawesome2_2_qoo_7_opt_c" data-correct=""><div class="para" id="qoo_7-2-3-1-1">currItem.x = 3;</div></li><li data-component="feedback" id="csawesome2_2_qoo_7_opt_c"><div class="para" id="qoo_7-2-3-2-1">Even though an EnhancedItem object will have a x field the subclass does not have direct access to a private field.  Use the public setX method instead.</div></li><li data-component="answer" id="csawesome2_2_qoo_7_opt_d"><div class="para" id="qoo_7-2-4-1-1">currItem.y = 2;</div></li><li data-component="feedback" id="csawesome2_2_qoo_7_opt_d"><div class="para" id="qoo_7-2-4-2-1">All code in the same class has direct access to all object fields.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.3.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-9-3-Pet-Sounds">
                <div class="ac_question" id="csawesome2_2_challenge-9-3-Pet-Sounds_question">
                  <div class="para" id="challenge-9-3-Pet-Sounds-1-1">Complete the Dog and Cat classes below to inherit from Pet with a constructor and a method speak() that prints out <code class="code-inline tex2jax_ignore">Woof!</code> or <code class="code-inline tex2jax_ignore">Meow!</code>.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-9-3-Pet-Sounds_editor" data-question_label="" data-codelens="true">public class Pet
{
    private String name;
    private String type;

    public Pet(String n, String t)
    {
        name = n;
        type = t;
    }

    public String getType()
    {
        return type;
    }

    public String getName()
    {
        return name;
    }

    public void speak()
    {
        System.out.println("grr!");
    }

    public static void main(String[] args)
    {
        Pet p = new Pet("Sammy", "hamster");
        System.out.println(p.getType());
        p.speak();

        /* Dog d = new Dog("Fido");
        System.out.println(d.getType());
        d.speak();
        Cat c = new Cat("Fluffy");
        System.out.println(c.getType());
        c.speak();
        */
    }
}

// Complete the Dog class
class Dog
{

}

// Add a Cat class
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Pet");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "hamster\ngrr!\ndog\nWoof!\ncat\nMeow!\n";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String code = getCode();
        String target = "extends Pet";

        int num = countOccurences(code, target);

        boolean passed = num &gt;= 2;
        getResults("2", "" + num, "Testing code for " + target, passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCode();
        String target = "public void speak()";

        int num = countOccurences(code, target);

        boolean passed = num &gt;= 2;
        getResults("2", "" + num, "Testing code for " + target, passed);
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String code = getCode();
        String target = "super(";

        int num = countOccurences(code, target);
        boolean passed = num &gt;= 2;
        getResults("2", "" + num, "Testing code for " + target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.3.5.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_GreeterEx">
                <div class="ac_question" id="csawesome2_2_GreeterEx_question">
                  <div class="para" id="GreeterEx-1-1">Add another subclass called SpanishGreeter (or another language that you know) that extends Greeter and override the greet() method to return <code class="code-inline tex2jax_ignore">Hola!</code> (or hi in another language) instead of <code class="code-inline tex2jax_ignore">Hi!</code>. Create an object to test it out.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_GreeterEx_editor" data-question_label="" data-codelens="true">public class Greeter
{
    public String greet()
    {
        return "Hi";
    }

    public static void main(String[] args)
    {
        Greeter g1 = new Greeter();
        System.out.println(g1.greet());
        Greeter g2 = new MeanGreeter();
        System.out.println(g2.greet());
    }
}

class MeanGreeter extends Greeter
{
    public String greet()
    {
        return "Go Away";
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Greeter");
    }

    @Test
    public void testChangedCode()
    {
        String origCode =
                "public static void main(String[] args) { Greeter g1 = new Greeter();"
                    + " System.out.println(g1.greet()); Greeter g2 = new MeanGreeter()"
                    + " System.out.println(g2.greet()); }";

        boolean changed = codeChanged(origCode);

        assertTrue(changed);
    }

    @Test
    public void test2()
    {
        String code = getCode();
        String target = "extends Greeter";

        int num = countOccurences(code, target);

        boolean passed = num &gt;= 2;
        getResults("2", "" + num, "Testing code for " + target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCode();
        String target = "public String greet()";

        int num = countOccurences(code, target);

        boolean passed = num &gt;= 3;
        getResults("3", "" + num, "Testing code for " + target);
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String code = getCode();
        String target = ".greet()";

        int num = countOccurences(code, target);

        boolean passed = num &gt;= 3;
        getResults("3", "" + num, "Testing code for " + target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-9-5</id>
      <title>super Keyword</title>
      <question>
        <label>Exercise 5.4.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-9-4-Customer-super">
                <div class="ac_question" id="csawesome2_2_challenge-9-4-Customer-super_question">
                  <div class="para" id="challenge-9-4-Customer-super-1-1">Complete the OnlineCustomer class below to inherit from Customer and add an email address, a constructor, and override the toString() method.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-9-4-Customer-super_editor" data-question_label="" data-codelens="true">public class Customer
{
    private String name;
    private String address;

    public Customer(String n, String a)
    {
        name = n;
        address = a;
    }

    public String toString()
    {
        return "Name: " + name + "\nAddress: " + address;
    }

    public static void main(String[] args)
    {
        Customer c = new Customer("Fran Santiago", "123 Main St., Anytown, USA");
        System.out.println(c);

        // Uncomment these to test OnlineCustomer
        // OnlineCustomer c2 = new OnlineCustomer("Jasper Smith",
        //       "456 High St., Anytown, USA", "jsmith456@gmail.com");
        // System.out.println(c2);
    }
}

// Complete the OnlineCustomer class to inherit from Customer
// It should have an email attribute,
// a constructor with 3 arguments (name, address, email) that uses the super
// constructor,
// and an overridden toString() method that calls the super toString() method
//  and then prints "\nEmail:" and the email variable.

class OnlineCustomer
{

}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "Name: Fran Santiago\n"
                        + "Address: 123 Main St., Anytown, USA\n"
                        + "Name: Jasper Smith\n"
                        + "Address: 456 High St., Anytown, USA\n"
                        + "Email: jsmith456@gmail.com";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void containsExtends()
    {
        String target = "OnlineCustomer extends Customer";
        boolean passed = checkCodeContains(target);
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        String code = getCode();
        String target = "public String toString()";

        int num = countOccurencesRegex(code, target);
        boolean passed = (num == 2);

        getResults("2", "" + num, "2 toString methods", passed);
        assertTrue(passed);
    }

    @Test
    public void containsSuper()
    {
        String target = "super(";
        boolean passed = checkCodeContains(target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.4.3.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_SuperEx">
                <div class="ac_question" id="csawesome2_2_SuperEx_question">
                  <div class="para" id="SuperEx-1-1">Add another subclass called Vegan that inherits from the Student class. Add a Vegan contructor that takes a name as an argument and passes it to the super constructor. Override the getFood() method in Vegan to call the superclass getFood() but add a “No ” in front of it and then say “but ” and add a vegan food. Change Javier to a Vegan object in main() and try it out!</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_SuperEx_editor" data-question_label="" data-codelens="true">public class Person
{
    private String name = null;

    public Person(String theName)
    {
        name = theName;
    }

    public String getFood()
    {
        return "Hamburger";
    }

    public static void main(String[] args)
    {
        Person p = new Student("Javier");
        System.out.println(p.getFood());
    }
}

class Student extends Person
{
    private int id;
    private static int nextId = 0;

    public Student(String theName)
    {
        super(theName);
        id = nextId;
        nextId++;
    }

    public String getFood()
    {
        String output = super.getFood();
        return output + " and Pizza";
    }

    public int getId()
    {
        return this.id;
    }

    public void setId(int theId)
    {
        this.id = theId;
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Person");
    }

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");

        String expect = "No Hamburger and Pizza but * \n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        String target = "No \" + super.getFood()";
        boolean passed =
                checkCodeContains("\"No \" + super.getFood() called in Vegan class", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.4.3.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qoo_6s" data-multipleanswers="false"><div class="para" id="qoo_6s-1-1">9-4-2: Given the following class declarations, and assuming that the following declaration appears in a client program: <code class="code-inline tex2jax_ignore">Base b = new Derived();</code>, what is the result of the call <code class="code-inline tex2jax_ignore">b.methodOne();</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Base
{
    public void methodOne()
    {
        System.out.print("A");
        methodTwo();
    }

    public void methodTwo()
    {
        System.out.print("B");
    }
}

public class Derived extends Base
{
    public void methodOne()
    {
        super.methodOne();
        System.out.print("C");
    }

    public void methodTwo()
    {
        super.methodTwo();
        System.out.print("D");
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qoo_6s_opt_a"><div class="para" id="qoo_6s-2-1-1-1">AB</div></li><li data-component="feedback" id="csawesome2_2_qoo_6s_opt_a"><div class="para" id="qoo_6s-2-1-2-1">This would be true if the object was created of type Base using new Base. But the object is really a Derived object. So all methods are looked for starting with the Derived class.</div></li><li data-component="answer" id="csawesome2_2_qoo_6s_opt_b" data-correct=""><div class="para" id="qoo_6s-2-2-1-1">ABDC</div></li><li data-component="feedback" id="csawesome2_2_qoo_6s_opt_b"><div class="para" id="qoo_6s-2-2-2-1">Even though b is declared as type Base it is created as an object of the Derived class, so all methods to it will be resolved starting with the Derived class. So the methodOne() in Derived will be called. This method first calls super.methodOne so this will invoke the method in the superclass (which is Base). So next the methodOne in Base will execute. This prints the letter "A" and invokes this.methodTwo(). Since b is really a Derived object, we check there first to see if it has a methodTwo. It does, so execution continues in Derived’s methodTwo. This method invokes super.methodTwo. So this will invoke the method in the super class (Base) named methodTwo. This method prints the letter "B" and then returns. Next the execution returns from the call to the super.methodTwo and prints the letter "D". We return to the Base class methodOne and return from that to the Derived class methodOne and print the letter "C".</div></li><li data-component="answer" id="csawesome2_2_qoo_6s_opt_c"><div class="para" id="qoo_6s-2-3-1-1">ABCD</div></li><li data-component="feedback" id="csawesome2_2_qoo_6s_opt_c"><div class="para" id="qoo_6s-2-3-2-1">After the call to methodOne in the super class printing "A", the code continues with the implicit this.methodTwo which resolves from the current object’s class which is Derived. methodTwo in the Derived class is executed which then calls super.methodTwo which invokes printin "B" from methodTwo in the Base class. Then the "D" in the Derive methodTwo is printed. Finally the program returns to methodOne in the Derived class are prints "C".</div></li><li data-component="answer" id="csawesome2_2_qoo_6s_opt_d"><div class="para" id="qoo_6s-2-4-1-1">ABC</div></li><li data-component="feedback" id="csawesome2_2_qoo_6s_opt_d"><div class="para" id="qoo_6s-2-4-2-1">The call to methodTwo in super.methodOne is to this.methodTwo which is the method from the Derived class. Consequently the "D" is also printed.</div></li><li data-component="answer" id="csawesome2_2_qoo_6s_opt_e"><div class="para" id="qoo_6s-2-5-1-1">Nothing is printed.</div></li><li data-component="feedback" id="csawesome2_2_qoo_6s_opt_e"><div class="para" id="qoo_6s-2-5-2-1">Remember that it will first look for a method in its own class.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-9-6</id>
      <title>Inheritance Hierarchies</title>
      <question>
        <label>Exercise 5.5.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qinherRef" data-multipleanswers="false">
                <div class="para" id="qinherRef-1-1">9-5-3: A class Student inherits from the superclass Person. Which of the following assignment statements will give a compiler error?</div>
                <li data-component="answer" id="csawesome2_2_qinherRef_opt_a">
                  <div class="para" id="qinherRef-2-1-1-1">Person p = new Person();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qinherRef_opt_a">
                  <div class="para" id="qinherRef-2-1-2-1">This declares and creates an object of the same class Person.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qinherRef_opt_b">
                  <div class="para" id="qinherRef-2-2-1-1">Person p = new Student();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qinherRef_opt_b">
                  <div class="para" id="qinherRef-2-2-2-1">This is allowed because a Student is-a Person.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qinherRef_opt_c">
                  <div class="para" id="qinherRef-2-3-1-1">Student s = new Student();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qinherRef_opt_c">
                  <div class="para" id="qinherRef-2-3-2-1">This declares and creates an object of the same class Student.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qinherRef_opt_d" data-correct="">
                  <div class="para" id="qinherRef-2-4-1-1">Student s = new Person();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qinherRef_opt_d">
                  <div class="para" id="qinherRef-2-4-2-1">This is not allowed because a Person is not always a Student.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.5.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_superclassMethod">
                <div class="ac_question" id="csawesome2_2_superclassMethod_question">
                  <div class="para" id="superclassMethod-1-1">Which toString() method is called below? What would happen if you commented out the Student toString() method? Which one would be called now?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_superclassMethod_editor" data-question_label="" data-codelens="true">public class Tester
{
    // This will implicitly call the toString() method of object p
    public void print(Person p)
    {
        System.out.println(p);
    }

    public static void main(String[] args)
    {
        Person p = new Person("Sila");
        Student s = new Student("Tully", 1001);
        Tester t = new Tester();
        t.print(p); // call print with a Person
        t.print(s); // call print with a Student
    }
}

class Person
{
    private String name;

    public Person(String name)
    {
        this.name = name;
    }

    public String toString()
    {
        return name;
    }
}

class Student extends Person
{
    private int id;

    public Student(String name, int id)
    {
        super(name);
        this.id = id;
    }

    public String toString()
    {
        return super.toString() + " " + id;
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Tester");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "Sila\nTully 1001";

        boolean passed = getResults(expect, output, "Running main", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.5.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_superclassArray">
                <div class="ac_question" id="csawesome2_2_superclassArray_question">
                  <div class="para" id="superclassArray-1-1">Scroll down to look at the <code class="code-inline tex2jax_ignore">Dog</code> class and add a similar <code class="code-inline tex2jax_ignore">Cat</code> class that extends <code class="code-inline tex2jax_ignore">Pet</code>. Don’t make the <code class="code-inline tex2jax_ignore">Cat</code> class public because there can only be 1 public class in a file. Scroll back to the main method and add some <code class="code-inline tex2jax_ignore">Cat</code> objects to the <code class="code-inline tex2jax_ignore">ArrayList</code> too. Does the <code class="code-inline tex2jax_ignore">petList</code> work with <code class="code-inline tex2jax_ignore">Cats</code> too?</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_superclassArray_editor" data-question_label="" data-codelens="true">import java.util.*; // for ArrayList

public class Pet
{
    private String name;
    private String type;

    public Pet(String n, String t)
    {
        name = n;
        type = t;
    }

    public String toString()
    {
        return name + " is a " + type;
    }

    public static void main(String[] args)
    {
        ArrayList&lt;Pet&gt; petList = new ArrayList&lt;Pet&gt;();
        petList.add(new Pet("Sammy", "hamster"));
        petList.add(new Dog("Fido"));
        // This loop will work for all subclasses of Pet
        for (Pet p : petList)
        {
            System.out.println(p);
        }
    }
}

class Dog extends Pet
{
    public Dog(String n)
    {
        super(n, "dog");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Pet");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "Sammy is a hamster\nFido is a dog";

        boolean passed = getResults(expect, output, "Running main", true);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String output = getMethodOutput("main");
        String expect = "Sammy is a hamster\nFido is a dog\n... is a cat";

        boolean passed = output.contains("is a cat");

        getResults(expect, output, "Checking that a cat was added to the output", passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "class Cat";

        boolean passed = checkCodeContains(target);
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String target = "public Cat(String *)";

        boolean passed = checkCodeContains(target);
        assertTrue(passed);
    }

    @Test
    public void test5()
    {
        String target = "petList.add(new Cat(";

        boolean passed = checkCodeContains(target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.5.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qoo_4" data-multipleanswers="false">
                <dl class="description-list">
                  <dt id="qoo_4-1-1-1">9-5-6:  Which of the following reasons for using an inheritance hierarchy are valid?</dt>
                  <dd>
                    <div class="para logical" id="qoo_4-1-1-1-2">
                      <ol class="upper-roman" id="qoo_4-1-1-1-2-1">
                        <li id="qoo_4-1-1-1-2-1-1">
                          <div class="para" id="qoo_4-1-1-1-2-1-1-1">Object methods from a superclass can be used in a subclass without rewriting or copying code.</div>
                        </li>
                        <li id="qoo_4-1-1-1-2-1-2">
                          <div class="para" id="qoo_4-1-1-1-2-1-2-1">Objects from subclasses can be passed as arguments to a method that takes an argument of the parent type.</div>
                        </li>
                        <li id="qoo_4-1-1-1-2-1-3">
                          <div class="para" id="qoo_4-1-1-1-2-1-3-1">Objects from subclasses can be stored in the same array of the parent type.</div>
                        </li>
                        <li id="qoo_4-1-1-1-2-1-4">
                          <div class="para" id="qoo_4-1-1-1-2-1-4-1">All of the above</div>
                        </li>
                        <li id="qoo_4-1-1-1-2-1-5">
                          <div class="para" id="qoo_4-1-1-1-2-1-5-1">None of the above</div>
                        </li>
                      </ol>
                    </div>
                  </dd>
                </dl>
                <li data-component="answer" id="csawesome2_2_qoo_4_opt_a">
                  <div class="para" id="qoo_4-2-1-1-1">V</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo_4_opt_a">
                  <div class="para" id="qoo_4-2-1-2-1">In fact, all of the reasons listed are valid. Subclasses can reuse object methods written for superclasses without code replication, subclasses can be stored in the same array when the array is declared to be of the parent type, and objects of subclasses can passed as arguments of the superclass type. All of which make writing code more streamlined.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qoo_4_opt_b" data-correct="">
                  <div class="para" id="qoo_4-2-2-1-1">IV</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo_4_opt_b">
                  <div class="para" id="qoo_4-2-2-2-1">All of these are valid reasons to use an inheritance hierarchy.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qoo_4_opt_c">
                  <div class="para" id="qoo_4-2-3-1-1">I and II</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo_4_opt_c">
                  <div class="para" id="qoo_4-2-3-2-1">III is also valid. In some cases you might want to store objects of subclasses together in a single array declared to be of the parent type, and inheritance allows for this.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qoo_4_opt_d">
                  <div class="para" id="qoo_4-2-4-1-1">I and III</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo_4_opt_d">
                  <div class="para" id="qoo_4-2-4-2-1">II is also valid. In some cases a single method is applicable for a number of subclasses, and inheritance allows you to pass objects of the subclasses to the same method if it takes an argument of the parent type, instead of writing individual methods for each subclass.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qoo_4_opt_e">
                  <div class="para" id="qoo_4-2-5-1-1">I only</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qoo_4_opt_e">
                  <div class="para" id="qoo_4-2-5-2-1">I and III are also valid, in some cases a single method is applicable for a number of subclasses, and inheritance allows you to pass all the subclasses to the same method instead of writing individual methods for each subclass and you might want to store subclasses together in a single array, and inheritance allows for this.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.5.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-9-5-shopping">
                <div class="ac_question" id="csawesome2_2_challenge-9-5-shopping_question">
                  <div class="para" id="challenge-9-5-shopping-1-1">Complete the class DiscountedItem below that inherits from Item and adds an discount instance variable with a constructor, get/set, and a toString method. Uncomment the testing code in main to add discounted items to the cart.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-9-5-shopping_editor" data-question_label="" data-codelens="true">import java.util.*;

/**
 * The ShoppingCart class has an ArrayList of Items. You will write a new class
 * DiscountedItem that extends Item. This code is adapted from
 * https://practiceit.cs.washington.edu/problem/view/bjp4/chapter9/e10-DiscountBill
 */
public class Tester
{
    public static void main(String[] args)
    {
        ShoppingCart cart = new ShoppingCart();
        cart.add(new Item("bread", 3.25));
        cart.add(new Item("milk", 2.50));

        // Uncomment these to test
        // cart.add(new DiscountedItem("ice cream", 4.50, 1.50));
        // cart.add(new DiscountedItem("apples", 1.35, 0.25));

        cart.printOrder();
    }
}

// DiscountedItem inherits from Item
class DiscountedItem extends Item
{
    // add an instance variable for the discount

    // Add constructors that call the super constructor

    // Add get/set methods for discount
    public double getDiscount()
    {
        return 0.0; // return discount here instead of 0
    }

    // Add a toString() method that returns a call to the super toString
    // and then the discount in parentheses using the super.valueToString() method

}

class ShoppingCart
{
    private ArrayList&lt;Item&gt; order;
    private double total;
    private double internalDiscount;

    public ShoppingCart()
    {
        order = new ArrayList&lt;Item&gt;();
        total = 0.0;
        internalDiscount = 0.0;
    }

    public void add(Item i)
    {
        order.add(i);
        total += i.getPrice();
        if (i instanceof DiscountedItem)
            internalDiscount += ((DiscountedItem) i).getDiscount();
    }

    /** printOrder() will call toString() to print */
    public void printOrder()
    {
        System.out.println(this);
    }

    public String toString()
    {
        return discountToString();
    }

    public String discountToString()
    {
        return orderToString()
                + "\nSub-total: "
                + valueToString(total)
                + "\nDiscount: "
                + valueToString(internalDiscount)
                + "\nTotal: "
                + valueToString(total - internalDiscount);
    }

    private String valueToString(double value)
    {
        value = Math.rint(value * 100) / 100.0;
        String result = "" + Math.abs(value);
        if (result.indexOf(".") == result.length() - 2)
        {
            result += "0";
        }
        result = "$" + result;
        return result;
    }

    public String orderToString()
    {
        String build = "\nOrder Items:\n";
        for (int i = 0; i &lt; order.size(); i++)
        {
            build += "   " + order.get(i);
            if (i != order.size() - 1)
            {
                build += "\n";
            }
        }
        return build;
    }
}

class Item
{
    private String name;
    private double price;

    public Item()
    {
        this.name = "";
        this.price = 0.0;
    }

    public Item(String name, double price)
    {
        this.name = name;
        this.price = price;
    }

    public double getPrice()
    {
        return price;
    }

    public String valueToString(double value)
    {
        String result = "" + Math.abs(value);
        if (result.indexOf(".") == result.length() - 2)
        {
            result += "0";
        }
        result = "$" + result;
        return result;
    }

    public String toString()
    {
        return name + " " + valueToString(price);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Tester");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect =
                "Order Items:\n"
                    + "   bread $3.25\n"
                    + "   milk $2.50\n"
                    + "   ice cream $4.50 ($1.50)\n"
                    + "   apples $1.35 ($0.25)\n"
                    + "Sub-total: $11.60\n"
                    + "Discount: $1.75\n"
                    + "Total: $9.85";

        boolean passed = getResults(expect, output, "Running main", true);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String output = getMethodOutput("main");
        String expect =
                "Order Items:\n"
                    + "   bread $3.25\n"
                    + "   milk $2.50\n"
                    + "   ice cream $4.50 ($1.50)\n"
                    + "   apples $1.35 ($0.25)\n"
                    + "Sub-total: $11.60\n"
                    + "Discount: $1.75\n"
                    + "Total: $9.85";

        boolean passed = output.contains("ice cream") &amp;&amp; output.contains("apples");

        getResults(
                expect,
                output,
                "Checking that DiscountedItem objects were added to ArrayList",
                passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "String, double, double";

        boolean passed =
                getResults(
                        "pass",
                        checkConstructor(target),
                        "Checking constructor with arguments: " + target);
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String target = "public double getDiscount()";

        boolean passed = checkCodeContains(target);
        assertTrue(passed);
    }

    @Test
    public void test5()
    {
        String target = "public String toString()";

        boolean passed = checkCodeContains(target);
        assertTrue(passed);
    }

    @Test
    public void test6()
    {
        String target = "super.toString()";

        boolean passed = checkCodeContains(target);
        assertTrue(passed);
    }

    @Test
    public void test7()
    {
        String target = "super.valueToString(*)";

        boolean passed = checkCodeContains(target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-9-7</id>
      <title>Polymorphism</title>
      <question>
        <label>Exercise 5.6.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-9-6-shopping2">
                <div class="ac_question" id="csawesome2_2_challenge-9-6-shopping2_question">
                  <div class="para" id="challenge-9-6-shopping2-1-1">Copy in your code for <code class="code-inline tex2jax_ignore">DiscountedItem</code> below and then write a method called <code class="code-inline tex2jax_ignore">countDiscountedItems</code> which traverses the polymorphic <code class="code-inline tex2jax_ignore">ArrayList&lt;Item&gt;</code>. Use <code class="code-inline tex2jax_ignore">instanceof</code> to test each item to see if it is a <code class="code-inline tex2jax_ignore">DiscountedItem</code>.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-9-6-shopping2_editor" data-question_label="" data-codelens="true">import java.util.*;

/**
 * The ShoppingCart class has an ArrayList of Items. You will write a new class
 * DiscountedItem that extends Item. This code is adapted
 * https://practiceit.cs.washington.edu/problem/view/bjp4/chapter9/e10-DiscountBill
 */
public class Tester
{
    public static void main(String[] args)
    {
        ShoppingCart cart = new ShoppingCart();
        cart.add(new Item("bread", 3.25));
        cart.add(new Item("milk", 2.50));
        // cart.add(new DiscountedItem("ice cream", 4.50, 1.50));
        // cart.add(new DiscountedItem("apples", 1.35, 0.25));

        cart.printOrder();
    }
}

class DiscountedItem extends Item
{
    // Copy your code from the last lesson's challenge here!
}

// Add a method called countDiscountedItems()
class ShoppingCart
{
    private ArrayList&lt;Item&gt; order;
    private double total;
    private double internalDiscount;

    public ShoppingCart()
    {
        order = new ArrayList&lt;Item&gt;();
        total = 0.0;
        internalDiscount = 0.0;
    }

    public void add(Item i)
    {
        order.add(i);
        total += i.getPrice();
        if (i instanceof DiscountedItem)
            internalDiscount += ((DiscountedItem) i).getDiscount();
    }

    /** printOrder() will call toString() to print */
    public void printOrder()
    {
        System.out.println(this);
    }

    public String toString()
    {
        return discountToString();
    }

    public String discountToString()
    {
        return orderToString()
                + "\nSub-total: "
                + valueToString(total)
                + "\nDiscount: "
                + valueToString(internalDiscount)
                + "\nTotal: "
                + valueToString(total - internalDiscount);
    }

    private String valueToString(double value)
    {
        value = Math.rint(value * 100) / 100.0;
        String result = "" + Math.abs(value);
        if (result.indexOf(".") == result.length() - 2)
        {
            result += "0";
        }
        result = "$" + result;
        return result;
    }

    public String orderToString()
    {
        String build = "\nOrder Items:\n";
        for (int i = 0; i &lt; order.size(); i++)
        {
            build += "   " + order.get(i);
            if (i != order.size() - 1)
            {
                build += "\n";
            }
        }
        return build;
    }
}

class Item
{
    private String name;
    private double price;

    public Item()
    {
        this.name = "";
        this.price = 0.0;
    }

    public Item(String name, double price)
    {
        this.name = name;
        this.price = price;
    }

    public double getPrice()
    {
        return price;
    }

    public String valueToString(double value)
    {
        String result = "" + Math.abs(value);
        if (result.indexOf(".") == result.length() - 2)
        {
            result += "0";
        }
        result = "$" + result;
        return result;
    }

    public String toString()
    {
        return name + " " + valueToString(price);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Tester");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect =
                "Order Items:\n"
                    + "   bread $3.25\n"
                    + "   milk $2.50\n"
                    + "   ice cream $1.50 ($1.50)\n"
                    + "   apples $0.25 ($0.25)\n"
                    + "Sub-total: $7.50\n"
                    + "Discount: $1.75\n"
                    + "Total: $5.75";

        boolean passed = output.contains("ice cream") &amp;&amp; output.contains("apples");

        getResults(
                expect,
                output,
                "Checking that DiscountedItem objects were added to ArrayList",
                passed);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String output = getMethodOutput("main");
        String expect =
                "Order Items:\n"
                    + "   bread $3.25\n"
                    + "   milk $2.50\n"
                    + "   ice cream $1.50 ($1.50)\n"
                    + "   apples $0.25 ($0.25)\n"
                    + "Sub-total: $7.50\n"
                    + "Discount: $1.75\n"
                    + "Total: $5.75";

        boolean passed = !output.equals(expect);

        getResults(
                expect, output, "Checking that countDiscountedItems() was added to output", passed);
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String target = "public int countDiscountedItems()";

        boolean passed = checkCodeContains(target);
        assertTrue(passed);
    }

    @Test
    public void test5()
    {
        String target = "if (* instanceof DiscountedItem)";

        boolean passed = checkCodeContains(target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.6.3.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qoo_10" data-multipleanswers="false"><div class="para" id="qoo_10-1-1">9-6-1: What is the output from running the main method in the Shape class?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Shape
{
    public void what()
    {
        System.out.print("Shape ");
    }

    public static void main(String[] args)
    {

        Shape[] shapes =
        {
            new Shape(), new Rectangle(), new Square(), new Circle()
        };
        for (Shape s : shapes)
        {
            s.what();
        }
    }
}

class Rectangle extends Shape
{
    public void what()
    {
        System.out.print("Rectangle ");
    }
}

class Square extends Rectangle {}

class Oval extends Shape
{
    public void what()
    {
        System.out.print("Oval ");
    }
}

class Circle extends Oval
{
    public void what()
    {
        System.out.print("Circle ");
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qoo_10_opt_a"><div class="para" id="qoo_10-2-1-1-1">Shape Shape Shape Shape</div></li><li data-component="feedback" id="csawesome2_2_qoo_10_opt_a"><div class="para" id="qoo_10-2-1-2-1">The Rectangle subclass of Shape overrides the what method so this can’t be right.</div></li><li data-component="answer" id="csawesome2_2_qoo_10_opt_b"><div class="para" id="qoo_10-2-2-1-1">Shape Rectangle Square Circle</div></li><li data-component="feedback" id="csawesome2_2_qoo_10_opt_b"><div class="para" id="qoo_10-2-2-2-1">The Square subclass doesn’t not override the what method so it will use the one in Rectangle.</div></li><li data-component="answer" id="csawesome2_2_qoo_10_opt_c"><div class="para" id="qoo_10-2-3-1-1">There will be a compile time error</div></li><li data-component="feedback" id="csawesome2_2_qoo_10_opt_c"><div class="para" id="qoo_10-2-3-2-1">This code will compile.  The declared type can hold objects of that type or any subclass of the type.</div></li><li data-component="answer" id="csawesome2_2_qoo_10_opt_d" data-correct=""><div class="para" id="qoo_10-2-4-1-1">Shape Rectangle Rectangle Circle</div></li><li data-component="feedback" id="csawesome2_2_qoo_10_opt_d"><div class="para" id="qoo_10-2-4-2-1">The Shape object will print Shape.  The Rectangle object will print Rectangle.  The Square object will also print Rectangle since it doesn’t overrride the what method.  The Circle object will print Circle.</div></li><li data-component="answer" id="csawesome2_2_qoo_10_opt_e"><div class="para" id="qoo_10-2-5-1-1">Shape Rectangle Rectangle Oval</div></li><li data-component="feedback" id="csawesome2_2_qoo_10_opt_e"><div class="para" id="qoo_10-2-5-2-1">The Circle class does override the what method so this can’t be right.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.6.3.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qoo_11" data-multipleanswers="false"><div class="para" id="qoo_11-1-1">9-6-2: What is the output from running the <code class="code-inline tex2jax_ignore">main</code> method in the <code class="code-inline tex2jax_ignore">Student</code> class?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Student
{

    public String getFood()
    {
        return "Pizza";
    }

    public String getInfo()
    {
        return this.getFood();
    }

    public static void main(String[] args)
    {
        Student s1 = new GradStudent();
        System.out.println(s1.getInfo());
    }
}

class GradStudent extends Student
{

    public String getFood()
    {
        return "Taco";
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qoo_11_opt_a"><div class="para" id="qoo_11-2-1-1-1">Pizza</div></li><li data-component="feedback" id="csawesome2_2_qoo_11_opt_a"><div class="para" id="qoo_11-2-1-2-1">This would be true if s1 was actually a Student, but it is a GradStudent.  Remember that the run-time will look for the method first in the class that created the object.</div></li><li data-component="answer" id="csawesome2_2_qoo_11_opt_b" data-correct=""><div class="para" id="qoo_11-2-2-1-1">Taco</div></li><li data-component="feedback" id="csawesome2_2_qoo_11_opt_b"><div class="para" id="qoo_11-2-2-2-1">Even though the getInfo method is in Student when getFood is called the run-time will look for that method first in the class that created this object which in this case is the GradStudent class.</div></li><li data-component="answer" id="csawesome2_2_qoo_11_opt_c"><div class="para" id="qoo_11-2-3-1-1">You will get a compile time error</div></li><li data-component="feedback" id="csawesome2_2_qoo_11_opt_c"><div class="para" id="qoo_11-2-3-2-1">This code will compile.  The student class does have a getInfo method.</div></li><li data-component="answer" id="csawesome2_2_qoo_11_opt_d"><div class="para" id="qoo_11-2-4-1-1">You will get a run-time error</div></li><li data-component="feedback" id="csawesome2_2_qoo_11_opt_d"><div class="para" id="qoo_11-2-4-2-1">There is no problem at run-time.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.6.3.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qoo_12" data-multipleanswers="false"><div class="para" id="qoo_12-1-1">9-6-3: What is the output from running the <code class="code-inline tex2jax_ignore">main</code> method in the <code class="code-inline tex2jax_ignore">Car</code> class?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Car
{
    private int fuel;

    public Car()
    {
        fuel = 0;
    }

    public Car(int g)
    {
        fuel = g;
    }

    public void addFuel()
    {
        fuel++;
    }

    public void display()
    {
        System.out.print(fuel + " ");
    }

    public static void main(String[] args)
    {
        Car car = new Car(5);
        Car fastCar = new RaceCar(5);
        car.display();
        car.addFuel();
        car.display();
        fastCar.display();
        fastCar.addFuel();
        fastCar.display();
    }
}

class RaceCar extends Car
{
    public RaceCar(int g)
    {
        super(2 * g);
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qoo_12_opt_a" data-correct=""><div class="para" id="qoo_12-2-1-1-1">5 6 10 11</div></li><li data-component="feedback" id="csawesome2_2_qoo_12_opt_a"><div class="para" id="qoo_12-2-1-2-1">The code compiles correctly, and because RaceCar extends the Car class, all the public object methods of Car can be used by RaceCar objects.</div></li><li data-component="answer" id="csawesome2_2_qoo_12_opt_b"><div class="para" id="qoo_12-2-2-1-1">5 6 5 6</div></li><li data-component="feedback" id="csawesome2_2_qoo_12_opt_b"><div class="para" id="qoo_12-2-2-2-1">RaceCar, while it inherits object methods from Car via inheritance, has a separate and different constructor that sets the initial fuel amount to 2 * g, thus in this case, fuel for fastCar is set to 10 initially.</div></li><li data-component="answer" id="csawesome2_2_qoo_12_opt_c"><div class="para" id="qoo_12-2-3-1-1">10 11 10 11</div></li><li data-component="feedback" id="csawesome2_2_qoo_12_opt_c"><div class="para" id="qoo_12-2-3-2-1">The variable car is a Car object, so the constructor used is not the same as the fastCar object which is a RaceCar. The car constructor does not change the passed in parameter, so it is set to 5 initially.</div></li><li data-component="answer" id="csawesome2_2_qoo_12_opt_d"><div class="para" id="qoo_12-2-4-1-1">The code won’t compile.</div></li><li data-component="feedback" id="csawesome2_2_qoo_12_opt_d"><div class="para" id="qoo_12-2-4-2-1">RaceCar inherits from the Car class so all the public object methods in Car can be accessed by any object of the RaceCar class.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.6.3.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qoo_13" data-multipleanswers="false"><div class="para" id="qoo_13-1-1">9-6-4: Given the following class definitions and a declaration of <code class="code-inline tex2jax_ignore">Book b = new Dictionary()</code> which of the following will cause a compile-time error?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Book
{
    public String getISBN()
    {
        // implementation not shown
    }

    // constructors, fields, and other methods not shown
}

public class Dictionary extends Book
{
    public String getDefinition()
    {
        // implementation not shown
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qoo_13_opt_a"><div class="para" id="qoo_13-2-1-1-1">b.getISBN();</div></li><li data-component="feedback" id="csawesome2_2_qoo_13_opt_a"><div class="para" id="qoo_13-2-1-2-1">The b object is actually a Dictionary object which inherits the getISBN method from Book.</div></li><li data-component="answer" id="csawesome2_2_qoo_13_opt_b" data-correct=""><div class="para" id="qoo_13-2-2-1-1">b.getDefintion();</div></li><li data-component="feedback" id="csawesome2_2_qoo_13_opt_b"><div class="para" id="qoo_13-2-2-2-1">At compile time the declared type is Book and the Book class does not have or inherit a getDefintion method.</div></li><li data-component="answer" id="csawesome2_2_qoo_13_opt_c"><div class="para" id="qoo_13-2-3-1-1">((Dictionary) b).getDefinition();</div></li><li data-component="feedback" id="csawesome2_2_qoo_13_opt_c"><div class="para" id="qoo_13-2-3-2-1">Casting to Dictionary means that the compiler will check the Dictionary class for the getDefinition method.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>object-superclass</id>
      <title>Object Superclass</title>
      <question>
        <label>Exercise 5.7.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_toStringDemo">
                <div class="ac_question" id="csawesome2_2_toStringDemo_question">
                  <div class="para" id="toStringDemo-1-1">After trying the code below, complete the subclass called <code class="code-inline tex2jax_ignore">APStudent</code> that extends <code class="code-inline tex2jax_ignore">Student</code> with a new attribute called <code class="code-inline tex2jax_ignore">APscore</code> and override the <code class="code-inline tex2jax_ignore">toString()</code> method to call the superclass method and then add on the <code class="code-inline tex2jax_ignore">APscore</code>. Uncomment the <code class="code-inline tex2jax_ignore">APStudent</code> object in the main method to test it.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_toStringDemo_editor" data-question_label="" data-codelens="true">public class Person
{
    private String name;

    public Person(String name)
    {
        this.name = name;
    }

    public String toString()
    {
        return name;
    }

    public static void main(String[] args)
    {
        Person p = new Person("Sila");
        Student s = new Student("Tully", 1001);
        System.out.println(p); // call Person toString
        System.out.println(s); // call Student toString
        // Uncomment the code below to test the APStudent class
        /*
        APStudent ap = new APStudent("Ayanna", 1002, 5);
        System.out.println(ap);
        */
    }
}

class Student extends Person
{
    private int id;

    public Student(String name, int id)
    {
        super(name);
        this.id = id;
    }

    public String toString()
    {
        return super.toString() + " " + id;
    }
}

class APStudent extends Student
{
    private int score;

    public APStudent(String name, int id, int score)
    {
        super(name, id);
        this.score = score;
    }
    // Add a toString() method here that calls the super class toString

}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Person");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "Sila\nTully 1001\nAyanna 1002 5";

        boolean passed = getResults(expect, output, "Checking output from main()");
        assertTrue(passed);
    }

    @Test
    public void containsToString()
    {
        String code = getCode();
        String target = "public String toString()";

        int num = countOccurencesRegex(code, target);
        boolean passed = (num &gt;= 3);

        getResults("3", "" + num, "3 toString methods", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.7.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_ObjEquals">
                <div class="ac_question" id="csawesome2_2_ObjEquals_question">
                  <div class="para" id="ObjEquals-1-1">Try to guess what this code will print out before running it.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_ObjEquals_editor" data-question_label="" data-codelens="true">public class Person
{
    private String name;

    public Person(String theName)
    {
        this.name = theName;
    }

    public static void main(String[] args)
    {
        Person p1 = new Person("Kairen");
        Person p2 = new Person("Jewel");
        Person p3 = new Person("Kairen");
        Person p4 = p3;
        System.out.println(p1.equals(p2));
        System.out.println(p2.equals(p3));
        System.out.println(p1.equals(p3));
        System.out.println(p3.equals(p4));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Person");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "false\nfalse\nfalse\ntrue";

        boolean passed = getResults(expect, output, "Checking output from main()", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.7.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_StringTest1">
                <div class="ac_question" id="csawesome2_2_StringTest1_question">
                  <div class="para" id="StringTest1-1-1">Try to guess what this code will print out before running it.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_StringTest1_editor" data-question_label="" data-codelens="true">public class StringTest
{
    public static void main(String[] args)
    {
        String s1 = "hi";
        String s2 = "Hi";
        String s3 = new String("hi");
        System.out.println(s1.equals(s2));
        System.out.println(s2.equals(s3));
        System.out.println(s1.equals(s3));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("StringTest");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "false\nfalse\ntrue";

        boolean passed = getResults(expect, output, "Checking output from main()", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.7.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_OverrideEquals">
                <div class="ac_question" id="csawesome2_2_OverrideEquals_question">
                  <div class="para" id="OverrideEquals-1-1">Try to guess what this code will print out before running it. Click on the CodeLens button to step forward through the code and watch the memory.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_OverrideEquals_editor" data-question_label="" data-codelens="true">public class Word
{
    private String spelling;
    private String language;

    public Word(String spell, String lang)
    {
        this.spelling = spell;
        this.language = lang;
    }

    /**
     * Compares this word to the specified object. The result is true if and only
     * if the argument is not null and is a Word object with the same spelling and
     * language as this object.
     */
    public boolean equals(Object other)
    {
        if (this == other)
        {
            // This is not strictly necessary assuming the rest
            // of the method is implemented correctly but it is
            // a commonly used optimization because the == check
            // is very fast. Thus this is a quick way to guarantee
            // that our equals method is reflexive.
            return true;
        }

        if (!(other instanceof Word))
        {
            // It can't be the same Word if it's not a Word at all.
            // This also ensures that o.equals(null) is false because
            // null is not an instanceof any class.
            return false;
        }

        // Now we now we can safely cast other to a Word and
        // check if our two attributes are the same, using
        // equals to compare them because they are Strings.
        Word otherWord = (Word) other;
        return spelling.equals(otherWord.spelling)
                &amp;&amp; language.equals(otherWord.language);
    }

    public static void main(String[] args)
    {
        Word p1 = new Word("pie", "english");
        Word p2 = new Word("pie", "spanish");
        Word p3 = new Word("pie", "english");
        Word p4 = p3;
        System.out.println(p1.equals(p2));
        System.out.println(p2.equals(p3));
        System.out.println(p1.equals(p3));
        System.out.println(p3.equals(p4));
        System.out.println(p1.equals("pie"));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Word");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "false\nfalse\ntrue\ntrue\nfalse";

        boolean passed = getResults(expect, output, "Checking output from main()", true);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.7.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_challenge-9-7-savingsaccount">
                <div class="ac_question" id="csawesome2_2_challenge-9-7-savingsaccount_question">
                  <div class="para" id="challenge-9-7-savingsaccount-1-1">Complete the subclass <code class="code-inline tex2jax_ignore">SavingsAccount</code> below which inherits from <code class="code-inline tex2jax_ignore">Account</code> and adds an interest rate variable. Write a constructor with 3 arguments, a <code class="code-inline tex2jax_ignore">toString</code>, and an <code class="code-inline tex2jax_ignore">equals</code> method for it. Uncomment the code in <code class="code-inline tex2jax_ignore">main</code> to test your new class and methods.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_challenge-9-7-savingsaccount_editor" data-question_label="" data-codelens="true">public class Account
{
    private String name;
    private double balance;

    public Account(String name, double balance)
    {
        this.name = name;
        this.balance = balance;
    }

    // Implement toString here

    public static void main(String[] args)
    {
        Account acct1 = new Account("Armani Smith", 1500);
        System.out.println(acct1);
        // Uncomment this code to test SavingsAccount
        /*
        SavingsAccount acct2 = new SavingsAccount("Dakota Jones",1500,4.5);
        System.out.println(acct2);
        */
    }
}

/*
 * Write the SavingsAccount class which inherits from Account. Add an
 * interest rate instance variable and write a constructor and a toString
 * method.
 */
class SavingsAccount
{

}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Account");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "Armani Smith, 1500.0\nDakota Jones, 1500.0, 4.5";

        boolean passed = getResults(expect, output, "Checking output from main()");
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String target = "public String toString()";

        String code = getCode();
        int index = code.indexOf("class SavingsAccount");
        code = code.substring(index);
        boolean passed = code.contains(target);

        getResults(
                "true",
                "" + passed,
                "Checking that code contains toString() in SavingsAccount",
                passed);
        assertTrue(passed);
    }

    @Test
    public void test30()
    {
        String target = "super.toString()";

        String code = getCode();
        int index = code.indexOf("class SavingsAccount");
        code = code.substring(index);

        boolean passed = code.contains(target);

        getResults(
                "true",
                "" + passed,
                "Checking that code contains call to super.toString() in SavingsAccount",
                passed);
        assertTrue(passed);
    }

    @Test
    public void containsExtends()
    {
        String target = "SavingsAccount extends Account";
        boolean passed = checkCodeContains(target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>inheritance-summary</id>
      <title>Inheritance Summary</title>
      <question>
        <label>Exercise 5.8.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_ch10oo_match_1">
                <span data-subcomponent="question">
                  <div class="para" id="ch10oo_match_1-1-1">Drag the item from the left and drop it on its corresponding answer on the right.  Click the "Check Me" button to see if you are correct.</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="ch10oo_match_1-2-1">Review the summaries above.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_ch10oo_match_1_drag1">A class that extends another class</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch10oo_match_1_drag1">child class</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch10oo_match_1_drag2">A class that is being extended</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch10oo_match_1_drag2">parent class</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch10oo_match_1_drag3">Using the run-time type of an object to determine which method to call</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch10oo_match_1_drag3">polymorphism</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch10oo_match_1_drag4">Providing a method in a child class with the same declaration as a parent method</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch10oo_match_1_drag4">override</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.8.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_ch10oo_match_2">
                <span data-subcomponent="question">
                  <div class="para" id="ch10oo_match_2-1-1">Drag the description from the left and drop it on the correct code on the right.  Click the "Check Me" button to see if you are correct.</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="ch10oo_match_2-2-1">Review the summaries above.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_ch10oo_match_2_drag1">What does the actual work in an object-oriented program</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch10oo_match_2_drag1">object</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch10oo_match_2_drag2">Defines what all objects of the class know and can do</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch10oo_match_2_drag2">class</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch10oo_match_2_drag3">Returns the value of an instance variable</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch10oo_match_2_drag3">getter</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch10oo_match_2_drag4">Sets the value of an instance variable</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch10oo_match_2_drag4">setter</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.8.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone matching_section">
              <ul data-component="dragndrop" data-question_label="" style="visibility: hidden;" id="csawesome2_2_ch10oo_match_3">
                <span data-subcomponent="question">
                  <div class="para" id="ch10oo_match_3-1-1">Drag the description from the left and drop it on the correct code on the right.  Click the "Check Me" button to see if you are correct.</div>
                </span>
                <span data-subcomponent="feedback">
                  <div class="para" id="ch10oo_match_3-2-1">Review the summaries above.</div>
                </span>
                <li data-subcomponent="draggable" id="csawesome2_2_ch10oo_match_3_drag1">A class that inherits from the specified class</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch10oo_match_3_drag1">subclass</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch10oo_match_3_drag2">Two methods with the same method name in a class, but with different parameters</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch10oo_match_3_drag2">overload</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch10oo_match_3_drag3">The type the object was declared as</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch10oo_match_3_drag3">declared type</li>
                <li data-subcomponent="draggable" id="csawesome2_2_ch10oo_match_3_drag4">The class that created the object</li>
                <li data-subcomponent="dropzone" for="csawesome2_2_ch10oo_match_3_drag4">actual type</li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-000833</id>
      <title>Free Response Questions</title>
      <question>
        <label>Exercise 5.9.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_frqTrio">
                <div class="ac_question" id="csawesome2_2_frqTrio_question">
                  <div class="para" id="frqTrio-1-1">Write the Trio class (near the end of the code below) that implements the MenuItem interface (which is like extending a class). Your implementation must include a constructor that takes three parameters representing a sandwich, salad, and drink.  The main method has code to test the result.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_frqTrio_editor" data-question_label="" data-codelens="true">import java.text.*;

interface MenuItem
{
    /**
     * @return the name of the menu item
     */
    String getName();

    /**
     * @return the price of the menu item
     */
    double getPrice();
}

class SimpleLunchItem implements MenuItem
{
    private String name;
    private double price;

    public SimpleLunchItem(String aName, double aPrice)
    {
        name = aName;
        price = aPrice;
    }

    public String getName()
    {
        return name;
    }

    public double getPrice()
    {
        return price;
    }

    public String toString()
    {
        DecimalFormat money = new DecimalFormat("0.00");
        return getName() + " " + money.format(getPrice());
    }
}

class Drink extends SimpleLunchItem
{
    public Drink(String name, double price)
    {
        super(name, price);
    }
}

class Salad extends SimpleLunchItem
{
    public Salad(String name, double price)
    {
        super(name, price);
    }
}

class Sandwich extends SimpleLunchItem
{
    public Sandwich(String name, double price)
    {
        super(name, price);
    }
}

// Declare the Trio class.  It must implement the MenuItem interface.
public class Trio implements MenuItem
{
    // declare the instance variables that you need for a trio object

    // write a constructor that takes a Sandwich, Salad, and a Drink, in that order

    // write the getName method it should return
    // sandwich name/salad name/drink name Trio

    // write the getPrice method
    // it should return the price of the two highest price items in the trio.

    public static void main(String[] args)
    {
        Sandwich burger = new Sandwich("Cheeseburger", 2.75);
        Sandwich club = new Sandwich("Club Sandwich", 2.75);
        Salad spinachSalad = new Salad("Spinach Salad", 1.25);
        Salad coleslaw = new Salad("Coleslaw", 1.25);
        Drink orange = new Drink("Orange Soda", 1.25);
        Drink cap = new Drink("Cappuccino", 3.50);
        Trio trio1 = new Trio(burger, spinachSalad, orange);
        System.out.println(
                "It should print Cheeseburger/Spinach Salad/Orange Soda Trio and"
                    + " it prints: "
                        + trio1.getName());
        System.out.println(
                "It should print 4.0 and it prints: " + trio1.getPrice());
        Trio trio2 = new Trio(club, coleslaw, cap);
        System.out.println(
                "It should print Club Sandwich/Coleslaw/Capuccino Trio and it"
                    + " prints: "
                        + trio2.getName());
        System.out.println(
                "It should print 6.25 and it prints: " + trio2.getPrice());
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Trio");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect =
                "It should print Cheeseburger/Spinach Salad/Orange Soda Trio and it prints:"
                    + " Cheeseburger/Spinach Salad/Orange Soda Trio\n"
                    + "It should print 4.0 and it prints: 4.0\n"
                    + "It should print Club Sandwich/Coleslaw/Capuccino Trio and it prints: Club"
                    + " Sandwi\n"
                    + "ch/Coleslaw/Cappuccino Trio\n"
                    + "It should print 6.25 and it prints: 6.25";

        boolean passed = removeSpaces(expect).equals(removeSpaces(output));

        getResults(expect, output, "Running main", passed);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = "implements MenuItem";

        boolean passed = checkCodeContains(target);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String output = checkConstructor("Sandwich, Salad, Drink");
        String expect = "pass";

        boolean passed =
                getResults(
                        expect,
                        output,
                        "Checking Trio constructor with 3 arguments: Sandwich, Salad, Drink");
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String target = "public String getName()";

        boolean passed = checkCodeContains("getName()", target);
        assertTrue(passed);
    }

    @Test
    public void test5()
    {
        String target = "public double getPrice()";

        boolean passed = checkCodeContains("getPrice()", target);
        assertTrue(passed);
    }

    @Test
    public void test6()
    {
        Sandwich burger = new Sandwich("Hamburger", 7.50);
        Salad coleslaw = new Salad("Coleslaw", 2);
        Drink orange = new Drink("Orange Soda", 1.25);
        Trio trio1 = new Trio(burger, coleslaw, orange);

        String name = trio1.getName();
        String expect = "Hamburger/Coleslaw/Orange Soda Trio";

        boolean passed = getResults(expect, name, "Checking getName()");
        assertTrue(passed);
    }

    @Test
    public void test7()
    {
        Sandwich burger = new Sandwich("Hamburger", 7.50);
        Salad coleslaw = new Salad("Coleslaw", 2);
        Drink orange = new Drink("Orange Soda", 1.25);
        Trio trio1 = new Trio(burger, coleslaw, orange);

        String name = "" + trio1.getPrice();
        String expect = "9.5";

        boolean passed = getResults(expect, name, "Checking getPrice()");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtrio1_1" data-multipleanswers="false">
                <div class="para" id="qtrio1_1-1-1">9-9-1-1: Should the student earn 1 point for the correct declaration of the <code class="code-inline tex2jax_ignore">Trio</code> class?</div>
                <li data-component="answer" id="csawesome2_2_qtrio1_1_opt_a" data-correct="">
                  <div class="para" id="qtrio1_1-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio1_1_opt_a">
                  <div class="para" id="qtrio1_1-2-1-2-1">This declares the class correctly as public class Trio implements MenuItem</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtrio1_1_opt_b">
                  <div class="para" id="qtrio1_1-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio1_1_opt_b">
                  <div class="para" id="qtrio1_1-2-2-2-1">What do you think is wrong with the class declaration?</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtrio1_2" data-multipleanswers="false">
                <div class="para" id="qtrio1_2-1-1">9-9-1-2: Should the student earn 1 point for declaring the private instance variables (sandwich, salad, and drink or name and price)?</div>
                <li data-component="answer" id="csawesome2_2_qtrio1_2_opt_a" data-correct="">
                  <div class="para" id="qtrio1_2-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio1_2_opt_a">
                  <div class="para" id="qtrio1_2-2-1-2-1">All instance variables are declared private (sand, sal, and dri) and are of the appropriate type (Sandwich, Salad, and Drink)</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtrio1_2_opt_b">
                  <div class="para" id="qtrio1_2-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio1_2_opt_b">
                  <div class="para" id="qtrio1_2-2-2-2-1">What do you think is wrong with the instance variables declaration?</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtrio1_3" data-multipleanswers="false">
                <div class="para" id="qtrio1_3-1-1">9-9-1-3: Should the student earn 1 point for declaring the the constructor correctly?</div>
                <li data-component="answer" id="csawesome2_2_qtrio1_3_opt_a" data-correct="">
                  <div class="para" id="qtrio1_3-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio1_3_opt_a">
                  <div class="para" id="qtrio1_3-2-1-2-1">This solution declares the constructor as public Trio(Sandwich a, Salad b, Drink c)</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtrio1_3_opt_b">
                  <div class="para" id="qtrio1_3-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio1_3_opt_b">
                  <div class="para" id="qtrio1_3-2-2-2-1">What do you think is wrong with the constructor declaration?</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtrio1_4" data-multipleanswers="false">
                <div class="para" id="qtrio1_4-1-1">9-9-1-4: Should the student earn 1 point for correctly initializing the appropriate instance variables in the constructor?</div>
                <li data-component="answer" id="csawesome2_2_qtrio1_4_opt_a" data-correct="">
                  <div class="para" id="qtrio1_4-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio1_4_opt_a">
                  <div class="para" id="qtrio1_4-2-1-2-1">This solution initializes the private instance variables (sand, sal, and dri) correctly with the values from the parameters (a,b, and c).</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtrio1_4_opt_b">
                  <div class="para" id="qtrio1_4-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio1_4_opt_b">
                  <div class="para" id="qtrio1_4-2-2-2-1">What do you think is wrong with the initialization of the instance variables in the constructor?</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtrio1_5" data-multipleanswers="false">
                <div class="para" id="qtrio1_5-1-1">9-9-1-5: Should the student earn 1 point for correctly declaring the methods in the <code class="code-inline tex2jax_ignore">MenuItem</code> interface (<code class="code-inline tex2jax_ignore">getName</code> and <code class="code-inline tex2jax_ignore">getPrice</code>)?</div>
                <li data-component="answer" id="csawesome2_2_qtrio1_5_opt_a" data-correct="">
                  <div class="para" id="qtrio1_5-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio1_5_opt_a">
                  <div class="para" id="qtrio1_5-2-1-2-1">This solution contains correct declarations for public String getName() and public double getPrice().</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtrio1_5_opt_b">
                  <div class="para" id="qtrio1_5-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio1_5_opt_b">
                  <div class="para" id="qtrio1_5-2-2-2-1">To implement an interface the class must have a getName and getPrice method as defined by the MenuItem interface.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtrio1_6" data-multipleanswers="false">
                <div class="para" id="qtrio1_6-1-1">9-9-1-6: Should the student earn 1 point for correctly constructing the string to return from <code class="code-inline tex2jax_ignore">getName</code> and making it available to be returned?</div>
                <li data-component="answer" id="csawesome2_2_qtrio1_6_opt_a">
                  <div class="para" id="qtrio1_6-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio1_6_opt_a">
                  <div class="para" id="qtrio1_6-2-1-2-1">This solution doesn’t include the "Trio" at the end of the name so it loses this point.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtrio1_6_opt_b" data-correct="">
                  <div class="para" id="qtrio1_6-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio1_6_opt_b">
                  <div class="para" id="qtrio1_6-2-2-2-1">While the name is mostly correct, it is missing the word "Trio" at the end which means it loses this point.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtrio1_7" data-multipleanswers="false">
                <div class="para" id="qtrio1_7-1-1">9-9-1-7: Should the student earn 1 point for returning a constructed string from <code class="code-inline tex2jax_ignore">getName</code>?</div>
                <li data-component="answer" id="csawesome2_2_qtrio1_7_opt_a" data-correct="">
                  <div class="para" id="qtrio1_7-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio1_7_opt_a">
                  <div class="para" id="qtrio1_7-2-1-2-1">This solution does return the constructed string.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtrio1_7_opt_b">
                  <div class="para" id="qtrio1_7-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio1_7_opt_b">
                  <div class="para" id="qtrio1_7-2-2-2-1">Even though the string is not correct it was constructed and returned.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtrio1_8" data-multipleanswers="false">
                <div class="para" id="qtrio1_8-1-1">9-9-1-8: Should the student earn 1 point for correctly calculating the price and making it available to be returned from <code class="code-inline tex2jax_ignore">getPrice</code>?</div>
                <li data-component="answer" id="csawesome2_2_qtrio1_8_opt_a" data-correct="">
                  <div class="para" id="qtrio1_8-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio1_8_opt_a">
                  <div class="para" id="qtrio1_8-2-1-2-1">This solution does compute the price correctly.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtrio1_8_opt_b">
                  <div class="para" id="qtrio1_8-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio1_8_opt_b">
                  <div class="para" id="qtrio1_8-2-2-2-1">There are only 3 possibilities for which is the cheapest item and this correctly deals with the 3 cases.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtrio1_9" data-multipleanswers="false">
                <div class="para" id="qtrio1_9-1-1">9-9-1-9: Should the student earn 1 point for returning the calculated price in <code class="code-inline tex2jax_ignore">getPrice</code>?</div>
                <li data-component="answer" id="csawesome2_2_qtrio1_9_opt_a" data-correct="">
                  <div class="para" id="qtrio1_9-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio1_9_opt_a">
                  <div class="para" id="qtrio1_9-2-1-2-1">This solution does return the calculated price.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtrio1_9_opt_b">
                  <div class="para" id="qtrio1_9-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio1_9_opt_b">
                  <div class="para" id="qtrio1_9-2-2-2-1">What do you think is wrong with the return statement?</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_qtrio1_total">
                <div class="para" id="qtrio1_total-1-1">9-9-1-10: What should the total score be for this student response (out of 9 points)?  Enter it as a number (like 3). <input type="text" placeholder="Text"/></div>
                <script type="application/json">[[{"regex": "^\\s*^\\s*^8$\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"qtrio1_total-2-1-1-1-1\"&gt;Correct.  This solution lost one point&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"qtrio1_total-2-1-2-1-1\"&gt;Subtract 1 point for each no response from the 9 possible points&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtrio2_1" data-multipleanswers="false">
                <div class="para" id="qtrio2_1-1-1">9-9-2-1: Should the student earn 1 point for the correct declaration of the <code class="code-inline tex2jax_ignore">Trio</code> class?</div>
                <li data-component="answer" id="csawesome2_2_qtrio2_1_opt_a" data-correct="">
                  <div class="para" id="qtrio2_1-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio2_1_opt_a">
                  <div class="para" id="qtrio2_1-2-1-2-1">This declares the class correctly as public class Trio implements MenuItem</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtrio2_1_opt_b">
                  <div class="para" id="qtrio2_1-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio2_1_opt_b">
                  <div class="para" id="qtrio2_1-2-2-2-1">What do you think is wrong with the class declaration?</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtrio2_2" data-multipleanswers="false">
                <div class="para" id="qtrio2_2-1-1">9-9-2-2: Should the student earn 1 point for declaring the private instance variables (sandwich, salad, and drink or name and price)?</div>
                <li data-component="answer" id="csawesome2_2_qtrio2_2_opt_a">
                  <div class="para" id="qtrio2_2-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio2_2_opt_a">
                  <div class="para" id="qtrio2_2-2-1-2-1">Remember that all instance variables should be declared private so that the class controls access to the variables.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtrio2_2_opt_b" data-correct="">
                  <div class="para" id="qtrio2_2-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio2_2_opt_b">
                  <div class="para" id="qtrio2_2-2-2-2-1">The student did not make the instance variables private, so the student does not get this point.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtrio2_3" data-multipleanswers="false">
                <div class="para" id="qtrio2_3-1-1">9-9-2-3: Should the student earn 1 point for declaring the the constructor correctly?</div>
                <li data-component="answer" id="csawesome2_2_qtrio2_3_opt_a" data-correct="">
                  <div class="para" id="qtrio2_3-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio2_3_opt_a">
                  <div class="para" id="qtrio2_3-2-1-2-1">This solution declares the constructor as public Trio(Sandwich s, Salad sa, Drink d)</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtrio2_3_opt_b">
                  <div class="para" id="qtrio2_3-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio2_3_opt_b">
                  <div class="para" id="qtrio2_3-2-2-2-1">What do you think is wrong with the constructor declaration?</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtrio2_4" data-multipleanswers="false">
                <div class="para" id="qtrio2_4-1-1">9-9-2-4: Should the student earn 1 point for correctly initializing the appropriate instance variables in the constructor?</div>
                <li data-component="answer" id="csawesome2_2_qtrio2_4_opt_a" data-correct="">
                  <div class="para" id="qtrio2_4-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio2_4_opt_a">
                  <div class="para" id="qtrio2_4-2-1-2-1">This solution initializes the instance variables (sandwich, salad, and drink) correctly with the values from the parameters (s, sa, and d).</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtrio2_4_opt_b">
                  <div class="para" id="qtrio2_4-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio2_4_opt_b">
                  <div class="para" id="qtrio2_4-2-2-2-1">What do you think is wrong with the initialization of the instance variables in the constructor?</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtrio2_5" data-multipleanswers="false">
                <div class="para" id="qtrio2_5-1-1">9-9-2-5: Should the student earn 1 point for correctly declaring the methods in the <code class="code-inline tex2jax_ignore">MenuItem</code> interface (getName and getPrice)?</div>
                <li data-component="answer" id="csawesome2_2_qtrio2_5_opt_a" data-correct="">
                  <div class="para" id="qtrio2_5-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio2_5_opt_a">
                  <div class="para" id="qtrio2_5-2-1-2-1">This solution contains correct declarations for public String getName() and public double getPrice().</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtrio2_5_opt_b">
                  <div class="para" id="qtrio2_5-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio2_5_opt_b">
                  <div class="para" id="qtrio2_5-2-2-2-1">To implement an interface the class must have a getName and getPrice method as defined by the MenuItem interface.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtrio2_6" data-multipleanswers="false">
                <div class="para" id="qtrio2_6-1-1">9-9-2-6: Should the student earn 1 point for correctly constructing the string to return from <code class="code-inline tex2jax_ignore">getName</code> and making it available to be returned?</div>
                <li data-component="answer" id="csawesome2_2_qtrio2_6_opt_a">
                  <div class="para" id="qtrio2_6-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio2_6_opt_a">
                  <div class="para" id="qtrio2_6-2-1-2-1">Look at what getName is supposed to return.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtrio2_6_opt_b" data-correct="">
                  <div class="para" id="qtrio2_6-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio2_6_opt_b">
                  <div class="para" id="qtrio2_6-2-2-2-1">This solution doesn’t include the "/" between the sandwich and salad and between the salad and the drink and is also missing the "Trio" at the end of the name, so it loses this point.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtrio2_7" data-multipleanswers="false">
                <div class="para" id="qtrio2_7-1-1">9-9-2-7: Should the student earn 1 point for returning a constructed string from <code class="code-inline tex2jax_ignore">getName</code>?</div>
                <li data-component="answer" id="csawesome2_2_qtrio2_7_opt_a" data-correct="">
                  <div class="para" id="qtrio2_7-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio2_7_opt_a">
                  <div class="para" id="qtrio2_7-2-1-2-1">This solution does return the constructed string, even if the string is not completely correct.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtrio2_7_opt_b">
                  <div class="para" id="qtrio2_7-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio2_7_opt_b">
                  <div class="para" id="qtrio2_7-2-2-2-1">Even though the string is not correct it was constructed and returned.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtrio2_8" data-multipleanswers="false">
                <div class="para" id="qtrio2_8-1-1">9-9-2-8: Should the student earn 1 point for correctly calculating the price and making it available to be returned from <code class="code-inline tex2jax_ignore">getPrice</code>?</div>
                <li data-component="answer" id="csawesome2_2_qtrio2_8_opt_a">
                  <div class="para" id="qtrio2_8-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio2_8_opt_a">
                  <div class="para" id="qtrio2_8-2-1-2-1">What if b is equal to c but both are greater than a?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtrio2_8_opt_b" data-correct="">
                  <div class="para" id="qtrio2_8-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio2_8_opt_b">
                  <div class="para" id="qtrio2_8-2-2-2-1">This does not always compute the price correctly (when b is equal to c and they are both greater than a, it should return b+c, not a+b).</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtrio2_9" data-multipleanswers="false">
                <div class="para" id="qtrio2_9-1-1">9-9-2-9: Should the student earn 1 point for returning the calculated price in <code class="code-inline tex2jax_ignore">getPrice</code>?</div>
                <li data-component="answer" id="csawesome2_2_qtrio2_9_opt_a" data-correct="">
                  <div class="para" id="qtrio2_9-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio2_9_opt_a">
                  <div class="para" id="qtrio2_9-2-1-2-1">This solution does return the calculated price, even if that price is not always correct.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtrio2_9_opt_b">
                  <div class="para" id="qtrio2_9-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio2_9_opt_b">
                  <div class="para" id="qtrio2_9-2-2-2-1">This point is earned if the student attempted to calculate the price and returned what was calculated.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_qtrio2_total">
                <div class="para" id="qtrio2_total-1-1">9-9-2-10: What should the total score be for this student response (out of 9 points)?  Enter it as a number (like 3). <input type="text" placeholder="Text"/></div>
                <script type="application/json">[[{"regex": "^\\s*^\\s*^6$\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"qtrio2_total-2-1-1-1-1\"&gt;Correct.  The answer lost a total of 3 points.&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"qtrio2_total-2-1-2-1-1\"&gt;Subtract 1 point for each no response from the 9 possible points&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtrio3_1" data-multipleanswers="false">
                <div class="para" id="qtrio3_1-1-1">9-9-3-1: Should the student earn 1 point for the correct declaration of the <code class="code-inline tex2jax_ignore">Trio</code> class?</div>
                <li data-component="answer" id="csawesome2_2_qtrio3_1_opt_a" data-correct="">
                  <div class="para" id="qtrio3_1-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio3_1_opt_a">
                  <div class="para" id="qtrio3_1-2-1-2-1">This declares the class correctly as public class Trio implements MenuItem</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtrio3_1_opt_b">
                  <div class="para" id="qtrio3_1-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio3_1_opt_b">
                  <div class="para" id="qtrio3_1-2-2-2-1">What do you think is wrong with the class declaration?</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtrio3_2" data-multipleanswers="false">
                <div class="para" id="qtrio3_2-1-1">9-9-3-2: Should the student earn 1 point for declaring the private instance variables (sandwich, salad, and drink or name and price)?</div>
                <li data-component="answer" id="csawesome2_2_qtrio3_2_opt_a">
                  <div class="para" id="qtrio3_2-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio3_2_opt_a">
                  <div class="para" id="qtrio3_2-2-1-2-1">Do you see any instance variables declared here?</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtrio3_2_opt_b" data-correct="">
                  <div class="para" id="qtrio3_2-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio3_2_opt_b">
                  <div class="para" id="qtrio3_2-2-2-2-1">The student did not declare any instance variables.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtrio3_3" data-multipleanswers="false">
                <div class="para" id="qtrio3_3-1-1">9-9-3-3: Should the student earn 1 point for declaring the the constructor correctly?</div>
                <li data-component="answer" id="csawesome2_2_qtrio3_3_opt_a" data-correct="">
                  <div class="para" id="qtrio3_3-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio3_3_opt_a">
                  <div class="para" id="qtrio3_3-2-1-2-1">This solution declares the constructor as public Trio(Sandwich sandwich, Salad salad, Drink drink)</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtrio3_3_opt_b">
                  <div class="para" id="qtrio3_3-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio3_3_opt_b">
                  <div class="para" id="qtrio3_3-2-2-2-1">What do you think is wrong with the constructor declaration?</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtrio3_4" data-multipleanswers="false">
                <div class="para" id="qtrio3_4-1-1">9-9-3-4: Should the student earn 1 point for correctly initializing the appropriate instance variables in the constructor?</div>
                <li data-component="answer" id="csawesome2_2_qtrio3_4_opt_a">
                  <div class="para" id="qtrio3_4-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio3_4_opt_a">
                  <div class="para" id="qtrio3_4-2-1-2-1">This solution doesn’t have any instance variables declared and doesn’t try to use the parameter values.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtrio3_4_opt_b" data-correct="">
                  <div class="para" id="qtrio3_4-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio3_4_opt_b">
                  <div class="para" id="qtrio3_4-2-2-2-1">There is no attempt to set the instance variables (which haven’t been declared) to the parameter values.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtrio3_5" data-multipleanswers="false">
                <div class="para" id="qtrio3_5-1-1">9-9-3-5: Should the student earn 1 point for correctly declaring the methods in the <code class="code-inline tex2jax_ignore">MenuItem</code> interface (getName and getPrice)?</div>
                <li data-component="answer" id="csawesome2_2_qtrio3_5_opt_a">
                  <div class="para" id="qtrio3_5-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio3_5_opt_a">
                  <div class="para" id="qtrio3_5-2-1-2-1">To implement an interface the class must have both a getName and getPrice method.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtrio3_5_opt_b" data-correct="">
                  <div class="para" id="qtrio3_5-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio3_5_opt_b">
                  <div class="para" id="qtrio3_5-2-2-2-1">This class is missing both the interface methods.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtrio3_6" data-multipleanswers="false">
                <div class="para" id="qtrio3_6-1-1">9-9-3-6: Should the student earn 1 point for correctly constructing the string to return from <code class="code-inline tex2jax_ignore">getName</code> and making it available to be returned?</div>
                <li data-component="answer" id="csawesome2_2_qtrio3_6_opt_a">
                  <div class="para" id="qtrio3_6-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio3_6_opt_a">
                  <div class="para" id="qtrio3_6-2-1-2-1">While the toString method exists and correctly creates the name string, it is not called by a getName method.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtrio3_6_opt_b" data-correct="">
                  <div class="para" id="qtrio3_6-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio3_6_opt_b">
                  <div class="para" id="qtrio3_6-2-2-2-1">Since there is no getName method this point can not be awarded.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtrio3_7" data-multipleanswers="false">
                <div class="para" id="qtrio3_7-1-1">9-9-3-7: Should the student earn 1 point for returning a constructed string from <code class="code-inline tex2jax_ignore">getName</code>?</div>
                <li data-component="answer" id="csawesome2_2_qtrio3_7_opt_a">
                  <div class="para" id="qtrio3_7-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio3_7_opt_a">
                  <div class="para" id="qtrio3_7-2-1-2-1">While the toString method exists and correctly creates and returns the name string, it is not called by a getName method.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtrio3_7_opt_b" data-correct="">
                  <div class="para" id="qtrio3_7-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio3_7_opt_b">
                  <div class="para" id="qtrio3_7-2-2-2-1">Since there is no getName method this point can not be awarded.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtrio3_8" data-multipleanswers="false">
                <div class="para" id="qtrio3_8-1-1">9-9-3-8: Should the student earn 1 point for correctly calculating the price and making it available to be returned from <code class="code-inline tex2jax_ignore">getPrice</code>?</div>
                <li data-component="answer" id="csawesome2_2_qtrio3_8_opt_a">
                  <div class="para" id="qtrio3_8-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio3_8_opt_a">
                  <div class="para" id="qtrio3_8-2-1-2-1">While there is a method that calculates the price correctly, it is the wrong method.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtrio3_8_opt_b" data-correct="">
                  <div class="para" id="qtrio3_8-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio3_8_opt_b">
                  <div class="para" id="qtrio3_8-2-2-2-1">There is no getPrice method so the student can not earn this point.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtrio3_9" data-multipleanswers="false">
                <div class="para" id="qtrio3_9-1-1">9-9-3-9: Should the student earn 1 point for returning the calculated price in <code class="code-inline tex2jax_ignore">getPrice</code>?</div>
                <li data-component="answer" id="csawesome2_2_qtrio3_9_opt_a">
                  <div class="para" id="qtrio3_9-2-1-1-1">Yes</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio3_9_opt_a">
                  <div class="para" id="qtrio3_9-2-1-2-1">While there is a method that calculates the price correctly and returns it, it is the wrong method.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtrio3_9_opt_b" data-correct="">
                  <div class="para" id="qtrio3_9-2-2-1-1">No</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtrio3_9_opt_b">
                  <div class="para" id="qtrio3_9-2-2-2-1">There is no getPrice method so the student can not earn this point.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 5.9.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone fillintheblank_section">
              <div data-component="fillintheblank" data-question_label="" id="csawesome2_2_qtrio3_total">
                <div class="para" id="qtrio3_total-1-1">9-9-3-10: What should the total score be for this student response (out of 9 points)?  Enter it as a number (like 3). <input type="text" placeholder="Text"/></div>
                <script type="application/json">[[{"regex": "^\\s*^\\s*^2$\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"qtrio3_total-2-1-1-1-1\"&gt;Correct.  This solution only got 2 points&lt;\/div&gt;"}, {"regex": "^\\s*^\\s*.*\\s*$\\s*$", "regexFlags": "", "feedback": "&lt;div class=\"para\" id=\"qtrio3_total-2-1-2-1-1\"&gt;Add 1 point for each yes response&lt;\/div&gt;"}]]</script>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-9-11</id>
      <title>Mixed Up Code Practice</title>
      <question optional="yes">
        <label>Exercise 5.10.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_oopex2muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="oopex2muc-1-1">The following program segment should create an empty Dog class that is a child of the Animal class. But, the blocks have been mixed up and may include extra blocks that are not needed in a correct solution. Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Dog extends Animal
{
---
public Animal class Dog  
{ #distractor
---
public class Animal extends Dog  
{ #distractor
---
public class Dog implements Animal  
{ #distractor
---
} // end class</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.10.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_oopex3muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="oopex3muc-1-1">The following program should overload a void method talk with no parameters. But, the blocks have been mixed up and may include extra blocks that are not needed in a correct solution. Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class GenericPerson
{
   public void talk()
   {
      System.out.println("Hello!");
   }
}
public class Person extends GenericPerson
{
---
   public void talk(String name)
   {
      System.out.println("Hello " + name + "!");
   }
---
   public String talk()
   {
      return "Hello!";
   }  #distractor
---
   public char talk()
   {
      return 'y';
   }  #distractor
---
} // end class</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.10.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_oopex5muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="oopex5muc-1-1">There is a <code class="code-inline tex2jax_ignore">Car</code> class whose implementation is not shown with a private int instance variable <code class="code-inline tex2jax_ignore">numWheels</code> set to <code class="code-inline tex2jax_ignore">4</code> and a no-argument constructor. There should also be a <code class="code-inline tex2jax_ignore">Sedan</code> class that inherits from <code class="code-inline tex2jax_ignore">Car</code> while adding an integer <code class="code-inline tex2jax_ignore">numSeats</code> instance variable set to <code class="code-inline tex2jax_ignore">5</code>. The <code class="code-inline tex2jax_ignore">Minivan</code> class should also inherit from <code class="code-inline tex2jax_ignore">Car</code> while having its own <code class="code-inline tex2jax_ignore">numSeats</code> instance variable that is set to 7. But, the blocks have been mixed up and may include extra blocks that are not needed in a correct solution. Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Sedan extends Car
{
   private int numSeats = 5;
---
   public Sedan()
   {
      super();
   }
---
} // end Sedan
public class Minivan extends Car
{
   private int numSeats = 7;
---
   public Minivan()
   {
      super();
   }
} // end Minivan</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.10.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_oopex6muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="oopex6muc-1-1">The following program should create a class <code class="code-inline tex2jax_ignore">Person</code> that has <code class="code-inline tex2jax_ignore">firstName</code> and <code class="code-inline tex2jax_ignore">lastName</code> as String instance variables &amp; also has a constructor that takes those in that order. Next, the program should create a <code class="code-inline tex2jax_ignore">Customer</code> class that inherits from <code class="code-inline tex2jax_ignore">Person</code> (initializing the instance variables too) and also has a String instance variable called <code class="code-inline tex2jax_ignore">id</code>. All three of these should be addressed in the <code class="code-inline tex2jax_ignore">Customer</code> constructor. But, the blocks have been mixed up and may include extra blocks that are not needed in a correct solution. Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Person
{
---
   private String firstName;
   private String lastName;
---
   public Person(String firstName, String lastName)
   {
      this.firstName = firstName;
      this.lastName = lastName;
   }
} // end Person class
---
public class Customer extends Person
{
   private String id;
---
   public Customer(String firstName, String lastName, String id)
   {
---
      super(firstName, lastName);
      this.id = id;
---
      this.firstName = firstName;
      this.lastName = lastName;
      this.id = id;  #paired
---
   } // end Customer constructor
} // end Customer class</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.10.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_oopex7muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="oopex7muc-1-1">There should be a <code class="code-inline tex2jax_ignore">House</code> class with private int instance variables <code class="code-inline tex2jax_ignore">numWindows</code> and <code class="code-inline tex2jax_ignore">numDoors</code> and a constructor that takes those in that order. There should also be a <code class="code-inline tex2jax_ignore">MobileHouse</code> class that inherits from <code class="code-inline tex2jax_ignore">House</code> while adding a <code class="code-inline tex2jax_ignore">numWheels</code> instance variable (and thus has a constructor that takes <code class="code-inline tex2jax_ignore">numWindows</code>, <code class="code-inline tex2jax_ignore">numDoors</code>, and <code class="code-inline tex2jax_ignore">numWheels</code> in that order). But, the blocks have been mixed up and may include extra blocks that are not needed in a correct solution. Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class House
{
---
   private int numWindows;
   private int numDoors;
---
   public House(int numWindows, int numDoors)
   {
---
      this.numWindows = numWindows;
      this.numDoors = numDoors;
---
   }
} // end house
public class MobileHouse extends House
{
---
   private int numWheels;
---
   public MobileHouse(int numWindows, int numDoors, int numWheels)
   {
---
      super(numWindows, numDoors);
      this.numWheels = numWheels;
---
   }
} // end MobileHouse</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.10.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_oopex8muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="oopex8muc-1-1">The following program should create a class <code class="code-inline tex2jax_ignore">Entity</code> that has <code class="code-inline tex2jax_ignore">healthPoints</code> as an integer instance variable, a constructor that takes that as an argument, and a <code class="code-inline tex2jax_ignore">fight()</code> method that prints <code class="code-inline tex2jax_ignore">"Attacked the hero!"</code> and returns nothing. Next, the program should create a <code class="code-inline tex2jax_ignore">Hero</code> class that inherits from <code class="code-inline tex2jax_ignore">Entity</code> and has a zero-argument constructor that initializes <code class="code-inline tex2jax_ignore">healthPoints</code> to 100. Finally, the <code class="code-inline tex2jax_ignore">Hero</code> class should override the <code class="code-inline tex2jax_ignore">fight()</code> method, instead printing <code class="code-inline tex2jax_ignore">"Attacked the enemy!"</code>. But, the blocks have been mixed up and may include extra blocks that are not needed in a correct solution. Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Entity
{
   private int healthPoints;
   public Entity(int HP)
   {
      this.healthPoints = HP;
   }
---
   public void fight()
   {
      System.out.println("Attacked the hero!");
   }
---
} // end Entity
public class Hero extends Entity
{
---
   public Hero()
   {
      super(100);
   }
---
   public void fight()
   {
      System.out.println("Attacked the enemy!");
   }
---
   public void fight()
   {
      super.fight("Attacked the enemy!");
   }  #paired
---
} // end Hero</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.10.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_oopex9muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="oopex9muc-1-1">The following program should create a <code class="code-inline tex2jax_ignore">Furniture</code> class. The class should have a String instance variable <code class="code-inline tex2jax_ignore">material</code> and a integer instance variable <code class="code-inline tex2jax_ignore">cost</code>. The <code class="code-inline tex2jax_ignore">Furniture</code> class should also include an <code class="code-inline tex2jax_ignore">equals()</code> method that returns <code class="code-inline tex2jax_ignore">true</code> if two <code class="code-inline tex2jax_ignore">Furniture</code> objects have the same <code class="code-inline tex2jax_ignore">material</code> and <code class="code-inline tex2jax_ignore">cost</code>. But, the blocks have been mixed up and may include extra blocks that are not needed in a correct solution. Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Furniture
{
---
   private String material;
   private int cost;
---
   public boolean equals(Furniture other)
   {
---
      return material.equals(other.material) &amp;&amp; cost == other.cost;
---
   } // end equals
} // end class</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.10.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_oopex10muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="oopex10muc-1-1">There is a <code class="code-inline tex2jax_ignore">Car</code> class whose implementation is not shown. The <code class="code-inline tex2jax_ignore">Car</code> class has a method called <code class="code-inline tex2jax_ignore">drive()</code> that prints <code class="code-inline tex2jax_ignore">"vroom"</code>. The following program should create a subclass of <code class="code-inline tex2jax_ignore">Car</code> called <code class="code-inline tex2jax_ignore">Racecar</code>. The <code class="code-inline tex2jax_ignore">Racecar</code> class should override <code class="code-inline tex2jax_ignore">drive()</code> with a new <code class="code-inline tex2jax_ignore">drive()</code> method that prints <code class="code-inline tex2jax_ignore">"vroom"</code> twice by calling <code class="code-inline tex2jax_ignore">Car</code>’s <code class="code-inline tex2jax_ignore">drive()</code> method twice. But, the blocks have been mixed up and may include extra blocks that are not needed in a correct solution. Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Racecar extends Car
{
// other methods and instance variables not shown
---
public class Racecar
{ 
// other methods and instance variables not shown #paired
---
   public void drive()
   {
---
      super.drive();
      super.drive();
---
      this.drive();
      this.drive();  #paired
---
   } // end drive
} // end class</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.10.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_oopex11muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="oopex11muc-1-1">There is a <code class="code-inline tex2jax_ignore">Computer</code> class with private String instance variables <code class="code-inline tex2jax_ignore">name</code> and <code class="code-inline tex2jax_ignore">company</code>. You should override the Object <code class="code-inline tex2jax_ignore">equals</code> method to evaluate whether both <code class="code-inline tex2jax_ignore">Computers</code> have the same <code class="code-inline tex2jax_ignore">name</code> and <code class="code-inline tex2jax_ignore">company</code>, in which case they are “equal”. There is also a <code class="code-inline tex2jax_ignore">Laptop</code> class that inherits from <code class="code-inline tex2jax_ignore">Computer</code> while adding a String <code class="code-inline tex2jax_ignore">keyboardType</code> instance variable. The <code class="code-inline tex2jax_ignore">Laptop</code> class should override the <code class="code-inline tex2jax_ignore">equals</code> method from <code class="code-inline tex2jax_ignore">Computer</code>, instead evaluating whether the <code class="code-inline tex2jax_ignore">name</code>, <code class="code-inline tex2jax_ignore">company</code>, and <code class="code-inline tex2jax_ignore">keyboardType</code> are the same (remember that <code class="code-inline tex2jax_ignore">name</code> and <code class="code-inline tex2jax_ignore">company</code> are not readable to <code class="code-inline tex2jax_ignore">Laptop</code> so some polymorphism might be needed). But, the blocks have been mixed up and may include extra blocks that are not needed in a correct solution. Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Computer
{
   // methods and variables not shown
---
   public boolean equals(Computer other)
   {
      return name.equals(other.name) &amp;&amp; company.equals(other.company);
   } // end equals
---
} // end Computer
public class Laptop extends Computer
{
   // methods and variables not shown
---
   public boolean equals(Laptop other)
   {
---
      return super.equals(other) &amp;&amp; keyboardType.equals(other.keyboardType);
---
      return name.equals(other.name) &amp;&amp; company.equals(other.company) &amp;&amp; keyboardType.equals(other.keyboardType);  #paired
---
   } // end equals
} // end Laptop</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.10.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_oopex12muc">
                <div class="parsons_question parsons-text">
                  <div class="para" id="oopex12muc-1-1">There is a <code class="code-inline tex2jax_ignore">Food</code> class (whose implementation is not shown) with a private <code class="code-inline tex2jax_ignore">numCalories</code> integer instance variable. <code class="code-inline tex2jax_ignore">Food</code> has a <code class="code-inline tex2jax_ignore">chomp()</code> method that returns nothing and prints <code class="code-inline tex2jax_ignore">"{numCalories} calories consumed"</code> (e.g., <code class="code-inline tex2jax_ignore">"5 calories consumed"</code>). There should also be a <code class="code-inline tex2jax_ignore">Fruit</code> subclass that inherits from <code class="code-inline tex2jax_ignore">Food</code> and adds the private <code class="code-inline tex2jax_ignore">color</code> String instance variable. The <code class="code-inline tex2jax_ignore">Fruit</code> class should override the <code class="code-inline tex2jax_ignore">Food</code> <code class="code-inline tex2jax_ignore">chomp()</code> method to return nothing, print <code class="code-inline tex2jax_ignore">"{numCalories} calories consumed"</code>, and print <code class="code-inline tex2jax_ignore">"fruit is {color}"</code> (on a new line). Finally, there should be an <code class="code-inline tex2jax_ignore">Apple</code> subclass that inherits from <code class="code-inline tex2jax_ignore">Fruit</code>, sets <code class="code-inline tex2jax_ignore">color</code> to <code class="code-inline tex2jax_ignore">"red"</code>, and adds a <code class="code-inline tex2jax_ignore">variety</code> String private instance variable. The <code class="code-inline tex2jax_ignore">Apple</code> class should have an overriden <code class="code-inline tex2jax_ignore">chomp()</code> method that returns nothing, prints <code class="code-inline tex2jax_ignore">"{numCalories} calories consumed"</code>, prints <code class="code-inline tex2jax_ignore">"fruit is {color}"</code>, and prints <code class="code-inline tex2jax_ignore">"ate {variety} apple"</code> (all separated by new lines). Remember that the <code class="code-inline tex2jax_ignore">numCalories</code> and <code class="code-inline tex2jax_ignore">color</code> variables are private, so the <code class="code-inline tex2jax_ignore">Apple</code> class does NOT have access to their values. But, the blocks have been mixed up and may include extra blocks that are not needed in a correct solution. Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="false">public class Fruit extends Food
{
   // instance variables and methods not shown
---
   public void chomp()
   {
---
      super.chomp();
---
      System.out.println("fruit is " + color);
---
   }
} // end Fruit
---
public class Apple extends Fruit
{
   // instance variables and methods not shown
---
   public void chomp()
   {
---
      super.chomp();
---
      System.out.println("ate " + variety + " apple");
   }
} // end Apple</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-000849</id>
      <title>Toggle Mixed Up or Write Code Practice</title>
    </subchapter>
    <subchapter>
      <id>csawesome2-9-13</id>
      <title>Code Practice with Object Oriented Concepts</title>
      <question optional="yes">
        <label>Exercise 5.12.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-9-13-2-1-1-1">Write a method that overloads the talk method by taking in a name and printing <code class="code-inline tex2jax_ignore">Hello</code> with that name.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Test1
{
    public static void talk()
    {
        System.out.println("hello there!");
    }

    public static // FINISH THE METHOD HERE //

    public static void main(String[] args)
    {
        talk("Matthew");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Hello Matthew\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testtalk_name()
    {
        String target = "public static void talk(String *)";
        boolean passed =
                checkCodeContainsRegex("overloaded method talk with a String parameter", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.12.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-9-13-2-2-1-1">Edit this code so the class Beagle is a subclass of the Dog class.  When you run the code it should print “woof!” and then “arf arf”.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Dog
{
    public void speak()
    {
        System.out.println("woof!");
    }

    public static void main(String[] args)
    {
        Dog d = new Dog();
        d.speak();
        Dog b = new Beagle();
        b.speak();
    }
}

class Beagle
{
    public void speak()
    {
        System.out.println("arf arf");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "woof!\n" + "arf arf\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testBeagleExtendsDog()
    {
        String target = "class Beagle extends Dog";
        boolean passed = checkCodeContains("class Beagle extends class Dog", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.12.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-9-13-2-3-1-1">Add an equals method to this class that returns true if the current Dog and passed Dog have the same name.  The code should print false twice then true twice.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Dog
{
    private String name;

    public Dog(String name)
    {
        this.name = name;
    }

    public boolean equals(Object other)
    {
        // ADD CODE HERE
    }

    public static void main(String[] args)
    {
        Dog d1 = new Dog("Rufus");
        Dog d2 = new Dog("Sally");
        Dog d3 = new Dog("Rufus");
        Dog d4 = d3;
        System.out.println(d1.equals(d2));
        System.out.println(d2.equals(d3));
        System.out.println(d1.equals(d3));
        System.out.println(d3.equals(d4));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "false\n" + "false\n" + "true\n" + "true\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        String target = "Dog * = (Dog)other";

        boolean passed = checkCodeContainsRegex("casting of Object other to type Dog", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        Dog d1 = new Dog("Rufus");
        Dog d2 = new Dog("Sally");

        String result = String.valueOf(!(d1.equals(d2)));

        boolean passed = getResults("true", result, "Equals method test - not equals");
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        Dog d1 = new Dog("Rufus");
        Dog d3 = new Dog("Rufus");

        String result = String.valueOf((d1.equals(d3)));

        boolean passed = getResults("true", result, "Equals method test - equals");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.12.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-9-13-2-4-1-1">Override the taste method from the Candy class in the Chocolate class to return <code class="code-inline tex2jax_ignore">tastes chocolately</code>.  It should print <code class="code-inline tex2jax_ignore">tastes sweet!</code> and then <code class="code-inline tex2jax_ignore">tastes chocolately</code>.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Candy
{
    public String taste()
    {
        return "tastes sweet!";
    }

    public static void main(String[] args)
    {
        Candy c1 = new Candy();
        System.out.println(c1.taste());
        Candy c2 = new Chocolate();
        System.out.println(c2.taste());
    }
}

class Chocolate extends Candy
{
    // ADD CODE HERE
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "tastes sweet!\n" + "tastes chocolately\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        String code = getCode();
        String target = "public String taste()";

        int num = countOccurencesRegex(code, target);

        boolean passed = (num == 2);

        getResults("2", "" + num, "2 taste methods", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.12.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-9-13-2-5-1-1">Overload the greet method to just print <code class="code-inline tex2jax_ignore">Hello</code> if not given any parameters.  It should print <code class="code-inline tex2jax_ignore">Hello</code> and then <code class="code-inline tex2jax_ignore">Hello Sansa</code>.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Student
{
    public static void greet(String name)
    {
        System.out.println("Hello " + name);
    }

    public static void main(String[] args)
    {
        greet();
        greet("Sansa");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Hello\nHello Sansa";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        String target = "greet();";
        boolean passed = checkCodeContains("overridden greet method", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.12.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-9-13-2-6-1-1">Add a call to Pet’s brag method before printing anything in Dog’s brag method (hint: use super to call an overridden method).  It should print <code class="code-inline tex2jax_ignore">I have the best pet!</code> and then <code class="code-inline tex2jax_ignore">I have the best dog</code>.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Pet
{

    public void brag()
    {
        System.out.println("I have the best pet!");
    }

    public static void main(String[] args)
    {
        Dog d1 = new Dog();
        d1.brag();
    }
}

class Dog extends Pet
{
    public void brag()
    {
        // ADD CODE HERE

        System.out.println("I have the best dog!");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "I have the best pet!\n" + "I have the best dog!\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        String target = "super.brag();";
        boolean passed = checkCodeContains("super to override method brag", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.12.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-9-13-2-7-1-1">Finish the Teacher constructor.  Use super to use the Person construtor to set the fields inherited from Person.  It should print <code class="code-inline tex2jax_ignore">Destini 20</code> followed by <code class="code-inline tex2jax_ignore">Erica 55 Masters in Teaching</code>.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Person
{
    private String name;
    private int age;

    public Person(String name, int age)
    {
        this.name = name;
        this.age = age;
    }

    public String getName()
    {
        return this.name;
    }

    public int getAge()
    {
        return this.age;
    }

    public String toString()
    {
        return getName() + " " + getAge();
    }

    public static void main(String[] args)
    {
        Person p = new Person("Destini", 20);
        System.out.println(p);
        Teacher p2 = new Teacher("Erica", 55, "Masters in Teaching");
        System.out.println(p2);
    }
}

class Teacher extends Person
{
    String degree;

    public String getDegree()
    {
        return this.degree;
    }

    public String toString()
    {
        return getName() + " " + getAge() + " " + getDegree();
    }

    public Teacher(String name, int age, String theDegree)
    {
        // ADD CODE HERE
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Destini 20\n" + "Erica 55 Masters in Teaching\n";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        Teacher p2 = new Teacher("Erica", 55, "Masters in Teaching");

        String output = p2.toString();
        String expect = "Erica 55 Masters in Teaching";

        boolean passed = getResults(output, expect, "Teacher class extends Person class");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.12.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-9-13-2-8-1-1">Add public getter and setter methods to the Store class so its variables can be accessed by other classes.  It should print the store’s name and address and then change both and print the new values.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Store
{
    private String name;
    private String address;

    public Store(String theName, String theAddress)
    {
        this.name = theName;
        this.address = theAddress;
    }

    // ADD CODE HERE

    public String toString()
    {
        return this.name + "\n" + this.address;
    }

    public static void main(String[] args)
    {
        Store myStore = new Store("Barb's Store", "333 Main St.");
        System.out.println(myStore);
        myStore.setName("Barbara's Store");
        myStore.setAddress("555 Pine St.");
        System.out.println(myStore);
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "Barb's Store\n" + "333 Main St.\n" + "Barbara's Store\n" + "555 Pine St.\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        Store myStore = new Store("A Store", "An Address");

        myStore.setName("Barbara's Store");
        myStore.setAddress("555 Pine St.");

        String output = myStore.getName() + "\n" + myStore.getAddress();
        String expect = "Barbara's Store\n" + "555 Pine St.";

        boolean passed = getResults(output, expect, "testing class Store: setters &amp; getters");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.12.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-9-13-2-9-1-1">Correctly finish the Dog subclass for the following Animal class.  Override the methods speak() to print <code class="code-inline tex2jax_ignore">woof</code> and eat() to print <code class="code-inline tex2jax_ignore">num num</code>.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">class Animal
{
    public String name;
    public int numLegs;

    public void speak()
    {
        System.out.println("sniff");
    }

    public void eat()
    {
        System.out.println("crunch");
    }
}

public class Dog extends Animal
{
    // ADD CODE HERE

    public static void main(String[] args)
    {
        Dog myDog = new Dog();
        myDog.speak();
        myDog.eat();
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "woof\n" + "num num\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        String target = " public void speak()";
        boolean passed = checkCodeContains("speak method", target);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String target = " public void eat()";
        boolean passed = checkCodeContains("eat method", target);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.12.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-9-13-2-10-1-1">Override the compareTo method so that it returns a positive number if the current Person is older than the passed other and a negative number if they are younger. If their age is the same then return the compareTo result on the names.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Person implements Comparable&lt;Person&gt;
{
    private String name;
    private int age;

    public Person(String name, int age)
    {
        this.name = name;
        this.age = age;
    }

    public int compareTo(Person other)
    {
        // ADD CODE HERE
    }

    public static void main(String[] args)
    {
        Person p1 = new Person("Carlos", 17);
        Person p2 = new Person("Lia", 18);
        Person p3 = new Person("Asraf", 17);
        Person p4 = new Person("Lia", 17);
        Person p5 = new Person("Karla", 17);
        System.out.println(p1.compareTo(p2));
        System.out.println(p2.compareTo(p3));
        System.out.println(p3.compareTo(p1));
        System.out.println(p4.compareTo(p3));
        System.out.println(p4.compareTo(p5));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "-1\n1\n-2\n11\n1\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        Person p1 = new Person("Carlos", 17);
        Person p2 = new Person("Lia", 18);
        String output = String.valueOf(p1.compareTo(p2));
        String expect = "-1";

        boolean passed = getResults(expect, output, "test1: compareTo method, ages different");

        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        Person p2 = new Person("Lia", 18);
        Person p3 = new Person("Asraf", 17);
        String output = String.valueOf(p2.compareTo(p3));
        String expect = "1";

        boolean passed = getResults(expect, output, "test2: compareTo method, ages different");

        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        Person p4 = new Person("Lia", 17);
        Person p5 = new Person("Karla", 17);

        String output = String.valueOf(p4.compareTo(p5));
        String expect = "1";

        boolean passed = getResults(expect, output, "test2: compareTo method, ages same");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.12.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_">
                <div class="ac_question" id="csawesome2_2__question">
                  <div class="para" id="csawesome2-9-13-2-11-1-1">Override the Person class’s speak method inside the Student class. Make the method print <code class="code-inline tex2jax_ignore">I'm a student</code>.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2__editor" data-question_label="" data-codelens="true">public class Person
{
    public void speak()
    {
        System.out.println("I'm a person");
    }

    public static void main(String[] args)
    {
        Person p1 = new Student();
        p1.speak();
    }
}

class Student extends Person
{
    // ADD CODE HERE
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "I'm a student\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        String code = getCode();
        String target = "public void speak()";

        int num = countOccurencesRegex(code, target);

        boolean passed = (num == 2);

        getResults("2", "" + num, "2 speak methods", passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-000894</id>
      <title>Multiple-Choice Exercises</title>
      <question optional="yes">
        <label>Exercise 5.13.1.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qooe_1" data-multipleanswers="false">
                <div class="para" id="qooe_1-1-1">9-12-1: What best describes the purpose of a class’s constructor?</div>
                <li data-component="answer" id="csawesome2_2_qooe_1_opt_a" data-correct="">
                  <div class="para" id="qooe_1-2-1-1-1">Initialize the fields in the object.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qooe_1_opt_a">
                  <div class="para" id="qooe_1-2-1-2-1">A constructor is often used to initialize the fields to their default values or in the case of a parameterized constructor, to the values passed in to the constructor.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qooe_1_opt_b">
                  <div class="para" id="qooe_1-2-2-1-1">Determines the amount of space needed for an object and creates the object.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qooe_1_opt_b">
                  <div class="para" id="qooe_1-2-2-2-1">The object is already created before the constructor is called.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qooe_1_opt_c">
                  <div class="para" id="qooe_1-2-3-1-1">Names the new object.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qooe_1_opt_c">
                  <div class="para" id="qooe_1-2-3-2-1">Constructors do not name the object.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.13.1.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qooe_2" data-multipleanswers="false">
                <div class="para" id="qooe_2-1-1">9-12-2: Under which of these conditions is it appropriate to overload a method (ie: the class will contain two methods with the same name)?</div>
                <li data-component="answer" id="csawesome2_2_qooe_2_opt_a">
                  <div class="para" id="qooe_2-2-1-1-1">The methods do different things.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qooe_2_opt_a">
                  <div class="para" id="qooe_2-2-1-2-1">Methods that do different things should be named differently.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qooe_2_opt_b">
                  <div class="para" id="qooe_2-2-2-1-1">The methods have different parameter names.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qooe_2_opt_b">
                  <div class="para" id="qooe_2-2-2-2-1">There is no reason the parameter names ought to be different if the two methods are performing the same action.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qooe_2_opt_c">
                  <div class="para" id="qooe_2-2-3-1-1">The methods have different post-conditions.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qooe_2_opt_c">
                  <div class="para" id="qooe_2-2-3-2-1">If the methods have different post-conditions, they are performing different functions, and should be named differently.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qooe_2_opt_d">
                  <div class="para" id="qooe_2-2-4-1-1">Two methods with the same name can never be included in the same class.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qooe_2_opt_d">
                  <div class="para" id="qooe_2-2-4-2-1">If two methods perform the same function, they can be named the same.  However, the number of parameters, type of parameters, or order of parameter types must be different.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qooe_2_opt_e" data-correct="">
                  <div class="para" id="qooe_2-2-5-1-1">The methods have different numbers of parameters</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qooe_2_opt_e">
                  <div class="para" id="qooe_2-2-5-2-1">Overloading occurs when two methods perform the same essential operation, but take a different number and/or type of parameters.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.13.1.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qooe_5" data-multipleanswers="false">
                <div class="para" id="qooe_5-1-1">9-12-3:  A car dealership needs a program to store information about the cars for sale. For each car, they want to keep track of the following information: number of doors (2 or 4), whether the car has air conditioning, and its average number of miles per gallon. Which of the following is the best design?</div>
                <li data-component="answer" id="csawesome2_2_qooe_5_opt_a">
                  <div class="para" id="qooe_5-2-1-1-1">Use four unrelated classes: Car, Doors, AirConditioning, and MilesPerGallon.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qooe_5_opt_a">
                  <div class="para" id="qooe_5-2-1-2-1">Only Car should be a class. The number of doors, flag if it has air conditioning, and the average number of miles per gallon are attributes of a car so they belong in a Car class.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qooe_5_opt_b">
                  <div class="para" id="qooe_5-2-2-1-1">Use a class Car with three subclasses: Doors, AirConditioning, and MilesPerGallon.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qooe_5_opt_b">
                  <div class="para" id="qooe_5-2-2-2-1">Doors, air conditioning, and miles per gallon are not a kind of car. Child classes need to be able to be substituted for the parent class.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qooe_5_opt_c" data-correct="">
                  <div class="para" id="qooe_5-2-3-1-1">Use a class Car, with fields: numDoors, hasAir, and milesPerGallon.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qooe_5_opt_c">
                  <div class="para" id="qooe_5-2-3-2-1">The number of doors, flag if it has air conditioning, and the average number of miles per gallon are attributes of a car. Each of these is a simple value so they can just be fields of a Car class.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qooe_5_opt_d">
                  <div class="para" id="qooe_5-2-4-1-1">Use a class Car, with subclasses of Doors, AirConditioning, and MilesPerGallon.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qooe_5_opt_d">
                  <div class="para" id="qooe_5-2-4-2-1">A door is not a type of car. A flag for air conditioning is not a type of door, and a miles per gallon is not a type of air conditioning flag. Child classes need to be able to be substituted for the parent class.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qooe_5_opt_e">
                  <div class="para" id="qooe_5-2-5-1-1">Use classes: Doors, AirConditioning, and MilesPerGallon, each with a subclass Car.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qooe_5_opt_e">
                  <div class="para" id="qooe_5-2-5-2-1">A class Car can’t be a subclass of three different classes. Each class can only have one parent class. Also a car is not a type of door, air conditioning flag, or miles per gallon. Child classes need to be able to be substituted for the parent class.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.13.1.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qooe_6" data-multipleanswers="false">
                <div class="para" id="qooe_6-1-1">9-12-4:  A program is being written by a team of programmers. One programmer is implementing a class called <code class="code-inline tex2jax_ignore">Employee</code>; another programmer is writing code that will use the <code class="code-inline tex2jax_ignore">Employee</code> class. Which of the following aspects of the public methods and fields of the <code class="code-inline tex2jax_ignore">Employee</code> class does not need to be known by both programmers?</div>
                <li data-component="answer" id="csawesome2_2_qooe_6_opt_a" data-correct="">
                  <div class="para" id="qooe_6-2-1-1-1">How the methods are implemented.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qooe_6_opt_a">
                  <div class="para" id="qooe_6-2-1-2-1">Only the programmer of the Employee class must know how the public methods work. The programmer that is using the Employee class can just use the public methods and not worry about how they are implemented.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qooe_6_opt_b">
                  <div class="para" id="qooe_6-2-2-1-1">The method names.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qooe_6_opt_b">
                  <div class="para" id="qooe_6-2-2-2-1">The programmer who writes the methods will need to know what the names are. The programmer who will use the public methods will also need to know the names of the methods in order to invoke them.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qooe_6_opt_c">
                  <div class="para" id="qooe_6-2-3-1-1">The method return types.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qooe_6_opt_c">
                  <div class="para" id="qooe_6-2-3-2-1">In order to use the public methods of the Employee class, a programmer must know the method return types.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qooe_6_opt_d">
                  <div class="para" id="qooe_6-2-4-1-1">Constants</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qooe_6_opt_d">
                  <div class="para" id="qooe_6-2-4-2-1">Constants are public fields and are meant to be used by people using a class.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qooe_6_opt_e">
                  <div class="para" id="qooe_6-2-5-1-1">The number and types of the method parameters.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qooe_6_opt_e">
                  <div class="para" id="qooe_6-2-5-2-1">In order to use the public methods of the Employee class, a programmer must know the number of parameters and the type for each parameter.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.13.1.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qooe_7" data-multipleanswers="false">
                <div class="para" id="qooe_7-1-1">9-12-5: A bookstore is working on an on-line ordering system. For each type of published material (books, movies, audio tapes) they need to track the id, title, author(s), date published, and price. Which of the following would be the best design?</div>
                <li data-component="answer" id="csawesome2_2_qooe_7_opt_a">
                  <div class="para" id="qooe_7-2-1-1-1">Create one class PublishedMaterial with the requested fields plus type.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qooe_7_opt_a">
                  <div class="para" id="qooe_7-2-1-2-1">This will complicate the process of retrieving objects based on their type. Also if we need to add information that is specific to Book or Movie or AudioTape it would be best if these were subclasses of PublishedMaterial.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qooe_7_opt_b">
                  <div class="para" id="qooe_7-2-2-1-1">Create classes Book, Movie, and AudioTape with the requested fields.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qooe_7_opt_b">
                  <div class="para" id="qooe_7-2-2-2-1">This involves writing more code than is necessary (usually people copy and paste the shared code) and makes it harder to fix errors. It would be better to put common fields and methods in the superclass PublishedMaterial and have Book, Movie, and AudioTape be subclasses.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qooe_7_opt_c">
                  <div class="para" id="qooe_7-2-3-1-1">Create one class BookStore with the requested fields plus type.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qooe_7_opt_c">
                  <div class="para" id="qooe_7-2-3-2-1">The class name, BookStore, seems to imply the thing that keeps track of the store. This would be an appropriate class name for an object that handles the items in the Bookstore. However, for the published material, it would be better to use a superclass PublishedMaterial and subclasses for Book, Movie and AudioTape.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qooe_7_opt_d">
                  <div class="para" id="qooe_7-2-4-1-1">Create classes for each.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qooe_7_opt_d">
                  <div class="para" id="qooe_7-2-4-2-1">This is more classes than is necessary. Items such as Title, Price, ID, Author and DatePublished are simple variables that do not need a class of their own but should be fields in a PublishedMaterial superclass, with Movie, AudioTape and Book as subclasses.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qooe_7_opt_e" data-correct="">
                  <div class="para" id="qooe_7-2-5-1-1">Create the class PublishedMaterial with children classes of Book, Movie, and AudioTape.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qooe_7_opt_e">
                  <div class="para" id="qooe_7-2-5-2-1">We will need to get objects based on their type so we should create classes for Book, Movie, and AudioTape. They have common fields so we should put these in a common superclass PublishedMaterial.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.13.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qoom_1" data-multipleanswers="false"><div class="para" id="qoom_1-1-1">9-12-8: Given the following class declarations, what is the output from <code class="code-inline tex2jax_ignore">Student s1 = new GradStudent();</code> followed by <code class="code-inline tex2jax_ignore">s1.getInfo();</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Student
{
    public String getFood()
    {
        return "Pizza";
    }

    public String getInfo()
    {
        return this.getFood();
    }
}

public class GradStudent extends Student
{
    public String getFood()
    {
        return "Taco";
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qoom_1_opt_a"><div class="para" id="qoom_1-2-1-1-1">Won’t compile since GradStudent doesn’t have a getInfo method</div></li><li data-component="feedback" id="csawesome2_2_qoom_1_opt_a"><div class="para" id="qoom_1-2-1-2-1">GradStudent will inherit the getInfo method from Student. This would be true if getInfo was a private method.</div></li><li data-component="answer" id="csawesome2_2_qoom_1_opt_b" data-correct=""><div class="para" id="qoom_1-2-2-1-1">Taco</div></li><li data-component="feedback" id="csawesome2_2_qoom_1_opt_b"><div class="para" id="qoom_1-2-2-2-1">Objects know what class they are created as and all methods are resolved starting with that class at run time. If the method isn’t found in that class the parent class is checked (and so on until it is found). So it will first look for getInfo in GradStudent and when it doesn’t find it it will look in Student. In getInfo it calls this.getFood. Again, it will first look for this method in GradStudent. It will find the getFood method there and return "Taco".</div></li><li data-component="answer" id="csawesome2_2_qoom_1_opt_c"><div class="para" id="qoom_1-2-3-1-1">Pizza</div></li><li data-component="feedback" id="csawesome2_2_qoom_1_opt_c"><div class="para" id="qoom_1-2-3-2-1">This would be true if it was Student s1 = new Student();</div></li><li data-component="answer" id="csawesome2_2_qoom_1_opt_d"><div class="para" id="qoom_1-2-4-1-1">Won’t compile since you are creating a GradStudent, not a Student</div></li><li data-component="feedback" id="csawesome2_2_qoom_1_opt_d"><div class="para" id="qoom_1-2-4-2-1">An object of a subclass can be substituted for a parent class object. A GradStudent is a Student.</div></li><li data-component="answer" id="csawesome2_2_qoom_1_opt_e"><div class="para" id="qoom_1-2-5-1-1">Won’t compile since you use this.getFood()</div></li><li data-component="feedback" id="csawesome2_2_qoom_1_opt_e"><div class="para" id="qoom_1-2-5-2-1">In object methods if you leave off the this. when invoking an object method it will be added for you by the compiler. The keyword this refers to the current object which is implicitly passed to all object methods.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.13.2.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qoom_2" data-multipleanswers="false"><div class="para" id="qoom_2-1-1">9-12-9: Given the following class declarations, and <code class="code-inline tex2jax_ignore">EnhancedItem enItemObj = new EnhancedItem();</code> in a client class, which of the following statements would compile?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Item
{
   private int x;

   public void setX(int theX)
   {
      x = theX;
   }
   // ... other methods not shown
}

public class EnhancedItem extends Item
{
   private int y;

   public void setY(int theY)
   {
      y = theY;
   }

  // ... other methods not shown
}

I. enItemObj.y = 32;
II. enItemObj.setY(32);
III. enItemObj.setX(52);
</code></pre></div><li data-component="answer" id="csawesome2_2_qoom_2_opt_a"><div class="para" id="qoom_2-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qoom_2_opt_a"><div class="para" id="qoom_2-2-1-2-1">I is wrong because y is a private field and thus can not be directly accessed from code in a client class.</div></li><li data-component="answer" id="csawesome2_2_qoom_2_opt_b"><div class="para" id="qoom_2-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qoom_2_opt_b"><div class="para" id="qoom_2-2-2-2-1">I is wrong because y  is a private field and thus can not be directly accessed from code in a client class. II is correct because EnhancedItem has setY as a public method. III is correct because EnhancedItem inherits the public method setX from Item.</div></li><li data-component="answer" id="csawesome2_2_qoom_2_opt_c"><div class="para" id="qoom_2-2-3-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_qoom_2_opt_c"><div class="para" id="qoom_2-2-3-2-1">I is wrong because y  is a private field and thus can not be directly accessed from code in a client class.</div></li><li data-component="answer" id="csawesome2_2_qoom_2_opt_d" data-correct=""><div class="para" id="qoom_2-2-4-1-1">II and III only</div></li><li data-component="feedback" id="csawesome2_2_qoom_2_opt_d"><div class="para" id="qoom_2-2-4-2-1">I is wrong because y  is a private field and thus can not be directly accessed from code in a client class.  II is correct because EnhancedItem has setY as a public method.  III is correct because EnhancedItem inherits the public method setX from Item.</div></li><li data-component="answer" id="csawesome2_2_qoom_2_opt_e"><div class="para" id="qoom_2-2-5-1-1">I, II, and III</div></li><li data-component="feedback" id="csawesome2_2_qoom_2_opt_e"><div class="para" id="qoom_2-2-5-2-1">I is wrong because y  is a private field and thus can not be directly accessed from code in a client class.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.13.2.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qoom_3" data-multipleanswers="false"><div class="para" id="qoom_3-1-1">9-12-10: Given the following class declarations and initializations in a client program, which of the following is a correct call to <code class="code-inline tex2jax_ignore">method1</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Test1
{
   public void method1(Test2 v1, Test3 v2)
   {
      // rest of method not shown
   }
}

public class Test2 extends Test1
{
}

public class Test3 extends Test2
{
}

The following initializations appear in a different class.
Test1 t1 = new Test1();
Test2 t2 = new Test2();
Test3 t3 = new Test3();
</code></pre></div><li data-component="answer" id="csawesome2_2_qoom_3_opt_a"><div class="para" id="qoom_3-2-1-1-1">t1.method1(t1,t1);</div></li><li data-component="feedback" id="csawesome2_2_qoom_3_opt_a"><div class="para" id="qoom_3-2-1-2-1">You can’t pass an object of class Test1 since it is not either an object of type Test2 or an object of type Test3. You can pass the specified type or an object that is a subclass of the specified type but Test1 is not a subclass of Test2 or Test3.</div></li><li data-component="answer" id="csawesome2_2_qoom_3_opt_b"><div class="para" id="qoom_3-2-2-1-1">t2.method1(t2,t2);</div></li><li data-component="feedback" id="csawesome2_2_qoom_3_opt_b"><div class="para" id="qoom_3-2-2-2-1">You can’t pass an object of class Test2 as a parameter of type Test3. Test2 is the parent class of Test3 not a subclass. You can pass an object of the specified type or an object of any subclass.</div></li><li data-component="answer" id="csawesome2_2_qoom_3_opt_c"><div class="para" id="qoom_3-2-3-1-1">t3.method1(t1,t1);</div></li><li data-component="feedback" id="csawesome2_2_qoom_3_opt_c"><div class="para" id="qoom_3-2-3-2-1">You can’t pass an object of class Test1 since it is not either an object of type Test2 or an object of type Test3. You can pass the specified type or an object that is a subclass of the specified type but Test1 is not a subclass of Test2 or Test3.</div></li><li data-component="answer" id="csawesome2_2_qoom_3_opt_d"><div class="para" id="qoom_3-2-4-1-1">t2.method1(t3,t2);</div></li><li data-component="feedback" id="csawesome2_2_qoom_3_opt_d"><div class="para" id="qoom_3-2-4-2-1">You can’t pass t2 as an object of type Test3 since it is an object of class Test2 and class Test2 is not either class Test3 or a subclass of class Test3. Class Test2 is the parent of class Test3.</div></li><li data-component="answer" id="csawesome2_2_qoom_3_opt_e" data-correct=""><div class="para" id="qoom_3-2-5-1-1">t3.method1(t3,t3);</div></li><li data-component="feedback" id="csawesome2_2_qoom_3_opt_e"><div class="para" id="qoom_3-2-5-2-1">Since method1 is a public method of class Test1 objects of any subclasses of Test1 can invoke the method. So, it can be invoked on t3 since it is an object of Test3 and this is a subclass of Test1.  And, since method1 takes an object of class Test2 and Test3 as parameters. This actually means it can take an object of Test2 or any subclass of Test2 and an object of Test3 or any subclass of Test3. So it can take t3 which is an object of class Test3 as an object of Test2 since Test3 is a subclass of Test2.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.13.2.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qoom_4" data-multipleanswers="false"><div class="para" id="qoom_4-1-1">9-12-11: If you have a parent class <code class="code-inline tex2jax_ignore">Animal</code> that has a method <code class="code-inline tex2jax_ignore">speak()</code> which returns: Awk. <code class="code-inline tex2jax_ignore">Cat</code> has a <code class="code-inline tex2jax_ignore">speak</code> method that returns: Meow.  <code class="code-inline tex2jax_ignore">Bird</code> does not have a <code class="code-inline tex2jax_ignore">speak</code> method.  <code class="code-inline tex2jax_ignore">Dog</code> has a <code class="code-inline tex2jax_ignore">speak</code> method that returns: Woof.  <code class="code-inline tex2jax_ignore">Pig</code> does not have a <code class="code-inline tex2jax_ignore">speak</code> method.  <code class="code-inline tex2jax_ignore">Cow</code> has a <code class="code-inline tex2jax_ignore">speak</code> method that returns: Moo.   What is the output from looping through the array <code class="code-inline tex2jax_ignore">a</code> created below and asking each element to <code class="code-inline tex2jax_ignore">speak()</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">Animal[] a = { new Cat(), new Cow(), new Dog(), new Pig(), new Bird() }
</code></pre></div><li data-component="answer" id="csawesome2_2_qoom_4_opt_a" data-correct=""><div class="para" id="qoom_4-2-1-1-1">Meow Moo Woof Awk Awk</div></li><li data-component="feedback" id="csawesome2_2_qoom_4_opt_a"><div class="para" id="qoom_4-2-1-2-1">Objects keep a reference to the class that created them. So, even if you put them in an array of Animal objects, they know what they are and all methods are resolved starting with the class of the object. Bird and Pig do not override speak so the speak method in Animal will execute.</div></li><li data-component="answer" id="csawesome2_2_qoom_4_opt_b"><div class="para" id="qoom_4-2-2-1-1">Awk Awk Awk Awk Awk</div></li><li data-component="feedback" id="csawesome2_2_qoom_4_opt_b"><div class="para" id="qoom_4-2-2-2-1">Methods are always resolved starting with the class of the object, so Cat, Cow, and Dog will all execute their overridden speak methods, so the output will be: Meow Moo Woof Awk Awk.</div></li><li data-component="answer" id="csawesome2_2_qoom_4_opt_c"><div class="para" id="qoom_4-2-3-1-1">This will not compile</div></li><li data-component="feedback" id="csawesome2_2_qoom_4_opt_c"><div class="para" id="qoom_4-2-3-2-1">Because Bird, Cow, Cat, Dog, and Pig are subclasses of Animal, they can be stored in an array declared as Animal without any compile time errors.</div></li><li data-component="answer" id="csawesome2_2_qoom_4_opt_d"><div class="para" id="qoom_4-2-4-1-1">This will have runtime errors</div></li><li data-component="feedback" id="csawesome2_2_qoom_4_opt_d"><div class="para" id="qoom_4-2-4-2-1">Because Bird, Cow, Cat, Dog, and Pig are subclasses of Animal, they can be stored in an array declared as Animal without any runtime errors.</div></li><li data-component="answer" id="csawesome2_2_qoom_4_opt_e"><div class="para" id="qoom_4-2-5-1-1">Meow Moo Woof Oink Awk</div></li><li data-component="feedback" id="csawesome2_2_qoom_4_opt_e"><div class="para" id="qoom_4-2-5-2-1">The Pig class did not override the speak method, so it will use the method from Animal, thus the output should be: Meow Moo Woof Awk Awk</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.13.2.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qoom_5" data-multipleanswers="false"><div class="para" id="qoom_5-1-1">9-12-12: Given the following class declarations and code, what is the result when the code is run?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Car
{
   private int fuel;

   public Car() { fuel = 0; }
   public Car(int g) { fuel = g; }

   public void addFuel() { fuel++; }
   public void display() { System.out.print(fuel + " "); }
}

public class RaceCar extends Car
{
   public RaceCar(int g) { super(2*g); }
}

What is the result when the following code is compiled and run?

Car car = new Car(5);
Car fastCar = new RaceCar(5);
car.display();
car.addFuel();
car.display();
fastCar.display();
fastCar.addFuel();
fastCar.display();
</code></pre></div><li data-component="answer" id="csawesome2_2_qoom_5_opt_a"><div class="para" id="qoom_5-2-1-1-1">The code compiles and runs with no errors, the output is 5 6 5 6</div></li><li data-component="feedback" id="csawesome2_2_qoom_5_opt_a"><div class="para" id="qoom_5-2-1-2-1">RaceCar, while it inherits methods from Car via inheritance, has a separate and different constructor that sets the initial fuel amount to 2 * g, thus in this case, fuel for fastCar is set to 10 initially.</div></li><li data-component="answer" id="csawesome2_2_qoom_5_opt_b" data-correct=""><div class="para" id="qoom_5-2-2-1-1">The code compiles and runs with no errors, the output is: 5 6 10 11</div></li><li data-component="feedback" id="csawesome2_2_qoom_5_opt_b"><div class="para" id="qoom_5-2-2-2-1">The code compiles correctly, and because RaceCar extends the Car class, all the public methods of Car can be used by RaceCar objects. Also, a variable Car can refer to a Car object or an object of any subclass of Car. An object always knows the class that created it, so even though fastCar is declared to be a Car the constructor that is executed is the one for RaceCar.</div></li><li data-component="answer" id="csawesome2_2_qoom_5_opt_c"><div class="para" id="qoom_5-2-3-1-1">The code compiles and runs with no errors, the output is 10 11 10 11</div></li><li data-component="feedback" id="csawesome2_2_qoom_5_opt_c"><div class="para" id="qoom_5-2-3-2-1">The variable car is a Car object, so the constructor used is not the same as the fastCar object which is a RaceCar. The car constructor does not change the passed in parameter, so it is set to 5 initially.</div></li><li data-component="answer" id="csawesome2_2_qoom_5_opt_d"><div class="para" id="qoom_5-2-4-1-1">The code won’t compile.</div></li><li data-component="feedback" id="csawesome2_2_qoom_5_opt_d"><div class="para" id="qoom_5-2-4-2-1">RaceCar inherits from the Car class so all the public methods in Car can be accessed by any object of the RaceCar class.</div></li><li data-component="answer" id="csawesome2_2_qoom_5_opt_e"><div class="para" id="qoom_5-2-5-1-1">You get a runtime error ClassCastException, when fastCar.addFuel() is executed.</div></li><li data-component="feedback" id="csawesome2_2_qoom_5_opt_e"><div class="para" id="qoom_5-2-5-2-1">RaceCar inherits from the Car class so all the public methods in Car can be accessed by any object of the RaceCar class.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.13.2.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qoom_6" data-multipleanswers="false"><div class="para" id="qoom_6-1-1">9-12-13: Given the following class declarations and code, what is the result when the code is run?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Book
{
   public String getISBN()
   {
      // implementation not shown
   }

   // constructors, fields, and other methods not shown
}

public class Dictionary extends Book
{
   public String getDefinition(String word)
   {
      // implementation not shown
   }

   // constructors, fields, and methods not shown
}

Assume that the following declaration appears in a client class.

Book b = new Dictionary();

Which of the following statements would compile without error?
I.  b.getISBN();
II. b.getDefinition("wonderful");
III. ((Dictionary) b).getDefinition("wonderful");
</code></pre></div><li data-component="answer" id="csawesome2_2_qoom_6_opt_a"><div class="para" id="qoom_6-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qoom_6_opt_a"><div class="para" id="qoom_6-2-1-2-1">Both I and III are correct. I is correct because variable b has been declared to be an object of the class Book so you can invoke any public methods that are defined in the Book class or in parents of Book. II is not correct because you can’t invoke methods in the Dictionary class directly on b since b is declared to be of type Book not type Dictionary and Dictionary is a subclass of Book not a parent class of Book. III is correct because you can cast b to type Dictionary and then invoke public methods in Dictionary.</div></li><li data-component="answer" id="csawesome2_2_qoom_6_opt_b"><div class="para" id="qoom_6-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qoom_6_opt_b"><div class="para" id="qoom_6-2-2-2-1">You can’t invoke methods in the Dictionary class directly on b since b is declared to be of type Book not type Dictionary and Dictionary is a subclass of Book not a parent class of Book. The compiler checks that the method exists on the declared class type, not the run-time type of the object.</div></li><li data-component="answer" id="csawesome2_2_qoom_6_opt_c" data-correct=""><div class="para" id="qoom_6-2-3-1-1">I and III only</div></li><li data-component="feedback" id="csawesome2_2_qoom_6_opt_c"><div class="para" id="qoom_6-2-3-2-1">I is correct because variable b has been declared to be an object of the class Book so you can invoke any public methods that are defined in the Book class or in parents of Book. II is not correct because you can’t invoke methods in the Dictionary class directly on b since b is declared to be of type Book not type Dictionary and Dictionary is a subclass of Book not a parent class of Book. III is correct because you can cast b to type Dictionary and then invoke public methods in Dictionary.</div></li><li data-component="answer" id="csawesome2_2_qoom_6_opt_d"><div class="para" id="qoom_6-2-4-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_qoom_6_opt_d"><div class="para" id="qoom_6-2-4-2-1">I is also correct.</div></li><li data-component="answer" id="csawesome2_2_qoom_6_opt_e"><div class="para" id="qoom_6-2-5-1-1">I, II, and III</div></li><li data-component="feedback" id="csawesome2_2_qoom_6_opt_e"><div class="para" id="qoom_6-2-5-2-1">You can’t invoke methods in the Dictionary class directly on b since b is declared to be of type Book not type Dictionary and Dictionary is a subclass of Book not a parent class of Book. The compiler checks that the method exists on the declared class, not the run-time class.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.13.2.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qsh_3" data-multipleanswers="false"><div class="para" id="qsh_3-1-1">9-12-14: What is the output of the following code?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">class Animal
{
    void someSound()
    {
        System.out.print("Screeech ");
    }
}

class Cat extends Animal
{
    public Cat()
    {
        System.out.print("Meow ");
        super.someSound();
    }
}

class Garfield extends Cat
{
    public Garfield()
    {
        System.out.print("Lasagna ");
    }
}

public class MainClass
{
    public static void main(String[] args)
    {
        Garfield garfield = new Garfield();
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qsh_3_opt_a"><div class="para" id="qsh_3-2-1-1-1">Lasagna Meow Screeech</div></li><li data-component="feedback" id="csawesome2_2_qsh_3_opt_a"><div class="para" id="qsh_3-2-1-2-1">The baseclass constructor runs first so Animal doesn’t have one so then it goes to Cat’s constructor and then Garfield’s constructor</div></li><li data-component="answer" id="csawesome2_2_qsh_3_opt_b" data-correct=""><div class="para" id="qsh_3-2-2-1-1">Meow Screeech Lasagna</div></li><li data-component="feedback" id="csawesome2_2_qsh_3_opt_b"><div class="para" id="qsh_3-2-2-2-1">The baseclass constructor runs first so Animal doesn’t have one so then it goes to Cat’s constructor and then Garfield’s constructor</div></li><li data-component="answer" id="csawesome2_2_qsh_3_opt_c"><div class="para" id="qsh_3-2-3-1-1">Screeech Meow Lasagna</div></li><li data-component="feedback" id="csawesome2_2_qsh_3_opt_c"><div class="para" id="qsh_3-2-3-2-1">The baseclass constructor runs first so Animal doesn’t have one so then it goes to Cat’s constructor and then Garfield’s constructor</div></li><li data-component="answer" id="csawesome2_2_qsh_3_opt_d"><div class="para" id="qsh_3-2-4-1-1">Lasagna Screeech Meow</div></li><li data-component="feedback" id="csawesome2_2_qsh_3_opt_d"><div class="para" id="qsh_3-2-4-2-1">The baseclass constructor runs first so Animal doesn’t have one so then it goes to Cat’s constructor and then Garfield’s constructor</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.13.3.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qooh_1" data-multipleanswers="false"><div class="para" id="qooh_1-1-1">9-12-14: Assume that <code class="code-inline tex2jax_ignore">Base b = new Derived();</code> appears in a client program.  What is the result of the call <code class="code-inline tex2jax_ignore">b.methodOne();</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Base
{
    public void methodOne()
    {
        System.out.print("A");
        methodTwo();
    }

    public void methodTwo()
    {
        System.out.print("B");
    }
}

public class Derived extends Base
{
    public void methodOne()
    {
        super.methodOne();
        System.out.print("C");
    }

    public void methodTwo()
    {
        super.methodTwo();
        System.out.print("D");
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qooh_1_opt_a" data-correct=""><div class="para" id="qooh_1-2-1-1-1">ABDC</div></li><li data-component="feedback" id="csawesome2_2_qooh_1_opt_a"><div class="para" id="qooh_1-2-1-2-1">Even though b is declared as type Base it is created as an object of the Derived class, so all methods to it will be resolved starting with the Derived class. So the methodOne() in Derived will be called. This method first calls super.methodOne so this will invoke the method in the superclass (which is Base). So next the methodOne in Base will execute. This prints the letter "A" and invokes this.methodTwo(). Since b is really a Derived object, we check there first to see if it has a methodTwo. It does, so execution continues in the Derived class methodTwo. This method invokes super.methodTwo. So this will invoke the method in the super class (Base) named methodTwo. This method prints the letter "B" and then returns. Next the execution returns from the call to the super.methodTwo and prints the letter "D". We return to the Base class methodOne and return from that to the Derived class methodOne and print the letter "C".</div></li><li data-component="answer" id="csawesome2_2_qooh_1_opt_b"><div class="para" id="qooh_1-2-2-1-1">AB</div></li><li data-component="feedback" id="csawesome2_2_qooh_1_opt_b"><div class="para" id="qooh_1-2-2-2-1">This would be true if the object was created of type Base. But the object is really a Derived  object. So all methods are looked for starting with the Derived  class.</div></li><li data-component="answer" id="csawesome2_2_qooh_1_opt_c"><div class="para" id="qooh_1-2-3-1-1">ABCD</div></li><li data-component="feedback" id="csawesome2_2_qooh_1_opt_c"><div class="para" id="qooh_1-2-3-2-1">After the call to methodOne in the super class printing "A", the code continues with the implicit this.methodTwo which resolves from the current object’s class which is Derived. Next, methodTwo in the Derived class is executed which then calls super.methodTwo which invokes println "B" from methodTwo in the Base class. Then the "D" in the Derived methodTwo is printed. Finally the program returns to methodOne in the Derived class are prints "C".</div></li><li data-component="answer" id="csawesome2_2_qooh_1_opt_d"><div class="para" id="qooh_1-2-4-1-1">ABC</div></li><li data-component="feedback" id="csawesome2_2_qooh_1_opt_d"><div class="para" id="qooh_1-2-4-2-1">The call to methodTwo in super.methodOne is to this.methodTwo which is the method from the Derived class. Consequently the "D" is also printed.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 5.13.3.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qooh_2" data-multipleanswers="false"><div class="para" id="qooh_2-1-1">9-12-15: If you have the following classes.  Which of the following constructors would be valid for <code class="code-inline tex2jax_ignore">Point3D</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Point2D
{
   public int x;
   public int y;

   public Point2D() {}

   public Point2D(int x,int y)
   {
      this.x = x;
      this.y = y;
   }
  // other methods
}

public class Point3D extends Point2D
{
   public int z;

   // other code
}

I.  public Point3D()
    {

    }
II. public Point3D(int x, int y, int z)
    {
       super(x,y);
       this.z = z;
    }
III. public Point3D(int x, int y)
     {
        this.x = x;
        this.y = y;
        this.z = 0;
     }
</code></pre></div><li data-component="answer" id="csawesome2_2_qooh_2_opt_a"><div class="para" id="qooh_2-2-1-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qooh_2_opt_a"><div class="para" id="qooh_2-2-1-2-1">Point2D does have a constructor that takes an x and y value so this is okay. Also the call to super is the first line of code in the child constructor as required. However, both I and III are okay as well.</div></li><li data-component="answer" id="csawesome2_2_qooh_2_opt_b"><div class="para" id="qooh_2-2-2-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_qooh_2_opt_b"><div class="para" id="qooh_2-2-2-2-1">The x and y values in Point2D are public and so can be directly accessed by all classes including subclasses. Also there is a no-arg constructor in Point2D so the super no-arg constructor will be called before the first line of code in this constructor.</div></li><li data-component="answer" id="csawesome2_2_qooh_2_opt_c" data-correct=""><div class="para" id="qooh_2-2-3-1-1">I, II, and III</div></li><li data-component="feedback" id="csawesome2_2_qooh_2_opt_c"><div class="para" id="qooh_2-2-3-2-1">I is true because Point2D does have a no-arg constructor. II is true because Point2D does have a constructor that takes x and y. III is true because Point2D does have a no-arg constructor which will be called before the first line of code is executed in this constructor. The fields x and y are public in Point2D and thus can be directly accessed by all classes.</div></li><li data-component="answer" id="csawesome2_2_qooh_2_opt_d"><div class="para" id="qooh_2-2-4-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_qooh_2_opt_d"><div class="para" id="qooh_2-2-4-2-1">This would be true if x and y were private in Point2D, but they are public.</div></li><li data-component="answer" id="csawesome2_2_qooh_2_opt_e"><div class="para" id="qooh_2-2-5-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qooh_2_opt_e"><div class="para" id="qooh_2-2-5-2-1">Point2D does have a no-arg constructor and since the constructor in Point3D doesn’t have an explicit call to super as the first line of code in the constructor one will be added for the no-arg constructor. However, both II and III are okay as well.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>college-board-celebrity-lab</id>
      <title>College Board Celebrity Lab</title>
    </subchapter>
  </chapter>
  <chapter>
    <id>csawesome2-10</id>
    <title>Post Test and Survey</title>
    <subchapter>
      <id>post-test</id>
      <title>Post Test</title>
      <question optional="yes">
        <label>Exercise 6.1.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe2_1-14" data-multipleanswers="false">
                <div class="para" id="pe2_1-14-1-1">11-1: Under which of these conditions will a sequential search be faster than a binary search?</div>
                <li data-component="answer" id="csawesome2_2_pe2_1-14_opt_a" data-correct="">
                  <div class="para" id="pe2_1-14-2-1-1-1">The value you are searching for is the first element in the array.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe2_1-14_opt_a">
                  <div class="para" id="pe2_1-14-2-1-2-1">Only when the search value is the first item in the array, and thus the first value encountered in sequential search, will sequential be faster than binary.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe2_1-14_opt_b">
                  <div class="para" id="pe2_1-14-2-2-1-1">The value you are searching for is the last element in the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe2_1-14_opt_b">
                  <div class="para" id="pe2_1-14-2-2-2-1">In this case a sequential search will have to check every element before finding the correct one, whereas a binary search will not.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe2_1-14_opt_c">
                  <div class="para" id="pe2_1-14-2-3-1-1">The value you are searching for is in the middle of the array.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe2_1-14_opt_c">
                  <div class="para" id="pe2_1-14-2-3-2-1">Results will differ depending on the exact location of the element, but Binary Search will still find the element faster while Sequential will have to check more elements.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe2_1-14_opt_d">
                  <div class="para" id="pe2_1-14-2-4-1-1">The value you are searching for is not in the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe2_1-14_opt_d">
                  <div class="para" id="pe2_1-14-2-4-2-1">If the search value is not in the array, a sequential search will have to check every item in the array before failing, a binary search will be faster.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe2_1-14_opt_e">
                  <div class="para" id="pe2_1-14-2-5-1-1">Sequential Search can never be faster than Binary Search.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe2_1-14_opt_e">
                  <div class="para" id="pe2_1-14-2-5-2-1">When the search value is the first element, Sequential will always be faster, as it will only need to check one element.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 6.1.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe2_2-9" data-multipleanswers="false"><div class="para" id="pe2_2-9-1-1">11-2: Which of the following expressions is equivalent to the following?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">!(c || d)
</code></pre></div><li data-component="answer" id="csawesome2_2_pe2_2-9_opt_a"><div class="para" id="pe2_2-9-2-1-1-1">(c || d)</div></li><li data-component="feedback" id="csawesome2_2_pe2_2-9_opt_a"><div class="para" id="pe2_2-9-2-1-2-1">NOTing an OR expression does not result in the same values ORed.</div></li><li data-component="answer" id="csawesome2_2_pe2_2-9_opt_b"><div class="para" id="pe2_2-9-2-2-1-1">(c &amp;&amp; d)</div></li><li data-component="feedback" id="csawesome2_2_pe2_2-9_opt_b"><div class="para" id="pe2_2-9-2-2-2-1">You do negate the OR to AND, but you also need to negate the values of d and d.</div></li><li data-component="answer" id="csawesome2_2_pe2_2-9_opt_c"><div class="para" id="pe2_2-9-2-3-1-1">(!c) || (!d)</div></li><li data-component="feedback" id="csawesome2_2_pe2_2-9_opt_c"><div class="para" id="pe2_2-9-2-3-2-1">This would be equivalent to (!(c &amp;&amp; d)) using De Morgans laws.</div></li><li data-component="answer" id="csawesome2_2_pe2_2-9_opt_d"><div class="para" id="pe2_2-9-2-4-1-1">!(c &amp;&amp; d)</div></li><li data-component="feedback" id="csawesome2_2_pe2_2-9_opt_d"><div class="para" id="pe2_2-9-2-4-2-1">This would be equivalent to (!c || !d)</div></li><li data-component="answer" id="csawesome2_2_pe2_2-9_opt_e" data-correct=""><div class="para" id="pe2_2-9-2-5-1-1">(!c) &amp;&amp; (!d)</div></li><li data-component="feedback" id="csawesome2_2_pe2_2-9_opt_e"><div class="para" id="pe2_2-9-2-5-2-1">NOTing (negating) an OR expression is the same as the AND of the individual values NOTed (negated). See De Morgans laws.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 6.1.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe2_3-19" data-multipleanswers="false">
                <div class="para" id="pe2_3-19-1-1">11-3: What is encapsulation and how does Java implement it?</div>
                <li data-component="answer" id="csawesome2_2_pe2_3-19_opt_a">
                  <div class="para" id="pe2_3-19-2-1-1-1">Data (fields) can be directly accessed by all code in all classes.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe2_3-19_opt_a">
                  <div class="para" id="pe2_3-19-2-1-2-1">Encapsulation is making data private so only code in the same class has direct access.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe2_3-19_opt_b">
                  <div class="para" id="pe2_3-19-2-2-1-1">Data (fields) can be hidden inside of an object using the abstract visibility modifier.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe2_3-19_opt_b">
                  <div class="para" id="pe2_3-19-2-2-2-1">There is no abstract visibility modfier.  You can not use the keyword abstract on variable declarations.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe2_3-19_opt_c">
                  <div class="para" id="pe2_3-19-2-3-1-1">Data (fields) are directly accessible by objects in the same package and in subclasses.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe2_3-19_opt_c">
                  <div class="para" id="pe2_3-19-2-3-2-1">Encapsulation means that only code in the defining class has direct access. The visibility modifier protected gives diredct access to code in classes in the same package and subclasses.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe2_3-19_opt_d" data-correct="">
                  <div class="para" id="pe2_3-19-2-4-1-1">Data (fields) can be hidden inside an object using the visibility modifier private.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe2_3-19_opt_d">
                  <div class="para" id="pe2_3-19-2-4-2-1">This is the definition of encapsulation and this is done in Java using private (a member is directly accessible only in the class that defines it) and protected (a member is directly accessible only within code in the same package and in subclasses).</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe2_3-19_opt_e">
                  <div class="para" id="pe2_3-19-2-5-1-1">Data (fields) are directly accessible by objects in the same package.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe2_3-19_opt_e">
                  <div class="para" id="pe2_3-19-2-5-2-1">Encapsulation means that only code in the defining class has direct access. The default package access gives direct access to code in classes in the same package.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 6.1.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe2_4-10" data-multipleanswers="false"><div class="para" id="pe2_4-10-1-1">11-4: Which of the following will cause an infinite loop when <code class="code-inline tex2jax_ignore">temp</code> is greater than zero and <code class="code-inline tex2jax_ignore">a</code> is an array of integers.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int k = 0; k &lt; a.length; k++ )
{
   while (a[k] &lt; temp )
   {
      a[k] *= 2;
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe2_4-10_opt_a"><div class="para" id="pe2_4-10-2-1-1-1">The values don’t matter this will always cause an infinite loop.</div></li><li data-component="feedback" id="csawesome2_2_pe2_4-10_opt_a"><div class="para" id="pe2_4-10-2-1-2-1">An infinite loop will not always occur in this program segment. It occurs when at least one value in a is less than or equal to 0.</div></li><li data-component="answer" id="csawesome2_2_pe2_4-10_opt_b"><div class="para" id="pe2_4-10-2-2-1-1">Whenever a has values larger then temp.</div></li><li data-component="feedback" id="csawesome2_2_pe2_4-10_opt_b"><div class="para" id="pe2_4-10-2-2-2-1">Values larger then temp will not cause an infinite loop.</div></li><li data-component="answer" id="csawesome2_2_pe2_4-10_opt_c"><div class="para" id="pe2_4-10-2-3-1-1">When all values in a are larger than temp.</div></li><li data-component="feedback" id="csawesome2_2_pe2_4-10_opt_c"><div class="para" id="pe2_4-10-2-3-2-1">Values larger then temp will not cause an infinite loop.</div></li><li data-component="answer" id="csawesome2_2_pe2_4-10_opt_d"><div class="para" id="pe2_4-10-2-4-1-1">Whenever a includes a value equal to temp.</div></li><li data-component="feedback" id="csawesome2_2_pe2_4-10_opt_d"><div class="para" id="pe2_4-10-2-4-2-1">Values equal to temp will not cause the infinite loop.</div></li><li data-component="answer" id="csawesome2_2_pe2_4-10_opt_e" data-correct=""><div class="para" id="pe2_4-10-2-5-1-1">Whenever a includes a value that is equal to zero.</div></li><li data-component="feedback" id="csawesome2_2_pe2_4-10_opt_e"><div class="para" id="pe2_4-10-2-5-2-1">When a contains a value equal to zero then multiplying that value by 2 will always be 0 and never make the result larger than the temp value (which was set to some value &gt; 0), so an infinite loop will occur.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 6.1.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe2_5-5" data-multipleanswers="false"><div class="para" id="pe2_5-5-1-1">11-5: Given the following code segment, which of the following is this equivalent to?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">if (x &gt; 0) x = -x;
if (x &lt; 0) x = 0;
</code></pre></div><li data-component="answer" id="csawesome2_2_pe2_5-5_opt_a"><div class="para" id="pe2_5-5-2-1-1-1">if (x &gt; 0) x = 0;</div></li><li data-component="feedback" id="csawesome2_2_pe2_5-5_opt_a"><div class="para" id="pe2_5-5-2-1-2-1">Even if x is &lt; 0, the above code will set it to 0.</div></li><li data-component="answer" id="csawesome2_2_pe2_5-5_opt_b" data-correct=""><div class="para" id="pe2_5-5-2-2-1-1">x = 0;</div></li><li data-component="feedback" id="csawesome2_2_pe2_5-5_opt_b"><div class="para" id="pe2_5-5-2-2-2-1">No matter what x is set to originally, the code will reset it to 0.</div></li><li data-component="answer" id="csawesome2_2_pe2_5-5_opt_c"><div class="para" id="pe2_5-5-2-3-1-1">if (x &lt; 0) x = 0;</div></li><li data-component="feedback" id="csawesome2_2_pe2_5-5_opt_c"><div class="para" id="pe2_5-5-2-3-2-1">Even if x is &gt; than 0 originally, it will be set to 0 after the code executes.</div></li><li data-component="answer" id="csawesome2_2_pe2_5-5_opt_d"><div class="para" id="pe2_5-5-2-4-1-1">if (x &gt; 0) x = -x; else x = 0;</div></li><li data-component="feedback" id="csawesome2_2_pe2_5-5_opt_d"><div class="para" id="pe2_5-5-2-4-2-1">The first if statment will always cause the second to be executed unless x already equals 0, such that x will never equal -x</div></li><li data-component="answer" id="csawesome2_2_pe2_5-5_opt_e"><div class="para" id="pe2_5-5-2-5-1-1">if (x &lt; 0) x = 0; else x = -1;</div></li><li data-component="feedback" id="csawesome2_2_pe2_5-5_opt_e"><div class="para" id="pe2_5-5-2-5-2-1">The first if statement will always cause the second to be executed unless x already equals 0, such that x will never equal -x</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 6.1.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe2_6-15" data-multipleanswers="false"><div class="para" id="pe2_6-15-1-1">11-6: Given the following code segment, what will be printed when it is executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">List&lt;Integer&gt; list1 = new ArrayList&lt;Integer&gt;();
list1.add(new Integer(1));
list1.add(new Integer(2));
list1.add(new Integer(3));
list1.set(2, new Integer(4));
list1.add(2, new Integer(5));
list1.add(new Integer(6));
System.out.println(list1);
</code></pre></div><li data-component="answer" id="csawesome2_2_pe2_6-15_opt_a"><div class="para" id="pe2_6-15-2-1-1-1">[1, 2, 3, 4, 5]</div></li><li data-component="feedback" id="csawesome2_2_pe2_6-15_opt_a"><div class="para" id="pe2_6-15-2-1-2-1">The set replaces the 3 with the 4 so this can’t be right</div></li><li data-component="answer" id="csawesome2_2_pe2_6-15_opt_b"><div class="para" id="pe2_6-15-2-2-1-1">[1, 2, 4, 5, 6]</div></li><li data-component="feedback" id="csawesome2_2_pe2_6-15_opt_b"><div class="para" id="pe2_6-15-2-2-2-1">The add with an index of 2 and a value of 5 adds the 5 at index 2 not 3. Remember that the first index is 0.</div></li><li data-component="answer" id="csawesome2_2_pe2_6-15_opt_c"><div class="para" id="pe2_6-15-2-3-1-1">[1, 6, 2, 4, 5]</div></li><li data-component="feedback" id="csawesome2_2_pe2_6-15_opt_c"><div class="para" id="pe2_6-15-2-3-2-1">How did the 6 get in position 2?</div></li><li data-component="answer" id="csawesome2_2_pe2_6-15_opt_d"><div class="para" id="pe2_6-15-2-4-1-1">[1, 5, 2, 4, 6]</div></li><li data-component="feedback" id="csawesome2_2_pe2_6-15_opt_d"><div class="para" id="pe2_6-15-2-4-2-1">The add with an index of 2 and a value of 5 adds the 5 at index 2 not 1. Remember that the first index is 0.</div></li><li data-component="answer" id="csawesome2_2_pe2_6-15_opt_e" data-correct=""><div class="para" id="pe2_6-15-2-5-1-1">[1, 2, 5, 4, 6]</div></li><li data-component="feedback" id="csawesome2_2_pe2_6-15_opt_e"><div class="para" id="pe2_6-15-2-5-2-1">The add method that takes just a value as a parameter adds that value to the end of the list. The set replaces the value at that index with the new value. The add with parameters of an index and a value puts the passed value at that index and moves any existing values by one index to the right (increments the index). So the list looks like: 1 // add 1 1 2 // add 2 1 2 3 // add 3 1 2 4 // set index 2 to 4 1 2 5 4 // add 5 to index 2 (move rest right) 1 2 5 4 6 // add 6 to end</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 6.1.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe2_7-20" data-multipleanswers="false"><div class="para" id="pe2_7-20-1-1">11-7: Which of the following reasons for using an inheritance heirarchy are valid?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">I.   Methods from a superclass can be used in a subclass without
     rewriting or copying code.
II.  Objects from subclasses can be passed as arguments to a method
     designed for the superclass
III. Objects from subclasses can be stored in the same array
IV.  All of the above
V.   None of the above
</code></pre></div><li data-component="answer" id="csawesome2_2_pe2_7-20_opt_a" data-correct=""><div class="para" id="pe2_7-20-2-1-1-1">IV</div></li><li data-component="feedback" id="csawesome2_2_pe2_7-20_opt_a"><div class="para" id="pe2_7-20-2-1-2-1">All of these are valid reasons to use an inheritance heirarchy.</div></li><li data-component="answer" id="csawesome2_2_pe2_7-20_opt_b"><div class="para" id="pe2_7-20-2-2-1-1">I and II</div></li><li data-component="feedback" id="csawesome2_2_pe2_7-20_opt_b"><div class="para" id="pe2_7-20-2-2-2-1">III is also valid. In some cases you might want to store subclasses together in a single array, and inheritance allows for this.</div></li><li data-component="answer" id="csawesome2_2_pe2_7-20_opt_c"><div class="para" id="pe2_7-20-2-3-1-1">I and III</div></li><li data-component="feedback" id="csawesome2_2_pe2_7-20_opt_c"><div class="para" id="pe2_7-20-2-3-2-1">II is also valid. In some cases a single method is applicable for a number of subclasses, and inheritance allows you to pass objects of the subclasses to the same method instead of writing individual methods for each subclass.</div></li><li data-component="answer" id="csawesome2_2_pe2_7-20_opt_d"><div class="para" id="pe2_7-20-2-4-1-1">V</div></li><li data-component="feedback" id="csawesome2_2_pe2_7-20_opt_d"><div class="para" id="pe2_7-20-2-4-2-1">In fact, all of the reasons listed are valid. Subclasses can reuse methods written for superclasses without code replication, subclasses can be stored in the same array, and passed as arguments to methods meant for the superclass. All of which make writing code more streamlined.</div></li><li data-component="answer" id="csawesome2_2_pe2_7-20_opt_e"><div class="para" id="pe2_7-20-2-5-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_pe2_7-20_opt_e"><div class="para" id="pe2_7-20-2-5-2-1">II and III are also valid, in some cases a single method is applicable for a number of subclasses, and inheritance allows you to pass all the subclasses to the same method instead of writing individual methods for each subclass and you might want to store subclasses together in a single array, and inheritance allows for this.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 6.1.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe2_8-13" data-multipleanswers="false"><div class="para" id="pe2_8-13-1-1">11-8: Which of the following is printed as the result of the call <code class="code-inline tex2jax_ignore">mystery(1234);</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">//precondition:  x &gt;=0
public void mystery (int x)
{
  System.out.print(x % 10);

  if ((x / 10) != 0)
  {
      mystery(x / 10);
  }
  System.out.print(x % 10);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe2_8-13_opt_a"><div class="para" id="pe2_8-13-2-1-1-1">Many digits are printed due to infinite recursion.</div></li><li data-component="feedback" id="csawesome2_2_pe2_8-13_opt_a"><div class="para" id="pe2_8-13-2-1-2-1">When the recursive call to mystery(1) occurs (the 4th call to mystery), the division of x /10 equals .01--this becomes 0 because this is integer division and the remainder is thrown away. Therefore the current call will be completed and all of the previous calls to mystery will be completed.</div></li><li data-component="answer" id="csawesome2_2_pe2_8-13_opt_b"><div class="para" id="pe2_8-13-2-2-1-1">3443</div></li><li data-component="feedback" id="csawesome2_2_pe2_8-13_opt_b"><div class="para" id="pe2_8-13-2-2-2-1">The first call to mystery with the integer 1234 will print 1234 % 10. The ’%’ means remainder. The remainder of 1234 divided by 10 is 4 so the first thing printed must be 4.</div></li><li data-component="answer" id="csawesome2_2_pe2_8-13_opt_c" data-correct=""><div class="para" id="pe2_8-13-2-3-1-1">43211234</div></li><li data-component="feedback" id="csawesome2_2_pe2_8-13_opt_c"><div class="para" id="pe2_8-13-2-3-2-1">This has a recursive call which means that the method calls itself when (x / 10) is greater than or equal to zero. Each time the method is called it prints the remainder of the passed value divided by 10 and then calls the method again with the result of the integer division of the passed number by 10 (which throws away the decimal part). After the recursion stops by (x / 10) == 0 the method will print the remainder of the passed value divided by 10 again.</div></li><li data-component="answer" id="csawesome2_2_pe2_8-13_opt_d"><div class="para" id="pe2_8-13-2-4-1-1">1441</div></li><li data-component="feedback" id="csawesome2_2_pe2_8-13_opt_d"><div class="para" id="pe2_8-13-2-4-2-1">The first call to mystery with the integer 1234 will print 1234 % 10. The ’%’ means remainder. The remainder of 1234 divided by 10 is 4 so the first thing printed must be 4.</div></li><li data-component="answer" id="csawesome2_2_pe2_8-13_opt_e"><div class="para" id="pe2_8-13-2-5-1-1">12344321</div></li><li data-component="feedback" id="csawesome2_2_pe2_8-13_opt_e"><div class="para" id="pe2_8-13-2-5-2-1">The first call to mystery with the integer 1234 will print 1234 % 10. The ’%’ means remainder. The remainder of 1234 divided by 10 is 4 so the first thing printed must be 4.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 6.1.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe2_9-18" data-multipleanswers="false"><div class="para" id="pe2_9-18-1-1">11-9: Given the following code segment, what are the values of <code class="code-inline tex2jax_ignore">a</code> and <code class="code-inline tex2jax_ignore">b</code> after the <code class="code-inline tex2jax_ignore">for</code> loop finishes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int a = 10, b = 3, t;
for (int i=1; i&lt;=6; i++)
{
   t = a;
   a = i + b;
   b = t - i;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe2_9-18_opt_a"><div class="para" id="pe2_9-18-2-1-1-1">a = 6 and b = 7</div></li><li data-component="feedback" id="csawesome2_2_pe2_9-18_opt_a"><div class="para" id="pe2_9-18-2-1-2-1">This would be true if the loop stopped when i was equal to 6.</div></li><li data-component="answer" id="csawesome2_2_pe2_9-18_opt_b" data-correct=""><div class="para" id="pe2_9-18-2-2-1-1">a = 13 and b = 0</div></li><li data-component="feedback" id="csawesome2_2_pe2_9-18_opt_b"><div class="para" id="pe2_9-18-2-2-2-1">The variable i loops from 1 to 6 and each time the values are as follows: i = 1, t = 10, a = 4, b = 9, i = 2, t = 4, a  = 11, b =2, i = 3, t = 11, a = 5, b = 8, i = 4, t = 5, a = 12, b = 1, i = 5, t = 12, a = 6, b = 7, i = 6, t = 6, a = 13, b = 0</div></li><li data-component="answer" id="csawesome2_2_pe2_9-18_opt_c"><div class="para" id="pe2_9-18-2-3-1-1">a = 6 and b = 0</div></li><li data-component="feedback" id="csawesome2_2_pe2_9-18_opt_c"><div class="para" id="pe2_9-18-2-3-2-1">Actually i = 6 and t = 6 and b = 0 after the loop finishes.</div></li><li data-component="answer" id="csawesome2_2_pe2_9-18_opt_d"><div class="para" id="pe2_9-18-2-4-1-1">a = 0 and b = 13</div></li><li data-component="feedback" id="csawesome2_2_pe2_9-18_opt_d"><div class="para" id="pe2_9-18-2-4-2-1">Actually a = 13 and b = 0 after the loop finishes.</div></li><li data-component="answer" id="csawesome2_2_pe2_9-18_opt_e"><div class="para" id="pe2_9-18-2-5-1-1">a = 6 and b = 13</div></li><li data-component="feedback" id="csawesome2_2_pe2_9-18_opt_e"><div class="para" id="pe2_9-18-2-5-2-1">Actually i = 6 and t = 6 and a = 13 after the loop finishes.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 6.1.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe2_10-1" data-multipleanswers="false"><div class="para" id="pe2_10-1-1-1">11-10: Given the following code segment, what is printed when it is executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String test = "123456";
for (int index = 0; index &lt; test.length() - 1; index = index + 1)
{
     System.out.print(test.substring(index,index+2));
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe2_10-1_opt_a"><div class="para" id="pe2_10-1-2-1-1-1">112233445566</div></li><li data-component="feedback" id="csawesome2_2_pe2_10-1_opt_a"><div class="para" id="pe2_10-1-2-1-2-1">This would be true if the loop was printing each character twice and was incrementing the index by 1, but it prints two characters at a time and increments the index by 2.</div></li><li data-component="answer" id="csawesome2_2_pe2_10-1_opt_b"><div class="para" id="pe2_10-1-2-2-1-1">123456</div></li><li data-component="feedback" id="csawesome2_2_pe2_10-1_opt_b"><div class="para" id="pe2_10-1-2-2-2-1">This would be true if the loop was incremented by 2 instead of 1.</div></li><li data-component="answer" id="csawesome2_2_pe2_10-1_opt_c" data-correct=""><div class="para" id="pe2_10-1-2-3-1-1">1223344556</div></li><li data-component="feedback" id="csawesome2_2_pe2_10-1_opt_c"><div class="para" id="pe2_10-1-2-3-2-1">This code loops through the string printing 2 characters at a time.  The last time through the loop the index is test.length() - 2.</div></li><li data-component="answer" id="csawesome2_2_pe2_10-1_opt_d"><div class="para" id="pe2_10-1-2-4-1-1">123234345456</div></li><li data-component="feedback" id="csawesome2_2_pe2_10-1_opt_d"><div class="para" id="pe2_10-1-2-4-2-1">This would be true if the loop was printing 3 characters at a time instead of 2.  Remember that the substring doesn’t include the character at the specified last index.</div></li><li data-component="answer" id="csawesome2_2_pe2_10-1_opt_e"><div class="para" id="pe2_10-1-2-5-1-1">Nothing will be printed due to an IndexOutOfBoundsException.</div></li><li data-component="feedback" id="csawesome2_2_pe2_10-1_opt_e"><div class="para" id="pe2_10-1-2-5-2-1">This would be true if the loop stopped when index was less than the string length instead of one less than the string length.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 6.1.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe2_11-3" data-multipleanswers="false"><div class="para" id="pe2_11-3-1-1">11-11: Given the following code segment, what are the values of <code class="code-inline tex2jax_ignore">var1</code> and <code class="code-inline tex2jax_ignore">var2</code> after the while loop finishes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int var1 = 0;
int var2 = 2;

while ((var2 != 0) &amp;&amp; ((var1 / var2) &gt;= 0))
{
   var1 = var1 + 1;
   var2 = var2 - 1;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe2_11-3_opt_a" data-correct=""><div class="para" id="pe2_11-3-2-1-1-1">var1=2, var2=0</div></li><li data-component="feedback" id="csawesome2_2_pe2_11-3_opt_a"><div class="para" id="pe2_11-3-2-1-2-1">The loop starts with var1=0 and var2=2. The while checks that var2 isn’t 0 (2!=0) and that var1 / var2 is greater than or equal to zero (0/2=0) so this is equal to zero and the body of the while loop will execute. The variable var1 has 1 added to it for a new value of 1. The variable var2 has 1 subtracted from it for a value of 1. At this point var1=1 and var2=1. The while condition is checked again. Since var2 isn’t 0 (1!=0) and var1/var2 (1/1=1) is &gt;= 0 so the body of the loop will execute again. The variable var1 has 1 added to it for a new value of 2. The variable var2 has 1 subtracted from it for a value of 0. At this point var1=2 and var2=0. The while condition is checked again. Since var2 is zero the while loop stops and the value of var1 is 2 and var2 is 0.</div></li><li data-component="answer" id="csawesome2_2_pe2_11-3_opt_b"><div class="para" id="pe2_11-3-2-2-1-1">var1=3, var2=-1</div></li><li data-component="feedback" id="csawesome2_2_pe2_11-3_opt_b"><div class="para" id="pe2_11-3-2-2-2-1">This would be true if the body of the while loop executed 3 times, but it exectues twice.</div></li><li data-component="answer" id="csawesome2_2_pe2_11-3_opt_c"><div class="para" id="pe2_11-3-2-3-1-1">var1=0, var2=2</div></li><li data-component="feedback" id="csawesome2_2_pe2_11-3_opt_c"><div class="para" id="pe2_11-3-2-3-2-1">This would be true if the body of the while loop never executed. This would have happened if the while check was if var1 != 0 instead of var2 != 0.</div></li><li data-component="answer" id="csawesome2_2_pe2_11-3_opt_d"><div class="para" id="pe2_11-3-2-4-1-1">var1=1, var2=1</div></li><li data-component="feedback" id="csawesome2_2_pe2_11-3_opt_d"><div class="para" id="pe2_11-3-2-4-2-1">This would be true if the body of the while loop only executed one time, but it executes twice.</div></li><li data-component="answer" id="csawesome2_2_pe2_11-3_opt_e"><div class="para" id="pe2_11-3-2-5-1-1">The loop won’t finish executing because of a division by zero.</div></li><li data-component="feedback" id="csawesome2_2_pe2_11-3_opt_e"><div class="para" id="pe2_11-3-2-5-2-1">The operation 0 / 2 won’t cause a division by zero. The result is just zero.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 6.1.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe2_12-6" data-multipleanswers="false"><div class="para" id="pe2_12-6-1-1">11-12: Susan is 5 years older than Matt. Three years from now Susan’s age will be twice Matt’s age.  What should be in place of <code class="code-inline tex2jax_ignore">condition</code> in the code segment below to solve this problem?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int s = 1; s &lt;= 100; s++) {
   for (int m = 1; m &lt;= 100; m++) {
      if (condition)
          System.out.println("Susan is " + s + " and Matt is " + m);
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe2_12-6_opt_a"><div class="para" id="pe2_12-6-2-1-1-1">(s == m - 5) &amp;&amp; (s - 3 == 2 * (m - 3))</div></li><li data-component="feedback" id="csawesome2_2_pe2_12-6_opt_a"><div class="para" id="pe2_12-6-2-1-2-1">This would be true if Susan was 5 years younger than Matt and three years ago she was twice his age. But, how could she be younger than him now and twice his age three years ago?</div></li><li data-component="answer" id="csawesome2_2_pe2_12-6_opt_b" data-correct=""><div class="para" id="pe2_12-6-2-2-1-1">s == m + 5 &amp;&amp; s + 3 == 2 * m + 6</div></li><li data-component="feedback" id="csawesome2_2_pe2_12-6_opt_b"><div class="para" id="pe2_12-6-2-2-2-1">Susan is 5 years older than Matt so s == m + 5 should be true and in 3 years she will be twice as old so s + 3 = 2 * (m + 3) = 2 * m + 6.</div></li><li data-component="answer" id="csawesome2_2_pe2_12-6_opt_c"><div class="para" id="pe2_12-6-2-3-1-1">s == (m - 5) &amp;&amp; (2 * s + 3) == (m + 3)</div></li><li data-component="feedback" id="csawesome2_2_pe2_12-6_opt_c"><div class="para" id="pe2_12-6-2-3-2-1">This can’t be right because Susan is 5 years older than Matt, so the first part is wrong. It has susan equal to Matt’s age minus 5 which would have Matt older than Susan.</div></li><li data-component="answer" id="csawesome2_2_pe2_12-6_opt_d"><div class="para" id="pe2_12-6-2-4-1-1">None of the above is correct</div></li><li data-component="feedback" id="csawesome2_2_pe2_12-6_opt_d"><div class="para" id="pe2_12-6-2-4-2-1">The answer is s == m + 5 &amp;&amp; s + 3 == 2 * m + 6.</div></li><li data-component="answer" id="csawesome2_2_pe2_12-6_opt_e"><div class="para" id="pe2_12-6-2-5-1-1">(s == (m + 5)) &amp;&amp; ((s + 3) == (2 * m + 3))</div></li><li data-component="feedback" id="csawesome2_2_pe2_12-6_opt_e"><div class="para" id="pe2_12-6-2-5-2-1">This is almost right. It has Susan as 5 years older than Matt now. But the second part is wrong. Multiplication will be done before addition so (2 * m + 3) won’t be correct for in 3 years Susan will be twice as old as Matt. It should be (2 * (m + 3)) or (2 * m + 6).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 6.1.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe2_13-16" data-multipleanswers="false"><div class="para" id="pe2_13-16-1-1">11-13: Given the following code segment, What are the contents of <code class="code-inline tex2jax_ignore">mat</code> after the code segment has been executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java"> int [][] mat = new int [3][4];
 for (int row = 0; row &lt; mat.length; row++)
 {
   for (int col = 0; col &lt; mat[0].length; col++)
   {
      if (row &lt; col)
        mat[row][col] = 1;
      else if (row == col)
        mat[row][col] = 2;
      else
        mat[row][col] = 3;
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe2_13-16_opt_a"><div class="para" id="pe2_13-16-2-1-1-1">{ {2 3 3 3}, {1 2 3 3}, {1 1 2 3}}</div></li><li data-component="feedback" id="csawesome2_2_pe2_13-16_opt_a"><div class="para" id="pe2_13-16-2-1-2-1">This would be true if you set the value to 3 when the column index was greater than the row and a 1 when the row index was greater than the column index.</div></li><li data-component="answer" id="csawesome2_2_pe2_13-16_opt_b"><div class="para" id="pe2_13-16-2-2-1-1">{ {2 3 3}, {1 2 3}, {1 1 2}, {1 1 1}}</div></li><li data-component="feedback" id="csawesome2_2_pe2_13-16_opt_b"><div class="para" id="pe2_13-16-2-2-2-1">This would be true if the first value when you create a 2-d array was the number of columns and the second was the number of rows. Also you would need to set the value to 3 when the column index was greater than the row and a 1 when the row index was greater than the column index.</div></li><li data-component="answer" id="csawesome2_2_pe2_13-16_opt_c"><div class="para" id="pe2_13-16-2-3-1-1">{ {2 1 1}, {3 2 1}, {3 3 2}, {3 3 3}}</div></li><li data-component="feedback" id="csawesome2_2_pe2_13-16_opt_c"><div class="para" id="pe2_13-16-2-3-2-1">This would be true if the first value when you create a 2-d array was the number of columns and the second was the number of rows.</div></li><li data-component="answer" id="csawesome2_2_pe2_13-16_opt_d" data-correct=""><div class="para" id="pe2_13-16-2-4-1-1">{ {2 1 1 1}, {3 2 1 1}, {3 3 2 1}}</div></li><li data-component="feedback" id="csawesome2_2_pe2_13-16_opt_d"><div class="para" id="pe2_13-16-2-4-2-1">When you create a 2-d array the first value is the number of rows and the second is the number of columns. This code will put a 1 in the array when the row index is less than the column index and a 2 in the array when the row and column index are the same, and a 3 in the array when the row index is greater than the column index.</div></li><li data-component="answer" id="csawesome2_2_pe2_13-16_opt_e"><div class="para" id="pe2_13-16-2-5-1-1">{ {1 1 1 1}, {2 2 2 2}, {3 3 3 3}}</div></li><li data-component="feedback" id="csawesome2_2_pe2_13-16_opt_e"><div class="para" id="pe2_13-16-2-5-2-1">This would be true if you set the value to the row index.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 6.1.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe2_14-12" data-multipleanswers="false"><div class="para" id="pe2_14-12-1-1">11-14: Given the following code segment, what will the value of <code class="code-inline tex2jax_ignore">s1</code> be after this executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String s1 = "Hi There";
String s2 = s1;
String s3 = s2;
String s4 = s1;
s2 = s2.toLowerCase();
s3 = s3.toUpperCase();
s4 = null;
</code></pre></div><li data-component="answer" id="csawesome2_2_pe2_14-12_opt_a"><div class="para" id="pe2_14-12-2-1-1-1">hI tHERE</div></li><li data-component="feedback" id="csawesome2_2_pe2_14-12_opt_a"><div class="para" id="pe2_14-12-2-1-2-1">Strings are immutable and so any changes to a string returns a new string.</div></li><li data-component="answer" id="csawesome2_2_pe2_14-12_opt_b"><div class="para" id="pe2_14-12-2-2-1-1">hi there</div></li><li data-component="feedback" id="csawesome2_2_pe2_14-12_opt_b"><div class="para" id="pe2_14-12-2-2-2-1">This would only be correct if we had s1 = s2; after s2.toLowerCase(); was executed. Strings are immutable and so any change to a string returns a new string.</div></li><li data-component="answer" id="csawesome2_2_pe2_14-12_opt_c"><div class="para" id="pe2_14-12-2-3-1-1">HI THERE</div></li><li data-component="feedback" id="csawesome2_2_pe2_14-12_opt_c"><div class="para" id="pe2_14-12-2-3-2-1">This would be correct if we had s1 = s3; after s3.toUpperCase(); was executed. Strings are immutable and so any change to a string returns a new string.</div></li><li data-component="answer" id="csawesome2_2_pe2_14-12_opt_d"><div class="para" id="pe2_14-12-2-4-1-1">null</div></li><li data-component="feedback" id="csawesome2_2_pe2_14-12_opt_d"><div class="para" id="pe2_14-12-2-4-2-1">This would be true if we had s1 = s4; after s4 = null; was executed. Strings are immutable and so any changes to a string returns a new string.</div></li><li data-component="answer" id="csawesome2_2_pe2_14-12_opt_e" data-correct=""><div class="para" id="pe2_14-12-2-5-1-1">Hi There</div></li><li data-component="feedback" id="csawesome2_2_pe2_14-12_opt_e"><div class="para" id="pe2_14-12-2-5-2-1">Strings are immutable meaning that any changes to a string creates and returns a new string, so the string referred to by s1 does not change</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 6.1.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe2_15-7" data-multipleanswers="false"><div class="para" id="pe2_15-7-1-1">11-15: Given the following code segment, what is printed when it executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java"> public static void test()
 {
   int num = 0;
   while(num &lt;= 14)
   {
     if(num % 3 == 1)
     {
        System.out.print("1 ");
     }
     else if (num % 3 == 2)
     {
        System.out.print("2 ");
     }
     else
     {
        System.out.print("0 ");
     }

     num += 2;
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe2_15-7_opt_a"><div class="para" id="pe2_15-7-2-1-1-1">0 1 2 0 1 2 0 1</div></li><li data-component="feedback" id="csawesome2_2_pe2_15-7_opt_a"><div class="para" id="pe2_15-7-2-1-2-1">The second time through the loop the value of num is 2 and 2 % 3 is 2 not 1.</div></li><li data-component="answer" id="csawesome2_2_pe2_15-7_opt_b" data-correct=""><div class="para" id="pe2_15-7-2-2-1-1">0 2 1 0 2 1 0 2</div></li><li data-component="feedback" id="csawesome2_2_pe2_15-7_opt_b"><div class="para" id="pe2_15-7-2-2-2-1">The while loop will iterate 8 times. The value of num each time through the loop is: 0, 2, 4, 6, 8, 10, 12, and 14. The corresponding remainder operator of 3 is: 0, 2, 1, 0, 2, 1, 0, 2, which is print to the console.</div></li><li data-component="answer" id="csawesome2_2_pe2_15-7_opt_c"><div class="para" id="pe2_15-7-2-3-1-1">0 2 1 0 2 1 0 2 1</div></li><li data-component="feedback" id="csawesome2_2_pe2_15-7_opt_c"><div class="para" id="pe2_15-7-2-3-2-1">The loop will iterate 8 times not 9. When the value of num exceeds 14, num will no longer be evaluated against the conditional statements. The remainder operator of 3 will be evaluated on the num values of 0, 2, 4, 6, 8, 10, 12 and 14.</div></li><li data-component="answer" id="csawesome2_2_pe2_15-7_opt_d"><div class="para" id="pe2_15-7-2-4-1-1">2 1 0 2 1 0 2 1</div></li><li data-component="feedback" id="csawesome2_2_pe2_15-7_opt_d"><div class="para" id="pe2_15-7-2-4-2-1">The value of num the first time through the loop is 0 so the first remainder is 0 not 2. This would be true if the value of num was 2 to start.</div></li><li data-component="answer" id="csawesome2_2_pe2_15-7_opt_e"><div class="para" id="pe2_15-7-2-5-1-1">0 2 1 0 2 1 0</div></li><li data-component="feedback" id="csawesome2_2_pe2_15-7_opt_e"><div class="para" id="pe2_15-7-2-5-2-1">This would be true if the loop stopped when the value of num was less than 14 but it is less than or equal to 14.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 6.1.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe2_16-2" data-multipleanswers="false"><div class="para" id="pe2_16-2-1-1">11-16: Consider the following data field and method <code class="code-inline tex2jax_ignore">findLongest</code>. Method <code class="code-inline tex2jax_ignore">findLongest</code> is intended to find the longest consecutive block of the value target occurring in the array nums; however, <code class="code-inline tex2jax_ignore">findLongest</code> does not work as intended. For example, if the array nums contains the values [7, 10, 10, 15, 15, 15, 15, 10, 10, 10, 15, 10, 10], the call <code class="code-inline tex2jax_ignore">findLongest(10)</code> should return 3, the length of the longest consecutive block of 10s.  Which of the following best describes the value returned by a call to <code class="code-inline tex2jax_ignore">findLongest</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private int[] nums;
public int findLongest(int target)
{
   int lenCount = 0;
   int maxLen = 0;

   for (int k = 0; k &lt; nums.length; k++)
   {
     if (nums[k] == target)
     {
       lenCount++;
     }
     else
     {
        if (lenCount &gt; maxLen)
        {
           maxLen = lenCount;
        }
     }
  }
  if (lenCount &gt; maxLen)
  {
     maxLen = lenCount;
  }
  return maxLen;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe2_16-2_opt_a"><div class="para" id="pe2_16-2-2-1-1-1">It is the length of the array nums.</div></li><li data-component="feedback" id="csawesome2_2_pe2_16-2_opt_a"><div class="para" id="pe2_16-2-2-1-2-1">This can’t be true. There is no nums.length in the code and the only count happens lenCount is incremented when nums[k] == target.</div></li><li data-component="answer" id="csawesome2_2_pe2_16-2_opt_b"><div class="para" id="pe2_16-2-2-2-1-1">It is the length of the first consecutive block of the value target in nums.</div></li><li data-component="feedback" id="csawesome2_2_pe2_16-2_opt_b"><div class="para" id="pe2_16-2-2-2-2-1">It doesn’t reset the count ever so it just counts all the times the target value appears in the array.</div></li><li data-component="answer" id="csawesome2_2_pe2_16-2_opt_c"><div class="para" id="pe2_16-2-2-3-1-1">It is the length of the shortest consecutive block of the value target in nums.</div></li><li data-component="feedback" id="csawesome2_2_pe2_16-2_opt_c"><div class="para" id="pe2_16-2-2-3-2-1">It doesn’t reset the count ever so it just counts all the times the target value appears in the array.</div></li><li data-component="answer" id="csawesome2_2_pe2_16-2_opt_d" data-correct=""><div class="para" id="pe2_16-2-2-4-1-1">It is the number of occurrences of the value target in nums.</div></li><li data-component="feedback" id="csawesome2_2_pe2_16-2_opt_d"><div class="para" id="pe2_16-2-2-4-2-1">The variable lenCount is incremented each time the current array element is the same value as the target. It is never reset so it counts the number of occurrences of the value target in nums. The method returns maxLen which is set to lenCount after the loop finishes if lenCount is greater than maxLen.</div></li><li data-component="answer" id="csawesome2_2_pe2_16-2_opt_e"><div class="para" id="pe2_16-2-2-5-1-1">It is the length of the last consecutive block of the value target in nums.</div></li><li data-component="feedback" id="csawesome2_2_pe2_16-2_opt_e"><div class="para" id="pe2_16-2-2-5-2-1">It doesn’t reset the count ever so it just counts all the times the target value appears in the array.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 6.1.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe2_17-11" data-multipleanswers="false"><div class="para" id="pe2_17-11-1-1">11-17: Given the following method declaration, and <code class="code-inline tex2jax_ignore">int[] a = {8, 3, 1}</code>, what is the value in <code class="code-inline tex2jax_ignore">a[1]</code> after <code class="code-inline tex2jax_ignore">m1(a);</code> is run?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static int m1(int[] a)
{
   a[1]--;
   return (a[1] * 2);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe2_17-11_opt_a"><div class="para" id="pe2_17-11-2-1-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_pe2_17-11_opt_a"><div class="para" id="pe2_17-11-2-1-2-1">This would be true if it was return (a[1] *= 2);</div></li><li data-component="answer" id="csawesome2_2_pe2_17-11_opt_b"><div class="para" id="pe2_17-11-2-2-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_pe2_17-11_opt_b"><div class="para" id="pe2_17-11-2-2-2-1">This can’t be true because a[1]--; means the same as a[1] = a[1] - 1; so the 3 changes to 2.  Parameters are all pass by value in Java which means that a copy of the value is passed to a method. But, since an array is an object a copy of the value is a copy of the reference to the object. So changes to objects in methods are permanent.</div></li><li data-component="answer" id="csawesome2_2_pe2_17-11_opt_c"><div class="para" id="pe2_17-11-2-3-1-1">16</div></li><li data-component="feedback" id="csawesome2_2_pe2_17-11_opt_c"><div class="para" id="pe2_17-11-2-3-2-1">This would be true if it was return (a[0] *= 2);</div></li><li data-component="answer" id="csawesome2_2_pe2_17-11_opt_d"><div class="para" id="pe2_17-11-2-4-1-1">7</div></li><li data-component="feedback" id="csawesome2_2_pe2_17-11_opt_d"><div class="para" id="pe2_17-11-2-4-2-1">This would be true if it was a[0]--;</div></li><li data-component="answer" id="csawesome2_2_pe2_17-11_opt_e" data-correct=""><div class="para" id="pe2_17-11-2-5-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_pe2_17-11_opt_e"><div class="para" id="pe2_17-11-2-5-2-1">The statement a[1]--; is the same as a[1] = a[1] - 1; so this will change to 3 to 2.  The return (a[1] * 2) does not change the value at a[1].</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 6.1.18 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe2_18-4" data-multipleanswers="false"><div class="para" id="pe2_18-4-1-1">11-18: At a certain high school students receive letter grades based on the following scale: 93 or above is an A, 84 to 92 inclusive is a B, 75 to 83 inclusive is a C, and below 75 is an F.  Which of the following code segments will assign the correct string to <code class="code-inline tex2jax_ignore">grade</code> for a given integer score?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">I.   if (score &gt;= 93)
        grade = "A";
     if (score &gt;= 84 &amp;&amp; score &lt;= 92)
        grade = "B";
     if (score &gt;= 75 &amp;&amp; score &lt;= 83)
        grade = "C";
     if (score &lt; 75)
        grade = "F";

II.  if (score &gt;= 93)
        grade = "A";
     if (score &gt;= 84)
        grade = "B";
     if (score &gt;= 75)
        grade = "C";
     if (score &lt; 75)
        grade = "F";

III. if (score &gt;= 93)
        grade = "A";
     else if (score &gt;= 84)
        grade = "B";
     else if (score &gt;= 75)
        grade = "C";
     else
        grade = "F";
</code></pre></div><li data-component="answer" id="csawesome2_2_pe2_18-4_opt_a"><div class="para" id="pe2_18-4-2-1-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_pe2_18-4_opt_a"><div class="para" id="pe2_18-4-2-1-2-1">Choice II won’t work since if you had a score of 94 it would first assign the grade to an "A" but then it would execute the next if and change the grade to a "B" and so on until the grade was set to a "C". This could have been fixed by using else if instead of just if.</div></li><li data-component="answer" id="csawesome2_2_pe2_18-4_opt_b"><div class="para" id="pe2_18-4-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_pe2_18-4_opt_b"><div class="para" id="pe2_18-4-2-2-2-1">Choice II won’t work since if you had a score of 94 it would first assign the grade to an "A" but then it would execute the next if and change the grade to a "B" and so on until the grade was set to a "C". This could have been fixed by using else if instead of just if.</div></li><li data-component="answer" id="csawesome2_2_pe2_18-4_opt_c"><div class="para" id="pe2_18-4-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_pe2_18-4_opt_c"><div class="para" id="pe2_18-4-2-3-2-1">Choice III is one of the correct answers. However, choice I is also correct. Choice I uses multiple if’s with logical ands in the conditions to check that the numbers are in range. Choice III uses ifs with else if to make sure that only one conditional is executed.</div></li><li data-component="answer" id="csawesome2_2_pe2_18-4_opt_d" data-correct=""><div class="para" id="pe2_18-4-2-4-1-1">I and III only</div></li><li data-component="feedback" id="csawesome2_2_pe2_18-4_opt_d"><div class="para" id="pe2_18-4-2-4-2-1">Choice I uses multiple if’s with logical ands in the conditions to check that the numbers are in range. Choice Choice II won’t work since if you had a score of 94 it would first assign the grade to an "A" but then it would execute the next if and change the grade to a "B" and so on until the grade was set to a "C". Choice III uses ifs with else if to make sure that only one conditional is executed.</div></li><li data-component="answer" id="csawesome2_2_pe2_18-4_opt_e"><div class="para" id="pe2_18-4-2-5-1-1">I, II, and III</div></li><li data-component="feedback" id="csawesome2_2_pe2_18-4_opt_e"><div class="para" id="pe2_18-4-2-5-2-1">Choice II won’t work since if you had a score of 94 it would first assign the grade to an "A" but then it would execute the next if and change the grade to a "B" and so on until the grade was set to a "C". This could have been fixed by using else if instead of just if.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 6.1.19 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe2_19-8" data-multipleanswers="false"><div class="para" id="pe2_19-8-1-1">11-19: Given the following incomplete class declaration, which of the following can be used to replace the missing code in the <code class="code-inline tex2jax_ignore">advance</code> method so that it will correctly update the time?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class TimeRecord
{
    private int hours;
    private int minutes; // 0&lt;=minutes&lt;60

    public TimeRecord(int h, int m)
    {
        hours = h;
        minutes = m;
    }

    // postcondition: returns the
    // number of hours
    public int getHours()
    {
        /* implementation not shown */
    }

    // postcondition: returns the number
    // of minutes; 0 &lt;= minutes &lt; 60
    public int getMinutes()
    {
        /* implementation not shown */
    }

    // precondition: h &gt;= 0; m &gt;= 0
    // postcondition: adds h hours and
    // m minutes to this TimeRecord
    public void advance(int h, int m)
    {
        hours = hours + h;
        minutes = minutes + m;
        /* missing code */
    }

    // ... other methods not shown
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe2_19-8_opt_a"><div class="para" id="pe2_19-8-2-1-1-1">hours = hours + minutes % 60; minutes = minutes / 60;</div></li><li data-component="feedback" id="csawesome2_2_pe2_19-8_opt_a"><div class="para" id="pe2_19-8-2-1-2-1">This will set hours to hours plus the remainder of dividing minutes by 60 and then set minutes to the number of hours (int division of minutes by 60).</div></li><li data-component="answer" id="csawesome2_2_pe2_19-8_opt_b"><div class="para" id="pe2_19-8-2-2-1-1">minutes = minutes % 60;</div></li><li data-component="feedback" id="csawesome2_2_pe2_19-8_opt_b"><div class="para" id="pe2_19-8-2-2-2-1">This won’t add to hour so it can’t be correct. It will set minutes to the remainder of dividing minutes by 60 so minutes will be set correctly.</div></li><li data-component="answer" id="csawesome2_2_pe2_19-8_opt_c"><div class="para" id="pe2_19-8-2-3-1-1">minutes = minutes + hours % 60;</div></li><li data-component="feedback" id="csawesome2_2_pe2_19-8_opt_c"><div class="para" id="pe2_19-8-2-3-2-1">This will set the minutes to the minutes plus the remainder of dividing the hours by 60.</div></li><li data-component="answer" id="csawesome2_2_pe2_19-8_opt_d" data-correct=""><div class="para" id="pe2_19-8-2-4-1-1">hours = hours + minutes / 60; minutes = minutes % 60;</div></li><li data-component="feedback" id="csawesome2_2_pe2_19-8_opt_d"><div class="para" id="pe2_19-8-2-4-2-1">This will update the hours and minutes correctly. It will add the floor of the division of minutes by 60 to hours and then set minutes to the remainder of the division of minutes by 60.</div></li><li data-component="answer" id="csawesome2_2_pe2_19-8_opt_e"><div class="para" id="pe2_19-8-2-5-1-1">hours = hours + minutes / 60;</div></li><li data-component="feedback" id="csawesome2_2_pe2_19-8_opt_e"><div class="para" id="pe2_19-8-2-5-2-1">This will correctly update the hours, but not update the minutes.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 6.1.20 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe2_20-17" data-multipleanswers="false"><div class="para" id="pe2_20-17-1-1">11-20:  Given the following class declarations, and assuming that the following declaration appears in a client program: <code class="code-inline tex2jax_ignore">Base b = new Derived();</code>, what is the result of the call <code class="code-inline tex2jax_ignore">b.methodOne();</code>?</div> <blockquote class="blockquote" id="pe2_20-17-1-2"><div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Base
{
    public void methodOne()
    {
        System.out.print("A");
        methodTwo();
    }

    public void methodTwo()
    {
        System.out.print("B");
    }
}

public class Derived extends Base
{
    public void methodOne()
    {
        super.methodOne();
        System.out.print("C");
    }

    public void methodTwo()
    {
        super.methodTwo();
        System.out.print("D");
    }
}
</code></pre></div></blockquote><li data-component="answer" id="csawesome2_2_pe2_20-17_opt_a"><div class="para" id="pe2_20-17-2-1-1-1">AB</div></li><li data-component="feedback" id="csawesome2_2_pe2_20-17_opt_a"><div class="para" id="pe2_20-17-2-1-2-1">This would be true if the object was created of type Base using new Base. But the object is really a Derived object. So all methods are looked for starting with the Derived class.</div></li><li data-component="answer" id="csawesome2_2_pe2_20-17_opt_b"><div class="para" id="pe2_20-17-2-2-1-1">ABCD</div></li><li data-component="feedback" id="csawesome2_2_pe2_20-17_opt_b"><div class="para" id="pe2_20-17-2-2-2-1">After the call to methodOne in the super class printing "A", the code continues with the implicit this.methodTwo which resolves from the current object’s class which is Derived. methodTwo in the Derived class is executed which then calls super.methodTwo which invokes printin "B" from methodTwo in the Base class. Then the "D" in the Derive methodTwo is printed. Finally the program returns to methodOne in the Derived class are prints "C".</div></li><li data-component="answer" id="csawesome2_2_pe2_20-17_opt_c" data-correct=""><div class="para" id="pe2_20-17-2-3-1-1">ABDC</div></li><li data-component="feedback" id="csawesome2_2_pe2_20-17_opt_c"><div class="para" id="pe2_20-17-2-3-2-1">Even though b is declared as type Base it is created as an object of the Derived class, so all methods to it will be resolved starting with the Derived class. So the methodOne() in Derived will be called. This method first calls super.methodOne so this will invoke the method in the superclass (which is Base). So next the methodOne in Base will execute. This prints the letter "A" and invokes this.methodTwo(). Since b is really a Derived object, we check there first to see if it has a methodTwo. It does, so execution continues in Derived’s methodTwo. This method invokes super.methodTwo. So this will invoke the method in the super class (Base) named methodTwo. This method prints the letter "B" and then returns. Next the execution returns from the call to the super.methodTwo and prints the letter "D". We return to the Base class methodOne and return from that to the Derived class methodOne and print the letter "C".</div></li><li data-component="answer" id="csawesome2_2_pe2_20-17_opt_d"><div class="para" id="pe2_20-17-2-4-1-1">ABC</div></li><li data-component="feedback" id="csawesome2_2_pe2_20-17_opt_d"><div class="para" id="pe2_20-17-2-4-2-1">The call to methodTwo in super.methodOne is to this.methodTwo which is the method from the Derived class. Consequently the "D" is also printed.</div></li><li data-component="answer" id="csawesome2_2_pe2_20-17_opt_e"><div class="para" id="pe2_20-17-2-5-1-1">Nothing is printed due to infinite recursion.</div></li><li data-component="feedback" id="csawesome2_2_pe2_20-17_opt_e"><div class="para" id="pe2_20-17-2-5-2-1">This is not an example of recursion. No method is called from within itself.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
  </chapter>
  <chapter>
    <id>csawesome2-11</id>
    <title>Preparing for the Exam</title>
    <subchapter>
      <id>UNIQUE-ID-000683</id>
      <title>Preparing for the AP CSA Exam</title>
    </subchapter>
    <subchapter>
      <id>csawesome2-11-3</id>
      <title>Exam 1 for the AP CSA Exam (not timed)</title>
      <question optional="yes">
        <label>Exercise 7.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt1_1" data-multipleanswers="false"><div class="para" id="qtnt1_1-1-1">12-2-1: Which of the following is equivalent to the statement below? Recall DeMorgan’s Law.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">!((a &lt;= b) &amp;&amp; (b &lt; 0))
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt1_1_opt_a"><div class="para" id="qtnt1_1-2-1-1-1">(a &gt;= b) &amp;&amp; (b &gt;= 0)</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_1_opt_a"><div class="para" id="qtnt1_1-2-1-2-1">The "!" would negate everything inside the parentheses. There are a few mistakes here. The opposite of &lt;= is not &gt;= and the opposite of AND is OR.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_1_opt_b"><div class="para" id="qtnt1_1-2-2-1-1">!(a &gt; b) || !(b &gt;= 0)</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_1_opt_b"><div class="para" id="qtnt1_1-2-2-2-1">Both of the expressions inside the parentheses were altered. If we wanted to distribute the negation symbol "!" then we would leave the expressions inside the parentheses alone.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_1_opt_c"><div class="para" id="qtnt1_1-2-3-1-1">(a &gt;= b) || (b &gt; 0)</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_1_opt_c"><div class="para" id="qtnt1_1-2-3-2-1">Negating less than or equals (&lt;=) results in greater than (&gt;). In addition, less than (&lt;) in the second argument should have been changed to greater than or equals (&gt;=).</div></li><li data-component="answer" id="csawesome2_2_qtnt1_1_opt_d" data-correct=""><div class="para" id="qtnt1_1-2-4-1-1">(a &gt; b) || (b &gt;= 0)</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_1_opt_d"><div class="para" id="qtnt1_1-2-4-2-1">Using DeMorgan’s Law we negate everything.  This includes our AND statement (which becomes an OR) and everything inside both parentheses.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_1_opt_e"><div class="para" id="qtnt1_1-2-5-1-1">(a &gt; b) &amp;&amp; (b &gt;= 0)</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_1_opt_e"><div class="para" id="qtnt1_1-2-5-2-1">Here we forgot to negate our AND (&amp;&amp;) into an OR (||).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.2.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt1_2" data-multipleanswers="false"><div class="para" id="qtnt1_2-1-1">12-2-2: Consider the following recursive method. What does <code class="code-inline tex2jax_ignore">mystery(4)</code> return?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public int mystery(int m)
{
  if (m == 1)
  {
      return 3;
  } else
  {
      return 3 * mystery(m - 1);
  }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt1_2_opt_a"><div class="para" id="qtnt1_2-2-1-1-1">9</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_2_opt_a"><div class="para" id="qtnt1_2-2-1-2-1">This would be true if we called mystery(2).</div></li><li data-component="answer" id="csawesome2_2_qtnt1_2_opt_b" data-correct=""><div class="para" id="qtnt1_2-2-2-1-1">81</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_2_opt_b"><div class="para" id="qtnt1_2-2-2-2-1">The argument is 4 so will have 4 recursive calls and then return 3 when we get to mystery(1). Each call will multiply our result by 3, so you can think of this as 3 raised to the 4th power (or 3 * 3 * 3 * 3 = 81).</div></li><li data-component="answer" id="csawesome2_2_qtnt1_2_opt_c"><div class="para" id="qtnt1_2-2-3-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_2_opt_c"><div class="para" id="qtnt1_2-2-3-2-1">This value is returned when we call mystery(1), since 1 is the base case and doesn’t result in a recursive call.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_2_opt_d"><div class="para" id="qtnt1_2-2-4-1-1">243</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_2_opt_d"><div class="para" id="qtnt1_2-2-4-2-1">This value would be returned from mystery(5).</div></li><li data-component="answer" id="csawesome2_2_qtnt1_2_opt_e"><div class="para" id="qtnt1_2-2-5-1-1">27</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_2_opt_e"><div class="para" id="qtnt1_2-2-5-2-1">This value would be returned from mystery(3).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.2.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt1_3" data-multipleanswers="false"><div class="para" id="qtnt1_3-1-1">12-2-3: In which of these cases will an ascending order (from smallest to largest) insertion sort have the fastest run time?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">I.   An array that is in reverse order (from largest to smallest).
II.  An array that is in sorted order already (from smallest to largest).
III. An array that is in random order (not already sorted).
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt1_3_opt_a" data-correct=""><div class="para" id="qtnt1_3-2-1-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_3_opt_a"><div class="para" id="qtnt1_3-2-1-2-1">If an array is already sorted from smallest to largest then we do not need to move anything in the array and we would only need to go through each element at most once, so this is fastest run time for insertion sort.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_3_opt_b"><div class="para" id="qtnt1_3-2-2-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_3_opt_b"><div class="para" id="qtnt1_3-2-2-2-1">An array in reverse order is actually the worst run time for insertion sort because we would need to move everything to make it in order from smallest to largest.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_3_opt_c"><div class="para" id="qtnt1_3-2-3-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_3_opt_c"><div class="para" id="qtnt1_3-2-3-2-1">II is correct, but number I will actually be the worst run time for insertion sort since all values will have to be moved each time through the loop.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_3_opt_d"><div class="para" id="qtnt1_3-2-4-1-1">II and III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_3_opt_d"><div class="para" id="qtnt1_3-2-4-2-1">While II is the correct anwser, an array in random order will have average run time.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_3_opt_e"><div class="para" id="qtnt1_3-2-5-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_3_opt_e"><div class="para" id="qtnt1_3-2-5-2-1">When the array is not sorted the run time will be average.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.2.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt1_4" data-multipleanswers="false"><div class="para" id="qtnt1_4-1-1">12-2-4: Which of these loops will output <code class="code-inline tex2jax_ignore">01234</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int max = 5;

//Loop I
for (int i = 0; i &lt; max; i++)
{
   System.out.print(i);
}


//Loop II
int j = 0;
while (j &lt; max)
{
   System.out.print(j);
   j++;
}


//Loop III
int k = 0;
for (int i = max; i &gt; 0; i--)
{
   System.out.print(i);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt1_4_opt_a"><div class="para" id="qtnt1_4-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_4_opt_a"><div class="para" id="qtnt1_4-2-1-2-1">Loop I will produce this output, but it is not the only loop that will output these values.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_4_opt_b"><div class="para" id="qtnt1_4-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_4_opt_b"><div class="para" id="qtnt1_4-2-2-2-1">Loop II will produce this output, but it is not the only loop that will output these values.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_4_opt_c"><div class="para" id="qtnt1_4-2-3-1-1">II and III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_4_opt_c"><div class="para" id="qtnt1_4-2-3-2-1">Loop II is correct, but loop III will produce the reverse output, 43210.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_4_opt_d" data-correct=""><div class="para" id="qtnt1_4-2-4-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_4_opt_d"><div class="para" id="qtnt1_4-2-4-2-1">Both of these loops will have the correct output. They iterate (and print each value) starting from 0 until the max value which we defined earlier in our code.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_4_opt_e"><div class="para" id="qtnt1_4-2-5-1-1">I, II, and III</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_4_opt_e"><div class="para" id="qtnt1_4-2-5-2-1">While loop I and II will produce the correct output, loop III will actually produce the reverse of the correct output.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.2.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt1_5" data-multipleanswers="false"><div class="para" id="qtnt1_5-1-1">12-2-5: Consider the following block of code. What are the first and last numbers printed after running the code?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int value = 15;
while (value &lt; 30)
{
    value++;
    System.out.println(value);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt1_5_opt_a"><div class="para" id="qtnt1_5-2-1-1-1">First: 15 Last: 29</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_5_opt_a"><div class="para" id="qtnt1_5-2-1-2-1">We add 1 to value before actually printing it, so the first value printed will be 16. The last time through the loop the value will be 29 (less than 30) but then the code will add one so it will print 30.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_5_opt_b"><div class="para" id="qtnt1_5-2-2-1-1">First: 15 Last: 30</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_5_opt_b"><div class="para" id="qtnt1_5-2-2-2-1">We add 1 to value before actually printing it, so the first value printed will be 16.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_5_opt_c"><div class="para" id="qtnt1_5-2-3-1-1">First: 16 Last: 29</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_5_opt_c"><div class="para" id="qtnt1_5-2-3-2-1">The last time through the loop the value will be 29 (less than 30) but then the code will add one so it will print 30.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_5_opt_d" data-correct=""><div class="para" id="qtnt1_5-2-4-1-1">First: 16 Last: 30</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_5_opt_d"><div class="para" id="qtnt1_5-2-4-2-1">The code adds one to value before the value is printed so 16 will be the first value printed.   The last time through the loop the value will be 29 (less than 30) but then the code will add one so it will print 30.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_5_opt_e"><div class="para" id="qtnt1_5-2-5-1-1">First: 16 Last: 28</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_5_opt_e"><div class="para" id="qtnt1_5-2-5-2-1">The last time through the loop the value will be 29 (less than 30) but then the code will add one so it will print 30.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.2.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt1_6" data-multipleanswers="false"><div class="para" id="qtnt1_6-1-1">12-2-6: Consider the following block of code. What value is returned from <code class="code-inline tex2jax_ignore">solution(5)</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public int solution(int limit)
{
  int s = 0;

  for (int outside = 1; outside &lt;= limit; outside++)
  {
      for (int middle = 1; middle &lt;= limit; middle++)
      {
          for (int inside = 1; inside &lt;= limit; inside++)
          {
              s++;
          }
      }
  }
  return s;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt1_6_opt_a"><div class="para" id="qtnt1_6-2-1-1-1">25</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_6_opt_a"><div class="para" id="qtnt1_6-2-1-2-1">This would be correct if we only had one inner for loop, but there are two.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_6_opt_b"><div class="para" id="qtnt1_6-2-2-1-1">15</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_6_opt_b"><div class="para" id="qtnt1_6-2-2-2-1">The outer loop will execute 5 times, each time the outer loop executes the middle loop will execute 5 times, and each time the middle loop executes the inner loop will execute 5 times.  So the answer is 5 * 5 * 5 = 125.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_6_opt_c" data-correct=""><div class="para" id="qtnt1_6-2-3-1-1">125</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_6_opt_c"><div class="para" id="qtnt1_6-2-3-2-1">The number of times a loop executes is (largest value in loop - smallest value in loop + 1) each loop executes (5 - 1 + 1 = 5) times.  When you have nested loops you multiply the number of times each loop executes.  So the result is 5 for the outer loop * 5 for the middle loop * 5 for the innermost loop.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_6_opt_d"><div class="para" id="qtnt1_6-2-4-1-1">64</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_6_opt_d"><div class="para" id="qtnt1_6-2-4-2-1">This would be correct if we called solution(4) or the conditions to stop each loop were just less than, and not less than or equal to.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_6_opt_e"><div class="para" id="qtnt1_6-2-5-1-1">625</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_6_opt_e"><div class="para" id="qtnt1_6-2-5-2-1">If you got this value you probably made one extra call to the each of the loops, notice that the loops start at 1 and not 0.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.2.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt1_7" data-multipleanswers="false"><div class="para" id="qtnt1_7-1-1">12-2-7: Given that both <code class="code-inline tex2jax_ignore">count</code> and <code class="code-inline tex2jax_ignore">n</code> are integer values, which of the following statements is true about both code blocks?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">// Code block I
for (count = 0; count &lt;= n; count++)
{
    System.out.println(count);
}

//Code block II
count = 0;
while (count &lt;= n)
{
    count = count + 1;
    System.out.println(count);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt1_7_opt_a"><div class="para" id="qtnt1_7-2-1-1-1">I and II are exactly equivalent for all input values n.</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_7_opt_a"><div class="para" id="qtnt1_7-2-1-2-1">I and II will never be equivalent because because count is incremented after it is printed in Code block I and before it is printed in Code block II.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_7_opt_b"><div class="para" id="qtnt1_7-2-2-1-1">I and II are only equivalent when n is an even number.</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_7_opt_b"><div class="para" id="qtnt1_7-2-2-2-1">I and II are not equivalent when n is even.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_7_opt_c"><div class="para" id="qtnt1_7-2-3-1-1">I and II are only equivalent when n = 0</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_7_opt_c"><div class="para" id="qtnt1_7-2-3-2-1">When n = 0, Code block I will print out 0, while Code block 2 will print out 1.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_7_opt_d"><div class="para" id="qtnt1_7-2-4-1-1">I and II are equivalent for all values except when n = 0</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_7_opt_d"><div class="para" id="qtnt1_7-2-4-2-1">The code blocks never output the same value.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_7_opt_e" data-correct=""><div class="para" id="qtnt1_7-2-5-1-1">I and II are never going to have the exact same outputs.</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_7_opt_e"><div class="para" id="qtnt1_7-2-5-2-1">I and II will never be equivalent because count is incremented after it is printed in Code block I and before it is printed in Code block II.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.2.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt1_8" data-multipleanswers="false"><div class="para" id="qtnt1_8-1-1">12-2-8: Consider the following class declarations. Which statements are true?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java"> public class Animal
 {
  /* Some code */
 }

 public class Cat extends Animal
 {
    /* Some code */
 }

I. Cat inherits the constructors of Animal
II. Cat cannot add new methods and private instance variables that Animal does not have.
III. Cat can override existing public methods of Animal
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt1_8_opt_a"><div class="para" id="qtnt1_8-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_8_opt_a"><div class="para" id="qtnt1_8-2-1-2-1">A subclass needs to specify its own constructors.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_8_opt_b"><div class="para" id="qtnt1_8-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_8_opt_b"><div class="para" id="qtnt1_8-2-2-2-1">A subclass has the ability to add new methods and variables that are unique to it (meaning its parent class dosen’t contain them)</div></li><li data-component="answer" id="csawesome2_2_qtnt1_8_opt_c" data-correct=""><div class="para" id="qtnt1_8-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_8_opt_c"><div class="para" id="qtnt1_8-2-3-2-1">Subclasses can overide public methods from their parent classes to specialize behavior.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_8_opt_d"><div class="para" id="qtnt1_8-2-4-1-1">I and II</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_8_opt_d"><div class="para" id="qtnt1_8-2-4-2-1">Neither of these statements are true.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_8_opt_e"><div class="para" id="qtnt1_8-2-5-1-1">II and III</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_8_opt_e"><div class="para" id="qtnt1_8-2-5-2-1">Statement III is correct, but not statement II.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.2.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt1_9" data-multipleanswers="false"><div class="para" id="qtnt1_9-1-1">12-2-9: Consider the following code. What is the maximum amount of times that <code class="code-inline tex2jax_ignore">HELLO</code> could possibly be printed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int i = 0; i &lt;= k; i++)
{
   if (arr[i] &lt; someValue)
   {
     System.out.print("HELLO")
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt1_9_opt_a"><div class="para" id="qtnt1_9-2-1-1-1">k</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_9_opt_a"><div class="para" id="qtnt1_9-2-1-2-1">This would be the case if i had the initial value 1 and arr[i] &lt; someValue would be true for all i values.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_9_opt_b" data-correct=""><div class="para" id="qtnt1_9-2-2-1-1">k + 1</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_9_opt_b"><div class="para" id="qtnt1_9-2-2-2-1">If arr[i] &lt; someValue for all i from 0 to k, HELLO will be printed on each iteration of the for loop. The number of times a loop executes is the biggest value in the loop - the smallest value in the loop + 1 (k - 0 + 1 is k + 1).</div></li><li data-component="answer" id="csawesome2_2_qtnt1_9_opt_c"><div class="para" id="qtnt1_9-2-3-1-1">k - 1</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_9_opt_c"><div class="para" id="qtnt1_9-2-3-2-1">This would be the case if i had the initial value 2 and arr[i] &lt; someValue would be true for all i values.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_9_opt_d"><div class="para" id="qtnt1_9-2-4-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_9_opt_d"><div class="para" id="qtnt1_9-2-4-2-1">This would be the case if only one element in the array would fulfill the condition that arr[i] &lt; someValue.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_9_opt_e"><div class="para" id="qtnt1_9-2-5-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_9_opt_e"><div class="para" id="qtnt1_9-2-5-2-1">This is the minimum number of times that HELLO could be executed.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.2.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt1_10" data-multipleanswers="false"><div class="para" id="qtnt1_10-1-1">12-2-10: When will the method <code class="code-inline tex2jax_ignore">stringRecursion</code> produce a run time error?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public void stringRecursion(String s)
{

  if (s.length() &lt; 16)
  {
    System.out.println(s);
  }
  stringRecursion(s + "*");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt1_10_opt_a"><div class="para" id="qtnt1_10-2-1-1-1">It will never produce a run time error.</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_10_opt_a"><div class="para" id="qtnt1_10-2-1-2-1">Since there is no terminating condition surrounding our recursive method call (because the call lies outside of the if statement), it will keep doing recursive calls until we eventually get a run time error.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_10_opt_b" data-correct=""><div class="para" id="qtnt1_10-2-2-1-1">It will always produce a run time error.</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_10_opt_b"><div class="para" id="qtnt1_10-2-2-2-1">Since there is no statement that terminates the recursive call to stringRecursion (the length of the string s will increase until it is greater than 16, but the recursive call will keep happening because the recursive call is outside the if statement) the computer will keep doing recurisve calls until it runs out of memory and a run time error will happen.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_10_opt_c"><div class="para" id="qtnt1_10-2-3-1-1">Only when the length of the input string is greater than or equal to 16.</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_10_opt_c"><div class="para" id="qtnt1_10-2-3-2-1">Since the recursive call is outside the condition and the conditional doesn’t include a return then this will result in infinite recursion and eventually a run time error.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_10_opt_d"><div class="para" id="qtnt1_10-2-4-1-1">Only when an empty string is input.</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_10_opt_d"><div class="para" id="qtnt1_10-2-4-2-1">The length of the string will not matter in this case because the recursive call to stringRecursion will always happen, since the recursive call lies outside the body of the conditional. The string length will only determine if the string s is printed out to the console or not.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_10_opt_e"><div class="para" id="qtnt1_10-2-5-1-1">Whenever the input string length is less than 16.</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_10_opt_e"><div class="para" id="qtnt1_10-2-5-2-1">We will get run time errors regardless of the length of the string s. This is due to the fact that the recursive call lies outside the body of the conditional. If the length of the string s is less than 16 then we will get something printed out to the console until the length of s becomes greater than 16, and then we will continue in a infinite recursion.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.2.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt1_11" data-multipleanswers="false"><div class="para" id="qtnt1_11-1-1">12-2-11: Consider the following class definitions. Which of I, II and III below would cause an error when used in place of the missing code in the main method?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class A
{
  public void method1() { };
}

public class B extends A
{
    // Instance variables and other methods not shown

    public void method1()
    {
      /* implementation not shown */
    }
}

public class C extends B
{
  //Instance variables and other methods not shown

  public void method2(C o)
  {
     /* implementation not shown */
  }

  public static void main(String[] args)
  {
    C objectC = new C();
    B objectB = new B();
    // Missing code
  }
}

I objectC.method1();
II objectB.method2(objectC);
III objectC.method2(objectB);
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt1_11_opt_a"><div class="para" id="qtnt1_11-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_11_opt_a"><div class="para" id="qtnt1_11-2-1-2-1">This method call compiles because class C inherits all the public methods in class B. This will not produce an error.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_11_opt_b"><div class="para" id="qtnt1_11-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_11_opt_b"><div class="para" id="qtnt1_11-2-2-2-1">Method II will produce a compile time error because class B (the superclass) does not inherit the methods of class C due to the fact that class C is its subclass. But, it is not the only call that will result in a compile time error.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_11_opt_c" data-correct=""><div class="para" id="qtnt1_11-2-3-1-1">II and III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_11_opt_c"><div class="para" id="qtnt1_11-2-3-2-1">Method II will produce a compile time error because class B (the superclass) does not inherit the methods of class C due to the fact that class C is its subclass. Method III will produce an error because of the parameter it takes in. objectB is not a class C type object which is what the method definition for method III required.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_11_opt_d"><div class="para" id="qtnt1_11-2-4-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_11_opt_d"><div class="para" id="qtnt1_11-2-4-2-1">This method produces a compile time error, but method II will also produce a compile time error.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_11_opt_e"><div class="para" id="qtnt1_11-2-5-1-1">I, II and III</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_11_opt_e"><div class="para" id="qtnt1_11-2-5-2-1">Methods II and III will both produce compile time errors, but method I works because class C inherits all the public methods of class B.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.2.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt1_12" data-multipleanswers="false"><div class="para" id="qtnt1_12-1-1">12-2-12: Which of these declarations will <em class="emphasis">not</em> cause an error?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">I ArrayList&lt;String&gt; stringList = new List&lt;String&gt;();
II ArrayList&lt;int&gt; intList = new ArrayList&lt;int&gt;();
III ArrayList&lt;String&gt; stringList = new ArrayList&lt;String&gt;();
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt1_12_opt_a"><div class="para" id="qtnt1_12-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_12_opt_a"><div class="para" id="qtnt1_12-2-1-2-1">Use type ArrayList to create the object, not List.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_12_opt_b"><div class="para" id="qtnt1_12-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_12_opt_b"><div class="para" id="qtnt1_12-2-2-2-1">The type parameter in a generic ArrayList must be a class type, not a primitive type. int is a primitive type.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_12_opt_c" data-correct=""><div class="para" id="qtnt1_12-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_12_opt_c"><div class="para" id="qtnt1_12-2-3-2-1">Correct.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_12_opt_d"><div class="para" id="qtnt1_12-2-4-1-1">II and III</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_12_opt_d"><div class="para" id="qtnt1_12-2-4-2-1">III is correct, but II will cause a compile time error since we cannot use a primitive (int) as the type parameter in a generic ArrayList.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_12_opt_e"><div class="para" id="qtnt1_12-2-5-1-1">I and II</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_12_opt_e"><div class="para" id="qtnt1_12-2-5-2-1">Both of these solutions will cause an error.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.2.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt1_14" data-multipleanswers="false"><div class="para" id="qtnt1_14-1-1">12-2-13: Suppose that the following method takes in a two dimensional array called <code class="code-inline tex2jax_ignore">matrix</code>. After the method call <code class="code-inline tex2jax_ignore">printMatrix(matrix)</code> what will the output be? Possible options are listed below the method definition.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">/* assume that matrix has the following values */
7654
3210
4567
0123

public static void printMatrix(int[][] matrix)
{
  for (int i = 0; i &lt; matrix.length; i++)
  {

    for (int t = 0; t &lt; i; t++)
    {
      System.out.print(matrix[i][t]);
    }
    System.out.println();
  }
}

Possible output:

I.
7654
3210
4567
0123

II.
7
32
456
0123

III.
3
45
012

IV.
7
3
4
0
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt1_14_opt_a"><div class="para" id="qtnt1_14-2-1-1-1">I</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_14_opt_a"><div class="para" id="qtnt1_14-2-1-2-1">Since the inside for loop starts with t = 0  and continues while t &lt; i (and i begins at 0) it will not be print out every single element of the 4x4 matrix.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_14_opt_b"><div class="para" id="qtnt1_14-2-2-1-1">II</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_14_opt_b"><div class="para" id="qtnt1_14-2-2-2-1">This anwser is not correct because our inside for loop will start with t = 0 and loop while t &lt; i and, as such, the entire first row of our matrix will be ignored, since both t and i = 0 and t is not less than i.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_14_opt_c" data-correct=""><div class="para" id="qtnt1_14-2-3-1-1">III</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_14_opt_c"><div class="para" id="qtnt1_14-2-3-2-1">When i = 0, the inner for loop does not get executed and the entire first row of the matrix is ignored. When i = 1 t goes from 0 to 0 and the element matrix[1][0] will be printed out. Similarly, when i = 2 we will print out elements matrix[2][0] and matrix[2][1]. Finally, when i = 3, we will print out matrix[3][0], matrix[3][1] and matrix[3][2].</div></li><li data-component="answer" id="csawesome2_2_qtnt1_14_opt_d"><div class="para" id="qtnt1_14-2-4-1-1">IV</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_14_opt_d"><div class="para" id="qtnt1_14-2-4-2-1">This would be the correct anwser if we kept incrementing i by one (the outer for loop) but the inner for variable t would always be 0. We would get the first element of each row.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_14_opt_e"><div class="para" id="qtnt1_14-2-5-1-1">An ArrayIndexOutOfBoundsException will be thrown.</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_14_opt_e"><div class="para" id="qtnt1_14-2-5-2-1">We will not get an index out of bounds exception since we made sure to increment i only until the max length of the array and the other variable we use to index, t, will only increase while it is still less than i.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.2.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt1_15" data-multipleanswers="false"><div class="para" id="qtnt1_15-1-1">12-2-14: If randomList is an <code class="code-inline tex2jax_ignore">ArrayList</code> of <code class="code-inline tex2jax_ignore">Integer</code> objects and is initially set to {0, 1, 2, 3}, what will randomList look like after the following code is executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">randomList.add(5);
randomList.add(7);
int randomNum = randomList.get(2);
randomList.remove(2);
randomList.add(randomNum, 4);
randomList.set(1, 8);
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt1_15_opt_a"><div class="para" id="qtnt1_15-2-1-1-1">[0, 1, 2, 3, 5, 7]</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_15_opt_a"><div class="para" id="qtnt1_15-2-1-2-1">This is what the ArrayList will look like after the first two operations in the code.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_15_opt_b"><div class="para" id="qtnt1_15-2-2-1-1">[0, 1, 4, 3, 5, 7]</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_15_opt_b"><div class="para" id="qtnt1_15-2-2-2-1">This is what the ArrayList will look like before we set the element at index 1 to be 8.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_15_opt_c"><div class="para" id="qtnt1_15-2-3-1-1">[0, 8, 3, 4, 5, 7]</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_15_opt_c"><div class="para" id="qtnt1_15-2-3-2-1">This is what would have happened if we thought randomNum was actually 3 and we added the number 4 at the incorrect index.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_15_opt_d" data-correct=""><div class="para" id="qtnt1_15-2-4-1-1">[0, 8, 4, 3, 5, 7]</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_15_opt_d"><div class="para" id="qtnt1_15-2-4-2-1">After we add 5 and 7 to the end of the array we remove the element at index 2 (which was 2). Then we use the index we had previously obtained (also 2) to add a new element 4. This pushes the element already at that index (and the ones after it) one space to the right. Fianlly, we set the element at index 1 to be 8. This sets the value at index 1 to 8.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_15_opt_e"><div class="para" id="qtnt1_15-2-5-1-1">[5, 7, 0, 8, 4, 3]</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_15_opt_e"><div class="para" id="qtnt1_15-2-5-2-1">This is what we would have happened if we thought the add method would add elements to the beggining of the ArrayList and not the end.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.2.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt1_16" data-multipleanswers="false"><div class="para" id="qtnt1_16-1-1">12-2-15: Consider the following code segment. What will be printed as a result of executing the code below?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String str = "fedcba";
int counter = 0;
while(counter &lt; str.length() - 1)
{
  System.out.print(str.substring(counter + 1, counter + 2));
  counter++;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt1_16_opt_a" data-correct=""><div class="para" id="qtnt1_16-2-1-1-1">edcba</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_16_opt_a"><div class="para" id="qtnt1_16-2-1-2-1">The substring method takes two arguments, a start index (which is inclusive) and an end index (which is exclusive). The first substring is from index 1 (counter + 1) to index 2 (counter + 2). However the second index is not included so its just index 1 which is e. We then simply keep getting every indidual element from the string one by one until the end of the string.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_16_opt_b"><div class="para" id="qtnt1_16-2-2-1-1">edcb</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_16_opt_b"><div class="para" id="qtnt1_16-2-2-2-1">This substring is mostly correct but it ends early and is missing the a character at the end.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_16_opt_c"><div class="para" id="qtnt1_16-2-3-1-1">Nothing is printed because an IndexOutOfBoundsException is thrown.</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_16_opt_c"><div class="para" id="qtnt1_16-2-3-2-1">Even though the end of the substring is specified as index counter + 2, which will be past the end of the string the last time through the loop, substring doesn’t include the value at the end index, so the code will execute.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_16_opt_d"><div class="para" id="qtnt1_16-2-4-1-1">feeddccbba</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_16_opt_d"><div class="para" id="qtnt1_16-2-4-2-1">The first substring element has a start value of index 1 and so f will not be printed out. Also because each substring is a single character, no character will be repeated in the substring.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_16_opt_e"><div class="para" id="qtnt1_16-2-5-1-1">fededcdcbcba</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_16_opt_e"><div class="para" id="qtnt1_16-2-5-2-1">This is what we would have happened if the substring had started at index counter (and not index counter + 1).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.2.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt1_17" data-multipleanswers="false"><div class="para" id="qtnt1_17-1-1">12-2-16: Consider the following class declarations. Which of the following statements will not compile?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class B
{

    public int myValue;

    public B()
    {
        myValue = 0;
    }

    public B(int x)
    {
        myValue = x;
    }
}

public class C extends B
{

    public C()
    {
        super(0);
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt1_17_opt_a"><div class="para" id="qtnt1_17-2-1-1-1">C c1 = new C();</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_17_opt_a"><div class="para" id="qtnt1_17-2-1-2-1">Here we are simply creating a new instance of class C by calling the appropiate constructor. Nothing is wrong here.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_17_opt_b"><div class="para" id="qtnt1_17-2-2-1-1">B b1 = new B();</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_17_opt_b"><div class="para" id="qtnt1_17-2-2-2-1">Here we are simply creating a new instance of class B by calling the appropiate constructor. Nothing is wrong here.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_17_opt_c"><div class="para" id="qtnt1_17-2-3-1-1">B c2 = new C();</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_17_opt_c"><div class="para" id="qtnt1_17-2-3-2-1">Since class C is a subclass of class B, you can upcast an object of type C to be of type B.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_17_opt_d"><div class="para" id="qtnt1_17-2-4-1-1">B b3 = new B(10);</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_17_opt_d"><div class="para" id="qtnt1_17-2-4-2-1">This statement is creating a new object using the second constructor of the B class. This is also a valid way to create a B object.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_17_opt_e" data-correct=""><div class="para" id="qtnt1_17-2-5-1-1">C c3 = new C(24);</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_17_opt_e"><div class="para" id="qtnt1_17-2-5-2-1">Even though class C has a super class with a constructor that takes in a single int argument, class C does not have a constructor that takes an int value.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.2.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt1_18" data-multipleanswers="false"><div class="para" id="qtnt1_18-1-1">12-2-17: Consider the following method.  Assume that <code class="code-inline tex2jax_ignore">String s = "rain";</code> and <code class="code-inline tex2jax_ignore">int b = 4;</code> have been executed.  What are the values of <code class="code-inline tex2jax_ignore">s</code> and <code class="code-inline tex2jax_ignore">b</code> after <code class="code-inline tex2jax_ignore">test(s,b)</code> is executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static void test(String str, int y)
{
   str = str + "bow";
   y = y * 2;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt1_18_opt_a"><div class="para" id="qtnt1_18-2-1-1-1">s="rainbow"; b=8;</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_18_opt_a"><div class="para" id="qtnt1_18-2-1-2-1">Strings are immutable so changing str doesn’t affect the string that s refers to.  The value of b also will not change since Java passes a copy of the value.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_18_opt_b"><div class="para" id="qtnt1_18-2-2-1-1">s="rain";  b=8;</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_18_opt_b"><div class="para" id="qtnt1_18-2-2-2-1">Java copies the value of primitive types when they are passed to methods so nothing done in the method test affects the value of b.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_18_opt_c"><div class="para" id="qtnt1_18-2-3-1-1">s="rainbow"; b=4;</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_18_opt_c"><div class="para" id="qtnt1_18-2-3-2-1">Strings are immutable so changing str doesn’t affect the string that s refers to.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_18_opt_d" data-correct=""><div class="para" id="qtnt1_18-2-4-1-1">s="rain"; b=4;</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_18_opt_d"><div class="para" id="qtnt1_18-2-4-2-1">Since strings are immutable any change returns a new string and doesn’t affect what s refers to.  Also the value of primitive types are copied and nothing done in test affects the orignal primitive value.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_18_opt_e"><div class="para" id="qtnt1_18-2-5-1-1">s="bow";  b=4;</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_18_opt_e"><div class="para" id="qtnt1_18-2-5-2-1">The string that s refers to is not changed by the test method.  All changes to string result in a new string object.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.2.18 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt1_19" data-multipleanswers="false"><div class="para" id="qtnt1_19-1-1">12-2-18: Which of the following is/are true about using insertion sort versus using merge sort?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">I. Insertion sort requires more storage space than mergesort.
II. Insertion sort is only more efficient than mergesort in the case that we have a very small and nearly sorted array.
III. Insertion sort is almost always less efficient than mergesort.
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt1_19_opt_a"><div class="para" id="qtnt1_19-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_19_opt_a"><div class="para" id="qtnt1_19-2-1-2-1">Merge sort often uses a temporary array when merging arrays, which means it actually uses more storage space than insertion sort.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_19_opt_b"><div class="para" id="qtnt1_19-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_19_opt_b"><div class="para" id="qtnt1_19-2-2-2-1">Insertion sort is more efficient for a small array because merge sort has extra overhead from the recursive function calls that cause it to take longer.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_19_opt_c"><div class="para" id="qtnt1_19-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_19_opt_c"><div class="para" id="qtnt1_19-2-3-2-1">Merge sort uses the "divide and conquer" approach to sort an array. This will end up being more efficient than insertion sort in the case where we have a long unordered array.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_19_opt_d"><div class="para" id="qtnt1_19-2-4-1-1">I and III</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_19_opt_d"><div class="para" id="qtnt1_19-2-4-2-1">Statement III is true but statement I is false since mergesort often utilizes a temporary array and will actually require more storage space than insertion sort.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_19_opt_e" data-correct=""><div class="para" id="qtnt1_19-2-5-1-1">II and III</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_19_opt_e"><div class="para" id="qtnt1_19-2-5-2-1">Merge sort uses the "divide and conquer" approach to sort an array. This will end up being more efficient than insertion sort in the case where we have long unordered array. However if we have a very small almost sorted array, then insertion sort will outperform merge sort.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.2.19 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt1_20" data-multipleanswers="false"><div class="para" id="qtnt1_20-1-1">12-2-19: What would the contents of <code class="code-inline tex2jax_ignore">matrix</code>, a 2-D array of integers, be after a call to <code class="code-inline tex2jax_ignore">alter(1)</code>? The method alter is defined below.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">  private int[][] matrix;

  /* matrix looks like this initially
  1 3 5 7
  2 4 6 8
  3 5 7 9
  */

  public void alter(int c)
  {
    for (int i = 0; i &lt; matrix.length; i++)
    {
      for (int j = c + 1; j &lt; matrix[0].length; j++)
      {
        matrix[i][j - 1] = matrix[i][j];
      }
    }
  }


I. 1 7 7 7
   2 8 8 8
   3 9 9 9

II. 1 5 7
    2 6 8
    3 7 9

III. 1 3 5 7
     3 5 7 9

IV. 1 3 5 7
    3 5 7 9
    3 5 7 9

V. 1 5 7 7
   2 6 8 8
   3 7 9 9
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt1_20_opt_a"><div class="para" id="qtnt1_20-2-1-1-1">I</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_20_opt_a"><div class="para" id="qtnt1_20-2-1-2-1">The method alter shifts the values in the columns starting at column c + 1 and shifting back to entry to the left of c + 1. This matrix is what would result if c was three and we were shifitng the number there to the two spots before it.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_20_opt_b"><div class="para" id="qtnt1_20-2-2-1-1">II</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_20_opt_b"><div class="para" id="qtnt1_20-2-2-2-1">Although some numbers are overwriten in the matrix, the matrix will still be 3x4 matrix.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_20_opt_c"><div class="para" id="qtnt1_20-2-3-1-1">III</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_20_opt_c"><div class="para" id="qtnt1_20-2-3-2-1">Although some numbers are overwriten in the matrix, the matrix will still be 3x4 matrix.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_20_opt_d"><div class="para" id="qtnt1_20-2-4-1-1">IV</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_20_opt_d"><div class="para" id="qtnt1_20-2-4-2-1">This is what would happen if we were shifting rows instead of columns in the alter method.</div></li><li data-component="answer" id="csawesome2_2_qtnt1_20_opt_e" data-correct=""><div class="para" id="qtnt1_20-2-5-1-1">V</div></li><li data-component="feedback" id="csawesome2_2_qtnt1_20_opt_e"><div class="para" id="qtnt1_20-2-5-2-1">Method alter shifts the values in the columns, starting at column c + 1, one column to the left. It also overwrites column c. Here are the replacements made for the method call alter(1): matrix[0][1] = matrix[0][2], matrix[0][2] = matrix[0][3], matrix[1][1] = matrix[1][2], matrix[1][2] = matrix[1][3], matrix[2][1] = matrix[2][2], matrix[2][2] = matrix[2][3]</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-11-4</id>
      <title>Exam 2 for the AP CSA Exam (not timed)</title>
      <question optional="yes">
        <label>Exercise 7.3.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt2_1" data-multipleanswers="false"><div class="para" id="qtnt2_1-1-1">12-3-1: Consider the <code class="code-inline tex2jax_ignore">Animal</code>, <code class="code-inline tex2jax_ignore">Fish</code>, and <code class="code-inline tex2jax_ignore">Goldfish</code> classes shown below.  Which of the following object declarations will compile without error?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Animal
{
    /* no constructors or other methods have been declared */
}

public class Fish extends Animal
{
    /* no constructors or other methods have been declared */
}

public class Goldfish extends Fish
{
    /* no constructors or other methods have been declared */
}

I. Goldfish glub = new Fish();

II. Animal glub = new Fish();

III. Fish glub = new Goldfish();
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt2_1_opt_a"><div class="para" id="qtnt2_1-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_1_opt_a"><div class="para" id="qtnt2_1-2-1-2-1">A Fish is NOT a type of Goldfish. The Fish class does not inherit from the Goldfish class, so a Fish cannot be instantiated as a Goldfish object.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_1_opt_b"><div class="para" id="qtnt2_1-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_1_opt_b"><div class="para" id="qtnt2_1-2-2-2-1">II is correct, but III is correct as well. A Goldfish IS-A type of Fish, and a Fish IS-A type of Animal.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_1_opt_c"><div class="para" id="qtnt2_1-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_1_opt_c"><div class="para" id="qtnt2_1-2-3-2-1">III is correct, but II is correct as well. A Goldfish IS-A type of Fish, and a Fish IS-A type of Animal.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_1_opt_d"><div class="para" id="qtnt2_1-2-4-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_1_opt_d"><div class="para" id="qtnt2_1-2-4-2-1">II is correct, but a Fish is NOT a type of Goldfish. A Fish cannot be instantiated as a Goldfish object, because the Fish class does not inherit from the Goldfish class.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_1_opt_e" data-correct=""><div class="para" id="qtnt2_1-2-5-1-1">II and III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_1_opt_e"><div class="para" id="qtnt2_1-2-5-2-1">A Goldfish IS-A type of Fish, and a Fish IS-A type of Animal. The Goldfish class inherits from the Fish class, and the Fish class inherits from the Animal class.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.3.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt2_2" data-multipleanswers="false"><div class="para" id="qtnt2_2-1-1">12-3-2: Assume that <code class="code-inline tex2jax_ignore">list</code> has been instantiated as an ArrayList of integers containing <code class="code-inline tex2jax_ignore">[6, 2, 9]</code> . What are the contents of <code class="code-inline tex2jax_ignore">list</code> after the code is executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">list.remove(2);
list.add(1, 4);
list.add(5);
list.set(2, 7);
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt2_2_opt_a"><div class="para" id="qtnt2_2-2-1-1-1">[6, 2, 7, 5]</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_2_opt_a"><div class="para" id="qtnt2_2-2-1-2-1">When the add method is used with two parameters, the value is added at the specific index, not at the end of the list. In this list, 4 has been added at index 1.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_2_opt_b"><div class="para" id="qtnt2_2-2-2-1-1">[6, 4, 2, 7, 5]</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_2_opt_b"><div class="para" id="qtnt2_2-2-2-2-1">This would be correct if 7 had been placed in the list using add, not set. Remember that the set method replaces the value at the index. It does not move the previous value to the right.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_2_opt_c"><div class="para" id="qtnt2_2-2-3-1-1">[4, 7, 9, 5]</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_2_opt_c"><div class="para" id="qtnt2_2-2-3-2-1">Remember that in ArrayLists, indexing starts at 0, not 1.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_2_opt_d" data-correct=""><div class="para" id="qtnt2_2-2-4-1-1">[6, 4, 7, 5]</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_2_opt_d"><div class="para" id="qtnt2_2-2-4-2-1">The 9 at index 2 is removed, resulting in [6, 2], then a 4 is added at index 1 resulting in [6, 4, 2]. A 5 is added to the end of the list resulting in [6,4,2,5], and the value at 2 is replaced with a 7 resulting in [6,4,7,5].</div></li><li data-component="answer" id="csawesome2_2_qtnt2_2_opt_e"><div class="para" id="qtnt2_2-2-5-1-1">[4, 7, 6, 9, 5]</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_2_opt_e"><div class="para" id="qtnt2_2-2-5-2-1">Remember that in ArrayLists, indexing starts at 0, not 1. The set method replaces the value at the specified index with a new value, so the original value is deleted.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.3.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt2_3" data-multipleanswers="false">
                <div class="para" id="qtnt2_3-1-1">12-3-3: A sorted array of integers containing 2000 elements is to be searched for <code class="code-inline tex2jax_ignore">key</code> using a binary search method. Assuming <code class="code-inline tex2jax_ignore">key</code> is in the array, what is the maximum number of iterations needed to find <code class="code-inline tex2jax_ignore">key</code>?</div>
                <li data-component="answer" id="csawesome2_2_qtnt2_3_opt_a">
                  <div class="para" id="qtnt2_3-2-1-1-1">8</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt2_3_opt_a">
                  <div class="para" id="qtnt2_3-2-1-2-1">2 ^ 8 = 256. There will not be enough passes to guarantee finding the value. Remember that binary search requires log2 (number of elements) passes to guarantee that a value will be found.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt2_3_opt_b">
                  <div class="para" id="qtnt2_3-2-2-1-1">10</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt2_3_opt_b">
                  <div class="para" id="qtnt2_3-2-2-2-1">2 ^ 10 = 1024. There will not be enough passes to guarantee finding the value. Remember that binary search requires log2 (number of elements) passes to guarantee that a value will be found.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt2_3_opt_c">
                  <div class="para" id="qtnt2_3-2-3-1-1">100</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt2_3_opt_c">
                  <div class="para" id="qtnt2_3-2-3-2-1">The key will be found in 100 passes, but there is a better answer. Remember that binary search requires log2 (number of elements) passes to find a value.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt2_3_opt_d">
                  <div class="para" id="qtnt2_3-2-4-1-1">2000</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt2_3_opt_d">
                  <div class="para" id="qtnt2_3-2-4-2-1">With binary search, every element of the array does not have to be checked. Remember that although sequential search would require 2000 passes to guarantee the value was found, binary search requires log2 (number of elements) passes to find an object.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt2_3_opt_e" data-correct="">
                  <div class="para" id="qtnt2_3-2-5-1-1">11</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt2_3_opt_e">
                  <div class="para" id="qtnt2_3-2-5-2-1">2 ^ 11 = 2048. Because 2048 is larger than 2000, 11 passes will be more than enough to guarantee finding the value.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.3.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt2_4" data-multipleanswers="false"><div class="para" id="qtnt2_4-1-1">12-3-4: Which of the following code segments creates a 7 x 9 array of integers and fills every space in the array with multiples of two (not including the value 0)?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">I.   int[][] arr = new int [7][9];

II.  int[][] arr = new int [7][9];
     int count = 1;

     for(int i = 0; i &lt; arr.length; i++)
     {
        for(int j = 0; j &lt; arr[0].length; j++)
        {
           arr[i][j] = count * 2;
           count++;
        }
     }

III. int[][] arr = new int [7][9];
     int count = 1;
     int row = 0;
     int col = 0;

     while (row &lt; arr.length &amp;&amp; col &lt; arr[0].length)
     {
        arr[row][col] = count * 2;
        row++;
        col++;
        count++;
     }
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt2_4_opt_a"><div class="para" id="qtnt2_4-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_4_opt_a"><div class="para" id="qtnt2_4-2-1-2-1">I correctly creates the 7 x 9 matrix, but every value in the matrix remains 0.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_4_opt_b" data-correct=""><div class="para" id="qtnt2_4-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_4_opt_b"><div class="para" id="qtnt2_4-2-2-2-1">II correctly creates and fills the matrix with multiples of 2.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_4_opt_c"><div class="para" id="qtnt2_4-2-3-1-1">II and III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_4_opt_c"><div class="para" id="qtnt2_4-2-3-2-1">II is correct, but III does not fill every space correctly. Only diagonal spaces are filled, so most of the spaces are still filled with 0 at the end of the loop. Notice that every time the while loop cycles, the values of row and col both increase.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_4_opt_d"><div class="para" id="qtnt2_4-2-4-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_4_opt_d"><div class="para" id="qtnt2_4-2-4-2-1">II is correct, but I does not fill the matrix.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_4_opt_e"><div class="para" id="qtnt2_4-2-5-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_4_opt_e"><div class="para" id="qtnt2_4-2-5-2-1">III does not fill every space correctly. Only spaces lying on the diagonal are filled because the row and column index change at the same time, and the values are incorrect. Most of the spaces remain filled with 0. Notice that every time the while loop cycles, the values of row and col both increase.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.3.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt2_5" data-multipleanswers="false"><div class="para" id="qtnt2_5-1-1">12-3-5: Consider the method <code class="code-inline tex2jax_ignore">printString</code> shown below. What is printed as a result of printString(“sandwich”)?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public void printString(String s)
{
   if (s.length() &gt; 0)
   {
      printString(s.substring(1));
      System.out.print(s.substring(0, 1));
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt2_5_opt_a" data-correct=""><div class="para" id="qtnt2_5-2-1-1-1">hciwdnas</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_5_opt_a"><div class="para" id="qtnt2_5-2-1-2-1">The recursive call occurs until the length of s equals 0, then the letters of the word are printed in reverse order.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_5_opt_b"><div class="para" id="qtnt2_5-2-2-1-1">sandwich</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_5_opt_b"><div class="para" id="qtnt2_5-2-2-2-1">This would occur if the print statement came before the recursive call. Because the compiler works through the recursive call before moving to the other statements, the letters are printed in reverse order.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_5_opt_c"><div class="para" id="qtnt2_5-2-3-1-1">andwichandwichndwichdwichwichichchh</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_5_opt_c"><div class="para" id="qtnt2_5-2-3-2-1">This would occur if the print statement came before the recursive call and included s.substring(1), not s.substring(0, 1). The statements are printed after the recursive call is made, so the compiler works through every recursive call before it prints out the letters, and the letters are printed in reverse order.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_5_opt_d"><div class="para" id="qtnt2_5-2-4-1-1">hchichwichdwichndwichandwich</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_5_opt_d"><div class="para" id="qtnt2_5-2-4-2-1">This would occur if the print statement included s.substring(1). Each call of the printString method prints only one letter at a time, because the substring that is printed is s.substring(0,1).</div></li><li data-component="answer" id="csawesome2_2_qtnt2_5_opt_e"><div class="para" id="qtnt2_5-2-5-1-1">Nothing is printed because an infinite loop occurs</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_5_opt_e"><div class="para" id="qtnt2_5-2-5-2-1">This method ends when s.length() equals zero, so the base case is reached after eight passes for the word "sandwich". An infinite loop will not occur.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.3.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt2_6" data-multipleanswers="false"><div class="para" id="qtnt2_6-1-1">12-3-6: The Dog class is shown below. The GoldenRetriever class inherits from the Dog class. Which methods does the GoldenRetriever class inherit?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Dog
{
   private int numLegs = 4;
   private String name = "Spot";

   public Dog(String theName)
   {
      /* implementation not shown */
   }

   public String bark()
   {
     return "Woof!";
   }

   public String getName()
   {
      return name;
   }
}

I. public Dog(String theName)

II. bark()

III. getName()
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt2_6_opt_a"><div class="para" id="qtnt2_6-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_6_opt_a"><div class="para" id="qtnt2_6-2-1-2-1">Remember that subclasses do not inherit constructors from the parent class.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_6_opt_b"><div class="para" id="qtnt2_6-2-2-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_6_opt_b"><div class="para" id="qtnt2_6-2-2-2-1">II is correct, but constructors are not inherited.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_6_opt_c"><div class="para" id="qtnt2_6-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_6_opt_c"><div class="para" id="qtnt2_6-2-3-2-1">III is correct, but remember that all public methods are inherited by the subclass.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_6_opt_d" data-correct=""><div class="para" id="qtnt2_6-2-4-1-1">II and III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_6_opt_d"><div class="para" id="qtnt2_6-2-4-2-1">Subclasses inherit public methods from the parent class, but they do not inherit constructors.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_6_opt_e"><div class="para" id="qtnt2_6-2-5-1-1">I, II, and III</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_6_opt_e"><div class="para" id="qtnt2_6-2-5-2-1">Constructors are not inherited from the parent class. II and III are correct, but GoldenRetriever would not inherit the constructor.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.3.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt2_7" data-multipleanswers="false"><div class="para" id="qtnt2_7-1-1">12-3-7: Which of these loops will output <code class="code-inline tex2jax_ignore">02468</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">I. for (int i = 0; i &lt;= 8; i++)
   {
      System.out.print(i);
   }

II. int i = 0;
    while (i &lt; 8)
    {
       i +=2;
       System.out.print(i);
    }

III. for (int i = 0; i &lt;= 8; i +=2)
     {
        System.out.print(i);
     }
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt2_7_opt_a"><div class="para" id="qtnt2_7-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_7_opt_a"><div class="para" id="qtnt2_7-2-1-2-1">Notice the incrementing in the for loop. The value i increments by 1, not by 2, so "012345678" is printed.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_7_opt_b"><div class="para" id="qtnt2_7-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_7_opt_b"><div class="para" id="qtnt2_7-2-2-2-1">Notice the order of the incrementing and the print statement in the while loop. The value i increments before it is printed. The code never prints out 0, so "2468" is printed.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_7_opt_c" data-correct=""><div class="para" id="qtnt2_7-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_7_opt_c"><div class="para" id="qtnt2_7-2-3-2-1">The value i starts at 0 and increments by 2, correctly printing out every value.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_7_opt_d"><div class="para" id="qtnt2_7-2-4-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_7_opt_d"><div class="para" id="qtnt2_7-2-4-2-1">Notice the incrementing in the loops for I and II. In I, the value i increments by 1 and prints out too many values. In II, the first value is not printed.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_7_opt_e"><div class="para" id="qtnt2_7-2-5-1-1">I, II, and III</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_7_opt_e"><div class="para" id="qtnt2_7-2-5-2-1">III is correct, but I prints out every value between 0 and 8 and II does not print the first value.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.3.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt2_8" data-multipleanswers="false"><div class="para" id="qtnt2_8-1-1">12-3-8: Consider the following method <code class="code-inline tex2jax_ignore">mystery</code>. Assuming x is an integer greater than 1, in which case does <code class="code-inline tex2jax_ignore">mystery</code> result in an infinite loop?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public int mystery(int x, int y)
{
   if (x &lt;= y)
       return x;
   else
       return mystery(x, y * 10);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt2_8_opt_a"><div class="para" id="qtnt2_8-2-1-1-1">y is greater than 1</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_8_opt_a"><div class="para" id="qtnt2_8-2-1-2-1">Eventually, the recursive calls will reach the base case, where y is greater than or equal to x. If y is greater than 1, multiplying by 10 will increase y and y will remain positive.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_8_opt_b" data-correct=""><div class="para" id="qtnt2_8-2-2-1-1">y is less than or equal to 0</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_8_opt_b"><div class="para" id="qtnt2_8-2-2-2-1">If y is less than or equal to 0, multiplying by 10 will not make the value greater than x. The base case will never be reached, and the method will continue running until the computer runs out of memory.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_8_opt_c"><div class="para" id="qtnt2_8-2-3-1-1">y is greater than x</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_8_opt_c"><div class="para" id="qtnt2_8-2-3-2-1">If y is greater than x, the method will reach its base case on the first pass of the method.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_8_opt_d"><div class="para" id="qtnt2_8-2-4-1-1">all of the above</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_8_opt_d"><div class="para" id="qtnt2_8-2-4-2-1">Not all of the statements are correct. If y is greater than x or if y is greater than 1, the method will eventually reach its base case and end.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_8_opt_e"><div class="para" id="qtnt2_8-2-5-1-1">none of the above</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_8_opt_e"><div class="para" id="qtnt2_8-2-5-2-1">One of the statements is correct. If y is less than or equal to 0, multiplying by 10 will not make y become greater than x.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.3.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt2_9" data-multipleanswers="false"><div class="para" id="qtnt2_9-1-1">12-3-9: Consider the following classes <code class="code-inline tex2jax_ignore">Cat</code> and <code class="code-inline tex2jax_ignore">FluffyCat</code>. What is the result of executing the following code? <code class="code-inline tex2jax_ignore">Cat obj = new FluffyCat();</code></div> <div class="para" id="qtnt2_9-1-2"><code class="code-inline tex2jax_ignore">obj.display();</code></div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Cat
{
    public String display()
    {
        System.out.print("Cats! ");
    }
}

public class FluffyCat extends Cat
{
    public String display()
    {
        System.out.print("Cool!");
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt2_9_opt_a"><div class="para" id="qtnt2_9-2-1-1-1">Cats!</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_9_opt_a"><div class="para" id="qtnt2_9-2-1-2-1">This would be the case if obj was a Cat at run-time. At run-time, obj is a FluffyCat, so the overwritten method in the Cat class is used.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_9_opt_b"><div class="para" id="qtnt2_9-2-2-1-1">Cats!  Cool!</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_9_opt_b"><div class="para" id="qtnt2_9-2-2-2-1">This would be the case if the display method in FluffyCat used ’super’ to call on the display method in the Cat class before it printed "Cool!".</div></li><li data-component="answer" id="csawesome2_2_qtnt2_9_opt_c" data-correct=""><div class="para" id="qtnt2_9-2-3-1-1">Cool!</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_9_opt_c"><div class="para" id="qtnt2_9-2-3-2-1">Although obj is declared to be a Cat at compile time, at run-time it is actually a FluffyCat. The overwritten display method defined in the FluffyCat class will be called.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_9_opt_d"><div class="para" id="qtnt2_9-2-4-1-1">Cool! Cats!</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_9_opt_d"><div class="para" id="qtnt2_9-2-4-2-1">The method has been overwritten in FluffyCat, so the display method present in the Cat Class ("Cats! ") will not be printed.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_9_opt_e"><div class="para" id="qtnt2_9-2-5-1-1">The code results in an error.</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_9_opt_e"><div class="para" id="qtnt2_9-2-5-2-1">This code compiles and runs correctly. A FluffyCat IS-A Cat object, so the code will compile and run without issue.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.3.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt2_10" data-multipleanswers="false"><div class="para" id="qtnt2_10-1-1">12-3-10: Consider the class <code class="code-inline tex2jax_ignore">showMe</code>, shown below. What is printed as a result of <code class="code-inline tex2jax_ignore">showMe(10)</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static void showMe(int arg)
{
   if (arg &gt; 1)
   {
      showMe(arg - 1);
   }

   else
   {
      System.out.print(arg + " ");
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt2_10_opt_a" data-correct=""><div class="para" id="qtnt2_10-2-1-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_10_opt_a"><div class="para" id="qtnt2_10-2-1-2-1">After the recursive call reaches the base case (where arg = 1), the compiler prints "1". The recursive calls all just return and don’t print anything.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_10_opt_b"><div class="para" id="qtnt2_10-2-2-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_10_opt_b"><div class="para" id="qtnt2_10-2-2-2-1">This would be correct if the recursive call specified that arg &gt;= 1 or arg &gt; 0. Because the code ends when arg reaches a value of 1, the code will not print out 0.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_10_opt_c"><div class="para" id="qtnt2_10-2-3-1-1">10 9 8 7 6 5 4 3 2 1</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_10_opt_c"><div class="para" id="qtnt2_10-2-3-2-1">This would be correct if the method printed out arg + " " before going to the recursive call. Because the print statement is located at the end of the base case and not the recursive call, not every value is printed.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_10_opt_d"><div class="para" id="qtnt2_10-2-4-1-1">1 2 3 4 5 6 7 8 9 10</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_10_opt_d"><div class="para" id="qtnt2_10-2-4-2-1">This would be correct if the method printed arg + " " after the recursive call in the if statement. Because the method does not return any values or strings, and because only the base case has a print statement, only the last value of arg is printed.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_10_opt_e"><div class="para" id="qtnt2_10-2-5-1-1">10</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_10_opt_e"><div class="para" id="qtnt2_10-2-5-2-1">This would be correct if the method returned an integer that was the sum of the previous calls. The method does not add any values.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.3.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt2_11" data-multipleanswers="false"><div class="para" id="qtnt2_11-1-1">12-3-11: Consider the following code. What is printed as a result of executing this code?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int sum = 0;

for (int x = 0; x &lt; 5; x++)
{
   for (int y = x; y &lt; 5; y++)
   {
      sum++;
   }
}

System.out.println(sum);
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt2_11_opt_a"><div class="para" id="qtnt2_11-2-1-1-1">25</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_11_opt_a"><div class="para" id="qtnt2_11-2-1-2-1">This would be correct if at the beginning of the second for loop, y was equal to 0, not to x. The starting value of y changes every time that x increases.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_11_opt_b" data-correct=""><div class="para" id="qtnt2_11-2-2-1-1">15</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_11_opt_b"><div class="para" id="qtnt2_11-2-2-2-1">The code loops 15 times, and sum is incremented by 1 each time.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_11_opt_c"><div class="para" id="qtnt2_11-2-3-1-1">21</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_11_opt_c"><div class="para" id="qtnt2_11-2-3-2-1">This would be correct if the for-loops both continued when the values were less than or equal to 5, not when the values were less than 5.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_11_opt_d"><div class="para" id="qtnt2_11-2-4-1-1">36</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_11_opt_d"><div class="para" id="qtnt2_11-2-4-2-1">This would be correct if the for-loops both began at 0 and looped until the values were less than or equal to 5. Check the for loop structures.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_11_opt_e"><div class="para" id="qtnt2_11-2-5-1-1">10</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_11_opt_e"><div class="para" id="qtnt2_11-2-5-2-1">This would be correct if the first for-loop began at 1, not at 0.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.3.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt2_12" data-multipleanswers="false"><div class="para" id="qtnt2_12-1-1">12-3-12: You are trying to write a method <code class="code-inline tex2jax_ignore">sumRow</code> that finds the sum of the values in a specified row of a symmetrical 2-D matrix. Which of the following code segments could replace <code class="code-inline tex2jax_ignore">/* to be determined */</code> to make the code work correctly?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public int sumRow (int row, int[][] values)
{
   int sum = 0;

   /* to be determined */

   return sum;
}

//I.
for (int[] rowValues : values)
{
   for (int x : rowValues)
   {
      sum += x;
   }
}

//II.
for (int i = 0; i &lt; values[0].length;i++)
{
   sum += values[row][i];
}

//III.
int col = 0;
while (col &lt; values[0].length)
{
   sum += values[row][col];
   col++;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt2_12_opt_a"><div class="para" id="qtnt2_12-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_12_opt_a"><div class="para" id="qtnt2_12-2-1-2-1">I will find the sum of all the values in the matrix, but it does not find the sum of a specific row.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_12_opt_b"><div class="para" id="qtnt2_12-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_12_opt_b"><div class="para" id="qtnt2_12-2-2-2-1">II is correct, but III is also correct. This method can be completed by using a while loop or a for loop.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_12_opt_c"><div class="para" id="qtnt2_12-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_12_opt_c"><div class="para" id="qtnt2_12-2-3-2-1">III is correct, but II is also correct. This method can be completed by using a for loop or a while loop.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_12_opt_d" data-correct=""><div class="para" id="qtnt2_12-2-4-1-1">II and III</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_12_opt_d"><div class="para" id="qtnt2_12-2-4-2-1">II and III both correctly add the values in the specified row.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_12_opt_e"><div class="para" id="qtnt2_12-2-5-1-1">I, II, and III</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_12_opt_e"><div class="para" id="qtnt2_12-2-5-2-1">II and III are correct, but I adds every value in the matrix, not just the specified row.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.3.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt2_13" data-multipleanswers="false">
                <div class="para" id="qtnt2_13-1-1">12-3-13: You have an array <code class="code-inline tex2jax_ignore">values</code> filled with 50 integers. Which of the following correctly produces a random index of <code class="code-inline tex2jax_ignore">values</code>?</div>
                <li data-component="answer" id="csawesome2_2_qtnt2_13_opt_a">
                  <div class="para" id="qtnt2_13-2-1-1-1">(int) (Math.random() + 1) * 50</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt2_13_opt_a">
                  <div class="para" id="qtnt2_13-2-1-2-1">This always returns 50. Math.random() + 1 calculates a value between 1 and 1.9, and when this value is cast as an int it becomes 1. 1 * 50 always returns 50.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt2_13_opt_b">
                  <div class="para" id="qtnt2_13-2-2-1-1">(int) (Math.random() * 50) + 1</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt2_13_opt_b">
                  <div class="para" id="qtnt2_13-2-2-2-1">This calculates a random number between 1 and 50, but indexes of arrays start at 0 and end at array.length - 1.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt2_13_opt_c">
                  <div class="para" id="qtnt2_13-2-3-1-1">(int) (Math.random() + 1 * 50)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt2_13_opt_c">
                  <div class="para" id="qtnt2_13-2-3-2-1">This always returns 50. 1 * 50 returns 50 since multiplication takes precedence befores addition. The value of Math.random() + 50 always falls between 50.0 and 50.9, and this value becomes 50 when it is cast as an int.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt2_13_opt_d">
                  <div class="para" id="qtnt2_13-2-4-1-1">(int) Math.random() * 50</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt2_13_opt_d">
                  <div class="para" id="qtnt2_13-2-4-2-1">This always returns 0, since Math.random() returns a value between 0 and 0.9. When the value of Math.random() is cast an int, its value becomes 0. 0 * 50 returns 0.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt2_13_opt_e" data-correct="">
                  <div class="para" id="qtnt2_13-2-5-1-1">(int) (Math.random() * 50)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt2_13_opt_e">
                  <div class="para" id="qtnt2_13-2-5-2-1">This correctly calculates a random index between 0 and 49 for the array.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.3.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt2_14" data-multipleanswers="false"><div class="para" id="qtnt2_14-1-1">12-3-14: Given the following code, what is returned by mystery(5364)?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static int mystery(int num)
{
   if (num &lt; 10)
   {
      return 1;
   }

   else
   {
      return 1 + mystery(num / 10);
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt2_14_opt_a"><div class="para" id="qtnt2_14-2-1-1-1">The method will produce an infinite loop.</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_14_opt_a"><div class="para" id="qtnt2_14-2-1-2-1">Eventually, the recursive calls will reach mystery(5). 5 is less than 10, so the base case will have been reached and the method will end.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_14_opt_b"><div class="para" id="qtnt2_14-2-2-1-1">19</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_14_opt_b"><div class="para" id="qtnt2_14-2-2-2-1">This would be correct if the method found the sum of the digits in the given value, with an extra 1. Instead, the method finds the number of digits.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_14_opt_c" data-correct=""><div class="para" id="qtnt2_14-2-3-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_14_opt_c"><div class="para" id="qtnt2_14-2-3-2-1">This method finds the number of digits in num.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_14_opt_d"><div class="para" id="qtnt2_14-2-4-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_14_opt_d"><div class="para" id="qtnt2_14-2-4-2-1">This method finds the number of digits in num. Check your recursive call to make sure you reached the base case correctly.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_14_opt_e"><div class="para" id="qtnt2_14-2-5-1-1">18</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_14_opt_e"><div class="para" id="qtnt2_14-2-5-2-1">This would be correct if the method added the digits in the value. Instead, the method simply finds the number of digits. Check the recursive call again.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.3.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt2_15" data-multipleanswers="false">
                <div class="para" id="qtnt2_15-1-1">12-3-15: Consider an array of integers that contains <code class="code-inline tex2jax_ignore">[12, 8, 4, 6, 13, 29, 7]</code>. If the array is sorted from smallest to largest using an insertion sort method, what will be the order of the array after the third iteration of the sorting method?</div>
                <li data-component="answer" id="csawesome2_2_qtnt2_15_opt_a">
                  <div class="para" id="qtnt2_15-2-1-1-1">[4, 6, 12, 8, 13, 29, 7]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt2_15_opt_a">
                  <div class="para" id="qtnt2_15-2-1-2-1">This is what would happen with two iterations of selection sort. Remember that selection sort only swaps two elements at a time, while insertion sort places elements in order in the sorted part of the array.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt2_15_opt_b">
                  <div class="para" id="qtnt2_15-2-2-1-1">[4, 6, 7, 8, 13, 29, 12]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt2_15_opt_b">
                  <div class="para" id="qtnt2_15-2-2-2-1">This is what would happen if selection sort was used instead of insertion sort. Remember that selection sort only swaps two elements at a time, while insertion sort places elements in order in the sorted part of the array.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt2_15_opt_c">
                  <div class="para" id="qtnt2_15-2-3-1-1">[4, 8, 12, 6, 13, 29, 7]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt2_15_opt_c">
                  <div class="para" id="qtnt2_15-2-3-2-1">This is what the array looks like after the second iteration. Do one more iteration.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt2_15_opt_d" data-correct="">
                  <div class="para" id="qtnt2_15-2-4-1-1">[4, 6, 8, 12, 13, 29, 7]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt2_15_opt_d">
                  <div class="para" id="qtnt2_15-2-4-2-1">Using insertion sort, we start at the first index and sort the first two values to create a sorted array at the left side of the array. We repeat this step for the second index, creating a sorted array of three elements, and again for the third index, creating a sorted array of four elements.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt2_15_opt_e">
                  <div class="para" id="qtnt2_15-2-5-1-1">[4, 6, 7, 8, 12, 13, 29]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt2_15_opt_e">
                  <div class="para" id="qtnt2_15-2-5-2-1">This is the final sorted array. Instead of three passes, it takes seven iterations to reach this state.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.3.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt2_16" data-multipleanswers="false"><div class="para" id="qtnt2_16-1-1">12-3-16: Consider the classes <code class="code-inline tex2jax_ignore">Car</code> and <code class="code-inline tex2jax_ignore">Minivan</code>, shown below. If <code class="code-inline tex2jax_ignore">obj</code> has been instantiated later in the class as a <code class="code-inline tex2jax_ignore">Minivan</code>, what is printed as a result of <code class="code-inline tex2jax_ignore">obj.drive()</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Car
{
    public void drive()
    {
        System.out.print("Vroom vroom! ");
    }
}

public class Minivan extends Car
{
    public void drive()
    {
        super.drive();
        System.out.print(" Let's go! ");
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt2_16_opt_a" data-correct=""><div class="para" id="qtnt2_16-2-1-1-1">Vroom vroom! Let’s go!</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_16_opt_a"><div class="para" id="qtnt2_16-2-1-2-1">The method drive has been overwritten in the Minivan class. Since obj is of type Minivan, the compiler will use the overwritten method. The overwritten method uses super() to call to the method of the parent class, so "Vroom vroom! " is printed. Then, the overwritten method prints out "Let’s go! ".</div></li><li data-component="answer" id="csawesome2_2_qtnt2_16_opt_b"><div class="para" id="qtnt2_16-2-2-1-1">Vroom vroom!</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_16_opt_b"><div class="para" id="qtnt2_16-2-2-2-1">Although the overwritten method has a call to the method in the parent class, there is another line of code that must be printed. The drive method has been overwritten for the Minivan class.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_16_opt_c"><div class="para" id="qtnt2_16-2-3-1-1">Let’s go!</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_16_opt_c"><div class="para" id="qtnt2_16-2-3-2-1">This would be the case if the overwritten method did not make a call to the class in the parent class. Because the method has a call to the parent class before it does anything else, "Vroom vroom! " is printed.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_16_opt_d"><div class="para" id="qtnt2_16-2-4-1-1">Let’s go! Vroom vroom!</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_16_opt_d"><div class="para" id="qtnt2_16-2-4-2-1">This would be the case if the parent method had been called after "Let’s go! " had been printed.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_16_opt_e"><div class="para" id="qtnt2_16-2-5-1-1">This would result in a compile-time error.</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_16_opt_e"><div class="para" id="qtnt2_16-2-5-2-1">This code correctly compiles, so there are no errors present. The Minivan class can make a call to a method in the Car class using super, because the Minivan class extends the Car class.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.3.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt2_17" data-multipleanswers="false"><div class="para" id="qtnt2_17-1-1">12-3-17: Consider the following method <code class="code-inline tex2jax_ignore">changeArray</code>. An array is created that contains <code class="code-inline tex2jax_ignore">[2, 8, 10, 9, 6]</code> and is passed to <code class="code-inline tex2jax_ignore">changeArray</code>. What are the contents of the array after the <code class="code-inline tex2jax_ignore">changeArray</code> method executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public void changeArray(int[] data)
{
   for (int k = data.length - 1; k &gt; 0; k--)
      data[k - 1] = data[k] + data[k - 1];
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt2_17_opt_a"><div class="para" id="qtnt2_17-2-1-1-1">[2, 6, 2, -1, -3]</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_17_opt_a"><div class="para" id="qtnt2_17-2-1-2-1">This would be correct if data[k] was modified in the for-loop. In this for-loop, data[k - 1] is the element that changes.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_17_opt_b"><div class="para" id="qtnt2_17-2-2-1-1">[-23, -21, -13, -3, 6]</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_17_opt_b"><div class="para" id="qtnt2_17-2-2-2-1">This would be correct if data[k - 1] was subtracted from data[k]. Notice that for every instance of the for-loop, data[k] and data[k - 1] are added together and assigned to the index at data[k - 1].</div></li><li data-component="answer" id="csawesome2_2_qtnt2_17_opt_c"><div class="para" id="qtnt2_17-2-3-1-1">[10, 18, 19, 15, 6]</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_17_opt_c"><div class="para" id="qtnt2_17-2-3-2-1">This would be correct if the for-loop began at 1 and continued to data.length - 1. Notice the for-loop indexing.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_17_opt_d"><div class="para" id="qtnt2_17-2-4-1-1">This method creates an IndexOutOfBounds exception.</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_17_opt_d"><div class="para" id="qtnt2_17-2-4-2-1">The indexing of this method is correct. The for-loop begins at the last index and ends at the second index, and the method does not access any values other than the ones specified.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_17_opt_e" data-correct=""><div class="para" id="qtnt2_17-2-5-1-1">[35, 33, 25, 15, 6]</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_17_opt_e"><div class="para" id="qtnt2_17-2-5-2-1">This method starts at the second-to-last index of the array and adds the value of the previous element to the element at index k - 1.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.3.18 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt2_18" data-multipleanswers="false">
                <div class="para" id="qtnt2_18-1-1">12-3-18: Which statement is equivalent to <code class="code-inline tex2jax_ignore">!( (x &gt; 7) &amp;&amp; !(y &lt; 12) )</code>?</div>
                <li data-component="answer" id="csawesome2_2_qtnt2_18_opt_a">
                  <div class="para" id="qtnt2_18-2-1-1-1">(x &lt;= 7) &amp;&amp; (y &lt; 12)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt2_18_opt_a">
                  <div class="para" id="qtnt2_18-2-1-2-1">Use A and B to represent the expressions -- A == (x &gt; 7), B == !(y &lt; 12). The AND needs to be changed to an OR.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt2_18_opt_b" data-correct="">
                  <div class="para" id="qtnt2_18-2-2-1-1">(x &lt;= 7) || (y &lt; 12)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt2_18_opt_b">
                  <div class="para" id="qtnt2_18-2-2-2-1">Use A and B to represent the expressions -- A == (x &gt; 7), B == !(y &lt; 12)Using DeMorgan’s law, !(A &amp;&amp; B) is equivalent to !A || !B. The negation of (x &gt; 7) is (x &lt;= 7), and the negation of !(y &lt; 12) is (y &lt; 12).</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt2_18_opt_c">
                  <div class="para" id="qtnt2_18-2-3-1-1">(x &gt; 7) || (y &gt;= 12)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt2_18_opt_c">
                  <div class="para" id="qtnt2_18-2-3-2-1">Use A and B to represent the expressions -- A == (x &gt; 7), B == !(y &lt; 12)!(A &amp;&amp; B) is NOT equivalent to (A || B). It should be (!A || !B). Also, (y &gt;= 12) is equivalent to !(y &lt; 12).</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt2_18_opt_d">
                  <div class="para" id="qtnt2_18-2-4-1-1">(x &gt; 7) &amp;&amp; (y &gt;= 12)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt2_18_opt_d">
                  <div class="para" id="qtnt2_18-2-4-2-1">Use A and B to represent the expressions -- A == (x &gt; 7), B == !(y &lt; 12)!(A &amp;&amp; B) is NOT equivalent to (A &amp;&amp; B). !(y &lt; 12) and (y &gt;=12) mean the same thing; changing this does not make the statement the opposite.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt2_18_opt_e">
                  <div class="para" id="qtnt2_18-2-5-1-1">(x &lt;= 7) || (y &gt;= 12)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt2_18_opt_e">
                  <div class="para" id="qtnt2_18-2-5-2-1">Use A and B to represent the expressions -- A == (x &gt; 7), B == !(y &lt; 12)!(A &amp;&amp; B) is NOT equivalent to (!A &amp;&amp; B). Changing !(y &lt; 12) to (y &gt;= 12) does not negate the statement; these two are equivalent.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.3.19 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt2_19" data-multipleanswers="false"><div class="para" id="qtnt2_19-1-1">12-3-19: Consider the following method <code class="code-inline tex2jax_ignore">evens</code>, which finds the number of even numbers present in an array. Which of the following segments of code would correctly replace <code class="code-inline tex2jax_ignore">/* to be completed */</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public int evens(int [] arr)
{
   int count = 0;

   for (int x : arr)
   {
      /* to be completed */
   }

   return count;
}

// I
if (x % 2 == 0)
   count++;

// II
if (x % 2 == 1)
   count++;

// III
if (x / 2 == 0)
   count++;

// IV
if (x / 2 == 1)
   count++;
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt2_19_opt_a" data-correct=""><div class="para" id="qtnt2_19-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_19_opt_a"><div class="para" id="qtnt2_19-2-1-2-1">The remainder operator (%) can be used to find if numbers are even or odd. I checks that x is even correctly using x % 2 == 0.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_19_opt_b"><div class="para" id="qtnt2_19-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_19_opt_b"><div class="para" id="qtnt2_19-2-2-2-1">II uses the remainder operator to count the number of odd numbers in the array. If x % 2 == 1, then the number is odd, not even.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_19_opt_c"><div class="para" id="qtnt2_19-2-3-1-1">III and IV only</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_19_opt_c"><div class="para" id="qtnt2_19-2-3-2-1">III and IV use the division operator, not the remainder operator. This does not check if the number is even.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_19_opt_d"><div class="para" id="qtnt2_19-2-4-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_19_opt_d"><div class="para" id="qtnt2_19-2-4-2-1">I is correct, but II increments the counter for odd numbers, not even numbers.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_19_opt_e"><div class="para" id="qtnt2_19-2-5-1-1">II and IV only</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_19_opt_e"><div class="para" id="qtnt2_19-2-5-2-1">II counts the odd numbers instead of the even numbers. If x % 2 == 1, the number is odd, not even. IV does not use the remainder operator (%), which checks if numbers are even or odd.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.3.20 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt2_20" data-multipleanswers="false"><div class="para" id="qtnt2_20-1-1">12-3-20: Consider the method <code class="code-inline tex2jax_ignore">findMax</code>, which uses sequential search to find the index of the largest value of an array. In which case would <code class="code-inline tex2jax_ignore">findMax</code> not work properly?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public int findMax(int[] arr)
{
   int maxVal = 0;
   int index = 0;

   for (int i = 0; i &lt; arr.length; i++)
   {
      if (arr[i] &gt; maxVal)
      {
         index = i;
         maxVal = arr[i];
      }
   }
   return index;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt2_20_opt_a"><div class="para" id="qtnt2_20-2-1-1-1">This method will work correctly for all arrays.</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_20_opt_a"><div class="para" id="qtnt2_20-2-1-2-1">This method will not work correctly for all arrays. Look at the starting value for maxVal, and how maxVal is compared to all the values of the array. What happens if every value in the array is less than maxVal?</div></li><li data-component="answer" id="csawesome2_2_qtnt2_20_opt_b"><div class="para" id="qtnt2_20-2-2-1-1">The first value in the array is less than 0.</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_20_opt_b"><div class="para" id="qtnt2_20-2-2-2-1">Although this might present a problem if EVERY value in the array is less than 0, the compiler will move on to the next index without issue if the first value in the array is less than 0.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_20_opt_c"><div class="para" id="qtnt2_20-2-3-1-1">The first value in the array is equal to 0.</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_20_opt_c"><div class="para" id="qtnt2_20-2-3-2-1">This will not present a problem, as the if-statement has not been met and the for-loop will simply continue to the second element.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_20_opt_d"><div class="para" id="qtnt2_20-2-4-1-1">Every value in the array is greater than 0.</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_20_opt_d"><div class="para" id="qtnt2_20-2-4-2-1">If every value in the array is greater than 0, the method will work properly.</div></li><li data-component="answer" id="csawesome2_2_qtnt2_20_opt_e" data-correct=""><div class="para" id="qtnt2_20-2-5-1-1">Every value in the array is less than 0.</div></li><li data-component="feedback" id="csawesome2_2_qtnt2_20_opt_e"><div class="para" id="qtnt2_20-2-5-2-1">maxVal is set to zero, so if every number in the array is less than 0, the maxVal will remain 0. A better idea would be to set maxVal to the value of the first element in the array.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-11-5</id>
      <title>Exam 3 for the AP CSA Exam (not timed)</title>
      <question optional="yes">
        <label>Exercise 7.4.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt3_1" data-multipleanswers="false"><div class="para" id="qtnt3_1-1-1">12-4-1: Consider the following segment of code.  For the method call <code class="code-inline tex2jax_ignore">t(5)</code>, how many calls to <code class="code-inline tex2jax_ignore">t</code> will be made, including the original call?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public int t(int n)
{
    if (n == 1 || n == 2)
        return 2 * n;

    else
        return t(n - 1) - t(n - 2);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt3_1_opt_a"><div class="para" id="qtnt3_1-2-1-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_1_opt_a"><div class="para" id="qtnt3_1-2-1-2-1">The method makes more than 4 calls. Remember that the method must make a call to check every value of n, even if n is the value in the base case.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_1_opt_b"><div class="para" id="qtnt3_1-2-2-1-1">15</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_1_opt_b"><div class="para" id="qtnt3_1-2-2-2-1">This would be correct if t(6) was used. Try tracing the code again.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_1_opt_c" data-correct=""><div class="para" id="qtnt3_1-2-3-1-1">9</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_1_opt_c"><div class="para" id="qtnt3_1-2-3-2-1">t(5) returns t(4) - t(3). t(4) returns t(3) - t(2), while t(3) returns t(2) - t(1). If you trace the code throughout the calls, t is called 9 times.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_1_opt_d"><div class="para" id="qtnt3_1-2-4-1-1">14</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_1_opt_d"><div class="para" id="qtnt3_1-2-4-2-1">This would be correct if the method reached the base case when n equaled 1 or 0, not 1 or 2. Check the code to see when a recursive call is made.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_1_opt_e"><div class="para" id="qtnt3_1-2-5-1-1">5</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_1_opt_e"><div class="para" id="qtnt3_1-2-5-2-1">This would be correct if t(4) was called. Try tracing the code again.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.4.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt3_2" data-multipleanswers="false"><div class="para" id="qtnt3_2-1-1">12-4-2: Consider the following class declarations. Which of the following code can be executed in the <code class="code-inline tex2jax_ignore">Swan</code> class?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Bird
{
    private String color;

    public Bird(String theColor)
    {
        /* implementation not shown */
    }

    public void makeNoise()
    {
        /* implementation not shown */
    }

    public void eat()
    {
        /* implementation not shown */
    }

    public string showFeathers()
    {
        return color;
    }
}

public class Swan extends Bird
{
    /* no constructors or other methods have been declared */
}


I. this.color = "blue";

II. eat();

III. Swan s = new Swan("blue");
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt3_2_opt_a"><div class="para" id="qtnt3_2-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_2_opt_a"><div class="para" id="qtnt3_2-2-1-2-1">The color is a private instance variable in Bird. Children classes do not have direct access to private variables.  They must use the public getter and setter methods to access the private variables.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_2_opt_b" data-correct=""><div class="para" id="qtnt3_2-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_2_opt_b"><div class="para" id="qtnt3_2-2-2-2-1">The public eat method was inherited from the Bird class and can be called from code in the Swan class.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_2_opt_c"><div class="para" id="qtnt3_2-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_2_opt_c"><div class="para" id="qtnt3_2-2-3-2-1">Constructors are not inherited by sub classes. Only public accessor and mutator methods are inherited by sub classes.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_2_opt_d"><div class="para" id="qtnt3_2-2-4-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_2_opt_d"><div class="para" id="qtnt3_2-2-4-2-1">II is correct, but I is incorrect. Private instance variables cannot be directly accessed by the child class.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_2_opt_e"><div class="para" id="qtnt3_2-2-5-1-1">I, II, and III</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_2_opt_e"><div class="para" id="qtnt3_2-2-5-2-1">II is correct, but I and III are incorrect. Constructors are not inherited and subclasses do not have direct access to private instance variables.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.4.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt3_3" data-multipleanswers="false"><div class="para" id="qtnt3_3-1-1">12-4-3: Consider the following code. Assume that <code class="code-inline tex2jax_ignore">list</code> is an ArrayList of integers that contains <code class="code-inline tex2jax_ignore">[7, 3, 2]</code>. What will the contents of <code class="code-inline tex2jax_ignore">list</code> be after the following code is executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">list.add(4);
list.add(1, 8);
list.remove(2);
list.set(2, 1);
list.add(3);
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt3_3_opt_a"><div class="para" id="qtnt3_3-2-1-1-1">[7, 1, 4, 8, 3]</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_3_opt_a"><div class="para" id="qtnt3_3-2-1-2-1">Remember that in ArrayLists, indexing starts at 0, not at 1. If the add method has two parameters, then the value is added at a specific index, not at the end of the list.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_3_opt_b"><div class="para" id="qtnt3_3-2-2-1-1">[7, 8, 1, 2, 4, 3]</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_3_opt_b"><div class="para" id="qtnt3_3-2-2-2-1">The set method replaces a value at the specific index. The original value is erased.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_3_opt_c"><div class="para" id="qtnt3_3-2-3-1-1">[7, 3, 1, 4, 3]</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_3_opt_c"><div class="para" id="qtnt3_3-2-3-2-1">Remember that there are two add methods for ArrayLists. If the add method has two parameters, then a value is added at a specific index, not at the end of the list.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_3_opt_d"><div class="para" id="qtnt3_3-2-4-1-1">[8, 1, 2, 4, 3]</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_3_opt_d"><div class="para" id="qtnt3_3-2-4-2-1">Remember that in ArrayLists, indexing starts at 0, not at 1.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_3_opt_e" data-correct=""><div class="para" id="qtnt3_3-2-5-1-1">[7, 8, 1, 4, 3]</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_3_opt_e"><div class="para" id="qtnt3_3-2-5-2-1">4 is added to the end of the ArrayList, then 8 is added at index one between 7 and 3. The 3 in index two is removed, then the 2 in the second index is replaced with 1. Finally, 3 is added to the end of the ArrayList, which contains [7, 8, 1, 4, 3].</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.4.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt3_4" data-multipleanswers="false"><div class="para" id="qtnt3_4-1-1">12-4-4: The method <code class="code-inline tex2jax_ignore">rowSums</code> returns an array of integers. Each element of the array holds the sum of the corresponding row of a 2-D matrix. Which line correctly fills in <code class="code-inline tex2jax_ignore">\* to be determined *\</code> in <code class="code-inline tex2jax_ignore">rowSums</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public int[] rowSums(int[][] arr)
{
    int[] ans = new int[arr.length];

    for (int i = 0; i &lt; arr.length; i++)
    {
        for (int j = 0; j &lt; arr[0].length; j++)
        {
                /* to be determined */
        }
    }

    return ans;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt3_4_opt_a"><div class="para" id="qtnt3_4-2-1-1-1">arr[i][j] = ans[i];</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_4_opt_a"><div class="para" id="qtnt3_4-2-1-2-1">In Java, assignments work from right to left. This answer assigns the value of ans[i] in the 1-D array to the value of the 2-D array. Instead, we want to add the values of the row i in the 2-D array and assign this sum to ans[i] in the 1-D array.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_4_opt_b" data-correct=""><div class="para" id="qtnt3_4-2-2-1-1">ans[i] += arr[i][j];</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_4_opt_b"><div class="para" id="qtnt3_4-2-2-2-1">In order to return the right array, the value at ans[i] must contain the sums of every element in row i of the 2-D array. The second for-loop adds the value of every element in row i of the 2-D array and assigns these values to ans[i].</div></li><li data-component="answer" id="csawesome2_2_qtnt3_4_opt_c"><div class="para" id="qtnt3_4-2-3-1-1">ans[i ][j] += arr[i][j];</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_4_opt_c"><div class="para" id="qtnt3_4-2-3-2-1">Notice that ans is a 1-D array, not a 2-D array. There cannot be two indexes for an element of ans, because ans is only a 1-D array.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_4_opt_d"><div class="para" id="qtnt3_4-2-4-1-1">ans[i] = arr[i][j];</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_4_opt_d"><div class="para" id="qtnt3_4-2-4-2-1">This line reassigns the value of arr[i][j] to ans[i], but it does not sum all the values in the row. This line would return an array with the value in the last column of each row.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_4_opt_e"><div class="para" id="qtnt3_4-2-5-1-1">arr[i][j] += ans[i];</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_4_opt_e"><div class="para" id="qtnt3_4-2-5-2-1">Remember that assignment works from right to left in Java. This line adds the value of ans[i] in the 1-D array to the value of arr[i][j] in the 2-D array. The 2-D array should not be modified by this method.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.4.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt3_5" data-multipleanswers="false"><div class="para" id="qtnt3_5-1-1">12-4-5: Consider the following method <code class="code-inline tex2jax_ignore">binSearch</code>, which uses binary search to locate an element <code class="code-inline tex2jax_ignore">key</code> in an array of integers <code class="code-inline tex2jax_ignore">arr</code>. If <code class="code-inline tex2jax_ignore">list</code> is an array of integers containing <code class="code-inline tex2jax_ignore">{4, 7, 9, 11, 20, 24, 30, 41}</code>, how many iterations of the while loop occur in <code class="code-inline tex2jax_ignore">binSearch(30, list)</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static int binSearch(int key, int[] arr)
{
    int low = 0;
    int high = arr.length - 1;

    while (low &lt;= high)
    {
        int mid = (low + high) / 2;

        if (arr[mid] == key)
            return mid;

        else if (arr[mid] &lt; key)
            low = mid + 1;

        else
            high = mid - 1;
    }

    return -1;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt3_5_opt_a"><div class="para" id="qtnt3_5-2-1-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_5_opt_a"><div class="para" id="qtnt3_5-2-1-2-1">30 would not have been located in 1 iteration of the while loop. After one iteration, low would equal 0, mid would equal 3, and high would equal 7. Because list[3] is equal to 11, not 30, nothing is returned, low becomes 4, and the while-loop continues.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_5_opt_b"><div class="para" id="qtnt3_5-2-2-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_5_opt_b"><div class="para" id="qtnt3_5-2-2-2-1">30 would not have been located in 2 iterations of the while loop. After two iterations, mid would equal 5. Because list[5] is equal to 24, not 30, low would increase, and the while-loop would run again. Try one more iteration of the while loop.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_5_opt_c" data-correct=""><div class="para" id="qtnt3_5-2-3-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_5_opt_c"><div class="para" id="qtnt3_5-2-3-2-1">30 would be found in 3 iterations. After the third iteration of the while loop, mid would equal 6. list[6] equals 30, so 6 is returned and the while-loop is exited.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_5_opt_d"><div class="para" id="qtnt3_5-2-4-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_5_opt_d"><div class="para" id="qtnt3_5-2-4-2-1">4 iterations is too many iterations. Only 3 iterations are needed to find 30 in the array. After 4 iterations for an array with 7 elements, either the key is not present in the array or the key is at the first or last index of the array.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_5_opt_e"><div class="para" id="qtnt3_5-2-5-1-1">5</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_5_opt_e"><div class="para" id="qtnt3_5-2-5-2-1">Only 3 iterations of the while loop are needed to find 30 in the array. After 5 iterations for an array with seven elements, it must be that the key was not found.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.4.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt3_6" data-multipleanswers="false"><div class="para" id="qtnt3_6-1-1">12-4-6: The <code class="code-inline tex2jax_ignore">wordScramble</code> method is shown below. What is returned as a result of <code class="code-inline tex2jax_ignore">wordScramble("hello")</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static String wordScramble (String str)
{
    if (str.length() == 0)
        return "!";
    else
        return wordScramble(str.substring(1)) + str.substring(0,1);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt3_6_opt_a"><div class="para" id="qtnt3_6-2-1-1-1">"!hello!"</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_6_opt_a"><div class="para" id="qtnt3_6-2-1-2-1">The exclamation point is returned only once, when the method reaches its base case. Because the compiler works through the recursive calls to the end of the word before it returns any strings, the letters are printed in reverse order.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_6_opt_b"><div class="para" id="qtnt3_6-2-2-1-1">"hello!"</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_6_opt_b"><div class="para" id="qtnt3_6-2-2-2-1">The compiler works through all of the recursive calls before it returns any strings. The exclamation point is returned first, followed by the letters of the original string in reverse order.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_6_opt_c"><div class="para" id="qtnt3_6-2-3-1-1">"!hello"</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_6_opt_c"><div class="para" id="qtnt3_6-2-3-2-1">This string would be correct if the substring was returned before the recursive call. Because the recursive call occurs before the substring is returned, the compiler reaches the end of the string before it returns the letters, so the letters are reversed.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_6_opt_d"><div class="para" id="qtnt3_6-2-4-1-1">"olleh!"</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_6_opt_d"><div class="para" id="qtnt3_6-2-4-2-1">The exclamation point is printed before the letters of the word. The method makes recursive calls until the length of the string equals 0 and the base case has been reached. Then, an exclamation point is returned to the recursive calls, and the letters are returned after the exclamation point in reverse order.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_6_opt_e" data-correct=""><div class="para" id="qtnt3_6-2-5-1-1">"!olleh"</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_6_opt_e"><div class="para" id="qtnt3_6-2-5-2-1">This method makes multiple calls, removing the first letter from the string until the length of the string in the call equals 0. Then, it returns an exclamation point, followed by the letters of the string in reverse order.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.4.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt3_7" data-multipleanswers="false"><div class="para" id="qtnt3_7-1-1">12-4-7: Which of these loops will print multiples of 10, from 0 to 100 inclusive?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">I. for (int i = 0; i &lt; 11; i++)
   {
      System.out.print(i * 10 + " ");
   }

II. int i = 0;

    while (i &lt;= 10)
    {
       System.out.print(i * 10 + " ");
       i++;
    }

III. for (int i = 0; i &lt;= 100; i += 10)
     {
        System.out.print(i + " ");
     }
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt3_7_opt_a"><div class="para" id="qtnt3_7-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_7_opt_a"><div class="para" id="qtnt3_7-2-1-2-1">I is correct, but II and III are correct as well. This task can be accomplished by using a for loop or a while loop.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_7_opt_b"><div class="para" id="qtnt3_7-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_7_opt_b"><div class="para" id="qtnt3_7-2-2-2-1">II is correct, but I and III are correct as well. This task can be accomplished by using a for loop or a while loop.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_7_opt_c"><div class="para" id="qtnt3_7-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_7_opt_c"><div class="para" id="qtnt3_7-2-3-2-1">III is correct, but I and II are correct as well. Even though i increments by 1 after each passing of the loop in I and II, i * 10 is printed.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_7_opt_d"><div class="para" id="qtnt3_7-2-4-1-1">I and III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_7_opt_d"><div class="para" id="qtnt3_7-2-4-2-1">I and III are correct, but II is correct as well. This task can be accomplished using a for loop or a while loop.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_7_opt_e" data-correct=""><div class="para" id="qtnt3_7-2-5-1-1">I, II, and III</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_7_opt_e"><div class="para" id="qtnt3_7-2-5-2-1">Each of these loops will print out multiples of 10 from 0 to 100, starting at 0 and ending at 10.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.4.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt3_8" data-multipleanswers="false"><div class="para" id="qtnt3_8-1-1">12-4-8: The <code class="code-inline tex2jax_ignore">Person</code> and <code class="code-inline tex2jax_ignore">Student</code> classes are found below. Which of the following correctly replaces <code class="code-inline tex2jax_ignore">/* to be completed */</code> in the <code class="code-inline tex2jax_ignore">Student</code> class?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Person
{
   private String name;
   private int age;

   public Person(String theName, int theAge)
   {
      name = theName;
      age = theAge;
   }
}

public class Student extends Person
{
   private int grade;

   public Student(String theName, int theAge, int theGrade)
   {
      /* to be completed */
   }
}

I. name = theName;
   age = theAge;
   grade = theGrade;

II. super(theName, theAge);
    grade = theGrade;

III. super(theName, theAge);
     name = theName;
     age = theAge;
     grade = theGrade;
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt3_8_opt_a"><div class="para" id="qtnt3_8-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_8_opt_a"><div class="para" id="qtnt3_8-2-1-2-1">name and age are private instance variables in the Person class. Children classes do not have direct access to private variables in the parent class.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_8_opt_b" data-correct=""><div class="para" id="qtnt3_8-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_8_opt_b"><div class="para" id="qtnt3_8-2-2-2-1">This answer correctly calls on the constructor in the Person class using super. Then, it correctly instantiates the instance variable grade, located in the Student class.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_8_opt_c"><div class="para" id="qtnt3_8-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_8_opt_c"><div class="para" id="qtnt3_8-2-3-2-1">name and age are private instance variables in the Person class. Children classes do not have direct access to private variables in the parent class. Although the Person constructor has correctly been implemented using the super keyword, name and age cannot be accessed by the Student class.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_8_opt_d"><div class="para" id="qtnt3_8-2-4-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_8_opt_d"><div class="para" id="qtnt3_8-2-4-2-1">II is correct, but name and age instance variables found in the Person class. Instance variables are not inherited and cannot be modified by sub classes.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_8_opt_e"><div class="para" id="qtnt3_8-2-5-1-1">I and III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_8_opt_e"><div class="para" id="qtnt3_8-2-5-2-1">name and age are private instance variables in the Person class. Although the constructor from the Person class may be implemented using super, the instance variables in the parent class are not directly accessible by the child class.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.4.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt3_9" data-multipleanswers="false">
                <div class="para" id="qtnt3_9-1-1">12-4-9: A list of integers containing <code class="code-inline tex2jax_ignore">[12, 8, 7, 30, 62, 45, 10, 3]</code> is sorted from largest to smallest using a selection sort method. After three passes, what does the list look like?</div>
                <li data-component="answer" id="csawesome2_2_qtnt3_9_opt_a">
                  <div class="para" id="qtnt3_9-2-1-1-1">[62, 45, 30, 12, 7, 8, 10, 3]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt3_9_opt_a">
                  <div class="para" id="qtnt3_9-2-1-2-1">This is the fully sorted array after eight passes. Reread the question and try again.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt3_9_opt_b">
                  <div class="para" id="qtnt3_9-2-2-1-1">[30, 12, 8, 7, 62, 45, 10, 3]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt3_9_opt_b">
                  <div class="para" id="qtnt3_9-2-2-2-1">This is the result after three passes of insertion sort. Remember that in selection sort, only two values swap positions after every pass.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt3_9_opt_c" data-correct="">
                  <div class="para" id="qtnt3_9-2-3-1-1">[62, 45, 30, 7, 12, 8, 10, 3]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt3_9_opt_c">
                  <div class="para" id="qtnt3_9-2-3-2-1">Since 62 is the largest value in the array, it swaps position with the value in index 0 of the array, 12. 45 is the next largest value, and it swaps with 8. 30 is the next largest value, and it swaps with 7. So, after three passes the list contains [62, 45, 30, 7, 12, 8, 10, 3].</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt3_9_opt_d">
                  <div class="para" id="qtnt3_9-2-4-1-1">[62, 45, 30, 12, 7, 8, 10, 3]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt3_9_opt_d">
                  <div class="para" id="qtnt3_9-2-4-2-1">This is the result after 4 passes of selection sort. Check your steps and try again.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt3_9_opt_e">
                  <div class="para" id="qtnt3_9-2-5-1-1">[12, 8, 30, 7, 62, 45, 10, 3]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt3_9_opt_e">
                  <div class="para" id="qtnt3_9-2-5-2-1">This is the result after one merge of merge sort. Remember that in selection sort, only two values change postions at every pass.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.4.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt3_10" data-multipleanswers="false"><div class="para" id="qtnt3_10-1-1">12-4-10: Consider the classes <code class="code-inline tex2jax_ignore">Animal</code> and <code class="code-inline tex2jax_ignore">Pig</code> shown below. What is printed as a result of executing the code below?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Animal
{
    private String name;

    public Animal(String theName)
    {
        name = theName;
    }

    public Animal()
    {
        name = "Animal";
    }

    public String makeNoise()
    {
        return "";
    }
    ;

    public String getName()
    {
        return name;
    }
}

public class Pig extends Animal
{
    public Pig(String theName)
    {
        super(theName);
    }

    public String makeNoise()
    {
        return "Oink!";
    }

    public String getName()
    {
        return "My name is " + super.getName() + "!";
    }

    public static void main(String[] args)
    {
        Animal piglet = new Pig("Piglet");
        System.out.print(piglet.getName());
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt3_10_opt_a" data-correct=""><div class="para" id="qtnt3_10-2-1-1-1">"My name is Piglet!"</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_10_opt_a"><div class="para" id="qtnt3_10-2-1-2-1">At run-time, piglet is a Pig object. The compiler uses the overwritten getName method located in the Pig class, which prints out "My name is " before calling on the getName method in the Animal class.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_10_opt_b"><div class="para" id="qtnt3_10-2-2-1-1">"Piglet"</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_10_opt_b"><div class="para" id="qtnt3_10-2-2-2-1">This would be correct if the getName method had not been overwritten in the Pig class. Because piglet is a Pig object at run-time, the compiler uses the getName method from the Pig class.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_10_opt_c"><div class="para" id="qtnt3_10-2-3-1-1">"My name is Animal!"</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_10_opt_c"><div class="para" id="qtnt3_10-2-3-2-1">Check the constructor method in the Pig class. The Pig class constructor uses the Animal class constructor that has one String parameter, not the default Animal constructor.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_10_opt_d"><div class="para" id="qtnt3_10-2-4-1-1">"Animal"</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_10_opt_d"><div class="para" id="qtnt3_10-2-4-2-1">The constructor in the Pig class uses the Animal class constructor that takes in a string parameter, not the default constructor. The getName method has been overwritten in the Pig class, so "My name is " is printed before the name of the object.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_10_opt_e"><div class="para" id="qtnt3_10-2-5-1-1">"Oink"</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_10_opt_e"><div class="para" id="qtnt3_10-2-5-2-1">Check the problem and note which method has been used. This is what is returned by the makeNoise method.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.4.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt3_11" data-multipleanswers="false"><div class="para" id="qtnt3_11-1-1">12-4-11: Consider the following method oddArray, which changes every even number value in the array to 0. By the end of the method, only odd numbers will be present in the array. Which line correctly completes  <code class="code-inline tex2jax_ignore">/* to be determined */</code> to make the code work as intended?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public void oddArray (int[] arr)
{
    for (int i = 0; i &lt; arr.length; i++)
    {
        //if the number at arr[i] is even, it becomes 0
        if( /* to be determined */ )
            arr[i] = 0;
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt3_11_opt_a"><div class="para" id="qtnt3_11-2-1-1-1">arr[i] / 2 = 2</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_11_opt_a"><div class="para" id="qtnt3_11-2-1-2-1">To check if a number is even, the modulo operator (%) should be used.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_11_opt_b"><div class="para" id="qtnt3_11-2-2-1-1">arr[i] % 2 == 1</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_11_opt_b"><div class="para" id="qtnt3_11-2-2-2-1">This method checks to see if a number is odd, not even. Because this method changes even numbers, not odd numbers, we do not need to find odd numbers.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_11_opt_c"><div class="para" id="qtnt3_11-2-3-1-1">arr[i] / 2 == 1</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_11_opt_c"><div class="para" id="qtnt3_11-2-3-2-1">To check if a number is even, the modulo operator (%) should be used.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_11_opt_d" data-correct=""><div class="para" id="qtnt3_11-2-4-1-1">arr[i] % 2 == 0</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_11_opt_d"><div class="para" id="qtnt3_11-2-4-2-1">If the value at arr[i] divided by two leaves a remainder of 0, then the number is even and should be reassigned.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_11_opt_e"><div class="para" id="qtnt3_11-2-5-1-1">arr[i] / 2 == 0</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_11_opt_e"><div class="para" id="qtnt3_11-2-5-2-1">To check if a number is even, the modulo operator (%) should be used.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.4.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt3_12" data-multipleanswers="false"><div class="para" id="qtnt3_12-1-1">12-4-12: The method <code class="code-inline tex2jax_ignore">numFun</code> is below. What is returned as a result of <code class="code-inline tex2jax_ignore">numFun(21560)</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static int numFun(int num)
{
   if (num / 10 == 0)
       return num;

   else
       return (num % 10) + numFun(num / 10);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt3_12_opt_a"><div class="para" id="qtnt3_12-2-1-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_12_opt_a"><div class="para" id="qtnt3_12-2-1-2-1">Trace the recursive call and the return statements.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_12_opt_b"><div class="para" id="qtnt3_12-2-2-1-1">5</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_12_opt_b"><div class="para" id="qtnt3_12-2-2-2-1">Examine the recursive call and the return statements. This method adds the values of the digits in a number; it does not find the number of digits.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_12_opt_c"><div class="para" id="qtnt3_12-2-3-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_12_opt_c"><div class="para" id="qtnt3_12-2-3-2-1">Examine the return statements. Although the last digit of the number is 0, 0 is returned to the previous calls, where it is added to the other digits.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_12_opt_d"><div class="para" id="qtnt3_12-2-4-1-1">13</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_12_opt_d"><div class="para" id="qtnt3_12-2-4-2-1">Try tracing the recursive calls again.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_12_opt_e" data-correct=""><div class="para" id="qtnt3_12-2-5-1-1">14</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_12_opt_e"><div class="para" id="qtnt3_12-2-5-2-1">The method divides the number by 10 until it reaches the first dight. Then, it adds the values of all of the digits together.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.4.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt3_13" data-multipleanswers="false"><div class="para" id="qtnt3_13-1-1">12-4-13: Consider the method <code class="code-inline tex2jax_ignore">emptyList</code>, shown below. The method returns true if a <code class="code-inline tex2jax_ignore">List</code> of integers is filled with zeros and false otherwise. Which of the following should replace <code class="code-inline tex2jax_ignore">/* to be completed */</code> so that the method will work as intended?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public boolean emptyList (List &lt;Integer&gt; list)
{
     /* to be completed */
}

// I.
for (int i = 0; i &lt; list.size(); i++)
{
    if (list.get(i) != 0)
        return false;
}
return true;

// II.
for (int i = 0; i &lt; list.size(); i++)
{
    if (list[i] != 0)
        return false;
}
return true;

// III.
for (int i = 0; i &lt; list.size(); i++)
{
    if (list.get(i) != 0)
        return true;
}
return false;
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt3_13_opt_a" data-correct=""><div class="para" id="qtnt3_13-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_13_opt_a"><div class="para" id="qtnt3_13-2-1-2-1">This answer checks every index in the list, correctly selects the values in the list and compares them to zero. If a value is not equal to zero, the method returns false, and the array is NOT empty. Otherwise, the method returns true.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_13_opt_b"><div class="para" id="qtnt3_13-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_13_opt_b"><div class="para" id="qtnt3_13-2-2-2-1">The variable list is a List, not an array. List values are not directly accessible, so list.get(i) should be used instead of list[i].</div></li><li data-component="answer" id="csawesome2_2_qtnt3_13_opt_c"><div class="para" id="qtnt3_13-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_13_opt_c"><div class="para" id="qtnt3_13-2-3-2-1">This method returns true if the list has at least one value in it that is not zero.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_13_opt_d"><div class="para" id="qtnt3_13-2-4-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_13_opt_d"><div class="para" id="qtnt3_13-2-4-2-1">I is correct, but II is incorrect. Because list is not an array, the get method must be used to find the value at a certain index.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_13_opt_e"><div class="para" id="qtnt3_13-2-5-1-1">II and III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_13_opt_e"><div class="para" id="qtnt3_13-2-5-2-1">You can not use list[i] to get a value from a list so II is incorrect.  III would return true if at least one value in the list is not zero.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.4.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt3_14" data-multipleanswers="false">
                <div class="para" id="qtnt3_14-1-1">12-4-14: You need to find a random integer in the range 1 to 25, inclusive. Which of the following always returns a value that satisfies this condition?</div>
                <li data-component="answer" id="csawesome2_2_qtnt3_14_opt_a">
                  <div class="para" id="qtnt3_14-2-1-1-1">(int) (Math.random() * 25) * 1</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt3_14_opt_a">
                  <div class="para" id="qtnt3_14-2-1-2-1">This returns a value between 0 and 24, not 1 and 25. This would be correct if the last part of the expression had + 1 instead of * 1.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt3_14_opt_b">
                  <div class="para" id="qtnt3_14-2-2-1-1">(int) (Math.random() + 1) * 25</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt3_14_opt_b">
                  <div class="para" id="qtnt3_14-2-2-2-1">This always returns 25. Math.random() + 1 becomes 1 when it is cast to an integer, and 1 * 25 equals 25.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt3_14_opt_c">
                  <div class="para" id="qtnt3_14-2-3-1-1">(int) (Math.random() + 25) * 1</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt3_14_opt_c">
                  <div class="para" id="qtnt3_14-2-3-2-1">This always returns 25. Math.random() produces a number between 0 and 1, so when it is added to 25 and cast as an integer, the number always becomes 25.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt3_14_opt_d">
                  <div class="para" id="qtnt3_14-2-4-1-1">(int) (Math.random()) * 25 + 1</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt3_14_opt_d">
                  <div class="para" id="qtnt3_14-2-4-2-1">This always returns 1. Math.random() produces a value between 0 and 1, so casting Math.random() to an int results in 0. 0 * 25 remains 0, and 0 + 1 equals 1.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt3_14_opt_e" data-correct="">
                  <div class="para" id="qtnt3_14-2-5-1-1">(int) (Math.random() * 25) + 1</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt3_14_opt_e">
                  <div class="para" id="qtnt3_14-2-5-2-1">Math.random() * 25 finds a random double value between 0 and 24.9999. This is cast to an integer, and 1 is added so the range becomes 1 to 25.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.4.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt3_15" data-multipleanswers="false">
                <div class="para" id="qtnt3_15-1-1">12-4-15: A list of 120 names has been sorted in alphabetical order. Using a binary search method, what is the minimum number of passes needed to confirm that a name is not in the list?</div>
                <li data-component="answer" id="csawesome2_2_qtnt3_15_opt_a">
                  <div class="para" id="qtnt3_15-2-1-1-1">5</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt3_15_opt_a">
                  <div class="para" id="qtnt3_15-2-1-2-1">This is not enough passes to guarantee that a name is not present. 2 ^ 5, is 32, which is not enough elements. Remember that binary search takes log2 (number of elements) passes at most to find an item.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt3_15_opt_b" data-correct="">
                  <div class="para" id="qtnt3_15-2-2-1-1">7</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt3_15_opt_b">
                  <div class="para" id="qtnt3_15-2-2-2-1">2 ^ 7 is 128, which is greater than 120. 120 passes will guarantee that the name is not present in the list. Binary search takes log2 (number of elements) at most to find an item.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt3_15_opt_c">
                  <div class="para" id="qtnt3_15-2-3-1-1">10</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt3_15_opt_c">
                  <div class="para" id="qtnt3_15-2-3-2-1">Yes, you would know by 10 passes, but there is a better answer. Remember that binary search takes log2 (number of elements) passes at most to find an item.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt3_15_opt_d">
                  <div class="para" id="qtnt3_15-2-4-1-1">12</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt3_15_opt_d">
                  <div class="para" id="qtnt3_15-2-4-2-1">Yes, you would know by 12 passes, but not all 12 passes are required. Remember that binary search takes log2 (number of elements) passes at most to find an item.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt3_15_opt_e">
                  <div class="para" id="qtnt3_15-2-5-1-1">128</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt3_15_opt_e">
                  <div class="para" id="qtnt3_15-2-5-2-1">This would be true if the list was searched using sequential search. Binary search only requires log2 (number of elements) at most to find an item.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.4.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt3_16" data-multipleanswers="false"><div class="para" id="qtnt3_16-1-1">12-4-16: The method <code class="code-inline tex2jax_ignore">recur</code> is shown below. In which case will <code class="code-inline tex2jax_ignore">recur</code> terminate without error?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public void recur (String str)
{
     if (str.length() &lt; 15)
         System.out.print("s");

     recur(str + "!");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt3_16_opt_a"><div class="para" id="qtnt3_16-2-1-1-1">When the length of str is less than 15</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_16_opt_a"><div class="para" id="qtnt3_16-2-1-2-1">If the string length is less than 15, "s" will be printed, but the recursive call will still be made.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_16_opt_b"><div class="para" id="qtnt3_16-2-2-1-1">When the length of str is greater than or equal to 15</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_16_opt_b"><div class="para" id="qtnt3_16-2-2-2-1">This would be correct if the recursive call was located in an else statement. If the string length is 15 or greater, "s" will not be printed, but the recursive call will still occur.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_16_opt_c"><div class="para" id="qtnt3_16-2-3-1-1">When the length of str is equal to 0</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_16_opt_c"><div class="para" id="qtnt3_16-2-3-2-1">If the string has length 0, the if statement will occur and "s" will be printed, but the recursive call will still occur.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_16_opt_d"><div class="para" id="qtnt3_16-2-4-1-1">For all string inputs</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_16_opt_d"><div class="para" id="qtnt3_16-2-4-2-1">Check the recursive call. The method is always called recursively, regardless of the string length.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_16_opt_e" data-correct=""><div class="para" id="qtnt3_16-2-5-1-1">For no string inputs</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_16_opt_e"><div class="para" id="qtnt3_16-2-5-2-1">There is no base case present in this method that stops the recursive calls. This method will continue until the compiler runs out of memory. You could fix this code by placing the recursive call in an else statement or creating a base case to end the call.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.4.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt3_17" data-multipleanswers="false"><div class="para" id="qtnt3_17-1-1">12-4-17:  Consider the <code class="code-inline tex2jax_ignore">Fruit</code>, <code class="code-inline tex2jax_ignore">Grape</code>, and <code class="code-inline tex2jax_ignore">SeedlessGrape</code> classes shown below. Which of the following object declarations will compile without error?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Fruit
{
    private String name;
    private boolean seeds;

    public Fruit(String theName)
    {
        name = theName;
        seeds = true;
    }

    public void setSeeds()
    {
        seeds = !seeds;
    }

}

public class Grape extends Fruit
{
    private String color;

    public Grape(String theName, String theColor)
    {
        super(theName);
        color = theColor;
    }
}

public class SeedlessGrape extends Grape
{
    public SeedlessGrape(String theName, String theColor)
    {
        super(theName, theColor);
        setSeeds();
    }
}

I. Fruit a = new SeedlessGrape("grape", "red");
II. Grape b = new Grape("grape");
III. SeedlessGrape c = new Grape("grape", "green");
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt3_17_opt_a" data-correct=""><div class="para" id="qtnt3_17-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_17_opt_a"><div class="para" id="qtnt3_17-2-1-2-1">A SeedlessGrape IS-A fruit, so the inheritance relationship is correct. The constructor for the SeedlessGrape class has two string parameters.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_17_opt_b"><div class="para" id="qtnt3_17-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_17_opt_b"><div class="para" id="qtnt3_17-2-2-2-1">The Grape class constructor has two parameters. Although a Grape IS-A fruit, the Grape constructor must have two string parameters to compile without error.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_17_opt_c"><div class="para" id="qtnt3_17-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_17_opt_c"><div class="para" id="qtnt3_17-2-3-2-1">A Grape is NOT a SeedlessGrape. The inheritance relationship is incorrect, and III does not compile. Object a is a Fruit at compile-time and a SeedlessGrape at run-time. A SeedlessGrape IS-A Fruit, so the code compiles.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.4.18 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt3_18" data-multipleanswers="false"><div class="para" id="qtnt3_18-1-1">12-4-18: The method <code class="code-inline tex2jax_ignore">printNames</code> is located below. It prints out all the names in a 2-D matrix. Which of the following correctly replaces <code class="code-inline tex2jax_ignore">/* to be determined */</code> to make the method work as intended?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public void printNames (String[][] arr)
{
     for (String[] row : arr)
     {
         for (String x : row)
         {
             /* to be determined */
         }

         System.out.println();
     }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt3_18_opt_a"><div class="para" id="qtnt3_18-2-1-1-1">System.out.print(arr[x] + " ");</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_18_opt_a"><div class="para" id="qtnt3_18-2-1-2-1">x refers to a String object, not an index in the array. x can be printed directly, because the second for-loop individually selects Strings in each row of the array.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_18_opt_b" data-correct=""><div class="para" id="qtnt3_18-2-2-1-1">System.out.print(x + " ");</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_18_opt_b"><div class="para" id="qtnt3_18-2-2-2-1">This method uses two for-each loops. The variable x refers to a single String located in the array, so only x needs to be printed. This method will loop through the entire 2-D array, printing out all the names in the matrix.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_18_opt_c"><div class="para" id="qtnt3_18-2-3-1-1">System.out.print(x.toString() + " ");</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_18_opt_c"><div class="para" id="qtnt3_18-2-3-2-1">This will compile without error, but the toString is unnecessary. x is already a String and can be printed directly.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_18_opt_d"><div class="para" id="qtnt3_18-2-4-1-1">System.out.print(row[x] + " ");</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_18_opt_d"><div class="para" id="qtnt3_18-2-4-2-1">x refers to a String object, not an index in the array row. x can be printed directly.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_18_opt_e"><div class="para" id="qtnt3_18-2-5-1-1">System.out.print(row.get(x) + " ");</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_18_opt_e"><div class="para" id="qtnt3_18-2-5-2-1">x is a String, not an index.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.4.19 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt3_19" data-multipleanswers="false">
                <div class="para" id="qtnt3_19-1-1">12-4-19: Which of the following is equivalent to <code class="code-inline tex2jax_ignore">! ( (x &gt; 10) &amp;&amp; (x &lt;= 5) )</code>?</div>
                <li data-component="answer" id="csawesome2_2_qtnt3_19_opt_a">
                  <div class="para" id="qtnt3_19-2-1-1-1">(x &lt; 10) &amp;&amp; (x &gt; 5)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt3_19_opt_a">
                  <div class="para" id="qtnt3_19-2-1-2-1">Use A and B to represent the expressions -- A becomes (x &gt; 10), B becomes (x &lt;= 5). ! (A &amp;&amp; B) is NOT equivalent to (!A &amp;&amp; !B). Also, (x &lt; 10) is not correct negation for (x &gt; 10); the correct negation is (x &lt;= 10).</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt3_19_opt_b">
                  <div class="para" id="qtnt3_19-2-2-1-1">(x &gt; 10) &amp;&amp; (x &lt;=5)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt3_19_opt_b">
                  <div class="para" id="qtnt3_19-2-2-2-1">Use A and B to represent the expressions -- A becomes (x &gt; 10), B becomes (x &lt;= 5). ! (A &amp;&amp; B) is NOT equivalent to (A &amp;&amp; B).</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt3_19_opt_c">
                  <div class="para" id="qtnt3_19-2-3-1-1">(x &lt;= 10) &amp;&amp; (x &gt; 5)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt3_19_opt_c">
                  <div class="para" id="qtnt3_19-2-3-2-1">Use A and B to represent the expressions -- A becomes (x &gt; 10), B becomes (x &lt;= 5). ! (A &amp;&amp; B) is NOT equivalent to (!A &amp;&amp; !B). The AND should be changed to an OR.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt3_19_opt_d" data-correct="">
                  <div class="para" id="qtnt3_19-2-4-1-1">(x &lt;= 10) || (x &gt; 5)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt3_19_opt_d">
                  <div class="para" id="qtnt3_19-2-4-2-1">Use A and B to represent the expressions -- A becomes (x &gt; 10), B becomes (x &lt;= 5). ! (A &amp;&amp; B) is equivalent to (!A || !B), according to DeMorgan’s principle. The negation of (x &gt; 10) is (x &lt;= 10), and the negation of (x &lt;= 5) is (x &gt; 5).</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt3_19_opt_e">
                  <div class="para" id="qtnt3_19-2-5-1-1">(x &gt; 10) || (x &lt;= 5)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt3_19_opt_e">
                  <div class="para" id="qtnt3_19-2-5-2-1">Use A and B to represent the expressions -- A becomes (x &gt; 10), B becomes (x &lt;= 5). ! (A &amp;&amp; B) is NOT equivalent to (A || B). Both A and B should also be negated.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.4.20 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt3_20" data-multipleanswers="false"><div class="para" id="qtnt3_20-1-1">12-4-20: Consider the method <code class="code-inline tex2jax_ignore">mystery</code>. What is returned as a result of <code class="code-inline tex2jax_ignore">mystery(4)</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public int mystery (int num)
{
    if (num == 1)
        return 3;
    else
        return 3 * mystery (num - 1);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt3_20_opt_a"><div class="para" id="qtnt3_20-2-1-1-1">12</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_20_opt_a"><div class="para" id="qtnt3_20-2-1-2-1">This would be correct if the recursive method called 3 + mystery (num - 1). Check the recursive call and try again.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_20_opt_b"><div class="para" id="qtnt3_20-2-2-1-1">243</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_20_opt_b"><div class="para" id="qtnt3_20-2-2-2-1">This method calculates 3 ^ num. 3 ^ 4 is not equal to 243, so check your tracing and try again.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_20_opt_c" data-correct=""><div class="para" id="qtnt3_20-2-3-1-1">81</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_20_opt_c"><div class="para" id="qtnt3_20-2-3-2-1">This method calculates 3 ^ num. It goes through the recursive calls until num reaches 1, then 3 is multiplied by itself (num) times. The method has been called four times, and 3 ^ 4 is 81.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_20_opt_d"><div class="para" id="qtnt3_20-2-4-1-1">15</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_20_opt_d"><div class="para" id="qtnt3_20-2-4-2-1">This would be correct if the recursive method called 3 + mystery (num - 1), and num was equal to 5. Check the base case and the parameter and try again.</div></li><li data-component="answer" id="csawesome2_2_qtnt3_20_opt_e"><div class="para" id="qtnt3_20-2-5-1-1">27</div></li><li data-component="feedback" id="csawesome2_2_qtnt3_20_opt_e"><div class="para" id="qtnt3_20-2-5-2-1">This method calculates 3 ^ num. 3 ^ 4 is not equal to 27, so check your tracing and try again.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-11-6</id>
      <title>Exam 4 for the AP CSA Exam (not timed)</title>
      <question optional="yes">
        <label>Exercise 7.5.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt4_1" data-multipleanswers="false"><div class="para" id="qtnt4_1-1-1">14-5-1: Consider the method <code class="code-inline tex2jax_ignore">minVal</code>, shown below. <code class="code-inline tex2jax_ignore">minVal</code> compares every value in the given array to <code class="code-inline tex2jax_ignore">min</code> to find the smallest value, which is then returned. At the beginning of the code, <code class="code-inline tex2jax_ignore">min</code> is set to 1. Which of the following is the best value to set <code class="code-inline tex2jax_ignore">min</code> so that the method will compile and work as intended?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public int minVal (int[][] arr)
{
    int min = 1;

    for (int i = 0; i &lt; arr.length; i++)
    {
        for (int j = 0; j &lt; arr[0].length; j++)
        {
            if (arr[i][j] &lt; min)
                min = arr[i][j];
        }
    }

    return min;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt4_1_opt_a"><div class="para" id="qtnt4_1-2-1-1-1">arr[i][j]</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_1_opt_a"><div class="para" id="qtnt4_1-2-1-2-1">Notice where min is set in the code. At the time that min is set, i and j have not been delcared and cannot be used. This choice will create a compile-time error.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_1_opt_b" data-correct=""><div class="para" id="qtnt4_1-2-2-1-1">arr[0][0]</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_1_opt_b"><div class="para" id="qtnt4_1-2-2-2-1">Using the first value in the array guarantees that the correct minimum value will be found and returned, regardless of the range of numbers in the array.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_1_opt_c"><div class="para" id="qtnt4_1-2-3-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_1_opt_c"><div class="para" id="qtnt4_1-2-3-2-1">Setting min equal to 0 might find the minimum value in some cases. However, if every number in the array is positive, then min will remain 0 and it will not find the minimum value in the array.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_1_opt_d"><div class="para" id="qtnt4_1-2-4-1-1">-1</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_1_opt_d"><div class="para" id="qtnt4_1-2-4-2-1">If min is set to -1, the method would only work correctly if there was a value in the array that was equal to or smaller than -1. If all of the values in the array are greater than -1, then the correct minimum value will not be found.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_1_opt_e"><div class="para" id="qtnt4_1-2-5-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_1_opt_e"><div class="para" id="qtnt4_1-2-5-2-1">This value would only work correctly if there was a value in the array that was less than 1. If the array is filled with positive numbers, 1 will remain the minimum and the correct minimum may not be found.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.5.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt4_2" data-multipleanswers="false"><div class="para" id="qtnt4_2-1-1">14-5-2: The <code class="code-inline tex2jax_ignore">fibonacci</code> method is shown below. What is returned as a result of <code class="code-inline tex2jax_ignore">fibonacci(5)</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public int fibonacci (int num)
{
    if (num &lt;= 1)
        return num;

    else
        return fibonacci(num - 1) + fibonacci(num - 2);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt4_2_opt_a" data-correct=""><div class="para" id="qtnt4_2-2-1-1-1">5</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_2_opt_a"><div class="para" id="qtnt4_2-2-1-2-1">fibonacci(5) returns fibonacci(4) + fibonacci(3). fibonacci(4) returns fibonacci(3) and fibonacci(2). fibonacci(3) returns fibonacci(2) + fibonacci(1). fibonacci(2) returns fibonacci(1) + fibonacci(0). fibonacci(1) returns 1, and fibonacci(0) returns 0. When the code is traced, 5 is returned.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_2_opt_b"><div class="para" id="qtnt4_2-2-2-1-1">6</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_2_opt_b"><div class="para" id="qtnt4_2-2-2-2-1">Check your tracing to make sure that fibonacci(0) returned 0 and fibonacci(1) returned 1.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_2_opt_c"><div class="para" id="qtnt4_2-2-3-1-1">8</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_2_opt_c"><div class="para" id="qtnt4_2-2-3-2-1">This is the answer returned for fibonacci(6). Check your tracing and try again.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_2_opt_d"><div class="para" id="qtnt4_2-2-4-1-1">13</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_2_opt_d"><div class="para" id="qtnt4_2-2-4-2-1">This is the answer returned for fibonacci(7). Check your tracing and try again.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_2_opt_e"><div class="para" id="qtnt4_2-2-5-1-1">15</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_2_opt_e"><div class="para" id="qtnt4_2-2-5-2-1">Notice what is returned in the if statement. fibonacci(0) returns 0, not 1.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.5.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt4_3" data-multipleanswers="false">
                <div class="para" id="qtnt4_3-1-1">14-5-3: Which of the following is equivalent to <code class="code-inline tex2jax_ignore">! (!(x &gt;= 7) &amp;&amp; (x &gt; 2))</code>?</div>
                <li data-component="answer" id="csawesome2_2_qtnt4_3_opt_a">
                  <div class="para" id="qtnt4_3-2-1-1-1">(x &gt;= 7) &amp;&amp; (x &gt; 2)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt4_3_opt_a">
                  <div class="para" id="qtnt4_3-2-1-2-1">Use A and B to represent the expressions -- A becomes !(x &gt;= 7), B becomes (x &gt; 2). ! (A &amp;&amp; B) does NOT equal !A &amp;&amp; B.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt4_3_opt_b">
                  <div class="para" id="qtnt4_3-2-2-1-1">(x &lt; 7) &amp;&amp; (x &lt;= 2)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt4_3_opt_b">
                  <div class="para" id="qtnt4_3-2-2-2-1">Use A and B to represent the expressions -- A becomes !(x &gt;= 7), B becomes (x &gt; 2). ! (A &amp;&amp; B) does NOT equal A &amp;&amp; !B. !(x &gt;= 7) is the same as (x &lt; 7).</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt4_3_opt_c">
                  <div class="para" id="qtnt4_3-2-3-1-1">(x &gt;= 7) &amp;&amp; (x &lt; 2)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt4_3_opt_c">
                  <div class="para" id="qtnt4_3-2-3-2-1">Use A and B to represent the expressions -- A becomes !(x &gt;= 7), B becomes (x &gt; 2). ! (A &amp;&amp; B) does NOT equal !A &amp;&amp; !B. Also, the negation of (x &gt; 2) is (x &lt;= 2), not (x &lt; 2).</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt4_3_opt_d" data-correct="">
                  <div class="para" id="qtnt4_3-2-4-1-1">(x &gt;= 7) || (x &lt;= 2)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt4_3_opt_d">
                  <div class="para" id="qtnt4_3-2-4-2-1">Use A and B to represent the expressions -- A becomes !(x &gt;= 7), B becomes (x &gt; 2). ! (A &amp;&amp; B) is equal to !A || !B, according to DeMorgan’s law. The negation of !(x &gt;= 7) is (x &gt;= 7), and the negation of (x &gt; 2) is (x &lt;= 2).</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt4_3_opt_e">
                  <div class="para" id="qtnt4_3-2-5-1-1">(x &lt; 7) || (x &lt; 2)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt4_3_opt_e">
                  <div class="para" id="qtnt4_3-2-5-2-1">Use A and B to represent the expressions -- A becomes !(x &gt;= 7), B becomes (x &gt; 2). ! (A &amp;&amp; B) does NOT equal A || !B. The negation of (x &gt; 2) is (x &lt;= 2), not (x &lt; 2), and !(x &gt;= 7) is the same as (x &lt; 7).</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.5.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt4_4" data-multipleanswers="false"><div class="para" id="qtnt4_4-1-1">14-5-4: You want to write a method that multiplies an integer <code class="code-inline tex2jax_ignore">num</code> by itself exactly 10 times. Which of the following loops could you use?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">// I.
int total = 1;
for (int i = 0; i &lt; 10; i++)
{
    total = total * num;
}

// II.
int count = 0;
int total = 1;

while (count &lt; 10)
{
    count++;
    total = total * num;
}

// III.
int total = 1;
for (int i : 10)
{
    total = total * num;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt4_4_opt_a"><div class="para" id="qtnt4_4-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_4_opt_a"><div class="para" id="qtnt4_4-2-1-2-1">This loop is correct, but the loop in II is also correct. This method may be completed using a for loop or a while loop.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_4_opt_b"><div class="para" id="qtnt4_4-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_4_opt_b"><div class="para" id="qtnt4_4-2-2-2-1">This loop is correct, but the loop in I is also correct. This method may be completed using a for loop or a while loop.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_4_opt_c"><div class="para" id="qtnt4_4-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_4_opt_c"><div class="para" id="qtnt4_4-2-3-2-1">This method cannot be completed using a for-each loop. The for-each loop only loops through elements of a collection like a list or array.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_4_opt_d" data-correct=""><div class="para" id="qtnt4_4-2-4-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_4_opt_d"><div class="para" id="qtnt4_4-2-4-2-1">Both of these loops multiply num by itself exactly ten times.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_4_opt_e"><div class="para" id="qtnt4_4-2-5-1-1">I and III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_4_opt_e"><div class="para" id="qtnt4_4-2-5-2-1">This method cannot be completed using a for-each loop. The format of a for-each loop requires a list or array to be completed.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.5.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt4_5" data-multipleanswers="false"><div class="para" id="qtnt4_5-1-1">14-5-5: Consider the <code class="code-inline tex2jax_ignore">Animal</code> and <code class="code-inline tex2jax_ignore">Cat</code> classes, shown below. In another class, the line <code class="code-inline tex2jax_ignore">Animal fluffy = new Cat ("orange", "Fluffy", 11)</code> appears. Which of the following declarations will compile without error?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Animal
{
    private String color;
    private String name;

    public Animal (String theColor, String theName)
    {
        name = theName;
        color = theColor;
    }

    public  String makeNoise() { return ""; }

    public  int getWeight() { return 0; }
}

public class Cat extends Animal
{
    private int weight;

    public Cat (String theColor, String theName, int theWeight)
    {
        super (theColor, theName);
        weight = theWeight;
    }

    public String makeNoise()
    {
        return "Meow!";
    }

    public int getWeight()
    {
        return weight;
    }
}

I. fluffy.color;

II. fluffy.getWeight();

III. fluffy.makeNoise();
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt4_5_opt_a"><div class="para" id="qtnt4_5-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_5_opt_a"><div class="para" id="qtnt4_5-2-1-2-1">Color is a private instance variable located in the Animal class. Private instance variables cannot be directly accessed using dot notation in external classes.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_5_opt_b"><div class="para" id="qtnt4_5-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_5_opt_b"><div class="para" id="qtnt4_5-2-2-2-1">getWeight and makeNoise are methods in the Animal class, so they can both be used by anything declared to be of the type Animal.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_5_opt_c"><div class="para" id="qtnt4_5-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_5_opt_c"><div class="para" id="qtnt4_5-2-3-2-1">getWeight and makeNoise are  methods in the Animal class, so they can both be used by anything declared to be of the type Animal.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_5_opt_d"><div class="para" id="qtnt4_5-2-4-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_5_opt_d"><div class="para" id="qtnt4_5-2-4-2-1">Color is a private instance variable located in the Animal class. Private instance variables cannot be directly accessed using dot notation in external classes.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_5_opt_e" data-correct=""><div class="para" id="qtnt4_5-2-5-1-1">II and III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_5_opt_e"><div class="para" id="qtnt4_5-2-5-2-1">getWeight and makeNoise are both defined in the Animal class, so they can both be used by anything declare to be of the type Animal.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.5.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt4_6" data-multipleanswers="false"><div class="para" id="qtnt4_6-1-1">14-5-6: The <code class="code-inline tex2jax_ignore">mysteryNum</code> method is shown below. What is returned as a result of <code class="code-inline tex2jax_ignore">mysteryNum(5)</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">/** Precondition: all values of n are greater than 1 **/
public int mysteryNum (int n)
{
    if (n == 1)
        return 1;

    else
        return n * mysteryNum(n - 1);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt4_6_opt_a"><div class="para" id="qtnt4_6-2-1-1-1">720</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_6_opt_a"><div class="para" id="qtnt4_6-2-1-2-1">This is the value returned for mysteryNum(6). Try tracing the recursive calls again.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_6_opt_b" data-correct=""><div class="para" id="qtnt4_6-2-2-1-1">120</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_6_opt_b"><div class="para" id="qtnt4_6-2-2-2-1">This method calculates n! (n factorial) by subtracting 1 from n until n equals 1. Then, it works through the calls, multiplying each value of n by the previous values. 5 * 4 * 3 * 2 * 1 equals 120.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_6_opt_c"><div class="para" id="qtnt4_6-2-3-1-1">24</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_6_opt_c"><div class="para" id="qtnt4_6-2-3-2-1">This is the value returned for mysteryNum(4). Trace the calls again.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_6_opt_d"><div class="para" id="qtnt4_6-2-4-1-1">15</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_6_opt_d"><div class="para" id="qtnt4_6-2-4-2-1">Notice the recursive call. This would be correct if the code added n to the value returned by the recursive call. Instead, the returned value is multiplied by n.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_6_opt_e"><div class="para" id="qtnt4_6-2-5-1-1">This method results in an infinite loop.</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_6_opt_e"><div class="para" id="qtnt4_6-2-5-2-1">Notice the precondition for the method. Because every value will be greater than 1, the method will always reach its base case.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.5.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt4_8" data-multipleanswers="false"><div class="para" id="qtnt4_8-1-1">14-5-7: Consider the <code class="code-inline tex2jax_ignore">binSearch</code> method shown below, which uses a binary search algorithm to locate an integer <code class="code-inline tex2jax_ignore">key</code> in an array. Assume <code class="code-inline tex2jax_ignore">intArr</code> is an array of integers containing <code class="code-inline tex2jax_ignore">[5, 7, 9, 11, 21, 29, 36, 45]</code>. How many iterations of the while loop occur in <code class="code-inline tex2jax_ignore">binSearch(5, intArr)</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public int binSearch(int key, int[] arr)
{
    int low = 0;
    int high = arr.length - 1;

    while (low &lt;= high)
    {
        int mid = (low + high) / 2;

        if (arr[mid] == key)
            return mid;

        else if (arr[mid] &lt; key)
            low = mid + 1;

        else
            high = mid - 1;

    }

   return -1;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt4_8_opt_a"><div class="para" id="qtnt4_8-2-1-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_8_opt_a"><div class="para" id="qtnt4_8-2-1-2-1">This would be the correct answer if sequential search is used. Remember that the loop will continue until a value is returned or the value is not found, regardless of the position of key.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_8_opt_b"><div class="para" id="qtnt4_8-2-2-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_8_opt_b"><div class="para" id="qtnt4_8-2-2-2-1">Remember that even if low and high are equal, the while loop will still continue to compare a value.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_8_opt_c" data-correct=""><div class="para" id="qtnt4_8-2-3-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_8_opt_c"><div class="para" id="qtnt4_8-2-3-2-1">After the first instance of the while loop, high = 7 and mid = 3. Because intArr[3] is greater than 5, high becomes 2, mid becomes 1, and the loop passes again. intArr[2] is also greater than 5, so high becomes 0, mid becomes 0, and the loop passes again. intArr[0] equals 5, so the key was found in three iterations of the while-loop.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_8_opt_d"><div class="para" id="qtnt4_8-2-4-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_8_opt_d"><div class="para" id="qtnt4_8-2-4-2-1">This number is too high for a binary search algorithm. There are 8 elements in the array, and binary search uses, at a maximum, log2 (number of elements) iterations. log2 (8) is less than 4.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_8_opt_e"><div class="para" id="qtnt4_8-2-5-1-1">5</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_8_opt_e"><div class="para" id="qtnt4_8-2-5-2-1">This number is too high for a binary search algorithm. There are 8 elements in the array, and binary search uses, at a maximum, log2 (number of elements) iterations. log2 (8) is less than 5.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.5.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt4_9" data-multipleanswers="false"><div class="para" id="qtnt4_9-1-1">14-5-8: The method <code class="code-inline tex2jax_ignore">numList</code> is shown below. What is returned as a result of <code class="code-inline tex2jax_ignore">numList(5)</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">/** Precondition: all values of n are greater than 1 **/
public String numList (int n)
{
    if (n == 0)
        return n + "! "

    else
        return numList(n - 1);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt4_9_opt_a"><div class="para" id="qtnt4_9-2-1-1-1">5! 4! 3! 2! 1! 0!</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_9_opt_a"><div class="para" id="qtnt4_9-2-1-2-1">This would be correct if the recursive call contained a return to n + "! " in addition to the call to numList. Notice the recursive call in this problem. Only the value of numList(n - 1) is returned, with nothing else added.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_9_opt_b"><div class="para" id="qtnt4_9-2-2-1-1">0! 1! 2! 3! 4! 5!</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_9_opt_b"><div class="para" id="qtnt4_9-2-2-2-1">This would be correct if the recursive call contained a call to numList AND a return of n + "! ". Notice the recursive call in this problem. Only the value of numList(n - 1) is returned, with nothing else added.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_9_opt_c" data-correct=""><div class="para" id="qtnt4_9-2-3-1-1">0!</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_9_opt_c"><div class="para" id="qtnt4_9-2-3-2-1">The method makes recursive calls until 0 is reached, then "0! " is returned. None of the recursive calls modify the returned response, so only "0! " is returned.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_9_opt_d"><div class="para" id="qtnt4_9-2-4-1-1">5!</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_9_opt_d"><div class="para" id="qtnt4_9-2-4-2-1">Notice the if-statement. When n + "! " is returned, n equals the base case found in the if-statement. This occurs ONLY when n == 0, not 5.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_9_opt_e"><div class="para" id="qtnt4_9-2-5-1-1">This method will result in an infinite loop.</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_9_opt_e"><div class="para" id="qtnt4_9-2-5-2-1">An infinite loop will not occur in this method, because of the precondition. After a certain number of calls, n will reach the base case and the method will end.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.5.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt4_10" data-multipleanswers="false"><div class="para" id="qtnt4_10-1-1">14-5-9: An ArrayList of integers <code class="code-inline tex2jax_ignore">numbers</code> contains the values <code class="code-inline tex2jax_ignore">[7, 2, 4, 6, 3]</code>. What are the contents of <code class="code-inline tex2jax_ignore">numbers</code> after the following code has been executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">numbers.add(2, 8);
numbers.set(4, 1);
numbers.remove(3);
numbers.add(9);
numbers.set(5, 5);
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt4_10_opt_a" data-correct=""><div class="para" id="qtnt4_10-2-1-1-1">[7, 2, 8, 1, 3, 5]</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_10_opt_a"><div class="para" id="qtnt4_10-2-1-2-1">8 is added at index 2, then index 4 is set to equal 1. The value at index 3 is removed, and 9 is added to the end of the array. Finally, the value at index 5 is set to equal 5.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_10_opt_b"><div class="para" id="qtnt4_10-2-2-1-1">[7, 8, 1, 6, 5, 3]</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_10_opt_b"><div class="para" id="qtnt4_10-2-2-2-1">Remember that for ArrayLists, indexing starts at 0, not 1.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_10_opt_c"><div class="para" id="qtnt4_10-2-3-1-1">[7, 2, 1, 3, 2, 5, 9]</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_10_opt_c"><div class="para" id="qtnt4_10-2-3-2-1">When the add method has two parameters, the first parameter specifies the index and the second is the value to add at that index which moves any existing values to the right. The two parameters are not added to the end of the array.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_10_opt_d"><div class="para" id="qtnt4_10-2-4-1-1">[7, 2, 8, 1, 6, 5, 9]</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_10_opt_d"><div class="para" id="qtnt4_10-2-4-2-1">The set method differs from the add method in that it replaces the original value at the specified index. The set method does NOT shift the numbers to the right of the specified index.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_10_opt_e"><div class="para" id="qtnt4_10-2-5-1-1">[7, 2, 8, 1, 5]</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_10_opt_e"><div class="para" id="qtnt4_10-2-5-2-1">The add method adds the specified value at the specified index and shifts every index to the right of the current index. It does NOT delete the value at the original index.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.5.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt4_12" data-multipleanswers="false"><div class="para" id="qtnt4_12-1-1">14-5-10: The method <code class="code-inline tex2jax_ignore">columnSum</code> is shown below. <code class="code-inline tex2jax_ignore">columnSum</code> returns the sum of all of the values in a specified column <code class="code-inline tex2jax_ignore">col</code> of a 2-D array. Which of the following should replace <code class="code-inline tex2jax_ignore">/* to be completed */</code> so that the method will work as intended?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public int columnSum (int col, int[][] arr)
{
    int sum = 0;

    for (int i = 0; i &lt; arr.length; i++)
    {
        /* to be completed */
    }

    return sum;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt4_12_opt_a"><div class="para" id="qtnt4_12-2-1-1-1">arr[col][i] += sum;</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_12_opt_a"><div class="para" id="qtnt4_12-2-1-2-1">This assigns the value of sum to a space in the array. Remember that assignment occurs from right to left.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_12_opt_b"><div class="para" id="qtnt4_12-2-2-1-1">arr[i][col] += sum;</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_12_opt_b"><div class="para" id="qtnt4_12-2-2-2-1">This assigns the value of sum to a space in the array. Remember that assignment occurs from right to left.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_12_opt_c" data-correct=""><div class="para" id="qtnt4_12-2-3-1-1">sum += arr[i][col];</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_12_opt_c"><div class="para" id="qtnt4_12-2-3-2-1">Correct! This adds the value in [i][col] to sum, and i loops through every row in the array.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_12_opt_d"><div class="para" id="qtnt4_12-2-4-1-1">sum += arr[col][i];</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_12_opt_d"><div class="para" id="qtnt4_12-2-4-2-1">This method sums the values at a specified row, not a specified column. Check the array indexing.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_12_opt_e"><div class="para" id="qtnt4_12-2-5-1-1">sum += arr[col][col];</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_12_opt_e"><div class="para" id="qtnt4_12-2-5-2-1">Because col does not change, this method simply sums the value at arr[col][col] i times.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.5.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt4_13" data-multipleanswers="false">
                <div class="para" id="qtnt4_13-1-1">14-5-11: The array <code class="code-inline tex2jax_ignore">intArray</code> contains <code class="code-inline tex2jax_ignore">[8, 12, 34, 6, 10, 14, 2, 4]</code>. What are the contents of <code class="code-inline tex2jax_ignore">intArray</code> after 3 passes of insertion sort?</div>
                <li data-component="answer" id="csawesome2_2_qtnt4_13_opt_a">
                  <div class="para" id="qtnt4_13-2-1-1-1">[6, 8, 12, 34, 2, 4, 10, 14]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt4_13_opt_a">
                  <div class="para" id="qtnt4_13-2-1-2-1">These would be the contents of intArray if intArray was sorted through merge sort. Remember that insertion sort does not break an array into smaller arrays to sort, and values are inserted into a pre-sorted array.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt4_13_opt_b">
                  <div class="para" id="qtnt4_13-2-2-1-1">[2, 4, 6, 34, 10, 14, 8, 12]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt4_13_opt_b">
                  <div class="para" id="qtnt4_13-2-2-2-1">These would be the contents of intArray after three passes of selection sort. Remember that while selection sort swaps the lowest value in the array with the specified index, insertion sort places the value at the specified index in a pre-sorted array.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt4_13_opt_c">
                  <div class="para" id="qtnt4_13-2-3-1-1">[2, 4, 34, 6, 10, 13, 8, 12]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt4_13_opt_c">
                  <div class="para" id="qtnt4_13-2-3-2-1">These would be the contents of intArray after two passes of selection sort. Remember that while selection sort swaps the lowest value in the array with the specified index, insertion sort places the value at the specified index in a pre-sorted array.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt4_13_opt_d" data-correct="">
                  <div class="para" id="qtnt4_13-2-4-1-1">[6, 8, 12, 34, 10, 14, 2, 4]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt4_13_opt_d">
                  <div class="para" id="qtnt4_13-2-4-2-1">After the first pass, the contents of intArray are in the same order, since the presorted array contains only one value. After the second pass, the contents are [8, 12, 34, 6, 10, 14, 2, 4] and the presorted array contains three elements. After the third pass, 6 is inserted in the presorted array, and the contents are now [6, 8, 12, 34, 10, 14, 2, 4].</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt4_13_opt_e">
                  <div class="para" id="qtnt4_13-2-5-1-1">[6, 8, 10, 12, 34, 14, 2, 4]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt4_13_opt_e">
                  <div class="para" id="qtnt4_13-2-5-2-1">These are the contents of intArray after four passes of insertion sort. Check your tracing and try again.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.5.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt4_14" data-multipleanswers="false"><div class="para" id="qtnt4_14-1-1">14-5-12: The <code class="code-inline tex2jax_ignore">Vehicle</code>, <code class="code-inline tex2jax_ignore">Bike</code>, and <code class="code-inline tex2jax_ignore">Car</code> classes are shown. The objects <code class="code-inline tex2jax_ignore">a</code> and <code class="code-inline tex2jax_ignore">b</code> have been declared in a different class. Which of the following lines will compile without error?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Vehicle
{
    private int wheels;
    private String color;

    public Vehicle (String theColor, int theWheels)
    {
        wheels = theWheels;
        color = theColor;
    }

    public int numOfWheels()
    {
        return wheels;
    }

    public String getColor()
    {
        return color;
    }
}

public class Bike extends Vehicle
{
    public Bike (String theColor, int theWheels)
    {
        super (theColor, theWheels);
    }

    /* no other constructors or methods implemented */
}

public class Car extends Vehicle
{
    public Car (String theColor, int theWheels()
    {
        super (theColor, theWheels);
    }

    /* no other constructors or methods implemented */
}


Vehicle a = new Bike ("green", 2);
Vehicle b = new Car ("red", 4);

I. b.wheels;
II. a.getColor();
III. b.numOfWheels();
IV. a.color;
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt4_14_opt_a"><div class="para" id="qtnt4_14-2-1-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_14_opt_a"><div class="para" id="qtnt4_14-2-1-2-1">getColor and numOfWheels are both public methods of the Vehicle class and so the code will compile.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_14_opt_b"><div class="para" id="qtnt4_14-2-2-1-1">IV only</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_14_opt_b"><div class="para" id="qtnt4_14-2-2-2-1">color is a private instance variable located in the Vehicle class. Private instance variables can not be directly accessed using dot notation in external classes.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_14_opt_c"><div class="para" id="qtnt4_14-2-3-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_14_opt_c"><div class="para" id="qtnt4_14-2-3-2-1">wheels is a private instance variable located in the Vehicle class. Private instance variables can not be directly accessed using dot notation in external classes.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_14_opt_d"><div class="para" id="qtnt4_14-2-4-1-1">I and IV only</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_14_opt_d"><div class="para" id="qtnt4_14-2-4-2-1">wheels and color are both private instance variables in the Vehicle class. Private instance variables can not be directly accessed using dot notation in external classes.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_14_opt_e" data-correct=""><div class="para" id="qtnt4_14-2-5-1-1">II and III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_14_opt_e"><div class="para" id="qtnt4_14-2-5-2-1">getColor and numOfWheels are both public methods in the Vehicle class and can be invoked in any class on a variable of type Vehicle.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.5.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt4_15" data-multipleanswers="false"><div class="para" id="qtnt4_15-1-1">14-5-13: The <code class="code-inline tex2jax_ignore">wordMixer</code> class is shown below. What is returned as a result of <code class="code-inline tex2jax_ignore">wordMixer("penguin")</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public String wordMixer (String s)
{
    if (s.length() == 1)
        return s;

    else
        return wordMixer(s.substring(1)) + s.substring(0, 1);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt4_15_opt_a"><div class="para" id="qtnt4_15-2-1-1-1">penguin</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_15_opt_a"><div class="para" id="qtnt4_15-2-1-2-1">This would be correct if s.substring(0, 1) was returned BEFORE the recursive call. Because the recursive call is placed before s.substring(1), the compiler loops through the entire word and returns the last character of the word before any other character.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_15_opt_b" data-correct=""><div class="para" id="qtnt4_15-2-2-1-1">niugnep</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_15_opt_b"><div class="para" id="qtnt4_15-2-2-2-1">This code removes the first character from the string s until the length of s equals 1. Then, the letters are returned in reverse order.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_15_opt_c"><div class="para" id="qtnt4_15-2-3-1-1">pp</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_15_opt_c"><div class="para" id="qtnt4_15-2-3-2-1">Notice the substrings in this method. s.substring(1), not s.substring(0, 1) is used in the recursive call. s.substring(1) starts at the first index, taking off the first letter of a string and returning the rest of the characters.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_15_opt_d"><div class="para" id="qtnt4_15-2-4-1-1">nninuinguinnguinenguin</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_15_opt_d"><div class="para" id="qtnt4_15-2-4-2-1">Notice the substrings in this method. s.substring(0, 1), not s.substring(1) is returned. s.substring(0, 1) only returns one character, so only one character at a time is returned to the method.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_15_opt_e"><div class="para" id="qtnt4_15-2-5-1-1">enguinp</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_15_opt_e"><div class="para" id="qtnt4_15-2-5-2-1">This would be correct if the last line returned s.substring(1) and wordMixer(s.substring(0, 1)). Because the first substring is used to make a call to the string with only the first character removed, the code will loop through all of the letters before it returns a character.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.5.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt4_16" data-multipleanswers="false"><div class="para" id="qtnt4_16-1-1">14-5-14: The method <code class="code-inline tex2jax_ignore">divisible</code> is shown below. In order for <code class="code-inline tex2jax_ignore">divisible</code> to compile and run as intended, the method must return true if x is evenly divisible by y with no remainder, returning false otherwise. Which of the following could replace <code class="code-inline tex2jax_ignore">/* to be completed */</code> to make the code work as intended?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">/* Precondition: x and y are both integers greater than 0 */
 public boolean divisible (int x, int y)
 {
     if ( /* to be completed */)
         return true;

     return false;
 }
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt4_16_opt_a" data-correct=""><div class="para" id="qtnt4_16-2-1-1-1">x % y == 0</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_16_opt_a"><div class="para" id="qtnt4_16-2-1-2-1">The remainder operator (%) returns the remainder left by integer division. If x % y == 0, x is evenly divisible by y, leaving no remainder.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_16_opt_b"><div class="para" id="qtnt4_16-2-2-1-1">x % y == 1</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_16_opt_b"><div class="para" id="qtnt4_16-2-2-2-1">The remainder operator (%) returns the remainder left by integer division. If x % y == 1, x is not evenly divisible by y, as there is a remainder of 1 left over.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_16_opt_c"><div class="para" id="qtnt4_16-2-3-1-1">x % y == 2</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_16_opt_c"><div class="para" id="qtnt4_16-2-3-2-1">The remainder operator (%) returns the remainder left by integer division. If x % y == 2, x is not evenly divisible by y, because there is a remainder of 2 left after the division.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_16_opt_d"><div class="para" id="qtnt4_16-2-4-1-1">x / y == 1</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_16_opt_d"><div class="para" id="qtnt4_16-2-4-2-1">The remainder operator (%) is used to check if numbers are divisible by each other. The division operator (/) should be replaced with a %.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_16_opt_e"><div class="para" id="qtnt4_16-2-5-1-1">x / y == 0</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_16_opt_e"><div class="para" id="qtnt4_16-2-5-2-1">The division operator does not check if one number is divisible by another. In integer division, remainders are calculated by the remainder operator (%).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.5.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt4_17" data-multipleanswers="false">
                <div class="para" id="qtnt4_17-1-1">14-5-15: A database containing 2,000 sorted integers must be searched using a binary search algorithm. What is the maximum number of iterations of the binary search method that   must occur in order to find a specified value or guarantee that it is not in the database?</div>
                <li data-component="answer" id="csawesome2_2_qtnt4_17_opt_a">
                  <div class="para" id="qtnt4_17-2-1-1-1">8</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt4_17_opt_a">
                  <div class="para" id="qtnt4_17-2-1-2-1">2 ^ 9 is 512, which is not enough elements to cover every element in the database. Remember that binary search requires log2 (number of elements) iterations to perform.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt4_17_opt_b" data-correct="">
                  <div class="para" id="qtnt4_17-2-2-1-1">11</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt4_17_opt_b">
                  <div class="para" id="qtnt4_17-2-2-2-1">2 ^ 11 is 2048. 11 iterations is more than enough to find the value or guarantee that it is not in the database. Binary search takes log2 (number of elements) iterations to perform.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt4_17_opt_c">
                  <div class="para" id="qtnt4_17-2-3-1-1">20</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt4_17_opt_c">
                  <div class="para" id="qtnt4_17-2-3-2-1">The value will be found in 20 iterations, but a smaller number of iterations could be used.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt4_17_opt_d">
                  <div class="para" id="qtnt4_17-2-4-1-1">100</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt4_17_opt_d">
                  <div class="para" id="qtnt4_17-2-4-2-1">The value will be found in 20 iterations, but a smaller number of iterations could be used. Remember that binary search requires log2 (number of elements) iterations to perform correctly.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt4_17_opt_e">
                  <div class="para" id="qtnt4_17-2-5-1-1">2000</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt4_17_opt_e">
                  <div class="para" id="qtnt4_17-2-5-2-1">This would be true if we used a sequential search algorithm. However, binary search only needs log2 (number of elements) iterations.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.5.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt4_18" data-multipleanswers="false"><div class="para" id="qtnt4_18-1-1">14-5-16: The <code class="code-inline tex2jax_ignore">Person</code> and <code class="code-inline tex2jax_ignore">Student</code> classes are located below. Which of the following methods contains an example of method overloading?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Person
{
    private String name;
    private int age;

    public Person(String theName, int theAge)
    {
        name = theName;
        age = theAge;
    }

    public String sayName()
    {
        return name;
    }

    public int getAge()
    {
        return age;
    }
}

public class Student extends Person
{
    private int grade;

    public Student(String theName, int theAge, int theGrade)
    {
        super(theName, theAge);
        grade = theGrade;
    }

    public String sayName()
    {
        return "My name is " + super.sayName();
    }

    public String sayName(String nickname)
    {
        return "My name is " + name + " but I like to be called " + nickname;
    }

    public int getGrade()
    {
        return grade;
    }

    public void changeGrade()
    {
        grade++;
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt4_18_opt_a"><div class="para" id="qtnt4_18-2-1-1-1">Having a constructor in the Student class that has a different parameter list than the constructor in the Person class.</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_18_opt_a"><div class="para" id="qtnt4_18-2-1-2-1">This is not an example of method overloading. In this constructor method, the parent constructor is called, but the method is not overloaded. Method overloading occurs when a class has two or more methods with the same name and a different parameter list (like a different number of parameters).</div></li><li data-component="answer" id="csawesome2_2_qtnt4_18_opt_b"><div class="para" id="qtnt4_18-2-2-1-1">Having a sayName() method in Person and in Student.</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_18_opt_b"><div class="para" id="qtnt4_18-2-2-2-1">This is an example of method overridding, not method overloading. Method overridding occurs when a method is redefined in a subclass, and the method has the same parameter list. Method overloading occurs when there are two or more methods with the same name and different parameter lists in the same class.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_18_opt_c" data-correct=""><div class="para" id="qtnt4_18-2-3-1-1">Having sayName() and sayName(String nickname) in the Student class.</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_18_opt_c"><div class="para" id="qtnt4_18-2-3-2-1">In the Student class, there are two different sayName methods. The second sayName method has the same name and same return type, but the parameter lists differ. This is an example of method overloading.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_18_opt_d"><div class="para" id="qtnt4_18-2-4-1-1">Having the changeGrade() method in the Student class.</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_18_opt_d"><div class="para" id="qtnt4_18-2-4-2-1">This is just an example of adding new methods to the child class, that were not inherited from the parent class.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_18_opt_e"><div class="para" id="qtnt4_18-2-5-1-1">None of the above</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_18_opt_e"><div class="para" id="qtnt4_18-2-5-2-1">Method overloading occurs when a class has two or more methods with the same name and different parameters. There is a method in the Student class with the same name and two different parameter lists.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.5.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt4_19" data-multipleanswers="false"><div class="para" id="qtnt4_19-1-1">14-5-17: You are trying to write the <code class="code-inline tex2jax_ignore">countDown</code> method. The <code class="code-inline tex2jax_ignore">countDown</code> method takes a parameter <code class="code-inline tex2jax_ignore">num</code> and decrements it by 1, printing every time until <code class="code-inline tex2jax_ignore">num</code> equals 0. Which of the following loops will make the <code class="code-inline tex2jax_ignore">countDown</code> method compile and work as intended?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">// I.
for (int i = num; i &gt; 0; i--)
{
    System.out.print (i + " ");
}

// II.
while (num &gt; 0)
{
    System.out.print (num + " ");
    num --;
}

/// III.
for (int i : num)
{
    System.out.print(i + " ");
    i --;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt4_19_opt_a"><div class="para" id="qtnt4_19-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_19_opt_a"><div class="para" id="qtnt4_19-2-1-2-1">This is correct, but there is another answer that is also correct.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_19_opt_b"><div class="para" id="qtnt4_19-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_19_opt_b"><div class="para" id="qtnt4_19-2-2-2-1">This is correct, but there is another answer that is also correct.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_19_opt_c"><div class="para" id="qtnt4_19-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_19_opt_c"><div class="para" id="qtnt4_19-2-3-2-1">The for-each loop would not compile.  The variable num is not an array or list.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_19_opt_d" data-correct=""><div class="para" id="qtnt4_19-2-4-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_19_opt_d"><div class="para" id="qtnt4_19-2-4-2-1">Both I and II print out the value of num and then decrement it by 1.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_19_opt_e"><div class="para" id="qtnt4_19-2-5-1-1">I and III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_19_opt_e"><div class="para" id="qtnt4_19-2-5-2-1">The for-each loop would not compile.  The variable num is not an array or list.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.5.18 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt4_20" data-multipleanswers="false"><div class="para" id="qtnt4_20-1-1">14-5-18: Consider the method <code class="code-inline tex2jax_ignore">threes</code>. What is returned as a result of <code class="code-inline tex2jax_ignore">threes(4)</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public int threes (int n)
{
    if (n &lt;= 1)
        return 3;

    else
        return 3 * threes(n - 1);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt4_20_opt_a"><div class="para" id="qtnt4_20-2-1-1-1">12</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_20_opt_a"><div class="para" id="qtnt4_20-2-1-2-1">This would be correct if the else statement returned 3 + the recursive call. The value returned by the recursive call is multiplied by 3.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_20_opt_b"><div class="para" id="qtnt4_20-2-2-1-1">27</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_20_opt_b"><div class="para" id="qtnt4_20-2-2-2-1">This method calculates 3 ^ num. 3 ^ 4 is not equal to 27. Check your tracing and try again.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_20_opt_c" data-correct=""><div class="para" id="qtnt4_20-2-3-1-1">81</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_20_opt_c"><div class="para" id="qtnt4_20-2-3-2-1">This method calculates 3 ^ num. It goes through the recursive calls until num reaches 1, then 3 is multiplied by itself (num) times. The method has been called four times, and 3 ^ 4 is 81.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_20_opt_d"><div class="para" id="qtnt4_20-2-4-1-1">243</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_20_opt_d"><div class="para" id="qtnt4_20-2-4-2-1">This method calculates 3 ^ num. 3 ^ 4 is not equal to 243. Check your tracing and try again.</div></li><li data-component="answer" id="csawesome2_2_qtnt4_20_opt_e"><div class="para" id="qtnt4_20-2-5-1-1">This method will result in an infinite loop.</div></li><li data-component="feedback" id="csawesome2_2_qtnt4_20_opt_e"><div class="para" id="qtnt4_20-2-5-2-1">This method will end properly. If num is less than or equal to 1, a value of 3 will be returned.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-11-7</id>
      <title>Exam 5 for the AP CSA Exam (not timed)</title>
      <question optional="yes">
        <label>Exercise 7.6.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt5_1" data-multipleanswers="false"><div class="para" id="qtnt5_1-1-1">12-6-1: Suppose <code class="code-inline tex2jax_ignore">x, y, and z</code> are variables of type <code class="code-inline tex2jax_ignore">int</code>. Consider the following three conditions</div> <div class="para logical" id="qtnt5_1-1-2"><ol class="upper-roman" id="qtnt5_1-1-2-1"><li id="qtnt5_1-1-2-1-1"><div class="para" id="qtnt5_1-1-2-1-1-1">(x == y) &amp;&amp; (y == z)  &amp;&amp; (x == z)</div></li><li id="qtnt5_1-1-2-1-2"><div class="para" id="qtnt5_1-1-2-1-2-1">(x==y) || (y==z) &amp;&amp; (x == z)</div></li><li id="qtnt5_1-1-2-1-3"><div class="para" id="qtnt5_1-1-2-1-3-1">(x - y) * (x - z) * (y - z) == 0</div></li></ol></div> <div class="para" id="qtnt5_1-1-3">Which of these conditions is (are) always true if x == y is true?</div><li data-component="answer" id="csawesome2_2_qtnt5_1_opt_a"><div class="para" id="qtnt5_1-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_1_opt_a"><div class="para" id="qtnt5_1-2-1-2-1">We don’t know the value of z</div></li><li data-component="answer" id="csawesome2_2_qtnt5_1_opt_b"><div class="para" id="qtnt5_1-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_1_opt_b"><div class="para" id="qtnt5_1-2-2-2-1">II is true but there is (are) other statements that evaluate to true</div></li><li data-component="answer" id="csawesome2_2_qtnt5_1_opt_c"><div class="para" id="qtnt5_1-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_1_opt_c"><div class="para" id="qtnt5_1-2-3-2-1">III is true but there is (are) other statements that evaluate to true</div></li><li data-component="answer" id="csawesome2_2_qtnt5_1_opt_d"><div class="para" id="qtnt5_1-2-4-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_1_opt_d"><div class="para" id="qtnt5_1-2-4-2-1">For I, we don’t know the value of z</div></li><li data-component="answer" id="csawesome2_2_qtnt5_1_opt_e" data-correct=""><div class="para" id="qtnt5_1-2-5-1-1">II and III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_1_opt_e"><div class="para" id="qtnt5_1-2-5-2-1">III executes to true if either a||b true, III is true because x-y will become 0 then 0 * a *b... = 0</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.6.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt5_2" data-multipleanswers="false"><div class="para" id="qtnt5_2-1-1">12-6-2: Consider the following method. What will be returned by a call to <code class="code-inline tex2jax_ignore">multiply(8)</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public int multiply(int n)
{
    if (n == 0)
        return 1;
    else if(n % 2 == 1)
        return n;
    else
        return n * multiply(n - 2);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt5_2_opt_a"><div class="para" id="qtnt5_2-2-1-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_2_opt_a"><div class="para" id="qtnt5_2-2-1-2-1">n != 0</div></li><li data-component="answer" id="csawesome2_2_qtnt5_2_opt_b"><div class="para" id="qtnt5_2-2-2-1-1">8</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_2_opt_b"><div class="para" id="qtnt5_2-2-2-2-1">There are some recursive calls since n % 2 != 1</div></li><li data-component="answer" id="csawesome2_2_qtnt5_2_opt_c"><div class="para" id="qtnt5_2-2-3-1-1">8*7*6*5*4*3*2</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_2_opt_c"><div class="para" id="qtnt5_2-2-3-2-1">Subtracts 2 from original number of 8, so could never call an odd number to be multiplied</div></li><li data-component="answer" id="csawesome2_2_qtnt5_2_opt_d" data-correct=""><div class="para" id="qtnt5_2-2-4-1-1">8*6*4*2</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_2_opt_d"><div class="para" id="qtnt5_2-2-4-2-1">Will recursively call 8 -2, then 6-2, and lastly 4-2</div></li><li data-component="answer" id="csawesome2_2_qtnt5_2_opt_e"><div class="para" id="qtnt5_2-2-5-1-1">7*5*3</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_2_opt_e"><div class="para" id="qtnt5_2-2-5-2-1">Subtracts 2 from original number of 8, so could never call an odd number to be multiplied</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.6.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt5_3" data-multipleanswers="false">
                <div class="para" id="qtnt5_3-1-1">12-6-3: Which of the following code segments correctly stores in <code class="code-inline tex2jax_ignore">x</code> a random real number such that <code class="code-inline tex2jax_ignore">0.6 &lt;= x &lt; 1</code>?</div>
                <li data-component="answer" id="csawesome2_2_qtnt5_3_opt_a">
                  <div class="para" id="qtnt5_3-2-1-1-1">double x = 0.6 * Math.random( ) + 0.4;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt5_3_opt_a">
                  <div class="para" id="qtnt5_3-2-1-2-1">This gives .4 &lt;= x &lt;1</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt5_3_opt_b" data-correct="">
                  <div class="para" id="qtnt5_3-2-2-1-1">double x = 0.4 * Math.random( ) + 0.6;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt5_3_opt_b">
                  <div class="para" id="qtnt5_3-2-2-2-1">Math.random() returns 0(inclusive) to 1(exclusive) so this makes 0 + .6 the lower bound, and .99999 the upper bound</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt5_3_opt_c">
                  <div class="para" id="qtnt5_3-2-3-1-1">double x = Math.random( ) - 0.4;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt5_3_opt_c">
                  <div class="para" id="qtnt5_3-2-3-2-1">This gives -.4 &lt;= x &lt; 6</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt5_3_opt_d">
                  <div class="para" id="qtnt5_3-2-4-1-1">double x = (double) (Math.random( ) * 0.4);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt5_3_opt_d">
                  <div class="para" id="qtnt5_3-2-4-2-1">This doesn’t ensure lower bound and upper bound</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt5_3_opt_e">
                  <div class="para" id="qtnt5_3-2-5-1-1">double x = (double) (Math.random( ) + 0.6);</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt5_3_opt_e">
                  <div class="para" id="qtnt5_3-2-5-2-1">This doesn’t ensure lower bound and upper bound</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.6.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt5_4" data-multipleanswers="false"><div class="para" id="qtnt5_4-1-1">12-6-4: Suppose methods <code class="code-inline tex2jax_ignore">f1</code> and <code class="code-inline tex2jax_ignore">f2</code> are defined as follows. What value is returned from the call <code class="code-inline tex2jax_ignore">f1(5)</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public int f1(int x)
{
    if(x == 0)
        return 0;
    else
        return f2(x -2);
}

public int f2(int x)
{
    if(x == 1)
        return 1;
    else
        return f1(x + 1) + x;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt5_4_opt_a"><div class="para" id="qtnt5_4-2-1-1-1">-4</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_4_opt_a"><div class="para" id="qtnt5_4-2-1-2-1">Trace out the recursive calls. See https://tinyurl.com/AP19-Q6</div></li><li data-component="answer" id="csawesome2_2_qtnt5_4_opt_b"><div class="para" id="qtnt5_4-2-2-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_4_opt_b"><div class="para" id="qtnt5_4-2-2-2-1">Trace out the recursive calls. See https://tinyurl.com/AP19-Q6</div></li><li data-component="answer" id="csawesome2_2_qtnt5_4_opt_c" data-correct=""><div class="para" id="qtnt5_4-2-3-1-1">6</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_4_opt_c"><div class="para" id="qtnt5_4-2-3-2-1">Correct!</div></li><li data-component="answer" id="csawesome2_2_qtnt5_4_opt_d"><div class="para" id="qtnt5_4-2-4-1-1">8</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_4_opt_d"><div class="para" id="qtnt5_4-2-4-2-1">Trace out the recursive calls. See https://tinyurl.com/AP19-Q6</div></li><li data-component="answer" id="csawesome2_2_qtnt5_4_opt_e"><div class="para" id="qtnt5_4-2-5-1-1">-6</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_4_opt_e"><div class="para" id="qtnt5_4-2-5-2-1">Trace out the recursive calls. See https://tinyurl.com/AP19-Q6</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.6.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt5_5" data-multipleanswers="false">
                <div class="para" id="qtnt5_5-1-1">12-6-5: Which statement about constructors is <code class="code-inline tex2jax_ignore">false</code>?</div>
                <li data-component="answer" id="csawesome2_2_qtnt5_5_opt_a">
                  <div class="para" id="qtnt5_5-2-1-1-1">It is legal for the value of a static variable to be changed in a constructor.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt5_5_opt_a">
                  <div class="para" id="qtnt5_5-2-1-2-1">Static variables can still have their values changed</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt5_5_opt_b">
                  <div class="para" id="qtnt5_5-2-2-1-1">The constructor in a subclass must use the keyword super to initialize the private instance variables from its superclass.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt5_5_opt_b">
                  <div class="para" id="qtnt5_5-2-2-2-1">This is true, under the hood if you don’t explicitly use the ’super’ keyword, the compiler will do it for you automatically</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt5_5_opt_c">
                  <div class="para" id="qtnt5_5-2-3-1-1">A constructor has no return type.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt5_5_opt_c">
                  <div class="para" id="qtnt5_5-2-3-2-1">This is true.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt5_5_opt_d" data-correct="">
                  <div class="para" id="qtnt5_5-2-4-1-1">A constructor must be private.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt5_5_opt_d">
                  <div class="para" id="qtnt5_5-2-4-2-1">Constructors should be public so that they can be called from outside the class to construct objects.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt5_5_opt_e">
                  <div class="para" id="qtnt5_5-2-5-1-1">If a subclass does not explicitly provide a constructor and its superclass has just one constructor with a parameter, an error will occur when an attempt is made to create an instance of a subclass object.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt5_5_opt_e">
                  <div class="para" id="qtnt5_5-2-5-2-1">Because of the inheritance, the constructor from super class will be called and it is expecting a passed in parameter</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.6.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt5_6" data-multipleanswers="false"><div class="para" id="qtnt5_6-1-1">12-6-6: Consider the following method. What will the output of <code class="code-inline tex2jax_ignore">mystery(6)</code> return?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public int mystery(int n)
{
    if(n == 1 || n ==2)
        return 2;
    else
        return mystery(n -1) + mystery(n - 2);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt5_6_opt_a"><div class="para" id="qtnt5_6-2-1-1-1">10</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_6_opt_a"><div class="para" id="qtnt5_6-2-1-2-1">Trace out the recursive calls, see https://tinyurl.com/AP19-Q10</div></li><li data-component="answer" id="csawesome2_2_qtnt5_6_opt_b"><div class="para" id="qtnt5_6-2-2-1-1">12</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_6_opt_b"><div class="para" id="qtnt5_6-2-2-2-1">Trace out the recursive calls, see https://tinyurl.com/AP19-Q10</div></li><li data-component="answer" id="csawesome2_2_qtnt5_6_opt_c" data-correct=""><div class="para" id="qtnt5_6-2-3-1-1">16</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_6_opt_c"><div class="para" id="qtnt5_6-2-3-2-1">Trace out the recursive calls, see https://tinyurl.com/AP19-Q10</div></li><li data-component="answer" id="csawesome2_2_qtnt5_6_opt_d"><div class="para" id="qtnt5_6-2-4-1-1">26</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_6_opt_d"><div class="para" id="qtnt5_6-2-4-2-1">Trace out the recursive calls, see https://tinyurl.com/AP19-Q10</div></li><li data-component="answer" id="csawesome2_2_qtnt5_6_opt_e"><div class="para" id="qtnt5_6-2-5-1-1">32</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_6_opt_e"><div class="para" id="qtnt5_6-2-5-2-1">Trace out the recursive calls, see https://tinyurl.com/AP19-Q10</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.6.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt5_7" data-multipleanswers="false"><div class="para" id="qtnt5_7-1-1">12-6-7: Suppose <code class="code-inline tex2jax_ignore">a and b</code> are <code class="code-inline tex2jax_ignore">boolean</code> variables. The expression below</div> <div class="para" id="qtnt5_7-1-2"><code class="code-inline tex2jax_ignore">!a &amp;&amp; !b</code></div> <div class="para" id="qtnt5_7-1-3">…will evaluate to <code class="code-inline tex2jax_ignore">false</code> whenever</div> <div class="para logical" id="qtnt5_7-1-4"><ol class="upper-roman" id="qtnt5_7-1-4-1"><li id="qtnt5_7-1-4-1-1"><div class="para" id="qtnt5_7-1-4-1-1-1">a and b are both false</div></li><li id="qtnt5_7-1-4-1-2"><div class="para" id="qtnt5_7-1-4-1-2-1">a is false and b is true</div></li><li id="qtnt5_7-1-4-1-3"><div class="para" id="qtnt5_7-1-4-1-3-1">a is true and b is false</div></li></ol></div><li data-component="answer" id="csawesome2_2_qtnt5_7_opt_a"><div class="para" id="qtnt5_7-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_7_opt_a"><div class="para" id="qtnt5_7-2-1-2-1">This is true because !false &amp;&amp; !false becomes true &amp;&amp; true</div></li><li data-component="answer" id="csawesome2_2_qtnt5_7_opt_b"><div class="para" id="qtnt5_7-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_7_opt_b"><div class="para" id="qtnt5_7-2-2-2-1">If either a or b (or both a AND b) is true whole expression becomes false</div></li><li data-component="answer" id="csawesome2_2_qtnt5_7_opt_c"><div class="para" id="qtnt5_7-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_7_opt_c"><div class="para" id="qtnt5_7-2-3-2-1">If either a or b (or both a AND b) is true whole expression becomes false</div></li><li data-component="answer" id="csawesome2_2_qtnt5_7_opt_d" data-correct=""><div class="para" id="qtnt5_7-2-4-1-1">II and III only</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_7_opt_d"><div class="para" id="qtnt5_7-2-4-2-1">If either a or b (or both a AND b) is true whole expression becomes false</div></li><li data-component="answer" id="csawesome2_2_qtnt5_7_opt_e"><div class="para" id="qtnt5_7-2-5-1-1">I, II, and III</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_7_opt_e"><div class="para" id="qtnt5_7-2-5-2-1">If either a or b (or both a AND b) is true whole expression becomes false</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.6.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt5_8" data-multipleanswers="false"><div class="para" id="qtnt5_8-1-1">12-6-8: Consider the following code segment. What will be the output after execution of this code segment?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int x = 10, y = 0;
while(x &gt; 5)
{
    y = 3;
    while(y &lt; x)
    {
        y *= 2;
        if( y % x == 1)
            y += x;
    }
    x -= 3
}
System.out.println(x + " " + y);
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt5_8_opt_a"><div class="para" id="qtnt5_8-2-1-1-1">1 6</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_8_opt_a"><div class="para" id="qtnt5_8-2-1-2-1">condition (y % x ==1) never true. Trace it out https://tinyurl.com/AP19-Q12</div></li><li data-component="answer" id="csawesome2_2_qtnt5_8_opt_b"><div class="para" id="qtnt5_8-2-2-1-1">7 12</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_8_opt_b"><div class="para" id="qtnt5_8-2-2-2-1">condition (y % x ==1) never true. Trace it out https://tinyurl.com/AP19-Q12</div></li><li data-component="answer" id="csawesome2_2_qtnt5_8_opt_c"><div class="para" id="qtnt5_8-2-3-1-1">-3 12</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_8_opt_c"><div class="para" id="qtnt5_8-2-3-2-1">condition (y % x ==1) never true. Trace it out https://tinyurl.com/AP19-Q12</div></li><li data-component="answer" id="csawesome2_2_qtnt5_8_opt_d" data-correct=""><div class="para" id="qtnt5_8-2-4-1-1">4 12</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_8_opt_d"><div class="para" id="qtnt5_8-2-4-2-1">condition (y % x ==1) never true</div></li><li data-component="answer" id="csawesome2_2_qtnt5_8_opt_e"><div class="para" id="qtnt5_8-2-5-1-1">-3 6</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_8_opt_e"><div class="para" id="qtnt5_8-2-5-2-1">condition (y % x ==1) never true. Trace it out https://tinyurl.com/AP19-Q12</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.6.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt5_9" data-multipleanswers="false"><div class="para" id="qtnt5_9-1-1">12-6-9: What value is stored in <code class="code-inline tex2jax_ignore">result</code> if:</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-none">int result = 13 - 3 * 6 / 4 % 3
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt5_9_opt_a"><div class="para" id="qtnt5_9-2-1-1-1">-5</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_9_opt_a"><div class="para" id="qtnt5_9-2-1-2-1">the %, *, and / all have the same precedence</div></li><li data-component="answer" id="csawesome2_2_qtnt5_9_opt_b"><div class="para" id="qtnt5_9-2-2-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_9_opt_b"><div class="para" id="qtnt5_9-2-2-2-1">the %, *, and / all have the same precedence</div></li><li data-component="answer" id="csawesome2_2_qtnt5_9_opt_c"><div class="para" id="qtnt5_9-2-3-1-1">13</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_9_opt_c"><div class="para" id="qtnt5_9-2-3-2-1">the %, *, and / all have the same precedence</div></li><li data-component="answer" id="csawesome2_2_qtnt5_9_opt_d"><div class="para" id="qtnt5_9-2-4-1-1">-1</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_9_opt_d"><div class="para" id="qtnt5_9-2-4-2-1">the %, *, and / all have the same precedence</div></li><li data-component="answer" id="csawesome2_2_qtnt5_9_opt_e" data-correct=""><div class="para" id="qtnt5_9-2-5-1-1">12</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_9_opt_e"><div class="para" id="qtnt5_9-2-5-2-1">the %, *, and / all have the same precedence</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.6.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt5_10" data-multipleanswers="false"><div class="para" id="qtnt5_10-1-1">12-6-10: Consider the following code segment. Assume <code class="code-inline tex2jax_ignore">k</code> is some positive integer greater than 2. How many times will “SMALL” be printed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-none">for(int i = 2; i &lt;= k; i++)
{
    if(arr[i] &lt; someValue)
       System.out.print("SMALL");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt5_10_opt_a"><div class="para" id="qtnt5_10-2-1-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_10_opt_a"><div class="para" id="qtnt5_10-2-1-2-1">k &gt; 2 so will print out "SMALL"</div></li><li data-component="answer" id="csawesome2_2_qtnt5_10_opt_b"><div class="para" id="qtnt5_10-2-2-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_10_opt_b"><div class="para" id="qtnt5_10-2-2-2-1">k can be greater than 3</div></li><li data-component="answer" id="csawesome2_2_qtnt5_10_opt_c" data-correct=""><div class="para" id="qtnt5_10-2-3-1-1">k -1</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_10_opt_c"><div class="para" id="qtnt5_10-2-3-2-1">max of k-1 iterations (end - start + 1 is k - 2 + 1)</div></li><li data-component="answer" id="csawesome2_2_qtnt5_10_opt_d"><div class="para" id="qtnt5_10-2-4-1-1">k -2</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_10_opt_d"><div class="para" id="qtnt5_10-2-4-2-1">it is &lt;= k so inclusive of k</div></li><li data-component="answer" id="csawesome2_2_qtnt5_10_opt_e"><div class="para" id="qtnt5_10-2-5-1-1">k</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_10_opt_e"><div class="para" id="qtnt5_10-2-5-2-1">max of k -1 iterations</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.6.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt5_11" data-multipleanswers="false"><div class="para" id="qtnt5_11-1-1">12-6-11: Which best describes what the <code class="code-inline tex2jax_ignore">printSomething</code> method below does?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-none">public void printSomething(String str)
{
    if(str.length() &gt; 0)
    {
        System.out.print(str.substring(0,1));
        printSomething(str.substring(1));
    }

}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt5_11_opt_a" data-correct=""><div class="para" id="qtnt5_11-2-1-1-1">It prints string str</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_11_opt_a"><div class="para" id="qtnt5_11-2-1-2-1">Prints out the leftmost character at the start of the recursive call. Then always trims off the left most character, but substring(x) with single parameter x gives the remaining string from index x until the end. See https://tinyurl.com/AP19-Q17</div></li><li data-component="answer" id="csawesome2_2_qtnt5_11_opt_b"><div class="para" id="qtnt5_11-2-2-1-1">It prints string str in reverse order</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_11_opt_b"><div class="para" id="qtnt5_11-2-2-2-1">substring(0,1) prints leftmost char not the rightmost char</div></li><li data-component="answer" id="csawesome2_2_qtnt5_11_opt_c"><div class="para" id="qtnt5_11-2-3-1-1">It prints only the first two characters of string str</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_11_opt_c"><div class="para" id="qtnt5_11-2-3-2-1">there is a recursive call of a substring at each iteration</div></li><li data-component="answer" id="csawesome2_2_qtnt5_11_opt_d"><div class="para" id="qtnt5_11-2-4-1-1">It prints only the first two characters of string str</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_11_opt_d"><div class="para" id="qtnt5_11-2-4-2-1">goes until s.length &gt; 0</div></li><li data-component="answer" id="csawesome2_2_qtnt5_11_opt_e"><div class="para" id="qtnt5_11-2-5-1-1">It prints only the last character of string str</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_11_opt_e"><div class="para" id="qtnt5_11-2-5-2-1">goes until s.length &gt; 0 and there are recursive calculates</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.6.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt5_12" data-multipleanswers="false"><div class="para" id="qtnt5_12-1-1">12-6-12: A square matrix is declared as</div> <div class="para" id="qtnt5_12-1-2"><code class="code-inline tex2jax_ignore">int[][] mat = new int [SIZE][SIZE]</code></div> <div class="para" id="qtnt5_12-1-3">where <code class="code-inline tex2jax_ignore">SIZE</code> is an appropriate integer constant. Consider the code below.</div> <div class="para" id="qtnt5_12-1-4">If mat is initialized to be:</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">2 6 3
4 5 1
7 1 2
</code></pre></div> <div class="para" id="qtnt5_12-1-6">What value will be returned by a call to <code class="code-inline tex2jax_ignore">sum(mat)</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-none">public static int sum(int[][] mat)
{
    int total = 0;
    for(int r = 0; r &lt; mat.length; r++)
    {
        for(int c = 0; c &lt;= r; c++)
        {
            total += mat[r][c];
        }
    }
    return total;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt5_12_opt_a"><div class="para" id="qtnt5_12-2-1-1-1">9</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_12_opt_a"><div class="para" id="qtnt5_12-2-1-2-1">Second for loop goes until colum &lt;= row index</div></li><li data-component="answer" id="csawesome2_2_qtnt5_12_opt_b"><div class="para" id="qtnt5_12-2-2-1-1">15</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_12_opt_b"><div class="para" id="qtnt5_12-2-2-2-1">Second for loop goes until colum &lt;= row index</div></li><li data-component="answer" id="csawesome2_2_qtnt5_12_opt_c"><div class="para" id="qtnt5_12-2-3-1-1">19</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_12_opt_c"><div class="para" id="qtnt5_12-2-3-2-1">Second for loop goes until colum &lt;= row index</div></li><li data-component="answer" id="csawesome2_2_qtnt5_12_opt_d" data-correct=""><div class="para" id="qtnt5_12-2-4-1-1">21</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_12_opt_d"><div class="para" id="qtnt5_12-2-4-2-1">adds the lower half of the matrix</div></li><li data-component="answer" id="csawesome2_2_qtnt5_12_opt_e"><div class="para" id="qtnt5_12-2-5-1-1">31</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_12_opt_e"><div class="para" id="qtnt5_12-2-5-2-1">Second for loop goes until colum &lt;= row index</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.6.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt5_13" data-multipleanswers="false">
                <div class="para" id="qtnt5_13-1-1">12-6-13: The elements of an array are to be sorted in increasing order. Which represent the first step of a merge sort algorithm?</div>
                <li data-component="answer" id="csawesome2_2_qtnt5_13_opt_a">
                  <div class="para" id="qtnt5_13-2-1-1-1">Find the smallest element in arr and swap it into arr[0]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt5_13_opt_a">
                  <div class="para" id="qtnt5_13-2-1-2-1">This is for selection sort</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt5_13_opt_b">
                  <div class="para" id="qtnt5_13-2-2-1-1">Compare arr[0] with arr[1] and, if necessary, shift and replace elements such that arr[0] is less than arr[1]</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt5_13_opt_b">
                  <div class="para" id="qtnt5_13-2-2-2-1">This is for bubble sort</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt5_13_opt_c">
                  <div class="para" id="qtnt5_13-2-3-1-1">Compare arr[0] with the middle element of arr, arr[mid] , and if arr[0] is less than arr[mid] , swap these elements</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt5_13_opt_c">
                  <div class="para" id="qtnt5_13-2-3-2-1">Merge sort deals with cutting sets into halves and repeating this process</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt5_13_opt_d">
                  <div class="para" id="qtnt5_13-2-4-1-1">Compare the first and last elements, and if the first is less than the last, swap   these elements.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt5_13_opt_d">
                  <div class="para" id="qtnt5_13-2-4-2-1">Merge sort deals with cutting sets into halves and repeating this process</div>
                </li>
                <li data-component="answer" id="csawesome2_2_qtnt5_13_opt_e" data-correct="">
                  <div class="para" id="qtnt5_13-2-5-1-1">Break the array into roughly two equal halves.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_qtnt5_13_opt_e">
                  <div class="para" id="qtnt5_13-2-5-2-1">Firs step is to cut sets in halves until you get to a single element in a ’set’</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.6.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt5_14" data-multipleanswers="false"><div class="para" id="qtnt5_14-1-1">12-6-14: Which of the following could replace the body of <code class="code-inline tex2jax_ignore">compute</code> so it does the same thing.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-none">public static int compute(int n)
{
    for(int i = 1; i &lt; 4; i++)
    {
        n *= n;
    }
    return n;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt5_14_opt_a"><div class="para" id="qtnt5_14-2-1-1-1">return 4 * n;</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_14_opt_a"><div class="para" id="qtnt5_14-2-1-2-1">3 iterations of the loop and each loop does  n^2</div></li><li data-component="answer" id="csawesome2_2_qtnt5_14_opt_b"><div class="para" id="qtnt5_14-2-2-1-1">return 8 * n;</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_14_opt_b"><div class="para" id="qtnt5_14-2-2-2-1">3 iterations of the loop and each loop does  n^2</div></li><li data-component="answer" id="csawesome2_2_qtnt5_14_opt_c"><div class="para" id="qtnt5_14-2-3-1-1">return 64 * n;</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_14_opt_c"><div class="para" id="qtnt5_14-2-3-2-1">3 iterations of the loop and each loop does  n^2</div></li><li data-component="answer" id="csawesome2_2_qtnt5_14_opt_d"><div class="para" id="qtnt5_14-2-4-1-1">return (int) Math.pow(n,4);</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_14_opt_d"><div class="para" id="qtnt5_14-2-4-2-1">3 iterations of the loop and each loop does  n^2</div></li><li data-component="answer" id="csawesome2_2_qtnt5_14_opt_e" data-correct=""><div class="para" id="qtnt5_14-2-5-1-1">return (int) Math.pow(n,8);</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_14_opt_e"><div class="para" id="qtnt5_14-2-5-2-1">Method basically does (n^2)^3 which is the same as n ^ 8</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.6.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt5_15" data-multipleanswers="false"><div class="para" id="qtnt5_15-1-1">12-6-15: How many times will the <code class="code-inline tex2jax_ignore">asterik("*")</code> be printed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-none">for(int k = 4; k &lt; 10; k +=2)
{
    for(int j = 1; j &lt;= 5; j++)
    {
        System.out.print("*");
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt5_15_opt_a"><div class="para" id="qtnt5_15-2-1-1-1">36</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_15_opt_a"><div class="para" id="qtnt5_15-2-1-2-1">Outer loop does gets incremented by 2, NOT by 1. Also, j starts at 1, NOT 0</div></li><li data-component="answer" id="csawesome2_2_qtnt5_15_opt_b"><div class="para" id="qtnt5_15-2-2-1-1">30</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_15_opt_b"><div class="para" id="qtnt5_15-2-2-2-1">Inner loop starts at 1 and is ends at 5 inclusive so exectues 5 times</div></li><li data-component="answer" id="csawesome2_2_qtnt5_15_opt_c"><div class="para" id="qtnt5_15-2-3-1-1">35</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_15_opt_c"><div class="para" id="qtnt5_15-2-3-2-1">Outer loop does gets incremented by 2, NOT by 1</div></li><li data-component="answer" id="csawesome2_2_qtnt5_15_opt_d" data-correct=""><div class="para" id="qtnt5_15-2-4-1-1">15</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_15_opt_d"><div class="para" id="qtnt5_15-2-4-2-1">Outerloop executes 3 times and inner loop executes 5 times.</div></li><li data-component="answer" id="csawesome2_2_qtnt5_15_opt_e"><div class="para" id="qtnt5_15-2-5-1-1">18</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_15_opt_e"><div class="para" id="qtnt5_15-2-5-2-1">See http://tinyurl.com/AP19-Q23</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.6.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt5_16" data-multipleanswers="false"><div class="para" id="qtnt5_16-1-1">12-6-16: Consider the following code. What is printed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">class Dog
{

    public void act()
    {
        System.out.print("run ");
        eat();
    }

    public void eat()
    {
        System.out.print("eat ");
    }
}

public class UnderDog extends Dog
{

    public void act()
    {
        super.act();
        System.out.print("sleep ");
    }

    public void eat()
    {
        super.eat();
        System.out.print("bark ");
    }

    public static void main(String[] args)
    {
        Dog fido = new UnderDog();
        fido.act();
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt5_16_opt_a"><div class="para" id="qtnt5_16-2-1-1-1">run eat</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_16_opt_a"><div class="para" id="qtnt5_16-2-1-2-1">Because the fido is an "Underdog", we will call the eat() from class Underdog, http://tinyurl.com/AP19-Q25</div></li><li data-component="answer" id="csawesome2_2_qtnt5_16_opt_b"><div class="para" id="qtnt5_16-2-2-1-1">run eat sleep</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_16_opt_b"><div class="para" id="qtnt5_16-2-2-2-1">Because the fido is an "Underdog", we will call the eat() from class Underdog, http://tinyurl.com/AP19-Q25</div></li><li data-component="answer" id="csawesome2_2_qtnt5_16_opt_c"><div class="para" id="qtnt5_16-2-3-1-1">run eat sleep bark</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_16_opt_c"><div class="para" id="qtnt5_16-2-3-2-1">Because the fido is an "Underdog", we will call the eat() from class Underdog, http://tinyurl.com/AP19-Q25</div></li><li data-component="answer" id="csawesome2_2_qtnt5_16_opt_d" data-correct=""><div class="para" id="qtnt5_16-2-4-1-1">run eat bark sleep</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_16_opt_d"><div class="para" id="qtnt5_16-2-4-2-1">Because the fido is an "Underdog", we will call the eat() from class Underdog, http://tinyurl.com/AP19-Q25</div></li><li data-component="answer" id="csawesome2_2_qtnt5_16_opt_e"><div class="para" id="qtnt5_16-2-5-1-1">Nothing is printed due to infinite recursion</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_16_opt_e"><div class="para" id="qtnt5_16-2-5-2-1">Because the fido is an "Underdog", we will call the eat() from class Underdog, http://tinyurl.com/AP19-Q25</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.6.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt5_17" data-multipleanswers="false"><div class="para" id="qtnt5_17-1-1">12-6-17: What is the output of the <code class="code-inline tex2jax_ignore">System.out.println</code> statement?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-none">int x = 3, y = -2;
while(x &gt; y)
{
    x--;
    y++;
}
System.out.println(x - y);
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt5_17_opt_a" data-correct=""><div class="para" id="qtnt5_17-2-1-1-1">-1</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_17_opt_a"><div class="para" id="qtnt5_17-2-1-2-1">x becomes 0 and y becomes 1 so 0 - 1 = -1</div></li><li data-component="answer" id="csawesome2_2_qtnt5_17_opt_b"><div class="para" id="qtnt5_17-2-2-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_17_opt_b"><div class="para" id="qtnt5_17-2-2-2-1">make sure to do x-y and not y-x</div></li><li data-component="answer" id="csawesome2_2_qtnt5_17_opt_c"><div class="para" id="qtnt5_17-2-3-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_17_opt_c"><div class="para" id="qtnt5_17-2-3-2-1">http://tinyurl.com/AP19-Q26</div></li><li data-component="answer" id="csawesome2_2_qtnt5_17_opt_d"><div class="para" id="qtnt5_17-2-4-1-1">-2</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_17_opt_d"><div class="para" id="qtnt5_17-2-4-2-1">http://tinyurl.com/AP19-Q26</div></li><li data-component="answer" id="csawesome2_2_qtnt5_17_opt_e"><div class="para" id="qtnt5_17-2-5-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_17_opt_e"><div class="para" id="qtnt5_17-2-5-2-1">http://tinyurl.com/AP19-Q26</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.6.18 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt5_18" data-multipleanswers="false"><div class="para" id="qtnt5_18-1-1">12-6-18: What will be the value of <code class="code-inline tex2jax_ignore">sum</code> after the execution of code above?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-none">int sum = 0;
for(int i = 0; i &lt; 3; i++)
{
    if((i % 2) - 1 ==0)
        sum += 3;
    else
        sum++;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt5_18_opt_a"><div class="para" id="qtnt5_18-2-1-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_18_opt_a"><div class="para" id="qtnt5_18-2-1-2-1">i%2 -1 ==0 means "is this number odd". See http://tinyurl.com/AP19-Q27</div></li><li data-component="answer" id="csawesome2_2_qtnt5_18_opt_b" data-correct=""><div class="para" id="qtnt5_18-2-2-1-1">5</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_18_opt_b"><div class="para" id="qtnt5_18-2-2-2-1">i%2 -1 ==0 means "is this number odd". See http://tinyurl.com/AP19-Q27</div></li><li data-component="answer" id="csawesome2_2_qtnt5_18_opt_c"><div class="para" id="qtnt5_18-2-3-1-1">6</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_18_opt_c"><div class="para" id="qtnt5_18-2-3-2-1">i%2 -1 ==0 means "is this number odd". See http://tinyurl.com/AP19-Q27</div></li><li data-component="answer" id="csawesome2_2_qtnt5_18_opt_d"><div class="para" id="qtnt5_18-2-4-1-1">7</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_18_opt_d"><div class="para" id="qtnt5_18-2-4-2-1">i%2 -1 ==0 means "is this number odd". See http://tinyurl.com/AP19-Q27</div></li><li data-component="answer" id="csawesome2_2_qtnt5_18_opt_e"><div class="para" id="qtnt5_18-2-5-1-1">8</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_18_opt_e"><div class="para" id="qtnt5_18-2-5-2-1">i%2 -1 ==0 means "is this number odd". See http://tinyurl.com/AP19-Q27</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 7.6.19 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_qtnt5_19" data-multipleanswers="false"><div class="para" id="qtnt5_19-1-1">12-6-19: What is printed out by the following code?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-none">String s = "Computer Science is fun!";
String s1 = s.substring(0,8);
String s2 = s1.substring(1);
String s3 = s2.substring(1,3);

System.out.println(s3);
</code></pre></div><li data-component="answer" id="csawesome2_2_qtnt5_19_opt_a"><div class="para" id="qtnt5_19-2-1-1-1">mput</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_19_opt_a"><div class="para" id="qtnt5_19-2-1-2-1">The .substring() function is inclusive left, exclusive right. Also if passed a single parameter it will take that as the starting index for the substring up to the rest of the string.</div></li><li data-component="answer" id="csawesome2_2_qtnt5_19_opt_b"><div class="para" id="qtnt5_19-2-2-1-1">mpu</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_19_opt_b"><div class="para" id="qtnt5_19-2-2-2-1">The .substring() function is inclusive left, exclusive right. Also if passed a single parameter it will take that as the starting index for the substring up to the rest of the string.</div></li><li data-component="answer" id="csawesome2_2_qtnt5_19_opt_c" data-correct=""><div class="para" id="qtnt5_19-2-3-1-1">mp</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_19_opt_c"><div class="para" id="qtnt5_19-2-3-2-1">The .substring() function is inclusive left, exclusive right. Also if passed a single parameter it will take that as the starting index for the substring up to the rest of the string.</div></li><li data-component="answer" id="csawesome2_2_qtnt5_19_opt_d"><div class="para" id="qtnt5_19-2-4-1-1">omp</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_19_opt_d"><div class="para" id="qtnt5_19-2-4-2-1">The .substring() function is inclusive left, exclusive right. Also if passed a single parameter it will take that as the starting index for the substring up to the rest of the string.</div></li><li data-component="answer" id="csawesome2_2_qtnt5_19_opt_e"><div class="para" id="qtnt5_19-2-5-1-1">Om</div></li><li data-component="feedback" id="csawesome2_2_qtnt5_19_opt_e"><div class="para" id="qtnt5_19-2-5-2-1">The .substring() function is inclusive left, exclusive right. Also if passed a single parameter it will take that as the starting index for the substring up to the rest of the string.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-000684</id>
      <title>Exercises</title>
    </subchapter>
  </chapter>
  <chapter>
    <id>csawesome2-12</id>
    <title>Timed Multiple-Choice Exams</title>
    <subchapter>
      <id>practice-exam-1-for-the-ap-csa-exam</id>
      <title>Practice Exam 1 for the AP CSA Exam</title>
      <question optional="yes">
        <label>Exercise 8.1.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe1_1" data-multipleanswers="false"><div class="para" id="pe1_1-1-1">13-1-1: Given the following method.  What is the output when <code class="code-inline tex2jax_ignore">m1(5)</code> is called?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public int m1 (int a)
{
   if (a == 1)
      return 10;
   else
      return 10 + m1 (a – 1);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe1_1_opt_a" data-correct=""><div class="para" id="pe1_1-2-1-1-1">50</div></li><li data-component="feedback" id="csawesome2_2_pe1_1_opt_a"><div class="para" id="pe1_1-2-1-2-1">This is a recursive method.  It will return 10 when a is equal to 1, otherwise it will do a recursive call.  Each call adds 10.</div></li><li data-component="answer" id="csawesome2_2_pe1_1_opt_b"><div class="para" id="pe1_1-2-2-1-1">20</div></li><li data-component="feedback" id="csawesome2_2_pe1_1_opt_b"><div class="para" id="pe1_1-2-2-2-1">This would be true if the call was m(2).</div></li><li data-component="answer" id="csawesome2_2_pe1_1_opt_c"><div class="para" id="pe1_1-2-3-1-1">60</div></li><li data-component="feedback" id="csawesome2_2_pe1_1_opt_c"><div class="para" id="pe1_1-2-3-2-1">This would be true if the call was m(6).</div></li><li data-component="answer" id="csawesome2_2_pe1_1_opt_d"><div class="para" id="pe1_1-2-4-1-1">10</div></li><li data-component="feedback" id="csawesome2_2_pe1_1_opt_d"><div class="para" id="pe1_1-2-4-2-1">This would be true if the call was m(1).</div></li><li data-component="answer" id="csawesome2_2_pe1_1_opt_e"><div class="para" id="pe1_1-2-5-1-1">30</div></li><li data-component="feedback" id="csawesome2_2_pe1_1_opt_e"><div class="para" id="pe1_1-2-5-2-1">This would be true if the call was m(3).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.1.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe1_2" data-multipleanswers="false"><div class="para" id="pe1_2-1-1">13-1-2: What will the following code print when it is executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int j = 1; j &lt;= 3; j++)
{
   for (int k = 1; k &lt; 4; k++)
      System.out.print(j * k + " ");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe1_2_opt_a"><div class="para" id="pe1_2-2-1-1-1">1 2 3 2 4 6</div></li><li data-component="feedback" id="csawesome2_2_pe1_2_opt_a"><div class="para" id="pe1_2-2-1-2-1">This would be true if it was j &lt; 3.</div></li><li data-component="answer" id="csawesome2_2_pe1_2_opt_b" data-correct=""><div class="para" id="pe1_2-2-2-1-1">1 2 3 2 4 6 3 6 9</div></li><li data-component="feedback" id="csawesome2_2_pe1_2_opt_b"><div class="para" id="pe1_2-2-2-2-1">The variable j will range from 1 to 3 and k will range from 1 to 3.</div></li><li data-component="answer" id="csawesome2_2_pe1_2_opt_c"><div class="para" id="pe1_2-2-3-1-1">1 2 2 4 3 6</div></li><li data-component="feedback" id="csawesome2_2_pe1_2_opt_c"><div class="para" id="pe1_2-2-3-2-1">This would be true if it was k &lt;= 3.</div></li><li data-component="answer" id="csawesome2_2_pe1_2_opt_d"><div class="para" id="pe1_2-2-4-1-1">1 2 3 4 2 4 6 8 3 6 9 12</div></li><li data-component="feedback" id="csawesome2_2_pe1_2_opt_d"><div class="para" id="pe1_2-2-4-2-1">This would be true if it was k &lt;= 4.</div></li><li data-component="answer" id="csawesome2_2_pe1_2_opt_e"><div class="para" id="pe1_2-2-5-1-1">0 1 2 3 0 2 4 6 0 3 6 9</div></li><li data-component="feedback" id="csawesome2_2_pe1_2_opt_e"><div class="para" id="pe1_2-2-5-2-1">This would be true if k started at 0 instead of 1.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.1.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe1_3" data-multipleanswers="false"><div class="para" id="pe1_3-1-1">13-1-3: What value is returned as the result of <code class="code-inline tex2jax_ignore">mystery(7)</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public int mystery(int n)
{
   if (n == 0)
       return 1;
   else
       return 2 * mystery (n - 1);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe1_3_opt_a" data-correct=""><div class="para" id="pe1_3-2-1-1-1">128</div></li><li data-component="feedback" id="csawesome2_2_pe1_3_opt_a"><div class="para" id="pe1_3-2-1-2-1">This is the result of mystery(7) since this method is 2 to the nth power.</div></li><li data-component="answer" id="csawesome2_2_pe1_3_opt_b"><div class="para" id="pe1_3-2-2-1-1">256</div></li><li data-component="feedback" id="csawesome2_2_pe1_3_opt_b"><div class="para" id="pe1_3-2-2-2-1">This would be the result of mystery(8).</div></li><li data-component="answer" id="csawesome2_2_pe1_3_opt_c"><div class="para" id="pe1_3-2-3-1-1">64</div></li><li data-component="feedback" id="csawesome2_2_pe1_3_opt_c"><div class="para" id="pe1_3-2-3-2-1">This would be the result of mystery(6).</div></li><li data-component="answer" id="csawesome2_2_pe1_3_opt_d"><div class="para" id="pe1_3-2-4-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_pe1_3_opt_d"><div class="para" id="pe1_3-2-4-2-1">This would be the result of mystery(1).</div></li><li data-component="answer" id="csawesome2_2_pe1_3_opt_e"><div class="para" id="pe1_3-2-5-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_pe1_3_opt_e"><div class="para" id="pe1_3-2-5-2-1">This would be the result of mystery(0).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.1.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe1_4" data-multipleanswers="false"><div class="para" id="pe1_4-1-1">13-1-4: Given the following code.  Which of the following would return true?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">Integer int1 = new Integer(3);
Integer int2 = new Integer(3);
Integer int3 = int2;

I. (int3.equals(int2))
II. (int1.equals(int2))
III. (int3 == int2)
IV. (int1 == int2)
V. (int2 == int3)
</code></pre></div><li data-component="answer" id="csawesome2_2_pe1_4_opt_a"><div class="para" id="pe1_4-2-1-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_pe1_4_opt_a"><div class="para" id="pe1_4-2-1-2-1">How about III and V?  Since int3 was set to int2 they do refer to the same object.</div></li><li data-component="answer" id="csawesome2_2_pe1_4_opt_b" data-correct=""><div class="para" id="pe1_4-2-2-1-1">I, II, III, and V</div></li><li data-component="feedback" id="csawesome2_2_pe1_4_opt_b"><div class="para" id="pe1_4-2-2-2-1">The variables int1 and int2 refer to two different objects (even though they have the same value) so IV will be false.</div></li><li data-component="answer" id="csawesome2_2_pe1_4_opt_c"><div class="para" id="pe1_4-2-3-1-1">All will return true</div></li><li data-component="feedback" id="csawesome2_2_pe1_4_opt_c"><div class="para" id="pe1_4-2-3-2-1">Look at IV.  Are int1 and int2 referring to the same object?</div></li><li data-component="answer" id="csawesome2_2_pe1_4_opt_d"><div class="para" id="pe1_4-2-4-1-1">I, II, and III only</div></li><li data-component="feedback" id="csawesome2_2_pe1_4_opt_d"><div class="para" id="pe1_4-2-4-2-1">V is also true.</div></li><li data-component="answer" id="csawesome2_2_pe1_4_opt_e"><div class="para" id="pe1_4-2-5-1-1">III, IV, and V only</div></li><li data-component="feedback" id="csawesome2_2_pe1_4_opt_e"><div class="para" id="pe1_4-2-5-2-1">I and II are also true since they have the same value.  IV is not since they don’t refere to the same object.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.1.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe1_5" data-multipleanswers="false">
                <div class="para" id="pe1_5-1-1">13-1-5: Under which of these conditions will a sequential search be faster than a binary search?</div>
                <li data-component="answer" id="csawesome2_2_pe1_5_opt_a">
                  <div class="para" id="pe1_5-2-1-1-1">The search value is not in the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe1_5_opt_a">
                  <div class="para" id="pe1_5-2-1-2-1">If the search value is not in the array, a sequential search will have to check every item in the array before failing, a binary search will be faster.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe1_5_opt_b">
                  <div class="para" id="pe1_5-2-2-1-1">The search value is the last element in the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe1_5_opt_b">
                  <div class="para" id="pe1_5-2-2-2-1">In this case a sequential search will have to check every element before finding the correct one, whereas a binary search will not.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe1_5_opt_c">
                  <div class="para" id="pe1_5-2-3-1-1">The value is in the middle of the array.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe1_5_opt_c">
                  <div class="para" id="pe1_5-2-3-2-1">This would be true for a binary search, not for a sequential search.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe1_5_opt_d" data-correct="">
                  <div class="para" id="pe1_5-2-4-1-1">The search value is the first element in the array.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe1_5_opt_d">
                  <div class="para" id="pe1_5-2-4-2-1">Only when the search value is the first item in the array, and thus the first value encountered in sequential search, will sequential be faster than binary.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe1_5_opt_e">
                  <div class="para" id="pe1_5-2-5-1-1">Sequential search can never be faster than binary search.</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe1_5_opt_e">
                  <div class="para" id="pe1_5-2-5-2-1">When the search value is the first element, sequential will always be faster, as it will only need to check one element whereas a binary search would start in the middle of the array and have to keep looking.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.1.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe1_6" data-multipleanswers="false"><div class="para" id="pe1_6-1-1">13-1-6: There is a method called <code class="code-inline tex2jax_ignore">checkString</code> that determines whether a string is the same forwards and backwards. The following data sets can be used for testing the method.  Which is a best set of test cases?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">Data set 1: "aba", "abba", "aBa", "z"
Data set 2: "bcb", "bcd", "c"
</code></pre></div><li data-component="answer" id="csawesome2_2_pe1_6_opt_a"><div class="para" id="pe1_6-2-1-1-1">Data set 1 since it has more test cases.</div></li><li data-component="feedback" id="csawesome2_2_pe1_6_opt_a"><div class="para" id="pe1_6-2-1-2-1">More test cases isn’t necessarily better.  The tests should test the range of possible outcomes.</div></li><li data-component="answer" id="csawesome2_2_pe1_6_opt_b"><div class="para" id="pe1_6-2-2-1-1">Data set 2 since it only contains strings with lower case characters.</div></li><li data-component="feedback" id="csawesome2_2_pe1_6_opt_b"><div class="para" id="pe1_6-2-2-2-1">It is actually better to test with strings that contain both upper and lower case characters.</div></li><li data-component="answer" id="csawesome2_2_pe1_6_opt_c"><div class="para" id="pe1_6-2-3-1-1">There are no advantages.</div></li><li data-component="feedback" id="csawesome2_2_pe1_6_opt_c"><div class="para" id="pe1_6-2-3-2-1">Data set 1 only contains cases that should return true.  How about checking cases that should return false?</div></li><li data-component="answer" id="csawesome2_2_pe1_6_opt_d"><div class="para" id="pe1_6-2-4-1-1">Data set 1 since it has test cases with both upper and lower case characters.</div></li><li data-component="feedback" id="csawesome2_2_pe1_6_opt_d"><div class="para" id="pe1_6-2-4-2-1">There is a better answer.  While it is good to test with strings that contain both upper and lower case characters there is another reason why data set 2 is better.</div></li><li data-component="answer" id="csawesome2_2_pe1_6_opt_e" data-correct=""><div class="para" id="pe1_6-2-5-1-1">Data set 2 since it contains strings which should return true and should return false.</div></li><li data-component="feedback" id="csawesome2_2_pe1_6_opt_e"><div class="para" id="pe1_6-2-5-2-1">You want to test all possible results and data set 1 only contains strings that should return true.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.1.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe1_7" data-multipleanswers="false"><div class="para" id="pe1_7-1-1">13-1-7: Which of the following code will produce this output:</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">1
22
333
4444
55555

I.

for (int i = 0; i &lt; 5; i++)
{
   for (int j = 0; j &lt; i; j++)
   {
      System.out.print(i);
   }
   System.out.println();
}

II.

for (int i = 1; i &lt; 5; i++)
{
   for (int j = i; j &gt; 0; j--)
   {
      System.out.print(i);
   }
   System.out.println();
}

III.

for (int i  = 1; i &lt;= 5; i++)
{
   for (int j = i; j &gt; 0; j--)
   {
      System.out.print(i);
   }
   System.out.println();
}

IV.

for (int i = 1; i &lt; 6; i++)
{
   for (int j = 0; j &lt; i; j++)
   {
      System.out.println(i);
   }
}

V.

for (int i = 0; i &lt; 5; i++)
{
   for (int j = 0; j &lt; i; j++)
   {
      System.out.print(i+1);
   }
   System.out.println();
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe1_7_opt_a"><div class="para" id="pe1_7-2-1-1-1">I</div></li><li data-component="feedback" id="csawesome2_2_pe1_7_opt_a"><div class="para" id="pe1_7-2-1-2-1">This will loop i from 0 to 4 and from j from 0 to i.  So, it won’t output any 5s.</div></li><li data-component="answer" id="csawesome2_2_pe1_7_opt_b"><div class="para" id="pe1_7-2-2-1-1">II</div></li><li data-component="feedback" id="csawesome2_2_pe1_7_opt_b"><div class="para" id="pe1_7-2-2-2-1">This will loop with i changing from 1 to 4 and j from i to 0.</div></li><li data-component="answer" id="csawesome2_2_pe1_7_opt_c" data-correct=""><div class="para" id="pe1_7-2-3-1-1">III</div></li><li data-component="feedback" id="csawesome2_2_pe1_7_opt_c"><div class="para" id="pe1_7-2-3-2-1">This will loop with i changing from 1 to 5 and then for each I, j will loop from i to 0 printing the value of i and then a new line.</div></li><li data-component="answer" id="csawesome2_2_pe1_7_opt_d"><div class="para" id="pe1_7-2-4-1-1">IV</div></li><li data-component="feedback" id="csawesome2_2_pe1_7_opt_d"><div class="para" id="pe1_7-2-4-2-1">This will loop with i changing from 1 to 5 and j from 0 to i but it will print each value on a different line.</div></li><li data-component="answer" id="csawesome2_2_pe1_7_opt_e"><div class="para" id="pe1_7-2-5-1-1">V</div></li><li data-component="feedback" id="csawesome2_2_pe1_7_opt_e"><div class="para" id="pe1_7-2-5-2-1">This will loop with i changing from 0 to 4 and j from 0 to i</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.1.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe1_8" data-multipleanswers="false"><div class="para" id="pe1_8-1-1">13-1-8: What will the following print?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">List&lt;Integer&gt; list1 = new ArrayList&lt;Integer&gt;();
list1.add(new Integer(5));
list1.add(new Integer(4));
list1.add(new Integer(3));
list1.set(2, new Integer(2));
list1.add(2, new Integer(1));
list1.add(new Integer(0));
System.out.println(list1);
</code></pre></div><li data-component="answer" id="csawesome2_2_pe1_8_opt_a"><div class="para" id="pe1_8-2-1-1-1">[0, 1, 2, 3, 4, 5]</div></li><li data-component="feedback" id="csawesome2_2_pe1_8_opt_a"><div class="para" id="pe1_8-2-1-2-1">This code does not sort the items in the list and set replaces the value at that index.</div></li><li data-component="answer" id="csawesome2_2_pe1_8_opt_b"><div class="para" id="pe1_8-2-2-1-1">[0, 1, 2, 4, 5]</div></li><li data-component="feedback" id="csawesome2_2_pe1_8_opt_b"><div class="para" id="pe1_8-2-2-2-1">This code does not sort the items in the list.</div></li><li data-component="answer" id="csawesome2_2_pe1_8_opt_c"><div class="para" id="pe1_8-2-3-1-1">[5, 4, 1, 0]</div></li><li data-component="feedback" id="csawesome2_2_pe1_8_opt_c"><div class="para" id="pe1_8-2-3-2-1">There is only one set. The add moves all current values at the index and above to the right one before adding at that index.</div></li><li data-component="answer" id="csawesome2_2_pe1_8_opt_d"><div class="para" id="pe1_8-2-4-1-1">[5, 4, 2, 1, 0]</div></li><li data-component="feedback" id="csawesome2_2_pe1_8_opt_d"><div class="para" id="pe1_8-2-4-2-1">The add moves over all items at that index before adding the value at the index.</div></li><li data-component="answer" id="csawesome2_2_pe1_8_opt_e" data-correct=""><div class="para" id="pe1_8-2-5-1-1">[5, 4, 1, 2, 0]</div></li><li data-component="feedback" id="csawesome2_2_pe1_8_opt_e"><div class="para" id="pe1_8-2-5-2-1">The add method with one parameters will add that value to end of the list.  The method set changes the value at that index in the list.  The method add with an index will move anything at the index or above one to the right and then set the value of that index.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.1.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe1_9" data-multipleanswers="false"><div class="para" id="pe1_9-1-1">13-1-9: Consider the following declaration for a class that will be used to represent points in the xy-coordinate plane.  Which of these constructors would be legal for the NamedPoint class?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java"> public class Point
 {
    private int myX; // coordinates
    private int myY;

    public Point( )
    {
       myX = 0;
       myY = 0;
    }

    public Point(int a, int b)
    {
       myX = a;
       myY = b;
    }

    // ... other methods not shown

 }

 // The following incomplete class declaration is intended to extend the
 // above class so that two-dimensional points can be named.

 public class NamedPoint extends Point
 {
    private String myName;
    // constructors go here
    // ... other methods not shown
 }

Proposed Constructors:

I.   public NamedPoint()
     {
        myName = "";
     }
II.  public NamedPoint(int d1, int d2, String name)
     {
        myX = d1;
        myY = d2;
        myName = name;
     }
III. public NamedPoint(int d1, int d2, String name)
     {
        super(d1, d2);
        myName = name;
     }
</code></pre></div><li data-component="answer" id="csawesome2_2_pe1_9_opt_a" data-correct=""><div class="para" id="pe1_9-2-1-1-1">I and III</div></li><li data-component="feedback" id="csawesome2_2_pe1_9_opt_a"><div class="para" id="pe1_9-2-1-2-1">NamedPoint will inherit from Point all fields but the fields are private and they can not be directly accessed in NamedPoint.  You can use super as the first line in a constructor to initialize inherited fields.  You can also set your own fields in a constructor.  If you don’t use super as the first line in a constructor one will be put there by the compiler that will call the parent’s no argument constructor.</div></li><li data-component="answer" id="csawesome2_2_pe1_9_opt_b"><div class="para" id="pe1_9-2-2-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_pe1_9_opt_b"><div class="para" id="pe1_9-2-2-2-1">I is okay but III is also okay.</div></li><li data-component="answer" id="csawesome2_2_pe1_9_opt_c"><div class="para" id="pe1_9-2-3-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_pe1_9_opt_c"><div class="para" id="pe1_9-2-3-2-1">II is invalid.  Children inherit all of the fields from a parent but do not have direct access to private fields.  You can use super in a constructor to initialize inherited fields by calling the parent’s constructor with the same parameter list.</div></li><li data-component="answer" id="csawesome2_2_pe1_9_opt_d"><div class="para" id="pe1_9-2-4-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_pe1_9_opt_d"><div class="para" id="pe1_9-2-4-2-1">I is also okay</div></li><li data-component="answer" id="csawesome2_2_pe1_9_opt_e"><div class="para" id="pe1_9-2-5-1-1">I and II</div></li><li data-component="feedback" id="csawesome2_2_pe1_9_opt_e"><div class="para" id="pe1_9-2-5-2-1">I is okay but II is invalid.  Children inherit all of the fields from a parent but do not have direct access to private fields.  You can use super in a constructor to initialize inherited fields by calling the parent’s constructor with the same parameter list.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.1.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe1_10" data-multipleanswers="false"><div class="para" id="pe1_10-1-1">13-1-10: Given the following incomplete class declaration:</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java"> public class TimeRecord
 {
    private int hours;
    private int minutes; // 0&lt;=minutes&lt;60

    public TimeRecord(int h, int m)
    {
       hours = h;
       minutes = m;
    }

    // postcondition: returns the number of hours
    public int getHours()
    { /* implementation not shown */ }

    // postcondition: returns the number
    // of minutes; 0 &lt;= minutes &lt; 60
    public int getMinutes()
    { /* implementation not shown */ }

    // precondition: h &gt;= 0; m &gt;= 0
    // postcondition: adds h hours and
    // m minutes to this TimeRecord
    public void advance(int h, int m)
    {
       hours = hours + h;
       minutes = minutes + m;
       /* missing code */
    }

    // ... other methods not shown
 }

 // Consider the following declaration that appears in a client program:

 TimeRecord[] timeCards = new TimeRecord[100];


// Assume that timeCards has been initialized with TimeRecord
// objects. Consider the following code segment that is intended to compute
// the total of all the times stored in timeCards.

 TimeRecord total = new TimeRecord(0,0);
 for (int k = 0; k &lt; timeCards.length; k++)
 {
    /* missing expression */
 }

 Which of the following can be used to replace /* missing expression */ so that the code segment will work as intended?

 I.
    total.advance(timeCards[k].getHours(), timeCards[k].getMinutes());

 II.
    timeCards[k].advance();

 III.
    total += timeCards[k].advance();

 IV.
    total.advance(timeCards[k].hours, timeCards[k].minutes);

 V.
    timeCards[k].advance(timeCards[k].getHours(), timeCards[k].getMinutes());
</code></pre></div><li data-component="answer" id="csawesome2_2_pe1_10_opt_a" data-correct=""><div class="para" id="pe1_10-2-1-1-1">I</div></li><li data-component="feedback" id="csawesome2_2_pe1_10_opt_a"><div class="para" id="pe1_10-2-1-2-1">This will add each current time card hours and minutes to the total.</div></li><li data-component="answer" id="csawesome2_2_pe1_10_opt_b"><div class="para" id="pe1_10-2-2-1-1">II</div></li><li data-component="feedback" id="csawesome2_2_pe1_10_opt_b"><div class="para" id="pe1_10-2-2-2-1">This won’t total the hours and minutes and there is no advance method that takes no arguments.</div></li><li data-component="answer" id="csawesome2_2_pe1_10_opt_c"><div class="para" id="pe1_10-2-3-1-1">III</div></li><li data-component="feedback" id="csawesome2_2_pe1_10_opt_c"><div class="para" id="pe1_10-2-3-2-1">There is no advance method that takes no arguments and it doesn’t return a value to add to a total.</div></li><li data-component="answer" id="csawesome2_2_pe1_10_opt_d"><div class="para" id="pe1_10-2-4-1-1">IV</div></li><li data-component="feedback" id="csawesome2_2_pe1_10_opt_d"><div class="para" id="pe1_10-2-4-2-1">The fields hours and minutes are private and can’t be accessed directly in another class.</div></li><li data-component="answer" id="csawesome2_2_pe1_10_opt_e"><div class="para" id="pe1_10-2-5-1-1">V</div></li><li data-component="feedback" id="csawesome2_2_pe1_10_opt_e"><div class="para" id="pe1_10-2-5-2-1">This will add the hour and minutes from the current time record to itself.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.1.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe1_11" data-multipleanswers="false"><div class="para" id="pe1_11-1-1">13-1-11: Consider the following class definitions, which of the following can replace the missing code?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class ContactInfo
{
   private String name;
   private String phoneNumber;

   public ContactInfo(String theName, String thePhoneNumber)
   {
      this.name = theName;
      this.phoneNumber = thePhoneNumber;
   }

   public String getName() { return name; }

   public String getPhoneNumber() { return phoneNumber; }
}

public class ExtendedContactInfo extends ContactInfo
{
   private String nickname;

   public ExtendedContactInfo (String theNickname,
                               String theName,
                               String thePhoneNumber)
   {
      // missing code
   }
}

I.
   super(theNickname, theName, thePhoneNumber);

II.
   this.name = theName;
   this.phoneNumber = thePhoneNumber;
   this.nickname = theNickname;

III.
   this.nickname = theNickname;
   this.name = theName;
   this.phoneNumber = thePhoneNumber;

IV.
   this.nickname = theNickname;
   this.name = theName;
   this.phoneNumber = thePhoneNumber;

V.
   super(theName,thePhoneNumber);
   this.nickname = theNickname;
</code></pre></div><li data-component="answer" id="csawesome2_2_pe1_11_opt_a"><div class="para" id="pe1_11-2-1-1-1">I</div></li><li data-component="feedback" id="csawesome2_2_pe1_11_opt_a"><div class="para" id="pe1_11-2-1-2-1">There is no parent constructor which takes all three of these parameters.</div></li><li data-component="answer" id="csawesome2_2_pe1_11_opt_b"><div class="para" id="pe1_11-2-2-1-1">II</div></li><li data-component="feedback" id="csawesome2_2_pe1_11_opt_b"><div class="para" id="pe1_11-2-2-2-1">You can not access private inherited fields directly.  You can either use public method to get and set their values or invoke the parent’s constructor using super(paramList) as the first line of code in a constructor.</div></li><li data-component="answer" id="csawesome2_2_pe1_11_opt_c"><div class="para" id="pe1_11-2-3-1-1">III</div></li><li data-component="feedback" id="csawesome2_2_pe1_11_opt_c"><div class="para" id="pe1_11-2-3-2-1">You can not access private inherited fields directly.  You can either use public method to get and set their values or invoke the parent’s constructor using super(paramList) as the first line of code in a constructor.</div></li><li data-component="answer" id="csawesome2_2_pe1_11_opt_d"><div class="para" id="pe1_11-2-4-1-1">IV</div></li><li data-component="feedback" id="csawesome2_2_pe1_11_opt_d"><div class="para" id="pe1_11-2-4-2-1">You can not access private inherited fields directly.  You can either use public method to get and set their values or invoke the parent’s constructor using super(paramList) as the first line of code in a constructor.</div></li><li data-component="answer" id="csawesome2_2_pe1_11_opt_e" data-correct=""><div class="para" id="pe1_11-2-5-1-1">V</div></li><li data-component="feedback" id="csawesome2_2_pe1_11_opt_e"><div class="para" id="pe1_11-2-5-2-1">To initialize inherited private fields you can use the parent’s constructor.  Use super followed by the parameter list as the first line of code in the constructor.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.1.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe1_12" data-multipleanswers="false">
                <div class="para" id="pe1_12-1-1">13-1-12: Which will cause the longest execution of a sequential search looking for a value in an array of 10 integers?</div>
                <li data-component="answer" id="csawesome2_2_pe1_12_opt_a">
                  <div class="para" id="pe1_12-2-1-1-1">The value is the first one in the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe1_12_opt_a">
                  <div class="para" id="pe1_12-2-1-2-1">This would be true for the shortest execution.  This would only take one execution of the loop.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe1_12_opt_b">
                  <div class="para" id="pe1_12-2-2-1-1">The value is in the middle of the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe1_12_opt_b">
                  <div class="para" id="pe1_12-2-2-2-1">This would take 5 executions of the loop.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe1_12_opt_c">
                  <div class="para" id="pe1_12-2-3-1-1">The value is at position 3 in the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe1_12_opt_c">
                  <div class="para" id="pe1_12-2-3-2-1">This would take 3 executions of the loop.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe1_12_opt_d" data-correct="">
                  <div class="para" id="pe1_12-2-4-1-1">The value isn’t in the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe1_12_opt_d">
                  <div class="para" id="pe1_12-2-4-2-1">A sequential search loops through the elements of an array starting with the first and ending with the last and returns from the loop as soon as it finds the passed value.  It has to check every value in the array when the value it is looking for is not in the array.  This would take 10 executions of the loop.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe1_12_opt_e">
                  <div class="para" id="pe1_12-2-5-1-1">The value is at position 6 in the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe1_12_opt_e">
                  <div class="para" id="pe1_12-2-5-2-1">This would take 6 executions of the loop.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.1.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe1_13" data-multipleanswers="false"><div class="para" id="pe1_13-1-1">13-1-13: Which of the following reasons for using an inheritance hierarchy are valid?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">I.   Methods from a superclass can be used in a subclass without rewriting
     or copying code.
II.  Objects from subclasses can be passed as arguments to a method  designed
     for the superclass
III. Objects from subclasses can be stored in the same array
IV.  All of the above
V.   None of the above
</code></pre></div><li data-component="answer" id="csawesome2_2_pe1_13_opt_a" data-correct=""><div class="para" id="pe1_13-2-1-1-1">IV</div></li><li data-component="feedback" id="csawesome2_2_pe1_13_opt_a"><div class="para" id="pe1_13-2-1-2-1">All of these are valid reasons to use an inheritance heirarchy.</div></li><li data-component="answer" id="csawesome2_2_pe1_13_opt_b"><div class="para" id="pe1_13-2-2-1-1">V</div></li><li data-component="feedback" id="csawesome2_2_pe1_13_opt_b"><div class="para" id="pe1_13-2-2-2-1">In fact, all of the reasons listed are valid. Subclasses can reuse methods written for superclasses without code replication, subclasses can be stored in the same array, and passed as arguments to methods meant for the superclass.   All of which make writing code more streamlined.</div></li><li data-component="answer" id="csawesome2_2_pe1_13_opt_c"><div class="para" id="pe1_13-2-3-1-1">I and II</div></li><li data-component="feedback" id="csawesome2_2_pe1_13_opt_c"><div class="para" id="pe1_13-2-3-2-1">III is also valid. In some cases you might want to store subclasses together in a single array, and inheritance allows for this.</div></li><li data-component="answer" id="csawesome2_2_pe1_13_opt_d"><div class="para" id="pe1_13-2-4-1-1">I and III</div></li><li data-component="feedback" id="csawesome2_2_pe1_13_opt_d"><div class="para" id="pe1_13-2-4-2-1">II is also valid. In some cases a single method is applicable for a number of subclasses, and inheritance allows you to pass objects of the subclasses to the same method instead of writing individual methods for each subclass.</div></li><li data-component="answer" id="csawesome2_2_pe1_13_opt_e"><div class="para" id="pe1_13-2-5-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_pe1_13_opt_e"><div class="para" id="pe1_13-2-5-2-1">II and III are also valid, in some cases a single method is applicable for a number of subclasses, and inheritance allows you to pass all the subclasses to the same method instead of writing individual methods for each subclass and you might want to store subclasses together in a single array, and inheritance allows for this.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.1.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe1_14" data-multipleanswers="false"><div class="para" id="pe1_14-1-1">13-1-14: Consider the following method and if <code class="code-inline tex2jax_ignore">int[] a = {8, 3, 1}</code>, what is the value in <code class="code-inline tex2jax_ignore">a[1]</code> after <code class="code-inline tex2jax_ignore">m1(a);</code> is run?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public int m1(int[] a)
{
   a[1]--;
   return (a[1] * 2);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe1_14_opt_a"><div class="para" id="pe1_14-2-1-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_pe1_14_opt_a"><div class="para" id="pe1_14-2-1-2-1">This would be true if it was return(a[1]*= 2);.</div></li><li data-component="answer" id="csawesome2_2_pe1_14_opt_b"><div class="para" id="pe1_14-2-2-1-1">16</div></li><li data-component="feedback" id="csawesome2_2_pe1_14_opt_b"><div class="para" id="pe1_14-2-2-2-1">This would be true if the return statement was return (a[0]*=2);.</div></li><li data-component="answer" id="csawesome2_2_pe1_14_opt_c"><div class="para" id="pe1_14-2-3-1-1">7</div></li><li data-component="feedback" id="csawesome2_2_pe1_14_opt_c"><div class="para" id="pe1_14-2-3-2-1">This would be true if it was a[0]--;  Or it would be true if array indices started at 1, but they start with 0.</div></li><li data-component="answer" id="csawesome2_2_pe1_14_opt_d" data-correct=""><div class="para" id="pe1_14-2-4-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_pe1_14_opt_d"><div class="para" id="pe1_14-2-4-2-1">The statement a[1]--; is the same as a[1] = a[1] - 1; so this will change the 3 to a 2.  The return (a[1] * 2) does not change the value at a[1].</div></li><li data-component="answer" id="csawesome2_2_pe1_14_opt_e"><div class="para" id="pe1_14-2-5-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_pe1_14_opt_e"><div class="para" id="pe1_14-2-5-2-1">This can’t be true because a[1]--; means the same as a[1] = a[1] - 1;  So the 3 will become a 2.  Parameters are all pass by value in Java which means that a copy of the value is passed to a method.  But, since an array is an object a copy of the value is a copy of the reference to the object.  So changes to objects in methods are permanent.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.1.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe1_15" data-multipleanswers="false"><div class="para" id="pe1_15-1-1">13-1-15: What are the values of <code class="code-inline tex2jax_ignore">a</code> and <code class="code-inline tex2jax_ignore">b</code> after the <code class="code-inline tex2jax_ignore">for</code> loop finishes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int a = 10, b = 3, t;
for (int i=1; i&lt;=6; i++)
{
   t = a;
   a = i + b;
   b = t - i;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe1_15_opt_a"><div class="para" id="pe1_15-2-1-1-1">a = 6 and b = 7</div></li><li data-component="feedback" id="csawesome2_2_pe1_15_opt_a"><div class="para" id="pe1_15-2-1-2-1">This would be true if the loop stopped when i was equal to 6.</div></li><li data-component="answer" id="csawesome2_2_pe1_15_opt_b"><div class="para" id="pe1_15-2-2-1-1">a = 6 and b = 13</div></li><li data-component="feedback" id="csawesome2_2_pe1_15_opt_b"><div class="para" id="pe1_15-2-2-2-1">Actually i = 6 and t = 6 and a = 13 after the loop finishes.</div></li><li data-component="answer" id="csawesome2_2_pe1_15_opt_c" data-correct=""><div class="para" id="pe1_15-2-3-1-1">a = 13 and b = 0</div></li><li data-component="feedback" id="csawesome2_2_pe1_15_opt_c"><div class="para" id="pe1_15-2-3-2-1">The variable i loops from 1 to 6<br/>i = 1, t = 10, a = 4, b = 9<br/>i = 2, t = 4, a  = 11, b =2<br/>i = 3, t = 11, a = 5, b = 8<br/>i = 4, t = 5, a = 12, b = 1<br/>i = 5, t = 12, a = 6, b = 7<br/>i = 6, t = 6, a = 13, b = 0</div></li><li data-component="answer" id="csawesome2_2_pe1_15_opt_d"><div class="para" id="pe1_15-2-4-1-1">a = 6 and b = 0</div></li><li data-component="feedback" id="csawesome2_2_pe1_15_opt_d"><div class="para" id="pe1_15-2-4-2-1">Actually i = 6 and t = 6 and b = 0 after the loop finishes.</div></li><li data-component="answer" id="csawesome2_2_pe1_15_opt_e"><div class="para" id="pe1_15-2-5-1-1">a = 0 and b = 13</div></li><li data-component="feedback" id="csawesome2_2_pe1_15_opt_e"><div class="para" id="pe1_15-2-5-2-1">No a = 13 and b = 0 after the loop finishes.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.1.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe1_16" data-multipleanswers="false"><div class="para" id="pe1_16-1-1">13-1-16: Consider the following code.  What string is referenced by <code class="code-inline tex2jax_ignore">s1</code> after the code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String s1 = "Hi There";
String s2 = s1;
String s3 = s2;
String s4 = s1;
s2 = s2.toLowerCase();
s3 = s3.toUpperCase();
s4 = null;
</code></pre></div><li data-component="answer" id="csawesome2_2_pe1_16_opt_a"><div class="para" id="pe1_16-2-1-1-1">hi there</div></li><li data-component="feedback" id="csawesome2_2_pe1_16_opt_a"><div class="para" id="pe1_16-2-1-2-1">This would only be correct if we had s1 = s2; after s2.toLowerCase(); was executed.  Strings are immutable and so any change to a string returns a new string.</div></li><li data-component="answer" id="csawesome2_2_pe1_16_opt_b"><div class="para" id="pe1_16-2-2-1-1">HI THERE</div></li><li data-component="feedback" id="csawesome2_2_pe1_16_opt_b"><div class="para" id="pe1_16-2-2-2-1">This would be correct if we had s1 = s3; after s3.toUpperCase(); was executed.  Strings are immutable and so any change to a string returns a new string.</div></li><li data-component="answer" id="csawesome2_2_pe1_16_opt_c" data-correct=""><div class="para" id="pe1_16-2-3-1-1">Hi There</div></li><li data-component="feedback" id="csawesome2_2_pe1_16_opt_c"><div class="para" id="pe1_16-2-3-2-1">Strings are immutable meaning that any changes to a string creates and returns a new string, so the string referred to by s1 does not change</div></li><li data-component="answer" id="csawesome2_2_pe1_16_opt_d"><div class="para" id="pe1_16-2-4-1-1">null</div></li><li data-component="feedback" id="csawesome2_2_pe1_16_opt_d"><div class="para" id="pe1_16-2-4-2-1">This would be true if we had s1 = s4; after s4 = null; was executed.  Strings are immutable and so any changes to a string returns a new string.</div></li><li data-component="answer" id="csawesome2_2_pe1_16_opt_e"><div class="para" id="pe1_16-2-5-1-1">hI tHERE</div></li><li data-component="feedback" id="csawesome2_2_pe1_16_opt_e"><div class="para" id="pe1_16-2-5-2-1">Strings are immutable and so any changes to a string returns a new string.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.1.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe1_17" data-multipleanswers="false"><div class="para" id="pe1_17-1-1">13-1-17: Consider the following code segment.  What value is in sum after this code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int[][] matrix = { {1,1,2,2},{1,2,2,4},{1,2,3,4},{1,4,1,2}};

int sum = 0;
int col = matrix[0].length - 2;
for (int row = 0; row &lt; 4; row++)
{
   sum = sum + matrix[row][col];
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe1_17_opt_a"><div class="para" id="pe1_17-2-1-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_pe1_17_opt_a"><div class="para" id="pe1_17-2-1-2-1">This would be correct if the variable col was 0 because then it would add 1 + 1 + 1 + 1 which is 4.</div></li><li data-component="answer" id="csawesome2_2_pe1_17_opt_b" data-correct=""><div class="para" id="pe1_17-2-2-1-1">8</div></li><li data-component="feedback" id="csawesome2_2_pe1_17_opt_b"><div class="para" id="pe1_17-2-2-2-1">The variable col is 2, so it adds 2 + 2 + 3 + 1 which is 8.</div></li><li data-component="answer" id="csawesome2_2_pe1_17_opt_c"><div class="para" id="pe1_17-2-3-1-1">9</div></li><li data-component="feedback" id="csawesome2_2_pe1_17_opt_c"><div class="para" id="pe1_17-2-3-2-1">This would be correct if the variable col was 1 because then it would add 1 + 2 + 2 + 4 which is 9.</div></li><li data-component="answer" id="csawesome2_2_pe1_17_opt_d"><div class="para" id="pe1_17-2-4-1-1">12</div></li><li data-component="feedback" id="csawesome2_2_pe1_17_opt_d"><div class="para" id="pe1_17-2-4-2-1">This would be correct if the variable col was 3 becuase then it would add 2 + 4 + 4 + 2 which is 12.</div></li><li data-component="answer" id="csawesome2_2_pe1_17_opt_e"><div class="para" id="pe1_17-2-5-1-1">10</div></li><li data-component="feedback" id="csawesome2_2_pe1_17_opt_e"><div class="para" id="pe1_17-2-5-2-1">This would be true if we were adding the values in the 3rd row (row = 2) instead of the 3rd column.  This would be 1 + 2 + 3 + 4 which is 10.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.1.18 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe1_18" data-multipleanswers="false"><div class="para" id="pe1_18-1-1">13-1-18: Consider the following code segment, what are the contents of mat after the code segment has executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int [][] mat = new int [3][4];
for (int row = 0; row &lt; mat.length; row++)
{
   for (int col = 0; col &lt; mat[0].length; col++)
   {
      if (row &lt; col)
         mat[row][col] = 3;
      else if (row == col)
         mat[row][col] = 2;
      else
         mat[row][col] = 1;
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe1_18_opt_a"><div class="para" id="pe1_18-2-1-1-1">{ { 2, 1, 1, 1 }, { 2, 2, 1, 1 }, { 2, 2, 2, 1 } }</div></li><li data-component="feedback" id="csawesome2_2_pe1_18_opt_a"><div class="para" id="pe1_18-2-1-2-1">This would be true if it was filling mat with 1 if the row index is less than the column index, but it fills with a 3 in this case.</div></li><li data-component="answer" id="csawesome2_2_pe1_18_opt_b" data-correct=""><div class="para" id="pe1_18-2-2-1-1">{ { 2, 3, 3, 3 }, { 1, 2, 3, 3 }, { 1, 1, 2, 3 } }</div></li><li data-component="feedback" id="csawesome2_2_pe1_18_opt_b"><div class="para" id="pe1_18-2-2-2-1">This will fill mat with 3 if the row index is less than the column index, 2 if the row index is equal to the column index, and a 1 if the row index is greater than the column index.</div></li><li data-component="answer" id="csawesome2_2_pe1_18_opt_c"><div class="para" id="pe1_18-2-3-1-1">{ { 2, 1, 1 }, { 2, 2, 1 }, { 2, 2, 2 }, { 2, 2, 2 } }</div></li><li data-component="feedback" id="csawesome2_2_pe1_18_opt_c"><div class="para" id="pe1_18-2-3-2-1">This would be true if it was int [][] mat = new int [4][3] and it filled the mat with 1 if the row index is less than the column index.</div></li><li data-component="answer" id="csawesome2_2_pe1_18_opt_d"><div class="para" id="pe1_18-2-4-1-1">{ { 2, 3, 3 }, { 1, 2, 3 }, { 1, 1, 2 }, { 1, 1, 1 } }</div></li><li data-component="feedback" id="csawesome2_2_pe1_18_opt_d"><div class="para" id="pe1_18-2-4-2-1">This would be true if it was int [][] mat = new int [4][3]. Remember that the first number is the number of rows.</div></li><li data-component="answer" id="csawesome2_2_pe1_18_opt_e"><div class="para" id="pe1_18-2-5-1-1">{ { 1, 3, 3, 3 }, { 2, 1, 3, 3 }, { 2, 2, 1, 3 } }</div></li><li data-component="feedback" id="csawesome2_2_pe1_18_opt_e"><div class="para" id="pe1_18-2-5-2-1">This would be true if it filled the mat with 1 if the row and column indices are equal and 2 if the row index is greater than the column index.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.1.19 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe1_19" data-multipleanswers="false"><div class="para" id="pe1_19-1-1">13-1-19: Assume that <code class="code-inline tex2jax_ignore">temp</code> is an <code class="code-inline tex2jax_ignore">int</code> variable initialized to be greater than zero and that <code class="code-inline tex2jax_ignore">a</code> is an array of type <code class="code-inline tex2jax_ignore">int</code>.  Also, consider the following code segment.  What of the following will cause an infinite loop?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for ( int k = 0; k &lt; a.length; k++ )
{
   while ( a[ k ] &lt; temp )
   {
      a[ k ] *= 2;
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe1_19_opt_a"><div class="para" id="pe1_19-2-1-1-1">The values don’t matter, this will always cause an infinite loop.</div></li><li data-component="feedback" id="csawesome2_2_pe1_19_opt_a"><div class="para" id="pe1_19-2-1-2-1">An infinite loop will not always occur in this program segment.</div></li><li data-component="answer" id="csawesome2_2_pe1_19_opt_b"><div class="para" id="pe1_19-2-2-1-1">Whenever a has a value larger then temp.</div></li><li data-component="feedback" id="csawesome2_2_pe1_19_opt_b"><div class="para" id="pe1_19-2-2-2-1">Values larger then temp will not cause an infinite loop.</div></li><li data-component="answer" id="csawesome2_2_pe1_19_opt_c"><div class="para" id="pe1_19-2-3-1-1">When all values in a are larger than temp.</div></li><li data-component="feedback" id="csawesome2_2_pe1_19_opt_c"><div class="para" id="pe1_19-2-3-2-1">Values larger then temp will not cause an infinite loop.</div></li><li data-component="answer" id="csawesome2_2_pe1_19_opt_d"><div class="para" id="pe1_19-2-4-1-1">Whenever a includes a value equal to temp.</div></li><li data-component="feedback" id="csawesome2_2_pe1_19_opt_d"><div class="para" id="pe1_19-2-4-2-1">Values equal to temp will not cause an infinite loop.</div></li><li data-component="answer" id="csawesome2_2_pe1_19_opt_e" data-correct=""><div class="para" id="pe1_19-2-5-1-1">Whenever a includes a value that is less than or equal to zero.</div></li><li data-component="feedback" id="csawesome2_2_pe1_19_opt_e"><div class="para" id="pe1_19-2-5-2-1">When a contains a value that is less than or equal to zero, then multiplying that value by 2 will never make the result larger than the temp value (which was set to some value &gt; 0), so an infinite loop will occur.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.1.20 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe1_20" data-multipleanswers="false"><div class="para" id="pe1_20-1-1">13-1-20: Consider the following method.  What is the output from <code class="code-inline tex2jax_ignore">conditionTest(3,-2);</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java"> public static void conditionTest(int num1, int num2)
 {
    if ((num1 &gt; 0) &amp;&amp; (num2 &gt; 0))
    {
       if (num1 &gt; num2)
          System.out.println("A");
       else
          System.out.println("B");
    }
    else if ((num2 &lt; 0) || (num1 &lt; 0))
    {
        System.out.println("C");
    }
    else if (num2 &lt; 0)
    {
       System.out.println("D");
    }
    else
    {
       System.out.println("E");
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe1_20_opt_a"><div class="para" id="pe1_20-2-1-1-1">A</div></li><li data-component="feedback" id="csawesome2_2_pe1_20_opt_a"><div class="para" id="pe1_20-2-1-2-1">This would be true if num1 and num2 were both greater than 0 and num1 was greater than num2.  However, num2 is less than 0.</div></li><li data-component="answer" id="csawesome2_2_pe1_20_opt_b"><div class="para" id="pe1_20-2-2-1-1">B</div></li><li data-component="feedback" id="csawesome2_2_pe1_20_opt_b"><div class="para" id="pe1_20-2-2-2-1">This would be true if num1 and num2 were both greater than 0 and num1 was less than or equal to num2.  However, num2 is less than 0.</div></li><li data-component="answer" id="csawesome2_2_pe1_20_opt_c" data-correct=""><div class="para" id="pe1_20-2-3-1-1">C</div></li><li data-component="feedback" id="csawesome2_2_pe1_20_opt_c"><div class="para" id="pe1_20-2-3-2-1">The first test is false since num2 is less than 0 and for a complex conditional joined with And (&amp;&amp;) to be true both expressions must be true.  Next, else if ((num2&lt;0) || (num1&lt;0)) is executed and this will be true since num2 is less than 0 and for a complex conditional joined with Or (||) only one of the expressions must be true for it to execute.</div></li><li data-component="answer" id="csawesome2_2_pe1_20_opt_d"><div class="para" id="pe1_20-2-4-1-1">D</div></li><li data-component="feedback" id="csawesome2_2_pe1_20_opt_d"><div class="para" id="pe1_20-2-4-2-1">This will not happen since if num2 is less than 0 the previous conditional would be true ((num2&lt;0) || (num1&lt;0))).</div></li><li data-component="answer" id="csawesome2_2_pe1_20_opt_e"><div class="para" id="pe1_20-2-5-1-1">E</div></li><li data-component="feedback" id="csawesome2_2_pe1_20_opt_e"><div class="para" id="pe1_20-2-5-2-1">This will not happen since if num2 is less than 0 the previous conditional would be true ((num2&lt;0) || (num1&lt;0))).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>practice-exam-2-for-the-ap-csa-exam</id>
      <title>Practice Exam 2 for the AP CSA Exam</title>
      <question optional="yes">
        <label>Exercise 8.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe3_1" data-multipleanswers="false"><div class="para" id="pe3_1-1-1">13-2-1: What is the value of total after the following code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int[][] matrix = { {4, 5, 6, 7}, {0, 1, 2, 3}, {3, 2, 1, 0}, {8, 9, 1, 2}};

int total = 0;
for (int row = 0; row &lt; matrix.length; row++)
{
   total = total + matrix[row][1];
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe3_1_opt_a"><div class="para" id="pe3_1-2-1-1-1">10</div></li><li data-component="feedback" id="csawesome2_2_pe3_1_opt_a"><div class="para" id="pe3_1-2-1-2-1">This would be true if it was adding up all the values in the third column, the one at index 2.</div></li><li data-component="answer" id="csawesome2_2_pe3_1_opt_b"><div class="para" id="pe3_1-2-2-1-1">15</div></li><li data-component="feedback" id="csawesome2_2_pe3_1_opt_b"><div class="para" id="pe3_1-2-2-2-1">This would be true if it was adding up all the values in the first column, the one at index 0.</div></li><li data-component="answer" id="csawesome2_2_pe3_1_opt_c" data-correct=""><div class="para" id="pe3_1-2-3-1-1">17</div></li><li data-component="feedback" id="csawesome2_2_pe3_1_opt_c"><div class="para" id="pe3_1-2-3-2-1">This code adds up all the values in the second column, the one at index 1 since column indices start at 0.</div></li><li data-component="answer" id="csawesome2_2_pe3_1_opt_d"><div class="para" id="pe3_1-2-4-1-1">12</div></li><li data-component="feedback" id="csawesome2_2_pe3_1_opt_d"><div class="para" id="pe3_1-2-4-2-1">This would be true if it was adding up all the values in the last column, the one at index 3.</div></li><li data-component="answer" id="csawesome2_2_pe3_1_opt_e"><div class="para" id="pe3_1-2-5-1-1">22</div></li><li data-component="feedback" id="csawesome2_2_pe3_1_opt_e"><div class="para" id="pe3_1-2-5-2-1">This would be true if it was adding up all the values in the first row, but the row changes each time through the for loop.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.2.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe3_3" data-multipleanswers="false"><div class="para" id="pe3_3-1-1">13-2-2: Assume that list has been initialized with the following Integer objects: [9, 3, 17, 2, 16, 4, 1].  Which of the following shows the values in list after a call of mystery(4)?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private List list&lt;Integer&gt;;
public void mystery(int n)
{
   for (int i= 0; i &lt; n; i++)
   {
      Object obj = list.remove(0);
      list.add((Integer)obj);
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe3_3_opt_a"><div class="para" id="pe3_3-2-1-1-1">[9, 3, 17, 2, 16, 4, 1]</div></li><li data-component="feedback" id="csawesome2_2_pe3_3_opt_a"><div class="para" id="pe3_3-2-1-2-1">This would be true if it moved all of the values from the front to the back.  But does it?</div></li><li data-component="answer" id="csawesome2_2_pe3_3_opt_b"><div class="para" id="pe3_3-2-2-1-1">[1, 4, 16, 2, 17, 3, 9]</div></li><li data-component="feedback" id="csawesome2_2_pe3_3_opt_b"><div class="para" id="pe3_3-2-2-2-1">This would be true if the code reversed the list.  But does it?   Remember that remove(0) removes the first item in the list and returns it.  The add method adds the item to the end of the list.</div></li><li data-component="answer" id="csawesome2_2_pe3_3_opt_c"><div class="para" id="pe3_3-2-3-1-1">[9, 3, 17, 16, 4, 1, 2]</div></li><li data-component="feedback" id="csawesome2_2_pe3_3_opt_c"><div class="para" id="pe3_3-2-3-2-1">This would be true if only the value 2 was moved to the end of the list.  Is that what this code does?</div></li><li data-component="answer" id="csawesome2_2_pe3_3_opt_d" data-correct=""><div class="para" id="pe3_3-2-4-1-1">[16, 4, 1, 9, 3, 17, 2]</div></li><li data-component="feedback" id="csawesome2_2_pe3_3_opt_d"><div class="para" id="pe3_3-2-4-2-1">This code moves the first item to the end of the list 4 times.  So it moves the 9, 3, 17, and 2.</div></li><li data-component="answer" id="csawesome2_2_pe3_3_opt_e"><div class="para" id="pe3_3-2-5-1-1">[2, 16, 4, 1, 9, 3, 17]</div></li><li data-component="feedback" id="csawesome2_2_pe3_3_opt_e"><div class="para" id="pe3_3-2-5-2-1">This would be true if the call was mystery(3) instead of mystery(4).  Then it would move the first 3 values in the list to the end of the list.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.2.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe3_4" data-multipleanswers="false"><div class="para" id="pe3_4-1-1">13-2-3: Given the following two class declarations, what is the relationship between Dog and DogOwner?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Dog
{
    private String name;

    public void setName(String n)
    {
        name = n;
    }

    public String getName()
    {
        return name;
    }
}

public class DogOwner
{
    private String name;
    private Dog[] dogs;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe3_4_opt_a"><div class="para" id="pe3_4-2-1-1-1">Interface</div></li><li data-component="feedback" id="csawesome2_2_pe3_4_opt_a"><div class="para" id="pe3_4-2-1-2-1">An interface is a special kind of abstract class. It isn’t a type of relationship between classes.</div></li><li data-component="answer" id="csawesome2_2_pe3_4_opt_b"><div class="para" id="pe3_4-2-2-1-1">Polymorphism</div></li><li data-component="feedback" id="csawesome2_2_pe3_4_opt_b"><div class="para" id="pe3_4-2-2-2-1">Polymorphism is using the run-time type of the object to determine which method to run.  It isn’t a type of relationship between classes.</div></li><li data-component="answer" id="csawesome2_2_pe3_4_opt_c"><div class="para" id="pe3_4-2-3-1-1">Inheritance (is-a)</div></li><li data-component="feedback" id="csawesome2_2_pe3_4_opt_c"><div class="para" id="pe3_4-2-3-2-1">Inheritance is when one class (the child class) extends the other (the parent class).  Do you see the keyword extends here?</div></li><li data-component="answer" id="csawesome2_2_pe3_4_opt_d" data-correct=""><div class="para" id="pe3_4-2-4-1-1">Association (has-a)</div></li><li data-component="feedback" id="csawesome2_2_pe3_4_opt_d"><div class="para" id="pe3_4-2-4-2-1">Association is when one class keeps track of one or more objects of the other class.  In this case a DogOwner object has an array of dog objects.</div></li><li data-component="answer" id="csawesome2_2_pe3_4_opt_e"><div class="para" id="pe3_4-2-5-1-1">Overloading</div></li><li data-component="feedback" id="csawesome2_2_pe3_4_opt_e"><div class="para" id="pe3_4-2-5-2-1">Overloading is when a class has two methods with the same name but the parameter lists are different.  It is not a type of relationship between classes.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.2.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe3_5" data-multipleanswers="false"><div class="para" id="pe3_5-1-1">13-2-4: Which of the following expressions can be use to replace the body of mystery so that mystery will return the same result for all values of y?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static int mystery(int y)
{
   y = 2 * y + y;
   y = 2 * y + y;
   return y;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe3_5_opt_a" data-correct=""><div class="para" id="pe3_5-2-1-1-1">return 9 * y;</div></li><li data-component="feedback" id="csawesome2_2_pe3_5_opt_a"><div class="para" id="pe3_5-2-1-2-1">The first line is the same as 3y.  Then you have to substitute in the new value of y in the second line (2 * 3y + 3y) = 6y + 3y = 9y.</div></li><li data-component="answer" id="csawesome2_2_pe3_5_opt_b"><div class="para" id="pe3_5-2-2-1-1">return 7 * y;</div></li><li data-component="feedback" id="csawesome2_2_pe3_5_opt_b"><div class="para" id="pe3_5-2-2-2-1">Remember that the second line is using the value of y calculated in the first line for both places y appears.</div></li><li data-component="answer" id="csawesome2_2_pe3_5_opt_c"><div class="para" id="pe3_5-2-3-1-1">return y;</div></li><li data-component="feedback" id="csawesome2_2_pe3_5_opt_c"><div class="para" id="pe3_5-2-3-2-1">This would be true if the body only had the last line in it.  What do the first 2 lines do?</div></li><li data-component="answer" id="csawesome2_2_pe3_5_opt_d"><div class="para" id="pe3_5-2-4-1-1">return 3 * y;</div></li><li data-component="feedback" id="csawesome2_2_pe3_5_opt_d"><div class="para" id="pe3_5-2-4-2-1">This would be true if the it was missing the second line.  What does that line do?</div></li><li data-component="answer" id="csawesome2_2_pe3_5_opt_e"><div class="para" id="pe3_5-2-5-1-1">return 4 * y;</div></li><li data-component="feedback" id="csawesome2_2_pe3_5_opt_e"><div class="para" id="pe3_5-2-5-2-1">Remember that 2 * y + y is the same as 3 * y.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.2.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe3_6" data-multipleanswers="false">
                <div class="para" id="pe3_6-1-1">13-2-5: Class C extends class B, which extends class A. Also, all of the three classes implement a public method test(). How can a method in an object of class C invoke the test() method defined in class A (without creating a new instance of class A)?</div>
                <li data-component="answer" id="csawesome2_2_pe3_6_opt_a">
                  <div class="para" id="pe3_6-2-1-1-1">test();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe3_6_opt_a">
                  <div class="para" id="pe3_6-2-1-2-1">This would run the test method in class C since the object was created by the C class.  When a method is called the runtime system will start looking for the method in the class that created the object.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe3_6_opt_b">
                  <div class="para" id="pe3_6-2-2-1-1">super.super.test();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe3_6_opt_b">
                  <div class="para" id="pe3_6-2-2-2-1">You can’t use super.super.  This would cause a compile-time error.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe3_6_opt_c">
                  <div class="para" id="pe3_6-2-3-1-1">super.test();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe3_6_opt_c">
                  <div class="para" id="pe3_6-2-3-2-1">This would run the test method in class B since super is used to run a method in your parent class and B is the parent of C.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe3_6_opt_d">
                  <div class="para" id="pe3_6-2-4-1-1">this.test();</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe3_6_opt_d">
                  <div class="para" id="pe3_6-2-4-2-1">This would run the test method in class C.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe3_6_opt_e" data-correct="">
                  <div class="para" id="pe3_6-2-5-1-1">There is no way to call a method in a grandparent class from a grandchild class</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe3_6_opt_e">
                  <div class="para" id="pe3_6-2-5-2-1">You can use super to force the runtime to run a method in a parent class, but there is no way to force a call to a method in a grandparent (parent of your parent) class.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.2.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe3_7" data-multipleanswers="false"><div class="para" id="pe3_7-1-1">13-2-6: Which of the following is a correct call to the <code class="code-inline tex2jax_ignore">test</code> method?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Vehicle
{
    public void test(Car x, SportsCar y) {}
}

public class Car extends Vehicle {}

public class SportsCar extends Car {}

public class VehicleTest
{
    public static void main(String[] args)
    {
        Vehicle v = new Vehicle();
        Car c = new Car();
        SportsCar sporty = new SportsCar();
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe3_7_opt_a"><div class="para" id="pe3_7-2-1-1-1">v.test(sporty,v);</div></li><li data-component="feedback" id="csawesome2_2_pe3_7_opt_a"><div class="para" id="pe3_7-2-1-2-1">This would be true if the test method took a SportsCar object and a Vehicle object.</div></li><li data-component="answer" id="csawesome2_2_pe3_7_opt_b"><div class="para" id="pe3_7-2-2-1-1">sporty.test(c,c);</div></li><li data-component="feedback" id="csawesome2_2_pe3_7_opt_b"><div class="para" id="pe3_7-2-2-2-1">This would be true if the test method took two Car objects or a Car and a Vehicle object.</div></li><li data-component="answer" id="csawesome2_2_pe3_7_opt_c"><div class="para" id="pe3_7-2-3-1-1">v.test(sporty,c);</div></li><li data-component="feedback" id="csawesome2_2_pe3_7_opt_c"><div class="para" id="pe3_7-2-3-2-1">This would be true if the test method took a SportsCar object and a Car object.</div></li><li data-component="answer" id="csawesome2_2_pe3_7_opt_d"><div class="para" id="pe3_7-2-4-1-1">sporty.test(sporty,v);</div></li><li data-component="feedback" id="csawesome2_2_pe3_7_opt_d"><div class="para" id="pe3_7-2-4-2-1">This would be true if the test method took a SportsCar object and a Vehicle object.</div></li><li data-component="answer" id="csawesome2_2_pe3_7_opt_e" data-correct=""><div class="para" id="pe3_7-2-5-1-1">c.test(sporty,sporty);</div></li><li data-component="feedback" id="csawesome2_2_pe3_7_opt_e"><div class="para" id="pe3_7-2-5-2-1">The test method takes a Car object and a SportsCar object.  Only this answer correctly passes a SportsCar object as the second parameter.  You can use a SportsCar object as a Car object since it is a subclass of Car.  The test method can be called on any child of Vehicle.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.2.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe3_8" data-multipleanswers="false"><div class="para" id="pe3_8-1-1">13-2-7: Given the following method declaration. What value is returned from recur(5)?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static int recur(int n)
{
   if (n &lt;= 1)
       return 1;
   else
       return (recur(n-1) + recur(n-2));
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe3_8_opt_a" data-correct=""><div class="para" id="pe3_8-2-1-1-1">8</div></li><li data-component="feedback" id="csawesome2_2_pe3_8_opt_a"><div class="para" id="pe3_8-2-1-2-1">The call recur(5) will return recur(4) + recur(3).  The call recur(4) returns 5.  The call recur(3) returns 3.  So recur(5) returns 5 + 3 = 8.</div></li><li data-component="answer" id="csawesome2_2_pe3_8_opt_b"><div class="para" id="pe3_8-2-2-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_pe3_8_opt_b"><div class="para" id="pe3_8-2-2-2-1">This method will only return 1 when n is less than or equal to 1.  In this case n is 5.</div></li><li data-component="answer" id="csawesome2_2_pe3_8_opt_c"><div class="para" id="pe3_8-2-3-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_pe3_8_opt_c"><div class="para" id="pe3_8-2-3-2-1">This would be true if the call was recur(2).  This would return recur(1) + recur(0).  Both recur(1) and recur(0) would return 1 so recur(2) would return 1 + 1 = 2.</div></li><li data-component="answer" id="csawesome2_2_pe3_8_opt_d"><div class="para" id="pe3_8-2-4-1-1">5</div></li><li data-component="feedback" id="csawesome2_2_pe3_8_opt_d"><div class="para" id="pe3_8-2-4-2-1">This would be true if the call was recur(4). This would return recur(3) + recur(2).  The call recur(3) returns 3.  The call recur(2) returns 2.  So recur(4) returns 3 + 2 = 5.</div></li><li data-component="answer" id="csawesome2_2_pe3_8_opt_e"><div class="para" id="pe3_8-2-5-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_pe3_8_opt_e"><div class="para" id="pe3_8-2-5-2-1">This would be true if the call was recur(3).  This would return recur(2) + recur(1).  The call to recur(1) would return 1.  The call to recur(2) would return recur(1) + recur(0).  Both recur(1) and recur(0) would return 1 so recur(2) would return 1 + 1 = 2. Thus recur(3) would return 2 + 1 = 3.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.2.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe3_9" data-multipleanswers="false"><div class="para" id="pe3_9-1-1">13-2-8: What is printed when the following code is run?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int k = 0; k &lt; 20; k = k + 1)
{
   if (k % 2 == 0)
      System.out.print(k + " ");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe3_9_opt_a"><div class="para" id="pe3_9-2-1-1-1">1 3 5 7 9 11 13 15 17 19</div></li><li data-component="feedback" id="csawesome2_2_pe3_9_opt_a"><div class="para" id="pe3_9-2-1-2-1">This would be true if k was printed when the reminder was equal to 1 (when the value was odd).</div></li><li data-component="answer" id="csawesome2_2_pe3_9_opt_b" data-correct=""><div class="para" id="pe3_9-2-2-1-1">0 2 4 6 8 10 12 14 16 18</div></li><li data-component="feedback" id="csawesome2_2_pe3_9_opt_b"><div class="para" id="pe3_9-2-2-2-1">This code will loop through all the values from 0 to 19, but only print the ones that are even (dividing by 2 has a remainder of 0).</div></li><li data-component="answer" id="csawesome2_2_pe3_9_opt_c"><div class="para" id="pe3_9-2-3-1-1">2 4 6 8 10 12 14 16 18</div></li><li data-component="feedback" id="csawesome2_2_pe3_9_opt_c"><div class="para" id="pe3_9-2-3-2-1">The first time through the loop k will have the value 0 and 0 % 2 returns 0 so the 0 will print.</div></li><li data-component="answer" id="csawesome2_2_pe3_9_opt_d"><div class="para" id="pe3_9-2-4-1-1">3 6 9 12 15 18</div></li><li data-component="feedback" id="csawesome2_2_pe3_9_opt_d"><div class="para" id="pe3_9-2-4-2-1">This would be true if the test was (k % 3 == 0) and the loop started with k = 1.</div></li><li data-component="answer" id="csawesome2_2_pe3_9_opt_e"><div class="para" id="pe3_9-2-5-1-1">0 2 4 6 8 10 13 14 16 18 20</div></li><li data-component="feedback" id="csawesome2_2_pe3_9_opt_e"><div class="para" id="pe3_9-2-5-2-1">The loop will stop when k has the value of 20.  So it won’t print a 20.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.2.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe3_10" data-multipleanswers="false"><div class="para" id="pe3_10-1-1">13-2-9: What is printed when the following code executes (runs)?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">List&lt;String&gt; list = new ArrayList&lt;String&gt;();
list.add("a");
list.add("b");
list.set(1,"c");
list.add(2, "d");
list.set(2, "e");
list.add("g");
System.out.println(list);
</code></pre></div><li data-component="answer" id="csawesome2_2_pe3_10_opt_a"><div class="para" id="pe3_10-2-1-1-1">[a, c, e, d, g]</div></li><li data-component="feedback" id="csawesome2_2_pe3_10_opt_a"><div class="para" id="pe3_10-2-1-2-1">This would be true if it was list.add(2, "e") instead of list.set(2, "e").</div></li><li data-component="answer" id="csawesome2_2_pe3_10_opt_b"><div class="para" id="pe3_10-2-2-1-1">[c, e, d, b, g]</div></li><li data-component="feedback" id="csawesome2_2_pe3_10_opt_b"><div class="para" id="pe3_10-2-2-2-1">This would be true if the first item in a list was at index 1, but it is at index 0.</div></li><li data-component="answer" id="csawesome2_2_pe3_10_opt_c" data-correct=""><div class="para" id="pe3_10-2-3-1-1">[a, c, e, g]</div></li><li data-component="feedback" id="csawesome2_2_pe3_10_opt_c"><div class="para" id="pe3_10-2-3-2-1">This code adds "a" to the end of the list: ["a"] and then "b" to the end of the list: ["a", "b"].  Then it changes the value at index 1 to "c": ["a", "c"]. Then it adds "d" at position 2 which first moves to the right any existing values ["a", "c", "d"].   Then it sets the value at index 2 to "e": ["a", "c", "e"].  Then it adds "g" to the end: ["a", "c", "e", "g"].</div></li><li data-component="answer" id="csawesome2_2_pe3_10_opt_d"><div class="para" id="pe3_10-2-4-1-1">[a, b, e, d, g]</div></li><li data-component="feedback" id="csawesome2_2_pe3_10_opt_d"><div class="para" id="pe3_10-2-4-2-1">For this to be true the 3rd line would have to be list.add("c").  Is it?</div></li><li data-component="answer" id="csawesome2_2_pe3_10_opt_e"><div class="para" id="pe3_10-2-5-1-1">[a, c, e, d, b, g]</div></li><li data-component="feedback" id="csawesome2_2_pe3_10_opt_e"><div class="para" id="pe3_10-2-5-2-1">This would be true if all of the sets were adds.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.2.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe3_11" data-multipleanswers="false"><div class="para" id="pe3_11-1-1">13-2-10: Assume that Parent p = new Child(); appears in a client program.  What is the result of the call p.m1()?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Parent
{
    public void m1()
    {
        System.out.print("pm1");
        m2();
    }

    public void m2()
    {
        System.out.print("pm2");
    }
}

public class Child extends Parent
{
    public void m1()
    {
        super.m1();
        System.out.print("cm1");
    }

    public void m2()
    {
        super.m2();
        System.out.print("cm2");
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe3_11_opt_a" data-correct=""><div class="para" id="pe3_11-2-1-1-1">pm1pm2cm2cm1</div></li><li data-component="feedback" id="csawesome2_2_pe3_11_opt_a"><div class="para" id="pe3_11-2-1-2-1">When p.m1() is run it will execute the m1 method in Child since p is an object of that class.  The first line calls super.m1() which will execute the m1 method in Parent. That method will print "pm1" and then call m2().  The m2 method in child will execute since p is a Child object.  The first line in that method calls super.m2() which will execute the m2 method in Parent.  This will print "pm2".  Then the parent m2 method will return, so execution will continue in the m2 method of Child and it will print "cm2".  Then the child m2 method will return which will continue execution in the m1 method of Child which will print "cm1".</div></li><li data-component="answer" id="csawesome2_2_pe3_11_opt_b"><div class="para" id="pe3_11-2-2-1-1">pm1pm2</div></li><li data-component="feedback" id="csawesome2_2_pe3_11_opt_b"><div class="para" id="pe3_11-2-2-2-1">This would be true if p was an object of the Parent class, but it is an object of the Child class and the runtime will start execution of a method in the Child class method if it has it.</div></li><li data-component="answer" id="csawesome2_2_pe3_11_opt_c"><div class="para" id="pe3_11-2-3-1-1">pm1pm2cm1cm2</div></li><li data-component="feedback" id="csawesome2_2_pe3_11_opt_c"><div class="para" id="pe3_11-2-3-2-1">Remember that each method call is added to the call stack and after the method returns execution continues with the next statement after the method call.</div></li><li data-component="answer" id="csawesome2_2_pe3_11_opt_d"><div class="para" id="pe3_11-2-4-1-1">pm1cm1</div></li><li data-component="feedback" id="csawesome2_2_pe3_11_opt_d"><div class="para" id="pe3_11-2-4-2-1">This would be true if the m1 method in Parent didn’t call m2().</div></li><li data-component="answer" id="csawesome2_2_pe3_11_opt_e"><div class="para" id="pe3_11-2-5-1-1">pm1</div></li><li data-component="feedback" id="csawesome2_2_pe3_11_opt_e"><div class="para" id="pe3_11-2-5-2-1">This would be true if the m1 method in Parent didn’t call m2() and the p was actually an object of the Parent class.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.2.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe3_12" data-multipleanswers="false"><div class="para" id="pe3_12-1-1">13-2-11: Assume the following classes.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Animal
{
   // constructors not shown
   public void eat()
   { // code not shown
   }
}

public class Bear extends Animal
{
   // constructors not shown
   public void growl()
   { // code not shown
   }
}

Assume that the following declaration is in a different class.
Animal b = new Bear();

Which of the following will compile without error?
I.    b.eat();
II.   b.growl;
III.  ((Bear) b).growl();
</code></pre></div><li data-component="answer" id="csawesome2_2_pe3_12_opt_a"><div class="para" id="pe3_12-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_pe3_12_opt_a"><div class="para" id="pe3_12-2-1-2-1">I does work, but so does another one.</div></li><li data-component="answer" id="csawesome2_2_pe3_12_opt_b"><div class="para" id="pe3_12-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_pe3_12_opt_b"><div class="para" id="pe3_12-2-2-2-1">The compiler will look for the method based on the declared type.  The declared type for b is Animal and Animal doesn’t have a growl method.</div></li><li data-component="answer" id="csawesome2_2_pe3_12_opt_c"><div class="para" id="pe3_12-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_pe3_12_opt_c"><div class="para" id="pe3_12-2-3-2-1">III does work, but so does another one.</div></li><li data-component="answer" id="csawesome2_2_pe3_12_opt_d" data-correct=""><div class="para" id="pe3_12-2-4-1-1">I and III only</div></li><li data-component="feedback" id="csawesome2_2_pe3_12_opt_d"><div class="para" id="pe3_12-2-4-2-1">I works since the declared type is Animal and Animal has an eat method.  III works because the cast tells the compiler to treat b is a Bear and Bear has a growl method.</div></li><li data-component="answer" id="csawesome2_2_pe3_12_opt_e"><div class="para" id="pe3_12-2-5-1-1">I, II, and III</div></li><li data-component="feedback" id="csawesome2_2_pe3_12_opt_e"><div class="para" id="pe3_12-2-5-2-1">Does Animal have a growl method? Remember that the compiler checks for the method using the declared type.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.2.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe3_13" data-multipleanswers="false"><div class="para" id="pe3_13-1-1">13-2-12: Which of the following best explains what the method m does?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public void m(int[][]p)
{
   int height = p.length;
   for (int row = 0; row &lt; height / 2; row++)
   {
      for (int col = 0; col &lt;p[0].length; col++)
      {
         p[row][col] = p[height - row - 1][col];
      }
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe3_13_opt_a"><div class="para" id="pe3_13-2-1-1-1">Mirrors the values from the top half to the bottom half of the 2D array</div></li><li data-component="feedback" id="csawesome2_2_pe3_13_opt_a"><div class="para" id="pe3_13-2-1-2-1">This would be true if it was p[height - row - 1][col] = p[row][col];</div></li><li data-component="answer" id="csawesome2_2_pe3_13_opt_b"><div class="para" id="pe3_13-2-2-1-1">Mirrors the values from the left halt to the right half of the 2D array</div></li><li data-component="feedback" id="csawesome2_2_pe3_13_opt_b"><div class="para" id="pe3_13-2-2-2-1">This would be true if it was looping through all the rows and half the columns and copying from p[row][width - col - 1] = p[row][col];</div></li><li data-component="answer" id="csawesome2_2_pe3_13_opt_c" data-correct=""><div class="para" id="pe3_13-2-3-1-1">Mirrors the values from the bottom half to the top half of the 2D array</div></li><li data-component="feedback" id="csawesome2_2_pe3_13_opt_c"><div class="para" id="pe3_13-2-3-2-1">This loops through the top half rows (height / 2) and mirrors the values from the bottom half p[row][col] = p[height - row - 1][col];  So p[0][0] = p[height - 1][0] and p[0][1] = p[height - 1][1].</div></li><li data-component="answer" id="csawesome2_2_pe3_13_opt_d"><div class="para" id="pe3_13-2-4-1-1">Mirrors the values from the right half to the left half of the 2D array</div></li><li data-component="feedback" id="csawesome2_2_pe3_13_opt_d"><div class="para" id="pe3_13-2-4-2-1">This would be true if it was looping through all the rows and half the columns and copying from p[row][width - col - 1] = p[row][col];</div></li><li data-component="answer" id="csawesome2_2_pe3_13_opt_e"><div class="para" id="pe3_13-2-5-1-1">All values remain the same.</div></li><li data-component="feedback" id="csawesome2_2_pe3_13_opt_e"><div class="para" id="pe3_13-2-5-2-1">How can this be true since p[row][col] = p[height - row - 1][col]?</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.2.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe3_14" data-multipleanswers="false"><div class="para" id="pe3_14-1-1">13-2-13: What is the output from mystery(4321) when mystery is defined as follows?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">//precondition: x &gt;=0
public static void mystery (int x)
{
   System.out.print(x % 10);

   if ((x / 10) != 0)
   {
      mystery(x / 10);
   }
   System.out.print(x % 10);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe3_14_opt_a" data-correct=""><div class="para" id="pe3_14-2-1-1-1">12344321</div></li><li data-component="feedback" id="csawesome2_2_pe3_14_opt_a"><div class="para" id="pe3_14-2-1-2-1">This method prints the right most digit (x % 10 returns the right most digit) and then if x / 10 is not equal to 0 (x &lt; 10) it returns mystery of the current number after chopping off the right most digit.  So mystery(4321) prints 1 and then calls mystery(432) which prints 2 and then calls mystery(43) which prints 3 and then calls mystery (4) which prints 4.  Since 4 / 10 is equal to 0 it won’t do a recursive call. It prints 4 again and mystery(4) returns.  Execution will return to mystery(43) after the recursive call to mystery(4) and the 3 will print and then mystery (43) will return.  Execution will return to mystery(432) after the recursive call to mystery(43) and the 2 will print and then mystery (432) will return. Execution will return to mystery(4321) after the recursive call to mystery(432) and the 1 will print and then mystery (4321) will return.</div></li><li data-component="answer" id="csawesome2_2_pe3_14_opt_b"><div class="para" id="pe3_14-2-2-1-1">1234</div></li><li data-component="feedback" id="csawesome2_2_pe3_14_opt_b"><div class="para" id="pe3_14-2-2-2-1">This would be true if there wasn’t a second System.out.print(x % 10) after if.</div></li><li data-component="answer" id="csawesome2_2_pe3_14_opt_c"><div class="para" id="pe3_14-2-3-1-1">4321</div></li><li data-component="feedback" id="csawesome2_2_pe3_14_opt_c"><div class="para" id="pe3_14-2-3-2-1">This would be true if the first call to System.out.print(x % 10); wasn’t in the method.</div></li><li data-component="answer" id="csawesome2_2_pe3_14_opt_d"><div class="para" id="pe3_14-2-4-1-1">43211234</div></li><li data-component="feedback" id="csawesome2_2_pe3_14_opt_d"><div class="para" id="pe3_14-2-4-2-1">This would be true if it was mystery(1234).</div></li><li data-component="answer" id="csawesome2_2_pe3_14_opt_e"><div class="para" id="pe3_14-2-5-1-1">32144123</div></li><li data-component="feedback" id="csawesome2_2_pe3_14_opt_e"><div class="para" id="pe3_14-2-5-2-1">How does the 3 get printed first?  Remember that x % 10 returns the right most digit in x.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.2.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe3_15" data-multipleanswers="false">
                <div class="para" id="pe3_15-1-1">13-2-14: A classroom is a room and a building has many rooms. If the three classes Room, Classroom, and Building create objects that have the same relationship which of the following is the most appropriate set of declarations?</div>
                <li data-component="answer" id="csawesome2_2_pe3_15_opt_a">
                  <div class="para" id="pe3_15-2-1-1-1">public class Room extends Classroom implements Building { … }</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe3_15_opt_a">
                  <div class="para" id="pe3_15-2-1-2-1">Is a Classroom a type of Building?  Don’t use extends unless an object of the child class can be substituted for a object of the parent class.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe3_15_opt_b" data-correct="">
                  <div class="para" id="pe3_15-2-2-1-1">public class Classroom extends Room { … } public class Building { private Room[] rooms; …. }</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe3_15_opt_b">
                  <div class="para" id="pe3_15-2-2-2-1">If a classroom is a room, then Classroom should extend Room (inherit from it).  If a Building has rooms it should have a field that holds them.  Since a Building can have more than one Room we can use an array to hold the rooms.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe3_15_opt_c">
                  <div class="para" id="pe3_15-2-3-1-1">public class Room extends Building { private Classroom room; …. }</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe3_15_opt_c">
                  <div class="para" id="pe3_15-2-3-2-1">Is a Room a type of Building?  Don’t use extends unless the child is the same type of thing as the parent.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe3_15_opt_d">
                  <div class="para" id="pe3_15-2-4-1-1">public class Classroom extends Building, Room { … }</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe3_15_opt_d">
                  <div class="para" id="pe3_15-2-4-2-1">You can’t extend two classes in Java so this can’t be right.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe3_15_opt_e">
                  <div class="para" id="pe3_15-2-5-1-1">public class Room extends Classroom, Building { … }</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe3_15_opt_e">
                  <div class="para" id="pe3_15-2-5-2-1">You can’t extend two classes in Java so this can’t be right.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.2.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe3_16" data-multipleanswers="false"><div class="para" id="pe3_16-1-1">13-2-15: Given the following code which of the answers best describes the conditions needed for temp to be true when it is returned?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">boolean temp = false;
int count = 0;
for ( int testVal : a)
{
   if ( testVal == val )
       count++;
}
temp = count &gt; 1;
return temp;
</code></pre></div><li data-component="answer" id="csawesome2_2_pe3_16_opt_a"><div class="para" id="pe3_16-2-1-1-1">Whenever the first element in a is equal to val</div></li><li data-component="feedback" id="csawesome2_2_pe3_16_opt_a"><div class="para" id="pe3_16-2-1-2-1">What is count for?</div></li><li data-component="answer" id="csawesome2_2_pe3_16_opt_b"><div class="para" id="pe3_16-2-2-1-1">Whenever a contains any element which equals val.</div></li><li data-component="feedback" id="csawesome2_2_pe3_16_opt_b"><div class="para" id="pe3_16-2-2-2-1">It only sets temp to true when count is greater than 1.</div></li><li data-component="answer" id="csawesome2_2_pe3_16_opt_c" data-correct=""><div class="para" id="pe3_16-2-3-1-1">Whenever more than 1 element in a is equal to val.</div></li><li data-component="feedback" id="csawesome2_2_pe3_16_opt_c"><div class="para" id="pe3_16-2-3-2-1">This increments count once for each value in a that is equal to val.  It returns true when count is greater than 1.</div></li><li data-component="answer" id="csawesome2_2_pe3_16_opt_d"><div class="para" id="pe3_16-2-4-1-1">Whenever exactly 1 element in a is equal to val.</div></li><li data-component="feedback" id="csawesome2_2_pe3_16_opt_d"><div class="para" id="pe3_16-2-4-2-1">This would be true if it was temp = count == 1.</div></li><li data-component="answer" id="csawesome2_2_pe3_16_opt_e"><div class="para" id="pe3_16-2-5-1-1">Whenever the last element in a is equal to val.</div></li><li data-component="feedback" id="csawesome2_2_pe3_16_opt_e"><div class="para" id="pe3_16-2-5-2-1">This could be one line of code return (a[a.length-1] == val).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.2.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe3_17" data-multipleanswers="false"><div class="para" id="pe3_17-1-1">13-2-16: What is the output from the following code segment?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for (int j = 1; j &lt;=5; j++)
{
   for (int k = 1; k &lt; 3; k++)
      System.out.print(j * k + " ");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe3_17_opt_a"><div class="para" id="pe3_17-2-1-1-1">1 1 1 2 2 1 2 2 3 1 3 2 4 1 4 2 5 1 5 2</div></li><li data-component="feedback" id="csawesome2_2_pe3_17_opt_a"><div class="para" id="pe3_17-2-1-2-1">This would be true if line 3 was: System.out.print(j + " " + k + " ");</div></li><li data-component="answer" id="csawesome2_2_pe3_17_opt_b"><div class="para" id="pe3_17-2-2-1-1">1 2 2 4 3 6 4 8</div></li><li data-component="feedback" id="csawesome2_2_pe3_17_opt_b"><div class="para" id="pe3_17-2-2-2-1">This would be true if line 1 was: for (int j = 1; j &lt; 5; j++).</div></li><li data-component="answer" id="csawesome2_2_pe3_17_opt_c"><div class="para" id="pe3_17-2-3-1-1">1 1 1 2 2 1 2 2 3 1 3 2 4 1 4 2</div></li><li data-component="feedback" id="csawesome2_2_pe3_17_opt_c"><div class="para" id="pe3_17-2-3-2-1">This would be true if line 1 was: for (int j = 1; j &lt; 5; j++) and if line 3 was: System.out.print(j + " " + k + " ");</div></li><li data-component="answer" id="csawesome2_2_pe3_17_opt_d"><div class="para" id="pe3_17-2-4-1-1">5 10 15 4 8 12 3 6 9 2 4 6 1 2 3</div></li><li data-component="feedback" id="csawesome2_2_pe3_17_opt_d"><div class="para" id="pe3_17-2-4-2-1">This would be true if line 1 was: for (int j = 5; j &gt;=1; j--) and line 2 was: for (int k = 1; k &lt;= 3; k++).</div></li><li data-component="answer" id="csawesome2_2_pe3_17_opt_e" data-correct=""><div class="para" id="pe3_17-2-5-1-1">1 2 2 4 3 6 4 8 5 10</div></li><li data-component="feedback" id="csawesome2_2_pe3_17_opt_e"><div class="para" id="pe3_17-2-5-2-1">This prints j * k and for each value of j from 1 to 5, k changes from 1 to 2.  So when j is 1 it will print 1 2.  When j is 2 it will print 2 4.  When j is 3 it will print 3 6.  When j is 4 it will print 4 8.  When j is 5 it will print 5 10.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.2.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe3_18" data-multipleanswers="false"><div class="para" id="pe3_18-1-1">13-2-17: Consider the following methods. Which of method1, method2, and method3 would give the same result as sample?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public void sample(int num1, int num2)
{
   int result = 99;
   if (num1==num2)
   {
        result = 0;
   }
   else if (num1&gt;num2)
   {
       result = 1;
   }
   else {
       result = -1;
   }
   System.out.println(result);
}

public void method1(int num1, int num2)
{
   int result=99;
   if (num1 == num2)
   {
        result = 0;
   }
   else {
      if(num1 &gt; num2)
      {
           result = 1;
      }
      else
      {
          result = -1;
      }
   }
   System.out.println(result);
}

public void method2(int num1, int num2)
{
   int result = 99;
   if (num1 == num2)
   {
        result = 0;
   }
   if (num1 &gt;= num2)
   {
        result = 1;
   }
   else
   {
       result = -1;
   }
   System.out.println(result);
}

public void method3(int num1, int num2)
{
   int result = 99 ;
   if (num1 == num2)
   {
        result = 0;
   }
   if (num1 &gt; num2)
   {
        result = 1;
   }
   if (num1 &lt; num2)
   {
        result = -1;
   }
   System.out.println(result);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe3_18_opt_a" data-correct=""><div class="para" id="pe3_18-2-1-1-1">method1 and method3</div></li><li data-component="feedback" id="csawesome2_2_pe3_18_opt_a"><div class="para" id="pe3_18-2-1-2-1">The problem with method2 is that if num1==num2 the first if will execute, but so will the second if and result will be set to 1.</div></li><li data-component="answer" id="csawesome2_2_pe3_18_opt_b"><div class="para" id="pe3_18-2-2-1-1">method1 only</div></li><li data-component="feedback" id="csawesome2_2_pe3_18_opt_b"><div class="para" id="pe3_18-2-2-2-1">Another will work as well.</div></li><li data-component="answer" id="csawesome2_2_pe3_18_opt_c"><div class="para" id="pe3_18-2-3-1-1">method2 only</div></li><li data-component="feedback" id="csawesome2_2_pe3_18_opt_c"><div class="para" id="pe3_18-2-3-2-1">This one won’t work.  The problem with method2 is that if num1==num2 the first if will execute, but so will the second if and result will be set to 1.</div></li><li data-component="answer" id="csawesome2_2_pe3_18_opt_d"><div class="para" id="pe3_18-2-4-1-1">method2 and method3</div></li><li data-component="feedback" id="csawesome2_2_pe3_18_opt_d"><div class="para" id="pe3_18-2-4-2-1">While method3 will work, method2 won’t.  The problem with method2 is that if num1==num2 the first if will execute, but so will the second if and result will be set to 1.</div></li><li data-component="answer" id="csawesome2_2_pe3_18_opt_e"><div class="para" id="pe3_18-2-5-1-1">all of them</div></li><li data-component="feedback" id="csawesome2_2_pe3_18_opt_e"><div class="para" id="pe3_18-2-5-2-1">Two will work, but one will not.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.2.18 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe3_19" data-multipleanswers="false"><div class="para" id="pe3_19-1-1">13-2-18: What are the first and last values output by the following code segment?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int t = 13;
while (t &lt; 29)
{
   System.out.println(t);
   t++;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe3_19_opt_a" data-correct=""><div class="para" id="pe3_19-2-1-1-1">13, 28</div></li><li data-component="feedback" id="csawesome2_2_pe3_19_opt_a"><div class="para" id="pe3_19-2-1-2-1">It will print the value of t before changing it, so it will print 13 first and the loop ends when t is equal to 29 so the last time it will print 28.</div></li><li data-component="answer" id="csawesome2_2_pe3_19_opt_b"><div class="para" id="pe3_19-2-2-1-1">13, 29</div></li><li data-component="feedback" id="csawesome2_2_pe3_19_opt_b"><div class="para" id="pe3_19-2-2-2-1">It prints the value of t before changing it and the loop ends when t equals 29 so how can this be true?</div></li><li data-component="answer" id="csawesome2_2_pe3_19_opt_c"><div class="para" id="pe3_19-2-3-1-1">14, 28</div></li><li data-component="feedback" id="csawesome2_2_pe3_19_opt_c"><div class="para" id="pe3_19-2-3-2-1">It prints the value of t before changing it and t starts at 13 so it will print 13 first.</div></li><li data-component="answer" id="csawesome2_2_pe3_19_opt_d"><div class="para" id="pe3_19-2-4-1-1">14, 29</div></li><li data-component="feedback" id="csawesome2_2_pe3_19_opt_d"><div class="para" id="pe3_19-2-4-2-1">It prints the value of t before changing it, so neither of these is correct.</div></li><li data-component="answer" id="csawesome2_2_pe3_19_opt_e"><div class="para" id="pe3_19-2-5-1-1">1, 28</div></li><li data-component="feedback" id="csawesome2_2_pe3_19_opt_e"><div class="para" id="pe3_19-2-5-2-1">How could it print 1 for the value of t when t is set to 13 initially?</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.2.19 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe3_20" data-multipleanswers="false"><div class="para" id="pe3_20-1-1">13-2-19: Given the following code.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String s1 = new String("hi");
String s2 = new String("hi");
String s3 = s2;

Which of the following would return true:
I.  s1.equals(s2)
II. s1 == s2
III. s2.equals(s3);
IV. s2 == s3;
</code></pre></div><li data-component="answer" id="csawesome2_2_pe3_20_opt_a"><div class="para" id="pe3_20-2-1-1-1">I and III</div></li><li data-component="feedback" id="csawesome2_2_pe3_20_opt_a"><div class="para" id="pe3_20-2-1-2-1">These are both true, but one more is also true.</div></li><li data-component="answer" id="csawesome2_2_pe3_20_opt_b"><div class="para" id="pe3_20-2-2-1-1">All are true</div></li><li data-component="feedback" id="csawesome2_2_pe3_20_opt_b"><div class="para" id="pe3_20-2-2-2-1">Since s1 and s2 were created using the new operator they do not refer to the same object so s1 == s2 is false.</div></li><li data-component="answer" id="csawesome2_2_pe3_20_opt_c" data-correct=""><div class="para" id="pe3_20-2-3-1-1">I, III, and IV</div></li><li data-component="feedback" id="csawesome2_2_pe3_20_opt_c"><div class="para" id="pe3_20-2-3-2-1">I is true since they have the same characters in the same order.  III and IV are both true since they refer to the same object.</div></li><li data-component="answer" id="csawesome2_2_pe3_20_opt_d"><div class="para" id="pe3_20-2-4-1-1">II and IV</div></li><li data-component="feedback" id="csawesome2_2_pe3_20_opt_d"><div class="para" id="pe3_20-2-4-2-1">II is not true.  Since s1 and s2 were created using the new operator they do not refer to the same object so s1 == s2 is false.</div></li><li data-component="answer" id="csawesome2_2_pe3_20_opt_e"><div class="para" id="pe3_20-2-5-1-1">III and IV</div></li><li data-component="feedback" id="csawesome2_2_pe3_20_opt_e"><div class="para" id="pe3_20-2-5-2-1">These are both true, but one more is also true.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>practice-exam-3-for-the-ap-csa-exam</id>
      <title>Practice Exam 3 for the AP CSA Exam</title>
      <question optional="yes">
        <label>Exercise 8.3.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe4_1" data-multipleanswers="false"><div class="para" id="pe4_1-1-1">13-3-1: Consider the following partial class definitions.  Which of the constructors shown below (I, II, and III) are valid for C2?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class C1
{
   private int num;
   private String name;

   public C1(int theNum)
   {
      num = theNum;
   }

   public C1(String theName)
   {
      name = theName;
   }
   // other methods not shown
}

public class C2 extends C1
{
// methods not shown
}

Possible constructors
I.   public C2 () { }
II.  public C2 (int quan) {super (quan); }
III. public C2 (String label) { super(label); }
</code></pre></div><li data-component="answer" id="csawesome2_2_pe4_1_opt_a"><div class="para" id="pe4_1-2-1-1-1">All three are valid</div></li><li data-component="feedback" id="csawesome2_2_pe4_1_opt_a"><div class="para" id="pe4_1-2-1-2-1">If there is not a call to super as the first line in a child class constructor then super() is automatically added.  However, this will cause a problem if the parent class does not have a no argument constructor.</div></li><li data-component="answer" id="csawesome2_2_pe4_1_opt_b"><div class="para" id="pe4_1-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_pe4_1_opt_b"><div class="para" id="pe4_1-2-2-2-1">While II is valid so is another choice.</div></li><li data-component="answer" id="csawesome2_2_pe4_1_opt_c"><div class="para" id="pe4_1-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_pe4_1_opt_c"><div class="para" id="pe4_1-2-3-2-1">While III is valid so is another choice.</div></li><li data-component="answer" id="csawesome2_2_pe4_1_opt_d" data-correct=""><div class="para" id="pe4_1-2-4-1-1">II and III</div></li><li data-component="feedback" id="csawesome2_2_pe4_1_opt_d"><div class="para" id="pe4_1-2-4-2-1">Since C1 has constructors that take just an int and just a String both of these are valid.</div></li><li data-component="answer" id="csawesome2_2_pe4_1_opt_e"><div class="para" id="pe4_1-2-5-1-1">None are valid</div></li><li data-component="feedback" id="csawesome2_2_pe4_1_opt_e"><div class="para" id="pe4_1-2-5-2-1">C2 constructors can call C1 constructors using the super keyword.  In fact this call is automatically added to C2 constructors as the first line in any C2 constructor if it isn’t there.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.3.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe4_2" data-multipleanswers="false">
                <div class="para" id="pe4_2-1-1">13-3-2: The Boolean expression (x==y &amp;&amp; !(x==y)) || ( x!=y &amp;&amp; !(x!=y)) can be simplified to which of the following?</div>
                <li data-component="answer" id="csawesome2_2_pe4_2_opt_a">
                  <div class="para" id="pe4_2-2-1-1-1">x != y</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe4_2_opt_a">
                  <div class="para" id="pe4_2-2-1-2-1">If we assume that x is not equal to y then the expression is (false &amp;&amp; true) || (true &amp;&amp; false) which is false.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe4_2_opt_b">
                  <div class="para" id="pe4_2-2-2-1-1">x == y</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe4_2_opt_b">
                  <div class="para" id="pe4_2-2-2-2-1">If we assume that x == y is the same than using it in the full expression should return true.  But, if x is equal to y you would get (true &amp;&amp; false) || (false &amp;&amp; true) which is false.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe4_2_opt_c">
                  <div class="para" id="pe4_2-2-3-1-1">true</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe4_2_opt_c">
                  <div class="para" id="pe4_2-2-3-2-1">How can this be true?  Remember that &amp;&amp; requires both expressions to be true in order to return true.  You can think of (x==y &amp;&amp; !(x==y)) as A &amp;&amp; !A which is always false.   You can think of ( x!=y &amp;&amp; !(x!=y) as B &amp;&amp; !B which is always false.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe4_2_opt_d" data-correct="">
                  <div class="para" id="pe4_2-2-4-1-1">false</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe4_2_opt_d">
                  <div class="para" id="pe4_2-2-4-2-1">This can be simplified to (A &amp;&amp; !A) || (B &amp;&amp; !B) which is (false || false) which is false.  You can think of (x==y &amp;&amp; !(x==y)) as A &amp;&amp; !A which is always false.   You can think of ( x!=y &amp;&amp; !(x!=y) as B &amp;&amp; !B which is always false.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe4_2_opt_e">
                  <div class="para" id="pe4_2-2-5-1-1">x &lt; y</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe4_2_opt_e">
                  <div class="para" id="pe4_2-2-5-2-1">Since this expression is only about equality how could this be true?</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.3.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe4_3" data-multipleanswers="false"><div class="para" id="pe4_3-1-1">13-3-3: Which of the following could be used to replace the missing code so that the method sort will sort the array a in ascending order?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static void sort(int[] a)
{
   int maxCompare = a.length - 1;
   int savedIndex = 0;
   int numSteps = 0;
   int temp = 0;

   for (int i = maxCompare; i &gt; 0; i--)
   {
      savedIndex = i;

      for (int j = i - 1; j &gt;= 0; j--)
      {
        /* missing code */
      }

     temp = a[i];
     a[i] = a[savedIndex];
     a[savedIndex] = temp;
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe4_3_opt_a"><div class="para" id="pe4_3-2-1-1-1">if (a[savedIndex] &gt; a[j]) { j = savedIndex; }</div></li><li data-component="feedback" id="csawesome2_2_pe4_3_opt_a"><div class="para" id="pe4_3-2-1-2-1">Should j be set to the savedIndex?</div></li><li data-component="answer" id="csawesome2_2_pe4_3_opt_b" data-correct=""><div class="para" id="pe4_3-2-2-1-1">if (a[j] &gt; a[savedIndex]) { savedIndex = j;}</div></li><li data-component="feedback" id="csawesome2_2_pe4_3_opt_b"><div class="para" id="pe4_3-2-2-2-1">This is a selection sort that is starting at end of the array and finding the largest value in the rest of the array and swapping it with the current index.</div></li><li data-component="answer" id="csawesome2_2_pe4_3_opt_c"><div class="para" id="pe4_3-2-3-1-1">if (a[j] &lt; a[savedIndex]) { savedIndex = j; }</div></li><li data-component="feedback" id="csawesome2_2_pe4_3_opt_c"><div class="para" id="pe4_3-2-3-2-1">This would be correct if this was starting at index 0 and finding the smallest item in the rest of the array, but this starts at the end of the array instead and finds the largest value in the rest of the array.</div></li><li data-component="answer" id="csawesome2_2_pe4_3_opt_d"><div class="para" id="pe4_3-2-4-1-1">if (a[j] &gt; a[savedIndex]) { j = savedIndex;}</div></li><li data-component="feedback" id="csawesome2_2_pe4_3_opt_d"><div class="para" id="pe4_3-2-4-2-1">Should j be set to the savedIndex?</div></li><li data-component="answer" id="csawesome2_2_pe4_3_opt_e"><div class="para" id="pe4_3-2-5-1-1">if (a[j] == a[savedIndex]) { savedIndex = j; }</div></li><li data-component="feedback" id="csawesome2_2_pe4_3_opt_e"><div class="para" id="pe4_3-2-5-2-1">Why would you want to change the savedIndex if the values are the same?</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.3.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe4_5" data-multipleanswers="false"><div class="para" id="pe4_5-1-1">13-3-4: Consider the following declarations.  If matrix is initialized to be: { {-1, -2, 3},{4, -5, 6}}.  What will the values in matrix be after changeMatrix(matrix) is called?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int[][] matrix = new int[2][3];

public static void changeMatrix(int[][] matrix )
{
   for (int row = 0; row &lt; matrix.length; row++)
      for(int col = 0; col &lt; matrix[row].length; col++)
         if(row==col)
            matrix[row][col] = Math.abs(matrix[row][col]);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe4_5_opt_a"><div class="para" id="pe4_5-2-1-1-1">{ {4, -5, 6},{-1, -2, 3}}</div></li><li data-component="feedback" id="csawesome2_2_pe4_5_opt_a"><div class="para" id="pe4_5-2-1-2-1">How did the values in row1 change to those in row2 and vice versa?  Why didn’t any value change to the absolute value?</div></li><li data-component="answer" id="csawesome2_2_pe4_5_opt_b"><div class="para" id="pe4_5-2-2-1-1">{ {4, 5, 6},{1, 2, 3}}</div></li><li data-component="feedback" id="csawesome2_2_pe4_5_opt_b"><div class="para" id="pe4_5-2-2-2-1">How did the values in row1 change to those in row2 and vice versa?</div></li><li data-component="answer" id="csawesome2_2_pe4_5_opt_c"><div class="para" id="pe4_5-2-3-1-1">{ {1, 2, 3},{4, 5, 6}}</div></li><li data-component="feedback" id="csawesome2_2_pe4_5_opt_c"><div class="para" id="pe4_5-2-3-2-1">This would be true if all the matrix values were changed to their absolute value.  But, this only happens when the row and column index are the same.</div></li><li data-component="answer" id="csawesome2_2_pe4_5_opt_d"><div class="para" id="pe4_5-2-4-1-1">{ {-1, -2, 3},{4, -5, 6}}</div></li><li data-component="feedback" id="csawesome2_2_pe4_5_opt_d"><div class="para" id="pe4_5-2-4-2-1">This would be true if none of the values in the matrix were changed.  But, this will change the value to the absolute value when the row and column index are the same.</div></li><li data-component="answer" id="csawesome2_2_pe4_5_opt_e" data-correct=""><div class="para" id="pe4_5-2-5-1-1">{ {1, -2, 3},{4, 5, 6}}</div></li><li data-component="feedback" id="csawesome2_2_pe4_5_opt_e"><div class="para" id="pe4_5-2-5-2-1">This only changes the value in the matrix if the row and column index are the same.  So this changes the values at (0,0) and (1,1).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.3.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe4_6" data-multipleanswers="false"><div class="para" id="pe4_6-1-1">13-3-5: What are the values of a and b after the for loop finishes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int a = 5, b = 2, temp;

for (int i=1; i&lt;=4; i++)
{
   temp = a;
   a = i + b;
   b = temp – i;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe4_6_opt_a"><div class="para" id="pe4_6-2-1-1-1">a = 4 and b = 3</div></li><li data-component="feedback" id="csawesome2_2_pe4_6_opt_a"><div class="para" id="pe4_6-2-1-2-1">This would be true if the for loop stopped when i was equal to 4.</div></li><li data-component="answer" id="csawesome2_2_pe4_6_opt_b" data-correct=""><div class="para" id="pe4_6-2-2-1-1">a = 7 and b = 0</div></li><li data-component="feedback" id="csawesome2_2_pe4_6_opt_b"><div class="para" id="pe4_6-2-2-2-1">Here are the values of a and b at the end of each loop: i=1, a=3, b=4; i=2, a=6, b=3; i=3, a=4, b=3; i=4; a=7; b=0;</div></li><li data-component="answer" id="csawesome2_2_pe4_6_opt_c"><div class="para" id="pe4_6-2-3-1-1">a = 2 and b = -2</div></li><li data-component="feedback" id="csawesome2_2_pe4_6_opt_c"><div class="para" id="pe4_6-2-3-2-1">Go back and check your values each time through the loop.</div></li><li data-component="answer" id="csawesome2_2_pe4_6_opt_d"><div class="para" id="pe4_6-2-4-1-1">a = 5 and b = 2</div></li><li data-component="feedback" id="csawesome2_2_pe4_6_opt_d"><div class="para" id="pe4_6-2-4-2-1">This would be true if the loop stopped when i was equal to 6, but it stops when i is equal to 5.</div></li><li data-component="answer" id="csawesome2_2_pe4_6_opt_e"><div class="para" id="pe4_6-2-5-1-1">a = 9 and b = 2</div></li><li data-component="feedback" id="csawesome2_2_pe4_6_opt_e"><div class="para" id="pe4_6-2-5-2-1">Keep a table of the variables and their values each time through the loop.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.3.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe4_7" data-multipleanswers="false"><div class="para" id="pe4_7-1-1">13-3-6: Condsider the following method.  What value is returned from a call of mystery(4)?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static int mystery(int n)
{
   if (n == 0)
      return 1;
   else
      return 3 * mystery (n - 1);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe4_7_opt_a"><div class="para" id="pe4_7-2-1-1-1">243</div></li><li data-component="feedback" id="csawesome2_2_pe4_7_opt_a"><div class="para" id="pe4_7-2-1-2-1">This would be true if it was mystery(5).</div></li><li data-component="answer" id="csawesome2_2_pe4_7_opt_b"><div class="para" id="pe4_7-2-2-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_pe4_7_opt_b"><div class="para" id="pe4_7-2-2-2-1">How can this be?  The value 0 is never returned.</div></li><li data-component="answer" id="csawesome2_2_pe4_7_opt_c"><div class="para" id="pe4_7-2-3-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_pe4_7_opt_c"><div class="para" id="pe4_7-2-3-2-1">Did you notice the recursive call?</div></li><li data-component="answer" id="csawesome2_2_pe4_7_opt_d" data-correct=""><div class="para" id="pe4_7-2-4-1-1">81</div></li><li data-component="feedback" id="csawesome2_2_pe4_7_opt_d"><div class="para" id="pe4_7-2-4-2-1">This is the same as 3 to the 4th power (3 * 3 * 3 * 3 = 81).</div></li><li data-component="answer" id="csawesome2_2_pe4_7_opt_e"><div class="para" id="pe4_7-2-5-1-1">27</div></li><li data-component="feedback" id="csawesome2_2_pe4_7_opt_e"><div class="para" id="pe4_7-2-5-2-1">This would be true if it was mystery(3).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.3.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe4_8" data-multipleanswers="false">
                <div class="para" id="pe4_8-1-1">13-3-7: Which of the following correctly shows the iterations of an ascending (from left to right) insertion sort on an array with the following elements: {6,3,8,5,1}?</div>
                <li data-component="answer" id="csawesome2_2_pe4_8_opt_a">
                  <div class="para" id="pe4_8-2-1-1-1">{3,6,8,5,1}, {3,5,6,8,1}, {1,3,5,6,8}</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe4_8_opt_a">
                  <div class="para" id="pe4_8-2-1-2-1">This is almost right, but there should be 4 of these steps.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe4_8_opt_b">
                  <div class="para" id="pe4_8-2-2-1-1">{1,3,8,5,6}, {1,3,8,5,6}, {1,3,5,8,6}, {1,3,5,6,8}</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe4_8_opt_b">
                  <div class="para" id="pe4_8-2-2-2-1">This is selection sort, not insertion.   Selection will find the smallest and swap it with the first element in the array.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe4_8_opt_c" data-correct="">
                  <div class="para" id="pe4_8-2-3-1-1">{3,6,8,5,1}, {3,6,8,5,1}, {3,5,6,8,1}, {1,3,5,6,8}</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe4_8_opt_c">
                  <div class="para" id="pe4_8-2-3-2-1">An insertion sort will skip the first position and then loop inserting the next item into the correct place in the sorted elements to the left of the current item.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe4_8_opt_d">
                  <div class="para" id="pe4_8-2-4-1-1">{1,3,8,5,6}, {1,3,5,8,6}, {1,3,5,6,8}</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe4_8_opt_d">
                  <div class="para" id="pe4_8-2-4-2-1">This is selection sort, not insertion and it is also an incorrect selection sort since it skips one step.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe4_8_opt_e">
                  <div class="para" id="pe4_8-2-5-1-1">{1,6,3,8,5}, {1,3,6,8,5}, {1,3,5,6,8}</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe4_8_opt_e">
                  <div class="para" id="pe4_8-2-5-2-1">This doesn’t match selection, insertion, or merge sort.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.3.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe4_9" data-multipleanswers="false"><div class="para" id="pe4_9-1-1">13-3-8: Consider the following code segment.  How many times will a * be printed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for(int i = 0; i &lt; 3; i++)
{
   for(int j = 1; j &lt;= 7; j++)
      System.out.println("*");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe4_9_opt_a" data-correct=""><div class="para" id="pe4_9-2-1-1-1">21</div></li><li data-component="feedback" id="csawesome2_2_pe4_9_opt_a"><div class="para" id="pe4_9-2-1-2-1">The general formula for the number times a loop executes is the last value - the first value  + 1.  The outer loop will execute 3 times (2-0+1) and the inner loop will execute 7 times (7-1+1) so the total is 3 * 7 = 21.</div></li><li data-component="answer" id="csawesome2_2_pe4_9_opt_b"><div class="para" id="pe4_9-2-2-1-1">18</div></li><li data-component="feedback" id="csawesome2_2_pe4_9_opt_b"><div class="para" id="pe4_9-2-2-2-1">This would be true if the inner loop stopped when j equals 7.</div></li><li data-component="answer" id="csawesome2_2_pe4_9_opt_c"><div class="para" id="pe4_9-2-3-1-1">32</div></li><li data-component="feedback" id="csawesome2_2_pe4_9_opt_c"><div class="para" id="pe4_9-2-3-2-1">This would be true if the outer loop executed 4 times and the inner loop 8, but is that right?</div></li><li data-component="answer" id="csawesome2_2_pe4_9_opt_d"><div class="para" id="pe4_9-2-4-1-1">28</div></li><li data-component="feedback" id="csawesome2_2_pe4_9_opt_d"><div class="para" id="pe4_9-2-4-2-1">This would be true if the outer loop executed 4 times, but is that right?</div></li><li data-component="answer" id="csawesome2_2_pe4_9_opt_e"><div class="para" id="pe4_9-2-5-1-1">10</div></li><li data-component="feedback" id="csawesome2_2_pe4_9_opt_e"><div class="para" id="pe4_9-2-5-2-1">This would be true if you added the number of times the outer loop executes and the number of times the inner loop executes, but you multiply them.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.3.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe4_10" data-multipleanswers="false"><div class="para" id="pe4_10-1-1">13-3-9: Consider the following method.   What is the output from conditionTest(-3,2)?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static void conditionTest(int num1, int num2)
{
   if ((num1 &gt; 0) &amp;&amp; (num2 &gt; 0))
   {
      if (num1 &gt; num2)
         System.out.println("A");
      else
         System.out.println("B");
   }
   else if ((num2 &lt; 0) &amp;&amp; (num1 &lt; 0))
   {
      System.out.println("C");
   }
   else if (num2 &lt; 0)
   {
      System.out.println("D");
   }
   else
   {
      System.out.println("E");
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe4_10_opt_a"><div class="para" id="pe4_10-2-1-1-1">A</div></li><li data-component="feedback" id="csawesome2_2_pe4_10_opt_a"><div class="para" id="pe4_10-2-1-2-1">This will only print if both num1 and num2 are greater than 0 and num1 is greater than num2.</div></li><li data-component="answer" id="csawesome2_2_pe4_10_opt_b"><div class="para" id="pe4_10-2-2-1-1">B</div></li><li data-component="feedback" id="csawesome2_2_pe4_10_opt_b"><div class="para" id="pe4_10-2-2-2-1">This will only print if both num1 and num2 are greater than 0 and num1 is equal to or less than num2.</div></li><li data-component="answer" id="csawesome2_2_pe4_10_opt_c"><div class="para" id="pe4_10-2-3-1-1">C</div></li><li data-component="feedback" id="csawesome2_2_pe4_10_opt_c"><div class="para" id="pe4_10-2-3-2-1">This will only print if both num1 and num2 are less than 0.</div></li><li data-component="answer" id="csawesome2_2_pe4_10_opt_d"><div class="para" id="pe4_10-2-4-1-1">D</div></li><li data-component="feedback" id="csawesome2_2_pe4_10_opt_d"><div class="para" id="pe4_10-2-4-2-1">This will only print if num2 is less than 0 and num1 is greater than or equal to 0.</div></li><li data-component="answer" id="csawesome2_2_pe4_10_opt_e" data-correct=""><div class="para" id="pe4_10-2-5-1-1">E</div></li><li data-component="feedback" id="csawesome2_2_pe4_10_opt_e"><div class="para" id="pe4_10-2-5-2-1">The first test will fail since num1 is less than 0, the second test will fail since num2 is greater than 0, the third test will also fail since num2 is greater than 0, which leads to the else being executed.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.3.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe4_11" data-multipleanswers="false"><div class="para" id="pe4_11-1-1">13-3-10: What is value of s1 after the code below executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String s1 = "Hi There";
String s2 = s1;
String s3 = s2;
String s4 = s1;
s2 = s2.toUpperCase();
s3 = s3.toLowerCase();
s4 = null;
</code></pre></div><li data-component="answer" id="csawesome2_2_pe4_11_opt_a"><div class="para" id="pe4_11-2-1-1-1">hi there</div></li><li data-component="feedback" id="csawesome2_2_pe4_11_opt_a"><div class="para" id="pe4_11-2-1-2-1">This would be true if we asked what the value of s3 was.</div></li><li data-component="answer" id="csawesome2_2_pe4_11_opt_b"><div class="para" id="pe4_11-2-2-1-1">HI THERE</div></li><li data-component="feedback" id="csawesome2_2_pe4_11_opt_b"><div class="para" id="pe4_11-2-2-2-1">This would be true if we asked what the value of s2 was.</div></li><li data-component="answer" id="csawesome2_2_pe4_11_opt_c" data-correct=""><div class="para" id="pe4_11-2-3-1-1">Hi There</div></li><li data-component="feedback" id="csawesome2_2_pe4_11_opt_c"><div class="para" id="pe4_11-2-3-2-1">Strings are immutable in Java which means they never change.  Any method that looks like it changes a string returns a new string object.  Since s1 was never changed to refer to a different string it stays the same.</div></li><li data-component="answer" id="csawesome2_2_pe4_11_opt_d"><div class="para" id="pe4_11-2-4-1-1">null</div></li><li data-component="feedback" id="csawesome2_2_pe4_11_opt_d"><div class="para" id="pe4_11-2-4-2-1">This would be true if we asked what the value of s4 was.</div></li><li data-component="answer" id="csawesome2_2_pe4_11_opt_e"><div class="para" id="pe4_11-2-5-1-1">hI tHERE</div></li><li data-component="feedback" id="csawesome2_2_pe4_11_opt_e"><div class="para" id="pe4_11-2-5-2-1">How could this have happened?</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.3.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe4_12" data-multipleanswers="false"><div class="para" id="pe4_12-1-1">13-3-11: What is the output from the following code?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String s = "Computer Science is fun!";
String s1 = s.substring(0,8);
String s2 = s1.substring(2);
String s3 = s2.substring(0,3);
System.out.println(s3);
</code></pre></div><li data-component="answer" id="csawesome2_2_pe4_12_opt_a"><div class="para" id="pe4_12-2-1-1-1">mp</div></li><li data-component="feedback" id="csawesome2_2_pe4_12_opt_a"><div class="para" id="pe4_12-2-1-2-1">A substring of (0,3) will have 3 characters in it (index 0, index 1, and index 2).</div></li><li data-component="answer" id="csawesome2_2_pe4_12_opt_b" data-correct=""><div class="para" id="pe4_12-2-2-1-1">mpu</div></li><li data-component="feedback" id="csawesome2_2_pe4_12_opt_b"><div class="para" id="pe4_12-2-2-2-1">Remember that substring with two numbers starts at the first index and ends before the second.  So s1 = Computer, s2 = mputer, s3 = mpu</div></li><li data-component="answer" id="csawesome2_2_pe4_12_opt_c"><div class="para" id="pe4_12-2-3-1-1">mpur</div></li><li data-component="feedback" id="csawesome2_2_pe4_12_opt_c"><div class="para" id="pe4_12-2-3-2-1">A substring of (0,3) will have 3 characters in it (index 0, index 1, and index 2).</div></li><li data-component="answer" id="csawesome2_2_pe4_12_opt_d"><div class="para" id="pe4_12-2-4-1-1">omp</div></li><li data-component="feedback" id="csawesome2_2_pe4_12_opt_d"><div class="para" id="pe4_12-2-4-2-1">Remember that the first character in a string object is at index 0.</div></li><li data-component="answer" id="csawesome2_2_pe4_12_opt_e"><div class="para" id="pe4_12-2-5-1-1">om</div></li><li data-component="feedback" id="csawesome2_2_pe4_12_opt_e"><div class="para" id="pe4_12-2-5-2-1">A substring of (0,3) will have 3 characters in it (index 0, index 1, and index 2).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.3.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe4_13" data-multipleanswers="false"><div class="para" id="pe4_13-1-1">13-3-12: Given the following class declarations, which declaration below will result in a compiler error?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class Book
{
    // code for class
}

public class Dictionary extends Book
{
    // code for class
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe4_13_opt_a"><div class="para" id="pe4_13-2-1-1-1">Book b = new Book();</div></li><li data-component="feedback" id="csawesome2_2_pe4_13_opt_a"><div class="para" id="pe4_13-2-1-2-1">A object can always be declared to be of the type of the class that creates it.</div></li><li data-component="answer" id="csawesome2_2_pe4_13_opt_b" data-correct=""><div class="para" id="pe4_13-2-2-1-1">Dictionary d = new Book();</div></li><li data-component="feedback" id="csawesome2_2_pe4_13_opt_b"><div class="para" id="pe4_13-2-2-2-1">The declared type must the the type of the class that creates the object or the type of any parent class.   Dictionary is not a parent of the Book class.</div></li><li data-component="answer" id="csawesome2_2_pe4_13_opt_c"><div class="para" id="pe4_13-2-3-1-1">Book b = new Dictionary();</div></li><li data-component="feedback" id="csawesome2_2_pe4_13_opt_c"><div class="para" id="pe4_13-2-3-2-1">The declared type can be the actual type (the class that creates the object) or any parent of the actual type.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.3.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe4_14" data-multipleanswers="false"><div class="para" id="pe4_14-1-1">13-3-13: What will the method below return when called with mystery(“xxzxyxx”)?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static int mystery(String str)
{
   if (str.length() == 0)
       return 0;
   else
   {
      if (str.substring(0,1).equals("x"))
          return 1 + mystery(str.substring(1));
      else
          return mystery(str.substring(1));
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe4_14_opt_a"><div class="para" id="pe4_14-2-1-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_pe4_14_opt_a"><div class="para" id="pe4_14-2-1-2-1">This would be true if the recursion stopped when you first the first non "x", but is that what happens?</div></li><li data-component="answer" id="csawesome2_2_pe4_14_opt_b" data-correct=""><div class="para" id="pe4_14-2-2-1-1">5</div></li><li data-component="feedback" id="csawesome2_2_pe4_14_opt_b"><div class="para" id="pe4_14-2-2-2-1">This returns the number of "x"’s it finds in the str.</div></li><li data-component="answer" id="csawesome2_2_pe4_14_opt_c"><div class="para" id="pe4_14-2-3-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_pe4_14_opt_c"><div class="para" id="pe4_14-2-3-2-1">Did you notice the recursive calls?</div></li><li data-component="answer" id="csawesome2_2_pe4_14_opt_d"><div class="para" id="pe4_14-2-4-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_pe4_14_opt_d"><div class="para" id="pe4_14-2-4-2-1">How does it miss one "x"?</div></li><li data-component="answer" id="csawesome2_2_pe4_14_opt_e"><div class="para" id="pe4_14-2-5-1-1">0</div></li><li data-component="feedback" id="csawesome2_2_pe4_14_opt_e"><div class="para" id="pe4_14-2-5-2-1">Since the first character is "x" how can this be true?</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.3.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe4_15" data-multipleanswers="false">
                <div class="para" id="pe4_15-1-1">13-3-14: Which will cause the longest execution of a binary search looking for a value in an array of 9 integers?</div>
                <li data-component="answer" id="csawesome2_2_pe4_15_opt_a">
                  <div class="para" id="pe4_15-2-1-1-1">The value is the first one in the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe4_15_opt_a">
                  <div class="para" id="pe4_15-2-1-2-1">This could take a long time, but there is an answer that takes longer.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe4_15_opt_b">
                  <div class="para" id="pe4_15-2-2-1-1">The value is in the middle of the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe4_15_opt_b">
                  <div class="para" id="pe4_15-2-2-2-1">This would be true if we were looking for the shortest execution of a binary search</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe4_15_opt_c">
                  <div class="para" id="pe4_15-2-3-1-1">The value is at index 1 in the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe4_15_opt_c">
                  <div class="para" id="pe4_15-2-3-2-1">This would be the second value checked if the value at the middle is greater than the desired value.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe4_15_opt_d" data-correct="">
                  <div class="para" id="pe4_15-2-4-1-1">The value isn’t in the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe4_15_opt_d">
                  <div class="para" id="pe4_15-2-4-2-1">This will always take the longest when you are doing binary search.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe4_15_opt_e">
                  <div class="para" id="pe4_15-2-5-1-1">The value is at index 6 in the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe4_15_opt_e">
                  <div class="para" id="pe4_15-2-5-2-1">This would be the second value checked if the value at the middle is less than the desired value.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.3.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe4_16" data-multipleanswers="false"><div class="para" id="pe4_16-1-1">13-3-15: Given the following array declaration and the fact that Animal is the parent class for Bird, Dog, Pig, Cat, and Cow, what is output from looping through this array of animals and asking each object to speak()?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">Animal[] a = { new Cat(), new Cow(), new Dog(), new Pig(), new Bird() }

Animal that has a method speak() which returns "Awk".
Bird doesn’t have a speak method
Dog has a speak method that returns "Woof"
Pig doesn’t have a speak method
Cow has a speak method that returns "Moo"
Cat has a speak method that returns "Meow"
</code></pre></div><li data-component="answer" id="csawesome2_2_pe4_16_opt_a"><div class="para" id="pe4_16-2-1-1-1">Awk Awk Awk Awk Awk</div></li><li data-component="feedback" id="csawesome2_2_pe4_16_opt_a"><div class="para" id="pe4_16-2-1-2-1">This would be true if none of the children classes overrode the speak method, but many do.</div></li><li data-component="answer" id="csawesome2_2_pe4_16_opt_b"><div class="para" id="pe4_16-2-2-1-1">This won’t compile</div></li><li data-component="feedback" id="csawesome2_2_pe4_16_opt_b"><div class="para" id="pe4_16-2-2-2-1">It is always okay to substitute a child object for a parent object.</div></li><li data-component="answer" id="csawesome2_2_pe4_16_opt_c"><div class="para" id="pe4_16-2-3-1-1">Meow Moo Woof Oink Tweet</div></li><li data-component="feedback" id="csawesome2_2_pe4_16_opt_c"><div class="para" id="pe4_16-2-3-2-1">This would be true if Pig had a speak method that returned "Oink" and Bird had a speak method that returned "Tweet", but they do not.  The inherited speak method will be called in Animal.</div></li><li data-component="answer" id="csawesome2_2_pe4_16_opt_d"><div class="para" id="pe4_16-2-4-1-1">Meow Moo Woof Oink Awk</div></li><li data-component="feedback" id="csawesome2_2_pe4_16_opt_d"><div class="para" id="pe4_16-2-4-2-1">This would be true if Pig had a speak method that returned "Oink", but it does not.</div></li><li data-component="answer" id="csawesome2_2_pe4_16_opt_e" data-correct=""><div class="para" id="pe4_16-2-5-1-1">Meow Moo Woof Awk Awk</div></li><li data-component="feedback" id="csawesome2_2_pe4_16_opt_e"><div class="para" id="pe4_16-2-5-2-1">Both Pig and Bird do not have a speak method so the one in Animal will be used.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.3.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe4_17" data-multipleanswers="false">
                <div class="para" id="pe4_17-1-1">13-3-16: What is the result of 17 (in base 16) - 13 (in base 8)?</div>
                <li data-component="answer" id="csawesome2_2_pe4_17_opt_a">
                  <div class="para" id="pe4_17-2-1-1-1">4 in base 8</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe4_17_opt_a">
                  <div class="para" id="pe4_17-2-1-2-1">You can’t just subtract the two numbers since they are in different bases.  Convert both to decimal first.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe4_17_opt_b">
                  <div class="para" id="pe4_17-2-2-1-1">4 in base 16</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe4_17_opt_b">
                  <div class="para" id="pe4_17-2-2-2-1">You can’t just subtract the two numbers since they are in different bases.  Convert both to decimal first.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe4_17_opt_c" data-correct="">
                  <div class="para" id="pe4_17-2-3-1-1">00001100 in base 2</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe4_17_opt_c">
                  <div class="para" id="pe4_17-2-3-2-1">17 in base 16 is 23 in base 10.  13 in base 8 is 11 in base 10.  The answer is 12 in base 10 which is 00001100 in base 2.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe4_17_opt_d">
                  <div class="para" id="pe4_17-2-4-1-1">00000010 in base 2</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe4_17_opt_d">
                  <div class="para" id="pe4_17-2-4-2-1">This is 2 in base 10.  Convert both numbers to decimal and then convert the answer to binary.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_pe4_17_opt_e">
                  <div class="para" id="pe4_17-2-5-1-1">4 in base 10</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_pe4_17_opt_e">
                  <div class="para" id="pe4_17-2-5-2-1">You can’t just subtract the two numbers since they are in different bases.  Convert both to decimal first.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.3.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe4_18" data-multipleanswers="false"><div class="para" id="pe4_18-1-1">13-3-17: Consider the following method and code.  What are the values of s and b after the following has executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public static void test(int[] a, int y)
{
   if (a.length &gt; 1)
      a[1] = a[1] * 2;
   y = y * 2;
}

int[] s = {3,4};
int b = 4;
test(s,b);
</code></pre></div><li data-component="answer" id="csawesome2_2_pe4_18_opt_a" data-correct=""><div class="para" id="pe4_18-2-1-1-1">s={3, 8}; b=4;</div></li><li data-component="feedback" id="csawesome2_2_pe4_18_opt_a"><div class="para" id="pe4_18-2-1-2-1">The value of a[1] will be doubled since passing a copy of the value of s is a copy of the reference to the array.  The value in b won’t change since y will be set to a copy of b’s value which is just a number.</div></li><li data-component="answer" id="csawesome2_2_pe4_18_opt_b"><div class="para" id="pe4_18-2-2-1-1">s={3, 4}; b=4;</div></li><li data-component="feedback" id="csawesome2_2_pe4_18_opt_b"><div class="para" id="pe4_18-2-2-2-1">What about a[1] = a[1] * 2?</div></li><li data-component="answer" id="csawesome2_2_pe4_18_opt_c"><div class="para" id="pe4_18-2-3-1-1">s={6, 4}; b=4;</div></li><li data-component="feedback" id="csawesome2_2_pe4_18_opt_c"><div class="para" id="pe4_18-2-3-2-1">Remember that the first index in an array is index 0.  This code will double the second value in the array (the one at index 1).</div></li><li data-component="answer" id="csawesome2_2_pe4_18_opt_d"><div class="para" id="pe4_18-2-4-1-1">s={3, 8}; b=8;</div></li><li data-component="feedback" id="csawesome2_2_pe4_18_opt_d"><div class="para" id="pe4_18-2-4-2-1">Java passes arguments by creating a copy of the current value so the value of b won’t be affected by changes to y.</div></li><li data-component="answer" id="csawesome2_2_pe4_18_opt_e"><div class="para" id="pe4_18-2-5-1-1">s={6, 8}; b=8;</div></li><li data-component="feedback" id="csawesome2_2_pe4_18_opt_e"><div class="para" id="pe4_18-2-5-2-1">Java passes arguments by creating a copy of the current value so the value of b won’t be affected by changes to y.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.3.18 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe4_19" data-multipleanswers="false"><div class="para" id="pe4_19-1-1">13-3-18: Which of the following is (are) true?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">I.  Insertion sort takes longer when the array is sorted in ascending order and
    you want it sorted in descending order.
II.  Mergesort uses recursion.
III.  Selection sort takes less time to execute if the array is already sorted
      in the correct order.
</code></pre></div><li data-component="answer" id="csawesome2_2_pe4_19_opt_a"><div class="para" id="pe4_19-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_pe4_19_opt_a"><div class="para" id="pe4_19-2-1-2-1">This is true, but at least one other thing is true as well.</div></li><li data-component="answer" id="csawesome2_2_pe4_19_opt_b"><div class="para" id="pe4_19-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_pe4_19_opt_b"><div class="para" id="pe4_19-2-2-2-1">This is true, but at least one other thing is true as well.</div></li><li data-component="answer" id="csawesome2_2_pe4_19_opt_c"><div class="para" id="pe4_19-2-3-1-1">III only</div></li><li data-component="feedback" id="csawesome2_2_pe4_19_opt_c"><div class="para" id="pe4_19-2-3-2-1">Selection sort always takes the same amount of time to execute.</div></li><li data-component="answer" id="csawesome2_2_pe4_19_opt_d" data-correct=""><div class="para" id="pe4_19-2-4-1-1">I and II only</div></li><li data-component="feedback" id="csawesome2_2_pe4_19_opt_d"><div class="para" id="pe4_19-2-4-2-1">Mergesort does use recursion (has a method that calls itself).  Insertion sort does take longer to execute when the items to be sorted are in ascending order and you want them in descending order.</div></li><li data-component="answer" id="csawesome2_2_pe4_19_opt_e"><div class="para" id="pe4_19-2-5-1-1">I, II, and III</div></li><li data-component="feedback" id="csawesome2_2_pe4_19_opt_e"><div class="para" id="pe4_19-2-5-2-1">Selection sort always takes the same amount of time to execute.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.3.19 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_pe4_20" data-multipleanswers="false"><div class="para" id="pe4_20-1-1">13-3-19: Given the following code, how many calls to mystery are made (including the first call) when mystery(0, 4, 5) is executed when arr = {1, 2, 3, 5, 7}?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">private int[] arr;

public int mystery(int low, int high, int num)
{

   int mid = (low+high) / 2;

   if (low &gt; high)
   {
      return -1;
   }
   else if (arr[mid] &lt; num)
   {
      return mystery(mid +1, high, num);
   }
   else if (arr[mid] &gt; num)
   {
      return mystery(low, mid - 1, num);
   }
   else
      return mid;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_pe4_20_opt_a"><div class="para" id="pe4_20-2-1-1-1">1</div></li><li data-component="feedback" id="csawesome2_2_pe4_20_opt_a"><div class="para" id="pe4_20-2-1-2-1">No, the method is recursive and in the first call it will compare 3 to 5 and then do mystery(3,4,5).</div></li><li data-component="answer" id="csawesome2_2_pe4_20_opt_b" data-correct=""><div class="para" id="pe4_20-2-2-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_pe4_20_opt_b"><div class="para" id="pe4_20-2-2-2-1">There are two calls: mystery(0, 4, 5) and mystery(3, 4, 5).</div></li><li data-component="answer" id="csawesome2_2_pe4_20_opt_c"><div class="para" id="pe4_20-2-3-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_pe4_20_opt_c"><div class="para" id="pe4_20-2-3-2-1">This would be true if it was mystery(0, 4, 7);</div></li><li data-component="answer" id="csawesome2_2_pe4_20_opt_d"><div class="para" id="pe4_20-2-4-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_pe4_20_opt_d"><div class="para" id="pe4_20-2-4-2-1">This would be true if we were looking for a number that isn’t in the array.</div></li><li data-component="answer" id="csawesome2_2_pe4_20_opt_e"><div class="para" id="pe4_20-2-5-1-1">5</div></li><li data-component="feedback" id="csawesome2_2_pe4_20_opt_e"><div class="para" id="pe4_20-2-5-2-1">At most this will take log base 2 of the size of the array plus one to determine that the desired value isn’t in the array.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>practice-exam-x</id>
      <title>Practice Exam X</title>
      <question optional="yes">
        <label>Exercise 8.4.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mt1_3" data-multipleanswers="false"><div class="para" id="mt1_3-1-1">13-4-1: Consider the following declaration for a class that will be used to represent points in time.  Which of these options correctly implement ‘’addMinutes()’’?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java"> public class Timer
 {
    private int hours; // number of hours
    private int minutes; // 0 &lt;= minutes &lt; 60

    void addHours(int addition)
    {
       hours = hours + addition;
    }

    void addMinutes(int additionMinutes)
    {
       // implementation not shown
    }

    // ... other methods not shown

 }

Proposed Implementations:

I.   public void addMinutes(int additionMinutes)
     {
        minutes = minutes + additionMinutes;
     }

II.  public void addMinutes(int additionMinutes)
     {
        minutes += additionMinutes;
        if (minutes &gt;= 60)
        {
           hours += (minutes / 60);
           minutes = (minutes % 60);
        }
     }

III. public void addMinutes(int additionMinutes)
     {
        minutes += additionMinutes;
        while(minutes &gt;= 60)
        {
           hours++;
           minutes -= 60;
        }
     }

IV.  public void addMinutes(int additionMinutes)
     {
        if (additionMinutes + minutes &gt;= 60)
        {
           minutes = additionMinutes + minutes - 60;
           hours += 1;
        }
     }
</code></pre></div><li data-component="answer" id="csawesome2_2_mt1_3_opt_a"><div class="para" id="mt1_3-2-1-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_mt1_3_opt_a"><div class="para" id="mt1_3-2-1-2-1">This implementation of ’’addMinutes’’ does not account for values of additionMinutes that push the minute count above 60.</div></li><li data-component="answer" id="csawesome2_2_mt1_3_opt_b"><div class="para" id="mt1_3-2-2-1-1">II only</div></li><li data-component="feedback" id="csawesome2_2_mt1_3_opt_b"><div class="para" id="mt1_3-2-2-2-1">Implementation II works, but implementation III also works.</div></li><li data-component="answer" id="csawesome2_2_mt1_3_opt_c"><div class="para" id="mt1_3-2-3-1-1">IV only</div></li><li data-component="feedback" id="csawesome2_2_mt1_3_opt_c"><div class="para" id="mt1_3-2-3-2-1">Implementation IV does not work for situations where additionMinutes + minutes does not go above 60.</div></li><li data-component="answer" id="csawesome2_2_mt1_3_opt_d" data-correct=""><div class="para" id="mt1_3-2-4-1-1">II and III</div></li><li data-component="feedback" id="csawesome2_2_mt1_3_opt_d"><div class="para" id="mt1_3-2-4-2-1">Correct!</div></li><li data-component="answer" id="csawesome2_2_mt1_3_opt_e"><div class="para" id="mt1_3-2-5-1-1">I, II, and III</div></li><li data-component="feedback" id="csawesome2_2_mt1_3_opt_e"><div class="para" id="mt1_3-2-5-2-1">Implementations II and III are correct, but implementation I is not. Implementation I does not account for values of additionMinutes that push the minute count above 60.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.4.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mt1_4" data-multipleanswers="false">
                <div class="para" id="mt1_4-1-1">13-4-2: Which is NOT a correct way to declare an array of integers?</div>
                <li data-component="answer" id="csawesome2_2_mt1_4_opt_a" data-correct="">
                  <div class="para" id="mt1_4-2-1-1-1">int[] nums = [5];</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mt1_4_opt_a">
                  <div class="para" id="mt1_4-2-1-2-1">The left side is okay, but the right side is wrong.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mt1_4_opt_b">
                  <div class="para" id="mt1_4-2-2-1-1">int[] nums;</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mt1_4_opt_b">
                  <div class="para" id="mt1_4-2-2-2-1">This correctly declares an array of integers.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mt1_4_opt_c">
                  <div class="para" id="mt1_4-2-3-1-1">int[] nums = { 2, 4, 6, 8, 10 };</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mt1_4_opt_c">
                  <div class="para" id="mt1_4-2-3-2-1">This correctly declares and initializes an array of five integers.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mt1_4_opt_d">
                  <div class="para" id="mt1_4-2-4-1-1">int[] nums = new int[5];</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mt1_4_opt_d">
                  <div class="para" id="mt1_4-2-4-2-1">This declares nums to be an array of integers and creates the array.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.4.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mt1_7" data-multipleanswers="false"><div class="para" id="mt1_7-1-1">13-4-3: What are the contents of nums after the following code is executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int [] nums = { 1, 2, 3, 4, 5 };
int temp = nums[2];
nums[2] = nums[4];
nums[4] = temp;
</code></pre></div><li data-component="answer" id="csawesome2_2_mt1_7_opt_a" data-correct=""><div class="para" id="mt1_7-2-1-1-1">{ 1, 2, 5, 4, 3 }</div></li><li data-component="feedback" id="csawesome2_2_mt1_7_opt_a"><div class="para" id="mt1_7-2-1-2-1">Correct!</div></li><li data-component="answer" id="csawesome2_2_mt1_7_opt_b"><div class="para" id="mt1_7-2-2-1-1">{ 1, 2, 5, 4, 5 }</div></li><li data-component="feedback" id="csawesome2_2_mt1_7_opt_b"><div class="para" id="mt1_7-2-2-2-1">Incorrect. Remember that arrays are indexed from 0.</div></li><li data-component="answer" id="csawesome2_2_mt1_7_opt_c"><div class="para" id="mt1_7-2-3-1-1">{ 5, 4, 1, 2, 3 }</div></li><li data-component="feedback" id="csawesome2_2_mt1_7_opt_c"><div class="para" id="mt1_7-2-3-2-1">Incorrect, temp is used to hold the value from index 2 and that value is put in index 4.</div></li><li data-component="answer" id="csawesome2_2_mt1_7_opt_d"><div class="para" id="mt1_7-2-4-1-1">{ 1, 2, 4, 4, 3 }</div></li><li data-component="feedback" id="csawesome2_2_mt1_7_opt_d"><div class="para" id="mt1_7-2-4-2-1">Nums at index 2 is set to the value of nums at index 4, not just the value 4.</div></li><li data-component="answer" id="csawesome2_2_mt1_7_opt_e"><div class="para" id="mt1_7-2-5-1-1">{ 1, 4, 3, 2, 5 }</div></li><li data-component="feedback" id="csawesome2_2_mt1_7_opt_e"><div class="para" id="mt1_7-2-5-2-1">Incorrect. Remember that arrays are indexed from 0.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.4.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mt1_8" data-multipleanswers="false">
                <div class="para" id="mt1_8-1-1">13-4-4: Which option will evaluate to true, if and only if both a and b are false?</div>
                <li data-component="answer" id="csawesome2_2_mt1_8_opt_a">
                  <div class="para" id="mt1_8-2-1-1-1">!(a &amp;&amp; b)</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mt1_8_opt_a">
                  <div class="para" id="mt1_8-2-1-2-1">This would be true if a OR b are false using De Morgan’s laws: !(a &amp;&amp; b) = !a || !b.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mt1_8_opt_b">
                  <div class="para" id="mt1_8-2-2-1-1">!a &amp;&amp; b</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mt1_8_opt_b">
                  <div class="para" id="mt1_8-2-2-2-1">If b was false, this option would be false.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mt1_8_opt_c" data-correct="">
                  <div class="para" id="mt1_8-2-3-1-1">!a &amp;&amp; !b</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mt1_8_opt_c">
                  <div class="para" id="mt1_8-2-3-2-1">Correct!</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mt1_8_opt_d">
                  <div class="para" id="mt1_8-2-4-1-1">a &amp;&amp; b</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mt1_8_opt_d">
                  <div class="para" id="mt1_8-2-4-2-1">This will only be true only when both a and b are true.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mt1_8_opt_e">
                  <div class="para" id="mt1_8-2-5-1-1">a || !b</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mt1_8_opt_e">
                  <div class="para" id="mt1_8-2-5-2-1">This will only be true if a is true, or b is false.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.4.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mt1_10" data-multipleanswers="false"><div class="para" id="mt1_10-1-1">13-4-5: What does the method <code class="code-inline tex2jax_ignore">mystery</code> do?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public void mystery(String tester)
{
  for (int i = tester.length() - 1; i &gt;= 0; i--)
  {
      System.out.print(tester.charAt(i));
  }
  System.out.println("");
}
</code></pre></div><li data-component="answer" id="csawesome2_2_mt1_10_opt_a" data-correct=""><div class="para" id="mt1_10-2-1-1-1">Prints the string in reverse order</div></li><li data-component="feedback" id="csawesome2_2_mt1_10_opt_a"><div class="para" id="mt1_10-2-1-2-1">This method prints the reversed string.</div></li><li data-component="answer" id="csawesome2_2_mt1_10_opt_b"><div class="para" id="mt1_10-2-2-1-1">Deletes the second half of the string</div></li><li data-component="feedback" id="csawesome2_2_mt1_10_opt_b"><div class="para" id="mt1_10-2-2-2-1">Incorrect, this method prints the string reversed.</div></li><li data-component="answer" id="csawesome2_2_mt1_10_opt_c"><div class="para" id="mt1_10-2-3-1-1">Prints string normally</div></li><li data-component="feedback" id="csawesome2_2_mt1_10_opt_c"><div class="para" id="mt1_10-2-3-2-1">Incorrect, this method prints the string reversed.</div></li><li data-component="answer" id="csawesome2_2_mt1_10_opt_d"><div class="para" id="mt1_10-2-4-1-1">Compile-time error occurs</div></li><li data-component="feedback" id="csawesome2_2_mt1_10_opt_d"><div class="para" id="mt1_10-2-4-2-1">Incorrect, this method prints the string reversed.</div></li><li data-component="answer" id="csawesome2_2_mt1_10_opt_e"><div class="para" id="mt1_10-2-5-1-1">Prints alternating characters from beginning and end of the string.</div></li><li data-component="feedback" id="csawesome2_2_mt1_10_opt_e"><div class="para" id="mt1_10-2-5-2-1">Incorrect, this method prints the string reversed.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.4.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mt1_11" data-multipleanswers="false"><div class="para" id="mt1_11-1-1">13-4-6: After the following code is executed, what does the variable mystery hold?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public class mysterious
{
    public static void main(String[] args)
    {
        String mystery;
        String starter = "Hello World!";
        for (int i = 0; i &lt; starter.length(); i++)
        {
            if (i % 2 == 0)
            {
                mystery += starter.charAt(i);
            }
        }
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_mt1_11_opt_a"><div class="para" id="mt1_11-2-1-1-1">"Hello World!"</div></li><li data-component="feedback" id="csawesome2_2_mt1_11_opt_a"><div class="para" id="mt1_11-2-1-2-1">The variable holds all characters that were stored at even indices for the original phrase.</div></li><li data-component="answer" id="csawesome2_2_mt1_11_opt_b"><div class="para" id="mt1_11-2-2-1-1">"Hello "</div></li><li data-component="feedback" id="csawesome2_2_mt1_11_opt_b"><div class="para" id="mt1_11-2-2-2-1">The variable holds all characters that were stored at even indices for the original phrase.</div></li><li data-component="answer" id="csawesome2_2_mt1_11_opt_c"><div class="para" id="mt1_11-2-3-1-1">"He"</div></li><li data-component="feedback" id="csawesome2_2_mt1_11_opt_c"><div class="para" id="mt1_11-2-3-2-1">The variable holds all characters that were stored at even indices for the original phrase.</div></li><li data-component="answer" id="csawesome2_2_mt1_11_opt_d" data-correct=""><div class="para" id="mt1_11-2-4-1-1">"HloWrd"</div></li><li data-component="feedback" id="csawesome2_2_mt1_11_opt_d"><div class="para" id="mt1_11-2-4-2-1">Correct! The variable holds all characters that were stored at even indices for the original phrase.</div></li><li data-component="answer" id="csawesome2_2_mt1_11_opt_e"><div class="para" id="mt1_11-2-5-1-1">"el ol!"</div></li><li data-component="feedback" id="csawesome2_2_mt1_11_opt_e"><div class="para" id="mt1_11-2-5-2-1">The variable holds all characters that were stored at even indices for the original phrase.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.4.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mt1_12" data-multipleanswers="false">
                <div class="para" id="mt1_12-1-1">13-4-7: Which will cause the longest execution of a sequential search looking for a value in an array of 10 integers?</div>
                <li data-component="answer" id="csawesome2_2_mt1_12_opt_a">
                  <div class="para" id="mt1_12-2-1-1-1">The value is the first one in the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mt1_12_opt_a">
                  <div class="para" id="mt1_12-2-1-2-1">This would be true for the shortest execution.  This would only take one execution of the loop.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mt1_12_opt_b">
                  <div class="para" id="mt1_12-2-2-1-1">The value is in the middle of the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mt1_12_opt_b">
                  <div class="para" id="mt1_12-2-2-2-1">This would take 5 executions of the loop.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mt1_12_opt_c">
                  <div class="para" id="mt1_12-2-3-1-1">The value is at position 3 in the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mt1_12_opt_c">
                  <div class="para" id="mt1_12-2-3-2-1">This would take 3 executions of the loop.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mt1_12_opt_d" data-correct="">
                  <div class="para" id="mt1_12-2-4-1-1">The value isn’t in the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mt1_12_opt_d">
                  <div class="para" id="mt1_12-2-4-2-1">A sequential search loops through the elements of an array starting with the first and ending with the last and returns from the loop as soon as it finds the passed value.  It has to check every value in the array when the value it is looking for is not in the array.  This would take 10 executions of the loop.</div>
                </li>
                <li data-component="answer" id="csawesome2_2_mt1_12_opt_e">
                  <div class="para" id="mt1_12-2-5-1-1">The value is at position 6 in the array</div>
                </li>
                <li data-component="feedback" id="csawesome2_2_mt1_12_opt_e">
                  <div class="para" id="mt1_12-2-5-2-1">This would take 6 executions of the loop.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.4.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mt1_13" data-multipleanswers="false"><div class="para" id="mt1_13-1-1">13-4-8: Which of the following reasons for using an inheritance hierarchy are valid?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">I.   Methods from a superclass can be used in a subclass without rewriting or copying code.
II.  An object from a subclass can be passed as an argument to a method that takes an object of the superclass
III. Objects from subclasses can be stored in the same array
IV.  All of the above
V.   None of the above
</code></pre></div><li data-component="answer" id="csawesome2_2_mt1_13_opt_a" data-correct=""><div class="para" id="mt1_13-2-1-1-1">IV</div></li><li data-component="feedback" id="csawesome2_2_mt1_13_opt_a"><div class="para" id="mt1_13-2-1-2-1">All of these are valid reasons to use an inheritance hierarchy.</div></li><li data-component="answer" id="csawesome2_2_mt1_13_opt_b"><div class="para" id="mt1_13-2-2-1-1">V</div></li><li data-component="feedback" id="csawesome2_2_mt1_13_opt_b"><div class="para" id="mt1_13-2-2-2-1">In fact, all of the reasons listed are valid. Subclasses can reuse methods written for superclasses without code replication, subclasses can be stored in the same array, and passed as arguments to methods meant for the superclass.   All of which make writing code more streamlined.</div></li><li data-component="answer" id="csawesome2_2_mt1_13_opt_c"><div class="para" id="mt1_13-2-3-1-1">I and II</div></li><li data-component="feedback" id="csawesome2_2_mt1_13_opt_c"><div class="para" id="mt1_13-2-3-2-1">III is also valid. In some cases you might want to store subclasses together in a single array, and inheritance allows for this.</div></li><li data-component="answer" id="csawesome2_2_mt1_13_opt_d"><div class="para" id="mt1_13-2-4-1-1">I and III</div></li><li data-component="feedback" id="csawesome2_2_mt1_13_opt_d"><div class="para" id="mt1_13-2-4-2-1">II is also valid. In some cases a single method is applicable for a number of subclasses, and inheritance allows you to pass objects of the subclasses to the same method instead of writing individual methods for each subclass.</div></li><li data-component="answer" id="csawesome2_2_mt1_13_opt_e"><div class="para" id="mt1_13-2-5-1-1">I only</div></li><li data-component="feedback" id="csawesome2_2_mt1_13_opt_e"><div class="para" id="mt1_13-2-5-2-1">II and III are also valid, in some cases a single method is applicable for a number of subclasses, and inheritance allows you to pass all the subclasses to the same method instead of writing individual methods for each subclass and you might want to store subclasses together in a single array, and inheritance allows for this.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.4.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mt1_14" data-multipleanswers="false"><div class="para" id="mt1_14-1-1">13-4-9: Consider the following method and if <code class="code-inline tex2jax_ignore">int[] a = {8, 3, 1}</code>, what is the value in <code class="code-inline tex2jax_ignore">a[1]</code> after <code class="code-inline tex2jax_ignore">m1(a);</code> is run?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">public int m1(int[] a)
{
   a[1]--;
   return (a[1] * 2);
}
</code></pre></div><li data-component="answer" id="csawesome2_2_mt1_14_opt_a"><div class="para" id="mt1_14-2-1-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_mt1_14_opt_a"><div class="para" id="mt1_14-2-1-2-1">This would be true if it was return(a[1]*= 2);.</div></li><li data-component="answer" id="csawesome2_2_mt1_14_opt_b"><div class="para" id="mt1_14-2-2-1-1">16</div></li><li data-component="feedback" id="csawesome2_2_mt1_14_opt_b"><div class="para" id="mt1_14-2-2-2-1">This would be true if the return statement was return (a[0]*=2);.</div></li><li data-component="answer" id="csawesome2_2_mt1_14_opt_c"><div class="para" id="mt1_14-2-3-1-1">7</div></li><li data-component="feedback" id="csawesome2_2_mt1_14_opt_c"><div class="para" id="mt1_14-2-3-2-1">This would be true if it was a[0]--;  Or it would be true if array indices started at 1, but they start with 0.</div></li><li data-component="answer" id="csawesome2_2_mt1_14_opt_d" data-correct=""><div class="para" id="mt1_14-2-4-1-1">2</div></li><li data-component="feedback" id="csawesome2_2_mt1_14_opt_d"><div class="para" id="mt1_14-2-4-2-1">The statement a[1]--; is the same as a[1] = a[1] - 1; so this will change the 3 to a 2.  The return (a[1] * 2) does not change the value at a[1].</div></li><li data-component="answer" id="csawesome2_2_mt1_14_opt_e"><div class="para" id="mt1_14-2-5-1-1">3</div></li><li data-component="feedback" id="csawesome2_2_mt1_14_opt_e"><div class="para" id="mt1_14-2-5-2-1">This can’t be true because a[1]--; means the same as a[1] = a[1] - 1;  So the 3 will become a 2.  Parameters are all pass by value in Java which means that a copy of the value is passed to a method.  But, since an array is an object a copy of the value is a copy of the reference to the object.  So changes to objects in methods are permanent.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.4.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mt1_15" data-multipleanswers="false"><div class="para" id="mt1_15-1-1">13-4-10: What are the values of <code class="code-inline tex2jax_ignore">a</code> and <code class="code-inline tex2jax_ignore">b</code> after the <code class="code-inline tex2jax_ignore">for</code> loop finishes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int a = 10, b = 3, t;
for (int i = 1; i &lt;= 6; i++)
{
   t = a;
   a = i + b;
   b = t - i;
}
</code></pre></div><li data-component="answer" id="csawesome2_2_mt1_15_opt_a"><div class="para" id="mt1_15-2-1-1-1">a = 6 and b = 7</div></li><li data-component="feedback" id="csawesome2_2_mt1_15_opt_a"><div class="para" id="mt1_15-2-1-2-1">This would be true if the loop stopped when i was equal to 6.</div></li><li data-component="answer" id="csawesome2_2_mt1_15_opt_b"><div class="para" id="mt1_15-2-2-1-1">a = 6 and b = 13</div></li><li data-component="feedback" id="csawesome2_2_mt1_15_opt_b"><div class="para" id="mt1_15-2-2-2-1">Actually i = 6 and t = 6 and a = 13 after the loop finishes.</div></li><li data-component="answer" id="csawesome2_2_mt1_15_opt_c" data-correct=""><div class="para" id="mt1_15-2-3-1-1">a = 13 and b = 0</div></li><li data-component="feedback" id="csawesome2_2_mt1_15_opt_c"><div class="para" id="mt1_15-2-3-2-1">The variable i loops from 1 to 6<br/>i = 1, t = 10, a = 4, b = 9<br/>i = 2, t = 4, a  = 11, b =2<br/>i = 3, t = 11, a = 5, b = 8<br/>i = 4, t = 5, a = 12, b = 1<br/>i = 5, t = 12, a = 6, b = 7<br/>i = 6, t = 6, a = 13, b = 0</div></li><li data-component="answer" id="csawesome2_2_mt1_15_opt_d"><div class="para" id="mt1_15-2-4-1-1">a = 6 and b = 0</div></li><li data-component="feedback" id="csawesome2_2_mt1_15_opt_d"><div class="para" id="mt1_15-2-4-2-1">Actually i = 6 and t = 6 and b = 0 after the loop finishes.</div></li><li data-component="answer" id="csawesome2_2_mt1_15_opt_e"><div class="para" id="mt1_15-2-5-1-1">a = 0 and b = 13</div></li><li data-component="feedback" id="csawesome2_2_mt1_15_opt_e"><div class="para" id="mt1_15-2-5-2-1">No a = 13 and b = 0 after the loop finishes.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.4.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mt1_16" data-multipleanswers="false"><div class="para" id="mt1_16-1-1">13-4-11: Consider the following code.  What string is referenced by <code class="code-inline tex2jax_ignore">s1</code> after the code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">String s1 = "Hi There";
String s2 = s1;
String s3 = s2;
String s4 = s1;
s2 = s2.toLowerCase();
s3 = s3.toUpperCase();
s4 = null;
</code></pre></div><li data-component="answer" id="csawesome2_2_mt1_16_opt_a"><div class="para" id="mt1_16-2-1-1-1">hi there</div></li><li data-component="feedback" id="csawesome2_2_mt1_16_opt_a"><div class="para" id="mt1_16-2-1-2-1">This would only be correct if we had s1 = s2; after s2.toLowerCase(); was executed.  Strings are immutable and so any change to a string returns a new string.</div></li><li data-component="answer" id="csawesome2_2_mt1_16_opt_b"><div class="para" id="mt1_16-2-2-1-1">HI THERE</div></li><li data-component="feedback" id="csawesome2_2_mt1_16_opt_b"><div class="para" id="mt1_16-2-2-2-1">This would be correct if we had s1 = s3; after s3.toUpperCase(); was executed.  Strings are immutable and so any change to a string returns a new string.</div></li><li data-component="answer" id="csawesome2_2_mt1_16_opt_c" data-correct=""><div class="para" id="mt1_16-2-3-1-1">Hi There</div></li><li data-component="feedback" id="csawesome2_2_mt1_16_opt_c"><div class="para" id="mt1_16-2-3-2-1">Strings are immutable meaning that any changes to a string creates and returns a new string, so the string referred to by s1 does not change</div></li><li data-component="answer" id="csawesome2_2_mt1_16_opt_d"><div class="para" id="mt1_16-2-4-1-1">null</div></li><li data-component="feedback" id="csawesome2_2_mt1_16_opt_d"><div class="para" id="mt1_16-2-4-2-1">This would be true if we had s1 = s4; after s4 = null; was executed.  Strings are immutable and so any changes to a string returns a new string.</div></li><li data-component="answer" id="csawesome2_2_mt1_16_opt_e"><div class="para" id="mt1_16-2-5-1-1">hI tHERE</div></li><li data-component="feedback" id="csawesome2_2_mt1_16_opt_e"><div class="para" id="mt1_16-2-5-2-1">Strings are immutable and so any changes to a string returns a new string.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.4.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mt1_17" data-multipleanswers="false"><div class="para" id="mt1_17-1-1">13-4-12: Consider the following code segment.  What value is in sum after this code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int[][] matrix = { {1,1,2,2},{1,2,2,4},{1,2,3,4},{1,4,1,2}};

int sum = 0;
int col = matrix[0].length - 2;
for (int row = 0; row &lt; 4; row++)
{
   sum = sum + matrix[row][col];
}
</code></pre></div><li data-component="answer" id="csawesome2_2_mt1_17_opt_a"><div class="para" id="mt1_17-2-1-1-1">4</div></li><li data-component="feedback" id="csawesome2_2_mt1_17_opt_a"><div class="para" id="mt1_17-2-1-2-1">This would be correct if the variable col was 0 because then it would add 1 + 1 + 1 + 1 which is 4.</div></li><li data-component="answer" id="csawesome2_2_mt1_17_opt_b" data-correct=""><div class="para" id="mt1_17-2-2-1-1">8</div></li><li data-component="feedback" id="csawesome2_2_mt1_17_opt_b"><div class="para" id="mt1_17-2-2-2-1">The variable col is 2, so it adds 2 + 2 + 3 + 1 which is 8.</div></li><li data-component="answer" id="csawesome2_2_mt1_17_opt_c"><div class="para" id="mt1_17-2-3-1-1">9</div></li><li data-component="feedback" id="csawesome2_2_mt1_17_opt_c"><div class="para" id="mt1_17-2-3-2-1">This would be correct if the variable col was 1 because then it would add 1 + 2 + 2 + 4 which is 9.</div></li><li data-component="answer" id="csawesome2_2_mt1_17_opt_d"><div class="para" id="mt1_17-2-4-1-1">12</div></li><li data-component="feedback" id="csawesome2_2_mt1_17_opt_d"><div class="para" id="mt1_17-2-4-2-1">This would be correct if the variable col was 3 becuase then it would add 2 + 4 + 4 + 2 which is 12.</div></li><li data-component="answer" id="csawesome2_2_mt1_17_opt_e"><div class="para" id="mt1_17-2-5-1-1">10</div></li><li data-component="feedback" id="csawesome2_2_mt1_17_opt_e"><div class="para" id="mt1_17-2-5-2-1">This would be true if we were adding the values in the 3rd row (row = 2) instead of the 3rd column.  This would be 1 + 2 + 3 + 4 which is 10.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.4.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mt1_18" data-multipleanswers="false"><div class="para" id="mt1_18-1-1">13-4-13: Consider the following code segment, what are the contents of mat after the code segment has executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">int [][] mat = new int [3][4];
for (int row = 0; row &lt; mat.length; row++)
{
   for (int col = 0; col &lt; mat[0].length; col++)
   {
      if (row &lt; col)
         mat[row][col] = 3;
      else if (row == col)
         mat[row][col] = 2;
      else
         mat[row][col] = 1;
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_mt1_18_opt_a"><div class="para" id="mt1_18-2-1-1-1">{ { 2, 1, 1, 1 }, { 2, 2, 1, 1 }, { 2, 2, 2, 1 } }</div></li><li data-component="feedback" id="csawesome2_2_mt1_18_opt_a"><div class="para" id="mt1_18-2-1-2-1">This would be true if it was filling mat with 1 if the row index is less than the column index, but it fills with a 3 in this case.</div></li><li data-component="answer" id="csawesome2_2_mt1_18_opt_b" data-correct=""><div class="para" id="mt1_18-2-2-1-1">{ { 2, 3, 3, 3 }, { 1, 2, 3, 3 }, { 1, 1, 2, 3 } }</div></li><li data-component="feedback" id="csawesome2_2_mt1_18_opt_b"><div class="para" id="mt1_18-2-2-2-1">This will fill mat with 3 if the row index is less than the column index, 2 if the row index is equal to the column index, and a 1 if the row index is greater than the column index.</div></li><li data-component="answer" id="csawesome2_2_mt1_18_opt_c"><div class="para" id="mt1_18-2-3-1-1">{ { 2, 1, 1 }, { 2, 2, 1 }, { 2, 2, 2 }, { 2, 2, 2 } }</div></li><li data-component="feedback" id="csawesome2_2_mt1_18_opt_c"><div class="para" id="mt1_18-2-3-2-1">This would be true if it was int [][] mat = new int [4][3] and it filled the mat with 1 if the row index is less than the column index.</div></li><li data-component="answer" id="csawesome2_2_mt1_18_opt_d"><div class="para" id="mt1_18-2-4-1-1">{ { 2, 3, 3 }, { 1, 2, 3 }, { 1, 1, 2 }, { 1, 1, 1 } }</div></li><li data-component="feedback" id="csawesome2_2_mt1_18_opt_d"><div class="para" id="mt1_18-2-4-2-1">This would be true if it was int [][] mat = new int [4][3]. Remember that the first number is the number of rows.</div></li><li data-component="answer" id="csawesome2_2_mt1_18_opt_e"><div class="para" id="mt1_18-2-5-1-1">{ { 1, 3, 3, 3 }, { 2, 1, 3, 3 }, { 2, 2, 1, 3 } }</div></li><li data-component="feedback" id="csawesome2_2_mt1_18_opt_e"><div class="para" id="mt1_18-2-5-2-1">This would be true if it filled the mat with 1 if the row and column indices are equal and 2 if the row index is greater than the column index.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.4.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mt1_19" data-multipleanswers="false"><div class="para" id="mt1_19-1-1">13-4-14: Assume that <code class="code-inline tex2jax_ignore">temp</code> is an <code class="code-inline tex2jax_ignore">int</code> variable initialized to be greater than zero and that <code class="code-inline tex2jax_ignore">a</code> is an array of type <code class="code-inline tex2jax_ignore">int</code>.  Also, consider the following code segment.  Which of the following will cause an infinite loop?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java">for ( int k = 0; k &lt; a.length; k++ )
{
   while ( a[k] &lt; temp )
   {
      a[k] *= 2;
   }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_mt1_19_opt_a"><div class="para" id="mt1_19-2-1-1-1">The values don’t matter, this will always cause an infinite loop.</div></li><li data-component="feedback" id="csawesome2_2_mt1_19_opt_a"><div class="para" id="mt1_19-2-1-2-1">An infinite loop will not always occur in this program segment.</div></li><li data-component="answer" id="csawesome2_2_mt1_19_opt_b"><div class="para" id="mt1_19-2-2-1-1">Whenever a has a value larger than temp.</div></li><li data-component="feedback" id="csawesome2_2_mt1_19_opt_b"><div class="para" id="mt1_19-2-2-2-1">Values larger then temp will not cause an infinite loop.</div></li><li data-component="answer" id="csawesome2_2_mt1_19_opt_c"><div class="para" id="mt1_19-2-3-1-1">When all values in a are larger than temp.</div></li><li data-component="feedback" id="csawesome2_2_mt1_19_opt_c"><div class="para" id="mt1_19-2-3-2-1">Values larger then temp will not cause an infinite loop.</div></li><li data-component="answer" id="csawesome2_2_mt1_19_opt_d"><div class="para" id="mt1_19-2-4-1-1">Whenever a includes a value equal to temp.</div></li><li data-component="feedback" id="csawesome2_2_mt1_19_opt_d"><div class="para" id="mt1_19-2-4-2-1">Values equal to temp will not cause an infinite loop.</div></li><li data-component="answer" id="csawesome2_2_mt1_19_opt_e" data-correct=""><div class="para" id="mt1_19-2-5-1-1">Whenever a includes a value that is less than or equal to zero.</div></li><li data-component="feedback" id="csawesome2_2_mt1_19_opt_e"><div class="para" id="mt1_19-2-5-2-1">When a contains a value that is less than or equal to zero, then multiplying that value by 2 will never make the result larger than the temp value (which was set to some value &gt; 0), so an infinite loop will occur.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question optional="yes">
        <label>Exercise 8.4.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone multiplechoice_section">
              <ul data-component="multiplechoice" id="csawesome2_2_mt1_20" data-multipleanswers="false"><div class="para" id="mt1_20-1-1">13-4-15: Consider the following method.  What is the output from <code class="code-inline tex2jax_ignore">conditionTest(3,-2);</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-java"> public static void conditionTest(int num1, int num2)
 {
    if ((num1 &gt; 0) &amp;&amp; (num2 &gt; 0))
    {
       if (num1 &gt; num2)
          System.out.println("A");
       else
          System.out.println("B");
    }
    else if ((num2 &lt; 0) || (num1 &lt; 0))
    {
        System.out.println("C");
    }
    else if (num2 &lt; 0)
    {
       System.out.println("D");
    }
    else
    {
       System.out.println("E");
    }
}
</code></pre></div><li data-component="answer" id="csawesome2_2_mt1_20_opt_a"><div class="para" id="mt1_20-2-1-1-1">A</div></li><li data-component="feedback" id="csawesome2_2_mt1_20_opt_a"><div class="para" id="mt1_20-2-1-2-1">This would be true if num1 and num2 were both greater than 0 and num1 was greater than num2.  However, num2 is less than 0.</div></li><li data-component="answer" id="csawesome2_2_mt1_20_opt_b"><div class="para" id="mt1_20-2-2-1-1">B</div></li><li data-component="feedback" id="csawesome2_2_mt1_20_opt_b"><div class="para" id="mt1_20-2-2-2-1">This would be true if num1 and num2 were both greater than 0 and num1 was less than or equal to num2.  However, num2 is less than 0.</div></li><li data-component="answer" id="csawesome2_2_mt1_20_opt_c" data-correct=""><div class="para" id="mt1_20-2-3-1-1">C</div></li><li data-component="feedback" id="csawesome2_2_mt1_20_opt_c"><div class="para" id="mt1_20-2-3-2-1">The first test is false since num2 is less than 0 and for a complex conditional joined with And (&amp;&amp;) to be true both expressions must be true.  Next, else if ((num2&lt;0) || (num1&lt;0)) is executed and this will be true since num2 is less than 0 and for a complex conditional joined with Or (||) only one of the expressions must be true for it to execute.</div></li><li data-component="answer" id="csawesome2_2_mt1_20_opt_d"><div class="para" id="mt1_20-2-4-1-1">D</div></li><li data-component="feedback" id="csawesome2_2_mt1_20_opt_d"><div class="para" id="mt1_20-2-4-2-1">This will not happen since if num2 is less than 0 the previous conditional would be true ((num2&lt;0) || (num1&lt;0))).</div></li><li data-component="answer" id="csawesome2_2_mt1_20_opt_e"><div class="para" id="mt1_20-2-5-1-1">E</div></li><li data-component="feedback" id="csawesome2_2_mt1_20_opt_e"><div class="para" id="mt1_20-2-5-2-1">This will not happen since if num2 is less than 0 the previous conditional would be true ((num2&lt;0) || (num1&lt;0))).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>ap-bowl-2021-part-a</id>
      <title>AP Bowl 2021 - Part A</title>
    </subchapter>
  </chapter>
  <chapter>
    <id>csawesome2-13</id>
    <title>Mixed Up Code - Free Response Practice</title>
    <subchapter>
      <id>UNIQUE-ID-001672</id>
      <title>RandomStringChooser - Part A Parsons</title>
      <question>
        <label>Exercise 9.1.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch17RandStrA1">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch17RandStrA1-1-1">The mixed up code below includes the correct code for the class, a field, a constructor, and the getNext method.  In the constructor it will create an ArrayList and fill it by looping through the array and adding each string to the list.  In the getNext method, if the list length is greater than zero, it will pick a position at random in the list and remove the item from that position and return it.  Otherwise, if the list is empty, it returns “NONE”.  The blocks have been mixed up and include extra blocks that aren’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="java" data-adaptive="true" data-noindent="true">public class RandomStringChooser
{
---
    /* fields */
    private List&lt;String&gt; words;
---
    /* fields */
    public List&lt;String&gt; words;  #paired
---
    /* constructor */
    public RandomStringChooser(String[] wordArray)
    {
---
        words = new ArrayList&lt;String&gt;();
---
        for (String singleWord : wordArray)
        {
            words.add(singleWord);
        } // end for each word in wordArray
    } // end RandomStringChooser Constructor
---
    /* getNext method */
    public String getNext()
    {
        int pos = 0;
---
        if (words.size() &gt; 0)
        {
---
            pos = (int) (Math.random() * words.size());
---
            pos = Math.random() * words.size();  #paired
---
            return words.remove(pos);
---
            return words.get(pos);  #paired
---
        } // end if words.size() &gt; 0
---
        return "NONE";
    } // end getNext()
} // end class</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Exercise 9.1.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch17RandStrA2">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch17RandStrA2-1-1">The mixed up code below includes the correct code for the class, an instance variable, a constructor, and the getNext method.  In the constructor it will create an ArrayList and fill it by looping through the array and adding each string to the list.  In getNext it will return “NONE” if the length of the list is 0.  Otherwise, it will calculate a random index in the list, remove the string at that index, and return it. The blocks have been mixed up and include extra blocks that aren’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="java" data-adaptive="true" data-noindent="true">public class RandomStringChooser
{
    /* fields */
    private List&lt;String&gt; words;//&lt;String&gt;
    /* constructor */
    public RandomStringChooser(String[] wordArray)
    {
---
        words = new ArrayList&lt;String&gt;();
---
        wordList = new ArrayList&lt;String&gt;();  #paired
---
        for (int i = 0; i &lt; wordArray.length; i++)
        {
            words.add(wordArray[i]);
        } // end for loop
---
    } // end RandomStringChooser Constructor
---
    /* getNext method */
    public String getNext()
    {
        int pos = 0;
        if (words.size() == 0)
        {
---
            return "NONE";
---
        } // end if words.size() equals 0
---
        pos = (int) (Math.random() * words.size());
---
        pos = Math.random() * words.size();  #paired
---
        return words.remove(pos);
---
    } // end getNext()
} // end class</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-001675</id>
      <title>RandomStringChooser - Part A</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_UNIQUE-ID-001678">
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_UNIQUE-ID-001678_editor" data-question_label="" data-codelens="true">import java.util.List;
import java.util.ArrayList;

// Declare a public RandomStringChooser class

{

    /** Declare any fields (instance variables) **/

    /** Declare any constructors */

    /** Write the getNext method */

    /** This is a main method for testing the class */
    public static void main(String[] args)
    {
        System.out.println("It should print the words in the array in a random order and then NONE twice");
        String[] wordArray = {"wheels", "on", "the", "bus"};
        RandomStringChooser sChooser = new RandomStringChooser(wordArray);
        for (int k = 0; k &lt; 6; k++)
        {
           System.out.println(sChooser.getNext() + " ");
        }

     } // end of main

} // end of class
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("RandomStringChooser");
        // CodeTestHelper.sort = true;
    }

    @Test
    public void testMain1()
    {
        boolean passed = false;

        String expect =
                "It should print the words in the array in a random order and then NONE twice\n"
                    + "on \n"
                    + "bus \n"
                    + "wheels \n"
                    + "the \n"
                    + "NONE \n"
                    + "NONE";

        String output1 = getMethodOutput("main");

        expect = expect.substring(expect.indexOf("\n") + 1);
        output1 = output1.substring(output1.indexOf("\n") + 1);

        int num1 = countOccurences(output1, "wheels");
        int num2 = countOccurences(output1, "on");
        int num3 = countOccurences(output1, "the");
        int num4 = countOccurences(output1, "bus");
        int num5 = countOccurences(output1, "NONE");

        passed = num1 == 1 &amp;&amp; num2 == 1 &amp;&amp; num3 == 1 &amp;&amp; num4 == 1 &amp;&amp; num5 == 2;

        getResults(
                expect,
                output1,
                "Checking that each word is in output correct number of times",
                passed);
        assertTrue(passed);
    }

    @Test
    public void testMain2()
    {
        boolean passed = false;

        String expect =
                "It should print the words in the array in a random order and then NONE twice\n"
                    + "on \n"
                    + "bus \n"
                    + "wheels \n"
                    + "the \n"
                    + "NONE \n"
                    + "NONE";

        String output1 = getMethodOutput("main");
        String output2 = getMethodOutput("main");
        String output3 = getMethodOutput("main");

        passed = !output1.equals(output2) || !output2.equals(output3) || !output1.equals(output3);

        getResults(
                "Different results each time",
                "Same results each time",
                "Checking for random order",
                passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>csawesome2-13-4</id>
      <title>RandomStringChooser - Part B Parsons</title>
      <question optional="yes">
        <label>Exercise 9.3.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="csawesome2_2_ch17RandStr1">
                <div class="parsons_question parsons-text">
                  <div class="para" id="ch17RandStr1-1-1">The code below will copy the strings from the array to a list in the constructor using a general for loop.  In <code class="code-inline tex2jax_ignore">getNext</code> it will return “NONE” if the length of the list is 0.  Otherwise it till calculate a random index in the list and remove and return the string at that index. The blocks have been mixed up and include extra blocks that aren’t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-adaptive="true" data-noindent="true">public RandomLetterChooser(String str)
{
---
    super(getSingleLetters(str));
---
    super(str);  #paired
---
} // end constructor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-001680</id>
      <title>RandomStringChooser - Part B - 2nd time</title>
      <question>
        <label>Exercise 9.4.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_RandomStrChooserB1-2">
                <div class="ac_question" id="csawesome2_2_RandomStrChooserB1-2_question">
                  <div class="para" id="RandomStrChooserB1-2-1-1">Complete the <code class="code-inline tex2jax_ignore">RandomLetterChooser</code> constructor below (which can be 1 or 2 lines of code). Copy in your RandomStringChooser class from the previous lesson (delete the public from in front of it since there can only be 1 public class if you ha</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_RandomStrChooserB1-2_editor" data-question_label="" data-codelens="true">// Add in class RandomStringChooser from the previous lesson.
// Do not make it public

public class RandomLetterChooser extends RandomStringChooser
{
    /**
     * Constructs a random letter chooser using the given string str. Precondition:
     * str contains only letters.
     */
    public RandomLetterChooser(String str)
    {
        // *** write the constructor here ***!
    }

    /**
     * Returns an array of single-letter strings. Each of these strings consists of
     * a single letter from str. Element k of the returned array contains the
     * single letter at position k of str. For example, getSingleLetters("cat")
     * return the array {"c", "a", "t" }.
     */
    public static String[] getSingleLetters(String str)
    {
        String[] strArr = new String[str.length()];
        for (int i = 0; i &lt; str.length(); i++)
        {
            strArr[i] = str.substring(i, i + 1);
        }
        return strArr;
    }

    public static void main(String[] args)
    {
        RandomLetterChooser letterChooser = new RandomLetterChooser("cat");
        System.out.println(
                "This should print three letters at random from cat and then"
                    + " NONE");
        for (int k = 0; k &lt; 4; k++)
        {
            System.out.print(letterChooser.getNext());
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("RandomLetterChooser");
        // CodeTestHelper.sort = true;
    }

    @Test
    public void testMain1()
    {
        boolean passed = false;

        String expect = "This should print three letters at random from cat and then NONE\ntcaNONE";

        String output1 = getMethodOutput("main");

        expect = expect.substring(expect.indexOf("\n") + 1);
        output1 = output1.substring(output1.indexOf("\n") + 1);

        int num1 = countOccurences(output1, "c");
        int num2 = countOccurences(output1, "a");
        int num3 = countOccurences(output1, "t");
        int num5 = countOccurences(output1, "NONE");

        passed = num1 == 1 &amp;&amp; num2 == 1 &amp;&amp; num3 == 1 &amp;&amp; num5 == 1;

        getResults(
                expect,
                output1,
                "Checking that each letter is in output correct number of times",
                passed);
        assertTrue(passed);
    }

    @Test
    public void testMain2()
    {
        boolean passed = false;

        String output1 = getMethodOutput("main");
        String output2 = getMethodOutput("main");
        String output3 = getMethodOutput("main");

        passed = !output1.equals(output2) || !output2.equals(output3) || !output1.equals(output3);

        getResults(
                "Different results each time",
                "Same results each time",
                "Checking for random order",
                passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-001679</id>
      <title>Exercises</title>
    </subchapter>
  </chapter>
  <chapter>
    <id>csawesome2-14</id>
    <title>Free Response Practice</title>
    <subchapter>
      <id>UNIQUE-ID-000940</id>
      <title>RandomStringChooser - Part A</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_UNIQUE-ID-000943">
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_UNIQUE-ID-000943_editor" data-question_label="" data-codelens="true">import java.util.List;
import java.util.ArrayList;

// Declare a public RandomStringChooser class

{

    /** Declare any fields (instance variables) **/

    /** Declare any constructors */

    /** Write the getNext method */

    /** This is a main method for testing the class */
    public static void main(String[] args)
    {
        System.out.println("It should print the words in the array in a random order and then NONE twice");
        String[] wordArray = {"wheels", "on", "the", "bus"};
        RandomStringChooser sChooser = new RandomStringChooser(wordArray);
        for (int k = 0; k &lt; 6; k++)
        {
           System.out.println(sChooser.getNext() + " ");
        }

     } // end of main

} // end of class
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("RandomStringChooser");
        // CodeTestHelper.sort = true;
    }

    @Test
    public void testMain1()
    {
        boolean passed = false;

        String expect =
                "It should print the words in the array in a random order and then NONE twice\n"
                    + "on \n"
                    + "bus \n"
                    + "wheels \n"
                    + "the \n"
                    + "NONE \n"
                    + "NONE";

        String output1 = getMethodOutput("main");

        expect = expect.substring(expect.indexOf("\n") + 1);
        output1 = output1.substring(output1.indexOf("\n") + 1);

        int num1 = countOccurences(output1, "wheels");
        int num2 = countOccurences(output1, "on");
        int num3 = countOccurences(output1, "the");
        int num4 = countOccurences(output1, "bus");
        int num5 = countOccurences(output1, "NONE");

        passed = num1 == 1 &amp;&amp; num2 == 1 &amp;&amp; num3 == 1 &amp;&amp; num4 == 1 &amp;&amp; num5 == 2;

        getResults(
                expect,
                output1,
                "Checking that each word is in output correct number of times",
                passed);
        assertTrue(passed);
    }

    @Test
    public void testMain2()
    {
        boolean passed = false;

        String expect =
                "It should print the words in the array in a random order and then NONE twice\n"
                    + "on \n"
                    + "bus \n"
                    + "wheels \n"
                    + "the \n"
                    + "NONE \n"
                    + "NONE";

        String output1 = getMethodOutput("main");
        String output2 = getMethodOutput("main");
        String output3 = getMethodOutput("main");

        passed = !output1.equals(output2) || !output2.equals(output3) || !output1.equals(output3);

        getResults(
                "Different results each time",
                "Same results each time",
                "Checking for random order",
                passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-000936</id>
      <title>RandomStringChooser - Part B</title>
      <question>
        <label>Exercise 10.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_RandomStrChooserB1">
                <div class="ac_question" id="csawesome2_2_RandomStrChooserB1_question">
                  <div class="para" id="RandomStrChooserB1-1-1">Complete the <code class="code-inline tex2jax_ignore">RandomLetterChooser</code> constructor below (which can be 1 line of code). Copy in your RandomStringChooser class from the previous lesson (delete the public from in front of it since there can only be 1 public class if you have more than one).</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_RandomStrChooserB1_editor" data-question_label="" data-codelens="true">// Copy in your RandomStringChoose class from the last lesson.
// Do not include public.

public class RandomLetterChooser extends RandomStringChooser
{
    /**
     * Constructs a random letter chooser using the given string str. Precondition:
     * str contains only letters.
     */
    public RandomLetterChooser(String str)
    {
        /** write the constructor here * */
    }

    /**
     * Returns an array of single-letter strings. Each of these strings consists of
     * a single letter from str. Element k of the returned array contains the
     * single letter at position k of str. For example, getSingleLetters("cat")
     * return the array {"c", "a", "t" }.
     */
    public static String[] getSingleLetters(String str)
    {
        String[] strArr = new String[str.length()];
        for (int i = 0; i &lt; str.length(); i++)
        {
            strArr[i] = str.substring(i, i + 1);
        }
        return strArr;
    }

    public static void main(String[] args)
    {
        RandomLetterChooser letterChooser = new RandomLetterChooser("cat");
        System.out.println(
                "This should print three letters at random from cat and then"
                    + " NONE");
        for (int k = 0; k &lt; 4; k++)
        {
            System.out.print(letterChooser.getNext());
        }
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("RandomLetterChooser");
        // CodeTestHelper.sort = true;
    }

    @Test
    public void testMain1()
    {
        boolean passed = false;

        String expect = "This should print three letters at random from cat and then NONE\ntcaNONE";

        String output1 = getMethodOutput("main");

        expect = expect.substring(expect.indexOf("\n") + 1);
        output1 = output1.substring(output1.indexOf("\n") + 1);

        int num1 = countOccurences(output1, "c");
        int num2 = countOccurences(output1, "a");
        int num3 = countOccurences(output1, "t");
        int num5 = countOccurences(output1, "NONE");

        passed = num1 == 1 &amp;&amp; num2 == 1 &amp;&amp; num3 == 1 &amp;&amp; num5 == 1;

        getResults(
                expect,
                output1,
                "Checking that each letter is in output correct number of times",
                passed);
        assertTrue(passed);
    }

    @Test
    public void testMain2()
    {
        boolean passed = false;

        String output1 = getMethodOutput("main");
        String output2 = getMethodOutput("main");
        String output3 = getMethodOutput("main");

        passed = !output1.equals(output2) || !output2.equals(output3) || !output1.equals(output3);

        getResults(
                "Different results each time",
                "Same results each time",
                "Checking for random order",
                passed);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-000981</id>
      <title>StringCoder - Part A</title>
      <question>
        <label>Exercise 10.3.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_StringCoderA">
                <div class="ac_question" id="csawesome2_2_StringCoderA_question">
                  <div class="para" id="StringCoderA-1-1">Finish writing the <code class="code-inline tex2jax_ignore">StringCoder</code> method <code class="code-inline tex2jax_ignore">decodeString</code>.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_StringCoderA_editor" data-question_label="" data-codelens="true">import java.util.*;

class StringPart
{
    private int start;
    private int len;

    public StringPart(int theStart, int theLen)
    {
        // initialise instance variables
        start = theStart;
        len = theLen;
    }

    public StringPart()
    {
        start = 0;
        len = 0;
    }

    public int getStart()
    {
        return start;
    }

    public int getLength()
    {
        return len;
    }

    public String toString()
    {
        return "(" + getStart() + ", " + getLength() + ")";
    }
}

public class StringCoder
{

    private String masterString;

    /** Constructor for objects of class StringCoder */
    public StringCoder()
    {
        masterString = "sixtyzipperswerequicklypickedfromthewovenjutebag";
    }

    public StringCoder(String master)
    {
        masterString = master;
    }

    /**
     * @param parts an ArrayList of string parts that are valid in the master
     *     string Precondition: parts.size() &gt; 0
     * @return the string obtained by concatenating the parts of the master string
     */
    public String decodeString(ArrayList&lt;StringPart&gt; parts)
    {
        // *** Finish writing this method! ***
    }

    private StringPart findPart(String str)
    {
        int start = 0;
        int length = 0;
        for (int len = 1; len &lt;= str.length(); len++)
        {
            int found = masterString.indexOf(str.substring(0, len));
            if (found != -1)
            {
                start = found;
                length = len;
            }
        }
        return new StringPart(start, length);
    }

    public static void main(String[] args)
    {
        ArrayList&lt;StringPart&gt; overeager = new ArrayList&lt;StringPart&gt;();
        overeager.add(new StringPart(37, 3));
        overeager.add(new StringPart(14, 2));
        overeager.add(new StringPart(46, 2));
        overeager.add(new StringPart(9, 2));
        System.out.println("overeager is encoded as " + overeager);
        StringCoder key = new StringCoder();
        System.out.println(
                "Decoding we get "
                        + key.decodeString(overeager)
                        + " and should be overeager");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.util.ArrayList;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("StringCoder");
        // CodeTestHelper.sort = true;
    }

    @Test
    public void testMain1()
    {
        boolean passed = false;

        String expect =
                "overeager is encoded as [(37, 3), (14, 2), (46, 2), (9, 2)]\n"
                    + "Decoding we get overeager and should be overeager";

        String output = getMethodOutput("main");

        passed = getResults(expect, output, "Checking for expected output");
        assertTrue(passed);
    }

    @Test
    public void testMain2()
    {
        boolean passed = false;

        ArrayList&lt;StringPart&gt; csawesome = new ArrayList&lt;StringPart&gt;();
        csawesome.add(new StringPart(19, 0));
        csawesome.add(new StringPart(0, 1));
        csawesome.add(new StringPart(46, 1));
        csawesome.add(new StringPart(12, 2));
        csawesome.add(new StringPart(0, 1));
        csawesome.add(new StringPart(31, 2));
        csawesome.add(new StringPart(9, 1));
        String output = "csawesome is encoded as " + csawesome + "\n";

        StringCoder key = new StringCoder();
        output += "Decoding we get " + key.decodeString(csawesome) + " and should be csawesome";

        String expect =
                "csawesome is encoded as [(19, 0), (0, 1), (46, 1), (12, 2), (0, 1), (31, 2), (9,"
                    + " 1)]\n"
                    + "Decoding we get sawesome and should be csawesome";

        passed = getResults(expect, output, "Checking for expected results for \"csawesome\"");

        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-000966</id>
      <title>StringCoder - Part B</title>
      <question>
        <label>Exercise 10.4.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_StringCoderB">
                <div class="ac_question" id="csawesome2_2_StringCoderB_question">
                  <div class="para" id="StringCoderB-1-1">Complete method <code class="code-inline tex2jax_ignore">encodeString</code> below.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_StringCoderB_editor" data-question_label="" data-codelens="true">import java.util.*;

class StringPart
{
    private int start;
    private int len;

    public StringPart(int theStart, int theLen)
    {
        // initialise instance variables
        start = theStart;
        len = theLen;
    }

    public StringPart()
    {
        start = 0;
        len = 0;
    }

    public int getStart()
    {
        return start;
    }

    public int getLength()
    {
        return len;
    }

    public String toString()
    {
        return "(" + getStart() + ", " + getLength() + ")";
    }
}

public class StringCoder
{

    private String masterString;

    /** Constructor for objects of class StringCoder */
    public StringCoder()
    {
        masterString = "sixtyzipperswerequicklypickedfromthewovenjutebag";
    }

    public StringCoder(String master)
    {
        masterString = master;
    }

    /**
     * @param parts an ArrayList of string parts that are valid in the master
     *     string Precondition: parts.size() &gt; 0
     * @return the string obtained by concatenating the parts of the master string
     */
    public String decodeString(ArrayList&lt;StringPart&gt; parts)
    {
        String s = "";
        for (StringPart part : parts)
            s =
                    s
                            + masterString.substring(
                                    part.getStart(),
                                    part.getStart() + part.getLength());
        return s;
    }

    private StringPart findPart(String str)
    {
        int start = 0;
        int length = 0;
        for (int len = 1; len &lt;= str.length(); len++)
        {
            int found = masterString.indexOf(str.substring(0, len));
            if (found != -1)
            {
                start = found;
                length = len;
            }
        }
        return new StringPart(start, length);
    }

    /**
     * @param word the string to be encoded Precondition: all of the characters in
     *     word appear in the master string; word.length() &gt; 0
     * @return an ArrayList of string parts of the master string that can be
     *     combined to create word
     */
    public ArrayList&lt;StringPart&gt; encodeString(String word)
    {
        // *** Write this method for part b! ***

    }

    public static void main(String[] args)
    {
        ArrayList&lt;StringPart&gt; overeager = new ArrayList&lt;StringPart&gt;();
        overeager.add(new StringPart(37, 3));
        overeager.add(new StringPart(14, 2));
        overeager.add(new StringPart(46, 2));
        overeager.add(new StringPart(9, 2));
        System.out.println("overeager should be encoded as " + overeager);
        StringCoder key = new StringCoder();
        System.out.println(
                "Testing part b overeager is encoded as "
                        + key.encodeString("overeager"));
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("StringCoder");
        // CodeTestHelper.sort = true;
    }

    @Test
    public void testMain1()
    {
        boolean passed = false;

        String expect =
                "overeager should be encoded as [(37, 3), (14, 2), (46, 2), (9, 2)]\n"
                    + "Testing part b overeager is encoded as [(37, 3), (14, 2), (46, 2), (9, 2)]";

        String output = getMethodOutput("main");

        passed = getResults(expect, output, "Checking for expected output");
        assertTrue(passed);
    }

    @Test
    public void testMain2()
    {
        boolean passed = false;

        String expect =
                "csawesome is encoded as [(19, 1), (0, 1), (46, 1), (12, 2), (0, 1), (31, 2), (9,"
                    + " 1)]";

        StringCoder key = new StringCoder();
        String actual = "csawesome is encoded as " + key.encodeString("csawesome");

        passed = getResults(expect, actual, "Checking for expected results for \"csawesome\"");

        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-000944</id>
      <title>StudentAnswerSheet - Part A</title>
      <question>
        <label>Exercise 10.5.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_StudentAnswerKeyA">
                <div class="ac_question" id="csawesome2_2_StudentAnswerKeyA_question">
                  <div class="para" id="StudentAnswerKeyA-1-1">Complete method <code class="code-inline tex2jax_ignore">getScore</code> below.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_StudentAnswerKeyA_editor" data-question_label="" data-codelens="true">import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class StudentAnswerSheet
{
    private List&lt;String&gt; answers; // the list of the student's answers
    private String name;

    public StudentAnswerSheet(String nm, List&lt;String&gt; ans)
    {
        name = nm;
        answers = new ArrayList&lt;String&gt;();
        for (String a : ans) answers.add(a);
    }

    /**
     * @param key the list of correct answers, represented as strings of length one
     *     Precondition: key.size() is equal to the number of answers in this
     *     answer sheet
     * @return this student's test score
     */
    public double getScore(ArrayList&lt;String&gt; key)
    {
        // *** Write this method! ***
    }

    /**
     * @return the name of the student
     */
    public String getName()
    {
        return name;
    }

    public static void main(String[] args)
    {
        ArrayList&lt;String&gt; key =
                new ArrayList&lt;String&gt;(
                        Arrays.asList(
                                new String[]
                                {
                                    "A", "C", "D", "E", "B", "C", "E", "B", "B",
                                    "C"
                                }));

        ArrayList&lt;String&gt; answers1 =
                new ArrayList&lt;String&gt;(
                        Arrays.asList(
                                new String[]
                                {
                                    "A", "B", "D", "E", "A", "C", "?", "B", "D",
                                    "C"
                                }));
        StudentAnswerSheet s1 = new StudentAnswerSheet("S1", answers1);
        System.out.println(
                "Your score for s1 is: "
                        + s1.getScore(key)
                        + " and should be 5.25");

        ArrayList&lt;String&gt; answers2 =
                new ArrayList&lt;String&gt;(
                        Arrays.asList(
                                new String[]
                                {
                                    "A", "?", "D", "E", "A", "C", "?", "B", "D",
                                    "C"
                                }));
        StudentAnswerSheet s2 = new StudentAnswerSheet("S2", answers2);
        System.out.println(
                "Your score for s2 is: "
                        + s2.getScore(key)
                        + " and should be 5.5");

        ArrayList&lt;String&gt; answers3 =
                new ArrayList&lt;String&gt;(
                        Arrays.asList(
                                new String[]
                                {
                                    "A", "?", "D", "E", "A", "C", "E", "B", "D",
                                    "C"
                                }));
        StudentAnswerSheet s3 = new StudentAnswerSheet("S3", answers3);
        System.out.println(
                "Your score for s3 is: "
                        + s3.getScore(key)
                        + " and should be 6.5");

        ArrayList&lt;String&gt; answers4 =
                new ArrayList&lt;String&gt;(
                        Arrays.asList(
                                new String[]
                                {
                                    "A", "C", "D", "E", "A", "C", "E", "B", "D",
                                    "C"
                                }));
        StudentAnswerSheet s4 = new StudentAnswerSheet("S4", answers4);
        System.out.println(
                "Your score for s4 is: "
                        + s4.getScore(key)
                        + " and should be 7.5");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("StudentAnswerSheet");
        // CodeTestHelper.sort = true;
    }

    @Test
    public void testMain1()
    {
        boolean passed = false;

        String expect =
                "Your score for s1 is: 5.25 and should be 5.25\n"
                    + "Your score for s2 is: 5.5 and should be 5.5\n"
                    + "Your score for s3 is: 6.5 and should be 6.5\n"
                    + "Your score for s4 is: 7.5 and should be 7.5";

        String output = getMethodOutput("main");

        passed = getResults(expect, output, "Checking for expected output");
        assertTrue(passed);
    }

    @Test
    public void testMain2()
    {
        boolean passed = false;

        String keyList = "A A A B B B C C C D D D E E E";
        String ansList = "A B ? B C ? C D ? D E ? E A ?";

        ArrayList&lt;String&gt; key = new ArrayList&lt;String&gt;(Arrays.asList(keyList.split(" ")));

        ArrayList&lt;String&gt; answers1 = new ArrayList&lt;String&gt;(Arrays.asList(ansList.split(" ")));

        StudentAnswerSheet s1 = new StudentAnswerSheet("S1", answers1);

        String output = "Your score for s1 is: " + s1.getScore(key);

        String expect = "Your score for s1 is: 3.75";

        passed = getResults(expect, output, "Checking for expected output");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-000949</id>
      <title>StudentAnswerSheet - Part B</title>
      <question>
        <label>Exercise 10.6.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_StudentAnswerKeyB">
                <div class="ac_question" id="csawesome2_2_StudentAnswerKeyB_question">
                  <div class="para" id="StudentAnswerKeyB-1-1">Complete method <code class="code-inline tex2jax_ignore">highestScoringStudent</code> below.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_StudentAnswerKeyB_editor" data-question_label="" data-codelens="true">import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class StudentAnswerSheet
{
    private List&lt;String&gt; answers; // the list of the student's answers
    private String name;

    public StudentAnswerSheet(String nm, List&lt;String&gt; ans)
    {
        name = nm;
        answers = new ArrayList&lt;String&gt;();
        for (String a : ans) answers.add(a);
    }

    /**
     * @param key the list of correct answers, represented as strings of length one
     *     Precondition: key.size() is equal to the number of answers in this
     *     answer sheet
     * @return this student's test score
     */
    public double getScore(ArrayList&lt;String&gt; key)
    {
        double score = 0;
        for (int i = 0; i &lt; key.size(); i++)
        {
            if (key.get(i).equals(answers.get(i)))
            {
                 score = score + 1.0;
            }
            else if (!answers.get(i).equals("?"))
            {
                 score = score - 0.25;
            }
        }
        return score;
    }

    /**
     * @return the name of the student
     */
    public String getName()
    {
        return name;
    }
}

public class TestResults
{
    private ArrayList&lt;StudentAnswerSheet&gt; sheets;

    public TestResults(ArrayList&lt;StudentAnswerSheet&gt; shs)
    {
        sheets = new ArrayList&lt;StudentAnswerSheet&gt;();
        for (StudentAnswerSheet s : shs) sheets.add(s);
    }

    /**
     * Precondition: sheets.size() &gt; 0; all answer sheets in sheets have the same
     * number of answers
     *
     * @param key the list of correct answers represented as strings of length one
     *     Precondition: key.size() is equal to the number of answers in each of
     *     the answer sheets in sheets
     * @return the name of the student with the highest score
     */
    public String highestScoringStudent(ArrayList&lt;String&gt; key)
    {
        // *** Write this method! ***
    }

    public static void main(String[] args)
    {
        ArrayList&lt;String&gt; key =
                new ArrayList&lt;String&gt;(
                        Arrays.asList(
                                new String[]
                                {
                                    "A", "C", "D", "E", "B", "C", "E", "B", "B",
                                    "C"
                                }));

        ArrayList&lt;String&gt; answers1 =
                new ArrayList&lt;String&gt;(
                        Arrays.asList(
                                new String[]
                                {
                                    "A", "B", "D", "E", "A", "C", "?", "B", "D",
                                    "C"
                                }));
        StudentAnswerSheet s1 = new StudentAnswerSheet("S1", answers1);
        System.out.println(
                "Your score for s1 is: "
                        + s1.getScore(key)
                        + " and should be 5.25");

        ArrayList&lt;String&gt; answers2 =
                new ArrayList&lt;String&gt;(
                        Arrays.asList(
                                new String[]
                                {
                                    "A", "?", "D", "E", "A", "C", "?", "B", "D",
                                    "C"
                                }));
        StudentAnswerSheet s2 = new StudentAnswerSheet("S2", answers2);
        System.out.println(
                "Your score for s2 is: "
                        + s2.getScore(key)
                        + " and should be 5.5");

        ArrayList&lt;String&gt; answers3 =
                new ArrayList&lt;String&gt;(
                        Arrays.asList(
                                new String[]
                                {
                                    "A", "?", "D", "E", "A", "C", "E", "B", "D",
                                    "C"
                                }));
        StudentAnswerSheet s3 = new StudentAnswerSheet("S3", answers3);
        System.out.println(
                "Your score for s3 is: "
                        + s3.getScore(key)
                        + " and should be 6.5");

        ArrayList&lt;String&gt; answers4 =
                new ArrayList&lt;String&gt;(
                        Arrays.asList(
                                new String[]
                                {
                                    "A", "C", "D", "E", "A", "C", "E", "B", "D",
                                    "C"
                                }));
        StudentAnswerSheet s4 = new StudentAnswerSheet("S4", answers4);
        System.out.println(
                "Your score for s4 is: "
                        + s4.getScore(key)
                        + " and should be 7.5");

        ArrayList&lt;StudentAnswerSheet&gt; sheets = new ArrayList&lt;StudentAnswerSheet&gt;();
        sheets.add(s1);
        sheets.add(s2);
        sheets.add(s3);
        sheets.add(s4);

        TestResults results = new TestResults(sheets);
        System.out.println(
                "Your best is: "
                        + results.highestScoringStudent(key)
                        + " and should be S4");
    }
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TestResults");
        // CodeTestHelper.sort = true;
    }

    @Test
    public void testMain1()
    {
        boolean passed = false;

        String expect =
                "Your score for s1 is: 5.25 and should be 5.25\n"
                    + "Your score for s2 is: 5.5 and should be 5.5\n"
                    + "Your score for s3 is: 6.5 and should be 6.5\n"
                    + "Your score for s4 is: 7.5 and should be 7.5\n"
                    + "Your best is: S4 and should be S4";

        String output = getMethodOutput("main");

        passed = getResults(expect, output, "Checking for expected output");
        assertTrue(passed);
    }

    @Test
    public void testMain2()
    {
        boolean passed = false;

        String keyList = "A A A B B B C C C D D D E E E";
        String ansList1 = "A B ? B C ? C D ? D E ? E A ?";
        String ansList2 = "A B D B C D C D B D E C E A B";
        String ansList3 = "A A A B B B C C C D D D E E E";
        String ansList4 = "B B B B B B C C C C C C E E E";

        ArrayList&lt;String&gt; key = new ArrayList&lt;String&gt;(Arrays.asList(keyList.split(" ")));

        ArrayList&lt;String&gt; answers1 = new ArrayList&lt;String&gt;(Arrays.asList(ansList1.split(" ")));
        ArrayList&lt;String&gt; answers2 = new ArrayList&lt;String&gt;(Arrays.asList(ansList2.split(" ")));
        ArrayList&lt;String&gt; answers3 = new ArrayList&lt;String&gt;(Arrays.asList(ansList3.split(" ")));
        ArrayList&lt;String&gt; answers4 = new ArrayList&lt;String&gt;(Arrays.asList(ansList4.split(" ")));

        StudentAnswerSheet s1 = new StudentAnswerSheet("S1", answers1);
        StudentAnswerSheet s2 = new StudentAnswerSheet("S2", answers2);
        StudentAnswerSheet s3 = new StudentAnswerSheet("S2", answers3);
        StudentAnswerSheet s4 = new StudentAnswerSheet("S2", answers4);

        ArrayList&lt;StudentAnswerSheet&gt; sheets = new ArrayList&lt;StudentAnswerSheet&gt;();
        sheets.add(s1);
        sheets.add(s2);
        sheets.add(s3);
        sheets.add(s4);

        TestResults results = new TestResults(sheets);

        // change this next line
        String output = "Your best is: " + results.highestScoringStudent(key);

        String expect = "Your best is: S2";

        passed = getResults(expect, output, "Checking for expected output");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-000957</id>
      <title>SkyView - Part A</title>
      <question>
        <label>Exercise 10.7.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_SkyViewA">
                <div class="ac_question" id="csawesome2_2_SkyViewA_question">
                  <div class="para" id="SkyViewA-1-1">Complete the <code class="code-inline tex2jax_ignore">SkyView</code> constructor in the class below.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_SkyViewA_editor" data-question_label="" data-codelens="true">public class SkyView
{
    private double[][] view;

    /**
     * Constructs a SkyView object from a 1-dimensional array of scan data.
     *
     * @param numRows the number of rows represented in the view Precondition:
     *     numRows &gt; 0
     * @param numCols the number of columns represented in the view Precondition:
     *     numCols &gt; 0
     * @param scanned the scan data received from the telescope, stored in
     *     telescope order Precondition: scanned.length == numRows * numCols
     *     Postcondition: view has been created as a rectangular 2-dimensional
     *     array with numRows rows and numCols columns and the values in scanned
     *     have been copied to view and are ordered as in the original rectangular
     *     area of sky.
     */
    public SkyView(int numRows, int numCols, double[] scanned)
    {
        // *** Write the constructor! ***
    }

    /** This is a main method for testing the class */
    public static void main(String[] args)
    {
        double[] values =
        {
            0.3, 0.7, 0.8, 0.4, 1.4, 1.1, 0.2, 0.5, 0.1, 1.6, 0.6, 0.9
        };
        SkyView sView = new SkyView(4, 3, values);
        System.out.println("It should print the following:");
        System.out.println("0.3, 0.7, 0.8,");
        System.out.println("1.1, 1.4, 0.4,");
        System.out.println("0.2, 0.5, 0.1,");
        System.out.println("0.9, 0.6, 1.6,");
        System.out.println();
        System.out.println("Your results");
        for (int row = 0; row &lt; sView.view.length; row++)
        {
            for (int col = 0; col &lt; sView.view[0].length; col++)
            {
                System.out.print(sView.view[row][col] + ", ");
            }
            System.out.println();
        }

        System.out.println();

        double[] val2 = {0.3, 0.7, 0.8, 0.4, 1.4, 1.1};
        sView = new SkyView(3, 2, val2);
        System.out.println("It should print the following:");
        System.out.println("0.3, 0.7,");
        System.out.println("0.4, 0.8,");
        System.out.println("1.4, 1.1,");
        System.out.println();
        System.out.println("Your results");
        for (int row = 0; row &lt; sView.view.length; row++)
        {
            for (int col = 0; col &lt; sView.view[0].length; col++)
            {
                System.out.print(sView.view[row][col] + ", ");
            }
            System.out.println();
        }
    } // end of main

    public String toString()
    {
        String output = "";
        for (int row = 0; row &lt; view.length; row++)
        {
            for (int col = 0; col &lt; view[row].length; col++)
            {
                output += view[row][col] + ", ";
            }
            output += "\n";
        }
        return output;
    }
} // end of class
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

// import java.util.Arrays;
// import java.util.ArrayList;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("SkyView");
        // CodeTestHelper.sort = true;
    }

    @Test
    public void testMain1()
    {
        boolean passed = false;

        double[] val2 = {0.3, 0.7, 0.4, 0.8, 1.4, 1.1};
        SkyView sView = new SkyView(3, 2, val2);
        String expect = "0.3, 0.7,\n0.8, 0.4,\n1.4, 1.1,";

        String output = sView.toString().trim();

        passed = getResults(expect, output, "Checking for expected output");
        assertTrue(passed);
    }

    @Test
    public void testMain2()
    {
        boolean passed = false;

        double[] val2 = {0.3, 0.7, 0.4, 0.8, 1.4, 1.1};
        SkyView sView = new SkyView(2, 3, val2);
        String expect = "0.3, 0.7, 0.4, \n1.1, 1.4, 0.8,";

        String output = sView.toString().trim();

        passed = getResults(expect, output, "Checking for expected output");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-000976</id>
      <title>SkyView - Part B</title>
      <question>
        <label>Exercise 10.8.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_SkyViewB">
                <div class="ac_question" id="csawesome2_2_SkyViewB_question">
                  <div class="para" id="SkyViewB-1-1">Finish writing the <code class="code-inline tex2jax_ignore">getAverage</code> method in the class below.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_SkyViewB_editor" data-question_label="" data-codelens="true">public class SkyView
{
    private double[][] view;

    /**
     * Constructs a SkyView object from a 1-dimensional array of scan data.
     *
     * @param numRows the number of rows represented in the view Precondition:
     *     numRows &gt; 0
     * @param numCols the number of columns represented in the view Precondition:
     *     numCols &gt; 0
     * @param scanned the scan data received from the telescope, stored in
     *     telescope order Precondition: scanned.length == numRows * numCols
     *     Postcondition: view has been created as a rectangular 2-dimensional
     *     array with numRows rows and numCols columns and the values in scanned
     *     have been copied to view and are ordered as in the original rectangular
     *     area of sky.
     */
    public SkyView(int numRows, int numCols, double[] scanned)
    {
        view = new double[numRows][numCols];
        int scannedIndex = 0;
        for (int r = 0; r &lt; numRows; r++)
        {
            // if even row number go left to right */
            if (r % 2 == 0)
            {
                for (int c = 0; c &lt; numCols; c++)
                {
                    view[r][c] = scanned[scannedIndex];
                    scannedIndex++;
                }
            }
            else
            {
                for (int c = numCols - 1; c &gt;= 0; c--)
                {
                    view[r][c] = scanned[scannedIndex];
                    scannedIndex++;
                }
            }
        }
    }

    /**
     * Returns the average of the values in a rectangular section of view.
     *
     * @param startRow the first row index of the section
     * @param endRow the last row index of the section
     * @param startCol the first column index of the section
     * @param endCol the last column index of the section Precondition: 0 &lt;=
     *     startRow &lt;= endRow &lt; view.length Precondition: 0 &lt;= startCol &lt;= endCol &lt;
     *     view[0].length
     * @return the average of the values in the specified section of view
     */
    public double getAverage(int startRow, int endRow, int startCol, int endCol)
    {
        // *** Finish writing this method! ***
    }

    /** This is a main method for testing getAverage */
    public static void main(String[] args)
    {
        double[] startArray =
        {
            0.3, 0.7, 0.8, 0.4, 1.4, 1.1, 0.2, 0.5, 0.1, 1.6, 0.6, 0.9
        };
        SkyView sView = new SkyView(4, 3, startArray);
        System.out.println(
                "getAverage(1,2,0,1) should return 0.8 and returns "
                        + sView.getAverage(1, 2, 0, 1));
    } // end of main
} // end of class
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

// import java.util.Arrays;
// import java.util.ArrayList;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("SkyView");
        // CodeTestHelper.sort = true;
    }

    @Test
    public void testMain1()
    {
        boolean passed = false;

        double[] val2 = {0.3, 0.7, 0.4, 0.8, 1.4, 1.1};

        String view = "0.3, 0.7,\n0.8, 0.4,\n1.4,1.1,";

        SkyView sView = new SkyView(3, 2, val2);
        String expect = "getAverage(1,2,0,1)  --&gt; 0.925";

        String output = "getAverage(1,2,0,1)  --&gt; " + sView.getAverage(1, 2, 0, 1);

        passed = getResults(expect, output, "Checking for expected output from:\n" + view);
        assertTrue(passed);
    }

    @Test
    public void testMain2()
    {
        boolean passed = false;

        double[] val2 = {0.3, 0.7, 0.4, 0.8, 1.4, 1.1};
        String view = "0.3, 0.7, 0.4,\n1.1, 1.4,  0.8,";
        SkyView sView = new SkyView(2, 3, val2);
        String expect = "getAverage(1,2,0,1) --&gt; 0.875";

        String output = "getAverage(1,2,0,1)  --&gt; " + sView.getAverage(0, 1, 0, 1);

        passed = getResults(expect, output, "Checking for expected output from:\n" + view);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-000930</id>
      <title>Hidden Word - Write Class</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_UNIQUE-ID-000935">
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_UNIQUE-ID-000935_editor" data-question_label="" data-codelens="true">// Declare the public HiddenWord class below

{

    /** Declare any fields (instance variables) **/

    /** Declare a constructor */

    /** Write the getHint method */

    /** This is a main method for testing the class */
    public static void main(String[] args)
    {
        HiddenWord puzzle = new HiddenWord("HARPS");
        System.out.println(puzzle.getHint("AAAAA") + " it should print +A+++");
        System.out.println(puzzle.getHint("HELLO") + " it should print H****");
        System.out.println(puzzle.getHint("HEART") + " it should print H*++*");
        System.out.println(puzzle.getHint("HARMS") + " it should print HAR*S");
        System.out.println(puzzle.getHint("HARPS") + " it should print HARPS");

    } // end of main

} // end of class
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

// import java.util.Arrays;
// import java.util.ArrayList;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("HiddenWord");
        // CodeTestHelper.sort = true;
    }

    @Test
    public void testMain1()
    {
        boolean passed = false;

        String expect =
                "+A+++ it should print +A+++\n"
                    + "H**** it should print H****\n"
                    + "H*++* it should print H*++*\n"
                    + "HAR*S it should print HAR*S\n"
                    + "HARPS it should print HARPS";

        String output = getMethodOutput("main");

        passed = getResults(expect, output, "Checking for expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testMain2()
    {
        boolean passed = false;

        String word = "CSAWESOME";
        String hint = "CSCSCSZZZ";

        HiddenWord puzzle = new HiddenWord(word);

        String output = puzzle.getHint(hint);
        String expect = "CS+++S***";

        passed =
                getResults(
                        expect,
                        output,
                        "Checking for expected output \"" + word + "\" with hint \"" + hint + "\"");
        assertTrue(passed);
    }

    @Test
    public void testMain3()
    {
        boolean passed = false;

        String word = "CSAWESOME";
        String hint = "EZZZZSOME";

        HiddenWord puzzle = new HiddenWord(word);

        String output = puzzle.getHint(hint);
        String expect = "+****SOME";

        passed =
                getResults(
                        expect,
                        output,
                        "Checking for expected output \"" + word + "\" with hint \"" + hint + "\"");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-000953</id>
      <title>ArrayTester - Part A</title>
      <question>
        <label>Exercise 10.10.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_isLatin">
                <div class="ac_question" id="csawesome2_2_isLatin_question">
                  <div class="para" id="isLatin-1-1">Complete the method <code class="code-inline tex2jax_ignore">getColumn</code> below.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_isLatin_editor" data-question_label="" data-codelens="true">public class ArrayTester
{

    /**
     * Returns an array containing the elements of column c of arr2D in the same
     * order as they appear in arr2D. Precondition: c is a valid column index in
     * arr2D. Postcondition: arr2D is unchanged.
     */
    public static int[] getColumn(int[][] arr2D, int c)
    {
        /** Complete this method * */
    }

    // Main method to test getColumn method
    public static void main(String[] args)
    {
        int[][] arr2D = { {0, 1, 2}, {3, 4, 5}, {6, 7, 8}, {9, 5, 3}};
        int[] result = ArrayTester.getColumn(arr2D, 1);
        System.out.println(
                "It should print the values from the second column: 1 4 7 5.");
        for (int i = 0; i &lt; result.length; i++)
        {
            System.out.print(result[i] + " ");
        }
    } // end of main
} // end of class
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.util.Arrays;

// import java.util.ArrayList;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ArrayTester");
        // CodeTestHelper.sort = true;
    }

    @Test
    public void testMain1()
    {
        boolean passed = false;

        String expect = "It should print the values from the second column: 1 4 7 5.\n1 4 7 5";

        String output = getMethodOutput("main");

        passed = getResults(expect, output, "Checking for expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testMain2()
    {
        boolean passed = false;

        int[][] arr2D = { {0, 1, 2}, {3, 4, 5}, {6, 7, 8}, {9, 5, 3}};

        String arrayStr = "[[0, 1, 2],\n [3, 4, 5],\n [6, 7, 8],\n [9, 5, 3]]";

        int[] result = ArrayTester.getColumn(arr2D, 0);

        String expect = "[0, 3, 6, 9]";
        String output = Arrays.toString(result);

        passed =
                getResults(
                        expect,
                        output,
                        "Checking for expected output for getColumn(arr2D, 0)\n" + arrayStr);
        assertTrue(passed);
    }

    @Test
    public void testMain3()
    {
        boolean passed = false;

        int[][] arr2D = { {0, 1, 2, 3, 4, 5}, {6, 7, 8, 9, 5, 3}};

        String arrayStr = "[[0, 1, 2, 3, 4, 5],\n [6, 7, 8, 9, 5, 3]]";

        int[] result = ArrayTester.getColumn(arr2D, 2);

        String expect = "[2, 8]";
        String output = Arrays.toString(result);

        passed =
                getResults(
                        expect,
                        output,
                        "Checking for expected output for getColumn(arr2D, 0)\n" + arrayStr);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-000970</id>
      <title>ArrayTester - Part B</title>
      <question>
        <label>Exercise 10.11.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_isLatinTwo">
                <div class="ac_question" id="csawesome2_2_isLatinTwo_question">
                  <div class="para" id="isLatinTwo-1-1">Complete the method <code class="code-inline tex2jax_ignore">isLatin</code> below.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_isLatinTwo_editor" data-question_label="" data-codelens="true">public class ArrayTester
{

    public static boolean isLatin(int[][] square)
    {
        // put your solution here

    }

    /** Copy in your solution of getColumn from the previous section */
    public static int[] getColumn(int[][] arr2D, int c)
    {
        // put your solution here

    }

    // Main method to test getColumn method
    public static void main(String[] args)
    {
        int[][] arr2D = { {1, 2, 3}, {2, 3, 1}, {3, 1, 2}};
        boolean test = isLatin(arr2D);
        System.out.println(
                "If isLatin is implemented correctly, then test should be true:"
                        + test);
        if (!test)
        {
            System.out.print(
                    "Uh oh! isLatin(test) was false, but it should be true.");
        }
        else
        {
            System.out.println("Correct!");
        }
    } // end of main

    /** Returns true if and only if every value in arr1 appears in arr2. */
    public static boolean hasAllValues(int[] arr1, int[] arr2)
    {

        boolean[] flags = new boolean[arr1.length]; // default values false

        for (int i = 0; i &lt; arr1.length; i++)
        {
            for (int j = 0; j &lt; arr2.length; j++)
            {
                if (arr1[i] == arr2[j])
                {
                    flags[i] = true;
                }
            }
        }
        for (boolean b : flags)
        {
            if (b == false)
            {
                return false;
            }
        }
        return true;
    }

    /** Returns true if arr contains any duplicate values; false otherwise. */
    public static boolean containsDuplicates(int[] arr)
    {
        for (int i = 0; i &lt; arr.length - 1; i++)
        {
            for (int j = i + 1; j &lt; arr.length; j++)
            {
                if (arr[i] == arr[j])
                {
                    return true;
                }
            }
        }
        return false;
    }
} // end of the class
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

// import java.util.ArrayList;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("ArrayTester");
        // CodeTestHelper.sort = true;
    }

    @Test
    public void testMain1()
    {
        boolean passed = false;

        String expect =
                "If isLatin is implemented correctly, then test should be true:true\nCorrect!";

        String output = getMethodOutput("main");

        passed = getResults(expect, output, "Checking for expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testMain2()
    {
        boolean passed = false;

        int[][] arr2D = { {1, 2, 3}, {2, 3, 1}, {3, 1, 2}};

        String arrayStr = "[[1, 2, 3],\n [2, 3, 1],\n [3, 1, 2]]";

        String expect = "true";
        String output = "" + ArrayTester.isLatin(arr2D);

        passed =
                getResults(
                        expect,
                        output,
                        "Checking for expected output for isLatin(arr2D)\n" + arrayStr);
        assertTrue(passed);
    }

    @Test
    public void testMain3()
    {
        boolean passed = false;

        int[][] arr2D = { {1, 2, 3}, {2, 3, 1}, {7, 8, 9}};

        String arrayStr = "[[1, 2, 3],\n [2, 3, 1],\n [7, 8, 9]]";

        String expect = "false";
        String output = "" + ArrayTester.isLatin(arr2D);

        passed =
                getResults(
                        expect,
                        output,
                        "Checking for expected output for isLatin(arr2D)\n" + arrayStr);
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-000986</id>
      <title>NumberGroup - Part B</title>
      <question>
        <label>Exercise 10.12.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_NumberGroupB">
                <div class="ac_question" id="csawesome2_2_NumberGroupB_question">
                  <div class="para" id="NumberGroupB-1-1">Complete the class <code class="code-inline tex2jax_ignore">Range</code> below with instance variables, a constructor, and a contains method.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_NumberGroupB_editor" data-question_label="" data-codelens="true">class NumberGroup
{
    /* Implementation not shown */
}

public class Range extends NumberGroup
{
    // Write the instance variables for the Range class here

    // Write the Range constructor with 2 parameters
    // for the minimum and maximum values in the range

    // Write the contains method which tests whether a
    // given number is in the range.

    // Main method to test the class
    public static void main(String[] args)
    {
        System.out.println("This is testing the constructor");
        Range test = new Range(5, 8);
        // Test the contains method
        System.out.println(
                "Does the range contain 4 (should be false): " + test.contains(4));
        System.out.println(
                "Does the range contain 5 (should be true): " + test.contains(5));
    } // end of main
} // end of class
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

// import java.util.ArrayList;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Range");
        // CodeTestHelper.sort = true;
    }

    @Test
    public void testMain1()
    {
        boolean passed = false;

        String expect =
                "This is testing the constructor\n"
                    + "Does the range contain 4 (should be false): false\n"
                    + "Does the range contain 5 (should be true): true";

        String output = getMethodOutput("main");

        passed = getResults(expect, output, "Checking for expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testMain2()
    {
        boolean passed = false;

        Range test = new Range(5, 80);
        // Test the contains method
        String expect = "false";
        String output = "" + test.contains(0);

        passed = getResults(expect, output, "Checking that Range(5, 80) contains(0)");
        assertTrue(passed);
    }

    @Test
    public void testMain3()
    {
        boolean passed = false;

        Range test = new Range(5, 80);
        // Test the contains method
        String expect = "true";
        String output = "" + test.contains(10);

        passed = getResults(expect, output, "Checking that Range(5, 80) contains(10)");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>numbergroup-part-c</id>
      <title>NumberGroup - Part C</title>
      <question>
        <label>Exercise 10.13.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="csawesome2_2_NumberGroupC">
                <div class="ac_question" id="csawesome2_2_NumberGroupC_question">
                  <div class="para" id="NumberGroupC-1-1">Write the method <code class="code-inline tex2jax_ignore">contains</code> below in the class MultiGroups.</div>
                </div>
                <textarea data-lang="java" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="csawesome2_2_NumberGroupC_editor" data-question_label="" data-codelens="true">import java.util.ArrayList;

class NumberGroup
{
    public boolean contains(int num)
    {
        /* Implementation not shown */
        return true;
    }
}

class Range extends NumberGroup
{
    // copy in your Range class from the previous lesson here
}

public class MultiGroups extends NumberGroup
{

    private ArrayList&lt;NumberGroup&gt; groupList;

    public MultiGroups(Range r1, Range r2, Range r3)
    {
        groupList = new ArrayList&lt;NumberGroup&gt;();
        groupList.add(r1);
        groupList.add(r2);
        groupList.add(r3);
    }

    /**
     * Returns true if at least one of the number groups in this multiple group
     * contains num; false otherwise
     */
    public boolean contains(int num)
    {
        // Write the MultiGroup contains method here

    }

    // Main method to test the class
    public static void main(String[] args)
    {
        MultiGroups multiple1 =
                new MultiGroups(
                        new Range(5, 8), new Range(10, 12), new Range(1, 6));
        System.out.println(
                "Multiple1 contains 2 (should be true)? " + multiple1.contains(2));
        System.out.println(
                "Multiple1 contains 9 (should be false)? "
                        + multiple1.contains(9));
        System.out.println(
                "Multiple1 contains 6 (should be true)? " + multiple1.contains(6));
    } // end of main
}
====
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

// import java.util.ArrayList;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("MultiGroups");
        // CodeTestHelper.sort = true;
    }

    @Test
    public void testMain1()
    {
        boolean passed = false;

        String expect =
                "Multiple1 contains 2 (should be true)? true\n"
                    + "Multiple1 contains 9 (should be false)? false\n"
                    + "Multiple1 contains 6 (should be true)? true";

        String output = getMethodOutput("main");

        passed = getResults(expect, output, "Checking for expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testMain2()
    {
        boolean passed = false;

        MultiGroups multiple1 =
                new MultiGroups(new Range(5, 8), new Range(10, 12), new Range(15, 20));

        String expect = "false";
        String output = "" + multiple1.contains(0);

        passed =
                getResults(
                        expect,
                        output,
                        "Checking that MultiGroups with Range(5, 8), Range(10, 12), Range(15, 20)"
                            + " contains(0) should be false");
        assertTrue(passed);
    }

    @Test
    public void testMain3()
    {
        boolean passed = false;

        MultiGroups multiple1 =
                new MultiGroups(new Range(5, 8), new Range(10, 12), new Range(15, 20));

        String expect = "true";
        String output = "" + multiple1.contains(11);

        passed =
                getResults(
                        expect,
                        output,
                        "Checking that MultiGroups with Range(5, 8), Range(10, 12), Range(15, 20)"
                            + " contains(11) should be true");
        assertTrue(passed);
    }
}
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>UNIQUE-ID-000952</id>
      <title>Exercises</title>
    </subchapter>
  </chapter>
  <chapter>
    <id>csawesome2-15</id>
    <title>Stories</title>
    <subchapter>
      <id>UNIQUE-ID-000995</id>
      <title>Challenges In Computing</title>
    </subchapter>
    <subchapter>
      <id>meet-the-interviewees</id>
      <title>Meet The Interviewees</title>
      <question>
        <label>Video: fwHw0rGbfZQ</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="fwHw0rGbfZQ" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: NdWGoGKtV0M</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="NdWGoGKtV0M" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: mQIH02_ecNw</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="mQIH02_ecNw" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: 1X9iuUv6UPs</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="1X9iuUv6UPs" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: pgGEyY6uY_A</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="pgGEyY6uY_A" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: FW1fRJ4Ak3U</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="FW1fRJ4Ak3U" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: k6ZQjoFzXRg</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="k6ZQjoFzXRg" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: 1ItDEthB9gc</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="1ItDEthB9gc" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: 7hDnhKAdBbI</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="7hDnhKAdBbI" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: C_NIICnTb_I</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="C_NIICnTb_I" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: bTDPBoq64EY</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="bTDPBoq64EY" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: 1blqqSnIIFo</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="1blqqSnIIFo" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Video: K5oKi8Mzpro</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone yt_section">
              <div id="csawesome2_2_" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="K5oKi8Mzpro" data-video-divid="csawesome2_2_" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
  </chapter>
</manifest>
